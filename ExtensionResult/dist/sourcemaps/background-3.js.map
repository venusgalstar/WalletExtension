{"version":3,"sources":["node_modules/multibase/src/constants.js","node_modules/multiaddr/src/protocols-table.js","node_modules/multiaddr/src/codec.js","node_modules/ipfs/node_modules/multihashing-async/src/crypto.js","node_modules/libp2p-crypto/src/hmac/index-browser.js","node_modules/libp2p-crypto/src/random-bytes.js","node_modules/libp2p-crypto/src/aes/index.js","node_modules/libp2p-crypto/src/pbkdf2.js","node_modules/ipfs/src/core/components/is-online.js","node_modules/ipfs/src/core/components/config.js","node_modules/ipfs/src/core/components/dns.js","node_modules/ipfs/src/core/components/version.js","node_modules/ipfs/src/core/components/key.js","node_modules/ipfs/src/core/components/bootstrap.js","node_modules/ipfs/src/core/components/repo.js","node_modules/ipfs/src/core/components/ping-readable-stream.js","node_modules/ipfs/src/core/components/ping-pull-stream.js","node_modules/ipfs/src/core/components/id.js","node_modules/ipfs/src/core/components/ping.js","node_modules/ipfs/src/core/components/block.js","node_modules/ipfs/src/core/components/stop.js","node_modules/ipfs/src/core/components/resolve.js","node_modules/ipfs/src/core/components/pre-start.js","node_modules/ipfs/src/core/components/pubsub.js","node_modules/ipfs/src/core/components/bitswap.js","node_modules/ipfs/src/core/components/swarm.js","node_modules/ipfs/src/core/components/stats.js","node_modules/ipfs/src/core/components/object.js","node_modules/ipfs/src/core/components/dht.js","node_modules/ipfs/src/core/components/dag.js","node_modules/ipfs/src/core/components/pin.js","node_modules/ipfs/src/core/components/name.js","node_modules/ipfs/src/core/components/start.js","node_modules/ipfs/src/core/components/init.js","node_modules/ipfs/src/core/components/libp2p.js","node_modules/ipfs/src/core/components/files-regular/index.js","node_modules/ipfs/src/core/components/files-mfs.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multicodec/src/maps.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multicodec/node_modules/varint/index.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multicodec/src/util.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multihashes/src/constants.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/uint8arrays/from-string.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multibase/src/util.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multibase/src/constants.js","node_modules/@ensdomains/content-hash/node_modules/multibase/src/rfc4648.js","node_modules/@ensdomains/content-hash/node_modules/multibase/src/base.js","node_modules/@ensdomains/content-hash/node_modules/uint8arrays/node_modules/multibase/src/constants.js","node_modules/eth-block-tracker/node_modules/pify/index.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/keccak/lib/keccak-state-unroll.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/keccak/lib/api/keccak.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/keccak/lib/api/shake.js","node_modules/eth-json-rpc-middleware/node_modules/secp256k1/lib/elliptic/index.js","node_modules/eth-json-rpc-middleware/node_modules/secp256k1/lib/index.js","node_modules/eth-json-rpc-middleware/node_modules/keccak/lib/keccak.js","node_modules/eth-json-rpc-middleware/node_modules/keccak/lib/api/index.js","node_modules/eth-json-rpc-middleware/node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/index.js","node_modules/lodash/_copyObject.js","node_modules/lodash/_getSymbolsIn.js","node_modules/lodash/_baseIsMap.js","node_modules/lodash/_baseIsSet.js","node_modules/lodash/_baseCreate.js","node_modules/lodash/_baseKeysIn.js","node_modules/lodash/_cloneRegExp.js","node_modules/lodash/_cloneDataView.js","node_modules/lodash/_cloneSymbol.js","node_modules/lodash/_cloneTypedArray.js","node_modules/lodash/_cloneArrayBuffer.js","node_modules/lodash/_createBaseFor.js","node_modules/lodash/_matchesStrictComparable.js","node_modules/lodash/_getMatchData.js","node_modules/lodash/_baseIsMatch.js","node_modules/lodash/_isStrictComparable.js","node_modules/lodash/hasIn.js","node_modules/lodash/_baseProperty.js","node_modules/lodash/_basePropertyDeep.js","node_modules/superagent/lib/utils.js","node_modules/bitwise/nibble/write.js","node_modules/bitwise/nibble/read.js","node_modules/bitwise/byte/write.js","node_modules/bitwise/byte/read.js","node_modules/bitwise/integer/set-bit.js","node_modules/bitwise/integer/get-bit.js","node_modules/bitwise/integer/toggle-bit.js","node_modules/bitwise/string/to-bits.js","node_modules/bitwise/bits/reduce-and.js","node_modules/bitwise/bits/circular-shift-right.js","node_modules/bitwise/bits/reduce-xnor.js","node_modules/bitwise/bits/reduce-nand.js","node_modules/bitwise/bits/and.js","node_modules/bitwise/bits/circular-shift-left.js","node_modules/bitwise/bits/reduce-xor.js","node_modules/bitwise/bits/not.js","node_modules/bitwise/bits/or.js","node_modules/bitwise/bits/reduce-or.js","node_modules/bitwise/bits/reduce-nor.js","node_modules/bitwise/bits/xnor.js","node_modules/bitwise/bits/xor.js","node_modules/bitwise/bits/nand.js","node_modules/bitwise/bits/nor.js","node_modules/bitwise/bits/to-boolean.js","node_modules/bitwise/bits/to-string.js","node_modules/bitwise/buffer/nand.js","node_modules/bitwise/buffer/and.js","node_modules/bitwise/buffer/or.js","node_modules/bitwise/buffer/not.js","node_modules/bitwise/buffer/xor.js","node_modules/bitwise/buffer/xnor.js","node_modules/bitwise/buffer/nor.js","node_modules/bitwise/buffer/modify.js","node_modules/bitwise/buffer/create.js","node_modules/bitwise/buffer/read.js","node_modules/bitwise/buffer/read-u-int.js","node_modules/bitwise/buffer/read-int.js","node_modules/eth-eip712-util-browser/util.js","node_modules/eth-eip712-util-browser/abi.js","node_modules/eth-eip712-util-browser/node_modules/buffer/index.js","node_modules/borc/src/tagged.js","node_modules/borc/src/diagnose.js","node_modules/borc/src/simple.js","node_modules/borc/src/decoder.js","node_modules/borc/src/encoder.js","node_modules/@babel/runtime/helpers/construct.js","node_modules/@babel/runtime/helpers/isNativeFunction.js","node_modules/cross-fetch/dist/browser-ponyfill.js","node_modules/@metamask/eth-sig-util/node_modules/ethereumjs-util/dist/constants.js","node_modules/@metamask/eth-sig-util/node_modules/ethereumjs-util/dist/object.js","node_modules/@metamask/eth-sig-util/node_modules/ethereumjs-util/dist/signature.js","node_modules/@metamask/eth-sig-util/node_modules/ethereumjs-util/dist/account.js","node_modules/@metamask/eth-sig-util/node_modules/ethereumjs-util/dist/bytes.js","node_modules/@metamask/eth-sig-util/node_modules/ethereumjs-util/dist/hash.js","node_modules/@metamask/eth-sig-util/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js","node_modules/@metamask/snap-controllers/node_modules/through2/through2.js","node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/internal/streams/pipeline.js","node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_duplex.js","node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_passthrough.js","node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_transform.js","node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_writable.js","node_modules/readable-web-to-node-stream/node_modules/readable-stream/lib/_stream_readable.js","node_modules/@metamask/snap-controllers/node_modules/concat-stream/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","node_modules/@metamask/snap-controllers/node_modules/concat-stream/node_modules/readable-stream/lib/internal/streams/pipeline.js","node_modules/@metamask/snap-controllers/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_duplex.js","node_modules/@metamask/snap-controllers/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_passthrough.js","node_modules/@metamask/snap-controllers/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_transform.js","node_modules/@metamask/snap-controllers/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_writable.js","node_modules/@metamask/snap-controllers/node_modules/concat-stream/node_modules/readable-stream/lib/_stream_readable.js","node_modules/tar-stream/headers.js","node_modules/tar-stream/node_modules/readable-stream/readable-browser.js","node_modules/tar-stream/node_modules/bl/bl.js","node_modules/fs-constants/browser.js","node_modules/buffer-from/index.js","node_modules/peek-stream/node_modules/through2/through2.js","node_modules/peek-stream/node_modules/duplexify/index.js","node_modules/gunzip-maybe/node_modules/duplexify/index.js","node_modules/gunzip-maybe/node_modules/pump/index.js","node_modules/gunzip-maybe/node_modules/browserify-zlib/src/binding.js","node_modules/@metamask/object-multiplex/dist/Substream.js","node_modules/@metamask/post-message-stream/dist/enums.js","node_modules/@metamask/post-message-stream/dist/BasePostMessageStream.js","node_modules/@metamask/rpc-methods/dist/permitted/common/snapInstallation.js","node_modules/@metamask/key-tree/dist/index.js","node_modules/@keystonehq/base-eth-keyring/node_modules/@ethereumjs/tx/dist.browser/types.js","node_modules/@keystonehq/base-eth-keyring/node_modules/@ethereumjs/tx/dist.browser/transaction.js","node_modules/@keystonehq/base-eth-keyring/node_modules/@keystonehq/bc-ur-registry-eth/dist/bc-ur-registry-eth.cjs.development.js","node_modules/@keystonehq/base-eth-keyring/node_modules/@keystonehq/bc-ur-registry-eth/dist/bc-ur-registry-eth.cjs.production.min.js","node_modules/ipfs-pubsub-peer-monitor/src/utils.js","node_modules/p-reduce/index.js","node_modules/p-series/node_modules/@sindresorhus/is/dist/index.js","node_modules/ipfs-log/src/utils/difference.js","node_modules/ipfs-log/src/utils/find-uniques.js","node_modules/ipfs-log/src/utils/is-defined.js","node_modules/ipfs-log/src/entry-io.js","node_modules/json-stringify-deterministic/lib/index.js","node_modules/uport-base64url/dist/base64url.js","node_modules/orbit-db-identity-provider/src/identity.js","node_modules/orbit-db-identity-provider/src/orbit-db-identity-provider.js","node_modules/base64url/dist/base64url.js","node_modules/did-jwt/lib/NaclSigner.js","node_modules/did-jwt/lib/SimpleSigner.js","node_modules/did-jwt/lib/JWT.js","node_modules/orbit-db-access-controllers/src/access-controller-interface.js","node_modules/p-map-series/index.js","node_modules/orbit-db-access-controllers/src/utils/index.js","node_modules/orbit-db-store/src/replication-info.js","node_modules/orbit-db-store/src/Index.js","node_modules/orbit-db-store/src/Replicator.js","node_modules/orbit-db-store/node_modules/p-each-series/index.js","node_modules/crdts/src/utils.js","node_modules/ipfs-pubsub-1on1/src/protocol.js","node_modules/ipfs-pubsub-1on1/src/get-peer-id.js","node_modules/ipfs-pubsub-1on1/src/wait-for-peers.js","node_modules/ipfs-pubsub-1on1/src/encoding.js","node_modules/level-js/util/support.js","node_modules/level-js/iterator.js","node_modules/abstract-leveldown/index.js","node_modules/level-js/util/mixed-to-buffer.js","node_modules/level-js/util/immediate-browser.js","node_modules/lru/index.js","node_modules/orbit-db-keystore/src/verifiers/index.js","node_modules/orbit-db-keystore/node_modules/secp256k1/elliptic.js","node_modules/levelup/lib/levelup.js","node_modules/ipfs-repo/src/lock-memory.js","node_modules/ipfs-repo/src/constants.js","node_modules/ipfs-repo/src/backends.js","node_modules/ipfs-repo/src/default-datastore.js","node_modules/ipfs-repo/src/errors/index.js","node_modules/ipfs-repo/node_modules/bignumber.js/bignumber.js","node_modules/dlv/dist/dlv.umd.js","node_modules/pull-stream/pull.js","node_modules/ipfs-repo/src/version.js","node_modules/ipfs-repo/src/api-addr.js","node_modules/async/each.js","node_modules/pull-stream/sinks/reduce.js","node_modules/async/series.js","node_modules/ipfs-repo/src/spec.js","node_modules/ipfs-repo/src/config.js","node_modules/ipfs-repo/src/blockstore.js","node_modules/ipfs-repo/src/default-options-browser.js","node_modules/fsm/index.js","node_modules/unique-by/index.js","node_modules/libp2p-crypto/src/keys/keys.proto.js","node_modules/node-forge/lib/forge.js","node_modules/node-forge/lib/asn1.js","node_modules/libp2p-crypto/src/keys/ed25519-class.js","node_modules/libp2p-crypto/src/keys/key-stretcher.js","node_modules/node-forge/lib/rsa.js","node_modules/node-forge/lib/pbe.js","node_modules/libp2p-crypto/src/keys/rsa-class.js","node_modules/protons/src/index.js","node_modules/libp2p-crypto/src/keys/ephemeral-keys.js","node_modules/libp2p-crypto/node_modules/libp2p-crypto-secp256k1/src/index.js","node_modules/multihashing-async/src/index.js","node_modules/ipld-dag-cbor/src/resolver.js","node_modules/ipld-dag-cbor/src/util.js","node_modules/ipld-dag-pb/src/util.js","node_modules/ipld-dag-pb/src/resolver.js","node_modules/ipld-dag-pb/src/dag-link/index.js","node_modules/ipld-dag-pb/src/dag-node/index.js","node_modules/multibase/src/base.js","node_modules/multibase/src/base16.js","node_modules/multibase/src/base32.js","node_modules/multibase/src/base64.js","node_modules/multibase/node_modules/base-x/index.js","node_modules/multiaddr/src/convert.js","node_modules/ipfs/node_modules/multihashing-async/src/utils.js","node_modules/murmurhash3js/index.js","node_modules/ipfs/node_modules/multihashing-async/src/blake.js","node_modules/ipfs/node_modules/multihashing-async/src/crypto-sha1-2-browser.js","node_modules/libp2p-crypto/src/webcrypto.js","node_modules/libp2p-crypto/src/nodeify.js","node_modules/libp2p-crypto/src/hmac/lengths.js","node_modules/iso-random-stream/src/random.browser.js","node_modules/libp2p-crypto/src/aes/ciphers-browser.js","node_modules/node-forge/lib/pbkdf2.js","node_modules/node-forge/lib/util.js","node_modules/ipfs/src/core/runtime/dns-browser.js","node_modules/ipfs/package.json","node_modules/ipfs/src/core/runtime/config-browser.js","node_modules/pull-stream-to-stream/index.js","node_modules/ipfs/src/core/utils.js","node_modules/pull-pushable/index.js","node_modules/pull-stream/index.js","node_modules/err-code/index.js","node_modules/ipfs/src/utils/cid.js","node_modules/ipfs/src/core/components/no-keychain.js","node_modules/libp2p-keychain/src/index.js","node_modules/ipfs/node_modules/bignumber.js/bignumber.js","node_modules/human-to-milliseconds/src/index.js","node_modules/ipfs-unixfs/src/index.js","node_modules/async/nextTick.js","node_modules/async/every.js","node_modules/just-flatten-it/index.js","node_modules/async-iterator-to-pull-stream/index.js","node_modules/async/mapSeries.js","node_modules/interface-datastore/src/index.js","node_modules/async/detectLimit.js","node_modules/ipfs/src/core/components/pin-set.js","node_modules/ipfs/src/core/ipns/path.js","node_modules/ipfs/src/core/components/name-pubsub.js","node_modules/ipfs/src/core/ipns/routing/config.js","node_modules/ipfs/src/core/ipns/index.js","node_modules/ipfs-bitswap/src/index.js","node_modules/ipfs/src/core/ipns/routing/offline-datastore.js","node_modules/ipfs/src/core/ipns/routing/utils.js","node_modules/ipfs/src/core/runtime/libp2p-browser.js","node_modules/ipfs/src/core/components/files-regular/add-from-stream.js","node_modules/ipfs/src/core/components/files-regular/add-from-url.js","node_modules/ipfs/src/core/components/files-regular/refs.js","node_modules/ipfs/src/core/components/files-regular/ls-readable-stream.js","node_modules/ipfs/src/core/components/files-regular/get-readable-stream.js","node_modules/ipfs/src/core/components/files-regular/refs-readable-stream.js","node_modules/ipfs/src/core/components/files-regular/ls.js","node_modules/ipfs/src/core/components/files-regular/add-readable-stream.js","node_modules/ipfs/src/core/components/files-regular/get.js","node_modules/ipfs/src/core/components/files-regular/cat-readable-stream.js","node_modules/ipfs/src/core/components/files-regular/cat.js","node_modules/ipfs/src/core/components/files-regular/refs-local-readable-stream.js","node_modules/ipfs/src/core/components/files-regular/refs-local.js","node_modules/ipfs/src/core/components/files-regular/cat-pull-stream.js","node_modules/ipfs/src/core/components/files-regular/refs-pull-stream.js","node_modules/ipfs/src/core/components/files-regular/add-from-fs.js","node_modules/ipfs/src/core/components/files-regular/refs-local-pull-stream.js","node_modules/ipfs/src/core/components/files-regular/ls-pull-stream.js","node_modules/ipfs/src/core/components/files-regular/add.js","node_modules/ipfs/src/core/components/files-regular/get-pull-stream.js","node_modules/ipfs/src/core/components/files-regular/add-pull-stream.js","node_modules/async-iterator-all/index.js","node_modules/is-pull-stream/index.js","node_modules/callbackify/index.js","node_modules/pull-stream-to-async-iterator/index.js","node_modules/pull-stream/throughs/map.js","node_modules/ipfs/node_modules/readable-stream/readable-browser.js","node_modules/async-iterator-to-stream/dist/index.js","node_modules/ipfs-mfs/core.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multicodec/src/generated-table.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multicodec/node_modules/varint/length.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multicodec/node_modules/varint/decode.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multicodec/node_modules/varint/encode.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multibase/src/rfc4648.js","node_modules/@ensdomains/content-hash/node_modules/cids/node_modules/multibase/src/base.js","node_modules/@multiformats/base-x/src/index.js","node_modules/@ensdomains/content-hash/node_modules/uint8arrays/node_modules/multibase/src/rfc4648.js","node_modules/@ensdomains/content-hash/node_modules/uint8arrays/node_modules/multibase/src/base.js","node_modules/@ensdomains/content-hash/node_modules/uint8arrays/node_modules/multibase/src/util.js","node_modules/eth-json-rpc-middleware/node_modules/secp256k1/lib/messages.json","node_modules/eth-json-rpc-middleware/node_modules/secp256k1/lib/assert.js","node_modules/eth-json-rpc-middleware/node_modules/secp256k1/lib/der.js","node_modules/eth-json-rpc-middleware/node_modules/keccak/lib/keccak-state-unroll.js","node_modules/eth-json-rpc-middleware/node_modules/keccak/lib/api/shake.js","node_modules/eth-json-rpc-middleware/node_modules/keccak/lib/api/keccak.js","node_modules/eth-json-rpc-middleware/node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/signature.js","node_modules/eth-json-rpc-middleware/node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/account.js"],"names":["Base","require","baseX","base16","base32","base64","constants","names","reduce","prev","tupple","codes","module","exports","Protocols","proto","Error","String","V","p","code","size","name","resolvable","path","Boolean","lengthPrefixedVarSize","table","map","row","apply","object","convert","protocols","varint","stringToStringTuples","str","tuples","parts","split","slice","length","part","ParseError","push","cleanPath","join","stringTuplesToString","tup","protoFromTuple","stringTuplesToTuples","Array","isArray","toBuffer","tuplesToStringTuples","toString","tuplesToBuffer","fromBuffer","Buffer","concat","buf","from","encode","sizeForAddr","addr","decode","bytes","bufferToTuples","i","n","stringToBuffer","err","validateBuffer","trim","filter","a","bufferToString","fromString","isValidBuffer","undefined","sha3","murmur3","utils","sha","toCallback","toBuf","fromNumberTo32BitBuf","sha1","sha2256","sha2512","sha3512","sha3_512","sha3384","sha3_384","sha3256","sha3_256","sha3224","sha3_224","shake128","shake_128","shake256","shake_256","keccak224","keccak_224","keccak256","keccak_256","keccak384","keccak_384","keccak512","keccak_512","murmur3128","x64","hash128","murmur332","x86","hash32","addBlake","dblSha2256","cb","firstHash","nodeify","crypto","lengths","hashTypes","SHA1","SHA256","SHA512","create","hashType","secret","callback","hash","subtle","importKey","then","key","digest","data","sign","raw","randomBytes","number","ciphers","CIPHER_MODES","iv","mode","cipher","createCipheriv","decipher","createDecipheriv","encrypt","update","decrypt","forgePbkdf2","forgeUtil","hashName","password","salt","iterations","keySize","hasher","dek","encode64","self","_bitswap","libp2p","isStarted","promisify","get","_repo","config","set","value","replace","dns","domain","opts","pkg","repo","version","repoVersion","commit","gen","_keychain","createKey","type","info","findKeyByName","list","listKeys","rm","removeKey","rename","oldName","newName","renameKey","result","was","now","id","overwrite","import","pem","export","exportKey","defaultConfig","isMultiaddr","IPFS","matches","isValidMultiaddr","ma","invalidMultiaddrError","Peers","Bootstrap","add","multiaddr","args","default","setImmediate","indexOf","all","mh","res","init","bits","empty","_isInitialized","some","m","test","message","gc","options","stat","stats","numObjects","repoSize","repoPath","storageMax","toStream","peerId","source","pingPullStream","debug","OFFLINE_ERROR","PeerId","pull","Pushable","log","getPacket","msg","Object","assign","success","time","text","error","isOnline","count","libp2pNode","statusStream","peerIdStr","peerInfo","createFromB58String","peerBook","peerRouting","findPeer","getPeer","peer","end","ping","packetCount","totalTime","toB58String","on","average","stop","start","runPing","pkgversion","_peerInfo","publicKey","pubKey","addresses","multiaddrs","toArray","sort","agentVersion","protocolVersion","collect","Block","multihashing","CID","waterfall","errCode","cleanCid","cid","isCID","preload","_preload","_blockService","put","block","isBlock","mhtype","format","cidVersion","multihash","delete","parallel","state","unsetExchange","_ipns","republisher","_mfsPreload","close","closeErr","emit","stopped","isIpfs","cidToString","async","ipfsPath","base","cidBase","results","_ipld","resolve","remainderPath","Hash","PeerInfo","Keychain","mergeOptions","NoKeychain","pass","_options","generateOptions","keychainOptions","passPhrase","keys","privKey","Identity","PrivKey","createFromPrivKey","importPeer","Addresses","Swarm","forEach","getPeerId","encapsulate","pin","_load","errPubsubDisabled","subscribe","topic","handler","EXPERIMENTAL","pubsub","Promise","reject","unsubscribe","publish","ls","peers","setMaxListeners","Big","formatWantlist","e","toBaseEncodedString","wantlist","wantlistForPeer","getWantlist","Keys","snapshot","provideBufLen","parseInt","providesBufferLength","blocksReceived","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent","unwant","verbose","v","values","_peerInfoBook","getAll","connectedAddr","isConnected","latency","addrs","localAddrs","connect","maddr","dial","disconnect","hangUp","filters","human","bandwidthStats","forPeer","forProtocol","global","totalIn","totalOut","rateIn","movingAverages","movingAverage","rateOut","_bwPullStream","interval","stream","clearInterval","poll","setInterval","catch","bitswap","bw","bwReadableStream","bwPullStream","dagPB","DAGNode","DAGLink","multicodec","Unixfs","parseBuffer","encoding","links","parsed","JSON","parse","Links","link","Name","Size","fromB58String","Data","parseJSONBuffer","obj","util","deserialize","parseProtoBuffer","findLinks","node","val","_","editAndSave","edit","DAG_PB","hashAlg","SHA2_256","new","template","marshal","alloc","enc","isBuffer","_node","next","isDAGNode","buffer","normalizeMultihash","toV1","dag","codec","serialized","serialize","blockSize","linkLength","l","Tsize","NumLinks","BlockSize","LinksSize","DataSize","CumulativeSize","patch","addLink","rmLink","linkRef","appendData","newData","setData","every","each","nextTick","errcode","dht","findProvs","contentRouting","findProviders","provide","blocks","has","errMsg","recursive","query","_dht","getClosestPeers","toBytes","peerIds","iterToPull","mapAsync","flattenDeep","dagNode","optionDefaults","DAG_CBOR","constantName","toUpperCase","shift","localResolve","first","last","tree","_getRecursive","nodes","mapSeries","series","eachLimit","detectLimit","Key","multibase","createPinSet","resolvePath","pinDataStoreKey","invalidPinTypeErr","pinset","types","direct","indirect","directPins","Set","recursivePins","recursiveKeys","flushPins","dLink","rLink","root","storeSet","closed","open","datastore","paths","mhs","includes","_isPinnedWithType","pinned","reason","toLowerCase","hashes","done","pins","indirectKeys","cids","getIndirectKeys","indirects","hasDescendant","pinRoot","loadSet","rKeys","dKeys","namePubsub","lifetime","normalizePath","ipfsNode","kname","__import__","privateKey","keyLookup","pubLifetime","toFixed","nocache","offline","startsWith","resolveOptions","Bitswap","IPNS","routingConfig","createLibp2pBundle","started","ipnsRouting","statsEnabled","setExchange","UnixFs","OfflineDatastore","addDefaultAssets","preStart","initialized","emptyRepo","Number","exists","PeerID","offlineDatastore","tasks","initializeKeyspace","ipnsUtils","defaultBundle","libp2pDefaults","peerDiscovery","mdns","enabled","webRTCStar","bootstrap","relay","hop","active","kBucketSize","randomWalk","validators","ipns","validator","selectors","selector","connectionManager","maxPeers","minPeers","libp2pOptions","createBundle","clear","_print","filesRegular","addFromFs","addFromStream","addFromURL","addPullStream","addReadableStream","cat","catPullStream","catReadableStream","getPullStream","getReadableStream","lsPullStream","lsReadableStream","refs","refsReadableStream","refsPullStream","local","localReadableStream","localPullStream","mfs","isPullStream","toPullStream","toReadableStream","pullStreamToAsyncIterator","callbackify","PassThrough","mapLsFile","long","file","methods","ipld","repoOwner","cp","variadic","flush","through","objectMode","write","destroy","mkdir","mv","read","readPullStream","readReadableStream","content","isSource","baseTable","varintEncode","nameToVarint","constantToCode","codeToName","codecName","freeze","nameToCode","encodingLength","uint8ArrayToString","uint8ArrayFromString","uint8ArrayToNumber","numberToUint8Array","num","hexString","varintUint8ArrayEncode","input","Uint8Array","identity","blake3","md4","md5","bmt","x11","kangarootwelve","getCodec","utf8Encoder","TextEncoder","string","array","charCodeAt","asciiStringToUint8Array","textDecoder","TextDecoder","textEncoder","decodeText","encodeText","arrs","output","offset","arr","rfc4648","bitsPerChar","alphabet","pad","mask","out","written","SyntaxError","constructor","implementation","this","codeBuf","engine","char","processFn","fn","P","promiseModule","arguments","errorFirst","multiArgs","unshift","exclude","match","pattern","include","ret","excludeMain","getPrototypeOf","x","P1600_ROUND_CONSTANTS","p1600","s","round","lo0","hi0","lo1","hi1","lo2","hi2","lo3","hi3","lo4","hi4","lo","hi","t1slo0","t1shi0","t1slo5","t1shi5","t1slo10","t1shi10","t1slo15","t1shi15","t1slo20","t1shi20","t1slo1","t1shi1","t1slo6","t1shi6","t1slo11","t1shi11","t1slo16","t1shi16","t1slo21","t1shi21","t1slo2","t1shi2","t1slo7","t1shi7","t1slo12","t1shi12","t1slo17","t1shi17","t1slo22","t1shi22","t1slo3","t1shi3","t1slo8","t1shi8","t1slo13","t1shi13","t1slo18","t1shi18","t1slo23","t1shi23","t1slo4","t1shi4","t1slo9","t1shi9","t1slo14","t1shi14","t1slo19","t1shi19","t1slo24","t1shi24","t2slo0","t2shi0","t2slo16","t2shi16","t2slo7","t2shi7","t2slo23","t2shi23","t2slo14","t2shi14","t2slo10","t2shi10","t2slo1","t2shi1","t2slo17","t2shi17","t2slo8","t2shi8","t2slo24","t2shi24","t2slo20","t2shi20","t2slo11","t2shi11","t2slo2","t2shi2","t2slo18","t2shi18","t2slo9","t2shi9","t2slo5","t2shi5","t2slo21","t2shi21","t2slo12","t2shi12","t2slo3","t2shi3","t2slo19","t2shi19","t2slo15","t2shi15","t2slo6","t2shi6","t2slo22","t2shi22","t2slo13","t2shi13","t2slo4","t2shi4","Transform","inherits","KeccakState","Keccak","rate","capacity","delimitedSuffix","hashBitLength","call","_rate","_capacity","_delimitedSuffix","_hashBitLength","_state","initialize","_finalized","prototype","_transform","chunk","_flush","TypeError","absorb","absorbLastFewBits","squeeze","_resetState","_clone","clone","copy","Shake","_read","dataByteLength","createHash","BN","EC","ec","messages","ecparams","curve","loadPublicKey","xBuffer","cmp","y","toRed","red","redSqr","redIMul","redIAdd","b","redSqrt","isOdd","redNeg","keyPair","pub","loadCompressedPublicKey","yBuffer","x3","redISub","isZero","loadUncompressedPublicKey","privateKeyVerify","bn","privateKeyExport","compressed","d","EC_PRIVATE_KEY_EXPORT_DER_FAIL","keyFromPrivate","getPublic","privateKeyNegate","sub","umod","toArrayLike","privateKeyModInverse","EC_PRIVATE_KEY_RANGE_INVALID","invm","privateKeyTweakAdd","tweak","EC_PRIVATE_KEY_TWEAK_ADD_FAIL","iadd","isub","privateKeyTweakMul","EC_PRIVATE_KEY_TWEAK_MUL_FAIL","imul","publicKeyCreate","EC_PUBLIC_KEY_CREATE_FAIL","publicKeyConvert","pair","EC_PUBLIC_KEY_PARSE_FAIL","publicKeyVerify","publicKeyTweakAdd","EC_PUBLIC_KEY_TWEAK_ADD_FAIL","point","g","mul","isInfinity","publicKeyTweakMul","EC_PUBLIC_KEY_TWEAK_MUL_FAIL","publicKeyCombine","publicKeys","pairs","j","EC_PUBLIC_KEY_COMBINE_FAIL","signatureNormalize","signature","r","ECDSA_SIGNATURE_PARSE_FAIL","nh","signatureExport","signatureImport","sigObj","noncefn","getNonce","counter","nonce","ECDSA_SIGN_FAIL","canonical","k","pers","recovery","recoveryParam","verify","sigr","sigs","recover","recoverPubKey","ECDSA_RECOVER_FAIL","ecdh","shared","ecdhUnsafe","scalar","ECDH_FAIL","assert","der","initCompressedValue","defaultValue","isBoolean","COMPRESSED_TYPE_INVALID","secp256k1","EC_PRIVATE_KEY_TYPE_INVALID","isBufferLength","EC_PRIVATE_KEY_LENGTH_INVALID","privateKeyImport","EC_PRIVATE_KEY_IMPORT_DER_FAIL","TWEAK_TYPE_INVALID","TWEAK_LENGTH_INVALID","EC_PUBLIC_KEY_TYPE_INVALID","isBufferLength2","EC_PUBLIC_KEY_LENGTH_INVALID","EC_PUBLIC_KEYS_TYPE_INVALID","isLengthGTZero","EC_PUBLIC_KEYS_LENGTH_INVALID","ECDSA_SIGNATURE_TYPE_INVALID","ECDSA_SIGNATURE_LENGTH_INVALID","sig","ECDSA_SIGNATURE_PARSE_DER_FAIL","signatureImportLax","MSG32_TYPE_INVALID","MSG32_LENGTH_INVALID","isObject","OPTIONS_TYPE_INVALID","OPTIONS_DATA_TYPE_INVALID","OPTIONS_DATA_LENGTH_INVALID","isFunction","OPTIONS_NONCEFN_TYPE_INVALID","isNumber","RECOVERY_ID_TYPE_INVALID","isNumberInInterval","RECOVERY_ID_VALUE_INVALID","keccakState","squeezing","dest","createKeccak","createShake","algorithm","__createBinding","o","k2","defineProperty","enumerable","__exportStar","hasOwnProperty","rlp","ethjsUtil","assignValue","baseAssignValue","props","customizer","isNew","index","newValue","arrayPush","getPrototype","getSymbols","stubArray","getSymbolsIn","getOwnPropertySymbols","getTag","isObjectLike","objectCreate","baseCreate","isPrototype","nativeKeysIn","isProto","reFlags","regexp","exec","lastIndex","cloneArrayBuffer","dataView","isDeep","byteOffset","byteLength","Symbol","symbolProto","symbolValueOf","valueOf","symbol","typedArray","arrayBuffer","fromRight","iteratee","keysFunc","iterable","srcValue","isStrictComparable","Stack","baseIsEqual","matchData","noCustomizer","objValue","stack","COMPARE_PARTIAL_FLAG","baseHasIn","hasPath","baseGet","params","parseLinks","url","cleanHeader","header","changesOrigin","nibble","RangeError","Math","floor","byte","int32","position","amount","bits1","bits2","spacing","spacer","isLooping","write_1","read_1","ceil","subBuffer","byteData","subOffset","i_1","bytesToRead","utilities_1","p2","not_1","inverted","zeros","allocUnsafe","fill","setLength","right","isHexString","stripHexPrefix","intToBuffer","isBN","setLengthRight","bufferToHex","keccak","elementaryName","parseTypeN","parseTypeNxM","tmp","parseTypeArray","parseNumber","arg","encodeSingle","lastIndexOf","bitLength","toTwos","pow","isDynamic","solidityPack","rawEncode","headLength","cur","soliditySHA3","ieee754","customInspectSymbol","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","setPrototypeOf","encodingOrOffset","isEncoding","actual","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","len","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","base64ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","indexSize","arrLength","valLength","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","substr","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","base64Write","ucs2Write","units","c","utf16leToBytes","fromByteArray","min","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","foo","typedArraySupport","console","poolSize","allocUnsafeSlow","_isBuffer","compare","pos","swap16","swap32","swap64","toLocaleString","equals","inspect","max","target","thisStart","thisEnd","thisCopy","targetCopy","isFinite","toJSON","_arr","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","BigInt","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","subarray","readUintLE","readUIntLE","readUintBE","readUIntBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUInt32LE","readUint32BE","readUInt32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","boundsError","readBigUInt64BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readBigInt64LE","readBigInt64BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUInt32LE","writeUint32BE","writeUInt32BE","writeBigUInt64LE","writeBigUInt64BE","writeIntLE","limit","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeBigInt64LE","writeBigInt64BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","errors","E","sym","getMessage","super","writable","configurable","addNumericalSeparator","range","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","isInteger","abs","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","base64clean","src","dst","i16","BufferBigIntNotDefined","Tagged","tag","stringify","encodeCBOR","_pushTag","pushAny","converters","er","f","Decoder","Diagnose","createTag","tagNumber","createInt","createInt32","createInt64","f1","f2","g1","g2","createInt32Neg","createInt64Neg","createTrue","createFalse","createFloat","fl","isNegativeZero","createFloatSingle","createFloatDouble","h","createByteString","createByteStringFromHeap","createInfinity","createInfinityNeg","createNaN","createNaNNeg","createNull","createUndefined","createSimpleUnassigned","createArray","createMap","collectObject","createObject","createUtf8String","createUtf8StringFromHeap","static","decodeFirst","acc","MT","SIMPLE","SYMS","Simple","_pushInt","SIMPLE_FLOAT","hasParent","FALSE","TRUE","NULL","UNDEFINED","BREAK","Bignumber","BigNumber","parser","URL","nextPowerOf2","_heap","_heap8","_buffer","_reset","_knownTags","Date","arrayBufferToBignumber","NEG_ONE","minus","TEN","times","TWO","RegExp","tags","bind","pushInt","pushInt32","pushInt32Neg","pushInt64","pushInt64Neg","pushFloat","pushFloatSingle","pushFloatDouble","pushTrue","pushFalse","pushUndefined","pushNull","pushInfinity","pushInfinityNeg","pushNaN","pushNaNNeg","pushArrayStart","pushArrayStartFixed","pushArrayStartFixed32","pushArrayStartFixed64","pushObjectStart","pushObjectStartFixed","pushObjectStartFixed32","pushObjectStartFixed64","pushByteString","pushByteStringStart","pushUtf8String","pushUtf8StringStart","pushSimpleUnassigned","pushTagUnassigned","pushTagStart","pushTagStart4","pushTagStart8","pushBreak","_depth","_parents","_currentParent","_ref","ref","_closeParent","pop","PARENT","TAG","_push","BYTE_STRING","UTF8_STRING","MAP","OBJECT","ARRAY","_dec","hasChildren","tmpKey","buildMap","_createParent","_res","typ","buildInt32","buildInt64","MAX_SAFE_HIGH","SHIFT32","plus","NaN","_createArrayStartFixed","len1","len2","len3","len4","_createObjectStartFixed","_decode","decodeAll","NUMBYTES","HALF","FLOAT","FOUR","DOUBLE","EIGHT","MAXINT_BN","BUF_NAN","BUF_INF_NEG","BUF_INF_POS","Encoder","streaming","onData","semanticTypes","_pushUrl","_pushBigNumber","addTypes","genTypes","addSemanticType","fun","old","resultMethod","resultLength","finalize","pushWrite","method","_pushUInt8","_pushUInt16BE","_pushUInt32BE","_pushDoubleBE","_pushNaN","_pushInfinity","half","_pushFloat","b2","writeHalf","parseHalf","b4","mt","orig","ONE","MAX_SAFE_INTEGER","NEG_INT","_pushIntNum","POS_INT","_pushNumber","_pushString","_pushBoolean","_pushUndefined","_pushArray","_pushDate","DATE_EPOCH","_pushBuffer","_pushNoFilter","_pushRegexp","REGEXP","_pushSet","URI","_pushBigint","POS_BIGINT","isNegative","negated","NEG_BIGINT","isNaN","DECIMAL_FRAC","dec","decimalPlaces","slide","multipliedBy","isLessThan","toNumber","_pushMap","_pushRawMap","_pushObject","keyLength","keySorter","toType","reflectProxy","Proxy","Reflect","construct","property","Function","__esModule","__self__","F","fetch","DOMException","support","Blob","viewClasses","isArrayBufferView","normalizeName","normalizeValue","iteratorFor","items","iterator","Headers","headers","append","getOwnPropertyNames","consumed","body","bodyUsed","fileReaderReady","reader","onload","onerror","readBlobAsArrayBuffer","blob","FileReader","promise","readAsArrayBuffer","bufferClone","view","Body","_initBody","_bodyInit","_bodyText","isPrototypeOf","_bodyBlob","FormData","_bodyFormData","URLSearchParams","DataView","_bodyArrayBuffer","rejected","readAsText","chars","readArrayBufferAsText","formData","json","oldValue","thisArg","entries","Request","upcased","credentials","signal","referrer","form","decodeURIComponent","Response","bodyInit","status","ok","statusText","response","redirectStatuses","redirect","location","request","aborted","xhr","XMLHttpRequest","abortXhr","abort","rawHeaders","getAllResponseHeaders","line","responseURL","responseText","ontimeout","onabort","withCredentials","responseType","setRequestHeader","addEventListener","onreadystatechange","readyState","removeEventListener","send","polyfill","ponyfill","ctx","KECCAK256_RLP","KECCAK256_RLP_S","KECCAK256_RLP_ARRAY","KECCAK256_RLP_ARRAY_S","KECCAK256_NULL","KECCAK256_NULL_S","TWO_POW256","MAX_INTEGER","defineProperties","bytes_1","fields","_fields","label","obj_1","field","baToJSON","getter","setter","allowZero","allowLess","stripZeros","alias","keys_1","hashPersonalMessage","isValidSignature","fromRpcSig","toRpcSig","ecrecover","ecsign","hash_1","calculateSigRecovery","chainId","isValidSigRecovery","msgHash","senderPubKey","setLengthLeft","homesteadOrLater","SECP256K1_N_DIV_2","SECP256K1_N","rBN","sBN","gt","prefix","importPublic","privateToPublic","privateToAddress","publicToAddress","pubToAddress","isValidPublic","isValidPrivate","isPrecompiled","generateAddress2","generateAddress","isValidChecksumAddress","toChecksumAddress","isZeroAddress","isValidAddress","zeroAddress","address","addHexPrefix","eip1191ChainId","nonceBN","rlphash","initCode","fromBuf","saltBuf","initCodeBuf","unpad","sanitize","toUnsigned","fromSigned","bufferToInt","padToEven","fromTwos","isHexPrefixed","ba","ripemd160","sha256","_a","k256","padded","secp256k1v3","signOptions","algo","attempt","bufferAlgo","bufferData","ecdsaSign","recid","ecdsaVerify","ecdsaRecover","xtend","DestroyableTransform","_destroyed","noop","through2","transform","process","t2","ctor","Through2","override","highWaterMark","ERR_STREAM_PREMATURE_CLOSE","eos","called","_len","_key","once","readable","onlegacyfinish","onfinish","writableEnded","_writableState","finished","readableEnded","_readableState","endEmitted","onend","onclose","ended","onrequest","req","setHeader","isRequest","removeListener","_require$codes","ERR_MISSING_ARGS","ERR_STREAM_DESTROYED","destroyer","reading","writing","destroyed","pipe","to","popCallback","streams","destroys","objectKeys","Duplex","Readable","Writable","allowHalfOpen","onEndNT","getBuffer","ERR_METHOD_NOT_IMPLEMENTED","ERR_MULTIPLE_CALLBACK","ERR_TRANSFORM_ALREADY_TRANSFORMING","ERR_TRANSFORM_WITH_LENGTH_0","afterTransform","ts","_transformState","transforming","writecb","writechunk","rs","needReadable","needTransform","writeencoding","sync","prefinish","_this","_write","_destroy","err2","CorkedRequest","entry","finish","corkReq","pendingcb","corkedRequestsFree","onCorkedFinish","WritableState","internalUtil","deprecate","Stream","OurUint8Array","realHasInstance","destroyImpl","getHighWaterMark","ERR_STREAM_CANNOT_PIPE","ERR_STREAM_NULL_VALUES","ERR_STREAM_WRITE_AFTER_END","ERR_UNKNOWN_ENCODING","errorOrDestroy","nop","isDuplex","writableObjectMode","finalCalled","needDrain","ending","noDecode","decodeStrings","defaultEncoding","corked","bufferProcessing","onwrite","writelen","onwriteStateUpdate","finishMaybe","errorEmitted","onwriteError","needFinish","bufferedRequest","clearBuffer","afterWrite","lastBufferedRequest","prefinished","emitClose","autoDestroy","bufferedRequestCount","writev","_writev","final","_final","doWrite","onwriteDrain","holder","allBuffers","isBuf","callFinal","need","rState","current","hasInstance","_uint8ArrayToBuffer","writeAfterEnd","validChunk","newChunk","decodeChunk","writeOrBuffer","cork","uncork","setDefaultEncoding","endWritable","_undestroy","undestroy","ReadableState","EventEmitter","EElistenerCount","emitter","listeners","debugUtil","debuglog","StringDecoder","createReadableStreamAsyncIterator","BufferList","ERR_STREAM_PUSH_AFTER_EOF","ERR_STREAM_UNSHIFT_AFTER_END_EVENT","kProxyEvents","readableObjectMode","pipes","pipesCount","flowing","emittedReadable","readableListening","resumeScheduled","paused","awaitDrain","readingMore","decoder","readableAddChunk","addToFront","skipChunkCheck","emitReadable","emitReadable_","onEofChunk","chunkInvalid","addChunk","maybeReadMore","isPaused","setEncoding","head","MAX_HWM","howMuchToRead","computeNewHighWaterMark","flow","maybeReadMore_","updateReadableListening","listenerCount","resume","nReadingNextTick","resume_","fromList","consume","endReadable","endReadableNT","wState","xs","nOrig","doRead","pipeOpts","endFn","stdout","stderr","unpipe","onunpipe","unpipeInfo","hasUnpiped","ondrain","ondata","cleanedUp","pipeOnDrain","pause","event","prependListener","_events","dests","splice","ev","addListener","removeAllListeners","wrap","asyncIterator","_fromList","ZERO_OFFSET","USTAR_MAGIC","USTAR_VER","GNU_MAGIC","GNU_VER","MASK","MAGIC_OFFSET","cksum","sum","encodeOct","decodeOct","positive","tuple","parse256","decodeStr","addLength","digits","decodeLongPath","encodePax","linkname","pax","decodePax","keyIndex","typeflag","uid","gid","mtime","getTime","flag","toTypeflag","uname","gname","devmajor","devminor","filenameEncoding","allowUnknownFormat","VERSION_OFFSET","pipeline","DuplexStream","BufferListStream","_callback","piper","_init","_new","_appendBuffer","_bufs","_isBufferList","isBufferList","isModern","maxLength","SIGNAL_FLUSH","onuncork","_corked","_autoDestroy","_ended","Duplexify","_writable","_readable","_readable2","_forwardDestroy","_forwardEnd","_ondrain","_drained","_forwarding","_unwrite","_unread","setWritable","setReadable","unend","onreadable","_forward","_finish","ws","fs","isFn","ReadStream","WriteStream","isFS","zstream","zlib_deflate","zlib_inflate","Zlib","DEFLATE","UNZIP","init_done","write_in_progress","pending_close","windowBits","level","memLevel","strategy","dictionary","bufferSet","NONE","INFLATE","GZIP","GUNZIP","DEFLATERAW","INFLATERAW","strm","deflateInit2","Z_DEFLATED","inflateInit2","Z_OK","_error","_writeCheck","in_off","in_len","out_off","out_len","writeSync","Z_NO_FLUSH","Z_PARTIAL_FLUSH","Z_SYNC_FLUSH","Z_FULL_FLUSH","Z_FINISH","Z_BLOCK","_set","avail_in","next_in","avail_out","next_out","deflate","inflate","Z_STREAM_END","deflateEnd","inflateEnd","reset","deflateReset","inflateReset","Substream","readable_stream_1","parent","_parent","_name","_encoding","DEDICATED_WORKER_NAME","BasePostMessageStream","ACK","_haveSyn","_handshake","_onData","_postMessage","handleInstallSnaps","preprocessRequestedPermissions","eth_rpc_errors_1","snap_controllers_1","utils_1","requestedPermissions","isPlainObject","ethErrors","rpc","invalidRequest","wallet_snap","newRequestedPermissions","permName","invalidParams","requestedSnaps","snapId","snapKey","SNAP_PREFIX","installSnaps","PackageBuffer","BIP44PurposeNodeToken","MAX_BIP_44_DEPTH","MIN_BIP_44_DEPTH","getBIP44AddressKeyDeriver","deriveBIP44AddressKey","BIP_44_COIN_TYPE_DEPTH","BIP44CoinTypeNode","BIP44Node","BIP44Node_1","BIP44CoinTypeNode_1","constants_1","__values","__read","ar","__importDefault","mod","buffer_1","ethereumjs_util_1","common_1","N_DIV_2","Transaction","txData","e_1","_b","gasPrice","gasLimit","Address","validateCannotExceedMaxInteger","_c","_d","_e","value_1","e_1_1","return","common","chain","_validateTxV","fromTxData","fromRlpSerializedTx","fromValuesArray","toCreationAddress","bnToRlp","getMessageToSign","_getMessageToSign","_unsignedTxImplementsEIP155","getMessageToVerifySignature","_signedTxImplementsEIP155","getChainId","getSenderAddress","getSenderPublicKey","gteHardfork","verifySignature","unpadBuffer","getDataFee","txDataZero","param","txDataNonZero","cost","getBaseFee","fee","addn","iaddn","getUpfrontCost","validate","stringError","bnToHex","isSigned","onEIP155BlockOrLater","withEIP155","vInt","ex","bcUrRegistry","uuid","HDKey","ethereumjsUtil","RegistryType","extend","ExtendedRegistryTypes","ETH_SIGN_REQUEST","ETH_SIGNATAURE","decodeToDataItem","RegistryTypes","DataType","EthSignRequest","RegistryItem","getRegistryType","setupData","requestId","signData","dataType","derivationPath","origin","getRequestId","getSignData","getDataType","getDerivationPath","getPath","getSignRequestAddress","getOrigin","toDataItem","DataItem","UUID","keyPath","setTag","signDataType","hdPath","xfp","uuidString","hdpathObject","CryptoKeypath","isHardened","endsWith","PathComponent","hardened","fromDataItem","dataItem","getData","fromCBOR","_cborPayload","RegistryTypes$1","decodeToDataItem$1","Keys$1","ETHSignature","getSignature","generateAddressfromXpub","xpub","derivePath","fromExtendedKey","derive","cbor","patchTags","rt","findHDpatfromAddress","numberLimit","rootPath","caculateAddress","t","u","transaction","typedData","personalMessage","typedTransaction","I","T","D","runWithDelay","func","setTimeout","difference","set1","set2","reducer","initVal","total","el","isOfType","getObjectType","objectName","isObjectOfType","typeName","is","function_","tagType","null_","class_","boolean","nullOrUndefined","generator","throw","nativePromise","hasPromiseAPI","isFunctionOfType","generatorFunction","asyncFunction","boundFunction","regExp","date","weakMap","weakSet","int8Array","uint8Array","uint8ClampedArray","int16Array","uint16Array","int32Array","uint32Array","float32Array","float64Array","sharedArrayBuffer","directInstanceOf","instance","klass","truthy","falsy","nan","primitiveTypes","primitive","integer","safeInteger","isSafeInteger","plainObject","typedArrayTypes","objectType","arrayLike","isValidLength","inRange","DOM_PROPERTIES_TO_CHECK","domElement","nodeType","nodeName","nodeStream","infinite","isAbsoluteMod2","rem","even","odd","isEmptyStringOrArray","isEmptyObject","isEmptyMapOrSet","emptyOrWhitespace","isWhiteSpaceString","predicateOnArray","predicate","any","class","function","null","processed","existing","isInFirst","hasBeenProcessed","uniques","pWhilst","pMap","Entry","EntryIO","ipfs","concurrency","timeout","onProgressCallback","getHashes","uniquelyConcatArrays","arr1","arr2","entryHashes","hashesToFetch","fetchAll","cache","loadingQueue","addToLoadingQueue","isEntry","timer","warn","addToResults","fromMultihash","clearTimeout","DEFAULTS","isRegex","space","cycles","replacer","aobj","bobj","seen","_deterministic","indent","colonSeparator","item","nodeKeys","keyValue","pad_string_1","fromBase64","toBase64","base64url","isDefined","idSignature","pubKeyIdSignature","provider","_id","_publicKey","_signatures","_type","_provider","signatures","IdentityProvider","Keystore","_keystore","keystore","signingKeysPath","getKey","public","_interopRequireDefault","_regenerator","_asyncToGenerator2","_tweetnacl","_tweetnaclUtil","encodeBase64Url","encodeBase64","base64PrivateKey","decodeBase64","mark","_callee","_context","abrupt","detached","decodeUTF8","_x","_elliptic","_Digest","leftpad","repeat","hexPrivateKey","_privateKey$sign","normalizeDID","decodeJWT","createJWT","verifyJWT","resolveAuthenticator","IAT_SKEW","_objectSpread2","_VerifierAlgorithm","_SignerAlgorithm","_base64url","_didResolver","SUPPORTED_PUBLIC_KEY_TYPES","ES256K","Ed25519","JOSE_HEADER","defaultAlg","encodeSection","isMNID","isDIDOrMNID","mnidOrDid","jwt","payload","_x2","_createJWT","issuer","signer","alg","expiresIn","timestamps","signingInput","jwtSigner","iat","exp","iss","sent","_x3","_verifyJWT","_callee2","aud","_decodeJWT","_ref2","doc","authenticators","_args2","_context2","audience","auth","callbackUrl","_x4","_x5","_x6","_resolveAuthenticator","_callee3","authenticationKeys","_context3","authentication","_ref3","_ref4","find","supported","_default","orbitdb","identityProvider","access","pReduce","isValidEthAddress","io","progress","buffered","queued","_index","oplog","Log","Logger","logger","color","Colors","Cyan","setLogLevel","getNext","flatMap","notNull","uniqueValues","store","_store","_fetching","_stats","tasksRequested","tasksStarted","tasksProcessed","_concurrency","_queue","_q","_flushTimer","tasksRunning","tasksFinished","_processQueue","tasksQueued","getQueue","load","notKnown","_oplog","_addToQueue","flattenAndGetUniques","nexts","processValues","logs","_processOne","fromEntryHash","_ipfs","logId","latest","deepEqual","propsA","propsB","prop","OperationTuple3","added","removed","peersToWait","checkPeers","_message","impl","binaryKeys","arrayKeys","AbstractIterator","ltgt","mixedToBuffer","Iterator","db","_limit","_count","_cache","_completed","_aborted","_transaction","_keyAsBuffer","keyAsBuffer","_valueAsBuffer","valueAsBuffer","keyRange","createKeyRange","createIterator","reverse","lower","lowerBound","upper","upperBound","lowerOpen","lowerBoundExclusive","upperOpen","upperBoundExclusive","IDBKeyRange","bound","objectStore","openCursor","onsuccess","cursor","onItem","onAbort","oncomplete","onComplete","maybeNext","_next","_end","AbstractLevelDOWN","AbstractChainedBatch","events","LRU","tail","maxAge","remove","element","_unlink","peek","_checkAge","modified","evict","verifiers","v0","v1","verifier","DeferredLevelDOWN","IteratorStream","Batch","getCallback","getOptions","WriteError","ReadError","NotFoundError","OpenError","InitializationError","LevelUP","strictEqual","_db","maybeError","_isOpening","isOpen","isClosed","notFound","del","batch","readStream","createReadStream","keyStream","createKeyStream","valueStream","createValueStream","lockFile","LOCKS","lock","closer","locked","Ctor","storageBackends","storageBackendOptions","Spec","mounts","mountpoint","child","shardFunc","compression","ERR_REPO_NOT_INITIALIZED","globalObject","isNumeric","hasSymbol","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","z","xc","yc","intCheck","toExponential","charAt","toFixedPoint","zs","configObject","div","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","caseChanged","isNum","_isBigNumber","search","substring","DEBUG","c0","ne","maxOrMin","normalise","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","getRandomValues","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","lt","minimum","random","dp","rand","Uint32Array","decimal","toBaseOut","baseIn","baseOut","arrL","callerIsToString","multiply","temp","xlo","xhi","carry","klo","khi","aL","bL","subtract","more","prod","prodL","q","qc","remL","rem0","xi","xL","yc0","yL","yz","p1","absoluteValue","comparedTo","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","isModExp","nIsBig","nIsNeg","nIsOdd","integerValue","isEqualTo","eq","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThanOrEqualTo","lte","isPositive","xLTy","xe","ye","modulo","xcL","ycL","ylo","yhi","zc","sqrtBase","precision","shiftedBy","squareRoot","sqrt","rep","toFormat","intPart","fractionPart","isNeg","intDigits","toFraction","md","d0","d1","d2","n0","n1","toPrecision","toStringTag","for","define","amd","window","dlv","sink","versionKey","check","expected","apiFile","coll","_eachOf2","_withoutIndex2","_wrapAsync2","drain","_parallel2","_eachOfSeries2","sortKeys","specKey","spec","deep","queue","_get","configKey","setQueue","configStore","_saveAll","encodedValue","core","ShardingStore","ShardingDatastore","cidToDsKey","rawKey","keyFromBuffer","cidToOtherVersion","toV0","filestore","sharding","shard","NextToLast","createOrOpen","maybeWithSharding","blockData","otherCid","otherKey","putMany","newKeys","createBaseStore","extension","iter","contains","union","fsm","reachable","reach","terminal","deadlock","dead","livelock","terminals","reaches","combine","fsm1","fsm2","start1","start2","combined","events1","events2","independent","expand","name1","name2","cName","trans1","trans2","getValue","unique","usePureJavaScript","forge","asn1","_checkBufferLength","available","requested","Class","UNIVERSAL","APPLICATION","CONTEXT_SPECIFIC","PRIVATE","Type","BOOLEAN","INTEGER","BITSTRING","OCTETSTRING","OID","ODESC","EXTERNAL","REAL","ENUMERATED","EMBEDDED","UTF8","ROID","SEQUENCE","SET","PRINTABLESTRING","IA5STRING","UTCTIME","GENERALIZEDTIME","BMPSTRING","tagClass","constructed","composed","bitStringContents","original","excludeBitStringContents","obj1","obj2","equal","includeBitStringContents","getBerValueLength","getByte","getInt","_fromDer","depth","b1","longFormBytes","_getValueLength","strict","getBytes","decodeBitStrings","savedRead","savedRemaining","unused","used","tc","getInt16","asn1Options","fromDer","toDer","useBitStringContents","putBytes","putByte","putBuffer","putInt16","lenBytes","oidToDer","oid","valueBytes","derToOid","utcTimeToDate","utc","year","MM","DD","hh","mm","ss","setUTCFullYear","setUTCHours","setTime","generalizedTimeToDate","gentime","YYYY","fff","isUTC","parseFloat","setFullYear","setHours","dateToUtcTime","rval","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","dateToGeneralizedTime","integerToDer","putSignedInt","derToInteger","getSignedInt","capture","optional","captureAsn1","captureBitStringContents","captureBitStringValue","_nonLatinRegex","prettyPrint","indentation","IA5String","subvalues","pki","oids","bytesToHex","decodeUtf8","protobuf","bs58","pbm","Ed25519PublicKey","ensureKey","publicKeyLength","ensure","hashAndVerify","PublicKey","KeyType","Ed25519PrivateKey","privateKeyLength","hashAndSign","PrivateKey","unmarshalEd25519PrivateKey","privateKeyBytes","publicKeyBytes","unmarshalEd25519PublicKey","generateKeyPair","_bits","generateKey","privkey","secretKey","generateKeyPairFromSeed","seed","generateKeyFromSeed","whilst","hmac","cipherMap","ivSize","Blowfish","cipherKeySize","cipherType","todo","resultBuffer","r1","r2","cipherKey","macKey","k1","BigInteger","jsbn","_crypto","isNodejs","rsa","GCD_30_DELTA","privateKeyValidator","rsaPrivateKeyValidator","rsaPublicKeyValidator","publicKeyValidator","emsaPkcs1v15encode","oidBytes","digestInfo","digestAlgorithm","_modPow","modPow","dP","dQ","qInv","modInverse","compareTo","gcd","xp","xq","_encodePkcs1_v1_5","bt","eb","padByte","padNum","numZeros","padBytes","_decodePkcs1_v1_5","em","ml","_generateKeyPair","workers","workLoad","workerScript","generate","getPrime","pBits","qBits","prime","generateProbablePrime","q1","phi","setPrivateKey","setPublicKey","prng","_bnToBytes","hex","hexToBytes","_getMillerRabinTests","_detectNodeCrypto","_detectSubtleCrypto","globalScope","_detectSubtleMsCrypto","msCrypto","_intToUint8Array","toHex","yhex","ed","xhex","createKeyPairGenerationState","rng","nextBytes","getBytesSync","eInt","pqState","fromInt","stepKeyPairGenerationState","THIRTY","deltaIdx","op_or","t1","testBit","bitwiseTo","shiftLeft","dAddOffset","byteValue","isProbablePrime","modulusLength","publicExponent","publicKeyEncoding","privateKeyEncoding","priv","privateKeyFromPem","publicKeyFromPem","pkcs8","privateKeyFromAsn1","setRsaPublicKey","genOp","exportOp","keypair","generateKeyPairSync","scheme","schemeOptions","pkcs1","encode_rsa_oaep","setRsaPrivateKey","decode_rsa_oaep","wrapRsaPrivateKey","rsaKey","rsaEncryption","privateKeyModulus","privateKeyPublicExponent","privateKeyPrivateExponent","privateKeyPrime1","privateKeyPrime2","privateKeyExponent1","privateKeyExponent2","privateKeyCoefficient","privateKeyToAsn1","privateKeyToRSAPrivateKey","publicKeyFromAsn1","publicKeyOid","rsaPublicKey","publicKeyModulus","publicKeyExponent","publicKeyToAsn1","publicKeyToSubjectPublicKeyInfo","publicKeyToRSAPublicKey","pbe","encryptedPrivateKeyValidator","PBES2AlgorithmsValidator","pkcs12PbeParamsValidator","prfOidToMessageDigest","prfOid","prfAlgorithm","prfAlgorithmToMessageDigest","factory","sha512","encryptPrivateKeyInfo","saltSize","dkLen","encryptionAlgorithm","encryptedData","countBytes","ivLen","encOid","cipherFn","aes","createEncryptionCipher","des","dk","pkcs5","pbkdf2","createPbkdf2Params","saltBytes","ByteBuffer","generatePkcs12Key","decryptPrivateKeyInfo","encryptionOid","getCipher","encryptionParams","encrypted","encryptedPrivateKeyToPem","epki","maxline","encryptedPrivateKeyFromPem","headerType","procType","encryptRsaPrivateKey","legacy","opensslDeriveBytes","dekInfo","parameters","decryptRsaPrivateKey","createDecryptionCipher","rc2","digestLength","blockLength","passBuf","fillWithByte","Slen","S","at","Plen","B","Inew","setAt","truncate","getCipherForPBES2","getCipherForPKCS12PBE","supportedOids","kdfOid","kdfSalt","kdfIterationCount","encIv","dIvLen","startDecrypting","digests","RsaPublicKey","jwkToPkix","RSA","RsaPrivateKey","genSecret","jwkToPkcs1","_err","unmarshalRsaPublicKey","jwk","pkixToJwk","unmarshalRsaPrivateKey","pkcs1ToJwk","unmarshalPrivateKey","fromJwk","schema","compile","sch","Messages","encodings","flatten","generateEphmeralKeyPair","keysProtobuf","Secp256k1PublicKey","validatePublicKey","compressPublicKey","Secp256k1","Secp256k1PrivateKey","computePublicKey","validatePrivateKey","unmarshalSecp256k1PrivateKey","unmarshalSecp256k1PublicKey","Multihashing","coerceCode","functions","newHash","binaryBlob","traverse","nextpath","isCircular","replaceCIDbyTAG","circular","defaultHashAlg","defaultTags","currentSize","defaultMaxSize","maxSize","configureDecoder","decoderOptions","nodeTagged","userOptions","defaultOptions","print","protons","isDAGLink","createDagLinkFromB58EncodedHash","PBNode","pbn","toProtoBuf","withIs","visibility","_nameBuf","_size","_cid","hidePrivateFields","addEnumerableGetters","_json","nameAsBuffer","className","symbolName","addNamedLink","serializedSize","_data","_links","_serializedSize","stringOrBuffer","isImplemented","padding","ALPHABET_MAP","LEADER","decodeUnsafe","ip","isIp","Convert","ip2buf","ipString","port2buf","port","buf2port","buf2onion","addrBytes","portBytes","ipBuff","buf2ip","buf2str","buf2mh","str2buf","mh2buf","asBytes","portBuf","onion2buf","onion32buf","doWork","other","_input","blake","blake2b","blake2bInit","blake2bUpdate","blake2bFinal","blake2s","blake2sInit","blake2sUpdate","blake2sFinal","makeB2Hash","hf","webCrypto","webkitSubtle","getWebCrypto","webCryptoHash","MAX_BYTES","generated","pbkdf2Sync","algorithms","hLen","prf","xor","u_c","u_c1","int32ToBytes","xorBytes","outer","inner","baseN","_checkBitsParam","ByteStringBuffer","isArrayBuffer","_constructedStringLength","browser","postMessage","callbacks","stopPropagation","MutationObserver","attr","document","createElement","observe","attributes","oldSetImmediate","setAttribute","versions","_optimizeConstructedString","isEmpty","putString","encodeUtf8","putInt24","putInt32","putInt16Le","putInt24Le","putInt32Le","putInt","getInt24","getInt32","getInt16Le","getInt24Le","getInt32Le","compact","DataBuffer","readOffset","growSize","writeOffset","accommodate","setUint8","binary","Uint16Array","utf16","setInt16","setInt8","setInt32","getInt8","getUint8","utf8","fillString","s1","s2","s3","_base64","_base64Idx","_base58","chr1","chr2","chr3","decode64","enc1","enc2","enc3","enc4","unescape","encodeURIComponent","escape","base58","api","_setStorageObject","removeItem","setItem","_getStorageObject","getItem","_setItem","_getItem","_removeItem","_clearItems","_callStorageFunction","exception","idx","localStorage","clearItems","re","argi","formatNumber","decimals","dec_point","thousands_sep","formatSize","bytesFromIP","bytesFromIPv4","bytesFromIPv6","blanks","bytesToIP","bytesToIPv4","bytesToIPv6","zeroGroups","zeroMaxGroup","group","estimateCores","cores","navigator","hardwareConcurrency","Worker","blobUrl","createObjectURL","st","et","sample","samples","numWorkers","avg","revokeObjectURL","worker","terminate","overlaps","overlap","Path","Message","description","keywords","homepage","bugs","license","leadMaintainer","files","main","bin","jsipfs","repository","scripts","lint","build","benchmark","release","dependencies","bl","boom","byteman","fnv1a","glob","lodash","mafmt","mkdirp","multihashes","receptacle","semver","superstruct","yargs","devDependencies","aegir","chai","delay","execa","hat","ncp","qs","rimraf","sinon","optionalDependencies","engines","npm","contributors","API","Gateway","Discovery","MDNS","Enabled","Interval","ConnMgr","LowWater","HighWater","duplex","cbs","busy","objectAPI","ipfsPaths","parsedPath","parseIpfsPath","rootHash","rootLinks","follow","linkName","nextObj","pathStr","invalidPathErr","matched","separated","onClose","_abort","_cb","sources","sinks","throughs","upgrade","fail","findKeyById","cms","whole","pieces","measure","multipliers","ns","us","ms","currentVal","unit","analyse","unixfsData","dirTypes","blockSizes","addBlockSize","removeBlockSize","fileSize","Raw","Directory","File","Metadata","Symlink","HAMTShard","filesize","blocksizes","fanout","unmarshal","marsheled","decoded","_defer","_setImmediate","hasNextTick","hasSetImmediate","fallback","_createTester2","_doParallel2","_notId2","elem","getIterator","toIterable","toPull","_mapLimit2","_doLimit2","MemoryDatastore","Errors","_identity2","_doParallelLimit2","_findGetResult2","someSeries","eachOfSeries","pbSchema","emptyKey","pb","pinSet","childhash","searchChildren","bs58Link","storeItems","rootNode","storePins","storePinsCb","pbHeader","headerBuf","fanoutLinks","rootData","bins","eachCb","binIdx","storeChild","walkItems","step","pbh","hdrLength","vBytes","hdrSlice","readHeader","linkHash","isIPFS","ipnsPath","IpnsPubsubDatastore","isNamePubsubEnabled","getPubsubRouting","ipnsPubsub","isIpnsPubsubDatastore","routing","stores","cancel","subs","getSubscriptions","TieredDatastore","PubsubDatastore","ipnsStores","pubsubDs","localDatastore","Receptacle","IpnsPublisher","IpnsRepublisher","IpnsResolver","keychain","publisher","resolver","publishWithEOL","ttEol","ttl","WantManager","Network","DecisionEngine","Notifications","Stats","statsComputeThrottleTimeout","statsComputeThrottleMaxQueueSize","statsKeys","blockstore","_libp2p","_log","computeThrottleTimeout","computeThrottleMaxQueueSize","network","wm","notifications","_receiveMessage","incoming","messageReceived","wanted","cancelWants","wasWanted","_handleReceivedBlock","_updateReceiveCounters","_putBlock","_receiveError","_onPeerConnected","connected","_onPeerDisconnected","disconnected","peerDisconnected","hasBlock","receivedBlocks","enableStats","enable","disableStats","disable","ledgerForPeer","getMany","pendingStart","wantList","promptedNetwork","getFromOutside","wantBlock","wantBlocks","findAndConnect","unwantBlocks","unwantBlock","newBlocks","Record","encodeBase32","routingKey","_routingKey","record","records","select","WS","WebRTCStar","WebSocketStarMulti","Multiplex","SECIO","KadDHT","wrtcstar","wsstarServers","wsstar","servers","ignore_no_online","wsStarIgnoreErrors","defaults","switch","blacklistTTL","blackListAttempts","maxParallelDials","maxColdCalls","dialTimeout","modules","transport","streamMuxer","connEncryption","discovery","autoDial","websocketStar","parsedUrl","pathname","Format","edges","pushable","AddHelper","pullStream","_pullStream","_pushable","_waitingPullFlush","retStream","asyncMap","buffers","exporter","deferred","pathComponents","unixfs","pullDefer","pullTraverse","pullCat","getNodeLinks","maxDepth","getFullPath","resPath","rootCid","isUnique","traverseLevel","nextLevelDepth","isDuplicate","getLinks","vals","depthFirst","objectStream","srcCid","dstCid","formatLink","refsStream","keysOnly","buff","dsKeyToRef","mapFile","validateAddInput","includeContent","importer","kindOf","toAsyncIterator","pullValues","pullMap","pullAsyncMap","pullFlatten","isStream","parseChunkerString","streamFromFileReader","supportsFileReader","chunkerOptions","chunker","shardSplitThreshold","prog","wrapWithDirectory","normalizeContent","onlyHash","b58Hash","prepareFile","preloadFile","isRootDir","pinFile","isSink","fnLength","mapper","_extends","asyncGeneratorStep","_throw","_asyncToGenerator","getSymbol","$$asyncIterator","asyncIteratorToStream","$$iterator","resolveToIterator","isGenerator","running","cidv1","cidv2","cidv3","ip4","tcp","dccp","ip6","ip6zone","dns4","dns6","dnsaddr","bencode","sctp","docid","zeronet","udp","udt","utp","unix","thread","p2p","https","onion","onion3","garlic64","garlic32","tls","quic","wss","http","messagepack","N1","N2","N3","N4","N5","N6","N7","N8","N9","oldOffset","INT","BASE_MAP","FACTOR","iFACTOR","psz","zeroes","b256","it3","it4","vch","pbegin","pend","b58","it1","it2","ECDSA_SIGNATURE_SERIALIZE_DER_FAIL","length1","length2","bip66","EC_PRIVKEY_EXPORT_DER_COMPRESSED","EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED","lenb","lenR","posR","lenS","posS","lenbyte","rlen","rindex","slen","sindex","rvalue","svalue"],"mappings":"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,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,YAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,cAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA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AAA,SACA,WAAA,SACA,WAAA,SACA,aAAA,SACAzC,KAAA,SACA,UAAA,SACA,iBAAA,SACA,YAAA,SACA,UAAA,SACA,kBAAA,SACA,gBAAA,SACA,UAAA,SACA9b,OAAA,UACA,mBAAA,SACA,gBAAA,UACA,iBAAA,UACA,kBAAA,SACA,cAAA,UACA,gBAAA,SACA,eAAA,UACA,aAAA,UACA,qBAAA,UACA,8BAAA,SACA,oBAAA,UACA4zG,OAAA,WACAC,MAAA,SACA,gBAAA,SACA,aAAA,UACAC,OAAA,SACA5wG,UAAA,SACA,mBAAA,SACAoT,UAAA,SACAlG,WAAA,SACA2jG,YAAA,UACA,qBAAA,SACA,aAAA,SACA,YAAA,SACA,UAAA,UACA,YAAA,UACA//B,SAAA,SACA,gBAAA,SACA8xB,QAAA,SACA,iBAAA,SACA,WAAA,UACA,aAAA,SACA,YAAA,SACA,aAAA,SACA,cAAA,SACA,gBAAA,SACA,YAAA,SACA,cAAA,SACA,gCAAA,SACA,wBAAA,SACA,gBAAA,SACA,kBAAA,SACAkO,WAAA,SACAC,OAAA,SACA,wBAAA,SACAC,YAAA,SACA,aAAA,SACAzwB,KAAA,SACA,kBAAA,SACA,mBAAA,SACA5rF,OAAA,SACAs8G,MAAA,UACA,gBAAA,UAEAC,gBAAA,CACAC,MAAA,UACAhnC,UAAA,SACAinC,KAAA,SACAC,MAAA,SACA,cAAA,SACA,cAAA,SACA,aAAA,SACAC,MAAA,SACA,YAAA,SACAC,IAAA,QACA,sBAAA,WACA,YAAA,UACA,wBAAA,UACAC,IAAA,SACAC,GAAA,SACAC,OAAA,SACAC,MAAA,SACA,oBAAA,UAEAC,qBAAA,CACA,cAAA,UACA,sBAAA,UAEAC,QAAA,CACAvjG,KAAA,WACAwjG,IAAA,WAEAC,aAAA,CACA,gCACA,kDACA,oCACA,gCACA,iCACA,uCACA,uCACA,8CACA,uCACA,qDACA,oCACA,sDACA,wCACA,yCACA,qCACA,oDACA,kCACA,uCACA,yDACA,6CACA,+BACA,mCACA,8CACA,6DACA,qCACA,gDACA,2CACA,kCACA,qCACA,kCACA,0CACA,gCACA,wCACA,0CACA,+CACA,iDACA,+BACA,0CACA,qCACA,+CACA,uCACA,2CACA,oDACA,oDACA,oCACA,uCACA,qCACA,+BACA,mCACA,0CACA,mCACA,+BACA,wCACA,8CACA,oCACA,2BACA,iCACA,6CACA,sDACA,8BACA,mCACA,sCACA,qCACA,iCACA,0CACA,iCACA,sCACA,0CACA,8BACA,2CACA,qCACA,oDACA,4DACA,oCACA,+BACA,uCACA,+CACA,wCACA,mCACA,6BACA,qCACA,2CACA,yCACA,8CACA,gDACA,yCACA,qCACA,2BACA,kCACA,oCACA,0CACA,gDACA,qDACA,sCACA,qCACA,mCACA,0CACA,oCACA,0CACA,kDACA,2BACA,4BACA,0CACA,oCACA,8BACA,6BACA,+DACA,gCACA,yBACA,kEACA,6CACA,6CACA,uCACA,qEACA,4DACA,oCACA,4BACA,8CACA,oDACA,iOChUA1+G,EAAAC,QAAA,KAAA,CACA4U,UAAA,CACAC,MAAA,GAEA6pG,IAAA,GACAC,QAAA,IAEAC,UAAA,CACAC,KAAA,CACAC,SAAA,EACAC,SAAA,IAEAj6F,WAAA,CACAg6F,SAAA,IAGAtyG,UAAA,CACA,kGACA,kGACA,kGACA,kGACA,kGACA,kGACA,8FACA,+FAEAqI,MAAA,CACAmqG,QAAA,CACAC,SAAA,IACAC,UAAA,yRC9BA,IAAArsD,EAAAzzD,EAAA,UAEAW,EAAAC,QAAAm/G,EAGAp/G,EAAAC,QAAAoO,OAAA,SAAAA,GACA,OAAA+wG,EAAA,KAAA/wG,IAGArO,EAAAC,QAAA4xF,KAAA,SAAAA,GACA,OAAAutB,EAAAvtB,EAAA,OAGA,IAAA71E,OACA,IAAAlP,EACAkhD,EAAArwC,SACA7Q,EAGA,SAAAsyG,EAAA37D,EAAA96B,GACA86B,GAAA,iBAAAA,IACA96B,EAAA86B,EAAAp1C,OACAo1C,EAAAA,EAAAouC,MAGA,IAAAtiC,EAAAqE,EA6CAnwD,EA7CA47G,EAAA,GAAAr1F,EAAA,GACAyD,EAAA,IAAAqlC,EACArlC,EAAA6kB,SAAA7kB,EAAAmhC,UAAA,EAC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iBAAA,IACA,cAAA,IACA,cAAA,IACAC,KAAA,IACA,WAAA,IACA,WAAA,IACA,YAAA,IACA,iBAAA,IACA,cAAA,IACA,SAAA,IACA,sBAAA,IACA,iBAAA,IACA,iBAAA,IACA,uBAAA,IACA,mBAAA,IACA,gBAAA,IACA,aAAA,IACA,6BAAA,IACA,cAAA,IACA,WAAA,IACAC,MAAA,IACA,gBAAA,IACA,aAAA,IACAhoG,IAAA,IACAC,IAAA,IACAC,IAAA,IACA,eAAA,IACA,YAAA,IACA,UAAA,IACA,UAAA,IACA,WAAA,IACA,UAAA,IACA+nG,QAAA,IACA,gBAAA,IACA,mBAAA,IACA,mBAAA,IACA,aAAA,IACA,cAAA,IACA,qBAAA,IACA,aAAA,IACA,UAAA,IACA,iBAAA,IACA,aAAA,IACAC,IAAA,IACA,kBAAA,IACA,oBAAA,IACA,eAAA,IACA,cAAA,IACA,WAAA,IACAC,IAAA,IACAC,IAAA,IACAC,KAAA,IACAC,OAAA,IACAC,IAAA,IACAl+C,KAAA,IACAm+C,MAAA,IACAC,MAAA,IACAC,OAAA,IACAC,SAAA,IACAC,SAAA,IACAC,IAAA,IACAC,KAAA,IACAhzD,GAAA,IACAizD,IAAA,IACA,qBAAA,IACAC,KAAA,IACAjuE,KAAA,IACAkuE,YAAA,IACA,qBAAA,IACA,2BAAA,KACA,aAAA,KACA,aAAA,KACA,aAAA,KACA,aAAA,KACA9oG,IAAA,KACA,WAAA,KACA,WAAA,KACA,WAAA,KACA,YAAA,KACA,WAAA,KACA,eAAA,KACAC,eAAA,KACA,UAAA,MACA,YAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,YAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,cAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA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AAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAEA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,GAAA,GAAA,EAAA,EAAA,GAAA,IAAA,GACA,IAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,GAAA,IAAA,IAAA,IACA,GAAA,EAAA,EAAA,IAAA,IAAA,IAAA,GAAA,IAAA,GAAA,IAAA,GAAA,IAAA,IAAA,GAAA,GAAA,IACA,GAAA,IAAA,GAAA,GAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,GAAA,IAAA,IAAA,IAAA,GAAA,GACA,EAAA,IAAA,IAAA,GAAA,IAAA,GAAA,IAAA,IAAA,GAAA,GAAA,IAAA,GAAA,IAAA,IAAA,IAAA,GACA,IAAA,IAAA,EAAA,GAAA,EAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IACA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,GAAA,IAAA,GAAA,IAAA,IAAA,GACA,IAAA,IAAA,GAAA,GAAA,GAAA,EAAA,EAAA,EAAA,IAAA,GAAA,EAAA,GAAA,EAEA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EACA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,E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","file":"../PintNFTWalletExtension/background-3.js","sourcesContent":["'use strict'\n\nconst Base = require('./base.js')\nconst baseX = require('base-x')\nconst base16 = require('./base16')\nconst base32 = require('./base32')\nconst base64 = require('./base64')\n\n// name, code, implementation, alphabet\nconst constants = [\n  ['base1', '1', '', '1'],\n  ['base2', '0', baseX, '01'],\n  ['base8', '7', baseX, '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', base16, '0123456789abcdef'],\n  ['base32', 'b', base32, 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32pad', 'c', base32, 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32hex', 'v', base32, '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexpad', 't', base32, '0123456789abcdefghijklmnopqrstuv='],\n  ['base32z', 'h', base32, 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base64', 'm', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', base64, 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, {})\n\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, {})\n\nmodule.exports = {\n  names: names,\n  codes: codes\n}\n","'use strict'\n\nfunction Protocols (proto) {\n  if (typeof (proto) === 'number') {\n    if (Protocols.codes[proto]) {\n      return Protocols.codes[proto]\n    }\n\n    throw new Error('no protocol with code: ' + proto)\n  } else if (typeof (proto) === 'string' || proto instanceof String) {\n    if (Protocols.names[proto]) {\n      return Protocols.names[proto]\n    }\n\n    throw new Error('no protocol with name: ' + proto)\n  }\n\n  throw new Error('invalid protocol id type: ' + proto)\n}\n\nconst V = -1\nProtocols.lengthPrefixedVarSize = V\nProtocols.V = V\n\nProtocols.table = [\n  [4, 32, 'ip4'],\n  [6, 16, 'tcp'],\n  [33, 16, 'dccp'],\n  [41, 128, 'ip6'],\n  [42, V, 'ip6zone'],\n  [53, V, 'dns', 'resolvable'],\n  [54, V, 'dns4', 'resolvable'],\n  [55, V, 'dns6', 'resolvable'],\n  [56, V, 'dnsaddr', 'resolvable'],\n  [132, 16, 'sctp'],\n  [273, 16, 'udp'],\n  [275, 0, 'p2p-webrtc-star'],\n  [276, 0, 'p2p-webrtc-direct'],\n  [277, 0, 'p2p-stardust'],\n  [290, 0, 'p2p-circuit'],\n  [301, 0, 'udt'],\n  [302, 0, 'utp'],\n  [400, V, 'unix', false, 'path'],\n  // `p2p` is the preferred name for 421\n  [421, V, 'p2p'],\n  // `ipfs` has been added after `p2p` so that it is used by default.\n  // The reason for this is to provide better backwards support for\n  // code bases that do not yet support the `p2p` proto name. Eventually\n  // `p2p` should become the default.\n  [421, V, 'ipfs'],\n  [443, 0, 'https'],\n  [444, 96, 'onion'],\n  [445, 296, 'onion3'],\n  [446, V, 'garlic64'],\n  [460, 0, 'quic'],\n  [477, 0, 'ws'],\n  [478, 0, 'wss'],\n  [479, 0, 'p2p-websocket-star'],\n  [480, 0, 'http']\n]\n\nProtocols.names = {}\nProtocols.codes = {}\n\n// populate tables\nProtocols.table.map(row => {\n  const proto = p.apply(null, row)\n  Protocols.codes[proto.code] = proto\n  Protocols.names[proto.name] = proto\n})\n\nProtocols.object = p\n\nfunction p (code, size, name, resolvable, path) {\n  return {\n    code: code,\n    size: size,\n    name: name,\n    resolvable: Boolean(resolvable),\n    path: Boolean(path)\n  }\n}\n\nmodule.exports = Protocols\n","'use strict'\n\nconst convert = require('./convert')\nconst protocols = require('./protocols-table')\nconst varint = require('varint')\n\n// export codec\nmodule.exports = {\n  stringToStringTuples: stringToStringTuples,\n  stringTuplesToString: stringTuplesToString,\n\n  tuplesToStringTuples: tuplesToStringTuples,\n  stringTuplesToTuples: stringTuplesToTuples,\n\n  bufferToTuples: bufferToTuples,\n  tuplesToBuffer: tuplesToBuffer,\n\n  bufferToString: bufferToString,\n  stringToBuffer: stringToBuffer,\n\n  fromString: fromString,\n  fromBuffer: fromBuffer,\n  validateBuffer: validateBuffer,\n  isValidBuffer: isValidBuffer,\n  cleanPath: cleanPath,\n\n  ParseError: ParseError,\n  protoFromTuple: protoFromTuple,\n\n  sizeForAddr: sizeForAddr\n}\n\n// string -> [[str name, str addr]... ]\nfunction stringToStringTuples (str) {\n  const tuples = []\n  const parts = str.split('/').slice(1) // skip first empty elem\n  if (parts.length === 1 && parts[0] === '') {\n    return []\n  }\n\n  for (let p = 0; p < parts.length; p++) {\n    const part = parts[p]\n    const proto = protocols(part)\n\n    if (proto.size === 0) {\n      tuples.push([part])\n      continue\n    }\n\n    p++ // advance addr part\n    if (p >= parts.length) {\n      throw ParseError('invalid address: ' + str)\n    }\n\n    // if it's a path proto, take the rest\n    if (proto.path) {\n      tuples.push([\n        part,\n        // TODO: should we need to check each path part to see if it's a proto?\n        // This would allow for other protocols to be added after a unix path,\n        // however it would have issues if the path had a protocol name in the path\n        cleanPath(parts.slice(p).join('/'))\n      ])\n      break\n    }\n\n    tuples.push([part, parts[p]])\n  }\n\n  return tuples\n}\n\n// [[str name, str addr]... ] -> string\nfunction stringTuplesToString (tuples) {\n  const parts = []\n  tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    parts.push(proto.name)\n    if (tup.length > 1) {\n      parts.push(tup[1])\n    }\n  })\n\n  return cleanPath(parts.join('/'))\n}\n\n// [[str name, str addr]... ] -> [[int code, Buffer]... ]\nfunction stringTuplesToTuples (tuples) {\n  return tuples.map(tup => {\n    if (!Array.isArray(tup)) {\n      tup = [tup]\n    }\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toBuffer(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer]... ] -> [[str name, str addr]... ]\nfunction tuplesToStringTuples (tuples) {\n  return tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    if (tup.length > 1) {\n      return [proto.code, convert.toString(proto.code, tup[1])]\n    }\n    return [proto.code]\n  })\n}\n\n// [[int code, Buffer ]... ] -> Buffer\nfunction tuplesToBuffer (tuples) {\n  return fromBuffer(Buffer.concat(tuples.map(tup => {\n    const proto = protoFromTuple(tup)\n    let buf = Buffer.from(varint.encode(proto.code))\n\n    if (tup.length > 1) {\n      buf = Buffer.concat([buf, tup[1]]) // add address buffer\n    }\n\n    return buf\n  })))\n}\n\nfunction sizeForAddr (p, addr) {\n  if (p.size > 0) {\n    return p.size / 8\n  } else if (p.size === 0) {\n    return 0\n  } else {\n    const size = varint.decode(addr)\n    return size + varint.decode.bytes\n  }\n}\n\n// Buffer -> [[int code, Buffer ]... ]\nfunction bufferToTuples (buf) {\n  const tuples = []\n  let i = 0\n  while (i < buf.length) {\n    const code = varint.decode(buf, i)\n    const n = varint.decode.bytes\n\n    const p = protocols(code)\n\n    const size = sizeForAddr(p, buf.slice(i + n))\n\n    if (size === 0) {\n      tuples.push([code])\n      i += n\n      continue\n    }\n\n    const addr = buf.slice(i + n, i + n + size)\n\n    i += (size + n)\n\n    if (i > buf.length) { // did not end _exactly_ at buffer.length\n      throw ParseError('Invalid address buffer: ' + buf.toString('hex'))\n    }\n\n    // ok, tuple seems good.\n    tuples.push([code, addr])\n  }\n\n  return tuples\n}\n\n// Buffer -> String\nfunction bufferToString (buf) {\n  const a = bufferToTuples(buf)\n  const b = tuplesToStringTuples(a)\n  return stringTuplesToString(b)\n}\n\n// String -> Buffer\nfunction stringToBuffer (str) {\n  str = cleanPath(str)\n  const a = stringToStringTuples(str)\n  const b = stringTuplesToTuples(a)\n\n  return tuplesToBuffer(b)\n}\n\n// String -> Buffer\nfunction fromString (str) {\n  return stringToBuffer(str)\n}\n\n// Buffer -> Buffer\nfunction fromBuffer (buf) {\n  const err = validateBuffer(buf)\n  if (err) throw err\n  return Buffer.from(buf) // copy\n}\n\nfunction validateBuffer (buf) {\n  try {\n    bufferToTuples(buf) // try to parse. will throw if breaks\n  } catch (err) {\n    return err\n  }\n}\n\nfunction isValidBuffer (buf) {\n  return validateBuffer(buf) === undefined\n}\n\nfunction cleanPath (str) {\n  return '/' + str.trim().split('/').filter(a => a).join('/')\n}\n\nfunction ParseError (str) {\n  return new Error('Error parsing address: ' + str)\n}\n\nfunction protoFromTuple (tup) {\n  const proto = protocols(tup[0])\n  return proto\n}\n","'use strict'\n\nconst sha3 = require('js-sha3')\nconst murmur3 = require('murmurhash3js')\n\nconst utils = require('./utils')\nconst sha = require('./crypto-sha1-2')\n\nconst toCallback = utils.toCallback\nconst toBuf = utils.toBuf\nconst fromString = utils.fromString\nconst fromNumberTo32BitBuf = utils.fromNumberTo32BitBuf\n\nconst dblSha2256 = (buf, cb) => {\n  sha.sha2256(buf, (err, firstHash) => {\n    if (err) {\n      cb(err)\n    }\n    sha.sha2256((Buffer.from(firstHash)), cb)\n  })\n}\n\nmodule.exports = {\n  sha1: sha.sha1,\n  sha2256: sha.sha2256,\n  sha2512: sha.sha2512,\n  sha3512: toCallback(toBuf(sha3.sha3_512)),\n  sha3384: toCallback(toBuf(sha3.sha3_384)),\n  sha3256: toCallback(toBuf(sha3.sha3_256)),\n  sha3224: toCallback(toBuf(sha3.sha3_224)),\n  shake128: toCallback(toBuf(sha3.shake_128, 128)),\n  shake256: toCallback(toBuf(sha3.shake_256, 256)),\n  keccak224: toCallback(toBuf(sha3.keccak_224)),\n  keccak256: toCallback(toBuf(sha3.keccak_256)),\n  keccak384: toCallback(toBuf(sha3.keccak_384)),\n  keccak512: toCallback(toBuf(sha3.keccak_512)),\n  murmur3128: toCallback(toBuf(fromString(murmur3.x64.hash128))),\n  murmur332: toCallback(fromNumberTo32BitBuf(fromString(murmur3.x86.hash32))),\n  addBlake: require('./blake'),\n  dblSha2256: dblSha2256\n}\n","'use strict'\n\nconst nodeify = require('../nodeify')\n\nconst crypto = require('../webcrypto')\nconst lengths = require('./lengths')\n\nconst hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n}\n\nconst sign = (key, data, cb) => {\n  nodeify(crypto.subtle.sign({ name: 'HMAC' }, key, data)\n    .then((raw) => Buffer.from(raw)), cb)\n}\n\nexports.create = function (hashType, secret, callback) {\n  const hash = hashTypes[hashType]\n\n  nodeify(crypto.subtle.importKey(\n    'raw',\n    secret,\n    {\n      name: 'HMAC',\n      hash: { name: hash }\n    },\n    false,\n    ['sign']\n  ).then((key) => {\n    return {\n      digest (data, cb) {\n        sign(key, data, cb)\n      },\n      length: lengths[hashType]\n    }\n  }), callback)\n}\n","'use strict'\nconst randomBytes = require('iso-random-stream/src/random')\n\nmodule.exports = function (number) {\n  if (!number || typeof number !== 'number') {\n    throw new Error('first argument must be a Number bigger than 0')\n  }\n  return randomBytes(number)\n}\n","'use strict'\n\nconst ciphers = require('./ciphers')\n\nconst CIPHER_MODES = {\n  16: 'aes-128-ctr',\n  32: 'aes-256-ctr'\n}\n\nexports.create = function (key, iv, callback) {\n  const mode = CIPHER_MODES[key.length]\n  if (!mode) {\n    return callback(new Error('Invalid key length'))\n  }\n\n  const cipher = ciphers.createCipheriv(mode, key, iv)\n  const decipher = ciphers.createDecipheriv(mode, key, iv)\n\n  const res = {\n    encrypt (data, cb) {\n      cb(null, cipher.update(data))\n    },\n\n    decrypt (data, cb) {\n      cb(null, decipher.update(data))\n    }\n  }\n\n  callback(null, res)\n}\n","'use strict'\n\nconst forgePbkdf2 = require('node-forge/lib/pbkdf2')\nconst forgeUtil = require('node-forge/lib/util')\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n}\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n *\n * @param {string} password\n * @param {string} salt\n * @param {number} iterations\n * @param {number} keySize (in bytes)\n * @param {string} hash - The hash name ('sha1', 'sha2-512, ...)\n * @returns {string} - A new password\n */\nfunction pbkdf2 (password, salt, iterations, keySize, hash) {\n  const hasher = hashName[hash]\n  if (!hasher) {\n    throw new Error(`Hash '${hash}' is unknown or not supported`)\n  }\n  const dek = forgePbkdf2(\n    password,\n    salt,\n    iterations,\n    keySize,\n    hasher)\n  return forgeUtil.encode64(dek)\n}\n\nmodule.exports = pbkdf2\n","'use strict'\n\nmodule.exports = function isOnline (self) {\n  return () => {\n    return Boolean(self._bitswap && self.libp2p && self.libp2p.isStarted())\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\n\nmodule.exports = function config (self) {\n  return {\n    get: promisify((key, callback) => {\n      if (typeof key === 'function') {\n        callback = key\n        key = undefined\n      }\n\n      return self._repo.config.get(key, callback)\n    }),\n    set: promisify((key, value, callback) => {\n      self._repo.config.set(key, value, callback)\n    }),\n    replace: promisify((config, callback) => {\n      self._repo.config.set(config, callback)\n    })\n  }\n}\n","'use strict'\n\n// dns-nodejs gets replaced by dns-browser when webpacked/browserified\nconst dns = require('../runtime/dns-nodejs')\nconst promisify = require('promisify-es6')\n\nmodule.exports = () => {\n  return promisify((domain, opts, callback) => {\n    if (typeof domain !== 'string') {\n      return callback(new Error('Invalid arguments, domain must be a string'))\n    }\n\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    opts = opts || {}\n\n    dns(domain, opts, callback)\n  })\n}\n","'use strict'\n\nconst pkg = require('../../../package.json')\nconst promisify = require('promisify-es6')\n\n// TODO add the commit hash of the current ipfs version to the response.\nmodule.exports = function version (self) {\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    self.repo.version((err, repoVersion) => {\n      if (err) {\n        return callback(err)\n      }\n\n      callback(null, {\n        version: pkg.version,\n        repo: repoVersion,\n        commit: ''\n      })\n    })\n  })\n}\n","'use strict'\n\n// See https://github.com/ipfs/specs/tree/master/keystore\n\nconst promisify = require('promisify-es6')\n\nmodule.exports = function key (self) {\n  return {\n    gen: promisify((name, opts, callback) => {\n      opts = opts || {}\n      self._keychain.createKey(name, opts.type, opts.size, callback)\n    }),\n\n    info: promisify((name, callback) => {\n      self._keychain.findKeyByName(name, callback)\n    }),\n\n    list: promisify((callback) => {\n      self._keychain.listKeys(callback)\n    }),\n\n    rm: promisify((name, callback) => {\n      self._keychain.removeKey(name, callback)\n    }),\n\n    rename: promisify((oldName, newName, callback) => {\n      self._keychain.renameKey(oldName, newName, (err, key) => {\n        if (err) return callback(err)\n        const result = {\n          was: oldName,\n          now: key.name,\n          id: key.id,\n          overwrite: false\n        }\n        callback(null, result)\n      })\n    }),\n\n    import: promisify((name, pem, password, callback) => {\n      self._keychain.importKey(name, pem, password, callback)\n    }),\n\n    export: promisify((name, password, callback) => {\n      self._keychain.exportKey(name, password, callback)\n    })\n  }\n}\n","'use strict'\n\nconst defaultConfig = require('../runtime/config-nodejs.js')\nconst isMultiaddr = require('mafmt').IPFS.matches\nconst promisify = require('promisify-es6')\n\nfunction isValidMultiaddr (ma) {\n  try {\n    return isMultiaddr(ma)\n  } catch (err) {\n    return false\n  }\n}\n\nfunction invalidMultiaddrError (ma) {\n  return new Error(`${ma} is not a valid Multiaddr`)\n}\n\nmodule.exports = function bootstrap (self) {\n  return {\n    list: promisify((callback) => {\n      self._repo.config.get((err, config) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, { Peers: config.Bootstrap })\n      })\n    }),\n    add: promisify((multiaddr, args, callback) => {\n      if (typeof args === 'function') {\n        callback = args\n        args = { default: false }\n      }\n\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        return setImmediate(() => callback(invalidMultiaddrError(multiaddr)))\n      }\n\n      self._repo.config.get((err, config) => {\n        if (err) {\n          return callback(err)\n        }\n        if (args.default) {\n          config.Bootstrap = defaultConfig().Bootstrap\n        } else if (multiaddr && config.Bootstrap.indexOf(multiaddr) === -1) {\n          config.Bootstrap.push(multiaddr)\n        }\n        self._repo.config.set(config, (err) => {\n          if (err) {\n            return callback(err)\n          }\n\n          callback(null, {\n            Peers: args.default ? defaultConfig().Bootstrap : [multiaddr]\n          })\n        })\n      })\n    }),\n    rm: promisify((multiaddr, args, callback) => {\n      if (typeof args === 'function') {\n        callback = args\n        args = { all: false }\n      }\n      if (multiaddr && !isValidMultiaddr(multiaddr)) {\n        return setImmediate(() => callback(invalidMultiaddrError(multiaddr)))\n      }\n\n      self._repo.config.get((err, config) => {\n        if (err) {\n          return callback(err)\n        }\n        if (args.all) {\n          config.Bootstrap = []\n        } else {\n          config.Bootstrap = config.Bootstrap.filter((mh) => mh !== multiaddr)\n        }\n\n        self._repo.config.set(config, (err) => {\n          if (err) {\n            return callback(err)\n          }\n\n          const res = []\n          if (!args.all && multiaddr) {\n            res.push(multiaddr)\n          }\n\n          callback(null, { Peers: res })\n        })\n      })\n    })\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst repoVersion = require('ipfs-repo').repoVersion\n\nmodule.exports = function repo (self) {\n  return {\n    init: (bits, empty, callback) => {\n      // 1. check if repo already exists\n    },\n\n    /**\n     * If the repo has been initialized, report the current version.\n     * Otherwise report the version that would be initialized.\n     *\n     * @param {function(Error, Number)} [callback]\n     * @returns {undefined}\n     */\n    version: promisify((callback) => {\n      self._repo._isInitialized(err => {\n        if (err) {\n          // TODO: (dryajov) This is really hacky, there must be a better way\n          const match = [\n            /Key not found in database \\[\\/version\\]/,\n            /ENOENT/,\n            /repo is not initialized yet/\n          ].some((m) => {\n            return m.test(err.message)\n          })\n          if (match) {\n            // this repo has not been initialized\n            return callback(null, repoVersion)\n          }\n          return callback(err)\n        }\n\n        self._repo.version.get(callback)\n      })\n    }),\n\n    gc: promisify((options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      callback(new Error('Not implemented'))\n    }),\n\n    stat: promisify((options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      self._repo.stat(options, (err, stats) => {\n        if (err) return callback(err)\n\n        callback(null, {\n          numObjects: stats.numObjects,\n          repoSize: stats.repoSize,\n          repoPath: stats.repoPath,\n          version: stats.version.toString(),\n          storageMax: stats.storageMax\n        })\n      })\n    }),\n\n    path: () => self._repo.path\n  }\n}\n","'use strict'\n\nconst toStream = require('pull-stream-to-stream')\n\nmodule.exports = function pingReadableStream (self) {\n  return (peerId, opts) => toStream.source(self.pingPullStream(peerId, opts))\n}\n","'use strict'\n\nconst debug = require('debug')\nconst OFFLINE_ERROR = require('../utils').OFFLINE_ERROR\nconst PeerId = require('peer-id')\nconst pull = require('pull-stream')\nconst Pushable = require('pull-pushable')\n\nconst log = debug('ipfs:pingPullStream')\nlog.error = debug('ipfs:pingPullStream:error')\n\nmodule.exports = function pingPullStream (self) {\n  return (peerId, opts) => {\n    if (!self.isOnline()) {\n      return pull.error(new Error(OFFLINE_ERROR))\n    }\n\n    opts = Object.assign({ count: 10 }, opts)\n\n    const source = Pushable()\n\n    getPeer(self.libp2p, source, peerId, (err, peer) => {\n      if (err) {\n        log.error(err)\n        source.end(err)\n        return\n      }\n\n      runPing(self.libp2p, source, opts.count, peer, (err) => {\n        if (err) {\n          log.error(err)\n          source.push(getPacket({ success: false, text: err.toString() }))\n          source.end()\n        }\n      })\n    })\n\n    return source\n  }\n}\n\nfunction getPacket (msg) {\n  // Default msg\n  const basePacket = { success: true, time: 0, text: '' }\n  return Object.assign(basePacket, msg)\n}\n\nfunction getPeer (libp2pNode, statusStream, peerIdStr, cb) {\n  let peerId\n\n  try {\n    peerId = PeerId.createFromB58String(peerIdStr)\n  } catch (err) {\n    return cb(err)\n  }\n\n  let peerInfo\n\n  try {\n    peerInfo = libp2pNode.peerBook.get(peerId)\n  } catch (err) {\n    log('Peer not found in peer book, trying peer routing')\n\n    // Share lookup status just as in the go implemmentation\n    statusStream.push(getPacket({ text: `Looking up peer ${peerIdStr}` }))\n    return libp2pNode.peerRouting.findPeer(peerId, cb)\n  }\n\n  cb(null, peerInfo)\n}\n\nfunction runPing (libp2pNode, statusStream, count, peer, cb) {\n  libp2pNode.ping(peer, (err, p) => {\n    if (err) { return cb(err) }\n\n    let packetCount = 0\n    let totalTime = 0\n    statusStream.push(getPacket({ text: `PING ${peer.id.toB58String()}` }))\n\n    p.on('ping', (time) => {\n      statusStream.push(getPacket({ time }))\n      totalTime += time\n      packetCount++\n      if (packetCount >= count) {\n        const average = totalTime / count\n        p.stop()\n        statusStream.push(getPacket({ text: `Average latency: ${average}ms` }))\n        statusStream.end()\n      }\n    })\n\n    p.on('error', (err) => {\n      log.error(err)\n      p.stop()\n      cb(err)\n    })\n\n    p.start()\n  })\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst setImmediate = require('async/setImmediate')\nconst pkgversion = require('../../../package.json').version\n\nmodule.exports = function id (self) {\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    setImmediate(() => callback(null, {\n      id: self._peerInfo.id.toB58String(),\n      publicKey: self._peerInfo.id.pubKey.bytes.toString('base64'),\n      addresses: self._peerInfo.multiaddrs\n        .toArray()\n        .map((ma) => ma.toString())\n        .filter((ma) => ma.indexOf('ipfs') >= 0)\n        .sort(),\n      agentVersion: `js-ipfs/${pkgversion}`,\n      protocolVersion: '9000'\n    }))\n  })\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst pull = require('pull-stream/pull')\n\nmodule.exports = function ping (self) {\n  return promisify((peerId, opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    pull(\n      self.pingPullStream(peerId, opts),\n      pull.collect(callback)\n    )\n  })\n}\n","'use strict'\n\nconst Block = require('ipfs-block')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst waterfall = require('async/waterfall')\nconst setImmediate = require('async/setImmediate')\nconst promisify = require('promisify-es6')\nconst errCode = require('err-code')\n\nmodule.exports = function block (self) {\n  return {\n    get: promisify((cid, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      try {\n        cid = cleanCid(cid)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid)\n      }\n\n      self._blockService.get(cid, callback)\n    }),\n    put: promisify((block, options, callback) => {\n      callback = callback || function noop () {}\n\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      if (Array.isArray(block)) {\n        return callback(new Error('Array is not supported'))\n      }\n\n      waterfall([\n        (cb) => {\n          if (Block.isBlock(block)) {\n            return cb(null, block)\n          }\n\n          if (options.cid && CID.isCID(options.cid)) {\n            return cb(null, new Block(block, options.cid))\n          }\n\n          const mhtype = options.mhtype || 'sha2-256'\n          const format = options.format || 'dag-pb'\n          let cidVersion\n          // const mhlen = options.mhlen || 0\n\n          if (options.version == null) {\n            // Pick appropriate CID version\n            cidVersion = mhtype === 'sha2-256' && format === 'dag-pb' ? 0 : 1\n          } else {\n            cidVersion = options.version\n          }\n\n          multihashing(block, mhtype, (err, multihash) => {\n            if (err) {\n              return cb(err)\n            }\n\n            let cid\n            try {\n              cid = new CID(cidVersion, format, multihash)\n            } catch (err) {\n              return cb(err)\n            }\n\n            cb(null, new Block(block, cid))\n          })\n        },\n        (block, cb) => self._blockService.put(block, (err) => {\n          if (err) {\n            return cb(err)\n          }\n\n          if (options.preload !== false) {\n            self._preload(block.cid)\n          }\n\n          cb(null, block)\n        })\n      ], callback)\n    }),\n    rm: promisify((cid, callback) => {\n      try {\n        cid = cleanCid(cid)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n      self._blockService.delete(cid, callback)\n    }),\n    stat: promisify((cid, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      try {\n        cid = cleanCid(cid)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid)\n      }\n\n      self._blockService.get(cid, (err, block) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, {\n          key: cid.toString(),\n          size: block.data.length\n        })\n      })\n    })\n  }\n}\n\nfunction cleanCid (cid) {\n  if (CID.isCID(cid)) {\n    return cid\n  }\n\n  // CID constructor knows how to do the cleaning :)\n  return new CID(cid)\n}\n","'use strict'\n\nconst parallel = require('async/parallel')\nconst promisify = require('promisify-es6')\n\nmodule.exports = (self) => {\n  return promisify((callback) => {\n    callback = callback || function noop () {}\n\n    self.log('stop')\n\n    if (self.state.state() === 'stopped') {\n      return callback(new Error('Already stopped'))\n    }\n\n    if (self.state.state() !== 'running') {\n      return callback(new Error('Not able to stop from state: ' + self.state.state()))\n    }\n\n    self.state.stop()\n    self._blockService.unsetExchange()\n    self._bitswap.stop()\n    self._preload.stop()\n\n    parallel([\n      cb => self._ipns.republisher.stop(cb),\n      cb => self._mfsPreload.stop(cb),\n      cb => {\n        const libp2p = self.libp2p\n        self.libp2p = null\n        libp2p.stop(cb)\n      }\n    ], err => {\n      self._repo.close(closeErr => {\n        if (err || closeErr) {\n          self.emit('error', err || closeErr)\n          return callback(err || closeErr)\n        }\n\n        self.state.stopped()\n        self.emit('stop')\n        callback()\n      })\n    })\n  })\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst isIpfs = require('is-ipfs')\nconst setImmediate = require('async/setImmediate')\nconst CID = require('cids')\nconst { cidToString } = require('../../utils/cid')\n\nmodule.exports = (self) => {\n  return promisify(async (name, opts, cb) => {\n    if (typeof opts === 'function') {\n      cb = opts\n      opts = {}\n    }\n\n    opts = opts || {}\n\n    if (!isIpfs.path(name)) {\n      return setImmediate(() => cb(new Error('invalid argument ' + name)))\n    }\n\n    // TODO remove this and update subsequent code when IPNS is implemented\n    if (!isIpfs.ipfsPath(name)) {\n      return setImmediate(() => cb(new Error('resolve non-IPFS names is not implemented')))\n    }\n\n    const split = name.split('/') // ['', 'ipfs', 'hash', ...path]\n    const cid = new CID(split[2])\n\n    if (split.length === 3) {\n      return setImmediate(() => cb(null, `/ipfs/${cidToString(cid, { base: opts.cidBase })}`))\n    }\n\n    const path = split.slice(3).join('/')\n\n    const results = self._ipld.resolve(cid, path)\n    let value = cid\n    let remainderPath = path\n    try {\n      for await (const result of results) {\n        if (result.remainderPath === '') {\n          // Use values from previous iteration if the value isn't a CID\n          if (CID.isCID(result.value)) {\n            value = result.value\n            remainderPath = ''\n          }\n\n          if (result.value && CID.isCID(result.value.Hash)) {\n            value = result.value.Hash\n            remainderPath = ''\n          }\n\n          break\n        }\n\n        value = result.value\n        remainderPath = result.remainderPath\n      }\n    } catch (error) {\n      return cb(error)\n    }\n    return cb(null, `/ipfs/${cidToString(value, { base: opts.cidBase })}${remainderPath ? '/' + remainderPath : ''}`)\n  })\n}\n","'use strict'\n\nconst peerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst multiaddr = require('multiaddr')\nconst waterfall = require('async/waterfall')\nconst Keychain = require('libp2p-keychain')\nconst mergeOptions = require('merge-options')\nconst NoKeychain = require('./no-keychain')\n/*\n * Load stuff from Repo into memory\n */\nmodule.exports = function preStart (self) {\n  return (callback) => {\n    self.log('pre-start')\n\n    const pass = self._options.pass\n    waterfall([\n      (cb) => self._repo.config.get(cb),\n      (config, cb) => {\n        if (!self._options.config) {\n          return cb(null, config)\n        }\n\n        config = mergeOptions(config, self._options.config)\n\n        self.config.replace(config, (err) => {\n          if (err) {\n            return cb(err)\n          }\n\n          cb(null, config)\n        })\n      },\n      (config, cb) => {\n        // Create keychain configuration, if needed.\n        if (config.Keychain) {\n          return cb(null, config)\n        }\n        config.Keychain = Keychain.generateOptions()\n        self.config.set('Keychain', config.Keychain, (err) => {\n          self.log('using default keychain options')\n          cb(err, config)\n        })\n      },\n      (config, cb) => {\n        // Construct the keychain\n        if (self._keychain) {\n          // most likely an init or upgrade has happened\n        } else if (pass) {\n          const keychainOptions = Object.assign({ passPhrase: pass }, config.Keychain)\n          self._keychain = new Keychain(self._repo.keys, keychainOptions)\n          self.log('keychain constructed')\n        } else {\n          self._keychain = new NoKeychain()\n          self.log('no keychain, use --pass')\n        }\n        cb(null, config)\n      },\n      (config, cb) => {\n        const privKey = config.Identity.PrivKey\n\n        peerId.createFromPrivKey(privKey, (err, id) => {\n          cb(err, config, id)\n        })\n      },\n      (config, id, cb) => {\n        // Import the private key as 'self', if needed.\n        if (!pass) {\n          return cb(null, config, id)\n        }\n        self._keychain.findKeyByName('self', (err) => {\n          if (err) {\n            self.log('Creating \"self\" key')\n            return self._keychain.importPeer('self', id, (err) => cb(err, config, id))\n          }\n          cb(null, config, id)\n        })\n      },\n      (config, id, cb) => {\n        self.log('peer created')\n        self._peerInfo = new PeerInfo(id)\n\n        if (config.Addresses && config.Addresses.Swarm) {\n          config.Addresses.Swarm.forEach((addr) => {\n            let ma = multiaddr(addr)\n\n            if (ma.getPeerId()) {\n              ma = ma.encapsulate('/ipfs/' + self._peerInfo.id.toB58String())\n            }\n\n            self._peerInfo.multiaddrs.add(ma)\n          })\n        }\n\n        cb()\n      },\n      (cb) => self.pin._load(cb)\n    ], callback)\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst setImmediate = require('async/setImmediate')\nconst errCode = require('err-code')\n\nconst errPubsubDisabled = () => {\n  return errCode(new Error('pubsub experiment is not enabled'), 'ERR_PUBSUB_DISABLED')\n}\n\nmodule.exports = function pubsub (self) {\n  return {\n    subscribe: (topic, handler, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return callback\n          ? setImmediate(() => callback(errPubsubDisabled()))\n          : Promise.reject(errPubsubDisabled())\n      }\n\n      if (!callback) {\n        return new Promise((resolve, reject) => {\n          self.libp2p.pubsub.subscribe(topic, options, handler, (err) => {\n            if (err) {\n              return reject(err)\n            }\n            resolve()\n          })\n        })\n      }\n\n      self.libp2p.pubsub.subscribe(topic, options, handler, callback)\n    },\n\n    unsubscribe: (topic, handler, callback) => {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return callback\n          ? setImmediate(() => callback(errPubsubDisabled()))\n          : Promise.reject(errPubsubDisabled())\n      }\n\n      self.libp2p.pubsub.unsubscribe(topic, handler)\n\n      if (!callback) {\n        return Promise.resolve()\n      }\n\n      setImmediate(() => callback())\n    },\n\n    publish: promisify((topic, data, callback) => {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(() => callback(errPubsubDisabled()))\n      }\n      self.libp2p.pubsub.publish(topic, data, callback)\n    }),\n\n    ls: promisify((callback) => {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(() => callback(errPubsubDisabled()))\n      }\n      self.libp2p.pubsub.ls(callback)\n    }),\n\n    peers: promisify((topic, callback) => {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        return setImmediate(() => callback(errPubsubDisabled()))\n      }\n      self.libp2p.pubsub.peers(topic, callback)\n    }),\n\n    setMaxListeners (n) {\n      if (!self._options.EXPERIMENTAL.pubsub) {\n        throw errPubsubDisabled()\n      }\n      self.libp2p.pubsub.setMaxListeners(n)\n    }\n  }\n}\n","'use strict'\n\nconst OFFLINE_ERROR = require('../utils').OFFLINE_ERROR\nconst promisify = require('promisify-es6')\nconst setImmediate = require('async/setImmediate')\nconst Big = require('bignumber.js')\nconst CID = require('cids')\nconst PeerId = require('peer-id')\nconst errCode = require('err-code')\n\nfunction formatWantlist (list, cidBase) {\n  return Array.from(list).map((e) => ({ '/': e[1].cid.toBaseEncodedString(cidBase) }))\n}\n\nmodule.exports = function bitswap (self) {\n  return {\n    wantlist: promisify((peerId, callback) => {\n      if (typeof peerId === 'function') {\n        callback = peerId\n        peerId = null\n      }\n\n      if (!self.isOnline()) {\n        return setImmediate(() => callback(new Error(OFFLINE_ERROR)))\n      }\n\n      let list\n      if (peerId) {\n        try {\n          peerId = PeerId.createFromB58String(peerId)\n        } catch (e) {\n          peerId = null\n        }\n        if (!peerId) {\n          return setImmediate(() => callback(new Error('Invalid peerId')))\n        }\n        list = self._bitswap.wantlistForPeer(peerId)\n      } else {\n        list = self._bitswap.getWantlist()\n      }\n\n      setImmediate(() => callback(null, { Keys: formatWantlist(list) }))\n    }),\n\n    stat: promisify((callback) => {\n      if (!self.isOnline()) {\n        return setImmediate(() => callback(new Error(OFFLINE_ERROR)))\n      }\n\n      const snapshot = self._bitswap.stat().snapshot\n\n      setImmediate(() => {\n        callback(null, {\n          provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n          blocksReceived: new Big(snapshot.blocksReceived),\n          wantlist: formatWantlist(self._bitswap.getWantlist()),\n          peers: self._bitswap.peers().map((id) => id.toB58String()),\n          dupBlksReceived: new Big(snapshot.dupBlksReceived),\n          dupDataReceived: new Big(snapshot.dupDataReceived),\n          dataReceived: new Big(snapshot.dataReceived),\n          blocksSent: new Big(snapshot.blocksSent),\n          dataSent: new Big(snapshot.dataSent)\n        })\n      })\n    }),\n\n    unwant: promisify((keys, callback) => {\n      if (!self.isOnline()) {\n        return setImmediate(() => callback(new Error(OFFLINE_ERROR)))\n      }\n\n      if (!Array.isArray(keys)) {\n        keys = [keys]\n      }\n\n      try {\n        keys = keys.map((key) => {\n          if (CID.isCID(key)) {\n            return key\n          }\n          return new CID(key)\n        })\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n\n      setImmediate(() => callback(null, self._bitswap.unwant(keys)))\n    })\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\n\nconst OFFLINE_ERROR = require('../utils').OFFLINE_ERROR\n\nmodule.exports = function swarm (self) {\n  return {\n    peers: promisify((opts, callback) => {\n      if (typeof opts === 'function') {\n        callback = opts\n        opts = {}\n      }\n\n      opts = opts || {}\n\n      if (!self.isOnline()) {\n        return callback(new Error(OFFLINE_ERROR))\n      }\n\n      const verbose = opts.v || opts.verbose\n      // TODO: return latency and streams when verbose is set\n      // we currently don't have this information\n\n      const peers = []\n\n      Object.values(self._peerInfoBook.getAll()).forEach((peer) => {\n        const connectedAddr = peer.isConnected()\n\n        if (!connectedAddr) { return }\n\n        const tupple = {\n          addr: connectedAddr,\n          peer: peer.id\n        }\n        if (verbose) {\n          tupple.latency = 'unknown'\n        }\n\n        peers.push(tupple)\n      })\n\n      callback(null, peers)\n    }),\n\n    // all the addrs we know\n    addrs: promisify((callback) => {\n      if (!self.isOnline()) {\n        return callback(new Error(OFFLINE_ERROR))\n      }\n\n      const peers = Object.values(self._peerInfoBook.getAll())\n\n      callback(null, peers)\n    }),\n\n    localAddrs: promisify((callback) => {\n      if (!self.isOnline()) {\n        return callback(new Error(OFFLINE_ERROR))\n      }\n\n      callback(null, self.libp2p.peerInfo.multiaddrs.toArray())\n    }),\n\n    connect: promisify((maddr, callback) => {\n      if (!self.isOnline()) {\n        return callback(new Error(OFFLINE_ERROR))\n      }\n\n      self.libp2p.dial(maddr, callback)\n    }),\n\n    disconnect: promisify((maddr, callback) => {\n      if (!self.isOnline()) {\n        return callback(new Error(OFFLINE_ERROR))\n      }\n\n      self.libp2p.hangUp(maddr, callback)\n    }),\n\n    filters: promisify((callback) => callback(new Error('Not implemented')))\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst Big = require('bignumber.js')\nconst Pushable = require('pull-pushable')\nconst human = require('human-to-milliseconds')\nconst toStream = require('pull-stream-to-stream')\nconst errCode = require('err-code')\n\nfunction bandwidthStats (self, opts) {\n  return new Promise((resolve, reject) => {\n    let stats\n\n    if (opts.peer) {\n      stats = self.libp2p.stats.forPeer(opts.peer)\n    } else if (opts.proto) {\n      stats = self.libp2p.stats.forProtocol(opts.proto)\n    } else {\n      stats = self.libp2p.stats.global\n    }\n\n    if (!stats) {\n      resolve({\n        totalIn: new Big(0),\n        totalOut: new Big(0),\n        rateIn: new Big(0),\n        rateOut: new Big(0)\n      })\n      return\n    }\n\n    resolve({\n      totalIn: stats.snapshot.dataReceived,\n      totalOut: stats.snapshot.dataSent,\n      rateIn: new Big(stats.movingAverages.dataReceived['60000'].movingAverage() / 60),\n      rateOut: new Big(stats.movingAverages.dataSent['60000'].movingAverage() / 60)\n    })\n  })\n}\n\nmodule.exports = function stats (self) {\n  const _bwPullStream = (opts) => {\n    opts = opts || {}\n    let interval = null\n    let stream = Pushable(true, () => {\n      if (interval) {\n        clearInterval(interval)\n      }\n    })\n\n    if (opts.poll) {\n      human(opts.interval || '1s', (err, value) => {\n        if (err) {\n          return stream.end(errCode(err, 'ERR_INVALID_POLL_INTERVAL'))\n        }\n\n        interval = setInterval(() => {\n          bandwidthStats(self, opts)\n            .then((stats) => stream.push(stats))\n            .catch((err) => stream.end(err))\n        }, value)\n      })\n    } else {\n      bandwidthStats(self, opts)\n        .then((stats) => {\n          stream.push(stats)\n          stream.end()\n        })\n        .catch((err) => stream.end(err))\n    }\n\n    return stream.source\n  }\n\n  return {\n    bitswap: require('./bitswap')(self).stat,\n    repo: require('./repo')(self).stat,\n    bw: promisify((opts, callback) => {\n      if (typeof opts === 'function') {\n        callback = opts\n        opts = {}\n      }\n\n      opts = opts || {}\n\n      bandwidthStats(self, opts)\n        .then((stats) => callback(null, stats))\n        .catch((err) => callback(err))\n    }),\n    bwReadableStream: (opts) => toStream.source(_bwPullStream(opts)),\n    bwPullStream: _bwPullStream\n  }\n}\n","'use strict'\n\nconst waterfall = require('async/waterfall')\nconst parallel = require('async/parallel')\nconst setImmediate = require('async/setImmediate')\nconst promisify = require('promisify-es6')\nconst dagPB = require('ipld-dag-pb')\nconst DAGNode = dagPB.DAGNode\nconst DAGLink = dagPB.DAGLink\nconst CID = require('cids')\nconst mh = require('multihashes')\nconst multicodec = require('multicodec')\nconst Unixfs = require('ipfs-unixfs')\nconst errCode = require('err-code')\n\nfunction normalizeMultihash (multihash, enc) {\n  if (typeof multihash === 'string') {\n    if (enc === 'base58' || !enc) {\n      return multihash\n    }\n\n    return Buffer.from(multihash, enc)\n  } else if (Buffer.isBuffer(multihash)) {\n    return multihash\n  } else if (CID.isCID(multihash)) {\n    return multihash.buffer\n  } else {\n    throw new Error('unsupported multihash')\n  }\n}\n\nfunction parseBuffer (buf, encoding, callback) {\n  switch (encoding) {\n    case 'json':\n      return parseJSONBuffer(buf, callback)\n    case 'protobuf':\n      return parseProtoBuffer(buf, callback)\n    default:\n      callback(new Error(`unkown encoding: ${encoding}`))\n  }\n}\n\nfunction parseJSONBuffer (buf, callback) {\n  let data\n  let links\n\n  try {\n    const parsed = JSON.parse(buf.toString())\n\n    links = (parsed.Links || []).map((link) => {\n      return new DAGLink(\n        link.Name || link.name,\n        link.Size || link.size,\n        mh.fromB58String(link.Hash || link.hash || link.multihash)\n      )\n    })\n    data = Buffer.from(parsed.Data)\n  } catch (err) {\n    return callback(new Error('failed to parse JSON: ' + err))\n  }\n\n  try {\n    callback(null, DAGNode.create(data, links))\n  } catch (err) {\n    callback(err)\n  }\n}\n\nfunction parseProtoBuffer (buf, callback) {\n  let obj\n  try {\n    obj = dagPB.util.deserialize(buf)\n  } catch (err) {\n    return callback(err)\n  }\n  callback(null, obj)\n}\n\nfunction findLinks (node, links = []) {\n  for (let key in node) {\n    const val = node[key]\n\n    if (key === '/' && Object.keys(node).length === 1) {\n      try {\n        links.push(new DAGLink('', 0, new CID(val)))\n        continue\n      } catch (_) {\n        // not a CID\n      }\n    }\n\n    if (CID.isCID(val)) {\n      links.push(new DAGLink('', 0, val))\n\n      continue\n    }\n\n    if (Array.isArray(val)) {\n      findLinks(val, links)\n    }\n\n    if (typeof val === 'object' && !(val instanceof String)) {\n      findLinks(val, links)\n    }\n  }\n\n  return links\n}\n\nmodule.exports = function object (self) {\n  function editAndSave (edit) {\n    return (multihash, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      waterfall([\n        (cb) => {\n          self.object.get(multihash, options, cb)\n        },\n        (node, cb) => {\n          // edit applies the edit func passed to\n          // editAndSave\n          edit(node, (err, node) => {\n            if (err) {\n              return cb(err)\n            }\n\n            self._ipld.put(node, multicodec.DAG_PB, {\n              cidVersion: 0,\n              hashAlg: multicodec.SHA2_256\n            }).then(\n              (cid) => {\n                if (options.preload !== false) {\n                  self._preload(cid)\n                }\n\n                cb(null, cid)\n              },\n              (error) => cb(error)\n            )\n          })\n        }\n      ], callback)\n    }\n  }\n\n  return {\n    new: promisify((template, options, callback) => {\n      if (typeof template === 'function') {\n        callback = template\n        template = undefined\n        options = {}\n      }\n\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      let data\n\n      if (template) {\n        if (template !== 'unixfs-dir') {\n          return setImmediate(() => callback(new Error('unknown template')))\n        }\n        data = (new Unixfs('directory')).marshal()\n      } else {\n        data = Buffer.alloc(0)\n      }\n\n      let node\n\n      try {\n        node = DAGNode.create(data)\n      } catch (err) {\n        return callback(err)\n      }\n\n      self._ipld.put(node, multicodec.DAG_PB, {\n        cidVersion: 0,\n        hashAlg: multicodec.SHA2_256\n      }).then(\n        (cid) => {\n          if (options.preload !== false) {\n            self._preload(cid)\n          }\n\n          callback(null, cid)\n        },\n        (error) => callback(error)\n      )\n    }),\n    put: promisify((obj, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      const encoding = options.enc\n      let node\n\n      if (Buffer.isBuffer(obj)) {\n        if (encoding) {\n          parseBuffer(obj, encoding, (err, _node) => {\n            if (err) {\n              return callback(err)\n            }\n            node = _node\n            next()\n          })\n        } else {\n          try {\n            node = DAGNode.create(obj)\n          } catch (err) {\n            return callback(err)\n          }\n\n          next()\n        }\n      } else if (DAGNode.isDAGNode(obj)) {\n        // already a dag node\n        node = obj\n        next()\n      } else if (typeof obj === 'object') {\n        try {\n          node = DAGNode.create(obj.Data, obj.Links)\n        } catch (err) {\n          return callback(err)\n        }\n\n        next()\n      } else {\n        return callback(new Error('obj not recognized'))\n      }\n\n      function next () {\n        self._ipld.put(node, multicodec.DAG_PB, {\n          cidVersion: 0,\n          hashAlg: multicodec.SHA2_256\n        }).then(\n          (cid) => {\n            if (options.preload !== false) {\n              self._preload(cid)\n            }\n\n            callback(null, cid)\n          },\n          (error) => callback(error)\n        )\n      }\n    }),\n\n    get: promisify((multihash, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      let mh, cid\n\n      try {\n        mh = normalizeMultihash(multihash, options.enc)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_MULTIHASH')))\n      }\n\n      try {\n        cid = new CID(mh)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n\n      if (options.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid)\n      }\n\n      self._ipld.get(cid).then(\n        (node) => callback(null, node),\n        (error) => callback(error)\n      )\n    }),\n\n    data: promisify((multihash, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      self.object.get(multihash, options, (err, node) => {\n        if (err) {\n          return callback(err)\n        }\n\n        callback(null, node.Data)\n      })\n    }),\n\n    links: promisify((multihash, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      const cid = new CID(multihash)\n\n      self.dag.get(cid, options, (err, result) => {\n        if (err) {\n          return callback(err)\n        }\n\n        if (cid.codec === 'raw') {\n          return callback(null, [])\n        }\n\n        if (cid.codec === 'dag-pb') {\n          return callback(null, result.value.Links)\n        }\n\n        if (cid.codec === 'dag-cbor') {\n          const links = findLinks(result)\n\n          return callback(null, links)\n        }\n\n        callback(new Error(`Cannot resolve links from codec ${cid.codec}`))\n      })\n    }),\n\n    stat: promisify((multihash, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      waterfall([\n        (cb) => self.object.get(multihash, options, cb),\n        (node, cb) => {\n          cb(null, {\n            node,\n            serialized: dagPB.util.serialize(node)\n          })\n        },\n        ({ node, serialized }, cb) => {\n          parallel({\n            serialized: (next) => next(null, serialized),\n            cid: (next) => dagPB.util.cid(serialized, {\n              cidVersion: 0\n            }).then((cid) => next(null, cid), next),\n            node: (next) => next(null, node)\n          }, cb)\n        }\n      ], (err, result) => {\n        if (err) {\n          return callback(err)\n        }\n\n        const blockSize = result.serialized.length\n        const linkLength = result.node.Links.reduce((a, l) => a + l.Tsize, 0)\n\n        callback(null, {\n          Hash: result.cid.toBaseEncodedString(),\n          NumLinks: result.node.Links.length,\n          BlockSize: blockSize,\n          LinksSize: blockSize - result.node.Data.length,\n          DataSize: result.node.Data.length,\n          CumulativeSize: blockSize + linkLength\n        })\n      })\n    }),\n\n    patch: promisify({\n      addLink (multihash, link, options, callback) {\n        editAndSave((node, cb) => {\n          DAGNode.addLink(node, link).then((node) => {\n            cb(null, node)\n          }, cb)\n        })(multihash, options, callback)\n      },\n\n      rmLink (multihash, linkRef, options, callback) {\n        editAndSave((node, cb) => {\n          linkRef = linkRef.Name || linkRef.name\n\n          try {\n            node = DAGNode.rmLink(node, linkRef)\n          } catch (err) {\n            return cb(err)\n          }\n\n          cb(null, node)\n        })(multihash, options, callback)\n      },\n\n      appendData (multihash, data, options, callback) {\n        editAndSave((node, cb) => {\n          const newData = Buffer.concat([node.Data, data])\n\n          try {\n            node = DAGNode.create(newData, node.Links)\n          } catch (err) {\n            return cb(err)\n          }\n\n          cb(null, node)\n        })(multihash, options, callback)\n      },\n\n      setData (multihash, data, options, callback) {\n        editAndSave((node, cb) => {\n          try {\n            node = DAGNode.create(data, node.Links)\n          } catch (err) {\n            return cb(err)\n          }\n\n          cb(null, node)\n        })(multihash, options, callback)\n      }\n    })\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst every = require('async/every')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst CID = require('cids')\nconst each = require('async/each')\nconst nextTick = require('async/nextTick')\n\nconst errcode = require('err-code')\n\nconst debug = require('debug')\nconst log = debug('ipfs:dht')\nlog.error = debug('ipfs:dht:error')\n\nmodule.exports = (self) => {\n  return {\n    /**\n     * Given a key, query the DHT for its best value.\n     *\n     * @param {Buffer} key\n     * @param {Object} options - get options\n     * @param {number} options.timeout - optional timeout\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    get: promisify((key, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      if (!Buffer.isBuffer(key)) {\n        try {\n          key = (new CID(key)).buffer\n        } catch (err) {\n          log.error(err)\n\n          return nextTick(() => callback(errcode(err, 'ERR_INVALID_CID')))\n        }\n      }\n\n      self.libp2p.dht.get(key, options, callback)\n    }),\n\n    /**\n     * Write a key/value pair to the DHT.\n     *\n     * Given a key of the form /foo/bar and a value of any\n     * form, this will write that value to the DHT with\n     * that key.\n     *\n     * @param {Buffer} key\n     * @param {Buffer} value\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    put: promisify((key, value, callback) => {\n      if (!Buffer.isBuffer(key)) {\n        try {\n          key = (new CID(key)).buffer\n        } catch (err) {\n          log.error(err)\n\n          return nextTick(() => callback(errcode(err, 'ERR_INVALID_CID')))\n        }\n      }\n\n      self.libp2p.dht.put(key, value, callback)\n    }),\n\n    /**\n     * Find peers in the DHT that can provide a specific value, given a key.\n     *\n     * @param {CID} key - They key to find providers for.\n     * @param {Object} options - findProviders options\n     * @param {number} options.timeout - how long the query should maximally run, in milliseconds (default: 60000)\n     * @param {number} options.maxNumProviders - maximum number of providers to find\n     * @param {function(Error, Array<PeerInfo>)} [callback]\n     * @returns {Promise<PeerInfo>|void}\n     */\n    findProvs: promisify((key, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      if (typeof key === 'string') {\n        try {\n          key = new CID(key)\n        } catch (err) {\n          log.error(err)\n\n          return nextTick(() => callback(errcode(err, 'ERR_INVALID_CID')))\n        }\n      }\n\n      self.libp2p.contentRouting.findProviders(key, options, callback)\n    }),\n\n    /**\n     * Query the DHT for all multiaddresses associated with a `PeerId`.\n     *\n     * @param {PeerId} peer - The id of the peer to search for.\n     * @param {function(Error, PeerInfo)} [callback]\n     * @returns {Promise<PeerInfo>|void}\n     */\n    findPeer: promisify((peer, callback) => {\n      if (typeof peer === 'string') {\n        peer = PeerId.createFromB58String(peer)\n      }\n\n      self.libp2p.peerRouting.findPeer(peer, callback)\n    }),\n\n    /**\n     * Announce to the network that we are providing given values.\n     *\n     * @param {CID|Array<CID>} keys - The keys that should be announced.\n     * @param {Object} options - provide options\n     * @param {bool} [options.recursive=false] - Provide not only the given object but also all objects linked from it.\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    provide: promisify((keys, options, callback) => {\n      if (!Array.isArray(keys)) {\n        keys = [keys]\n      }\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      // ensure blocks are actually local\n      every(keys, (key, cb) => {\n        self._repo.blocks.has(key, cb)\n      }, (err, has) => {\n        if (err) {\n          return callback(err)\n        }\n\n        if (!has) {\n          const errMsg = 'block(s) not found locally, cannot provide'\n\n          log.error(errMsg)\n          return callback(errcode(errMsg, 'ERR_BLOCK_NOT_FOUND'))\n        }\n\n        if (options.recursive) {\n          // TODO: Implement recursive providing\n          return callback(errcode('not implemented yet', 'ERR_NOT_IMPLEMENTED_YET'))\n        } else {\n          each(keys, (cid, cb) => {\n            self.libp2p.contentRouting.provide(cid, cb)\n          }, callback)\n        }\n      })\n    }),\n\n    /**\n     * Find the closest peers to a given `PeerId`, by querying the DHT.\n     *\n     * @param {PeerId} peer - The `PeerId` to run the query agains.\n     * @param {function(Error, Array<PeerInfo>)} [callback]\n     * @returns {Promise<Array<PeerInfo>>|void}\n     */\n    query: promisify((peerId, callback) => {\n      if (typeof peerId === 'string') {\n        try {\n          peerId = PeerId.createFromB58String(peerId)\n        } catch (err) {\n          log.error(err)\n          return callback(err)\n        }\n      }\n\n      // TODO expose this method in peerRouting\n      self.libp2p._dht.getClosestPeers(peerId.toBytes(), (err, peerIds) => {\n        if (err) {\n          log.error(err)\n          return callback(err)\n        }\n\n        callback(null, peerIds.map((id) => new PeerInfo(id)))\n      })\n    })\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst CID = require('cids')\nconst pull = require('pull-stream')\nconst iterToPull = require('async-iterator-to-pull-stream')\nconst mapAsync = require('async/map')\nconst setImmediate = require('async/setImmediate')\nconst flattenDeep = require('just-flatten-it')\nconst errCode = require('err-code')\nconst multicodec = require('multicodec')\n\nmodule.exports = function dag (self) {\n  return {\n    put: promisify((dagNode, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      if (options.cid && (options.format || options.hashAlg)) {\n        return callback(new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hashAlg` options.'))\n      } else if (((options.format && !options.hashAlg) || (!options.format && options.hashAlg))) {\n        return callback(new Error('Can\\'t put dag node. Please provide `format` AND `hashAlg` options.'))\n      }\n\n      const optionDefaults = {\n        format: multicodec.DAG_CBOR,\n        hashAlg: multicodec.SHA2_256\n      }\n\n      // The IPLD expects the format and hashAlg as constants\n      if (options.format && typeof options.format === 'string') {\n        const constantName = options.format.toUpperCase().replace(/-/g, '_')\n        options.format = multicodec[constantName]\n      }\n      if (options.hashAlg && typeof options.hashAlg === 'string') {\n        const constantName = options.hashAlg.toUpperCase().replace(/-/g, '_')\n        options.hashAlg = multicodec[constantName]\n      }\n\n      options = options.cid ? options : Object.assign({}, optionDefaults, options)\n\n      // js-ipld defaults to verion 1 CIDs. Hence set version 0 explicitly for\n      // dag-pb nodes\n      if (options.version === undefined) {\n        if (options.format === multicodec.DAG_PB && options.hashAlg === multicodec.SHA2_256) {\n          options.version = 0\n        } else {\n          options.version = 1\n        }\n      }\n\n      self._ipld.put(dagNode, options.format, {\n        hashAlg: options.hashAlg,\n        cidVersion: options.version\n      }).then(\n        (cid) => {\n          if (options.preload !== false) {\n            self._preload(cid)\n          }\n          return callback(null, cid)\n        },\n        (error) => callback(error)\n      )\n    }),\n\n    get: promisify((cid, path, options, callback) => {\n      if (typeof path === 'function') {\n        callback = path\n        path = undefined\n      }\n\n      if (typeof options === 'function') {\n        callback = options\n\n        // Allow options in path position\n        if (typeof path !== 'string') {\n          options = path\n          path = undefined\n        } else {\n          options = {}\n        }\n      }\n\n      options = options || {}\n\n      if (typeof cid === 'string') {\n        const split = cid.split('/')\n\n        try {\n          cid = new CID(split[0])\n        } catch (err) {\n          return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n        }\n\n        split.shift()\n\n        if (split.length > 0) {\n          path = split.join('/')\n        } else {\n          path = '/'\n        }\n      } else if (Buffer.isBuffer(cid)) {\n        try {\n          cid = new CID(cid)\n        } catch (err) {\n          return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n        }\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid)\n      }\n\n      if (path === undefined || path === '/') {\n        self._ipld.get(cid).then(\n          (value) => {\n            callback(null, {\n              value,\n              remainderPath: ''\n            })\n          },\n          (error) => callback(error)\n        )\n      } else {\n        const result = self._ipld.resolve(cid, path)\n        const promisedValue = options.localResolve ? result.first() : result.last()\n        promisedValue.then(\n          (value) => callback(null, value),\n          (error) => callback(error)\n        )\n      }\n    }),\n\n    tree: promisify((cid, path, options, callback) => {\n      if (typeof path === 'object') {\n        callback = options\n        options = path\n        path = undefined\n      }\n\n      if (typeof path === 'function') {\n        callback = path\n        path = undefined\n      }\n\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      if (typeof cid === 'string') {\n        const split = cid.split('/')\n\n        try {\n          cid = new CID(split[0])\n        } catch (err) {\n          return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n        }\n\n        split.shift()\n\n        if (split.length > 0) {\n          path = split.join('/')\n        } else {\n          path = undefined\n        }\n      }\n\n      if (options.preload !== false) {\n        self._preload(cid)\n      }\n\n      pull(\n        iterToPull(self._ipld.tree(cid, path, options)),\n        pull.collect(callback)\n      )\n    }),\n\n    // TODO - use IPLD selectors once they are implemented\n    _getRecursive: promisify((multihash, options, callback) => {\n      // gets flat array of all DAGNodes in tree given by multihash\n\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      let cid\n\n      try {\n        cid = new CID(multihash)\n      } catch (err) {\n        return setImmediate(() => callback(errCode(err, 'ERR_INVALID_CID')))\n      }\n\n      self.dag.get(cid, '', options, (err, res) => {\n        if (err) { return callback(err) }\n\n        mapAsync(res.value.Links, (link, cb) => {\n          self.dag._getRecursive(link.Hash, options, cb)\n        }, (err, nodes) => {\n          // console.log('nodes:', nodes)\n          if (err) return callback(err)\n          callback(null, flattenDeep([res.value, nodes]))\n        })\n      })\n    })\n  }\n}\n","/* eslint max-nested-callbacks: [\"error\", 8] */\n'use strict'\n\nconst promisify = require('promisify-es6')\nconst { DAGNode, DAGLink, util } = require('ipld-dag-pb')\nconst CID = require('cids')\nconst map = require('async/map')\nconst mapSeries = require('async/mapSeries')\nconst series = require('async/series')\nconst parallel = require('async/parallel')\nconst eachLimit = require('async/eachLimit')\nconst waterfall = require('async/waterfall')\nconst detectLimit = require('async/detectLimit')\nconst setImmediate = require('async/setImmediate')\nconst { Key } = require('interface-datastore')\nconst errCode = require('err-code')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\n\nconst createPinSet = require('./pin-set')\nconst { resolvePath } = require('../utils')\n\n// arbitrary limit to the number of concurrent dag operations\nconst concurrencyLimit = 300\nconst pinDataStoreKey = new Key('/local/pins')\n\nfunction toB58String (hash) {\n  return new CID(hash).toBaseEncodedString()\n}\n\nfunction invalidPinTypeErr (type) {\n  const errMsg = `Invalid type '${type}', must be one of {direct, indirect, recursive, all}`\n  return errCode(new Error(errMsg), 'ERR_INVALID_PIN_TYPE')\n}\n\nmodule.exports = (self) => {\n  const repo = self._repo\n  const dag = self.dag\n  const pinset = createPinSet(dag)\n  const types = {\n    direct: 'direct',\n    recursive: 'recursive',\n    indirect: 'indirect',\n    all: 'all'\n  }\n\n  let directPins = new Set()\n  let recursivePins = new Set()\n\n  const directKeys = () =>\n    Array.from(directPins).map(key => new CID(key).buffer)\n  const recursiveKeys = () =>\n    Array.from(recursivePins).map(key => new CID(key).buffer)\n\n  function getIndirectKeys (callback) {\n    const indirectKeys = new Set()\n    eachLimit(recursiveKeys(), concurrencyLimit, (multihash, cb) => {\n      dag._getRecursive(multihash, (err, nodes) => {\n        if (err) {\n          return cb(err)\n        }\n\n        map(nodes, (node, cb) => util.cid(util.serialize(node), {\n          cidVersion: 0\n        }).then(cid => cb(null, cid), cb), (err, cids) => {\n          if (err) {\n            return cb(err)\n          }\n\n          cids\n            .map(cid => cid.toString())\n            // recursive pins pre-empt indirect pins\n            .filter(key => !recursivePins.has(key))\n            .forEach(key => indirectKeys.add(key))\n\n          cb()\n        })\n      })\n    }, (err) => {\n      if (err) { return callback(err) }\n      callback(null, Array.from(indirectKeys))\n    })\n  }\n\n  // Encode and write pin key sets to the datastore:\n  // a DAGLink for each of the recursive and direct pinsets\n  // a DAGNode holding those as DAGLinks, a kind of root pin\n  function flushPins (callback) {\n    let dLink, rLink, root\n    series([\n      // create a DAGLink to the node with direct pins\n      cb => waterfall([\n        cb => pinset.storeSet(directKeys(), cb),\n        ({ node, cid }, cb) => {\n          try {\n            cb(null, new DAGLink(types.direct, node.size, cid))\n          } catch (err) {\n            cb(err)\n          }\n        },\n        (link, cb) => { dLink = link; cb(null) }\n      ], cb),\n\n      // create a DAGLink to the node with recursive pins\n      cb => waterfall([\n        cb => pinset.storeSet(recursiveKeys(), cb),\n        ({ node, cid }, cb) => {\n          try {\n            cb(null, new DAGLink(types.recursive, node.size, cid))\n          } catch (err) {\n            cb(err)\n          }\n        },\n        (link, cb) => { rLink = link; cb(null) }\n      ], cb),\n\n      // the pin-set nodes link to a special 'empty' node, so make sure it exists\n      cb => {\n        let empty\n\n        try {\n          empty = DAGNode.create(Buffer.alloc(0))\n        } catch (err) {\n          return cb(err)\n        }\n\n        dag.put(empty, {\n          version: 0,\n          format: multicodec.DAG_PB,\n          hashAlg: multicodec.SHA2_256,\n          preload: false\n        }, cb)\n      },\n\n      // create a root node with DAGLinks to the direct and recursive DAGs\n      cb => {\n        let node\n\n        try {\n          node = DAGNode.create(Buffer.alloc(0), [dLink, rLink])\n        } catch (err) {\n          return cb(err)\n        }\n\n        root = node\n        dag.put(root, {\n          version: 0,\n          format: multicodec.DAG_PB,\n          hashAlg: multicodec.SHA2_256,\n          preload: false\n        }, (err, cid) => {\n          if (!err) {\n            root.multihash = cid.buffer\n          }\n          cb(err)\n        })\n      },\n\n      // hack for CLI tests\n      cb => repo.closed ? repo.open(cb) : cb(null, null),\n\n      // save root to datastore under a consistent key\n      cb => repo.datastore.put(pinDataStoreKey, root.multihash, cb)\n    ], (err, res) => {\n      if (err) { return callback(err) }\n      self.log(`Flushed pins with root: ${root}`)\n      return callback(null, root)\n    })\n  }\n\n  const pin = {\n    add: promisify((paths, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n\n      const recursive = options.recursive == null ? true : options.recursive\n\n      resolvePath(self.object, paths, (err, mhs) => {\n        if (err) { return callback(err) }\n\n        // verify that each hash can be pinned\n        map(mhs, (multihash, cb) => {\n          const key = toB58String(multihash)\n          if (recursive) {\n            if (recursivePins.has(key)) {\n              // it's already pinned recursively\n              return cb(null, key)\n            }\n\n            // entire graph of nested links should be pinned,\n            // so make sure we have all the objects\n            dag._getRecursive(key, { preload: options.preload }, (err) => {\n              if (err) { return cb(err) }\n              // found all objects, we can add the pin\n              return cb(null, key)\n            })\n          } else {\n            if (recursivePins.has(key)) {\n              // recursive supersedes direct, can't have both\n              return cb(new Error(`${key} already pinned recursively`))\n            }\n            if (directPins.has(key)) {\n              // already directly pinned\n              return cb(null, key)\n            }\n\n            // make sure we have the object\n            dag.get(new CID(multihash), { preload: options.preload }, (err) => {\n              if (err) { return cb(err) }\n              // found the object, we can add the pin\n              return cb(null, key)\n            })\n          }\n        }, (err, results) => {\n          if (err) { return callback(err) }\n\n          // update the pin sets in memory\n          const pinset = recursive ? recursivePins : directPins\n          results.forEach(key => pinset.add(key))\n\n          // persist updated pin sets to datastore\n          flushPins((err, root) => {\n            if (err) { return callback(err) }\n            callback(null, results.map(hash => ({ hash })))\n          })\n        })\n      })\n    }),\n\n    rm: promisify((paths, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n      }\n\n      options = options || {}\n\n      const recursive = options.recursive == null ? true : options.recursive\n\n      if (options.cidBase && !multibase.names.includes(options.cidBase)) {\n        return setImmediate(() => {\n          callback(errCode(new Error('invalid multibase'), 'ERR_INVALID_MULTIBASE'))\n        })\n      }\n\n      resolvePath(self.object, paths, (err, mhs) => {\n        if (err) { return callback(err) }\n\n        // verify that each hash can be unpinned\n        map(mhs, (multihash, cb) => {\n          pin._isPinnedWithType(multihash, types.all, (err, res) => {\n            if (err) { return cb(err) }\n            const { pinned, reason } = res\n            const key = toB58String(multihash)\n            if (!pinned) {\n              return cb(new Error(`${key} is not pinned`))\n            }\n\n            switch (reason) {\n              case (types.recursive):\n                if (recursive) {\n                  return cb(null, key)\n                } else {\n                  return cb(new Error(`${key} is pinned recursively`))\n                }\n              case (types.direct):\n                return cb(null, key)\n              default:\n                return cb(new Error(\n                  `${key} is pinned indirectly under ${reason}`\n                ))\n            }\n          })\n        }, (err, results) => {\n          if (err) { return callback(err) }\n\n          // update the pin sets in memory\n          results.forEach(key => {\n            if (recursive && recursivePins.has(key)) {\n              recursivePins.delete(key)\n            } else {\n              directPins.delete(key)\n            }\n          })\n\n          // persist updated pin sets to datastore\n          flushPins((err, root) => {\n            if (err) { return callback(err) }\n            self.log(`Removed pins: ${results}`)\n            callback(null, results.map(hash => ({ hash })))\n          })\n        })\n      })\n    }),\n\n    ls: promisify((paths, options, callback) => {\n      let type = types.all\n      if (typeof paths === 'function') {\n        callback = paths\n        options = {}\n        paths = null\n      }\n      if (typeof options === 'function') {\n        callback = options\n      }\n      if (paths && paths.type) {\n        options = paths\n        paths = null\n      }\n\n      options = options || {}\n\n      if (options.type) {\n        if (typeof options.type !== 'string') {\n          return setImmediate(() => callback(invalidPinTypeErr(options.type)))\n        }\n        type = options.type.toLowerCase()\n      }\n      if (!Object.keys(types).includes(type)) {\n        return setImmediate(() => callback(invalidPinTypeErr(type)))\n      }\n\n      if (paths) {\n        // check the pinned state of specific hashes\n        waterfall([\n          (cb) => resolvePath(self.object, paths, cb),\n          (hashes, cb) => mapSeries(hashes, (hash, done) => pin._isPinnedWithType(hash, types.all, done), cb),\n          (results, cb) => {\n            results = results\n              .filter(result => result.pinned)\n              .map(({ key, reason }) => {\n                switch (reason) {\n                  case types.direct:\n                  case types.recursive:\n                    return {\n                      hash: key,\n                      type: reason\n                    }\n                  default:\n                    return {\n                      hash: key,\n                      type: `${types.indirect} through ${reason}`\n                    }\n                }\n              })\n\n            if (!results.length) {\n              return cb(new Error(`Path is not pinned`))\n            }\n\n            cb(null, results)\n          }\n        ], callback)\n      } else {\n        // show all pinned items of type\n        let pins = []\n        if (type === types.direct || type === types.all) {\n          pins = pins.concat(\n            Array.from(directPins).map(hash => ({\n              type: types.direct,\n              hash\n            }))\n          )\n        }\n        if (type === types.recursive || type === types.all) {\n          pins = pins.concat(\n            Array.from(recursivePins).map(hash => ({\n              type: types.recursive,\n              hash\n            }))\n          )\n        }\n        if (type === types.indirect || type === types.all) {\n          getIndirectKeys((err, indirects) => {\n            if (err) { return callback(err) }\n            pins = pins\n              // if something is pinned both directly and indirectly,\n              // report the indirect entry\n              .filter(({ hash }) =>\n                !indirects.includes(hash) ||\n                (indirects.includes(hash) && !directPins.has(hash))\n              )\n              .concat(indirects.map(hash => ({\n                type: types.indirect,\n                hash\n              })))\n            return callback(null, pins)\n          })\n        } else {\n          callback(null, pins)\n        }\n      }\n    }),\n\n    _isPinnedWithType: promisify((multihash, type, callback) => {\n      const key = toB58String(multihash)\n      const { recursive, direct, all } = types\n\n      // recursive\n      if ((type === recursive || type === all) && recursivePins.has(key)) {\n        return callback(null, {\n          key,\n          pinned: true,\n          reason: recursive\n        })\n      }\n\n      if (type === recursive) {\n        return callback(null, {\n          key,\n          pinned: false\n        })\n      }\n\n      // direct\n      if ((type === direct || type === all) && directPins.has(key)) {\n        return callback(null, {\n          key,\n          pinned: true,\n          reason: direct\n        })\n      }\n\n      if (type === direct) {\n        return callback(null, {\n          key,\n          pinned: false\n        })\n      }\n\n      // indirect (default)\n      // check each recursive key to see if multihash is under it\n      // arbitrary limit, enables handling 1000s of pins.\n      detectLimit(recursiveKeys().map(key => new CID(key)), concurrencyLimit, (cid, cb) => {\n        waterfall([\n          (done) => dag.get(cid, '', { preload: false }, done),\n          (result, done) => done(null, result.value),\n          (node, done) => pinset.hasDescendant(node, key, done)\n        ], cb)\n      }, (err, cid) => callback(err, {\n        key,\n        pinned: Boolean(cid),\n        reason: cid\n      }))\n    }),\n\n    _load: promisify(callback => {\n      waterfall([\n        // hack for CLI tests\n        (cb) => repo.closed ? repo.datastore.open(cb) : cb(null, null),\n        (_, cb) => repo.datastore.has(pinDataStoreKey, cb),\n        (has, cb) => has ? cb() : cb(new Error('No pins to load')),\n        (cb) => repo.datastore.get(pinDataStoreKey, cb),\n        (mh, cb) => {\n          dag.get(new CID(mh), '', { preload: false }, cb)\n        }\n      ], (err, pinRoot) => {\n        if (err) {\n          if (err.message === 'No pins to load') {\n            self.log('No pins to load')\n            return callback()\n          } else {\n            return callback(err)\n          }\n        }\n\n        parallel([\n          cb => pinset.loadSet(pinRoot.value, types.recursive, cb),\n          cb => pinset.loadSet(pinRoot.value, types.direct, cb)\n        ], (err, keys) => {\n          if (err) { return callback(err) }\n          const [ rKeys, dKeys ] = keys\n\n          directPins = new Set(dKeys.map(toB58String))\n          recursivePins = new Set(rKeys.map(toB58String))\n\n          self.log('Loaded pins from the datastore')\n          return callback(null)\n        })\n      })\n    })\n  }\n\n  return pin\n}\n","'use strict'\n\nconst debug = require('debug')\nconst promisify = require('promisify-es6')\nconst waterfall = require('async/waterfall')\nconst parallel = require('async/parallel')\nconst human = require('human-to-milliseconds')\nconst crypto = require('libp2p-crypto')\nconst errcode = require('err-code')\n\nconst log = debug('ipfs:name')\nlog.error = debug('ipfs:name:error')\n\nconst namePubsub = require('./name-pubsub')\nconst utils = require('../utils')\nconst path = require('../ipns/path')\n\nconst keyLookup = (ipfsNode, kname, callback) => {\n  if (kname === 'self') {\n    return callback(null, ipfsNode._peerInfo.id.privKey)\n  }\n\n  const pass = ipfsNode._options.pass\n\n  waterfall([\n    (cb) => ipfsNode._keychain.exportKey(kname, pass, cb),\n    (pem, cb) => crypto.keys.__import__(pem, pass, cb)\n  ], (err, privateKey) => {\n    if (err) {\n      log.error(err)\n      return callback(errcode(err, 'ERR_CANNOT_GET_KEY'))\n    }\n\n    return callback(null, privateKey)\n  })\n}\n\nmodule.exports = function name (self) {\n  return {\n    /**\n     * IPNS is a PKI namespace, where names are the hashes of public keys, and\n     * the private key enables publishing new (signed) values. In both publish\n     * and resolve, the default name used is the node's own PeerID,\n     * which is the hash of its public key.\n     *\n     * @param {String} value ipfs path of the object to be published.\n     * @param {Object} options ipfs publish options.\n     * @param {boolean} options.resolve resolve given path before publishing.\n     * @param {String} options.lifetime time duration that the record will be valid for.\n    This accepts durations such as \"300s\", \"1.5h\" or \"2h45m\". Valid time units are\n    \"ns\", \"ms\", \"s\", \"m\", \"h\". Default is 24h.\n     * @param {String} options.ttl time duration this record should be cached for (NOT IMPLEMENTED YET).\n     * This accepts durations such as \"300s\", \"1.5h\" or \"2h45m\". Valid time units are\n     \"ns\", \"ms\", \"s\", \"m\", \"h\" (caution: experimental).\n     * @param {String} options.key name of the key to be used, as listed by 'ipfs key list -l'.\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    publish: promisify((value, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n      const resolve = !(options.resolve === false)\n      const lifetime = options.lifetime || '24h'\n      const key = options.key || 'self'\n\n      if (!self.isOnline()) {\n        const errMsg = utils.OFFLINE_ERROR\n\n        log.error(errMsg)\n        return callback(errcode(errMsg, 'OFFLINE_ERROR'))\n      }\n\n      // TODO: params related logic should be in the core implementation\n\n      // Normalize path value\n      try {\n        value = utils.normalizePath(value)\n      } catch (err) {\n        log.error(err)\n        return callback(err)\n      }\n\n      parallel([\n        (cb) => human(lifetime, cb),\n        // (cb) => ttl ? human(ttl, cb) : cb(),\n        (cb) => keyLookup(self, key, cb),\n        // verify if the path exists, if not, an error will stop the execution\n        (cb) => resolve.toString() === 'true' ? path.resolvePath(self, value, cb) : cb()\n      ], (err, results) => {\n        if (err) {\n          log.error(err)\n          return callback(err)\n        }\n\n        // Calculate lifetime with nanoseconds precision\n        const pubLifetime = results[0].toFixed(6)\n        const privateKey = results[1]\n\n        // TODO IMPROVEMENT - Handle ttl for cache\n        // const ttl = results[1]\n        // const privateKey = results[2]\n\n        // Start publishing process\n        self._ipns.publish(privateKey, value, pubLifetime, callback)\n      })\n    }),\n\n    /**\n     * Given a key, query the DHT for its best value.\n     *\n     * @param {String} name ipns name to resolve. Defaults to your node's peerID.\n     * @param {Object} options ipfs resolve options.\n     * @param {boolean} options.nocache do not use cached entries.\n     * @param {boolean} options.recursive resolve until the result is not an IPNS name.\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    resolve: promisify((name, options, callback) => {\n      if (typeof options === 'function') {\n        callback = options\n        options = {}\n      }\n\n      options = options || {}\n      const nocache = options.nocache && options.nocache.toString() === 'true'\n      const recursive = options.recursive && options.recursive.toString() === 'true'\n\n      const offline = self._options.offline\n\n      if (!self.isOnline() && !offline) {\n        const errMsg = utils.OFFLINE_ERROR\n\n        log.error(errMsg)\n        return callback(errcode(errMsg, 'OFFLINE_ERROR'))\n      }\n\n      // TODO: params related logic should be in the core implementation\n\n      if (offline && nocache) {\n        const error = 'cannot specify both offline and nocache'\n\n        log.error(error)\n        return callback(errcode(new Error(error), 'ERR_NOCACHE_AND_OFFLINE'))\n      }\n\n      // Set node id as name for being resolved, if it is not received\n      if (!name) {\n        name = self._peerInfo.id.toB58String()\n      }\n\n      if (!name.startsWith('/ipns/')) {\n        name = `/ipns/${name}`\n      }\n\n      const resolveOptions = {\n        nocache,\n        recursive\n      }\n\n      self._ipns.resolve(name, resolveOptions, callback)\n    }),\n    pubsub: namePubsub(self)\n  }\n}\n","'use strict'\n\nconst series = require('async/series')\nconst Bitswap = require('ipfs-bitswap')\nconst setImmediate = require('async/setImmediate')\nconst promisify = require('promisify-es6')\n\nconst IPNS = require('../ipns')\nconst routingConfig = require('../ipns/routing/config')\nconst createLibp2pBundle = require('./libp2p')\n\nmodule.exports = (self) => {\n  return promisify((callback) => {\n    const done = (err) => {\n      if (err) {\n        setImmediate(() => self.emit('error', err))\n        return callback(err)\n      }\n\n      self.state.started()\n      setImmediate(() => self.emit('start'))\n      callback()\n    }\n\n    if (self.state.state() !== 'stopped') {\n      return done(new Error(`Not able to start from state: ${self.state.state()}`))\n    }\n\n    self.log('starting')\n    self.state.start()\n\n    series([\n      (cb) => {\n        // The repo may be closed if previously stopped\n        self._repo.closed\n          ? self._repo.open(cb)\n          : cb()\n      },\n      (cb) => {\n        self._repo.config.get((err, config) => {\n          if (err) return cb(err)\n\n          const libp2p = createLibp2pBundle(self, config)\n\n          libp2p.start(err => {\n            if (err) return cb(err)\n            self.libp2p = libp2p\n            cb()\n          })\n        })\n      },\n      (cb) => {\n        const ipnsRouting = routingConfig(self)\n        self._ipns = new IPNS(ipnsRouting, self._repo.datastore, self._peerInfo, self._keychain, self._options)\n\n        self._bitswap = new Bitswap(\n          self.libp2p,\n          self._repo.blocks,\n          { statsEnabled: true }\n        )\n\n        self._bitswap.start()\n        self._blockService.setExchange(self._bitswap)\n\n        self._preload.start()\n        self._ipns.republisher.start()\n        self._mfsPreload.start(cb)\n      }\n    ], done)\n  })\n}\n","'use strict'\n\nconst peerId = require('peer-id')\nconst mergeOptions = require('merge-options')\nconst waterfall = require('async/waterfall')\nconst parallel = require('async/parallel')\nconst promisify = require('promisify-es6')\nconst defaultConfig = require('../runtime/config-nodejs.js')\nconst Keychain = require('libp2p-keychain')\nconst {\n  DAGNode\n} = require('ipld-dag-pb')\nconst UnixFs = require('ipfs-unixfs')\nconst multicodec = require('multicodec')\n\nconst IPNS = require('../ipns')\nconst OfflineDatastore = require('../ipns/routing/offline-datastore')\n\nconst addDefaultAssets = require('./init-assets')\n\nmodule.exports = function init (self) {\n  return promisify((opts, callback) => {\n    if (typeof opts === 'function') {\n      callback = opts\n      opts = {}\n    }\n\n    const done = (err, res) => {\n      if (err) {\n        self.emit('error', err)\n        return callback(err)\n      }\n\n      self.preStart((err) => {\n        if (err) {\n          self.emit('error', err)\n          return callback(err)\n        }\n\n        self.state.initialized()\n        self.emit('init')\n        callback(null, res)\n      })\n    }\n\n    if (self.state.state() !== 'uninitialized') {\n      return done(new Error('Not able to init from state: ' + self.state.state()))\n    }\n\n    self.state.init()\n    self.log('init')\n\n    // An initialized, open repo was passed, use this one!\n    if (opts.repo) {\n      self._repo = opts.repo\n      return done(null, true)\n    }\n\n    opts.emptyRepo = opts.emptyRepo || false\n    opts.bits = Number(opts.bits) || 2048\n    opts.log = opts.log || function () {}\n\n    const config = mergeOptions(defaultConfig(), self._options.config)\n    let privateKey\n\n    waterfall([\n      // Verify repo does not yet exist.\n      (cb) => self._repo.exists(cb),\n      (exists, cb) => {\n        self.log('repo exists?', exists)\n        if (exists === true) {\n          return cb(new Error('repo already exists'))\n        }\n\n        if (opts.privateKey) {\n          self.log('using user-supplied private-key')\n          if (typeof opts.privateKey === 'object') {\n            cb(null, opts.privateKey)\n          } else {\n            peerId.createFromPrivKey(Buffer.from(opts.privateKey, 'base64'), cb)\n          }\n        } else {\n          // Generate peer identity keypair + transform to desired format + add to config.\n          opts.log(`generating ${opts.bits}-bit RSA keypair...`, false)\n          self.log('generating peer id: %s bits', opts.bits)\n          peerId.create({ bits: opts.bits }, cb)\n        }\n      },\n      (peerId, cb) => {\n        self.log('identity generated')\n        config.Identity = {\n          PeerID: peerId.toB58String(),\n          PrivKey: peerId.privKey.bytes.toString('base64')\n        }\n        privateKey = peerId.privKey\n        if (opts.pass) {\n          config.Keychain = Keychain.generateOptions()\n        }\n        opts.log('done')\n        opts.log('peer identity: ' + config.Identity.PeerID)\n\n        self._repo.init(config, cb)\n      },\n      (_, cb) => self._repo.open(cb),\n      (cb) => {\n        self.log('repo opened')\n        if (opts.pass) {\n          self.log('creating keychain')\n          const keychainOptions = Object.assign({ passPhrase: opts.pass }, config.Keychain)\n          self._keychain = new Keychain(self._repo.keys, keychainOptions)\n          self._keychain.importPeer('self', { privKey: privateKey }, cb)\n        } else {\n          cb(null, true)\n        }\n      },\n      // Setup the offline routing for IPNS.\n      // This is primarily used for offline ipns modifications, such as the initializeKeyspace feature.\n      (_, cb) => {\n        const offlineDatastore = new OfflineDatastore(self._repo)\n\n        self._ipns = new IPNS(offlineDatastore, self._repo.datastore, self._peerInfo, self._keychain, self._options)\n        cb(null, true)\n      },\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      (_, cb) => {\n        if (opts.emptyRepo) {\n          return cb(null, true)\n        }\n\n        const tasks = [\n          (cb) => {\n            waterfall([\n              (cb) => {\n                try {\n                  cb(null, DAGNode.create(new UnixFs('directory').marshal()))\n                } catch (err) {\n                  cb(err)\n                }\n              },\n              (node, cb) => self.dag.put(node, {\n                version: 0,\n                format: multicodec.DAG_PB,\n                hashAlg: multicodec.SHA2_256\n              }).then(\n                (cid) => cb(null, cid),\n                (error) => cb(error)\n              ),\n              (cid, cb) => self._ipns.initializeKeyspace(privateKey, cid.toBaseEncodedString(), cb)\n            ], cb)\n          }\n        ]\n\n        if (typeof addDefaultAssets === 'function') {\n          // addDefaultAssets is undefined on browsers.\n          // See package.json browser config\n          tasks.push((cb) => addDefaultAssets(self, opts.log, cb))\n        }\n\n        self.log('adding assets')\n        parallel(tasks, (err) => {\n          if (err) {\n            cb(err)\n          } else {\n            cb(null, true)\n          }\n        })\n      }\n    ], done)\n  })\n}\n","'use strict'\n\nconst get = require('dlv')\nconst mergeOptions = require('merge-options')\nconst ipnsUtils = require('../ipns/routing/utils')\n\nmodule.exports = function libp2p (self, config) {\n  const options = self._options || {}\n  config = config || {}\n\n  // Always create libp2p via a bundle function\n  const createBundle = typeof options.libp2p === 'function'\n    ? options.libp2p\n    : defaultBundle\n\n  const { datastore } = self._repo\n  const peerInfo = self._peerInfo\n  const peerBook = self._peerInfoBook\n  const libp2p = createBundle({ options, config, datastore, peerInfo, peerBook })\n\n  libp2p.on('stop', () => {\n    // Clear our addresses so we can start clean\n    peerInfo.multiaddrs.clear()\n  })\n\n  libp2p.on('start', () => {\n    peerInfo.multiaddrs.forEach((ma) => {\n      self._print('Swarm listening on', ma.toString())\n    })\n  })\n\n  libp2p.on('peer:connect', peerInfo => peerBook.put(peerInfo))\n\n  return libp2p\n}\n\nfunction defaultBundle ({ datastore, peerInfo, peerBook, options, config }) {\n  const libp2pDefaults = {\n    datastore,\n    peerInfo,\n    peerBook,\n    config: {\n      peerDiscovery: {\n        mdns: {\n          enabled: get(options, 'config.Discovery.MDNS.Enabled',\n            get(config, 'Discovery.MDNS.Enabled', true))\n        },\n        webRTCStar: {\n          enabled: get(options, 'config.Discovery.webRTCStar.Enabled',\n            get(config, 'Discovery.webRTCStar.Enabled', true))\n        },\n        bootstrap: {\n          list: get(options, 'config.Bootstrap',\n            get(config, 'Bootstrap', []))\n        }\n      },\n      relay: {\n        enabled: get(options, 'relay.enabled',\n          get(config, 'relay.enabled', true)),\n        hop: {\n          enabled: get(options, 'relay.hop.enabled',\n            get(config, 'relay.hop.enabled', false)),\n          active: get(options, 'relay.hop.active',\n            get(config, 'relay.hop.active', false))\n        }\n      },\n      dht: {\n        kBucketSize: get(options, 'dht.kBucketSize', 20),\n        // enabled: !get(options, 'offline', false), // disable if offline, on by default\n        enabled: false,\n        randomWalk: {\n          enabled: false // disabled waiting for https://github.com/libp2p/js-libp2p-kad-dht/issues/86\n        },\n        validators: {\n          ipns: ipnsUtils.validator\n        },\n        selectors: {\n          ipns: ipnsUtils.selector\n        }\n      },\n      EXPERIMENTAL: {\n        pubsub: get(options, 'EXPERIMENTAL.pubsub', false)\n      }\n    },\n    connectionManager: get(options, 'connectionManager',\n      {\n        maxPeers: get(config, 'Swarm.ConnMgr.HighWater'),\n        minPeers: get(config, 'Swarm.ConnMgr.LowWater')\n      })\n  }\n\n  const libp2pOptions = mergeOptions(libp2pDefaults, get(options, 'libp2p', {}))\n  // Required inline to reduce startup time\n  // Note: libp2p-nodejs gets replaced by libp2p-browser when webpacked/browserified\n  const Node = require('../runtime/libp2p-nodejs')\n  return new Node(libp2pOptions)\n}\n","'use strict'\n\nmodule.exports = (self) => {\n  const filesRegular = {\n    add: require('./add')(self),\n    addFromFs: require('./add-from-fs')(self),\n    addFromStream: require('./add-from-stream')(self),\n    addFromURL: require('./add-from-url')(self),\n    addPullStream: require('./add-pull-stream')(self),\n    addReadableStream: require('./add-readable-stream')(self),\n    cat: require('./cat')(self),\n    catPullStream: require('./cat-pull-stream')(self),\n    catReadableStream: require('./cat-readable-stream')(self),\n    get: require('./get')(self),\n    getPullStream: require('./get-pull-stream')(self),\n    getReadableStream: require('./get-readable-stream')(self),\n    ls: require('./ls')(self),\n    lsPullStream: require('./ls-pull-stream')(self),\n    lsReadableStream: require('./ls-readable-stream')(self),\n    refs: require('./refs')(self),\n    refsReadableStream: require('./refs-readable-stream')(self),\n    refsPullStream: require('./refs-pull-stream')(self)\n  }\n  filesRegular.refs.local = require('./refs-local')(self)\n  filesRegular.refs.localReadableStream = require('./refs-local-readable-stream')(self)\n  filesRegular.refs.localPullStream = require('./refs-local-pull-stream')(self)\n  return filesRegular\n}\n","'use strict'\n\nconst mfs = require('ipfs-mfs/core')\nconst isPullStream = require('is-pull-stream')\nconst toPullStream = require('async-iterator-to-pull-stream')\nconst toReadableStream = require('async-iterator-to-stream')\nconst pullStreamToAsyncIterator = require('pull-stream-to-async-iterator')\nconst all = require('async-iterator-all')\nconst callbackify = require('callbackify')\nconst PassThrough = require('stream').PassThrough\nconst pull = require('pull-stream/pull')\nconst map = require('pull-stream/throughs/map')\n\nconst mapLsFile = (options = {}) => {\n  const long = options.long || options.l\n\n  return (file) => {\n    return {\n      hash: long ? file.cid.toBaseEncodedString(options.cidBase) : '',\n      name: file.name,\n      type: long ? file.type : 0,\n      size: long ? file.size || 0 : 0\n    }\n  }\n}\n\nmodule.exports = self => {\n  const methods = mfs({\n    ipld: self._ipld,\n    blocks: self._blockService,\n    datastore: self._repo.root,\n    repoOwner: self._options.repoOwner\n  })\n\n  return {\n    cp: callbackify.variadic(methods.cp),\n    flush: callbackify.variadic(methods.flush),\n    ls: callbackify.variadic(async (path, options = {}) => {\n      const files = await all(methods.ls(path, options))\n\n      return files.map(mapLsFile(options))\n    }),\n    lsReadableStream: (path, options = {}) => {\n      const stream = toReadableStream.obj(methods.ls(path, options))\n      const through = new PassThrough({\n        objectMode: true\n      })\n      stream.on('data', (file) => {\n        through.write(mapLsFile(options)(file))\n      })\n      stream.on('error', (err) => {\n        through.destroy(err)\n      })\n      stream.on('end', (file, enc, cb) => {\n        if (file) {\n          file = mapLsFile(options)(file)\n        }\n\n        through.end(file, enc, cb)\n      })\n\n      return through\n    },\n    lsPullStream: (path, options = {}) => {\n      return pull(\n        toPullStream.source(methods.ls(path, options)),\n        map(mapLsFile(options))\n      )\n    },\n    mkdir: callbackify.variadic(methods.mkdir),\n    mv: callbackify.variadic(methods.mv),\n    read: callbackify(async (path, options = {}) => {\n      return Buffer.concat(await all(methods.read(path, options)))\n    }),\n    readPullStream: (path, options = {}) => {\n      return toPullStream.source(methods.read(path, options))\n    },\n    readReadableStream: (path, options = {}) => {\n      return toReadableStream(methods.read(path, options))\n    },\n    rm: callbackify.variadic(methods.rm),\n    stat: callbackify(async (path, options = {}) => {\n      const stats = await methods.stat(path, options)\n\n      stats.hash = stats.cid.toBaseEncodedString(options && options.cidBase)\n      delete stats.cid\n\n      return stats\n    }),\n    write: callbackify.variadic(async (path, content, options = {}) => {\n      if (isPullStream.isSource(content)) {\n        content = pullStreamToAsyncIterator(content)\n      }\n\n      await methods.write(path, content, options)\n    })\n  }\n}\n","'use strict'\n\n/** @typedef {__import__('./generated-types').ConstantCodeMap} ConstantCodeMap */\n/** @typedef {__import__('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\n/** @typedef {__import__('./generated-types').CodeNameMap} CodeNameMap */\n/** @typedef {__import__('./generated-types').CodecName} CodecName */\n/** @typedef {__import__('./generated-types').CodecConstant} CodecConstant */\n\nconst { baseTable } = require('./generated-table')\nconst varintEncode = require('./util').varintEncode\n\nconst nameToVarint = /** @type {NameUint8ArrayMap} */ ({})\nconst constantToCode = /** @type {ConstantCodeMap} */({})\nconst codeToName = /** @type {CodeNameMap} */({})\n\n// eslint-disable-next-line guard-for-in\nfor (const name in baseTable) {\n  const codecName = /** @type {CodecName} */(name)\n  const code = baseTable[codecName]\n  nameToVarint[codecName] = varintEncode(code)\n\n  const constant = /** @type {CodecConstant} */(codecName.toUpperCase().replace(/-/g, '_'))\n  constantToCode[constant] = code\n\n  if (!codeToName[code]) {\n    codeToName[code] = codecName\n  }\n}\n\nObject.freeze(nameToVarint)\nObject.freeze(constantToCode)\nObject.freeze(codeToName)\nconst nameToCode = Object.freeze(baseTable)\nmodule.exports = {\n  nameToVarint,\n  constantToCode,\n  nameToCode,\n  codeToName\n}\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","'use strict'\n\nconst varint = require('varint')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = {\n  numberToUint8Array,\n  uint8ArrayToNumber,\n  varintUint8ArrayEncode,\n  varintEncode\n}\n\n/**\n * @param {Uint8Array} buf\n */\nfunction uint8ArrayToNumber (buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16)\n}\n\n/**\n * @param {number} num\n */\nfunction numberToUint8Array (num) {\n  let hexString = num.toString(16)\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString\n  }\n  return uint8ArrayFromString(hexString, 'base16')\n}\n\n/**\n * @param {Uint8Array} input\n */\nfunction varintUint8ArrayEncode (input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))\n}\n\n/**\n * @param {number} num\n */\nfunction varintEncode (num) {\n  return Uint8Array.from(varint.encode(num))\n}\n","/* eslint quote-props: off */\n'use strict'\n\n/**\n * Names for all available hashes\n *\n * @typedef { \"identity\" | \"sha1\" | \"sha2-256\" | \"sha2-512\" | \"sha3-512\" | \"sha3-384\" | \"sha3-256\" | \"sha3-224\" | \"shake-128\" | \"shake-256\" | \"keccak-224\" | \"keccak-256\" | \"keccak-384\" | \"keccak-512\" | \"blake3\" | \"murmur3-128\" | \"murmur3-32\" | \"dbl-sha2-256\" | \"md4\" | \"md5\" | \"bmt\" | \"sha2-256-trunc254-padded\" | \"ripemd-128\" | \"ripemd-160\" | \"ripemd-256\" | \"ripemd-320\" | \"x11\" | \"kangarootwelve\" | \"sm3-256\" | \"blake2b-8\" | \"blake2b-16\" | \"blake2b-24\" | \"blake2b-32\" | \"blake2b-40\" | \"blake2b-48\" | \"blake2b-56\" | \"blake2b-64\" | \"blake2b-72\" | \"blake2b-80\" | \"blake2b-88\" | \"blake2b-96\" | \"blake2b-104\" | \"blake2b-112\" | \"blake2b-120\" | \"blake2b-128\" | \"blake2b-136\" | \"blake2b-144\" | \"blake2b-152\" | \"blake2b-160\" | \"blake2b-168\" | \"blake2b-176\" | \"blake2b-184\" | \"blake2b-192\" | \"blake2b-200\" | \"blake2b-208\" | \"blake2b-216\" | \"blake2b-224\" | \"blake2b-232\" | \"blake2b-240\" | \"blake2b-248\" | \"blake2b-256\" | \"blake2b-264\" | \"blake2b-272\" | \"blake2b-280\" | \"blake2b-288\" | \"blake2b-296\" | \"blake2b-304\" | \"blake2b-312\" | \"blake2b-320\" | \"blake2b-328\" | \"blake2b-336\" | \"blake2b-344\" | \"blake2b-352\" | \"blake2b-360\" | \"blake2b-368\" | \"blake2b-376\" | \"blake2b-384\" | \"blake2b-392\" | \"blake2b-400\" | \"blake2b-408\" | \"blake2b-416\" | \"blake2b-424\" | \"blake2b-432\" | \"blake2b-440\" | \"blake2b-448\" | \"blake2b-456\" | \"blake2b-464\" | \"blake2b-472\" | \"blake2b-480\" | \"blake2b-488\" | \"blake2b-496\" | \"blake2b-504\" | \"blake2b-512\" | \"blake2s-8\" | \"blake2s-16\" | \"blake2s-24\" | \"blake2s-32\" | \"blake2s-40\" | \"blake2s-48\" | \"blake2s-56\" | \"blake2s-64\" | \"blake2s-72\" | \"blake2s-80\" | \"blake2s-88\" | \"blake2s-96\" | \"blake2s-104\" | \"blake2s-112\" | \"blake2s-120\" | \"blake2s-128\" | \"blake2s-136\" | \"blake2s-144\" | \"blake2s-152\" | \"blake2s-160\" | \"blake2s-168\" | \"blake2s-176\" | \"blake2s-184\" | \"blake2s-192\" | \"blake2s-200\" | \"blake2s-208\" | \"blake2s-216\" | \"blake2s-224\" | \"blake2s-232\" | \"blake2s-240\" | \"blake2s-248\" | \"blake2s-256\" | \"skein256-8\" | \"skein256-16\" | \"skein256-24\" | \"skein256-32\" | \"skein256-40\" | \"skein256-48\" | \"skein256-56\" | \"skein256-64\" | \"skein256-72\" | \"skein256-80\" | \"skein256-88\" | \"skein256-96\" | \"skein256-104\" | \"skein256-112\" | \"skein256-120\" | \"skein256-128\" | \"skein256-136\" | \"skein256-144\" | \"skein256-152\" | \"skein256-160\" | \"skein256-168\" | \"skein256-176\" | \"skein256-184\" | \"skein256-192\" | \"skein256-200\" | \"skein256-208\" | \"skein256-216\" | \"skein256-224\" | \"skein256-232\" | \"skein256-240\" | \"skein256-248\" | \"skein256-256\" | \"skein512-8\" | \"skein512-16\" | \"skein512-24\" | \"skein512-32\" | \"skein512-40\" | \"skein512-48\" | \"skein512-56\" | \"skein512-64\" | \"skein512-72\" | \"skein512-80\" | \"skein512-88\" | \"skein512-96\" | \"skein512-104\" | \"skein512-112\" | \"skein512-120\" | \"skein512-128\" | \"skein512-136\" | \"skein512-144\" | \"skein512-152\" | \"skein512-160\" | \"skein512-168\" | \"skein512-176\" | \"skein512-184\" | \"skein512-192\" | \"skein512-200\" | \"skein512-208\" | \"skein512-216\" | \"skein512-224\" | \"skein512-232\" | \"skein512-240\" | \"skein512-248\" | \"skein512-256\" | \"skein512-264\" | \"skein512-272\" | \"skein512-280\" | \"skein512-288\" | \"skein512-296\" | \"skein512-304\" | \"skein512-312\" | \"skein512-320\" | \"skein512-328\" | \"skein512-336\" | \"skein512-344\" | \"skein512-352\" | \"skein512-360\" | \"skein512-368\" | \"skein512-376\" | \"skein512-384\" | \"skein512-392\" | \"skein512-400\" | \"skein512-408\" | \"skein512-416\" | \"skein512-424\" | \"skein512-432\" | \"skein512-440\" | \"skein512-448\" | \"skein512-456\" | \"skein512-464\" | \"skein512-472\" | \"skein512-480\" | \"skein512-488\" | \"skein512-496\" | \"skein512-504\" | \"skein512-512\" | \"skein1024-8\" | \"skein1024-16\" | \"skein1024-24\" | \"skein1024-32\" | \"skein1024-40\" | \"skein1024-48\" | \"skein1024-56\" | \"skein1024-64\" | \"skein1024-72\" | \"skein1024-80\" | \"skein1024-88\" | \"skein1024-96\" | \"skein1024-104\" | \"skein1024-112\" | \"skein1024-120\" | \"skein1024-128\" | \"skein1024-136\" | \"skein1024-144\" | \"skein1024-152\" | \"skein1024-160\" | \"skein1024-168\" | \"skein1024-176\" | \"skein1024-184\" | \"skein1024-192\" | \"skein1024-200\" | \"skein1024-208\" | \"skein1024-216\" | \"skein1024-224\" | \"skein1024-232\" | \"skein1024-240\" | \"skein1024-248\" | \"skein1024-256\" | \"skein1024-264\" | \"skein1024-272\" | \"skein1024-280\" | \"skein1024-288\" | \"skein1024-296\" | \"skein1024-304\" | \"skein1024-312\" | \"skein1024-320\" | \"skein1024-328\" | \"skein1024-336\" | \"skein1024-344\" | \"skein1024-352\" | \"skein1024-360\" | \"skein1024-368\" | \"skein1024-376\" | \"skein1024-384\" | \"skein1024-392\" | \"skein1024-400\" | \"skein1024-408\" | \"skein1024-416\" | \"skein1024-424\" | \"skein1024-432\" | \"skein1024-440\" | \"skein1024-448\" | \"skein1024-456\" | \"skein1024-464\" | \"skein1024-472\" | \"skein1024-480\" | \"skein1024-488\" | \"skein1024-496\" | \"skein1024-504\" | \"skein1024-512\" | \"skein1024-520\" | \"skein1024-528\" | \"skein1024-536\" | \"skein1024-544\" | \"skein1024-552\" | \"skein1024-560\" | \"skein1024-568\" | \"skein1024-576\" | \"skein1024-584\" | \"skein1024-592\" | \"skein1024-600\" | \"skein1024-608\" | \"skein1024-616\" | \"skein1024-624\" | \"skein1024-632\" | \"skein1024-640\" | \"skein1024-648\" | \"skein1024-656\" | \"skein1024-664\" | \"skein1024-672\" | \"skein1024-680\" | \"skein1024-688\" | \"skein1024-696\" | \"skein1024-704\" | \"skein1024-712\" | \"skein1024-720\" | \"skein1024-728\" | \"skein1024-736\" | \"skein1024-744\" | \"skein1024-752\" | \"skein1024-760\" | \"skein1024-768\" | \"skein1024-776\" | \"skein1024-784\" | \"skein1024-792\" | \"skein1024-800\" | \"skein1024-808\" | \"skein1024-816\" | \"skein1024-824\" | \"skein1024-832\" | \"skein1024-840\" | \"skein1024-848\" | \"skein1024-856\" | \"skein1024-864\" | \"skein1024-872\" | \"skein1024-880\" | \"skein1024-888\" | \"skein1024-896\" | \"skein1024-904\" | \"skein1024-912\" | \"skein1024-920\" | \"skein1024-928\" | \"skein1024-936\" | \"skein1024-944\" | \"skein1024-952\" | \"skein1024-960\" | \"skein1024-968\" | \"skein1024-976\" | \"skein1024-984\" | \"skein1024-992\" | \"skein1024-1000\" | \"skein1024-1008\" | \"skein1024-1016\" | \"skein1024-1024\" | \"poseidon-bls12_381-a2-fc1\" | \"poseidon-bls12_381-a2-fc1-sc\" } HashName\n */\n/**\n * Codes for all available hashes\n *\n * @typedef { 0x00 | 0x11 | 0x12 | 0x13 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x1a | 0x1b | 0x1c | 0x1d | 0x1e | 0x22 | 0x23 | 0x56 | 0xd4 | 0xd5 | 0xd6 | 0x1012 | 0x1052 | 0x1053 | 0x1054 | 0x1055 | 0x1100 | 0x1d01 | 0x534d | 0xb201 | 0xb202 | 0xb203 | 0xb204 | 0xb205 | 0xb206 | 0xb207 | 0xb208 | 0xb209 | 0xb20a | 0xb20b | 0xb20c | 0xb20d | 0xb20e | 0xb20f | 0xb210 | 0xb211 | 0xb212 | 0xb213 | 0xb214 | 0xb215 | 0xb216 | 0xb217 | 0xb218 | 0xb219 | 0xb21a | 0xb21b | 0xb21c | 0xb21d | 0xb21e | 0xb21f | 0xb220 | 0xb221 | 0xb222 | 0xb223 | 0xb224 | 0xb225 | 0xb226 | 0xb227 | 0xb228 | 0xb229 | 0xb22a | 0xb22b | 0xb22c | 0xb22d | 0xb22e | 0xb22f | 0xb230 | 0xb231 | 0xb232 | 0xb233 | 0xb234 | 0xb235 | 0xb236 | 0xb237 | 0xb238 | 0xb239 | 0xb23a | 0xb23b | 0xb23c | 0xb23d | 0xb23e | 0xb23f | 0xb240 | 0xb241 | 0xb242 | 0xb243 | 0xb244 | 0xb245 | 0xb246 | 0xb247 | 0xb248 | 0xb249 | 0xb24a | 0xb24b | 0xb24c | 0xb24d | 0xb24e | 0xb24f | 0xb250 | 0xb251 | 0xb252 | 0xb253 | 0xb254 | 0xb255 | 0xb256 | 0xb257 | 0xb258 | 0xb259 | 0xb25a | 0xb25b | 0xb25c | 0xb25d | 0xb25e | 0xb25f | 0xb260 | 0xb301 | 0xb302 | 0xb303 | 0xb304 | 0xb305 | 0xb306 | 0xb307 | 0xb308 | 0xb309 | 0xb30a | 0xb30b | 0xb30c | 0xb30d | 0xb30e | 0xb30f | 0xb310 | 0xb311 | 0xb312 | 0xb313 | 0xb314 | 0xb315 | 0xb316 | 0xb317 | 0xb318 | 0xb319 | 0xb31a | 0xb31b | 0xb31c | 0xb31d | 0xb31e | 0xb31f | 0xb320 | 0xb321 | 0xb322 | 0xb323 | 0xb324 | 0xb325 | 0xb326 | 0xb327 | 0xb328 | 0xb329 | 0xb32a | 0xb32b | 0xb32c | 0xb32d | 0xb32e | 0xb32f | 0xb330 | 0xb331 | 0xb332 | 0xb333 | 0xb334 | 0xb335 | 0xb336 | 0xb337 | 0xb338 | 0xb339 | 0xb33a | 0xb33b | 0xb33c | 0xb33d | 0xb33e | 0xb33f | 0xb340 | 0xb341 | 0xb342 | 0xb343 | 0xb344 | 0xb345 | 0xb346 | 0xb347 | 0xb348 | 0xb349 | 0xb34a | 0xb34b | 0xb34c | 0xb34d | 0xb34e | 0xb34f | 0xb350 | 0xb351 | 0xb352 | 0xb353 | 0xb354 | 0xb355 | 0xb356 | 0xb357 | 0xb358 | 0xb359 | 0xb35a | 0xb35b | 0xb35c | 0xb35d | 0xb35e | 0xb35f | 0xb360 | 0xb361 | 0xb362 | 0xb363 | 0xb364 | 0xb365 | 0xb366 | 0xb367 | 0xb368 | 0xb369 | 0xb36a | 0xb36b | 0xb36c | 0xb36d | 0xb36e | 0xb36f | 0xb370 | 0xb371 | 0xb372 | 0xb373 | 0xb374 | 0xb375 | 0xb376 | 0xb377 | 0xb378 | 0xb379 | 0xb37a | 0xb37b | 0xb37c | 0xb37d | 0xb37e | 0xb37f | 0xb380 | 0xb381 | 0xb382 | 0xb383 | 0xb384 | 0xb385 | 0xb386 | 0xb387 | 0xb388 | 0xb389 | 0xb38a | 0xb38b | 0xb38c | 0xb38d | 0xb38e | 0xb38f | 0xb390 | 0xb391 | 0xb392 | 0xb393 | 0xb394 | 0xb395 | 0xb396 | 0xb397 | 0xb398 | 0xb399 | 0xb39a | 0xb39b | 0xb39c | 0xb39d | 0xb39e | 0xb39f | 0xb3a0 | 0xb3a1 | 0xb3a2 | 0xb3a3 | 0xb3a4 | 0xb3a5 | 0xb3a6 | 0xb3a7 | 0xb3a8 | 0xb3a9 | 0xb3aa | 0xb3ab | 0xb3ac | 0xb3ad | 0xb3ae | 0xb3af | 0xb3b0 | 0xb3b1 | 0xb3b2 | 0xb3b3 | 0xb3b4 | 0xb3b5 | 0xb3b6 | 0xb3b7 | 0xb3b8 | 0xb3b9 | 0xb3ba | 0xb3bb | 0xb3bc | 0xb3bd | 0xb3be | 0xb3bf | 0xb3c0 | 0xb3c1 | 0xb3c2 | 0xb3c3 | 0xb3c4 | 0xb3c5 | 0xb3c6 | 0xb3c7 | 0xb3c8 | 0xb3c9 | 0xb3ca | 0xb3cb | 0xb3cc | 0xb3cd | 0xb3ce | 0xb3cf | 0xb3d0 | 0xb3d1 | 0xb3d2 | 0xb3d3 | 0xb3d4 | 0xb3d5 | 0xb3d6 | 0xb3d7 | 0xb3d8 | 0xb3d9 | 0xb3da | 0xb3db | 0xb3dc | 0xb3dd | 0xb3de | 0xb3df | 0xb3e0 | 0xb401 | 0xb402 } HashCode\n */\n\n/**\n * @type { Record<HashName,HashCode> }\n */\nconst names = Object.freeze({\n  'identity': 0x00,\n  'sha1': 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  'sha3-512': 0x14,\n  'sha3-384': 0x15,\n  'sha3-256': 0x16,\n  'sha3-224': 0x17,\n  'shake-128': 0x18,\n  'shake-256': 0x19,\n  'keccak-224': 0x1a,\n  'keccak-256': 0x1b,\n  'keccak-384': 0x1c,\n  'keccak-512': 0x1d,\n  'blake3': 0x1e,\n  'murmur3-128': 0x22,\n  'murmur3-32': 0x23,\n  'dbl-sha2-256': 0x56,\n  'md4': 0xd4,\n  'md5': 0xd5,\n  'bmt': 0xd6,\n  'sha2-256-trunc254-padded': 0x1012,\n  'ripemd-128': 0x1052,\n  'ripemd-160': 0x1053,\n  'ripemd-256': 0x1054,\n  'ripemd-320': 0x1055,\n  'x11': 0x1100,\n  'kangarootwelve': 0x1d01,\n  'sm3-256': 0x534d,\n  'blake2b-8': 0xb201,\n  'blake2b-16': 0xb202,\n  'blake2b-24': 0xb203,\n  'blake2b-32': 0xb204,\n  'blake2b-40': 0xb205,\n  'blake2b-48': 0xb206,\n  'blake2b-56': 0xb207,\n  'blake2b-64': 0xb208,\n  'blake2b-72': 0xb209,\n  'blake2b-80': 0xb20a,\n  'blake2b-88': 0xb20b,\n  'blake2b-96': 0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8': 0xb241,\n  'blake2s-16': 0xb242,\n  'blake2s-24': 0xb243,\n  'blake2s-32': 0xb244,\n  'blake2s-40': 0xb245,\n  'blake2s-48': 0xb246,\n  'blake2s-56': 0xb247,\n  'blake2s-64': 0xb248,\n  'blake2s-72': 0xb249,\n  'blake2s-80': 0xb24a,\n  'blake2s-88': 0xb24b,\n  'blake2s-96': 0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'skein256-8': 0xb301,\n  'skein256-16': 0xb302,\n  'skein256-24': 0xb303,\n  'skein256-32': 0xb304,\n  'skein256-40': 0xb305,\n  'skein256-48': 0xb306,\n  'skein256-56': 0xb307,\n  'skein256-64': 0xb308,\n  'skein256-72': 0xb309,\n  'skein256-80': 0xb30a,\n  'skein256-88': 0xb30b,\n  'skein256-96': 0xb30c,\n  'skein256-104': 0xb30d,\n  'skein256-112': 0xb30e,\n  'skein256-120': 0xb30f,\n  'skein256-128': 0xb310,\n  'skein256-136': 0xb311,\n  'skein256-144': 0xb312,\n  'skein256-152': 0xb313,\n  'skein256-160': 0xb314,\n  'skein256-168': 0xb315,\n  'skein256-176': 0xb316,\n  'skein256-184': 0xb317,\n  'skein256-192': 0xb318,\n  'skein256-200': 0xb319,\n  'skein256-208': 0xb31a,\n  'skein256-216': 0xb31b,\n  'skein256-224': 0xb31c,\n  'skein256-232': 0xb31d,\n  'skein256-240': 0xb31e,\n  'skein256-248': 0xb31f,\n  'skein256-256': 0xb320,\n  'skein512-8': 0xb321,\n  'skein512-16': 0xb322,\n  'skein512-24': 0xb323,\n  'skein512-32': 0xb324,\n  'skein512-40': 0xb325,\n  'skein512-48': 0xb326,\n  'skein512-56': 0xb327,\n  'skein512-64': 0xb328,\n  'skein512-72': 0xb329,\n  'skein512-80': 0xb32a,\n  'skein512-88': 0xb32b,\n  'skein512-96': 0xb32c,\n  'skein512-104': 0xb32d,\n  'skein512-112': 0xb32e,\n  'skein512-120': 0xb32f,\n  'skein512-128': 0xb330,\n  'skein512-136': 0xb331,\n  'skein512-144': 0xb332,\n  'skein512-152': 0xb333,\n  'skein512-160': 0xb334,\n  'skein512-168': 0xb335,\n  'skein512-176': 0xb336,\n  'skein512-184': 0xb337,\n  'skein512-192': 0xb338,\n  'skein512-200': 0xb339,\n  'skein512-208': 0xb33a,\n  'skein512-216': 0xb33b,\n  'skein512-224': 0xb33c,\n  'skein512-232': 0xb33d,\n  'skein512-240': 0xb33e,\n  'skein512-248': 0xb33f,\n  'skein512-256': 0xb340,\n  'skein512-264': 0xb341,\n  'skein512-272': 0xb342,\n  'skein512-280': 0xb343,\n  'skein512-288': 0xb344,\n  'skein512-296': 0xb345,\n  'skein512-304': 0xb346,\n  'skein512-312': 0xb347,\n  'skein512-320': 0xb348,\n  'skein512-328': 0xb349,\n  'skein512-336': 0xb34a,\n  'skein512-344': 0xb34b,\n  'skein512-352': 0xb34c,\n  'skein512-360': 0xb34d,\n  'skein512-368': 0xb34e,\n  'skein512-376': 0xb34f,\n  'skein512-384': 0xb350,\n  'skein512-392': 0xb351,\n  'skein512-400': 0xb352,\n  'skein512-408': 0xb353,\n  'skein512-416': 0xb354,\n  'skein512-424': 0xb355,\n  'skein512-432': 0xb356,\n  'skein512-440': 0xb357,\n  'skein512-448': 0xb358,\n  'skein512-456': 0xb359,\n  'skein512-464': 0xb35a,\n  'skein512-472': 0xb35b,\n  'skein512-480': 0xb35c,\n  'skein512-488': 0xb35d,\n  'skein512-496': 0xb35e,\n  'skein512-504': 0xb35f,\n  'skein512-512': 0xb360,\n  'skein1024-8': 0xb361,\n  'skein1024-16': 0xb362,\n  'skein1024-24': 0xb363,\n  'skein1024-32': 0xb364,\n  'skein1024-40': 0xb365,\n  'skein1024-48': 0xb366,\n  'skein1024-56': 0xb367,\n  'skein1024-64': 0xb368,\n  'skein1024-72': 0xb369,\n  'skein1024-80': 0xb36a,\n  'skein1024-88': 0xb36b,\n  'skein1024-96': 0xb36c,\n  'skein1024-104': 0xb36d,\n  'skein1024-112': 0xb36e,\n  'skein1024-120': 0xb36f,\n  'skein1024-128': 0xb370,\n  'skein1024-136': 0xb371,\n  'skein1024-144': 0xb372,\n  'skein1024-152': 0xb373,\n  'skein1024-160': 0xb374,\n  'skein1024-168': 0xb375,\n  'skein1024-176': 0xb376,\n  'skein1024-184': 0xb377,\n  'skein1024-192': 0xb378,\n  'skein1024-200': 0xb379,\n  'skein1024-208': 0xb37a,\n  'skein1024-216': 0xb37b,\n  'skein1024-224': 0xb37c,\n  'skein1024-232': 0xb37d,\n  'skein1024-240': 0xb37e,\n  'skein1024-248': 0xb37f,\n  'skein1024-256': 0xb380,\n  'skein1024-264': 0xb381,\n  'skein1024-272': 0xb382,\n  'skein1024-280': 0xb383,\n  'skein1024-288': 0xb384,\n  'skein1024-296': 0xb385,\n  'skein1024-304': 0xb386,\n  'skein1024-312': 0xb387,\n  'skein1024-320': 0xb388,\n  'skein1024-328': 0xb389,\n  'skein1024-336': 0xb38a,\n  'skein1024-344': 0xb38b,\n  'skein1024-352': 0xb38c,\n  'skein1024-360': 0xb38d,\n  'skein1024-368': 0xb38e,\n  'skein1024-376': 0xb38f,\n  'skein1024-384': 0xb390,\n  'skein1024-392': 0xb391,\n  'skein1024-400': 0xb392,\n  'skein1024-408': 0xb393,\n  'skein1024-416': 0xb394,\n  'skein1024-424': 0xb395,\n  'skein1024-432': 0xb396,\n  'skein1024-440': 0xb397,\n  'skein1024-448': 0xb398,\n  'skein1024-456': 0xb399,\n  'skein1024-464': 0xb39a,\n  'skein1024-472': 0xb39b,\n  'skein1024-480': 0xb39c,\n  'skein1024-488': 0xb39d,\n  'skein1024-496': 0xb39e,\n  'skein1024-504': 0xb39f,\n  'skein1024-512': 0xb3a0,\n  'skein1024-520': 0xb3a1,\n  'skein1024-528': 0xb3a2,\n  'skein1024-536': 0xb3a3,\n  'skein1024-544': 0xb3a4,\n  'skein1024-552': 0xb3a5,\n  'skein1024-560': 0xb3a6,\n  'skein1024-568': 0xb3a7,\n  'skein1024-576': 0xb3a8,\n  'skein1024-584': 0xb3a9,\n  'skein1024-592': 0xb3aa,\n  'skein1024-600': 0xb3ab,\n  'skein1024-608': 0xb3ac,\n  'skein1024-616': 0xb3ad,\n  'skein1024-624': 0xb3ae,\n  'skein1024-632': 0xb3af,\n  'skein1024-640': 0xb3b0,\n  'skein1024-648': 0xb3b1,\n  'skein1024-656': 0xb3b2,\n  'skein1024-664': 0xb3b3,\n  'skein1024-672': 0xb3b4,\n  'skein1024-680': 0xb3b5,\n  'skein1024-688': 0xb3b6,\n  'skein1024-696': 0xb3b7,\n  'skein1024-704': 0xb3b8,\n  'skein1024-712': 0xb3b9,\n  'skein1024-720': 0xb3ba,\n  'skein1024-728': 0xb3bb,\n  'skein1024-736': 0xb3bc,\n  'skein1024-744': 0xb3bd,\n  'skein1024-752': 0xb3be,\n  'skein1024-760': 0xb3bf,\n  'skein1024-768': 0xb3c0,\n  'skein1024-776': 0xb3c1,\n  'skein1024-784': 0xb3c2,\n  'skein1024-792': 0xb3c3,\n  'skein1024-800': 0xb3c4,\n  'skein1024-808': 0xb3c5,\n  'skein1024-816': 0xb3c6,\n  'skein1024-824': 0xb3c7,\n  'skein1024-832': 0xb3c8,\n  'skein1024-840': 0xb3c9,\n  'skein1024-848': 0xb3ca,\n  'skein1024-856': 0xb3cb,\n  'skein1024-864': 0xb3cc,\n  'skein1024-872': 0xb3cd,\n  'skein1024-880': 0xb3ce,\n  'skein1024-888': 0xb3cf,\n  'skein1024-896': 0xb3d0,\n  'skein1024-904': 0xb3d1,\n  'skein1024-912': 0xb3d2,\n  'skein1024-920': 0xb3d3,\n  'skein1024-928': 0xb3d4,\n  'skein1024-936': 0xb3d5,\n  'skein1024-944': 0xb3d6,\n  'skein1024-952': 0xb3d7,\n  'skein1024-960': 0xb3d8,\n  'skein1024-968': 0xb3d9,\n  'skein1024-976': 0xb3da,\n  'skein1024-984': 0xb3db,\n  'skein1024-992': 0xb3dc,\n  'skein1024-1000': 0xb3dd,\n  'skein1024-1008': 0xb3de,\n  'skein1024-1016': 0xb3df,\n  'skein1024-1024': 0xb3e0,\n  'poseidon-bls12_381-a2-fc1': 0xb401,\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402\n})\n\nmodule.exports = { names }\n","'use strict'\n\nconst { encoding: getCodec } = require('multibase')\nconst utf8Encoder = new TextEncoder()\n\n/**\n * @typedef {__import__('multibase/src/types').BaseName | 'utf8' | 'utf-8' | 'ascii' | undefined} SupportedEncodings\n */\n\n/**\n * Interprets each character in a string as a byte and\n * returns a Uint8Array of those bytes.\n *\n * @param {string} string - The string to turn into an array\n */\nfunction asciiStringToUint8Array (string) {\n  const array = new Uint8Array(string.length)\n\n  for (let i = 0; i < string.length; i++) {\n    array[i] = string.charCodeAt(i)\n  }\n\n  return array\n}\n\n/**\n * Create a `Uint8Array` from the passed string\n *\n * Supports `utf8`, `utf-8` and any encoding supported by the multibase module.\n *\n * Also `ascii` which is similar to node's 'binary' encoding.\n *\n * @param {string} string\n * @param {SupportedEncodings} [encoding=utf8] - utf8, base16, base64, base64urlpad, etc\n * @returns {Uint8Array}\n */\nfunction fromString (string, encoding = 'utf8') {\n  if (encoding === 'utf8' || encoding === 'utf-8') {\n    return utf8Encoder.encode(string)\n  }\n\n  if (encoding === 'ascii') {\n    return asciiStringToUint8Array(string)\n  }\n\n  return getCodec(encoding).decode(string)\n}\n\nmodule.exports = fromString\n","'use strict'\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n","'use strict'\n\nconst baseX = require('@multiformats/base-x')\nconst Base = require('./base.js')\nconst { rfc4648 } = require('./rfc4648')\nconst { decodeText, encodeText } = require('./util')\n\n/** @typedef {__import__('./types').CodecFactory} CodecFactory */\n/** @typedef {__import__('./types').Codec} Codec */\n/** @typedef {__import__('./types').BaseName} BaseName */\n/** @typedef {__import__('./types').BaseCode} BaseCode */\n\n/** @type {CodecFactory} */\nconst identity = () => {\n  return {\n    encode: decodeText,\n    decode: encodeText\n  }\n}\n\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */\nconst constants = [\n  ['identity', '\\x00', identity, ''],\n  ['base2', '0', rfc4648(1), '01'],\n  ['base8', '7', rfc4648(3), '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', rfc4648(4), '0123456789abcdef'],\n  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],\n  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],\n  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],\n  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],\n  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],\n  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],\n  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],\n  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\n/** @type {Record<BaseName,Base>} */\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, /** @type {Record<BaseName,Base>} */({}))\n\n/** @type {Record<BaseCode,Base>} */\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, /** @type {Record<BaseCode,Base>} */({}))\n\nmodule.exports = {\n  names,\n  codes\n}\n","// @ts-check\n'use strict'\n\n/** @typedef {__import__('./base').CodecFactory} CodecFactory */\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */\nmodule.exports = (bitsPerChar) => (alphabet) => {\n  return {\n    /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar)\n    }\n  }\n}\n","// @ts-check\n'use strict'\nconst { Buffer } = require('buffer')\n\n/**\n * @typedef {Object} Codec\n * @property {function(Uint8Array):string} encode\n * @property {function(string):Uint8Array} decode\n *\n * @typedef {function(string):Codec} CodecFactory\n */\n\nclass Base {\n  /**\n   * @param {string} name\n   * @param {string} code\n   * @param {CodecFactory} implementation\n   * @param {string} alphabet\n   */\n  constructor (name, code, implementation, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = Buffer.from(this.code)\n    this.alphabet = alphabet\n    this.engine = implementation(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.engine.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.engine.decode(string)\n  }\n}\n\nmodule.exports = Base\n","'use strict'\n\nconst baseX = require('@multiformats/base-x')\nconst Base = require('./base.js')\nconst { rfc4648 } = require('./rfc4648')\nconst { decodeText, encodeText } = require('./util')\n\n/** @typedef {__import__('./types').CodecFactory} CodecFactory */\n/** @typedef {__import__('./types').Codec} Codec */\n/** @typedef {__import__('./types').BaseName} BaseName */\n/** @typedef {__import__('./types').BaseCode} BaseCode */\n\n/** @type {CodecFactory} */\nconst identity = () => {\n  return {\n    encode: decodeText,\n    decode: encodeText\n  }\n}\n\n/**\n *\n * name, code, implementation, alphabet\n *\n * @type {Array<[BaseName, BaseCode, CodecFactory, string]>}\n */\nconst constants = [\n  ['identity', '\\x00', identity, ''],\n  ['base2', '0', rfc4648(1), '01'],\n  ['base8', '7', rfc4648(3), '01234567'],\n  ['base10', '9', baseX, '0123456789'],\n  ['base16', 'f', rfc4648(4), '0123456789abcdef'],\n  ['base16upper', 'F', rfc4648(4), '0123456789ABCDEF'],\n  ['base32hex', 'v', rfc4648(5), '0123456789abcdefghijklmnopqrstuv'],\n  ['base32hexupper', 'V', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV'],\n  ['base32hexpad', 't', rfc4648(5), '0123456789abcdefghijklmnopqrstuv='],\n  ['base32hexpadupper', 'T', rfc4648(5), '0123456789ABCDEFGHIJKLMNOPQRSTUV='],\n  ['base32', 'b', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567'],\n  ['base32upper', 'B', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'],\n  ['base32pad', 'c', rfc4648(5), 'abcdefghijklmnopqrstuvwxyz234567='],\n  ['base32padupper', 'C', rfc4648(5), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567='],\n  ['base32z', 'h', rfc4648(5), 'ybndrfg8ejkmcpqxot1uwisza345h769'],\n  ['base36', 'k', baseX, '0123456789abcdefghijklmnopqrstuvwxyz'],\n  ['base36upper', 'K', baseX, '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'],\n  ['base58btc', 'z', baseX, '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'],\n  ['base58flickr', 'Z', baseX, '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ'],\n  ['base64', 'm', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'],\n  ['base64pad', 'M', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='],\n  ['base64url', 'u', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'],\n  ['base64urlpad', 'U', rfc4648(6), 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=']\n]\n\n/** @type {Record<BaseName,Base>} */\nconst names = constants.reduce((prev, tupple) => {\n  prev[tupple[0]] = new Base(tupple[0], tupple[1], tupple[2], tupple[3])\n  return prev\n}, /** @type {Record<BaseName,Base>} */({}))\n\n/** @type {Record<BaseCode,Base>} */\nconst codes = constants.reduce((prev, tupple) => {\n  prev[tupple[1]] = names[tupple[0]]\n  return prev\n}, /** @type {Record<BaseCode,Base>} */({}))\n\nmodule.exports = {\n  names,\n  codes\n}\n","'use strict';\n\nconst processFn = (fn, opts) => function () {\n\tconst P = opts.promiseModule;\n\tconst args = new Array(arguments.length);\n\n\tfor (let i = 0; i < arguments.length; i++) {\n\t\targs[i] = arguments[i];\n\t}\n\n\treturn new P((resolve, reject) => {\n\t\tif (opts.errorFirst) {\n\t\t\targs.push(function (err, result) {\n\t\t\t\tif (opts.multiArgs) {\n\t\t\t\t\tconst results = new Array(arguments.length - 1);\n\n\t\t\t\t\tfor (let i = 1; i < arguments.length; i++) {\n\t\t\t\t\t\tresults[i - 1] = arguments[i];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tresults.unshift(err);\n\t\t\t\t\t\treject(results);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(results);\n\t\t\t\t\t}\n\t\t\t\t} else if (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\targs.push(function (result) {\n\t\t\t\tif (opts.multiArgs) {\n\t\t\t\t\tconst results = new Array(arguments.length - 1);\n\n\t\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\t\tresults[i] = arguments[i];\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(results);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfn.apply(this, args);\n\t});\n};\n\nmodule.exports = (obj, opts) => {\n\topts = Object.assign({\n\t\texclude: [/.+(Sync|Stream)$/],\n\t\terrorFirst: true,\n\t\tpromiseModule: Promise\n\t}, opts);\n\n\tconst filter = key => {\n\t\tconst match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\t\treturn opts.include ? opts.include.some(match) : !opts.exclude.some(match);\n\t};\n\n\tlet ret;\n\tif (typeof obj === 'function') {\n\t\tret = function () {\n\t\t\tif (opts.excludeMain) {\n\t\t\t\treturn obj.apply(this, arguments);\n\t\t\t}\n\n\t\t\treturn processFn(obj, opts).apply(this, arguments);\n\t\t};\n\t} else {\n\t\tret = Object.create(Object.getPrototypeOf(obj));\n\t}\n\n\tfor (const key in obj) { // eslint-disable-line guard-for-in\n\t\tconst x = obj[key];\n\t\tret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;\n\t}\n\n\treturn ret;\n};\n","'use strict'\nvar P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]\n\nexports.p1600 = function (s) {\n  for (var round = 0; round < 24; ++round) {\n    // theta\n    var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]\n    var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]\n    var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]\n    var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]\n    var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]\n    var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]\n    var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]\n    var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]\n    var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]\n    var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]\n\n    var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)\n    var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)\n    var t1slo0 = s[0] ^ lo\n    var t1shi0 = s[1] ^ hi\n    var t1slo5 = s[10] ^ lo\n    var t1shi5 = s[11] ^ hi\n    var t1slo10 = s[20] ^ lo\n    var t1shi10 = s[21] ^ hi\n    var t1slo15 = s[30] ^ lo\n    var t1shi15 = s[31] ^ hi\n    var t1slo20 = s[40] ^ lo\n    var t1shi20 = s[41] ^ hi\n    lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)\n    hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)\n    var t1slo1 = s[2] ^ lo\n    var t1shi1 = s[3] ^ hi\n    var t1slo6 = s[12] ^ lo\n    var t1shi6 = s[13] ^ hi\n    var t1slo11 = s[22] ^ lo\n    var t1shi11 = s[23] ^ hi\n    var t1slo16 = s[32] ^ lo\n    var t1shi16 = s[33] ^ hi\n    var t1slo21 = s[42] ^ lo\n    var t1shi21 = s[43] ^ hi\n    lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)\n    hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)\n    var t1slo2 = s[4] ^ lo\n    var t1shi2 = s[5] ^ hi\n    var t1slo7 = s[14] ^ lo\n    var t1shi7 = s[15] ^ hi\n    var t1slo12 = s[24] ^ lo\n    var t1shi12 = s[25] ^ hi\n    var t1slo17 = s[34] ^ lo\n    var t1shi17 = s[35] ^ hi\n    var t1slo22 = s[44] ^ lo\n    var t1shi22 = s[45] ^ hi\n    lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)\n    hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)\n    var t1slo3 = s[6] ^ lo\n    var t1shi3 = s[7] ^ hi\n    var t1slo8 = s[16] ^ lo\n    var t1shi8 = s[17] ^ hi\n    var t1slo13 = s[26] ^ lo\n    var t1shi13 = s[27] ^ hi\n    var t1slo18 = s[36] ^ lo\n    var t1shi18 = s[37] ^ hi\n    var t1slo23 = s[46] ^ lo\n    var t1shi23 = s[47] ^ hi\n    lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)\n    hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)\n    var t1slo4 = s[8] ^ lo\n    var t1shi4 = s[9] ^ hi\n    var t1slo9 = s[18] ^ lo\n    var t1shi9 = s[19] ^ hi\n    var t1slo14 = s[28] ^ lo\n    var t1shi14 = s[29] ^ hi\n    var t1slo19 = s[38] ^ lo\n    var t1shi19 = s[39] ^ hi\n    var t1slo24 = s[48] ^ lo\n    var t1shi24 = s[49] ^ hi\n\n    // rho & pi\n    var t2slo0 = t1slo0\n    var t2shi0 = t1shi0\n    var t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)\n    var t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)\n    var t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)\n    var t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)\n    var t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)\n    var t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)\n    var t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)\n    var t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)\n    var t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)\n    var t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)\n    var t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)\n    var t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)\n    var t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)\n    var t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)\n    var t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)\n    var t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)\n    var t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)\n    var t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)\n    var t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)\n    var t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)\n    var t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)\n    var t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)\n    var t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)\n    var t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)\n    var t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)\n    var t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)\n    var t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)\n    var t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)\n    var t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)\n    var t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)\n    var t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)\n    var t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)\n    var t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)\n    var t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)\n    var t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)\n    var t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)\n    var t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)\n    var t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)\n    var t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)\n    var t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)\n    var t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)\n    var t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)\n    var t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)\n    var t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)\n    var t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)\n    var t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)\n    var t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)\n    var t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)\n\n    // chi\n    s[0] = t2slo0 ^ (~t2slo1 & t2slo2)\n    s[1] = t2shi0 ^ (~t2shi1 & t2shi2)\n    s[10] = t2slo5 ^ (~t2slo6 & t2slo7)\n    s[11] = t2shi5 ^ (~t2shi6 & t2shi7)\n    s[20] = t2slo10 ^ (~t2slo11 & t2slo12)\n    s[21] = t2shi10 ^ (~t2shi11 & t2shi12)\n    s[30] = t2slo15 ^ (~t2slo16 & t2slo17)\n    s[31] = t2shi15 ^ (~t2shi16 & t2shi17)\n    s[40] = t2slo20 ^ (~t2slo21 & t2slo22)\n    s[41] = t2shi20 ^ (~t2shi21 & t2shi22)\n    s[2] = t2slo1 ^ (~t2slo2 & t2slo3)\n    s[3] = t2shi1 ^ (~t2shi2 & t2shi3)\n    s[12] = t2slo6 ^ (~t2slo7 & t2slo8)\n    s[13] = t2shi6 ^ (~t2shi7 & t2shi8)\n    s[22] = t2slo11 ^ (~t2slo12 & t2slo13)\n    s[23] = t2shi11 ^ (~t2shi12 & t2shi13)\n    s[32] = t2slo16 ^ (~t2slo17 & t2slo18)\n    s[33] = t2shi16 ^ (~t2shi17 & t2shi18)\n    s[42] = t2slo21 ^ (~t2slo22 & t2slo23)\n    s[43] = t2shi21 ^ (~t2shi22 & t2shi23)\n    s[4] = t2slo2 ^ (~t2slo3 & t2slo4)\n    s[5] = t2shi2 ^ (~t2shi3 & t2shi4)\n    s[14] = t2slo7 ^ (~t2slo8 & t2slo9)\n    s[15] = t2shi7 ^ (~t2shi8 & t2shi9)\n    s[24] = t2slo12 ^ (~t2slo13 & t2slo14)\n    s[25] = t2shi12 ^ (~t2shi13 & t2shi14)\n    s[34] = t2slo17 ^ (~t2slo18 & t2slo19)\n    s[35] = t2shi17 ^ (~t2shi18 & t2shi19)\n    s[44] = t2slo22 ^ (~t2slo23 & t2slo24)\n    s[45] = t2shi22 ^ (~t2shi23 & t2shi24)\n    s[6] = t2slo3 ^ (~t2slo4 & t2slo0)\n    s[7] = t2shi3 ^ (~t2shi4 & t2shi0)\n    s[16] = t2slo8 ^ (~t2slo9 & t2slo5)\n    s[17] = t2shi8 ^ (~t2shi9 & t2shi5)\n    s[26] = t2slo13 ^ (~t2slo14 & t2slo10)\n    s[27] = t2shi13 ^ (~t2shi14 & t2shi10)\n    s[36] = t2slo18 ^ (~t2slo19 & t2slo15)\n    s[37] = t2shi18 ^ (~t2shi19 & t2shi15)\n    s[46] = t2slo23 ^ (~t2slo24 & t2slo20)\n    s[47] = t2shi23 ^ (~t2shi24 & t2shi20)\n    s[8] = t2slo4 ^ (~t2slo0 & t2slo1)\n    s[9] = t2shi4 ^ (~t2shi0 & t2shi1)\n    s[18] = t2slo9 ^ (~t2slo5 & t2slo6)\n    s[19] = t2shi9 ^ (~t2shi5 & t2shi6)\n    s[28] = t2slo14 ^ (~t2slo10 & t2slo11)\n    s[29] = t2shi14 ^ (~t2shi10 & t2shi11)\n    s[38] = t2slo19 ^ (~t2slo15 & t2slo16)\n    s[39] = t2shi19 ^ (~t2shi15 & t2shi16)\n    s[48] = t2slo24 ^ (~t2slo20 & t2slo21)\n    s[49] = t2shi24 ^ (~t2shi20 & t2shi21)\n\n    // iota\n    s[0] ^= P1600_ROUND_CONSTANTS[round * 2]\n    s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]\n  }\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar inherits = require('inherits')\n\nmodule.exports = function (KeccakState) {\n  function Keccak (rate, capacity, delimitedSuffix, hashBitLength, options) {\n    Transform.call(this, options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._hashBitLength = hashBitLength\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  inherits(Keccak, Transform)\n\n  Keccak.prototype._transform = function (chunk, encoding, callback) {\n    var error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Keccak.prototype._flush = function (callback) {\n    var error = null\n    try {\n      this.push(this.digest())\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Keccak.prototype.update = function (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Digest already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  Keccak.prototype.digest = function (encoding) {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)\n    var digest = this._state.squeeze(this._hashBitLength / 8)\n    if (encoding !== undefined) digest = digest.toString(encoding)\n\n    this._resetState()\n\n    return digest\n  }\n\n  // remove result from memory\n  Keccak.prototype._resetState = function () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  // because sometimes we need hash right now and little later\n  Keccak.prototype._clone = function () {\n    var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n\n  return Keccak\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar inherits = require('inherits')\n\nmodule.exports = function (KeccakState) {\n  function Shake (rate, capacity, delimitedSuffix, options) {\n    Transform.call(this, options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  inherits(Shake, Transform)\n\n  Shake.prototype._transform = function (chunk, encoding, callback) {\n    var error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Shake.prototype._flush = function () {}\n\n  Shake.prototype._read = function (size) {\n    this.push(this.squeeze(size))\n  }\n\n  Shake.prototype.update = function (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Squeeze already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  Shake.prototype.squeeze = function (dataByteLength, encoding) {\n    if (!this._finalized) {\n      this._finalized = true\n      this._state.absorbLastFewBits(this._delimitedSuffix)\n    }\n\n    var data = this._state.squeeze(dataByteLength)\n    if (encoding !== undefined) data = data.toString(encoding)\n\n    return data\n  }\n\n  Shake.prototype._resetState = function () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  Shake.prototype._clone = function () {\n    var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n\n  return Shake\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\n\nvar messages = require('../messages.json')\n\nvar ec = new EC('secp256k1')\nvar ecparams = ec.curve\n\nfunction loadCompressedPublicKey (first, xBuffer) {\n  var x = new BN(xBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xBuffer, yBuffer) {\n  var x = new BN(xBuffer)\n  var y = new BN(yBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  var x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (publicKey) {\n  var first = publicKey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (publicKey.length !== 33) return null\n      return loadCompressedPublicKey(first, publicKey.slice(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (publicKey.length !== 65) return null\n      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))\n    default:\n      return null\n  }\n}\n\nexports.privateKeyVerify = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.cmp(ecparams.n) < 0 && !bn.isZero()\n}\n\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.privateKeyNegate = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = new BN(privateKey)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)\n\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  bn.iadd(new BN(privateKey))\n  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)\n\n  bn.imul(new BN(privateKey))\n  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return Buffer.from(pair.getPublic(compressed, true))\n}\n\nexports.publicKeyVerify = function (publicKey) {\n  return loadPublicKey(publicKey) !== null\n}\n\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  var point = ecparams.g.mul(tweak).add(pair.pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)\n\n  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))\n}\n\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var pairs = new Array(publicKeys.length)\n  for (var i = 0; i < publicKeys.length; ++i) {\n    pairs[i] = loadPublicKey(publicKeys[i])\n    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n  }\n\n  var point = pairs[0].pub\n  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.signatureNormalize = function (signature) {\n  var r = new BN(signature.slice(0, 32))\n  var s = new BN(signature.slice(32, 64))\n  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  var result = Buffer.from(signature)\n  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)\n\n  return result\n}\n\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32)\n  var s = signature.slice(32, 64)\n  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r)\n  if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n  var s = new BN(sigObj.s)\n  if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n  return Buffer.concat([\n    r.toArrayLike(Buffer, 'be', 32),\n    s.toArrayLike(Buffer, 'be', 32)\n  ])\n}\n\nexports.sign = function (message, privateKey, noncefn, data) {\n  if (typeof noncefn === 'function') {\n    var getNonce = noncefn\n    noncefn = function (counter) {\n      var nonce = getNonce(message, privateKey, null, data, counter)\n      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n      return new BN(nonce)\n    }\n  }\n\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })\n  return {\n    signature: Buffer.concat([\n      result.r.toArrayLike(Buffer, 'be', 32),\n      result.s.toArrayLike(Buffer, 'be', 32)\n    ]),\n    recovery: result.recoveryParam\n  }\n}\n\nexports.verify = function (message, signature, publicKey) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false\n\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })\n}\n\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  try {\n    if (sigr.isZero() || sigs.isZero()) throw new Error()\n\n    var point = ec.recoverPubKey(message, sigObj, recovery)\n    return Buffer.from(point.encode(true, compressed))\n  } catch (err) {\n    throw new Error(messages.ECDSA_RECOVER_FAIL)\n  }\n}\n\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)\n  return createHash('sha256').update(shared).digest()\n}\n\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  var scalar = new BN(privateKey)\n  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)\n\n  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))\n}\n","'use strict'\nvar assert = require('./assert')\nvar der = require('./der')\nvar messages = require('./messages.json')\n\nfunction initCompressedValue (value, defaultValue) {\n  if (value === undefined) return defaultValue\n\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)\n  return value\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)\n    },\n\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)\n\n      return der.privateKeyExport(privateKey, publicKey, compressed)\n    },\n\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n\n      privateKey = der.privateKeyImport(privateKey)\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey\n\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)\n    },\n\n    privateKeyNegate: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyNegate(privateKey)\n    },\n\n    privateKeyModInverse: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyModInverse(privateKey)\n    },\n\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak)\n    },\n\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakMul(privateKey, tweak)\n    },\n\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCreate(privateKey, compressed)\n    },\n\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyConvert(publicKey, compressed)\n    },\n\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      return secp256k1.publicKeyVerify(publicKey)\n    },\n\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)\n    },\n\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)\n    },\n\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n      }\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCombine(publicKeys, compressed)\n    },\n\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      return secp256k1.signatureNormalize(signature)\n    },\n\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = secp256k1.signatureExport(signature)\n      return der.signatureExport(sigObj)\n    },\n\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImport(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImportLax(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      var data = null\n      var noncefn = null\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)\n          data = options.data\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)\n          noncefn = options.noncefn\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data)\n    },\n\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      return secp256k1.verify(message, signature, publicKey)\n    },\n\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.recover(message, signature, recovery, compressed)\n    },\n\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.ecdh(publicKey, privateKey)\n    },\n\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)\n    }\n  }\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar keccakState = require('./keccak-state-unroll')\n\nfunction Keccak () {\n  // much faster than `new Array(50)`\n  this.state = [\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0\n  ]\n\n  this.blockSize = null\n  this.count = 0\n  this.squeezing = false\n}\n\nKeccak.prototype.initialize = function (rate, capacity) {\n  for (var i = 0; i < 50; ++i) this.state[i] = 0\n  this.blockSize = rate / 8\n  this.count = 0\n  this.squeezing = false\n}\n\nKeccak.prototype.absorb = function (data) {\n  for (var i = 0; i < data.length; ++i) {\n    this.state[~~(this.count / 4)] ^= data[i] << (8 * (this.count % 4))\n    this.count += 1\n    if (this.count === this.blockSize) {\n      keccakState.p1600(this.state)\n      this.count = 0\n    }\n  }\n}\n\nKeccak.prototype.absorbLastFewBits = function (bits) {\n  this.state[~~(this.count / 4)] ^= bits << (8 * (this.count % 4))\n  if ((bits & 0x80) !== 0 && this.count === (this.blockSize - 1)) keccakState.p1600(this.state)\n  this.state[~~((this.blockSize - 1) / 4)] ^= 0x80 << (8 * ((this.blockSize - 1) % 4))\n  keccakState.p1600(this.state)\n  this.count = 0\n  this.squeezing = true\n}\n\nKeccak.prototype.squeeze = function (length) {\n  if (!this.squeezing) this.absorbLastFewBits(0x01)\n\n  var output = Buffer.alloc(length)\n  for (var i = 0; i < length; ++i) {\n    output[i] = (this.state[~~(this.count / 4)] >>> (8 * (this.count % 4))) & 0xff\n    this.count += 1\n    if (this.count === this.blockSize) {\n      keccakState.p1600(this.state)\n      this.count = 0\n    }\n  }\n\n  return output\n}\n\nKeccak.prototype.copy = function (dest) {\n  for (var i = 0; i < 50; ++i) dest.state[i] = this.state[i]\n  dest.blockSize = this.blockSize\n  dest.count = this.count\n  dest.squeezing = this.squeezing\n}\n\nmodule.exports = Keccak\n","'use strict'\nvar createKeccak = require('./keccak')\nvar createShake = require('./shake')\n\nmodule.exports = function (KeccakState) {\n  var Keccak = createKeccak(KeccakState)\n  var Shake = createShake(KeccakState)\n\n  return function (algorithm, options) {\n    var hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm\n    switch (hash) {\n      case 'keccak224': return new Keccak(1152, 448, null, 224, options)\n      case 'keccak256': return new Keccak(1088, 512, null, 256, options)\n      case 'keccak384': return new Keccak(832, 768, null, 384, options)\n      case 'keccak512': return new Keccak(576, 1024, null, 512, options)\n\n      case 'sha3-224': return new Keccak(1152, 448, 0x06, 224, options)\n      case 'sha3-256': return new Keccak(1088, 512, 0x06, 256, options)\n      case 'sha3-384': return new Keccak(832, 768, 0x06, 384, options)\n      case 'sha3-512': return new Keccak(576, 1024, 0x06, 512, options)\n\n      case 'shake128': return new Shake(1344, 256, 0x1f, options)\n      case 'shake256': return new Shake(1088, 512, 0x1f, options)\n\n      default: throw new Error('Invald algorithm: ' + algorithm)\n    }\n  }\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.secp256k1 = exports.rlp = exports.BN = void 0;\nvar secp256k1 = require('./secp256k1v3-adapter');\nexports.secp256k1 = secp256k1;\nvar ethjsUtil = require('ethjs-util');\nvar BN = require(\"bn.js\");\nexports.BN = BN;\nvar rlp = require(\"rlp\");\nexports.rlp = rlp;\nObject.assign(exports, ethjsUtil);\n/**\n * Constants\n */\n__exportStar(require(\"./constants\"), exports);\n/**\n * Public-key cryptography (secp256k1) and addresses\n */\n__exportStar(require(\"./account\"), exports);\n/**\n * Hash functions\n */\n__exportStar(require(\"./hash\"), exports);\n/**\n * ECDSA signature\n */\n__exportStar(require(\"./signature\"), exports);\n/**\n * Utilities for manipulating Buffers, byte arrays, etc.\n */\n__exportStar(require(\"./bytes\"), exports);\n/**\n * Function for definining properties on an object\n */\n__exportStar(require(\"./object\"), exports);\n//# sourceMappingURL=index.js.map","var assignValue = require('./_assignValue'),\n    baseAssignValue = require('./_baseAssignValue');\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n","var arrayPush = require('./_arrayPush'),\n    getPrototype = require('./_getPrototype'),\n    getSymbols = require('./_getSymbols'),\n    stubArray = require('./stubArray');\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols;\n\n/**\n * Creates an array of the own and inherited enumerable symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {\n  var result = [];\n  while (object) {\n    arrayPush(result, getSymbols(object));\n    object = getPrototype(object);\n  }\n  return result;\n};\n\nmodule.exports = getSymbolsIn;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar mapTag = '[object Map]';\n\n/**\n * The base implementation of `_.isMap` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a map, else `false`.\n */\nfunction baseIsMap(value) {\n  return isObjectLike(value) && getTag(value) == mapTag;\n}\n\nmodule.exports = baseIsMap;\n","var getTag = require('./_getTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar setTag = '[object Set]';\n\n/**\n * The base implementation of `_.isSet` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a set, else `false`.\n */\nfunction baseIsSet(value) {\n  return isObjectLike(value) && getTag(value) == setTag;\n}\n\nmodule.exports = baseIsSet;\n","var isObject = require('./isObject');\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n","var isObject = require('./isObject'),\n    isPrototype = require('./_isPrototype'),\n    nativeKeysIn = require('./_nativeKeysIn');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n","/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\nmodule.exports = cloneRegExp;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\nmodule.exports = cloneDataView;\n","var Symbol = require('./_Symbol');\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\nmodule.exports = cloneSymbol;\n","var cloneArrayBuffer = require('./_cloneArrayBuffer');\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n","var Uint8Array = require('./_Uint8Array');\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n","/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n","/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n","var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n","var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n","var isObject = require('./isObject');\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n","var baseHasIn = require('./_baseHasIn'),\n    hasPath = require('./_hasPath');\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n","/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n","var baseGet = require('./_baseGet');\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n","'use strict';\n\n/**\n * Return the mime type for the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.type = function(str){\n  return str.split(/ *; */).shift();\n};\n\n/**\n * Return header field parameters.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.params = function(str){\n  return str.split(/ *; */).reduce(function(obj, str){\n    var parts = str.split(/ *= */);\n    var key = parts.shift();\n    var val = parts.shift();\n\n    if (key && val) obj[key] = val;\n    return obj;\n  }, {});\n};\n\n/**\n * Parse Link header fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nexports.parseLinks = function(str){\n  return str.split(/ *, */).reduce(function(obj, str){\n    var parts = str.split(/ *; */);\n    var url = parts[0].slice(1, -1);\n    var rel = parts[1].split(/ *= */)[1].slice(1, -1);\n    obj[rel] = url;\n    return obj;\n  }, {});\n};\n\n/**\n * Strip content related fields from `header`.\n *\n * @param {Object} header\n * @return {Object} header\n * @api private\n */\n\nexports.cleanHeader = function(header, changesOrigin){\n  delete header['content-type'];\n  delete header['content-length'];\n  delete header['transfer-encoding'];\n  delete header['host'];\n  // secuirty\n  if (changesOrigin) {\n    delete header['authorization'];\n    delete header['cookie'];\n  }\n  return header;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns a Nibble (0-15) which equals the given bits.\n *\n * @example\n * byte.write([1,0,1,0]) => 10\n *\n * @param {Array} nibble 4-bit unsigned integer\n * @return {Number}\n */\nexports.default = (function (nibble) {\n    if (!Array.isArray(nibble) || nibble.length !== 4)\n        throw new RangeError('invalid array length');\n    var result = 0;\n    for (var i = 0; i < 4; i++)\n        if (nibble[3 - i])\n            result |= 1 << i;\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns an Array of length 8 containing the read bits.\n *\n * @example\n * nibble.read(15) => [1,1,1,1]\n *\n * @param {Number} nibble one nibble\n * @return {Array}\n */\nexports.default = (function (nibble) {\n    if (nibble < 16 && nibble >= 0 && Math.floor(nibble) === nibble) {\n        var result = [0, 0, 0, 0];\n        for (var i = 0; i < 4; i++)\n            result[3 - i] = ((nibble >> i) & 1);\n        return result;\n    }\n    else\n        throw new RangeError('invalid array length');\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns a UInt8 (0-255) which equals the given bits.\n *\n * @example\n * byte.write([0,0,1,0,1,0,1,0]) => 42\n *\n * @param {Array} byte 8 bits\n * @return {Number} 8-bit unsigned integer\n */\nexports.default = (function (byte) {\n    if (!Array.isArray(byte) || byte.length !== 8)\n        throw new RangeError('invalid array length');\n    var data = 0;\n    for (var i = 0; i < 8; i++)\n        if (byte[7 - i])\n            data |= 1 << i;\n    return data;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns an Array of length 8 containing the read bits.\n *\n * @example\n * byte.read(42) => [0,0,1,0,1,0,1,0]\n *\n * @param {Number} byte one byte\n * @return {Array}\n */\nexports.default = (function (byte) {\n    if (byte > 255 || byte < 0 || ~~byte !== byte)\n        throw new RangeError('invalid byte');\n    var result = [0, 0, 0, 0, 0, 0, 0, 0];\n    for (var i = 0; i < 8; i++)\n        result[7 - i] = ((byte >> i) & 1);\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Sets the value of a specific bit.\n * @example bitwise.integer.set(128, 7, 0) => 0\n * @param {Integer} int32 input number\n * @param {Integer} position bit’s position\n * @param {Integer} value bit’s new value\n * @returns {Integer} resulting number\n */\nexports.default = (function (int32, position, value) {\n    return (value === 1 ? int32 | (1 << position) : int32 & ~(1 << position));\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Gets the value of a specific bit.\n * @example bitwise.integer.getBit(128, 7) => 1\n * @param {Integer} int32 input number\n * @param {Integer} position bit's position\n * @returns {Integer} bit's value\n */\nexports.default = (function (int32, position) {\n    return ((int32 >> position) & 1);\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Toggles a specific bit.\n * @example bitwise.integer.getBit(128, 7) => 0\n * @param {Integer} int32 input number\n * @param {Integer} position bit’s position\n * @returns {Integer} updated number\n */\nexports.default = (function (int32, position) { return int32 ^ (1 << position); });\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Converts a string into an array of bits. Ignores all characters except 1 and 0.\n *\n * @example\n * toBits('10 10 12$%_.0') => [1,0,1,0,1,0]\n *\n * @param {String} string the string to convert\n * @returns {Array} resulting array of bits\n */\nexports.default = (function (string) {\n    var result = [];\n    for (var i = 0; i < string.length; i++) {\n        if (string[i] === '1')\n            result.push(1);\n        else if (string[i] === '0')\n            result.push(0);\n    }\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the AND operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceAnd([1, 0, 0, 0, 1, 1, 0, 1]) => 0\n *\n * @param {Array} bits input data\n * @return {Integer} AND bits\n */\nexports.default = (function (bits) {\n    if (bits.length < 2)\n        throw new RangeError('Not enough bits.');\n    var result = bits[0];\n    for (var i = 1; i < bits.length; i++)\n        result &= bits[i];\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Circular Shift Right\n *\n * @example\n * circularShiftRight([1,0,1,1,0,1]) => [1,1,0,1,1,0]\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_shift}\n *\n * @param {Array} bits input data\n * @param {number} amount how far should it be shifted\n * @return {Array} [ROR bits]\n */\nexports.default = (function (bits, amount) {\n    var result = [];\n    if (amount > bits.length)\n        throw new Error('shift amount can’t be larger than bits array length');\n    for (var i = 0; i < bits.length; i++)\n        result[(i + amount) % bits.length] = bits[i];\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the XNOR operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceXnor([1, 0, 0, 0, 1, 1, 0, 1]) => 1\n *\n * @param {Array} bits input data\n * @return {Integer} XNOR bits\n */\nexports.default = (function (bits) {\n    if (bits.length < 2)\n        throw new RangeError('Not enough bits.');\n    var result = bits[0];\n    for (var i = 1; i < bits.length; i++)\n        result ^= bits[i] ^ 1;\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the NAND operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceNand([1, 0, 0, 0, 1, 1, 0, 1]) => 0\n *\n * @param {Array} bits input data\n * @return {Integer} NAND bits\n */\nexports.default = (function (bits) {\n    if (bits.length < 2)\n        throw new RangeError('Not enough bits.');\n    var result = bits[0];\n    for (var i = 1; i < bits.length; i++)\n        result = ((result & bits[i]) ^ 1);\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the AND operation, expects two arrays of the same size and returns a new one.\n *\n * @example\n * and([1,0,0,0,1,1,0,1], [0,1,1,0,0,1,0,0]) => [0,0,0,0,0,1,0,0]\n *\n * @param {Array} bits1 input data\n * @param {Array} bits2 input data\n * @return {Array} [bits1 AND bits2]\n */\nexports.default = (function (bits1, bits2) {\n    var result = [];\n    for (var i = 0; i < bits1.length; i++)\n        result[i] = (bits1[i] & bits2[i]);\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Circular Shift Left\n *\n * @example\n * circularShiftLeft([1,0,1,1,0,1]) => [0,1,1,0,1,1]\n *\n * @see {@link https://en.wikipedia.org/wiki/Circular_shift}\n *\n * @param {Array} bits input data\n * @param {number} amount how far should it be shifted\n * @return {Array} [ROL bits]\n */\nexports.default = (function (bits, amount) {\n    var result = [];\n    if (amount > bits.length)\n        throw new Error('shift amount can’t be larger than bits array length');\n    for (var i = 0; i < bits.length; i++)\n        result[(bits.length + i - amount) % bits.length] = bits[i];\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the XOR operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceXor([1, 0, 0, 0, 1, 1, 0, 1]) => 0\n *\n * @param {Array} bits input data\n * @return {Integer} XOR bits\n */\nexports.default = (function (bits) {\n    if (bits.length < 2)\n        throw new RangeError('Not enough bits.');\n    var result = bits[0];\n    for (var i = 1; i < bits.length; i++)\n        result ^= bits[i];\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Flips all given bits and returns the flipped bits.\n *\n * @example\n * not([1,0,1,1,0,1]) => [0,1,0,0,1,0]\n *\n * @param {Array} bits input data\n * @return {Array} [NOT bits]\n */\nexports.default = (function (bits) {\n    var result = [];\n    for (var i = 0; i < bits.length; i++)\n        result[i] = (bits[i] ^ 1);\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the OR operation, expects two arrays of the same size and returns a new one.\n *\n * @example\n * or([1,0,0,0,1,1,0,1], [0,1,1,0,0,1,0,0]) => [1,1,1,0,1,1,0,1]\n *\n * @param {Array} bits1 input data\n * @param {Array} bits2 input data\n * @return {Array} [bits1 OR bits2]\n */\nexports.default = (function (bits1, bits2) {\n    var result = [];\n    for (var i = 0; i < bits1.length; i++)\n        result[i] = (bits1[i] | bits2[i]);\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the OR operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceOr([1, 0, 0, 0, 1, 1, 0, 1]) => 1\n *\n * @param {Array} bits input data\n * @return {Integer} OR bits\n */\nexports.default = (function (bits) {\n    if (bits.length < 2)\n        throw new RangeError('Not enough bits.');\n    var result = bits[0];\n    for (var i = 1; i < bits.length; i++)\n        result |= bits[i];\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the NOR operation on the given bits. Returns one bit.\n * Throws if less than 2 bits are given.\n *\n * @example\n * reduceNor([1, 0, 0, 0, 1, 1, 0, 1]) => 0\n *\n * @param {Array} bits input data\n * @return {Integer} NOR bits\n */\nexports.default = (function (bits) {\n    if (bits.length < 2)\n        throw new RangeError('Not enough bits.');\n    var result = bits[0];\n    for (var i = 1; i < bits.length; i++)\n        result = ((result | bits[i]) ^ 1);\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the exclusive NOR operation, expects two arrays of the same size and returns a new one.\n *\n * @example\n * xnor([1,0,0,0,1,1,0,1], [0,1,1,0,0,1,0,0]) => [0,0,0,1,0,1,1,0]\n *\n * @param {Array} bits1 input data\n * @param {Array} bits2 input data\n * @return {Array} [bits1 XNOR bits2]\n */\nexports.default = (function (bits1, bits2) {\n    var result = [];\n    for (var i = 0; i < bits1.length; i++)\n        result[i] = (bits1[i] ^ bits2[i] ^ 1);\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the exclusive or operation, expects two arrays of the same size and returns a new one.\n *\n * @example\n * xor([1,0,0,0,1,1,0,1], [0,1,1,0,0,1,0,0]) => [1,1,1,0,1,0,0,1]\n *\n * @param {Array} bits1 input data\n * @param {Array} bits2 input data\n * @return {Array} [bits1 XOR bits2]\n */\nexports.default = (function (bits1, bits2) {\n    var result = [];\n    for (var i = 0; i < bits1.length; i++)\n        result[i] = (bits1[i] ^ bits2[i]);\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the NAND operation, expects two arrays of the same size and returns a new one.\n *\n * @example\n * nand([1,0,0,0,1,1,0,1], [0,1,1,0,0,1,0,0]) => [1,1,1,1,1,0,1,1]\n *\n * @param {Array} bits1 input data\n * @param {Array} bits2 input data\n * @return {Array} [bits1 NAND bits2]\n */\nexports.default = (function (bits1, bits2) {\n    var result = [];\n    for (var i = 0; i < bits1.length; i++)\n        result[i] = ((bits1[i] & bits2[i]) ^ 1);\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies the NOR operation, expects two arrays of the same size and returns a new one.\n *\n * @example\n * nor([1,0,0,0,1,1,0,1], [0,1,1,0,0,1,0,0]) => [0,0,0,1,0,0,1,0]\n *\n * @param {Array} bits1 input data\n * @param {Array} bits2 input data\n * @return {Array} [bits1 NOR bits2]\n */\nexports.default = (function (bits1, bits2) {\n    var result = [];\n    for (var i = 0; i < bits1.length; i++)\n        result[i] = ((bits1[i] | bits2[i]) ^ 1);\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Converts a bit array to a boolean array.\n *\n * @example toBoolean([0, 1]) => [false, true]\n * @param {Array} bits input data\n * @returns {Array} boolean bits\n */\nexports.default = (function (bits) {\n    var result = [];\n    for (var i = 0; i < bits.length; i++)\n        result[i] = bits[i] === 1;\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Converts a bit array to a string. If defined, inserts spacer every spacing characters, but never inserts it as the last substring.\n *\n * @example\n * toString([1,0,1,0,1,0], 2, '_') => '10_10_10'\n *\n * @param {Array} bits the bits to convert\n * @param {Number} spacing where to place the spacers\n * @param {Number} spacer the string used as a spacer\n * @return {String}\n */\nexports.default = (function (bits, spacing, spacer) {\n    if (spacing === void 0) { spacing = 0; }\n    if (spacer === void 0) { spacer = ' '; }\n    if (!spacing)\n        return bits.join('');\n    var result = '';\n    for (var i = 0; i < bits.length; i++) {\n        result += \"\" + bits[i];\n        if (i % spacing === spacing - 1 && i !== bits.length - 1)\n            result += spacer;\n    }\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies a bitwise NAND to the contents of two buffers. Returns a new buffer.\n *\n * @example\n * bitwise.buffer.nand(a, b, false) => Buffer(a NAND b)\n *\n * @param {Buffer} a first buffer\n * @param {Buffer} b second buffer\n * @param {Boolean} isLooping loop through first buffer\n * @return {Buffer} a NAND b\n */\nexports.default = (function (a, b, isLooping) {\n    if (isLooping === void 0) { isLooping = false; }\n    var length = isLooping ? b.length : a.length;\n    var result = Buffer.alloc(length);\n    for (var i = 0; i < length; i++) {\n        var j = isLooping ? i % a.length : i;\n        result[i] = ~(a[j] & b[i]);\n    }\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies a bitwise AND to the contents of two buffers. Returns a new buffer.\n *\n * @example\n * bitwise.buffer.and(a, b, false) => Buffer(a AND b)\n *\n * @param {Buffer} a first buffer\n * @param {Buffer} b second buffer\n * @param {Boolean} isLooping loop through first buffer\n * @return {Buffer} a AND b\n */\nexports.default = (function (a, b, isLooping) {\n    if (isLooping === void 0) { isLooping = false; }\n    var length = isLooping ? b.length : a.length;\n    var result = Buffer.alloc(length);\n    for (var i = 0; i < length; i++) {\n        var j = isLooping ? i % a.length : i;\n        result[i] = a[j] & b[i];\n    }\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies a bitwise OR to the contents of two buffers. Returns a new buffer.\n *\n * @example\n * bitwise.buffer.or(a, b, false) => Buffer(a OR b)\n *\n * @param {Buffer} a first buffer\n * @param {Buffer} b second buffer\n * @param {Boolean} isLooping loop through first buffer\n * @return {Buffer} a OR b\n */\nexports.default = (function (a, b, isLooping) {\n    if (isLooping === void 0) { isLooping = false; }\n    var length = isLooping ? b.length : a.length;\n    var result = Buffer.alloc(length);\n    for (var i = 0; i < length; i++) {\n        var j = isLooping ? i % a.length : i;\n        result[i] = a[j] | b[i];\n    }\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies a bitwise NOT to the contents of a buffer. Returns a new buffer.\n *\n * @example\n * bitwise.buffer.not(buffer) => Buffer(NOT buffer)\n *\n * @param {Buffer} buffer input data\n * @return {Buffer} Buffer(NOT buffer)\n */\nexports.default = (function (buffer) {\n    var result = Buffer.alloc(buffer.length);\n    for (var i = 0; i < buffer.length; i++)\n        result[i] = ~buffer[i];\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies a bitwise XOR to the contents of two buffers. Returns a new buffer.\n *\n * @example\n * bitwise.buffer.xor(a, b, false) => Buffer(a XOR b)\n *\n * @param {Buffer} a first buffer\n * @param {Buffer} b second buffer\n * @param {Boolean} isLooping loop through first buffer\n * @return {Buffer} a XOR b\n */\nexports.default = (function (a, b, isLooping) {\n    if (isLooping === void 0) { isLooping = false; }\n    var length = isLooping ? b.length : a.length;\n    var result = Buffer.alloc(length);\n    for (var i = 0; i < length; i++) {\n        var j = isLooping ? i % a.length : i;\n        result[i] = a[j] ^ b[i];\n    }\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies a bitwise XNOR to the contents of two buffers. Returns a new buffer.\n *\n * @example\n * bitwise.buffer.xnor(a, b, false) => Buffer(a XNOR b)\n *\n * @param {Buffer} a first buffer\n * @param {Buffer} b second buffer\n * @param {Boolean} isLooping loop through first buffer\n * @return {Buffer} a XNOR b\n */\nexports.default = (function (a, b, isLooping) {\n    if (isLooping === void 0) { isLooping = false; }\n    var length = isLooping ? b.length : a.length;\n    var result = Buffer.alloc(length);\n    for (var i = 0; i < length; i++) {\n        var j = isLooping ? i % a.length : i;\n        result[i] = ~(a[j] ^ b[i]);\n    }\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Applies a bitwise NOR to the contents of two buffers. Returns a new buffer.\n *\n * @example\n * bitwise.buffer.nor(a, b, false) => Buffer(a NOR b)\n *\n * @param {Buffer} a first buffer\n * @param {Buffer} b second buffer\n * @param {Boolean} isLooping loop through first buffer\n * @return {Buffer} a NOR b\n */\nexports.default = (function (a, b, isLooping) {\n    if (isLooping === void 0) { isLooping = false; }\n    var length = isLooping ? b.length : a.length;\n    var result = Buffer.alloc(length);\n    for (var i = 0; i < length; i++) {\n        var j = isLooping ? i % a.length : i;\n        result[i] = ~(a[j] | b[i]);\n    }\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar write_1 = require(\"../byte/write\");\nvar read_1 = require(\"./read\");\n/**\n * Modifies the buffer's bits to equal newBits starting at bitOffset.\n *\n * @example\n * modifyBuffer(buffer, [0,0,1,0], 0) => buffer was modified\n *\n * @param {Buffer} buffer the buffer to modify\n * @param {Array} bits the bits to insert\n * @param {Number} offset where to start (in bits)\n * @returns {undefined}\n */\nexports.default = (function (buffer, bits, offset) {\n    if (offset === void 0) { offset = 0; }\n    var start = Math.floor(offset / 8);\n    var end = Math.ceil((offset + bits.length) / 8);\n    var subBuffer = buffer.slice(start, end);\n    var byteData = read_1.default(subBuffer);\n    var subOffset = offset % 8;\n    for (var i = 0; i < bits.length; i++)\n        byteData[subOffset++] = bits[i];\n    var length = end - start;\n    for (var i_1 = 0; i_1 < length; i_1++)\n        subBuffer[i_1] = write_1.default(byteData.slice(i_1 * 8, (i_1 + 1) * 8));\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar write_1 = require(\"../byte/write\");\n/**\n * Creates a new buffer and writes the given bits.\n *\n * @example\n * createBuffer([1,1,1,1, 0,0,0,1, 1,0,1,0]) => buffer with data 1111 0001 1010 0000\n *\n * @param {Array} bits an array containing the bits to insert\n * @returns {Buffer}\n */\nexports.default = (function (bits) {\n    var data = [0, 0, 0, 0, 0, 0, 0, 0];\n    var buffer = Buffer.alloc(Math.ceil(bits.length / 8));\n    for (var i = 0; i < buffer.length; i++) {\n        for (var j = 0; j < 8; j++) {\n            if (bits[i * 8 + j])\n                data[j] = bits[i * 8 + j];\n            else\n                data[j] = 0;\n        }\n        buffer[i] = write_1.default(data);\n    }\n    return buffer;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar read_1 = require(\"../byte/read\");\n/**\n * Returns an Array containing bitLength bits starting at bitOffset.\n *\n * @example\n * readBuffer(buffer, 2, 4) => [0,0,1,0]\n *\n * @param {Buffer} buffer the buffer to read\n * @param {Number} offset where to start (in bits)\n * @param {Number} length how many bits to read\n * @returns {Array}\n */\nexports.default = (function (buffer, offset, length) {\n    if (offset === void 0) { offset = 0; }\n    if (!length)\n        length = buffer.length * 8 - offset;\n    var start = Math.floor(offset / 8);\n    var bytesToRead = Math.floor(length / 8) + 2;\n    var arr = [];\n    arr.length = bytesToRead * 8;\n    for (var i = 0; i < bytesToRead; i++) {\n        var toRead = buffer[start + i];\n        if (toRead === undefined)\n            continue;\n        var bits = read_1.default(buffer[start + i]);\n        arr[i * 8] = bits[0];\n        arr[i * 8 + 1] = bits[1];\n        arr[i * 8 + 2] = bits[2];\n        arr[i * 8 + 3] = bits[3];\n        arr[i * 8 + 4] = bits[4];\n        arr[i * 8 + 5] = bits[5];\n        arr[i * 8 + 6] = bits[6];\n        arr[i * 8 + 7] = bits[7];\n    }\n    var subOffset = offset % 8;\n    return arr.slice(subOffset, subOffset + length);\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utilities_1 = require(\"../utilities\");\nvar read_1 = require(\"./read\");\n/**\n * Converts a section of a buffer to an unsigned integer.\n *\n * @example\n * // buffer 11110110\n * readUInt(buffer, 3, 5) => 22\n *\n * @param {Buffer} buffer the buffer to extract information from\n * @param {Number} length the length of the unsigned integer (in bits)\n * @param {Number} offset where to start (in bits)\n * @returns {Number}\n */\nexports.default = (function (buffer, offset, length) {\n    if (offset === void 0) { offset = 0; }\n    if (length === void 0) { length = 8; }\n    var arr = read_1.default(buffer, offset, length);\n    var result = 0;\n    for (var i = 0; i < length; i++)\n        result += arr[i] * utilities_1.p2[length - i - 1];\n    return result;\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar utilities_1 = require(\"../utilities\");\nvar not_1 = require(\"../bits/not\");\nvar read_1 = require(\"./read\");\n/**\n * Converts a section of a buffer to a signed integer.\n *\n * @example\n * // buffer 11110110\n * readUInt(buffer, 3, 5) => -10\n *\n * @param {Buffer} buffer the buffer to extract information from\n * @param {Number} length the length of the signed integer (in bits)\n * @param {Number} offset where to start (in bits)\n * @return {Number}\n */\nexports.default = (function (buffer, offset, length) {\n    if (offset === void 0) { offset = 0; }\n    if (length === void 0) { length = 8; }\n    var bits = read_1.default(buffer, offset, length);\n    if (bits[0] === 0) {\n        var result = 0;\n        for (var i = 0; i < length; i++)\n            if (bits[i])\n                result += utilities_1.p2[length - i - 1];\n        return result;\n    }\n    else {\n        var result = -1;\n        var inverted = not_1.default(bits);\n        for (var i = 0; i < length; i++)\n            if (inverted[i])\n                result -= utilities_1.p2[length - i - 1];\n        return result;\n    }\n});\n","// Extracted from https://github.com/ethereumjs/ethereumjs-util and stripped out irrelevant code\n// Original code licensed under the Mozilla Public License Version 2.0\n\nconst BN = require('bn.js')\nconst Buffer = require('buffer/').Buffer\nconst keccak256 = require('js-sha3').keccak256\n\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\nfunction zeros (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0)\n}\n\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method setLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\nfunction setLength (msg, length, right) {\n  const buf = zeros(length)\n  msg = toBuffer(msg)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\nfunction setLengthRight (msg, length) {\n  return setLength(msg, length, true)\n}\n\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param {*} v the value\n */\nfunction toBuffer (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v)\n    } else if (typeof v === 'string') {\n      if (isHexString(v)) {\n        v = Buffer.from(padToEven(stripHexPrefix(v)), 'hex')\n      } else {\n        v = Buffer.from(v)\n      }\n    } else if (typeof v === 'number') {\n      v = intToBuffer(v)\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0)\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer)\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray())\n    } else {\n      throw new Error('invalid type')\n    }\n  }\n  return v\n}\n\n/**\n * Converts a `Buffer` into a hex `String`\n * @param {Buffer} buf\n * @return {String}\n */\nfunction bufferToHex (buf) {\n  buf = toBuffer(buf)\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Creates Keccak hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nfunction keccak (a) {\n  a = toBuffer(a)\n  return Buffer.from(keccak256(a), 'hex')\n}\n\nfunction padToEven (str) {\n  return str.length % 2 ? '0' + str : str\n}\n\nfunction isHexString (str) {\n  return typeof str === 'string' && str.match(/^0x[0-9A-Fa-f]*$/)\n}\n\nfunction stripHexPrefix (str) {\n  if (typeof str === 'string' && str.startsWith('0x')) {\n    return str.slice(2)\n  }\n  return str\n}\n\nmodule.exports = {\n  zeros,\n  setLength,\n  setLengthRight,\n  isHexString,\n  stripHexPrefix,\n  toBuffer,\n  bufferToHex,\n  keccak\n}\n","// Extracted from https://github.com/ethereumjs/ethereumjs-abi and stripped out irrelevant code\n// Original code licensed under the MIT License - Copyright (c) 2015 Alex Beregszaszi\n\nconst util = require('./util')\nconst BN = require('bn.js')\nconst Buffer = require('buffer/').Buffer\n\n// Convert from short to canonical names\n// FIXME: optimise or make this nicer?\nfunction elementaryName (name) {\n  if (name.startsWith('int[')) {\n    return 'int256' + name.slice(3)\n  } else if (name === 'int') {\n    return 'int256'\n  } else if (name.startsWith('uint[')) {\n    return 'uint256' + name.slice(4)\n  } else if (name === 'uint') {\n    return 'uint256'\n  } else if (name.startsWith('fixed[')) {\n    return 'fixed128x128' + name.slice(5)\n  } else if (name === 'fixed') {\n    return 'fixed128x128'\n  } else if (name.startsWith('ufixed[')) {\n    return 'ufixed128x128' + name.slice(6)\n  } else if (name === 'ufixed') {\n    return 'ufixed128x128'\n  }\n  return name\n}\n\n// Parse N from type<N>\nfunction parseTypeN (type) {\n  return parseInt(/^\\D+(\\d+)$/.exec(type)[1], 10)\n}\n\n// Parse N,M from type<N>x<M>\nfunction parseTypeNxM (type) {\n  var tmp = /^\\D+(\\d+)x(\\d+)$/.exec(type)\n  return [ parseInt(tmp[1], 10), parseInt(tmp[2], 10) ]\n}\n\n// Parse N in type[<N>] where \"type\" can itself be an array type.\nfunction parseTypeArray (type) {\n  var tmp = type.match(/(.*)\\[(.*?)\\]$/)\n  if (tmp) {\n    return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10)\n  }\n  return null\n}\n\nfunction parseNumber (arg) {\n  var type = typeof arg\n  if (type === 'string') {\n    if (util.isHexString(arg)) {\n      return new BN(util.stripHexPrefix(arg), 16)\n    } else {\n      return new BN(arg, 10)\n    }\n  } else if (type === 'number') {\n    return new BN(arg)\n  } else if (arg.toArray) {\n    // assume this is a BN for the moment, replace with BN.isBN soon\n    return arg\n  } else {\n    throw new Error('Argument is not a number')\n  }\n}\n\n// Encodes a single item (can be dynamic array)\n// @returns: Buffer\nfunction encodeSingle (type, arg) {\n  var size, num, ret, i\n\n  if (type === 'address') {\n    return encodeSingle('uint160', parseNumber(arg))\n  } else if (type === 'bool') {\n    return encodeSingle('uint8', arg ? 1 : 0)\n  } else if (type === 'string') {\n    return encodeSingle('bytes', new Buffer(arg, 'utf8'))\n  } else if (isArray(type)) {\n    // this part handles fixed-length ([2]) and variable length ([]) arrays\n    // NOTE: we catch here all calls to arrays, that simplifies the rest\n    if (typeof arg.length === 'undefined') {\n      throw new Error('Not an array?')\n    }\n    size = parseTypeArray(type)\n    if (size !== 'dynamic' && size !== 0 && arg.length > size) {\n      throw new Error('Elements exceed array size: ' + size)\n    }\n    ret = []\n    type = type.slice(0, type.lastIndexOf('['))\n    if (typeof arg === 'string') {\n      arg = JSON.parse(arg)\n    }\n    for (i in arg) {\n      ret.push(encodeSingle(type, arg[i]))\n    }\n    if (size === 'dynamic') {\n      var length = encodeSingle('uint256', arg.length)\n      ret.unshift(length)\n    }\n    return Buffer.concat(ret)\n  } else if (type === 'bytes') {\n    arg = new Buffer(arg)\n\n    ret = Buffer.concat([ encodeSingle('uint256', arg.length), arg ])\n\n    if ((arg.length % 32) !== 0) {\n      ret = Buffer.concat([ ret, util.zeros(32 - (arg.length % 32)) ])\n    }\n\n    return ret\n  } else if (type.startsWith('bytes')) {\n    size = parseTypeN(type)\n    if (size < 1 || size > 32) {\n      throw new Error('Invalid bytes<N> width: ' + size)\n    }\n\n    return util.setLengthRight(arg, 32)\n  } else if (type.startsWith('uint')) {\n    size = parseTypeN(type)\n    if ((size % 8) || (size < 8) || (size > 256)) {\n      throw new Error('Invalid uint<N> width: ' + size)\n    }\n\n    num = parseNumber(arg)\n    if (num.bitLength() > size) {\n      throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())\n    }\n\n    if (num < 0) {\n      throw new Error('Supplied uint is negative')\n    }\n\n    return num.toArrayLike(Buffer, 'be', 32)\n  } else if (type.startsWith('int')) {\n    size = parseTypeN(type)\n    if ((size % 8) || (size < 8) || (size > 256)) {\n      throw new Error('Invalid int<N> width: ' + size)\n    }\n\n    num = parseNumber(arg)\n    if (num.bitLength() > size) {\n      throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())\n    }\n\n    return num.toTwos(256).toArrayLike(Buffer, 'be', 32)\n  } else if (type.startsWith('ufixed')) {\n    size = parseTypeNxM(type)\n\n    num = parseNumber(arg)\n\n    if (num < 0) {\n      throw new Error('Supplied ufixed is negative')\n    }\n\n    return encodeSingle('uint256', num.mul(new BN(2).pow(new BN(size[1]))))\n  } else if (type.startsWith('fixed')) {\n    size = parseTypeNxM(type)\n\n    return encodeSingle('int256', parseNumber(arg).mul(new BN(2).pow(new BN(size[1]))))\n  }\n\n  throw new Error('Unsupported or invalid type: ' + type)\n}\n\n// Is a type dynamic?\nfunction isDynamic (type) {\n  // FIXME: handle all types? I don't think anything is missing now\n  return (type === 'string') || (type === 'bytes') || (parseTypeArray(type) === 'dynamic')\n}\n\n// Is a type an array?\nfunction isArray (type) {\n  return type.lastIndexOf(']') === type.length - 1\n}\n\n// Encode a method/event with arguments\n// @types an array of string type names\n// @args  an array of the appropriate values\nfunction rawEncode (types, values) {\n  var output = []\n  var data = []\n\n  var headLength = 32 * types.length\n\n  for (var i in types) {\n    var type = elementaryName(types[i])\n    var value = values[i]\n    var cur = encodeSingle(type, value)\n\n    // Use the head/tail method for storing dynamic data\n    if (isDynamic(type)) {\n      output.push(encodeSingle('uint256', headLength))\n      data.push(cur)\n      headLength += cur.length\n    } else {\n      output.push(cur)\n    }\n  }\n\n  return Buffer.concat(output.concat(data))\n}\n\nfunction solidityPack (types, values) {\n  if (types.length !== values.length) {\n    throw new Error('Number of types are not matching the values')\n  }\n\n  var size, num\n  var ret = []\n\n  for (var i = 0; i < types.length; i++) {\n    var type = elementaryName(types[i])\n    var value = values[i]\n\n    if (type === 'bytes') {\n      ret.push(value)\n    } else if (type === 'string') {\n      ret.push(new Buffer(value, 'utf8'))\n    } else if (type === 'bool') {\n      ret.push(new Buffer(value ? '01' : '00', 'hex'))\n    } else if (type === 'address') {\n      ret.push(util.setLength(value, 20))\n    } else if (type.startsWith('bytes')) {\n      size = parseTypeN(type)\n      if (size < 1 || size > 32) {\n        throw new Error('Invalid bytes<N> width: ' + size)\n      }\n\n      ret.push(util.setLengthRight(value, size))\n    } else if (type.startsWith('uint')) {\n      size = parseTypeN(type)\n      if ((size % 8) || (size < 8) || (size > 256)) {\n        throw new Error('Invalid uint<N> width: ' + size)\n      }\n\n      num = parseNumber(value)\n      if (num.bitLength() > size) {\n        throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength())\n      }\n\n      ret.push(num.toArrayLike(Buffer, 'be', size / 8))\n    } else if (type.startsWith('int')) {\n      size = parseTypeN(type)\n      if ((size % 8) || (size < 8) || (size > 256)) {\n        throw new Error('Invalid int<N> width: ' + size)\n      }\n\n      num = parseNumber(value)\n      if (num.bitLength() > size) {\n        throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength())\n      }\n\n      ret.push(num.toTwos(size).toArrayLike(Buffer, 'be', size / 8))\n    } else {\n      // FIXME: support all other types\n      throw new Error('Unsupported or invalid type: ' + type)\n    }\n  }\n\n  return Buffer.concat(ret)\n}\n\nfunction soliditySHA3 (types, values) {\n  return util.keccak(solidityPack(types, values))\n}\n\nmodule.exports = {\n  rawEncode,\n  solidityPack,\n  soliditySHA3\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","'use strict'\n\n/**\n * A CBOR tagged item, where the tag does not have semantics specified at the\n * moment, or those semantics threw an error during parsing. Typically this will\n * be an extension point you're not yet expecting.\n */\nclass Tagged {\n  /**\n   * Creates an instance of Tagged.\n   *\n   * @param {Number} tag - the number of the tag\n   * @param {any} value - the value inside the tag\n   * @param {Error} err - the error that was thrown parsing the tag, or null\n   */\n  constructor (tag, value, err) {\n    this.tag = tag\n    this.value = value\n    this.err = err\n    if (typeof this.tag !== 'number') {\n      throw new Error('Invalid tag type (' + (typeof this.tag) + ')')\n    }\n    if ((this.tag < 0) || ((this.tag | 0) !== this.tag)) {\n      throw new Error('Tag must be a positive integer: ' + this.tag)\n    }\n  }\n\n  /**\n   * Convert to a String\n   *\n   * @returns {String} string of the form '1(2)'\n   */\n  toString () {\n    return `${this.tag}(${JSON.stringify(this.value)})`\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    gen._pushTag(this.tag)\n    return gen.pushAny(this.value)\n  }\n\n  /**\n   * If we have a converter for this type, do the conversion.  Some converters\n   * are built-in.  Additional ones can be passed in.  If you want to remove\n   * a built-in converter, pass a converter in whose value is 'null' instead\n   * of a function.\n   *\n   * @param {Object} converters - keys in the object are a tag number, the value\n   *   is a function that takes the decoded CBOR and returns a JavaScript value\n   *   of the appropriate type.  Throw an exception in the function on errors.\n   * @returns {any} - the converted item\n   */\n  convert (converters) {\n    var er, f\n    f = converters != null ? converters[this.tag] : undefined\n    if (typeof f !== 'function') {\n      f = Tagged['_tag' + this.tag]\n      if (typeof f !== 'function') {\n        return this\n      }\n    }\n    try {\n      return f.call(Tagged, this.value)\n    } catch (error) {\n      er = error\n      this.err = er\n      return this\n    }\n  }\n}\n\nmodule.exports = Tagged\n","'use strict'\n\nconst { Buffer } = require('buffer')\nconst Decoder = require('./decoder')\nconst utils = require('./utils')\n\n/**\n * Output the diagnostic format from a stream of CBOR bytes.\n *\n */\nclass Diagnose extends Decoder {\n  createTag (tagNumber, value) {\n    return `${tagNumber}(${value})`\n  }\n\n  createInt (val) {\n    return super.createInt(val).toString()\n  }\n\n  createInt32 (f, g) {\n    return super.createInt32(f, g).toString()\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return super.createInt64(f1, f2, g1, g2).toString()\n  }\n\n  createInt32Neg (f, g) {\n    return super.createInt32Neg(f, g).toString()\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    return super.createInt64Neg(f1, f2, g1, g2).toString()\n  }\n\n  createTrue () {\n    return 'true'\n  }\n\n  createFalse () {\n    return 'false'\n  }\n\n  createFloat (val) {\n    const fl = super.createFloat(val)\n    if (utils.isNegativeZero(val)) {\n      return '-0_1'\n    }\n\n    return `${fl}_1`\n  }\n\n  createFloatSingle (a, b, c, d) {\n    const fl = super.createFloatSingle(a, b, c, d)\n    return `${fl}_2`\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    const fl = super.createFloatDouble(a, b, c, d, e, f, g, h)\n    return `${fl}_3`\n  }\n\n  createByteString (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n    return `h'${val}`\n  }\n\n  createByteStringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createByteStringFromHeap(start, end)\n    )).toString('hex')\n\n    return `h'${val}'`\n  }\n\n  createInfinity () {\n    return 'Infinity_1'\n  }\n\n  createInfinityNeg () {\n    return '-Infinity_1'\n  }\n\n  createNaN () {\n    return 'NaN_1'\n  }\n\n  createNaNNeg () {\n    return '-NaN_1'\n  }\n\n  createNull () {\n    return 'null'\n  }\n\n  createUndefined () {\n    return 'undefined'\n  }\n\n  createSimpleUnassigned (val) {\n    return `simple(${val})`\n  }\n\n  createArray (arr, len) {\n    const val = super.createArray(arr, len)\n\n    if (len === -1) {\n      // indefinite\n      return `[_ ${val.join(', ')}]`\n    }\n\n    return `[${val.join(', ')}]`\n  }\n\n  createMap (map, len) {\n    const val = super.createMap(map)\n    const list = Array.from(val.keys())\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${list}}`\n    }\n\n    return `{${list}}`\n  }\n\n  createObject (obj, len) {\n    const val = super.createObject(obj)\n    const map = Object.keys(val)\n      .reduce(collectObject(val), '')\n\n    if (len === -1) {\n      return `{_ ${map}}`\n    }\n\n    return `{${map}}`\n  }\n\n  createUtf8String (raw, len) {\n    const val = raw.join(', ')\n\n    if (len === -1) {\n      return `(_ ${val})`\n    }\n\n    return `\"${val}\"`\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    const val = (Buffer.from(\n      super.createUtf8StringFromHeap(start, end)\n    )).toString('utf8')\n\n    return `\"${val}\"`\n  }\n\n  static diagnose (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Diagnose()\n    return dec.decodeFirst(input)\n  }\n}\n\nmodule.exports = Diagnose\n\nfunction collectObject (val) {\n  return (acc, key) => {\n    if (acc) {\n      return `${acc}, ${key}: ${val[key]}`\n    }\n    return `${key}: ${val[key]}`\n  }\n}\n","'use strict'\n\nconst constants = require('./constants')\nconst MT = constants.MT\nconst SIMPLE = constants.SIMPLE\nconst SYMS = constants.SYMS\n\n/**\n * A CBOR Simple Value that does not map onto a known constant.\n */\nclass Simple {\n  /**\n   * Creates an instance of Simple.\n   *\n   * @param {integer} value - the simple value's integer value\n   */\n  constructor (value) {\n    if (typeof value !== 'number') {\n      throw new Error('Invalid Simple type: ' + (typeof value))\n    }\n    if ((value < 0) || (value > 255) || ((value | 0) !== value)) {\n      throw new Error('value must be a small positive integer: ' + value)\n    }\n    this.value = value\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  toString () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Debug string for simple value\n   *\n   * @returns {string} simple(value)\n   */\n  inspect () {\n    return 'simple(' + this.value + ')'\n  }\n\n  /**\n   * Push the simple value onto the CBOR stream\n   *\n   * @param {cbor.Encoder} gen The generator to push onto\n   * @returns {number}\n   */\n  encodeCBOR (gen) {\n    return gen._pushInt(this.value, MT.SIMPLE_FLOAT)\n  }\n\n  /**\n   * Is the given object a Simple?\n   *\n   * @param {any} obj - object to test\n   * @returns {bool} - is it Simple?\n   */\n  static isSimple (obj) {\n    return obj instanceof Simple\n  }\n\n  /**\n   * Decode from the CBOR additional information into a JavaScript value.\n   * If the CBOR item has no parent, return a \"safe\" symbol instead of\n   * `null` or `undefined`, so that the value can be passed through a\n   * stream in object mode.\n   *\n   * @param {Number} val - the CBOR additional info to convert\n   * @param {bool} hasParent - Does the CBOR item have a parent?\n   * @returns {(null|undefined|Boolean|Symbol)} - the decoded value\n   */\n  static decode (val, hasParent) {\n    if (hasParent == null) {\n      hasParent = true\n    }\n    switch (val) {\n      case SIMPLE.FALSE:\n        return false\n      case SIMPLE.TRUE:\n        return true\n      case SIMPLE.NULL:\n        if (hasParent) {\n          return null\n        } else {\n          return SYMS.NULL\n        }\n      case SIMPLE.UNDEFINED:\n        if (hasParent) {\n          return undefined\n        } else {\n          return SYMS.UNDEFINED\n        }\n      case -1:\n        if (!hasParent) {\n          throw new Error('Invalid BREAK')\n        }\n        return SYMS.BREAK\n      default:\n        return new Simple(val)\n    }\n  }\n}\n\nmodule.exports = Simple\n","'use strict'\n\nconst { Buffer } = require('buffer')\nconst ieee754 = require('ieee754')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst parser = require('./decoder.asm')\nconst utils = require('./utils')\nconst c = require('./constants')\nconst Simple = require('./simple')\nconst Tagged = require('./tagged')\nconst { URL } = require('iso-url')\n\n/**\n * Transform binary cbor data into JavaScript objects.\n */\nclass Decoder {\n  /**\n   * @param {Object} [opts={}]\n   * @param {number} [opts.size=65536] - Size of the allocated heap.\n   */\n  constructor (opts) {\n    opts = opts || {}\n\n    if (!opts.size || opts.size < 0x10000) {\n      opts.size = 0x10000\n    } else {\n      // Ensure the size is a power of 2\n      opts.size = utils.nextPowerOf2(opts.size)\n    }\n\n    // Heap use to share the input with the parser\n    this._heap = new ArrayBuffer(opts.size)\n    this._heap8 = new Uint8Array(this._heap)\n    this._buffer = Buffer.from(this._heap)\n\n    this._reset()\n\n    // Known tags\n    this._knownTags = Object.assign({\n      0: (val) => new Date(val),\n      1: (val) => new Date(val * 1000),\n      2: (val) => utils.arrayBufferToBignumber(val),\n      3: (val) => c.NEG_ONE.minus(utils.arrayBufferToBignumber(val)),\n      4: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TEN.pow(v[0]).times(v[1])\n      },\n      5: (v) => {\n        // const v = new Uint8Array(val)\n        return c.TWO.pow(v[0]).times(v[1])\n      },\n      32: (val) => new URL(val),\n      35: (val) => new RegExp(val)\n    }, opts.tags)\n\n    // Initialize asm based parser\n    this.parser = parser(global, {\n      // eslint-disable-next-line no-console\n      log: console.log.bind(console),\n      pushInt: this.pushInt.bind(this),\n      pushInt32: this.pushInt32.bind(this),\n      pushInt32Neg: this.pushInt32Neg.bind(this),\n      pushInt64: this.pushInt64.bind(this),\n      pushInt64Neg: this.pushInt64Neg.bind(this),\n      pushFloat: this.pushFloat.bind(this),\n      pushFloatSingle: this.pushFloatSingle.bind(this),\n      pushFloatDouble: this.pushFloatDouble.bind(this),\n      pushTrue: this.pushTrue.bind(this),\n      pushFalse: this.pushFalse.bind(this),\n      pushUndefined: this.pushUndefined.bind(this),\n      pushNull: this.pushNull.bind(this),\n      pushInfinity: this.pushInfinity.bind(this),\n      pushInfinityNeg: this.pushInfinityNeg.bind(this),\n      pushNaN: this.pushNaN.bind(this),\n      pushNaNNeg: this.pushNaNNeg.bind(this),\n      pushArrayStart: this.pushArrayStart.bind(this),\n      pushArrayStartFixed: this.pushArrayStartFixed.bind(this),\n      pushArrayStartFixed32: this.pushArrayStartFixed32.bind(this),\n      pushArrayStartFixed64: this.pushArrayStartFixed64.bind(this),\n      pushObjectStart: this.pushObjectStart.bind(this),\n      pushObjectStartFixed: this.pushObjectStartFixed.bind(this),\n      pushObjectStartFixed32: this.pushObjectStartFixed32.bind(this),\n      pushObjectStartFixed64: this.pushObjectStartFixed64.bind(this),\n      pushByteString: this.pushByteString.bind(this),\n      pushByteStringStart: this.pushByteStringStart.bind(this),\n      pushUtf8String: this.pushUtf8String.bind(this),\n      pushUtf8StringStart: this.pushUtf8StringStart.bind(this),\n      pushSimpleUnassigned: this.pushSimpleUnassigned.bind(this),\n      pushTagUnassigned: this.pushTagUnassigned.bind(this),\n      pushTagStart: this.pushTagStart.bind(this),\n      pushTagStart4: this.pushTagStart4.bind(this),\n      pushTagStart8: this.pushTagStart8.bind(this),\n      pushBreak: this.pushBreak.bind(this)\n    }, this._heap)\n  }\n\n  get _depth () {\n    return this._parents.length\n  }\n\n  get _currentParent () {\n    return this._parents[this._depth - 1]\n  }\n\n  get _ref () {\n    return this._currentParent.ref\n  }\n\n  // Finish the current parent\n  _closeParent () {\n    var p = this._parents.pop()\n\n    if (p.length > 0) {\n      throw new Error(`Missing ${p.length} elements`)\n    }\n\n    switch (p.type) {\n      case c.PARENT.TAG:\n        this._push(\n          this.createTag(p.ref[0], p.ref[1])\n        )\n        break\n      case c.PARENT.BYTE_STRING:\n        this._push(this.createByteString(p.ref, p.length))\n        break\n      case c.PARENT.UTF8_STRING:\n        this._push(this.createUtf8String(p.ref, p.length))\n        break\n      case c.PARENT.MAP:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createMap(p.ref, p.length))\n        break\n      case c.PARENT.OBJECT:\n        if (p.values % 2 > 0) {\n          throw new Error('Odd number of elements in the map')\n        }\n        this._push(this.createObject(p.ref, p.length))\n        break\n      case c.PARENT.ARRAY:\n        this._push(this.createArray(p.ref, p.length))\n        break\n      default:\n        break\n    }\n\n    if (this._currentParent && this._currentParent.type === c.PARENT.TAG) {\n      this._dec()\n    }\n  }\n\n  // Reduce the expected length of the current parent by one\n  _dec () {\n    const p = this._currentParent\n    // The current parent does not know the epxected child length\n\n    if (p.length < 0) {\n      return\n    }\n\n    p.length--\n\n    // All children were seen, we can close the current parent\n    if (p.length === 0) {\n      this._closeParent()\n    }\n  }\n\n  // Push any value to the current parent\n  _push (val, hasChildren) {\n    const p = this._currentParent\n    p.values++\n\n    switch (p.type) {\n      case c.PARENT.ARRAY:\n      case c.PARENT.BYTE_STRING:\n      case c.PARENT.UTF8_STRING:\n        if (p.length > -1) {\n          this._ref[this._ref.length - p.length] = val\n        } else {\n          this._ref.push(val)\n        }\n        this._dec()\n        break\n      case c.PARENT.OBJECT:\n        if (p.tmpKey != null) {\n          this._ref[p.tmpKey] = val\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n\n          if (typeof p.tmpKey !== 'string') {\n            // too bad, convert to a Map\n            p.type = c.PARENT.MAP\n            p.ref = utils.buildMap(p.ref)\n          }\n        }\n        break\n      case c.PARENT.MAP:\n        if (p.tmpKey != null) {\n          this._ref.set(p.tmpKey, val)\n          p.tmpKey = null\n          this._dec()\n        } else {\n          p.tmpKey = val\n        }\n        break\n      case c.PARENT.TAG:\n        this._ref.push(val)\n        if (!hasChildren) {\n          this._dec()\n        }\n        break\n      default:\n        throw new Error('Unknown parent type')\n    }\n  }\n\n  // Create a new parent in the parents list\n  _createParent (obj, type, len) {\n    this._parents[this._depth] = {\n      type: type,\n      length: len,\n      ref: obj,\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  // Reset all state back to the beginning, also used for initiatlization\n  _reset () {\n    this._res = []\n    this._parents = [{\n      type: c.PARENT.ARRAY,\n      length: -1,\n      ref: this._res,\n      values: 0,\n      tmpKey: null\n    }]\n  }\n\n  // -- Interface to customize deoding behaviour\n  createTag (tagNumber, value) {\n    const typ = this._knownTags[tagNumber]\n\n    if (!typ) {\n      return new Tagged(tagNumber, value)\n    }\n\n    return typ(value)\n  }\n\n  createMap (obj, len) {\n    return obj\n  }\n\n  createObject (obj, len) {\n    return obj\n  }\n\n  createArray (arr, len) {\n    return arr\n  }\n\n  createByteString (raw, len) {\n    return Buffer.concat(raw)\n  }\n\n  createByteStringFromHeap (start, end) {\n    if (start === end) {\n      return Buffer.alloc(0)\n    }\n\n    return Buffer.from(this._heap.slice(start, end))\n  }\n\n  createInt (val) {\n    return val\n  }\n\n  createInt32 (f, g) {\n    return utils.buildInt32(f, g)\n  }\n\n  createInt64 (f1, f2, g1, g2) {\n    return utils.buildInt64(f1, f2, g1, g2)\n  }\n\n  createFloat (val) {\n    return val\n  }\n\n  createFloatSingle (a, b, c, d) {\n    return ieee754.read([a, b, c, d], 0, false, 23, 4)\n  }\n\n  createFloatDouble (a, b, c, d, e, f, g, h) {\n    return ieee754.read([a, b, c, d, e, f, g, h], 0, false, 52, 8)\n  }\n\n  createInt32Neg (f, g) {\n    return -1 - utils.buildInt32(f, g)\n  }\n\n  createInt64Neg (f1, f2, g1, g2) {\n    const f = utils.buildInt32(f1, f2)\n    const g = utils.buildInt32(g1, g2)\n\n    if (f > c.MAX_SAFE_HIGH) {\n      return c.NEG_ONE.minus(new Bignumber(f).times(c.SHIFT32).plus(g))\n    }\n\n    return -1 - ((f * c.SHIFT32) + g)\n  }\n\n  createTrue () {\n    return true\n  }\n\n  createFalse () {\n    return false\n  }\n\n  createNull () {\n    return null\n  }\n\n  createUndefined () {\n    return undefined\n  }\n\n  createInfinity () {\n    return Infinity\n  }\n\n  createInfinityNeg () {\n    return -Infinity\n  }\n\n  createNaN () {\n    return NaN\n  }\n\n  createNaNNeg () {\n    return -NaN\n  }\n\n  createUtf8String (raw, len) {\n    return raw.join('')\n  }\n\n  createUtf8StringFromHeap (start, end) {\n    if (start === end) {\n      return ''\n    }\n\n    return this._buffer.toString('utf8', start, end)\n  }\n\n  createSimpleUnassigned (val) {\n    return new Simple(val)\n  }\n\n  // -- Interface for decoder.asm.js\n\n  pushInt (val) {\n    this._push(this.createInt(val))\n  }\n\n  pushInt32 (f, g) {\n    this._push(this.createInt32(f, g))\n  }\n\n  pushInt64 (f1, f2, g1, g2) {\n    this._push(this.createInt64(f1, f2, g1, g2))\n  }\n\n  pushFloat (val) {\n    this._push(this.createFloat(val))\n  }\n\n  pushFloatSingle (a, b, c, d) {\n    this._push(this.createFloatSingle(a, b, c, d))\n  }\n\n  pushFloatDouble (a, b, c, d, e, f, g, h) {\n    this._push(this.createFloatDouble(a, b, c, d, e, f, g, h))\n  }\n\n  pushInt32Neg (f, g) {\n    this._push(this.createInt32Neg(f, g))\n  }\n\n  pushInt64Neg (f1, f2, g1, g2) {\n    this._push(this.createInt64Neg(f1, f2, g1, g2))\n  }\n\n  pushTrue () {\n    this._push(this.createTrue())\n  }\n\n  pushFalse () {\n    this._push(this.createFalse())\n  }\n\n  pushNull () {\n    this._push(this.createNull())\n  }\n\n  pushUndefined () {\n    this._push(this.createUndefined())\n  }\n\n  pushInfinity () {\n    this._push(this.createInfinity())\n  }\n\n  pushInfinityNeg () {\n    this._push(this.createInfinityNeg())\n  }\n\n  pushNaN () {\n    this._push(this.createNaN())\n  }\n\n  pushNaNNeg () {\n    this._push(this.createNaNNeg())\n  }\n\n  pushArrayStart () {\n    this._createParent([], c.PARENT.ARRAY, -1)\n  }\n\n  pushArrayStartFixed (len) {\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createArrayStartFixed(len)\n  }\n\n  pushArrayStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createArrayStartFixed(len)\n  }\n\n  pushObjectStart () {\n    this._createObjectStartFixed(-1)\n  }\n\n  pushObjectStartFixed (len) {\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed32 (len1, len2) {\n    const len = utils.buildInt32(len1, len2)\n    this._createObjectStartFixed(len)\n  }\n\n  pushObjectStartFixed64 (len1, len2, len3, len4) {\n    const len = utils.buildInt64(len1, len2, len3, len4)\n    this._createObjectStartFixed(len)\n  }\n\n  pushByteStringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.BYTE_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushByteString (start, end) {\n    this._push(this.createByteStringFromHeap(start, end))\n  }\n\n  pushUtf8StringStart () {\n    this._parents[this._depth] = {\n      type: c.PARENT.UTF8_STRING,\n      length: -1,\n      ref: [],\n      values: 0,\n      tmpKey: null\n    }\n  }\n\n  pushUtf8String (start, end) {\n    this._push(this.createUtf8StringFromHeap(start, end))\n  }\n\n  pushSimpleUnassigned (val) {\n    this._push(this.createSimpleUnassigned(val))\n  }\n\n  pushTagStart (tag) {\n    this._parents[this._depth] = {\n      type: c.PARENT.TAG,\n      length: 1,\n      ref: [tag]\n    }\n  }\n\n  pushTagStart4 (f, g) {\n    this.pushTagStart(utils.buildInt32(f, g))\n  }\n\n  pushTagStart8 (f1, f2, g1, g2) {\n    this.pushTagStart(utils.buildInt64(f1, f2, g1, g2))\n  }\n\n  pushTagUnassigned (tagNumber) {\n    this._push(this.createTag(tagNumber))\n  }\n\n  pushBreak () {\n    if (this._currentParent.length > -1) {\n      throw new Error('Unexpected break')\n    }\n\n    this._closeParent()\n  }\n\n  _createObjectStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createObject({}))\n      return\n    }\n\n    this._createParent({}, c.PARENT.OBJECT, len)\n  }\n\n  _createArrayStartFixed (len) {\n    if (len === 0) {\n      this._push(this.createArray([]))\n      return\n    }\n\n    this._createParent(new Array(len), c.PARENT.ARRAY, len)\n  }\n\n  _decode (input) {\n    if (input.byteLength === 0) {\n      throw new Error('Input too short')\n    }\n\n    this._reset()\n    this._heap8.set(input)\n    const code = this.parser.parse(input.byteLength)\n\n    if (this._depth > 1) {\n      while (this._currentParent.length === 0) {\n        this._closeParent()\n      }\n      if (this._depth > 1) {\n        throw new Error('Undeterminated nesting')\n      }\n    }\n\n    if (code > 0) {\n      throw new Error('Failed to parse')\n    }\n\n    if (this._res.length === 0) {\n      throw new Error('No valid result')\n    }\n  }\n\n  // -- Public Interface\n\n  decodeFirst (input) {\n    this._decode(input)\n\n    return this._res[0]\n  }\n\n  decodeAll (input) {\n    this._decode(input)\n\n    return this._res\n  }\n\n  /**\n   * Decode the first cbor object.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {*}\n   */\n  static decode (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeFirst(input)\n  }\n\n  /**\n   * Decode all cbor objects.\n   *\n   * @param {Buffer|string} input\n   * @param {string} [enc='hex'] - Encoding used if a string is passed.\n   * @returns {Array<*>}\n   */\n  static decodeAll (input, enc) {\n    if (typeof input === 'string') {\n      input = Buffer.from(input, enc || 'hex')\n    }\n\n    const dec = new Decoder({ size: input.length })\n    return dec.decodeAll(input)\n  }\n}\n\nDecoder.decodeFirst = Decoder.decode\n\nmodule.exports = Decoder\n","'use strict'\n\nconst { Buffer } = require('buffer')\nconst { URL } = require('iso-url')\nconst Bignumber = require('bignumber.js').BigNumber\n\nconst utils = require('./utils')\nconst constants = require('./constants')\nconst MT = constants.MT\nconst NUMBYTES = constants.NUMBYTES\nconst SHIFT32 = constants.SHIFT32\nconst SYMS = constants.SYMS\nconst TAG = constants.TAG\nconst HALF = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.TWO\nconst FLOAT = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.FOUR\nconst DOUBLE = (constants.MT.SIMPLE_FLOAT << 5) | constants.NUMBYTES.EIGHT\nconst TRUE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.TRUE\nconst FALSE = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.FALSE\nconst UNDEFINED = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.UNDEFINED\nconst NULL = (constants.MT.SIMPLE_FLOAT << 5) | constants.SIMPLE.NULL\n\nconst MAXINT_BN = new Bignumber('0x20000000000000')\nconst BUF_NAN = Buffer.from('f97e00', 'hex')\nconst BUF_INF_NEG = Buffer.from('f9fc00', 'hex')\nconst BUF_INF_POS = Buffer.from('f97c00', 'hex')\n\nfunction toType (obj) {\n  // [object Type]\n  // --------8---1\n  return ({}).toString.call(obj).slice(8, -1)\n}\n\n/**\n * Transform JavaScript values into CBOR bytes\n *\n */\nclass Encoder {\n  /**\n   * @param {Object} [options={}]\n   * @param {function(Buffer)} options.stream\n   */\n  constructor (options) {\n    options = options || {}\n\n    this.streaming = typeof options.stream === 'function'\n    this.onData = options.stream\n\n    this.semanticTypes = [\n      [URL, this._pushUrl],\n      [Bignumber, this._pushBigNumber]\n    ]\n\n    const addTypes = options.genTypes || []\n    const len = addTypes.length\n    for (let i = 0; i < len; i++) {\n      this.addSemanticType(\n        addTypes[i][0],\n        addTypes[i][1]\n      )\n    }\n\n    this._reset()\n  }\n\n  addSemanticType (type, fun) {\n    const len = this.semanticTypes.length\n    for (let i = 0; i < len; i++) {\n      const typ = this.semanticTypes[i][0]\n      if (typ === type) {\n        const old = this.semanticTypes[i][1]\n        this.semanticTypes[i][1] = fun\n        return old\n      }\n    }\n    this.semanticTypes.push([type, fun])\n    return null\n  }\n\n  push (val) {\n    if (!val) {\n      return true\n    }\n\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = 0\n    this.resultLength[this.offset] = val.length\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  pushWrite (val, method, len) {\n    this.result[this.offset] = val\n    this.resultMethod[this.offset] = method\n    this.resultLength[this.offset] = len\n    this.offset++\n\n    if (this.streaming) {\n      this.onData(this.finalize())\n    }\n\n    return true\n  }\n\n  _pushUInt8 (val) {\n    return this.pushWrite(val, 1, 1)\n  }\n\n  _pushUInt16BE (val) {\n    return this.pushWrite(val, 2, 2)\n  }\n\n  _pushUInt32BE (val) {\n    return this.pushWrite(val, 3, 4)\n  }\n\n  _pushDoubleBE (val) {\n    return this.pushWrite(val, 4, 8)\n  }\n\n  _pushNaN () {\n    return this.push(BUF_NAN)\n  }\n\n  _pushInfinity (obj) {\n    const half = (obj < 0) ? BUF_INF_NEG : BUF_INF_POS\n    return this.push(half)\n  }\n\n  _pushFloat (obj) {\n    const b2 = Buffer.allocUnsafe(2)\n\n    if (utils.writeHalf(b2, obj)) {\n      if (utils.parseHalf(b2) === obj) {\n        return this._pushUInt8(HALF) && this.push(b2)\n      }\n    }\n\n    const b4 = Buffer.allocUnsafe(4)\n    b4.writeFloatBE(obj, 0)\n    if (b4.readFloatBE(0) === obj) {\n      return this._pushUInt8(FLOAT) && this.push(b4)\n    }\n\n    return this._pushUInt8(DOUBLE) && this._pushDoubleBE(obj)\n  }\n\n  _pushInt (obj, mt, orig) {\n    const m = mt << 5\n    if (obj < 24) {\n      return this._pushUInt8(m | obj)\n    }\n\n    if (obj <= 0xff) {\n      return this._pushUInt8(m | NUMBYTES.ONE) && this._pushUInt8(obj)\n    }\n\n    if (obj <= 0xffff) {\n      return this._pushUInt8(m | NUMBYTES.TWO) && this._pushUInt16BE(obj)\n    }\n\n    if (obj <= 0xffffffff) {\n      return this._pushUInt8(m | NUMBYTES.FOUR) && this._pushUInt32BE(obj)\n    }\n\n    if (obj <= Number.MAX_SAFE_INTEGER) {\n      return this._pushUInt8(m | NUMBYTES.EIGHT) &&\n        this._pushUInt32BE(Math.floor(obj / SHIFT32)) &&\n        this._pushUInt32BE(obj % SHIFT32)\n    }\n\n    if (mt === MT.NEG_INT) {\n      return this._pushFloat(orig)\n    }\n\n    return this._pushFloat(obj)\n  }\n\n  _pushIntNum (obj) {\n    if (obj < 0) {\n      return this._pushInt(-obj - 1, MT.NEG_INT, obj)\n    } else {\n      return this._pushInt(obj, MT.POS_INT)\n    }\n  }\n\n  _pushNumber (obj) {\n    switch (false) {\n      case (obj === obj): // eslint-disable-line\n        return this._pushNaN(obj)\n      case isFinite(obj):\n        return this._pushInfinity(obj)\n      case ((obj % 1) !== 0):\n        return this._pushIntNum(obj)\n      default:\n        return this._pushFloat(obj)\n    }\n  }\n\n  _pushString (obj) {\n    const len = Buffer.byteLength(obj, 'utf8')\n    return this._pushInt(len, MT.UTF8_STRING) && this.pushWrite(obj, 5, len)\n  }\n\n  _pushBoolean (obj) {\n    return this._pushUInt8(obj ? TRUE : FALSE)\n  }\n\n  _pushUndefined (obj) {\n    return this._pushUInt8(UNDEFINED)\n  }\n\n  _pushArray (gen, obj) {\n    const len = obj.length\n    if (!gen._pushInt(len, MT.ARRAY)) {\n      return false\n    }\n    for (let j = 0; j < len; j++) {\n      if (!gen.pushAny(obj[j])) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushTag (tag) {\n    return this._pushInt(tag, MT.TAG)\n  }\n\n  _pushDate (gen, obj) {\n    // Round date, to get seconds since 1970-01-01 00:00:00 as defined in\n    // Sec. 2.4.1 and get a possibly more compact encoding. Note that it is\n    // still allowed to encode fractions of seconds which can be achieved by\n    // changing overwriting the encode function for Date objects.\n    return gen._pushTag(TAG.DATE_EPOCH) && gen.pushAny(Math.round(obj / 1000))\n  }\n\n  _pushBuffer (gen, obj) {\n    return gen._pushInt(obj.length, MT.BYTE_STRING) && gen.push(obj)\n  }\n\n  _pushNoFilter (gen, obj) {\n    return gen._pushBuffer(gen, obj.slice())\n  }\n\n  _pushRegexp (gen, obj) {\n    return gen._pushTag(TAG.REGEXP) && gen.pushAny(obj.source)\n  }\n\n  _pushSet (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.ARRAY)) {\n      return false\n    }\n    for (const x of obj) {\n      if (!gen.pushAny(x)) {\n        return false\n      }\n    }\n    return true\n  }\n\n  _pushUrl (gen, obj) {\n    return gen._pushTag(TAG.URI) && gen.pushAny(obj.format())\n  }\n\n  _pushBigint (obj) {\n    let tag = TAG.POS_BIGINT\n    if (obj.isNegative()) {\n      obj = obj.negated().minus(1)\n      tag = TAG.NEG_BIGINT\n    }\n    let str = obj.toString(16)\n    if (str.length % 2) {\n      str = '0' + str\n    }\n    const buf = Buffer.from(str, 'hex')\n    return this._pushTag(tag) && this._pushBuffer(this, buf)\n  }\n\n  _pushBigNumber (gen, obj) {\n    if (obj.isNaN()) {\n      return gen._pushNaN()\n    }\n    if (!obj.isFinite()) {\n      return gen._pushInfinity(obj.isNegative() ? -Infinity : Infinity)\n    }\n    if (obj.isInteger()) {\n      return gen._pushBigint(obj)\n    }\n    if (!(gen._pushTag(TAG.DECIMAL_FRAC) &&\n      gen._pushInt(2, MT.ARRAY))) {\n      return false\n    }\n\n    const dec = obj.decimalPlaces()\n    const slide = obj.multipliedBy(new Bignumber(10).pow(dec))\n    if (!gen._pushIntNum(-dec)) {\n      return false\n    }\n    if (slide.abs().isLessThan(MAXINT_BN)) {\n      return gen._pushIntNum(slide.toNumber())\n    } else {\n      return gen._pushBigint(slide)\n    }\n  }\n\n  _pushMap (gen, obj) {\n    if (!gen._pushInt(obj.size, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      obj.size,\n      Array.from(obj)\n    )\n  }\n\n  _pushObject (obj) {\n    if (!obj) {\n      return this._pushUInt8(NULL)\n    }\n\n    var len = this.semanticTypes.length\n    for (var i = 0; i < len; i++) {\n      if (obj instanceof this.semanticTypes[i][0]) {\n        return this.semanticTypes[i][1].call(obj, this, obj)\n      }\n    }\n\n    var f = obj.encodeCBOR\n    if (typeof f === 'function') {\n      return f.call(obj, this)\n    }\n\n    var keys = Object.keys(obj)\n    var keyLength = keys.length\n    if (!this._pushInt(keyLength, MT.MAP)) {\n      return false\n    }\n\n    return this._pushRawMap(\n      keyLength,\n      keys.map((k) => [k, obj[k]])\n    )\n  }\n\n  _pushRawMap (len, map) {\n    // Sort keys for canoncialization\n    // 1. encode key\n    // 2. shorter key comes before longer key\n    // 3. same length keys are sorted with lower\n    //    byte value before higher\n\n    map = map.map(function (a) {\n      a[0] = Encoder.encode(a[0])\n      return a\n    }).sort(utils.keySorter)\n\n    for (var j = 0; j < len; j++) {\n      if (!this.push(map[j][0])) {\n        return false\n      }\n\n      if (!this.pushAny(map[j][1])) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  /**\n   * Alias for `.pushAny`\n   *\n   * @param {*} obj\n   * @returns {boolean} true on success\n   */\n  write (obj) {\n    return this.pushAny(obj)\n  }\n\n  /**\n   * Push any supported type onto the encoded stream\n   *\n   * @param {any} obj\n   * @returns {boolean} true on success\n   */\n  pushAny (obj) {\n    var typ = toType(obj)\n\n    switch (typ) {\n      case 'Number':\n        return this._pushNumber(obj)\n      case 'String':\n        return this._pushString(obj)\n      case 'Boolean':\n        return this._pushBoolean(obj)\n      case 'Object':\n        return this._pushObject(obj)\n      case 'Array':\n        return this._pushArray(this, obj)\n      case 'Uint8Array':\n        return this._pushBuffer(this, Buffer.isBuffer(obj) ? obj : Buffer.from(obj))\n      case 'Null':\n        return this._pushUInt8(NULL)\n      case 'Undefined':\n        return this._pushUndefined(obj)\n      case 'Map':\n        return this._pushMap(this, obj)\n      case 'Set':\n        return this._pushSet(this, obj)\n      case 'URL':\n        return this._pushUrl(this, obj)\n      case 'BigNumber':\n        return this._pushBigNumber(this, obj)\n      case 'Date':\n        return this._pushDate(this, obj)\n      case 'RegExp':\n        return this._pushRegexp(this, obj)\n      case 'Symbol':\n        switch (obj) {\n          case SYMS.NULL:\n            return this._pushObject(null)\n          case SYMS.UNDEFINED:\n            return this._pushUndefined(undefined)\n          // TODO: Add pluggable support for other symbols\n          default:\n            throw new Error('Unknown symbol: ' + obj.toString())\n        }\n      default:\n        throw new Error('Unknown type: ' + typeof obj + ', ' + (obj ? obj.toString() : ''))\n    }\n  }\n\n  finalize () {\n    if (this.offset === 0) {\n      return null\n    }\n\n    var result = this.result\n    var resultLength = this.resultLength\n    var resultMethod = this.resultMethod\n    var offset = this.offset\n\n    // Determine the size of the buffer\n    var size = 0\n    var i = 0\n\n    for (; i < offset; i++) {\n      size += resultLength[i]\n    }\n\n    var res = Buffer.allocUnsafe(size)\n    var index = 0\n    var length = 0\n\n    // Write the content into the result buffer\n    for (i = 0; i < offset; i++) {\n      length = resultLength[i]\n\n      switch (resultMethod[i]) {\n        case 0:\n          result[i].copy(res, index)\n          break\n        case 1:\n          res.writeUInt8(result[i], index, true)\n          break\n        case 2:\n          res.writeUInt16BE(result[i], index, true)\n          break\n        case 3:\n          res.writeUInt32BE(result[i], index, true)\n          break\n        case 4:\n          res.writeDoubleBE(result[i], index, true)\n          break\n        case 5:\n          res.write(result[i], index, length, 'utf8')\n          break\n        default:\n          throw new Error('unkown method')\n      }\n\n      index += length\n    }\n\n    var tmp = res\n\n    this._reset()\n\n    return tmp\n  }\n\n  _reset () {\n    this.result = []\n    this.resultMethod = []\n    this.resultLength = []\n    this.offset = 0\n  }\n\n  /**\n   * Encode the given value\n   * @param {*} o\n   * @returns {Buffer}\n   */\n  static encode (o) {\n    const enc = new Encoder()\n    const ret = enc.pushAny(o)\n    if (!ret) {\n      throw new Error('Failed to encode input')\n    }\n\n    return enc.finalize()\n  }\n}\n\nmodule.exports = Encoder\n","// All of MetaMask's supported browsers include `Reflect.construct` support, so\n// we don't need this polyfill.\n\n// This Proxy preseves the two properties that were added by `@babel/runtime`.\n// I am not entire sure what these properties are for (maybe ES5/ES6\n// interoperability?) but they have been preserved just in case.\nconst reflectProxy =  new Proxy(\n  Reflect.construct,\n  {\n    get: function (target, property) {\n      if (property === 'default') {\n        return target;\n      } else if (property === '__esModule') {\n        return true;\n      }\n      return Reflect.get(...arguments);\n    }\n  }\n);\n\nmodule.exports = reflectProxy;\n","function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}\n\nmodule.exports = _isNativeFunction;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","var global = typeof self !== 'undefined' ? self : this;\nvar __self__ = (function () {\nfunction F() {\nthis.fetch = false;\nthis.DOMException = global.DOMException\n}\nF.prototype = global;\nreturn new F();\n})();\n(function(self) {\n\nvar irrelevant = (function (exports) {\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob:\n      'FileReader' in self &&\n      'Blob' in self &&\n      (function() {\n        try {\n          new Blob();\n          return true\n        } catch (e) {\n          return false\n        }\n      })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  };\n\n  function isDataView(obj) {\n    return obj && DataView.prototype.isPrototypeOf(obj)\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ];\n\n    var isArrayBufferView =\n      ArrayBuffer.isView ||\n      function(obj) {\n        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n      };\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name);\n    }\n    if (/[^a-z0-9\\-#$%&'*+.^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value);\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift();\n        return {done: value === undefined, value: value}\n      }\n    };\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      };\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {};\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value);\n      }, this);\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1]);\n      }, this);\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name]);\n      }, this);\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name);\n    value = normalizeValue(value);\n    var oldValue = this.map[name];\n    this.map[name] = oldValue ? oldValue + ', ' + value : value;\n  };\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)];\n  };\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name);\n    return this.has(name) ? this.map[name] : null\n  };\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  };\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value);\n  };\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this);\n      }\n    }\n  };\n\n  Headers.prototype.keys = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push(name);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.values = function() {\n    var items = [];\n    this.forEach(function(value) {\n      items.push(value);\n    });\n    return iteratorFor(items)\n  };\n\n  Headers.prototype.entries = function() {\n    var items = [];\n    this.forEach(function(value, name) {\n      items.push([name, value]);\n    });\n    return iteratorFor(items)\n  };\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true;\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result);\n      };\n      reader.onerror = function() {\n        reject(reader.error);\n      };\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsArrayBuffer(blob);\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader();\n    var promise = fileReaderReady(reader);\n    reader.readAsText(blob);\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf);\n    var chars = new Array(view.length);\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i]);\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength);\n      view.set(new Uint8Array(buf));\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false;\n\n    this._initBody = function(body) {\n      this._bodyInit = body;\n      if (!body) {\n        this._bodyText = '';\n      } else if (typeof body === 'string') {\n        this._bodyText = body;\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body;\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body;\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString();\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer);\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer]);\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body);\n      } else {\n        this._bodyText = body = Object.prototype.toString.call(body);\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8');\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type);\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n        }\n      }\n    };\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this);\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      };\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      };\n    }\n\n    this.text = function() {\n      var rejected = consumed(this);\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    };\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      };\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    };\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase();\n    return methods.indexOf(upcased) > -1 ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {};\n    var body = options.body;\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url;\n      this.credentials = input.credentials;\n      if (!options.headers) {\n        this.headers = new Headers(input.headers);\n      }\n      this.method = input.method;\n      this.mode = input.mode;\n      this.signal = input.signal;\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit;\n        input.bodyUsed = true;\n      }\n    } else {\n      this.url = String(input);\n    }\n\n    this.credentials = options.credentials || this.credentials || 'same-origin';\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers);\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET');\n    this.mode = options.mode || this.mode || null;\n    this.signal = options.signal || this.signal;\n    this.referrer = null;\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body);\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, {body: this._bodyInit})\n  };\n\n  function decode(body) {\n    var form = new FormData();\n    body\n      .trim()\n      .split('&')\n      .forEach(function(bytes) {\n        if (bytes) {\n          var split = bytes.split('=');\n          var name = split.shift().replace(/\\+/g, ' ');\n          var value = split.join('=').replace(/\\+/g, ' ');\n          form.append(decodeURIComponent(name), decodeURIComponent(value));\n        }\n      });\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers();\n    // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n    // https://tools.ietf.org/html/rfc7230#section-3.2\n    var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ');\n    preProcessedHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':');\n      var key = parts.shift().trim();\n      if (key) {\n        var value = parts.join(':').trim();\n        headers.append(key, value);\n      }\n    });\n    return headers\n  }\n\n  Body.call(Request.prototype);\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {};\n    }\n\n    this.type = 'default';\n    this.status = options.status === undefined ? 200 : options.status;\n    this.ok = this.status >= 200 && this.status < 300;\n    this.statusText = 'statusText' in options ? options.statusText : 'OK';\n    this.headers = new Headers(options.headers);\n    this.url = options.url || '';\n    this._initBody(bodyInit);\n  }\n\n  Body.call(Response.prototype);\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  };\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''});\n    response.type = 'error';\n    return response\n  };\n\n  var redirectStatuses = [301, 302, 303, 307, 308];\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  };\n\n  exports.DOMException = self.DOMException;\n  try {\n    new exports.DOMException();\n  } catch (err) {\n    exports.DOMException = function(message, name) {\n      this.message = message;\n      this.name = name;\n      var error = Error(message);\n      this.stack = error.stack;\n    };\n    exports.DOMException.prototype = Object.create(Error.prototype);\n    exports.DOMException.prototype.constructor = exports.DOMException;\n  }\n\n  function fetch(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init);\n\n      if (request.signal && request.signal.aborted) {\n        return reject(new exports.DOMException('Aborted', 'AbortError'))\n      }\n\n      var xhr = new XMLHttpRequest();\n\n      function abortXhr() {\n        xhr.abort();\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        };\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');\n        var body = 'response' in xhr ? xhr.response : xhr.responseText;\n        resolve(new Response(body, options));\n      };\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'));\n      };\n\n      xhr.onabort = function() {\n        reject(new exports.DOMException('Aborted', 'AbortError'));\n      };\n\n      xhr.open(request.method, request.url, true);\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true;\n      } else if (request.credentials === 'omit') {\n        xhr.withCredentials = false;\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob';\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value);\n      });\n\n      if (request.signal) {\n        request.signal.addEventListener('abort', abortXhr);\n\n        xhr.onreadystatechange = function() {\n          // DONE (success or failure)\n          if (xhr.readyState === 4) {\n            request.signal.removeEventListener('abort', abortXhr);\n          }\n        };\n      }\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);\n    })\n  }\n\n  fetch.polyfill = true;\n\n  if (!self.fetch) {\n    self.fetch = fetch;\n    self.Headers = Headers;\n    self.Request = Request;\n    self.Response = Response;\n  }\n\n  exports.Headers = Headers;\n  exports.Request = Request;\n  exports.Response = Response;\n  exports.fetch = fetch;\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n\n}({}));\n})(__self__);\n__self__.fetch.ponyfill = true;\n// Remove \"polyfill\" property added by whatwg-fetch\ndelete __self__.fetch.polyfill;\n// Choose between native implementation (global) or custom implementation (__self__)\n// var ctx = global.fetch ? global : __self__;\nvar ctx = __self__; // this line disable service worker support temporarily\nexports = ctx.fetch // To enable: import fetch from 'cross-fetch'\nexports.default = ctx.fetch // For TypeScript consumers without esModuleInterop.\nexports.fetch = ctx.fetch // To enable: import {fetch} from 'cross-fetch'\nexports.Headers = ctx.Headers\nexports.Request = ctx.Request\nexports.Response = ctx.Response\nmodule.exports = exports\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;\nvar BN = require(\"bn.js\");\n/**\n * The max integer that this VM can handle\n */\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);\n/**\n * 2^256\n */\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineProperties = void 0;\nvar assert = require('assert');\nvar ethjsUtil = require('ethjs-util');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\nexports.defineProperties = function (self, fields, data) {\n    self.raw = [];\n    self._fields = [];\n    // attach the `toJSON`\n    self.toJSON = function (label) {\n        if (label === void 0) { label = false; }\n        if (label) {\n            var obj_1 = {};\n            self._fields.forEach(function (field) {\n                obj_1[field] = \"0x\" + self[field].toString('hex');\n            });\n            return obj_1;\n        }\n        return bytes_1.baToJSON(self.raw);\n    };\n    self.serialize = function serialize() {\n        return rlp.encode(self.raw);\n    };\n    fields.forEach(function (field, i) {\n        self._fields.push(field.name);\n        function getter() {\n            return self.raw[i];\n        }\n        function setter(v) {\n            v = bytes_1.toBuffer(v);\n            if (v.toString('hex') === '00' && !field.allowZero) {\n                v = Buffer.allocUnsafe(0);\n            }\n            if (field.allowLess && field.length) {\n                v = bytes_1.stripZeros(v);\n                assert(field.length >= v.length, \"The field \" + field.name + \" must not have more \" + field.length + \" bytes\");\n            }\n            else if (!(field.allowZero && v.length === 0) && field.length) {\n                assert(field.length === v.length, \"The field \" + field.name + \" must have byte length of \" + field.length);\n            }\n            self.raw[i] = v;\n        }\n        Object.defineProperty(self, field.name, {\n            enumerable: true,\n            configurable: true,\n            get: getter,\n            set: setter,\n        });\n        if (field.default) {\n            self[field.name] = field.default;\n        }\n        // attach alias\n        if (field.alias) {\n            Object.defineProperty(self, field.alias, {\n                enumerable: false,\n                configurable: true,\n                set: setter,\n                get: getter,\n            });\n        }\n    });\n    // if the constuctor is passed data\n    if (data) {\n        if (typeof data === 'string') {\n            data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');\n        }\n        if (Buffer.isBuffer(data)) {\n            data = rlp.decode(data);\n        }\n        if (Array.isArray(data)) {\n            if (data.length > self._fields.length) {\n                throw new Error('wrong number of fields in data');\n            }\n            // make sure all the items are buffers\n            data.forEach(function (d, i) {\n                self[self._fields[i]] = bytes_1.toBuffer(d);\n            });\n        }\n        else if (typeof data === 'object') {\n            var keys_1 = Object.keys(data);\n            fields.forEach(function (field) {\n                if (keys_1.indexOf(field.name) !== -1)\n                    self[field.name] = data[field.name];\n                if (keys_1.indexOf(field.alias) !== -1)\n                    self[field.alias] = data[field.alias];\n            });\n        }\n        else {\n            throw new Error('invalid data');\n        }\n    }\n};\n//# sourceMappingURL=object.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1 = require('./secp256k1v3-adapter');\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\n/**\n * Returns the ECDSA signature of a message hash.\n */\nexports.ecsign = function (msgHash, privateKey, chainId) {\n    var sig = secp256k1.sign(msgHash, privateKey);\n    var recovery = sig.recovery;\n    var ret = {\n        r: sig.signature.slice(0, 32),\n        s: sig.signature.slice(32, 64),\n        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,\n    };\n    return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n    var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nexports.toRpcSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nexports.fromRpcSig = function (sig) {\n    var buf = bytes_1.toBuffer(sig);\n    // NOTE: with potential introduction of chainId this might need to be updated\n    if (buf.length !== 65) {\n        throw new Error('Invalid signature length');\n    }\n    var v = buf[64];\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: buf.slice(0, 32),\n        s: buf.slice(32, 64),\n    };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\n    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    var rBN = new BN(r);\n    var sBN = new BN(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexports.hashPersonalMessage = function (message) {\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n    return hash_1.keccak(Buffer.concat([prefix, message]));\n};\nfunction calculateSigRecovery(v, chainId) {\n    return chainId ? v - (2 * chainId + 35) : v - 27;\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === 0 || recovery === 1;\n}\n//# sourceMappingURL=signature.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;\nvar assert = require('assert');\nvar ethjsUtil = require('ethjs-util');\nvar secp256k1 = require('./secp256k1v3-adapter');\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\n/**\n * Returns a zero address.\n */\nexports.zeroAddress = function () {\n    var addressLength = 20;\n    var addr = bytes_1.zeros(addressLength);\n    return bytes_1.bufferToHex(addr);\n};\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nexports.isValidAddress = function (address) {\n    return /^0x[0-9a-fA-F]{40}$/.test(address);\n};\n/**\n * Checks if a given address is a zero address.\n */\nexports.isZeroAddress = function (address) {\n    var zeroAddr = exports.zeroAddress();\n    return zeroAddr === bytes_1.addHexPrefix(address);\n};\n/**\n * Returns a checksummed address.\n *\n * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details, consult EIP-1191.\n *\n * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly\n * used variation in Ethereum was without the chainId. This may change in the future.\n */\nexports.toChecksumAddress = function (address, eip1191ChainId) {\n    address = ethjsUtil.stripHexPrefix(address).toLowerCase();\n    var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';\n    var hash = hash_1.keccak(prefix + address).toString('hex');\n    var ret = '0x';\n    for (var i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nexports.isValidChecksumAddress = function (address, eip1191ChainId) {\n    return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nexports.generateAddress = function (from, nonce) {\n    from = bytes_1.toBuffer(from);\n    var nonceBN = new BN(nonce);\n    if (nonceBN.isZero()) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return hash_1.rlphash([from, null]).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nexports.generateAddress2 = function (from, salt, initCode) {\n    var fromBuf = bytes_1.toBuffer(from);\n    var saltBuf = bytes_1.toBuffer(salt);\n    var initCodeBuf = bytes_1.toBuffer(initCode);\n    assert(fromBuf.length === 20);\n    assert(saltBuf.length === 32);\n    var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));\n    return address.slice(-20);\n};\n/**\n * Returns true if the supplied address belongs to a precompiled account (Byzantium).\n */\nexports.isPrecompiled = function (address) {\n    var a = bytes_1.unpad(address);\n    return a.length === 1 && a[0] >= 1 && a[0] <= 8;\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nexports.isValidPrivate = function (privateKey) {\n    return secp256k1.privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n    }\n    if (!sanitize) {\n        return false;\n    }\n    return secp256k1.publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.pubToAddress = function (pubKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    pubKey = bytes_1.toBuffer(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);\n    }\n    assert(pubKey.length === 64);\n    // Only take the lower 160bits of the hash\n    return hash_1.keccak(pubKey).slice(-20);\n};\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToAddress = function (privateKey) {\n    return exports.publicToAddress(exports.privateToPublic(privateKey));\n};\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToPublic = function (privateKey) {\n    privateKey = bytes_1.toBuffer(privateKey);\n    // skip the type flag and use the X, Y points\n    return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n};\n/**\n * Converts a public key to the Ethereum format.\n */\nexports.importPublic = function (publicKey) {\n    publicKey = bytes_1.toBuffer(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);\n    }\n    return publicKey;\n};\n//# sourceMappingURL=account.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;\nvar ethjsUtil = require('ethjs-util');\nvar BN = require(\"bn.js\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexports.zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer|Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer|Array)\n */\nexports.setLengthLeft = function (msg, length, right) {\n    if (right === void 0) { right = false; }\n    var buf = exports.zeros(length);\n    msg = exports.toBuffer(msg);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\nexports.setLength = exports.setLengthLeft;\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer|Array)\n * @param length the number of bytes the output should be\n * @return (Buffer|Array)\n */\nexports.setLengthRight = function (msg, length) {\n    return exports.setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer` or an `Array`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nexports.unpad = function (a) {\n    a = ethjsUtil.stripHexPrefix(a);\n    var first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\nexports.stripZeros = exports.unpad;\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param v the value\n */\nexports.toBuffer = function (v) {\n    if (!Buffer.isBuffer(v)) {\n        if (Array.isArray(v)) {\n            v = Buffer.from(v);\n        }\n        else if (typeof v === 'string') {\n            if (ethjsUtil.isHexString(v)) {\n                v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');\n            }\n            else {\n                throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n            }\n        }\n        else if (typeof v === 'number') {\n            v = ethjsUtil.intToBuffer(v);\n        }\n        else if (v === null || v === undefined) {\n            v = Buffer.allocUnsafe(0);\n        }\n        else if (BN.isBN(v)) {\n            v = v.toArrayLike(Buffer);\n        }\n        else if (v.toArray) {\n            // converts a BN to a Buffer\n            v = Buffer.from(v.toArray());\n        }\n        else {\n            throw new Error('invalid type');\n        }\n    }\n    return v;\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n    return new BN(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexports.bufferToHex = function (buf) {\n    buf = exports.toBuffer(buf);\n    return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexports.fromSigned = function (num) {\n    return new BN(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexports.toUnsigned = function (num) {\n    return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexports.addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexports.baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return \"0x\" + ba.toString('hex');\n    }\n    else if (ba instanceof Array) {\n        var array = [];\n        for (var i = 0; i < ba.length; i++) {\n            array.push(exports.baToJSON(ba[i]));\n        }\n        return array;\n    }\n};\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\nvar _a = require('ethereum-cryptography/keccak'), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;\nvar createHash = require('create-hash');\nvar ethjsUtil = require('ethjs-util');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Creates Keccak hash of the input\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\n * it's interpreted as hexadecimal, otherwise as utf8.\n * @param bits The Keccak width\n */\nexports.keccak = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\n        a = Buffer.from(a, 'utf8');\n    }\n    else {\n        a = bytes_1.toBuffer(a);\n    }\n    if (!bits)\n        bits = 256;\n    switch (bits) {\n        case 224: {\n            return keccak224(a);\n        }\n        case 256: {\n            return k256(a);\n        }\n        case 384: {\n            return keccak384(a);\n        }\n        case 512: {\n            return keccak512(a);\n        }\n        default: {\n            throw new Error(\"Invald algorithm: keccak\" + bits);\n        }\n    }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.keccak256 = function (a) {\n    return exports.keccak(a);\n};\n/**\n * Creates SHA256 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.sha256 = function (a) {\n    a = bytes_1.toBuffer(a);\n    return createHash('sha256')\n        .update(a)\n        .digest();\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n    a = bytes_1.toBuffer(a);\n    var hash = createHash('rmd160')\n        .update(a)\n        .digest();\n    if (padded === true) {\n        return bytes_1.setLength(hash, 32);\n    }\n    else {\n        return hash;\n    }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n    return exports.keccak(rlp.encode(a));\n};\n//# sourceMappingURL=hash.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;\nvar secp256k1 = require('ethereum-cryptography/secp256k1');\nvar secp256k1v3 = require('./secp256k1v3-lib/index');\nvar der = require('./secp256k1v3-lib/der');\n/**\n * Verify an ECDSA privateKey\n * @method privateKeyVerify\n * @param {Buffer} privateKey\n * @return {boolean}\n */\nexports.privateKeyVerify = function (privateKey) {\n    // secp256k1 v4 version throws when privateKey length is not 32\n    if (privateKey.length !== 32) {\n        return false;\n    }\n    return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));\n};\n/**\n * Export a privateKey in DER format\n * @method privateKeyExport\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {boolean}\n */\nexports.privateKeyExport = function (privateKey, compressed) {\n    // secp256k1 v4 version throws when privateKey length is not 32\n    if (privateKey.length !== 32) {\n        throw new RangeError('private key length is invalid');\n    }\n    var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);\n    return der.privateKeyExport(privateKey, publicKey, compressed);\n};\n/**\n * Import a privateKey in DER format\n * @method privateKeyImport\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nexports.privateKeyImport = function (privateKey) {\n    // privateKeyImport method is not part of secp256k1 v4 package\n    // this implementation is based on v3\n    privateKey = der.privateKeyImport(privateKey);\n    if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {\n        return privateKey;\n    }\n    throw new Error(\"couldn't import from DER format\");\n};\n/**\n * Negate a privateKey by subtracting it from the order of the curve's base point\n * @method privateKeyNegate\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nexports.privateKeyNegate = function (privateKey) {\n    return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));\n};\n/**\n * Compute the inverse of a privateKey (modulo the order of the curve's base point).\n * @method privateKeyModInverse\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nexports.privateKeyModInverse = function (privateKey) {\n    if (privateKey.length !== 32) {\n        throw new Error('private key length is invalid');\n    }\n    return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));\n};\n/**\n * Tweak a privateKey by adding tweak to it.\n * @method privateKeyTweakAdd\n * @param {Buffer} privateKey\n * @param {Buffer} tweak\n * @return {Buffer}\n */\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n    return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));\n};\n/**\n * Tweak a privateKey by multiplying it by a tweak.\n * @method privateKeyTweakMul\n * @param {Buffer} privateKey\n * @param {Buffer} tweak\n * @return {Buffer}\n */\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n    return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));\n};\n/**\n * Compute the public key for a privateKey.\n * @method publicKeyCreate\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.publicKeyCreate = function (privateKey, compressed) {\n    return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));\n};\n/**\n * Convert a publicKey to compressed or uncompressed form.\n * @method publicKeyConvert\n * @param {Buffer} publicKey\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.publicKeyConvert = function (publicKey, compressed) {\n    return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));\n};\n/**\n * Verify an ECDSA publicKey.\n * @method publicKeyVerify\n * @param {Buffer} publicKey\n * @return {boolean}\n */\nexports.publicKeyVerify = function (publicKey) {\n    // secp256k1 v4 version throws when publicKey length is not 33 or 65\n    if (publicKey.length !== 33 && publicKey.length !== 65) {\n        return false;\n    }\n    return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));\n};\n/**\n * Tweak a publicKey by adding tweak times the generator to it.\n * @method publicKeyTweakAdd\n * @param {Buffer} publicKey\n * @param {Buffer} tweak\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n    return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));\n};\n/**\n * Tweak a publicKey by multiplying it by a tweak value\n * @method publicKeyTweakMul\n * @param {Buffer} publicKey\n * @param {Buffer} tweak\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n    return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));\n};\n/**\n * Add a given publicKeys together.\n * @method publicKeyCombine\n * @param {Array<Buffer>} publicKeys\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.publicKeyCombine = function (publicKeys, compressed) {\n    var keys = [];\n    publicKeys.forEach(function (publicKey) {\n        keys.push(Uint8Array.from(publicKey));\n    });\n    return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));\n};\n/**\n * Convert a signature to a normalized lower-S form.\n * @method signatureNormalize\n * @param {Buffer} signature\n * @return {Buffer}\n */\nexports.signatureNormalize = function (signature) {\n    return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));\n};\n/**\n * Serialize an ECDSA signature in DER format.\n * @method signatureExport\n * @param {Buffer} signature\n * @return {Buffer}\n */\nexports.signatureExport = function (signature) {\n    return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));\n};\n/**\n * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).\n * @method signatureImport\n * @param {Buffer} signature\n * @return {Buffer}\n */\nexports.signatureImport = function (signature) {\n    return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));\n};\n/**\n * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).\n * @method signatureImportLax\n * @param {Buffer} signature\n * @return {Buffer}\n */\nexports.signatureImportLax = function (signature) {\n    // signatureImportLax method is not part of secp256k1 v4 package\n    // this implementation is based on v3\n    // ensure that signature is greater than 0\n    if (signature.length === 0) {\n        throw new RangeError('signature length is invalid');\n    }\n    var sigObj = der.signatureImportLax(signature);\n    if (sigObj === null) {\n        throw new Error(\"couldn't parse DER signature\");\n    }\n    return secp256k1v3.signatureImport(sigObj);\n};\n/**\n * Create an ECDSA signature. Always return low-S signature.\n * @method sign\n * @param {Buffer} message\n * @param {Buffer} privateKey\n * @param {Object} options\n * @return {Buffer}\n */\nexports.sign = function (message, privateKey, options) {\n    if (options === null) {\n        throw new TypeError('options should be an Object');\n    }\n    var signOptions = undefined;\n    if (options) {\n        signOptions = {};\n        if (options.data === null) {\n            // validate option.data length\n            throw new TypeError('options.data should be a Buffer');\n        }\n        if (options.data) {\n            if (options.data.length != 32) {\n                throw new RangeError('options.data length is invalid');\n            }\n            signOptions.data = new Uint8Array(options.data);\n        }\n        if (options.noncefn === null) {\n            throw new TypeError('options.noncefn should be a Function');\n        }\n        if (options.noncefn) {\n            // convert option.noncefn function signature\n            signOptions.noncefn = function (message, privateKey, algo, data, attempt) {\n                var bufferAlgo = algo != null ? Buffer.from(algo) : null;\n                var bufferData = data != null ? Buffer.from(data) : null;\n                var buffer = Buffer.from('');\n                if (options.noncefn) {\n                    buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);\n                }\n                return new Uint8Array(buffer);\n            };\n        }\n    }\n    var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);\n    return {\n        signature: Buffer.from(sig.signature),\n        recovery: sig.recid,\n    };\n};\n/**\n * Verify an ECDSA signature.\n * @method verify\n * @param {Buffer} message\n * @param {Buffer} signature\n * @param {Buffer} publicKey\n * @return {boolean}\n */\nexports.verify = function (message, signature, publicKey) {\n    return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);\n};\n/**\n * Recover an ECDSA public key from a signature.\n * @method recover\n * @param {Buffer} message\n * @param {Buffer} signature\n * @param {Number} recid\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.recover = function (message, signature, recid, compressed) {\n    return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));\n};\n/**\n * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.\n * @method ecdh\n * @param {Buffer} publicKey\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nexports.ecdh = function (publicKey, privateKey) {\n    // note: secp256k1 v3 doesn't allow optional parameter\n    return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));\n};\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n    // ecdhUnsafe method is not part of secp256k1 v4 package\n    // this implementation is based on v3\n    // ensure valid publicKey length\n    if (publicKey.length !== 33 && publicKey.length !== 65) {\n        throw new RangeError('public key length is invalid');\n    }\n    // ensure valid privateKey length\n    if (privateKey.length !== 32) {\n        throw new RangeError('private key length is invalid');\n    }\n    return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));\n};\n//# sourceMappingURL=secp256k1v3-adapter.js.map","var Transform = require('readable-stream').Transform\n  , inherits  = require('util').inherits\n  , xtend     = require('xtend')\n\nfunction DestroyableTransform(opts) {\n  Transform.call(this, opts)\n  this._destroyed = false\n}\n\ninherits(DestroyableTransform, Transform)\n\nDestroyableTransform.prototype.destroy = function(err) {\n  if (this._destroyed) return\n  this._destroyed = true\n  \n  var self = this\n  process.nextTick(function() {\n    if (err)\n      self.emit('error', err)\n    self.emit('close')\n  })\n}\n\n// a noop _transform function\nfunction noop (chunk, enc, callback) {\n  callback(null, chunk)\n}\n\n\n// create a new export function, used by both the main export and\n// the .ctor export, contains common logic for dealing with arguments\nfunction through2 (construct) {\n  return function (options, transform, flush) {\n    if (typeof options == 'function') {\n      flush     = transform\n      transform = options\n      options   = {}\n    }\n\n    if (typeof transform != 'function')\n      transform = noop\n\n    if (typeof flush != 'function')\n      flush = null\n\n    return construct(options, transform, flush)\n  }\n}\n\n\n// main export, just make me a transform stream!\nmodule.exports = through2(function (options, transform, flush) {\n  var t2 = new DestroyableTransform(options)\n\n  t2._transform = transform\n\n  if (flush)\n    t2._flush = flush\n\n  return t2\n})\n\n\n// make me a reusable prototype that I can `new`, or implicitly `new`\n// with a constructor call\nmodule.exports.ctor = through2(function (options, transform, flush) {\n  function Through2 (override) {\n    if (!(this instanceof Through2))\n      return new Through2(override)\n\n    this.options = xtend(options, override)\n\n    DestroyableTransform.call(this, this.options)\n  }\n\n  inherits(Through2, DestroyableTransform)\n\n  Through2.prototype._transform = transform\n\n  if (flush)\n    Through2.prototype._flush = flush\n\n  return Through2\n})\n\n\nmodule.exports.obj = through2(function (options, transform, flush) {\n  var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))\n\n  t2._transform = transform\n\n  if (flush)\n    t2._flush = flush\n\n  return t2\n})\n","// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;","// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = require('../../../errors').codes,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\nrequire('inherits')(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = require('util');\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = require('./internal/streams/buffer_list');\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\nrequire('inherits')(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;","// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = require('../../../errors').codes,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\nrequire('inherits')(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = require('util');\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = require('./internal/streams/buffer_list');\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\nrequire('inherits')(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","var alloc = Buffer.alloc\n\nvar ZEROS = '0000000000000000000'\nvar SEVENS = '7777777777777777777'\nvar ZERO_OFFSET = '0'.charCodeAt(0)\nvar USTAR_MAGIC = Buffer.from('ustar\\x00', 'binary')\nvar USTAR_VER = Buffer.from('00', 'binary')\nvar GNU_MAGIC = Buffer.from('ustar\\x20', 'binary')\nvar GNU_VER = Buffer.from('\\x20\\x00', 'binary')\nvar MASK = parseInt('7777', 8)\nvar MAGIC_OFFSET = 257\nvar VERSION_OFFSET = 263\n\nvar clamp = function (index, len, defaultValue) {\n  if (typeof index !== 'number') return defaultValue\n  index = ~~index // Coerce to integer.\n  if (index >= len) return len\n  if (index >= 0) return index\n  index += len\n  if (index >= 0) return index\n  return 0\n}\n\nvar toType = function (flag) {\n  switch (flag) {\n    case 0:\n      return 'file'\n    case 1:\n      return 'link'\n    case 2:\n      return 'symlink'\n    case 3:\n      return 'character-device'\n    case 4:\n      return 'block-device'\n    case 5:\n      return 'directory'\n    case 6:\n      return 'fifo'\n    case 7:\n      return 'contiguous-file'\n    case 72:\n      return 'pax-header'\n    case 55:\n      return 'pax-global-header'\n    case 27:\n      return 'gnu-long-link-path'\n    case 28:\n    case 30:\n      return 'gnu-long-path'\n  }\n\n  return null\n}\n\nvar toTypeflag = function (flag) {\n  switch (flag) {\n    case 'file':\n      return 0\n    case 'link':\n      return 1\n    case 'symlink':\n      return 2\n    case 'character-device':\n      return 3\n    case 'block-device':\n      return 4\n    case 'directory':\n      return 5\n    case 'fifo':\n      return 6\n    case 'contiguous-file':\n      return 7\n    case 'pax-header':\n      return 72\n  }\n\n  return 0\n}\n\nvar indexOf = function (block, num, offset, end) {\n  for (; offset < end; offset++) {\n    if (block[offset] === num) return offset\n  }\n  return end\n}\n\nvar cksum = function (block) {\n  var sum = 8 * 32\n  for (var i = 0; i < 148; i++) sum += block[i]\n  for (var j = 156; j < 512; j++) sum += block[j]\n  return sum\n}\n\nvar encodeOct = function (val, n) {\n  val = val.toString(8)\n  if (val.length > n) return SEVENS.slice(0, n) + ' '\n  else return ZEROS.slice(0, n - val.length) + val + ' '\n}\n\n/* Copied from the node-tar repo and modified to meet\n * tar-stream coding standard.\n *\n * Source: https://github.com/npm/node-tar/blob/51b6627a1f357d2eb433e7378e5f05e83b7aa6cd/lib/header.js#L349\n */\nfunction parse256 (buf) {\n  // first byte MUST be either 80 or FF\n  // 80 for positive, FF for 2's comp\n  var positive\n  if (buf[0] === 0x80) positive = true\n  else if (buf[0] === 0xFF) positive = false\n  else return null\n\n  // build up a base-256 tuple from the least sig to the highest\n  var tuple = []\n  for (var i = buf.length - 1; i > 0; i--) {\n    var byte = buf[i]\n    if (positive) tuple.push(byte)\n    else tuple.push(0xFF - byte)\n  }\n\n  var sum = 0\n  var l = tuple.length\n  for (i = 0; i < l; i++) {\n    sum += tuple[i] * Math.pow(256, i)\n  }\n\n  return positive ? sum : -1 * sum\n}\n\nvar decodeOct = function (val, offset, length) {\n  val = val.slice(offset, offset + length)\n  offset = 0\n\n  // If prefixed with 0x80 then parse as a base-256 integer\n  if (val[offset] & 0x80) {\n    return parse256(val)\n  } else {\n    // Older versions of tar can prefix with spaces\n    while (offset < val.length && val[offset] === 32) offset++\n    var end = clamp(indexOf(val, 32, offset, val.length), val.length, val.length)\n    while (offset < end && val[offset] === 0) offset++\n    if (end === offset) return 0\n    return parseInt(val.slice(offset, end).toString(), 8)\n  }\n}\n\nvar decodeStr = function (val, offset, length, encoding) {\n  return val.slice(offset, indexOf(val, 0, offset, offset + length)).toString(encoding)\n}\n\nvar addLength = function (str) {\n  var len = Buffer.byteLength(str)\n  var digits = Math.floor(Math.log(len) / Math.log(10)) + 1\n  if (len + digits >= Math.pow(10, digits)) digits++\n\n  return (len + digits) + str\n}\n\nexports.decodeLongPath = function (buf, encoding) {\n  return decodeStr(buf, 0, buf.length, encoding)\n}\n\nexports.encodePax = function (opts) { // TODO: encode more stuff in pax\n  var result = ''\n  if (opts.name) result += addLength(' path=' + opts.name + '\\n')\n  if (opts.linkname) result += addLength(' linkpath=' + opts.linkname + '\\n')\n  var pax = opts.pax\n  if (pax) {\n    for (var key in pax) {\n      result += addLength(' ' + key + '=' + pax[key] + '\\n')\n    }\n  }\n  return Buffer.from(result)\n}\n\nexports.decodePax = function (buf) {\n  var result = {}\n\n  while (buf.length) {\n    var i = 0\n    while (i < buf.length && buf[i] !== 32) i++\n    var len = parseInt(buf.slice(0, i).toString(), 10)\n    if (!len) return result\n\n    var b = buf.slice(i + 1, len - 1).toString()\n    var keyIndex = b.indexOf('=')\n    if (keyIndex === -1) return result\n    result[b.slice(0, keyIndex)] = b.slice(keyIndex + 1)\n\n    buf = buf.slice(len)\n  }\n\n  return result\n}\n\nexports.encode = function (opts) {\n  var buf = alloc(512)\n  var name = opts.name\n  var prefix = ''\n\n  if (opts.typeflag === 5 && name[name.length - 1] !== '/') name += '/'\n  if (Buffer.byteLength(name) !== name.length) return null // utf-8\n\n  while (Buffer.byteLength(name) > 100) {\n    var i = name.indexOf('/')\n    if (i === -1) return null\n    prefix += prefix ? '/' + name.slice(0, i) : name.slice(0, i)\n    name = name.slice(i + 1)\n  }\n\n  if (Buffer.byteLength(name) > 100 || Buffer.byteLength(prefix) > 155) return null\n  if (opts.linkname && Buffer.byteLength(opts.linkname) > 100) return null\n\n  buf.write(name)\n  buf.write(encodeOct(opts.mode & MASK, 6), 100)\n  buf.write(encodeOct(opts.uid, 6), 108)\n  buf.write(encodeOct(opts.gid, 6), 116)\n  buf.write(encodeOct(opts.size, 11), 124)\n  buf.write(encodeOct((opts.mtime.getTime() / 1000) | 0, 11), 136)\n\n  buf[156] = ZERO_OFFSET + toTypeflag(opts.type)\n\n  if (opts.linkname) buf.write(opts.linkname, 157)\n\n  USTAR_MAGIC.copy(buf, MAGIC_OFFSET)\n  USTAR_VER.copy(buf, VERSION_OFFSET)\n  if (opts.uname) buf.write(opts.uname, 265)\n  if (opts.gname) buf.write(opts.gname, 297)\n  buf.write(encodeOct(opts.devmajor || 0, 6), 329)\n  buf.write(encodeOct(opts.devminor || 0, 6), 337)\n\n  if (prefix) buf.write(prefix, 345)\n\n  buf.write(encodeOct(cksum(buf), 6), 148)\n\n  return buf\n}\n\nexports.decode = function (buf, filenameEncoding, allowUnknownFormat) {\n  var typeflag = buf[156] === 0 ? 0 : buf[156] - ZERO_OFFSET\n\n  var name = decodeStr(buf, 0, 100, filenameEncoding)\n  var mode = decodeOct(buf, 100, 8)\n  var uid = decodeOct(buf, 108, 8)\n  var gid = decodeOct(buf, 116, 8)\n  var size = decodeOct(buf, 124, 12)\n  var mtime = decodeOct(buf, 136, 12)\n  var type = toType(typeflag)\n  var linkname = buf[157] === 0 ? null : decodeStr(buf, 157, 100, filenameEncoding)\n  var uname = decodeStr(buf, 265, 32)\n  var gname = decodeStr(buf, 297, 32)\n  var devmajor = decodeOct(buf, 329, 8)\n  var devminor = decodeOct(buf, 337, 8)\n\n  var c = cksum(buf)\n\n  // checksum is still initial value if header was null.\n  if (c === 8 * 32) return null\n\n  // valid checksum\n  if (c !== decodeOct(buf, 148, 8)) throw new Error('Invalid tar header. Maybe the tar is corrupted or it needs to be gunzipped?')\n\n  if (USTAR_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0) {\n    // ustar (posix) format.\n    // prepend prefix, if present.\n    if (buf[345]) name = decodeStr(buf, 345, 155, filenameEncoding) + '/' + name\n  } else if (GNU_MAGIC.compare(buf, MAGIC_OFFSET, MAGIC_OFFSET + 6) === 0 &&\n             GNU_VER.compare(buf, VERSION_OFFSET, VERSION_OFFSET + 2) === 0) {\n    // 'gnu'/'oldgnu' format. Similar to ustar, but has support for incremental and\n    // multi-volume tarballs.\n  } else {\n    if (!allowUnknownFormat) {\n      throw new Error('Invalid tar header: unknown format.')\n    }\n  }\n\n  // to support old tar versions that use trailing / to indicate dirs\n  if (typeflag === 0 && name && name[name.length - 1] === '/') typeflag = 5\n\n  return {\n    name,\n    mode,\n    uid,\n    gid,\n    size,\n    mtime: new Date(1000 * mtime),\n    type,\n    linkname,\n    uname,\n    gname,\n    devmajor,\n    devminor\n  }\n}\n","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\nexports.finished = require('./lib/internal/streams/end-of-stream.js');\nexports.pipeline = require('./lib/internal/streams/pipeline.js');\n","'use strict'\n\nconst DuplexStream = require('readable-stream').Duplex\nconst inherits = require('inherits')\nconst BufferList = require('./BufferList')\n\nfunction BufferListStream (callback) {\n  if (!(this instanceof BufferListStream)) {\n    return new BufferListStream(callback)\n  }\n\n  if (typeof callback === 'function') {\n    this._callback = callback\n\n    const piper = function piper (err) {\n      if (this._callback) {\n        this._callback(err)\n        this._callback = null\n      }\n    }.bind(this)\n\n    this.on('pipe', function onPipe (src) {\n      src.on('error', piper)\n    })\n    this.on('unpipe', function onUnpipe (src) {\n      src.removeListener('error', piper)\n    })\n\n    callback = null\n  }\n\n  BufferList._init.call(this, callback)\n  DuplexStream.call(this)\n}\n\ninherits(BufferListStream, DuplexStream)\nObject.assign(BufferListStream.prototype, BufferList.prototype)\n\nBufferListStream.prototype._new = function _new (callback) {\n  return new BufferListStream(callback)\n}\n\nBufferListStream.prototype._write = function _write (buf, encoding, callback) {\n  this._appendBuffer(buf)\n\n  if (typeof callback === 'function') {\n    callback()\n  }\n}\n\nBufferListStream.prototype._read = function _read (size) {\n  if (!this.length) {\n    return this.push(null)\n  }\n\n  size = Math.min(size, this.length)\n  this.push(this.slice(0, size))\n  this.consume(size)\n}\n\nBufferListStream.prototype.end = function end (chunk) {\n  DuplexStream.prototype.end.call(this, chunk)\n\n  if (this._callback) {\n    this._callback(null, this.slice())\n    this._callback = null\n  }\n}\n\nBufferListStream.prototype._destroy = function _destroy (err, cb) {\n  this._bufs.length = 0\n  this.length = 0\n  cb(err)\n}\n\nBufferListStream.prototype._isBufferList = function _isBufferList (b) {\n  return b instanceof BufferListStream || b instanceof BufferList || BufferListStream.isBufferList(b)\n}\n\nBufferListStream.isBufferList = BufferList.isBufferList\n\nmodule.exports = BufferListStream\nmodule.exports.BufferListStream = BufferListStream\nmodule.exports.BufferList = BufferList\n","module.exports = require('constants')\n","var toString = Object.prototype.toString\n\nvar isModern = (\n  typeof Buffer.alloc === 'function' &&\n  typeof Buffer.allocUnsafe === 'function' &&\n  typeof Buffer.from === 'function'\n)\n\nfunction isArrayBuffer (input) {\n  return toString.call(input).slice(8, -1) === 'ArrayBuffer'\n}\n\nfunction fromArrayBuffer (obj, byteOffset, length) {\n  byteOffset >>>= 0\n\n  var maxLength = obj.byteLength - byteOffset\n\n  if (maxLength < 0) {\n    throw new RangeError(\"'offset' is out of bounds\")\n  }\n\n  if (length === undefined) {\n    length = maxLength\n  } else {\n    length >>>= 0\n\n    if (length > maxLength) {\n      throw new RangeError(\"'length' is out of bounds\")\n    }\n  }\n\n  return isModern\n    ? Buffer.from(obj.slice(byteOffset, byteOffset + length))\n    : new Buffer(new Uint8Array(obj.slice(byteOffset, byteOffset + length)))\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  return isModern\n    ? Buffer.from(string, encoding)\n    : new Buffer(string, encoding)\n}\n\nfunction bufferFrom (value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (isArrayBuffer(value)) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  return isModern\n    ? Buffer.from(value)\n    : new Buffer(value)\n}\n\nmodule.exports = bufferFrom\n","var Transform = require('readable-stream').Transform\n  , inherits  = require('util').inherits\n  , xtend     = require('xtend')\n\nfunction DestroyableTransform(opts) {\n  Transform.call(this, opts)\n  this._destroyed = false\n}\n\ninherits(DestroyableTransform, Transform)\n\nDestroyableTransform.prototype.destroy = function(err) {\n  if (this._destroyed) return\n  this._destroyed = true\n  \n  var self = this\n  process.nextTick(function() {\n    if (err)\n      self.emit('error', err)\n    self.emit('close')\n  })\n}\n\n// a noop _transform function\nfunction noop (chunk, enc, callback) {\n  callback(null, chunk)\n}\n\n\n// create a new export function, used by both the main export and\n// the .ctor export, contains common logic for dealing with arguments\nfunction through2 (construct) {\n  return function (options, transform, flush) {\n    if (typeof options == 'function') {\n      flush     = transform\n      transform = options\n      options   = {}\n    }\n\n    if (typeof transform != 'function')\n      transform = noop\n\n    if (typeof flush != 'function')\n      flush = null\n\n    return construct(options, transform, flush)\n  }\n}\n\n\n// main export, just make me a transform stream!\nmodule.exports = through2(function (options, transform, flush) {\n  var t2 = new DestroyableTransform(options)\n\n  t2._transform = transform\n\n  if (flush)\n    t2._flush = flush\n\n  return t2\n})\n\n\n// make me a reusable prototype that I can `new`, or implicitly `new`\n// with a constructor call\nmodule.exports.ctor = through2(function (options, transform, flush) {\n  function Through2 (override) {\n    if (!(this instanceof Through2))\n      return new Through2(override)\n\n    this.options = xtend(options, override)\n\n    DestroyableTransform.call(this, this.options)\n  }\n\n  inherits(Through2, DestroyableTransform)\n\n  Through2.prototype._transform = transform\n\n  if (flush)\n    Through2.prototype._flush = flush\n\n  return Through2\n})\n\n\nmodule.exports.obj = through2(function (options, transform, flush) {\n  var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))\n\n  t2._transform = transform\n\n  if (flush)\n    t2._flush = flush\n\n  return t2\n})\n","var stream = require('readable-stream')\nvar eos = require('end-of-stream')\nvar inherits = require('inherits')\nvar shift = require('stream-shift')\n\nvar SIGNAL_FLUSH = (Buffer.from && Buffer.from !== Uint8Array.from)\n  ? Buffer.from([0])\n  : new Buffer([0])\n\nvar onuncork = function(self, fn) {\n  if (self._corked) self.once('uncork', fn)\n  else fn()\n}\n\nvar autoDestroy = function (self, err) {\n  if (self._autoDestroy) self.destroy(err)\n}\n\nvar destroyer = function(self, end) {\n  return function(err) {\n    if (err) autoDestroy(self, err.message === 'premature close' ? null : err)\n    else if (end && !self._ended) self.end()\n  }\n}\n\nvar end = function(ws, fn) {\n  if (!ws) return fn()\n  if (ws._writableState && ws._writableState.finished) return fn()\n  if (ws._writableState) return ws.end(fn)\n  ws.end()\n  fn()\n}\n\nvar toStreams2 = function(rs) {\n  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)\n}\n\nvar Duplexify = function(writable, readable, opts) {\n  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)\n  stream.Duplex.call(this, opts)\n\n  this._writable = null\n  this._readable = null\n  this._readable2 = null\n\n  this._autoDestroy = !opts || opts.autoDestroy !== false\n  this._forwardDestroy = !opts || opts.destroy !== false\n  this._forwardEnd = !opts || opts.end !== false\n  this._corked = 1 // start corked\n  this._ondrain = null\n  this._drained = false\n  this._forwarding = false\n  this._unwrite = null\n  this._unread = null\n  this._ended = false\n\n  this.destroyed = false\n\n  if (writable) this.setWritable(writable)\n  if (readable) this.setReadable(readable)\n}\n\ninherits(Duplexify, stream.Duplex)\n\nDuplexify.obj = function(writable, readable, opts) {\n  if (!opts) opts = {}\n  opts.objectMode = true\n  opts.highWaterMark = 16\n  return new Duplexify(writable, readable, opts)\n}\n\nDuplexify.prototype.cork = function() {\n  if (++this._corked === 1) this.emit('cork')\n}\n\nDuplexify.prototype.uncork = function() {\n  if (this._corked && --this._corked === 0) this.emit('uncork')\n}\n\nDuplexify.prototype.setWritable = function(writable) {\n  if (this._unwrite) this._unwrite()\n\n  if (this.destroyed) {\n    if (writable && writable.destroy) writable.destroy()\n    return\n  }\n\n  if (writable === null || writable === false) {\n    this.end()\n    return\n  }\n\n  var self = this\n  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))\n\n  var ondrain = function() {\n    var ondrain = self._ondrain\n    self._ondrain = null\n    if (ondrain) ondrain()\n  }\n\n  var clear = function() {\n    self._writable.removeListener('drain', ondrain)\n    unend()\n  }\n\n  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks\n\n  this._writable = writable\n  this._writable.on('drain', ondrain)\n  this._unwrite = clear\n\n  this.uncork() // always uncork setWritable\n}\n\nDuplexify.prototype.setReadable = function(readable) {\n  if (this._unread) this._unread()\n\n  if (this.destroyed) {\n    if (readable && readable.destroy) readable.destroy()\n    return\n  }\n\n  if (readable === null || readable === false) {\n    this.push(null)\n    this.resume()\n    return\n  }\n\n  var self = this\n  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))\n\n  var onreadable = function() {\n    self._forward()\n  }\n\n  var onend = function() {\n    self.push(null)\n  }\n\n  var clear = function() {\n    self._readable2.removeListener('readable', onreadable)\n    self._readable2.removeListener('end', onend)\n    unend()\n  }\n\n  this._drained = true\n  this._readable = readable\n  this._readable2 = readable._readableState ? readable : toStreams2(readable)\n  this._readable2.on('readable', onreadable)\n  this._readable2.on('end', onend)\n  this._unread = clear\n\n  this._forward()\n}\n\nDuplexify.prototype._read = function() {\n  this._drained = true\n  this._forward()\n}\n\nDuplexify.prototype._forward = function() {\n  if (this._forwarding || !this._readable2 || !this._drained) return\n  this._forwarding = true\n\n  var data\n\n  while (this._drained && (data = shift(this._readable2)) !== null) {\n    if (this.destroyed) continue\n    this._drained = this.push(data)\n  }\n\n  this._forwarding = false\n}\n\nDuplexify.prototype.destroy = function(err) {\n  if (this.destroyed) return\n  this.destroyed = true\n\n  var self = this\n  process.nextTick(function() {\n    self._destroy(err)\n  })\n}\n\nDuplexify.prototype._destroy = function(err) {\n  if (err) {\n    var ondrain = this._ondrain\n    this._ondrain = null\n    if (ondrain) ondrain(err)\n    else this.emit('error', err)\n  }\n\n  if (this._forwardDestroy) {\n    if (this._readable && this._readable.destroy) this._readable.destroy()\n    if (this._writable && this._writable.destroy) this._writable.destroy()\n  }\n\n  this.emit('close')\n}\n\nDuplexify.prototype._write = function(data, enc, cb) {\n  if (this.destroyed) return cb()\n  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))\n  if (data === SIGNAL_FLUSH) return this._finish(cb)\n  if (!this._writable) return cb()\n\n  if (this._writable.write(data) === false) this._ondrain = cb\n  else cb()\n}\n\nDuplexify.prototype._finish = function(cb) {\n  var self = this\n  this.emit('preend')\n  onuncork(this, function() {\n    end(self._forwardEnd && self._writable, function() {\n      // haxx to not emit prefinish twice\n      if (self._writableState.prefinished === false) self._writableState.prefinished = true\n      self.emit('prefinish')\n      onuncork(self, cb)\n    })\n  })\n}\n\nDuplexify.prototype.end = function(data, enc, cb) {\n  if (typeof data === 'function') return this.end(null, null, data)\n  if (typeof enc === 'function') return this.end(data, null, enc)\n  this._ended = true\n  if (data) this.write(data)\n  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)\n  return stream.Writable.prototype.end.call(this, cb)\n}\n\nmodule.exports = Duplexify\n","var stream = require('readable-stream')\nvar eos = require('end-of-stream')\nvar inherits = require('inherits')\nvar shift = require('stream-shift')\n\nvar SIGNAL_FLUSH = (Buffer.from && Buffer.from !== Uint8Array.from)\n  ? Buffer.from([0])\n  : new Buffer([0])\n\nvar onuncork = function(self, fn) {\n  if (self._corked) self.once('uncork', fn)\n  else fn()\n}\n\nvar autoDestroy = function (self, err) {\n  if (self._autoDestroy) self.destroy(err)\n}\n\nvar destroyer = function(self, end) {\n  return function(err) {\n    if (err) autoDestroy(self, err.message === 'premature close' ? null : err)\n    else if (end && !self._ended) self.end()\n  }\n}\n\nvar end = function(ws, fn) {\n  if (!ws) return fn()\n  if (ws._writableState && ws._writableState.finished) return fn()\n  if (ws._writableState) return ws.end(fn)\n  ws.end()\n  fn()\n}\n\nvar toStreams2 = function(rs) {\n  return new (stream.Readable)({objectMode:true, highWaterMark:16}).wrap(rs)\n}\n\nvar Duplexify = function(writable, readable, opts) {\n  if (!(this instanceof Duplexify)) return new Duplexify(writable, readable, opts)\n  stream.Duplex.call(this, opts)\n\n  this._writable = null\n  this._readable = null\n  this._readable2 = null\n\n  this._autoDestroy = !opts || opts.autoDestroy !== false\n  this._forwardDestroy = !opts || opts.destroy !== false\n  this._forwardEnd = !opts || opts.end !== false\n  this._corked = 1 // start corked\n  this._ondrain = null\n  this._drained = false\n  this._forwarding = false\n  this._unwrite = null\n  this._unread = null\n  this._ended = false\n\n  this.destroyed = false\n\n  if (writable) this.setWritable(writable)\n  if (readable) this.setReadable(readable)\n}\n\ninherits(Duplexify, stream.Duplex)\n\nDuplexify.obj = function(writable, readable, opts) {\n  if (!opts) opts = {}\n  opts.objectMode = true\n  opts.highWaterMark = 16\n  return new Duplexify(writable, readable, opts)\n}\n\nDuplexify.prototype.cork = function() {\n  if (++this._corked === 1) this.emit('cork')\n}\n\nDuplexify.prototype.uncork = function() {\n  if (this._corked && --this._corked === 0) this.emit('uncork')\n}\n\nDuplexify.prototype.setWritable = function(writable) {\n  if (this._unwrite) this._unwrite()\n\n  if (this.destroyed) {\n    if (writable && writable.destroy) writable.destroy()\n    return\n  }\n\n  if (writable === null || writable === false) {\n    this.end()\n    return\n  }\n\n  var self = this\n  var unend = eos(writable, {writable:true, readable:false}, destroyer(this, this._forwardEnd))\n\n  var ondrain = function() {\n    var ondrain = self._ondrain\n    self._ondrain = null\n    if (ondrain) ondrain()\n  }\n\n  var clear = function() {\n    self._writable.removeListener('drain', ondrain)\n    unend()\n  }\n\n  if (this._unwrite) process.nextTick(ondrain) // force a drain on stream reset to avoid livelocks\n\n  this._writable = writable\n  this._writable.on('drain', ondrain)\n  this._unwrite = clear\n\n  this.uncork() // always uncork setWritable\n}\n\nDuplexify.prototype.setReadable = function(readable) {\n  if (this._unread) this._unread()\n\n  if (this.destroyed) {\n    if (readable && readable.destroy) readable.destroy()\n    return\n  }\n\n  if (readable === null || readable === false) {\n    this.push(null)\n    this.resume()\n    return\n  }\n\n  var self = this\n  var unend = eos(readable, {writable:false, readable:true}, destroyer(this))\n\n  var onreadable = function() {\n    self._forward()\n  }\n\n  var onend = function() {\n    self.push(null)\n  }\n\n  var clear = function() {\n    self._readable2.removeListener('readable', onreadable)\n    self._readable2.removeListener('end', onend)\n    unend()\n  }\n\n  this._drained = true\n  this._readable = readable\n  this._readable2 = readable._readableState ? readable : toStreams2(readable)\n  this._readable2.on('readable', onreadable)\n  this._readable2.on('end', onend)\n  this._unread = clear\n\n  this._forward()\n}\n\nDuplexify.prototype._read = function() {\n  this._drained = true\n  this._forward()\n}\n\nDuplexify.prototype._forward = function() {\n  if (this._forwarding || !this._readable2 || !this._drained) return\n  this._forwarding = true\n\n  var data\n\n  while (this._drained && (data = shift(this._readable2)) !== null) {\n    if (this.destroyed) continue\n    this._drained = this.push(data)\n  }\n\n  this._forwarding = false\n}\n\nDuplexify.prototype.destroy = function(err) {\n  if (this.destroyed) return\n  this.destroyed = true\n\n  var self = this\n  process.nextTick(function() {\n    self._destroy(err)\n  })\n}\n\nDuplexify.prototype._destroy = function(err) {\n  if (err) {\n    var ondrain = this._ondrain\n    this._ondrain = null\n    if (ondrain) ondrain(err)\n    else this.emit('error', err)\n  }\n\n  if (this._forwardDestroy) {\n    if (this._readable && this._readable.destroy) this._readable.destroy()\n    if (this._writable && this._writable.destroy) this._writable.destroy()\n  }\n\n  this.emit('close')\n}\n\nDuplexify.prototype._write = function(data, enc, cb) {\n  if (this.destroyed) return cb()\n  if (this._corked) return onuncork(this, this._write.bind(this, data, enc, cb))\n  if (data === SIGNAL_FLUSH) return this._finish(cb)\n  if (!this._writable) return cb()\n\n  if (this._writable.write(data) === false) this._ondrain = cb\n  else cb()\n}\n\nDuplexify.prototype._finish = function(cb) {\n  var self = this\n  this.emit('preend')\n  onuncork(this, function() {\n    end(self._forwardEnd && self._writable, function() {\n      // haxx to not emit prefinish twice\n      if (self._writableState.prefinished === false) self._writableState.prefinished = true\n      self.emit('prefinish')\n      onuncork(self, cb)\n    })\n  })\n}\n\nDuplexify.prototype.end = function(data, enc, cb) {\n  if (typeof data === 'function') return this.end(null, null, data)\n  if (typeof enc === 'function') return this.end(data, null, enc)\n  this._ended = true\n  if (data) this.write(data)\n  if (!this._writableState.ending) this.write(SIGNAL_FLUSH)\n  return stream.Writable.prototype.end.call(this, cb)\n}\n\nmodule.exports = Duplexify\n","var once = require('once')\nvar eos = require('end-of-stream')\nvar fs = require('fs') // we only need fs to get the ReadStream and WriteStream prototypes\n\nvar noop = function () {}\n\nvar isFn = function (fn) {\n  return typeof fn === 'function'\n}\n\nvar isFS = function (stream) {\n  if (!fs) return false // browser\n  return (stream instanceof (fs.ReadStream || noop) || stream instanceof (fs.WriteStream || noop)) && isFn(stream.close)\n}\n\nvar isRequest = function (stream) {\n  return stream.setHeader && isFn(stream.abort)\n}\n\nvar destroyer = function (stream, reading, writing, callback) {\n  callback = once(callback)\n\n  var closed = false\n  stream.on('close', function () {\n    closed = true\n  })\n\n  eos(stream, {readable: reading, writable: writing}, function (err) {\n    if (err) return callback(err)\n    closed = true\n    callback()\n  })\n\n  var destroyed = false\n  return function (err) {\n    if (closed) return\n    if (destroyed) return\n    destroyed = true\n\n    if (isFS(stream)) return stream.close(noop) // use close for fs streams to avoid fd leaks\n    if (isRequest(stream)) return stream.abort() // request.destroy just do .end - .abort is what we want\n\n    if (isFn(stream.destroy)) return stream.destroy()\n\n    callback(err || new Error('stream was destroyed'))\n  }\n}\n\nvar call = function (fn) {\n  fn()\n}\n\nvar pipe = function (from, to) {\n  return from.pipe(to)\n}\n\nvar pump = function () {\n  var streams = Array.prototype.slice.call(arguments)\n  var callback = isFn(streams[streams.length - 1] || noop) && streams.pop() || noop\n\n  if (Array.isArray(streams[0])) streams = streams[0]\n  if (streams.length < 2) throw new Error('pump requires two streams per minimum')\n\n  var error\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1\n    var writing = i > 0\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err\n      if (err) destroys.forEach(call)\n      if (reading) return\n      destroys.forEach(call)\n      callback(error)\n    })\n  })\n\n  return streams.reduce(pipe)\n}\n\nmodule.exports = pump\n","var msg = require('pako/lib/zlib/messages');\nvar zstream = require('pako/lib/zlib/zstream');\nvar zlib_deflate = require('pako/lib/zlib/deflate.js');\nvar zlib_inflate = require('pako/lib/zlib/inflate.js');\nvar constants = require('pako/lib/zlib/constants');\n\nfor (var key in constants) {\n  exports[key] = constants[key];\n}\n\n// zlib modes\nexports.NONE = 0;\nexports.DEFLATE = 1;\nexports.INFLATE = 2;\nexports.GZIP = 3;\nexports.GUNZIP = 4;\nexports.DEFLATERAW = 5;\nexports.INFLATERAW = 6;\nexports.UNZIP = 7;\n\n/**\n * Emulate Node's zlib C++ layer for use by the JS layer in index.js\n */\nfunction Zlib(mode) {\n  if (mode < exports.DEFLATE || mode > exports.UNZIP)\n    throw new TypeError(\"Bad argument\");\n    \n  this.mode = mode;\n  this.init_done = false;\n  this.write_in_progress = false;\n  this.pending_close = false;\n  this.windowBits = 0;\n  this.level = 0;\n  this.memLevel = 0;\n  this.strategy = 0;\n  this.dictionary = null;\n}\n\nZlib.prototype.init = function(windowBits, level, memLevel, strategy, dictionary) {\n  this.windowBits = windowBits;\n  this.level = level;\n  this.memLevel = memLevel;\n  this.strategy = strategy;\n  // dictionary not supported.\n  \n  if (this.mode === exports.GZIP || this.mode === exports.GUNZIP)\n    this.windowBits += 16;\n    \n  if (this.mode === exports.UNZIP)\n    this.windowBits += 32;\n    \n  if (this.mode === exports.DEFLATERAW || this.mode === exports.INFLATERAW)\n    this.windowBits = -this.windowBits;\n    \n  this.strm = new zstream();\n  \n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.GZIP:\n    case exports.DEFLATERAW:\n      var status = zlib_deflate.deflateInit2(\n        this.strm,\n        this.level,\n        exports.Z_DEFLATED,\n        this.windowBits,\n        this.memLevel,\n        this.strategy\n      );\n      break;\n    case exports.INFLATE:\n    case exports.GUNZIP:\n    case exports.INFLATERAW:\n    case exports.UNZIP:\n      var status  = zlib_inflate.inflateInit2(\n        this.strm,\n        this.windowBits\n      );\n      break;\n    default:\n      throw new Error(\"Unknown mode \" + this.mode);\n  }\n  \n  if (status !== exports.Z_OK) {\n    this._error(status);\n    return;\n  }\n  \n  this.write_in_progress = false;\n  this.init_done = true;\n};\n\nZlib.prototype.params = function() {\n  throw new Error(\"deflateParams Not supported\");\n};\n\nZlib.prototype._writeCheck = function() {\n  if (!this.init_done)\n    throw new Error(\"write before init\");\n    \n  if (this.mode === exports.NONE)\n    throw new Error(\"already finalized\");\n    \n  if (this.write_in_progress)\n    throw new Error(\"write already in progress\");\n    \n  if (this.pending_close)\n    throw new Error(\"close is pending\");\n};\n\nZlib.prototype.write = function(flush, input, in_off, in_len, out, out_off, out_len) {    \n  this._writeCheck();\n  this.write_in_progress = true;\n  \n  var self = this;\n  process.nextTick(function() {\n    self.write_in_progress = false;\n    var res = self._write(flush, input, in_off, in_len, out, out_off, out_len);\n    self.callback(res[0], res[1]);\n    \n    if (self.pending_close)\n      self.close();\n  });\n  \n  return this;\n};\n\n// set method for Node buffers, used by pako\nfunction bufferSet(data, offset) {\n  for (var i = 0; i < data.length; i++) {\n    this[offset + i] = data[i];\n  }\n}\n\nZlib.prototype.writeSync = function(flush, input, in_off, in_len, out, out_off, out_len) {\n  this._writeCheck();\n  return this._write(flush, input, in_off, in_len, out, out_off, out_len);\n};\n\nZlib.prototype._write = function(flush, input, in_off, in_len, out, out_off, out_len) {\n  this.write_in_progress = true;\n  \n  if (flush !== exports.Z_NO_FLUSH &&\n      flush !== exports.Z_PARTIAL_FLUSH &&\n      flush !== exports.Z_SYNC_FLUSH &&\n      flush !== exports.Z_FULL_FLUSH &&\n      flush !== exports.Z_FINISH &&\n      flush !== exports.Z_BLOCK) {\n    throw new Error(\"Invalid flush value\");\n  }\n  \n  if (input == null) {\n    input = new Buffer(0);\n    in_len = 0;\n    in_off = 0;\n  }\n  \n  if (out._set)\n    out.set = out._set;\n  else\n    out.set = bufferSet;\n  \n  var strm = this.strm;\n  strm.avail_in = in_len;\n  strm.input = input;\n  strm.next_in = in_off;\n  strm.avail_out = out_len;\n  strm.output = out;\n  strm.next_out = out_off;\n  \n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.GZIP:\n    case exports.DEFLATERAW:\n      var status = zlib_deflate.deflate(strm, flush);\n      break;\n    case exports.UNZIP:\n    case exports.INFLATE:\n    case exports.GUNZIP:\n    case exports.INFLATERAW:\n      var status = zlib_inflate.inflate(strm, flush);\n      break;\n    default:\n      throw new Error(\"Unknown mode \" + this.mode);\n  }\n  \n  if (status !== exports.Z_STREAM_END && status !== exports.Z_OK) {\n    this._error(status);\n  }\n  \n  this.write_in_progress = false;\n  return [strm.avail_in, strm.avail_out];\n};\n\nZlib.prototype.close = function() {\n  if (this.write_in_progress) {\n    this.pending_close = true;\n    return;\n  }\n  \n  this.pending_close = false;\n  \n  if (this.mode === exports.DEFLATE || this.mode === exports.GZIP || this.mode === exports.DEFLATERAW) {\n    zlib_deflate.deflateEnd(this.strm);\n  } else {\n    zlib_inflate.inflateEnd(this.strm);\n  }\n  \n  this.mode = exports.NONE;\n};\n\nZlib.prototype.reset = function() {\n  switch (this.mode) {\n    case exports.DEFLATE:\n    case exports.DEFLATERAW:\n      var status = zlib_deflate.deflateReset(this.strm);\n      break;\n    case exports.INFLATE:\n    case exports.INFLATERAW:\n      var status = zlib_inflate.inflateReset(this.strm);\n      break;\n  }\n  \n  if (status !== exports.Z_OK) {\n    this._error(status);\n  }\n};\n\nZlib.prototype._error = function(status) {\n  this.onerror(msg[status] + ': ' + this.strm.msg, status);\n  \n  this.write_in_progress = false;\n  if (this.pending_close)\n    this.close();\n};\n\nexports.Zlib = Zlib;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Substream = void 0;\nconst readable_stream_1 = require(\"readable-stream\");\nclass Substream extends readable_stream_1.Duplex {\n    constructor({ parent, name }) {\n        super({ objectMode: true });\n        this._parent = parent;\n        this._name = name;\n    }\n    /**\n     * Explicitly sets read operations to a no-op.\n     */\n    _read() {\n        return undefined;\n    }\n    /**\n     * Called when data should be written to this writable stream.\n     *\n     * @param chunk - Arbitrary object to write\n     * @param encoding - Encoding to use when writing payload\n     * @param callback - Called when writing is complete or an error occurs\n     */\n    _write(chunk, _encoding, callback) {\n        this._parent.push({\n            name: this._name,\n            data: chunk,\n        });\n        callback();\n    }\n}\nexports.Substream = Substream;\n//# sourceMappingURL=Substream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEDICATED_WORKER_NAME = void 0;\nexports.DEDICATED_WORKER_NAME = 'dedicatedWorker';\n//# sourceMappingURL=enums.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BasePostMessageStream = void 0;\nconst readable_stream_1 = require(\"readable-stream\");\nfunction noop() {\n    return undefined;\n}\nconst SYN = 'SYN';\nconst ACK = 'ACK';\n/**\n * Abstract base class for postMessage streams.\n */\nclass BasePostMessageStream extends readable_stream_1.Duplex {\n    constructor() {\n        super({\n            objectMode: true,\n        });\n        // Initialization flags\n        this._init = false;\n        this._haveSyn = false;\n    }\n    /**\n     * Must be called at end of child constructor to initiate\n     * communication with other end.\n     */\n    _handshake() {\n        // Send synchronization message\n        this._write(SYN, null, noop);\n        this.cork();\n    }\n    _onData(data) {\n        if (this._init) {\n            // Forward message\n            try {\n                this.push(data);\n            }\n            catch (err) {\n                this.emit('error', err);\n            }\n        }\n        else if (data === SYN) {\n            // Listen for handshake\n            this._haveSyn = true;\n            this._write(ACK, null, noop);\n        }\n        else if (data === ACK) {\n            this._init = true;\n            if (!this._haveSyn) {\n                this._write(ACK, null, noop);\n            }\n            this.uncork();\n        }\n    }\n    _read() {\n        return undefined;\n    }\n    _write(data, _encoding, cb) {\n        this._postMessage(data);\n        cb();\n    }\n}\nexports.BasePostMessageStream = BasePostMessageStream;\n//# sourceMappingURL=BasePostMessageStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleInstallSnaps = exports.preprocessRequestedPermissions = void 0;\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst snap_controllers_1 = require(\"@metamask/snap-controllers\");\nconst utils_1 = require(\"../../utils\");\n// preprocess requested permissions to support 'wallet_snap' syntactic sugar\nfunction preprocessRequestedPermissions(requestedPermissions) {\n    if (!utils_1.isPlainObject(requestedPermissions)) {\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({ data: { requestedPermissions } });\n    }\n    // passthrough if 'wallet_snap' is not requested\n    if (!requestedPermissions.wallet_snap) {\n        return requestedPermissions;\n    }\n    // rewrite permissions request parameter by destructuring snaps into\n    // proper permissions prefixed with 'wallet_snap_'\n    return Object.keys(requestedPermissions).reduce((newRequestedPermissions, permName) => {\n        if (permName === 'wallet_snap') {\n            if (!utils_1.isPlainObject(requestedPermissions[permName])) {\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                    message: `Invalid params to 'wallet_requestPermissions'`,\n                    data: { requestedPermissions },\n                });\n            }\n            const requestedSnaps = requestedPermissions[permName];\n            // destructure 'wallet_snap' object\n            Object.keys(requestedSnaps).forEach((snapId) => {\n                const snapKey = snap_controllers_1.SNAP_PREFIX + snapId;\n                // disallow requesting a snap X under 'wallet_snaps' and\n                // directly as 'wallet_snap_X'\n                if (requestedPermissions[snapKey]) {\n                    throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                        message: `Snap '${snapId}' requested both as direct permission and under 'wallet_snap'. We recommend using 'wallet_snap' only.`,\n                        data: { requestedPermissions },\n                    });\n                }\n                newRequestedPermissions[snapKey] = requestedSnaps[snapId];\n            });\n        }\n        else {\n            // otherwise, leave things as we found them\n            newRequestedPermissions[permName] = requestedPermissions[permName];\n        }\n        return newRequestedPermissions;\n    }, {});\n}\nexports.preprocessRequestedPermissions = preprocessRequestedPermissions;\n/**\n * Typechecks the requested snaps and passes them to the permissions\n * controller for installation.\n */\nasync function handleInstallSnaps(requestedSnaps, installSnaps) {\n    if (!utils_1.isPlainObject(requestedSnaps)) {\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n            message: `Invalid snap installation params.`,\n            data: { requestedSnaps },\n        });\n    }\n    else if (Object.keys(requestedSnaps).length === 0) {\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n            message: `Must specify at least one snap to install.`,\n            data: { requestedSnaps },\n        });\n    }\n    // installSnaps is bound to the origin\n    return await installSnaps(requestedSnaps);\n}\nexports.handleInstallSnaps = handleInstallSnaps;\n//# sourceMappingURL=snapInstallation.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PackageBuffer = exports.BIP44PurposeNodeToken = exports.MAX_BIP_44_DEPTH = exports.MIN_BIP_44_DEPTH = exports.getBIP44AddressKeyDeriver = exports.deriveBIP44AddressKey = exports.BIP_44_COIN_TYPE_DEPTH = exports.BIP44CoinTypeNode = exports.BIP44Node = void 0;\nvar BIP44Node_1 = require(\"./BIP44Node\");\nObject.defineProperty(exports, \"BIP44Node\", { enumerable: true, get: function () { return BIP44Node_1.BIP44Node; } });\nvar BIP44CoinTypeNode_1 = require(\"./BIP44CoinTypeNode\");\nObject.defineProperty(exports, \"BIP44CoinTypeNode\", { enumerable: true, get: function () { return BIP44CoinTypeNode_1.BIP44CoinTypeNode; } });\nObject.defineProperty(exports, \"BIP_44_COIN_TYPE_DEPTH\", { enumerable: true, get: function () { return BIP44CoinTypeNode_1.BIP_44_COIN_TYPE_DEPTH; } });\nObject.defineProperty(exports, \"deriveBIP44AddressKey\", { enumerable: true, get: function () { return BIP44CoinTypeNode_1.deriveBIP44AddressKey; } });\nObject.defineProperty(exports, \"getBIP44AddressKeyDeriver\", { enumerable: true, get: function () { return BIP44CoinTypeNode_1.getBIP44AddressKeyDeriver; } });\nvar constants_1 = require(\"./constants\");\nObject.defineProperty(exports, \"MIN_BIP_44_DEPTH\", { enumerable: true, get: function () { return constants_1.MIN_BIP_44_DEPTH; } });\nObject.defineProperty(exports, \"MAX_BIP_44_DEPTH\", { enumerable: true, get: function () { return constants_1.MAX_BIP_44_DEPTH; } });\nObject.defineProperty(exports, \"BIP44PurposeNodeToken\", { enumerable: true, get: function () { return constants_1.BIP44PurposeNodeToken; } });\n/**\n * The {@link Buffer} accessible to `@metamask/key-tree`, re-exported in case\n * of module resolution issues.\n */\nexports.PackageBuffer = Buffer;\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=types.js.map","\"use strict\";\n/* eslint-disable no-dupe-class-members */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar buffer_1 = require(\"buffer\");\nvar ethereumjs_util_1 = require(\"ethereumjs-util\");\nvar common_1 = __importDefault(require(\"@ethereumjs/common\"));\n// secp256k1n/2\nvar N_DIV_2 = new ethereumjs_util_1.BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n/**\n * An Ethereum transaction.\n */\nvar Transaction = /** @class */ (function () {\n    /**\n     * This constructor takes the values, validates them, assigns them and freezes the object.\n     * Use the static factory methods to assist in creating a Transaction object from varying data types.\n     * @note Transaction objects implement EIP155 by default. To disable it, pass in an `@ethereumjs/common` object set before EIP155 activation (i.e. before Spurious Dragon).\n     */\n    function Transaction(txData, opts) {\n        var e_1, _a;\n        var _b;\n        var nonce = txData.nonce, gasPrice = txData.gasPrice, gasLimit = txData.gasLimit, to = txData.to, value = txData.value, data = txData.data, v = txData.v, r = txData.r, s = txData.s;\n        this.nonce = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(nonce));\n        this.gasPrice = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasPrice));\n        this.gasLimit = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(gasLimit));\n        this.to = to ? new ethereumjs_util_1.Address(ethereumjs_util_1.toBuffer(to)) : undefined;\n        this.value = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(value));\n        this.data = ethereumjs_util_1.toBuffer(data);\n        this.v = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(v));\n        this.r = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(r));\n        this.s = new ethereumjs_util_1.BN(ethereumjs_util_1.toBuffer(s));\n        var validateCannotExceedMaxInteger = {\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            value: this.value,\n            r: this.r,\n            s: this.s,\n        };\n        try {\n            for (var _c = __values(Object.entries(validateCannotExceedMaxInteger)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var _e = __read(_d.value, 2), key = _e[0], value_1 = _e[1];\n                if (value_1 && value_1.gt(ethereumjs_util_1.MAX_INTEGER)) {\n                    throw new Error(key + \" cannot exceed MAX_INTEGER, given \" + value_1);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        if (opts === null || opts === void 0 ? void 0 : opts.common) {\n            this.common = opts.common;\n        }\n        else {\n            var DEFAULT_CHAIN = 'mainnet';\n            this.common = new common_1.default({ chain: DEFAULT_CHAIN });\n        }\n        this._validateTxV(this.v);\n        var freeze = (_b = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _b !== void 0 ? _b : true;\n        if (freeze) {\n            Object.freeze(this);\n        }\n    }\n    Transaction.fromTxData = function (txData, opts) {\n        return new Transaction(txData, opts);\n    };\n    Transaction.fromRlpSerializedTx = function (serialized, opts) {\n        var values = ethereumjs_util_1.rlp.decode(serialized);\n        if (!Array.isArray(values)) {\n            throw new Error('Invalid serialized tx input. Must be array');\n        }\n        return this.fromValuesArray(values, opts);\n    };\n    Transaction.fromValuesArray = function (values, opts) {\n        if (values.length !== 6 && values.length !== 9) {\n            throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n        }\n        var _a = __read(values, 9), nonce = _a[0], gasPrice = _a[1], gasLimit = _a[2], to = _a[3], value = _a[4], data = _a[5], v = _a[6], r = _a[7], s = _a[8];\n        return new Transaction({\n            nonce: new ethereumjs_util_1.BN(nonce),\n            gasPrice: new ethereumjs_util_1.BN(gasPrice),\n            gasLimit: new ethereumjs_util_1.BN(gasLimit),\n            to: to && to.length > 0 ? new ethereumjs_util_1.Address(to) : undefined,\n            value: new ethereumjs_util_1.BN(value),\n            data: data || buffer_1.Buffer.from([]),\n            v: v ? new ethereumjs_util_1.BN(v) : undefined,\n            r: r ? new ethereumjs_util_1.BN(r) : undefined,\n            s: s ? new ethereumjs_util_1.BN(s) : undefined,\n        }, opts);\n    };\n    /**\n     * If the tx's `to` is to the creation address\n     */\n    Transaction.prototype.toCreationAddress = function () {\n        return this.to === undefined || this.to.buf.length === 0;\n    };\n    /**\n     * Computes a sha3-256 hash of the serialized tx\n     */\n    Transaction.prototype.hash = function () {\n        var values = [\n            ethereumjs_util_1.bnToRlp(this.nonce),\n            ethereumjs_util_1.bnToRlp(this.gasPrice),\n            ethereumjs_util_1.bnToRlp(this.gasLimit),\n            this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]),\n            ethereumjs_util_1.bnToRlp(this.value),\n            this.data,\n            this.v ? ethereumjs_util_1.bnToRlp(this.v) : buffer_1.Buffer.from([]),\n            this.r ? ethereumjs_util_1.bnToRlp(this.r) : buffer_1.Buffer.from([]),\n            this.s ? ethereumjs_util_1.bnToRlp(this.s) : buffer_1.Buffer.from([]),\n        ];\n        return ethereumjs_util_1.rlphash(values);\n    };\n    Transaction.prototype.getMessageToSign = function () {\n        return this._getMessageToSign(this._unsignedTxImplementsEIP155());\n    };\n    Transaction.prototype.getMessageToVerifySignature = function () {\n        return this._getMessageToSign(this._signedTxImplementsEIP155());\n    };\n    /**\n     * Returns chain ID\n     */\n    Transaction.prototype.getChainId = function () {\n        return this.common.chainId();\n    };\n    /**\n     * Returns the sender's address\n     */\n    Transaction.prototype.getSenderAddress = function () {\n        return new ethereumjs_util_1.Address(ethereumjs_util_1.publicToAddress(this.getSenderPublicKey()));\n    };\n    /**\n     * Returns the public key of the sender\n     */\n    Transaction.prototype.getSenderPublicKey = function () {\n        var msgHash = this.getMessageToVerifySignature();\n        // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n        if (this.common.gteHardfork('homestead') && this.s && this.s.gt(N_DIV_2)) {\n            throw new Error('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        }\n        var _a = this, v = _a.v, r = _a.r, s = _a.s;\n        if (!v || !r || !s) {\n            throw new Error('Missing values to derive sender public key from signed tx');\n        }\n        try {\n            return ethereumjs_util_1.ecrecover(msgHash, v.toNumber(), ethereumjs_util_1.bnToRlp(r), ethereumjs_util_1.bnToRlp(s), this._signedTxImplementsEIP155() ? this.getChainId() : undefined);\n        }\n        catch (e) {\n            throw new Error('Invalid Signature');\n        }\n    };\n    /**\n     * Determines if the signature is valid\n     */\n    Transaction.prototype.verifySignature = function () {\n        try {\n            // Main signature verification is done in `getSenderPublicKey()`\n            var publicKey = this.getSenderPublicKey();\n            return ethereumjs_util_1.unpadBuffer(publicKey).length !== 0;\n        }\n        catch (e) {\n            return false;\n        }\n    };\n    /**\n     * Sign a transaction with a given private key.\n     * Returns a new Transaction object (the original tx will not be modified).\n     * Example:\n     * ```typescript\n     * const unsignedTx = Transaction.fromTxData(txData)\n     * const signedTx = unsignedTx.sign(privKey)\n     * ```\n     * @param privateKey Must be 32 bytes in length.\n     */\n    Transaction.prototype.sign = function (privateKey) {\n        if (privateKey.length !== 32) {\n            throw new Error('Private key must be 32 bytes in length.');\n        }\n        var msgHash = this.getMessageToSign();\n        // Only `v` is reassigned.\n        /* eslint-disable-next-line prefer-const */\n        var _a = ethereumjs_util_1.ecsign(msgHash, privateKey), v = _a.v, r = _a.r, s = _a.s;\n        if (this._unsignedTxImplementsEIP155()) {\n            v += this.getChainId() * 2 + 8;\n        }\n        var opts = {\n            common: this.common,\n        };\n        return new Transaction({\n            nonce: this.nonce,\n            gasPrice: this.gasPrice,\n            gasLimit: this.gasLimit,\n            to: this.to,\n            value: this.value,\n            data: this.data,\n            v: new ethereumjs_util_1.BN(v),\n            r: new ethereumjs_util_1.BN(r),\n            s: new ethereumjs_util_1.BN(s),\n        }, opts);\n    };\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    Transaction.prototype.getDataFee = function () {\n        var txDataZero = this.common.param('gasPrices', 'txDataZero');\n        var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n        var cost = 0;\n        for (var i = 0; i < this.data.length; i++) {\n            this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n        }\n        return new ethereumjs_util_1.BN(cost);\n    };\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n    Transaction.prototype.getBaseFee = function () {\n        var fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'));\n        if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n            fee.iaddn(this.common.param('gasPrices', 'txCreation'));\n        }\n        return fee;\n    };\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n    Transaction.prototype.getUpfrontCost = function () {\n        return this.gasLimit.mul(this.gasPrice).add(this.value);\n    };\n    Transaction.prototype.validate = function (stringError) {\n        if (stringError === void 0) { stringError = false; }\n        var errors = [];\n        if (!this.verifySignature()) {\n            errors.push('Invalid Signature');\n        }\n        if (this.getBaseFee().gt(this.gasLimit)) {\n            errors.push(\"gasLimit is too low. given \" + this.gasLimit + \", need at least \" + this.getBaseFee());\n        }\n        return stringError ? errors : errors.length === 0;\n    };\n    /**\n     * Returns a Buffer Array of the raw Buffers of this transaction, in order.\n     */\n    Transaction.prototype.raw = function () {\n        return [\n            ethereumjs_util_1.bnToRlp(this.nonce),\n            ethereumjs_util_1.bnToRlp(this.gasPrice),\n            ethereumjs_util_1.bnToRlp(this.gasLimit),\n            this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]),\n            ethereumjs_util_1.bnToRlp(this.value),\n            this.data,\n            this.v !== undefined ? ethereumjs_util_1.bnToRlp(this.v) : buffer_1.Buffer.from([]),\n            this.r !== undefined ? ethereumjs_util_1.bnToRlp(this.r) : buffer_1.Buffer.from([]),\n            this.s !== undefined ? ethereumjs_util_1.bnToRlp(this.s) : buffer_1.Buffer.from([]),\n        ];\n    };\n    /**\n     * Returns the rlp encoding of the transaction.\n     */\n    Transaction.prototype.serialize = function () {\n        return ethereumjs_util_1.rlp.encode(this.raw());\n    };\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n    Transaction.prototype.toJSON = function () {\n        return {\n            nonce: ethereumjs_util_1.bnToHex(this.nonce),\n            gasPrice: ethereumjs_util_1.bnToHex(this.gasPrice),\n            gasLimit: ethereumjs_util_1.bnToHex(this.gasLimit),\n            to: this.to !== undefined ? this.to.toString() : undefined,\n            value: ethereumjs_util_1.bnToHex(this.value),\n            data: '0x' + this.data.toString('hex'),\n            v: this.v !== undefined ? ethereumjs_util_1.bnToHex(this.v) : undefined,\n            r: this.r !== undefined ? ethereumjs_util_1.bnToHex(this.r) : undefined,\n            s: this.s !== undefined ? ethereumjs_util_1.bnToHex(this.s) : undefined,\n        };\n    };\n    Transaction.prototype.isSigned = function () {\n        var _a = this, v = _a.v, r = _a.r, s = _a.s;\n        return !!v && !!r && !!s;\n    };\n    Transaction.prototype._unsignedTxImplementsEIP155 = function () {\n        return this.common.gteHardfork('spuriousDragon');\n    };\n    Transaction.prototype._signedTxImplementsEIP155 = function () {\n        var _a;\n        if (!this.isSigned()) {\n            throw Error('This transaction is not signed');\n        }\n        var onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon');\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        var v = (_a = this.v) === null || _a === void 0 ? void 0 : _a.toNumber();\n        var vAndChainIdMeetEIP155Conditions = v === this.getChainId() * 2 + 35 || v === this.getChainId() * 2 + 36;\n        return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater;\n    };\n    Transaction.prototype._getMessageToSign = function (withEIP155) {\n        var values = [\n            ethereumjs_util_1.bnToRlp(this.nonce),\n            ethereumjs_util_1.bnToRlp(this.gasPrice),\n            ethereumjs_util_1.bnToRlp(this.gasLimit),\n            this.to !== undefined ? this.to.buf : buffer_1.Buffer.from([]),\n            ethereumjs_util_1.bnToRlp(this.value),\n            this.data,\n        ];\n        if (withEIP155) {\n            values.push(ethereumjs_util_1.toBuffer(this.getChainId()));\n            values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n            values.push(ethereumjs_util_1.unpadBuffer(ethereumjs_util_1.toBuffer(0)));\n        }\n        return ethereumjs_util_1.rlphash(values);\n    };\n    /**\n     * Validates tx's `v` value\n     */\n    Transaction.prototype._validateTxV = function (v) {\n        if (v === undefined || v.toNumber() === 0) {\n            return;\n        }\n        if (!this.common.gteHardfork('spuriousDragon')) {\n            return;\n        }\n        var vInt = v.toNumber();\n        if (vInt === 27 || vInt === 28) {\n            return;\n        }\n        var isValidEIP155V = vInt === this.getChainId() * 2 + 35 || vInt === this.getChainId() * 2 + 36;\n        if (!isValidEIP155V) {\n            throw new Error(\"Incompatible EIP155-based V \" + vInt + \" and chain id \" + this.getChainId() + \". See the Common parameter of the Transaction constructor to set the chain id.\");\n        }\n    };\n    return Transaction;\n}());\nexports.default = Transaction;\n//# sourceMappingURL=transaction.js.map","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar bcUrRegistry = require('@keystonehq/bc-ur-registry');\nvar uuid = require('uuid');\nvar HDKey = _interopDefault(require('hdkey'));\nvar ethereumjsUtil = require('ethereumjs-util');\n\nconst {\n  RegistryType\n} = bcUrRegistry.extend;\nconst ExtendedRegistryTypes = {\n  ETH_SIGN_REQUEST: /*#__PURE__*/new RegistryType('eth-sign-request', 401),\n  ETH_SIGNATAURE: /*#__PURE__*/new RegistryType('eth-signature', 402)\n};\n\nconst {\n  decodeToDataItem,\n  RegistryTypes\n} = bcUrRegistry.extend;\nvar Keys;\n\n(function (Keys) {\n  Keys[Keys[\"requestId\"] = 1] = \"requestId\";\n  Keys[Keys[\"signData\"] = 2] = \"signData\";\n  Keys[Keys[\"dataType\"] = 3] = \"dataType\";\n  Keys[Keys[\"chainId\"] = 4] = \"chainId\";\n  Keys[Keys[\"derivationPath\"] = 5] = \"derivationPath\";\n  Keys[Keys[\"address\"] = 6] = \"address\";\n  Keys[Keys[\"origin\"] = 7] = \"origin\";\n})(Keys || (Keys = {}));\n\n(function (DataType) {\n  DataType[DataType[\"transaction\"] = 1] = \"transaction\";\n  DataType[DataType[\"typedData\"] = 2] = \"typedData\";\n  DataType[DataType[\"personalMessage\"] = 3] = \"personalMessage\";\n  DataType[DataType[\"typedTransaction\"] = 4] = \"typedTransaction\";\n})(exports.DataType || (exports.DataType = {}));\n\nclass EthSignRequest extends bcUrRegistry.RegistryItem {\n  constructor(args) {\n    super();\n\n    this.getRegistryType = () => ExtendedRegistryTypes.ETH_SIGN_REQUEST;\n\n    this.setupData = args => {\n      this.requestId = args.requestId;\n      this.signData = args.signData;\n      this.dataType = args.dataType;\n      this.chainId = args.chainId;\n      this.derivationPath = args.derivationPath;\n      this.address = args.address;\n      this.origin = args.origin;\n    };\n\n    this.getRequestId = () => this.requestId;\n\n    this.getSignData = () => this.signData;\n\n    this.getDataType = () => this.dataType;\n\n    this.getChainId = () => this.chainId;\n\n    this.getDerivationPath = () => this.derivationPath.getPath();\n\n    this.getSignRequestAddress = () => this.address;\n\n    this.getOrigin = () => this.origin;\n\n    this.toDataItem = () => {\n      const map = {};\n\n      if (this.requestId) {\n        map[Keys.requestId] = new bcUrRegistry.DataItem(this.requestId, RegistryTypes.UUID.getTag());\n      }\n\n      if (this.address) {\n        map[Keys.address] = this.address;\n      }\n\n      if (this.chainId) {\n        map[Keys.chainId] = this.chainId;\n      }\n\n      if (this.origin) {\n        map[Keys.origin] = this.origin;\n      }\n\n      map[Keys.signData] = this.signData;\n      map[Keys.dataType] = this.dataType;\n      const keyPath = this.derivationPath.toDataItem();\n      keyPath.setTag(this.derivationPath.getRegistryType().getTag());\n      map[Keys.derivationPath] = keyPath;\n      return new bcUrRegistry.DataItem(map);\n    };\n\n    this.setupData(args);\n  }\n\n  static constructETHRequest(signData, signDataType, hdPath, xfp, uuidString, chainId, address, origin) {\n    const paths = hdPath.replace(/[m|M]\\//, '').split('/');\n    const hdpathObject = new bcUrRegistry.CryptoKeypath(paths.map(path => {\n      const index = parseInt(path.replace(\"'\", ''));\n      let isHardened = false;\n\n      if (path.endsWith(\"'\")) {\n        isHardened = true;\n      }\n\n      return new bcUrRegistry.PathComponent({\n        index,\n        hardened: isHardened\n      });\n    }), Buffer.from(xfp, 'hex'));\n    return new EthSignRequest({\n      requestId: uuidString ? Buffer.from(uuid.parse(uuidString)) : undefined,\n      signData,\n      dataType: signDataType,\n      derivationPath: hdpathObject,\n      chainId,\n      address: address ? Buffer.from(address.replace('0x', ''), 'hex') : undefined,\n      origin: origin || undefined\n    });\n  }\n\n}\n\nEthSignRequest.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const signData = map[Keys.signData];\n  const dataType = map[Keys.dataType];\n  const derivationPath = bcUrRegistry.CryptoKeypath.fromDataItem(map[Keys.derivationPath]);\n  const chainId = map[Keys.chainId] ? map[Keys.chainId] : undefined;\n  const address = map[Keys.address] ? map[Keys.address] : undefined;\n  const requestId = map[Keys.requestId] ? map[Keys.requestId].getData() : undefined;\n  const origin = map[Keys.origin] ? map[Keys.origin] : undefined;\n  return new EthSignRequest({\n    requestId,\n    signData,\n    dataType,\n    chainId,\n    derivationPath,\n    address,\n    origin\n  });\n};\n\nEthSignRequest.fromCBOR = _cborPayload => {\n  const dataItem = decodeToDataItem(_cborPayload);\n  return EthSignRequest.fromDataItem(dataItem);\n};\n\nconst {\n  RegistryTypes: RegistryTypes$1,\n  decodeToDataItem: decodeToDataItem$1\n} = bcUrRegistry.extend;\nvar Keys$1;\n\n(function (Keys) {\n  Keys[Keys[\"requestId\"] = 1] = \"requestId\";\n  Keys[Keys[\"signature\"] = 2] = \"signature\";\n})(Keys$1 || (Keys$1 = {}));\n\nclass ETHSignature extends bcUrRegistry.RegistryItem {\n  constructor(signature, requestId) {\n    super();\n\n    this.getRegistryType = () => ExtendedRegistryTypes.ETH_SIGNATAURE;\n\n    this.getRequestId = () => this.requestId;\n\n    this.getSignature = () => this.signature;\n\n    this.toDataItem = () => {\n      const map = {};\n\n      if (this.requestId) {\n        map[Keys$1.requestId] = new bcUrRegistry.DataItem(this.requestId, RegistryTypes$1.UUID.getTag());\n      }\n\n      map[Keys$1.signature] = this.signature;\n      return new bcUrRegistry.DataItem(map);\n    };\n\n    this.signature = signature;\n    this.requestId = requestId;\n  }\n\n}\n\nETHSignature.fromDataItem = dataItem => {\n  const map = dataItem.getData();\n  const signature = map[Keys$1.signature];\n  const requestId = map[Keys$1.requestId] ? map[Keys$1.requestId].getData() : undefined;\n  return new ETHSignature(signature, requestId);\n};\n\nETHSignature.fromCBOR = _cborPayload => {\n  const dataItem = decodeToDataItem$1(_cborPayload);\n  return ETHSignature.fromDataItem(dataItem);\n};\n\n// @ts-ignore\nconst generateAddressfromXpub = (xpub, derivePath) => {\n  // @ts-ignore\n  const node = HDKey.fromExtendedKey(xpub);\n  const publicKey = node.derive(derivePath);\n  const address = '0x' + ethereumjsUtil.publicToAddress(publicKey.publicKey, true).toString('hex');\n  return ethereumjsUtil.toChecksumAddress(address);\n};\nconst findHDpatfromAddress = (address, xpub, numberLimit, rootPath) => {\n  for (let i = 0; i < numberLimit; i++) {\n    const path = `M/0/${i}`;\n    const caculateAddress = generateAddressfromXpub(xpub, path);\n\n    if (address.toLowerCase() == caculateAddress.toLowerCase()) {\n      return `${rootPath}/0/${i}`;\n    }\n  }\n\n  return null;\n};\n\nconst {\n  cbor\n} = bcUrRegistry.extend;\ncbor.patchTags(Object.values(ExtendedRegistryTypes).filter(rt => !!rt.getTag()).map(rt => rt.getTag()));\n\nObject.keys(bcUrRegistry).forEach(function (k) {\n    if (k !== 'default') Object.defineProperty(exports, k, {\n        enumerable: true,\n        get: function () {\n            return bcUrRegistry[k];\n        }\n    });\n});\nexports.ETHSignature = ETHSignature;\nexports.EthSignRequest = EthSignRequest;\nexports.findHDpatfromAddress = findHDpatfromAddress;\nexports.generateAddressfromXpub = generateAddressfromXpub;\n//# sourceMappingURL=bc-ur-registry-eth.cjs.development.js.map\n","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var t,e=require(\"@keystonehq/bc-ur-registry\"),s=require(\"uuid\"),a=(t=require(\"hdkey\"))&&\"object\"==typeof t&&\"default\"in t?t.default:t,i=require(\"ethereumjs-util\");const{RegistryType:r}=e.extend,n={ETH_SIGN_REQUEST:new r(\"eth-sign-request\",401),ETH_SIGNATAURE:new r(\"eth-signature\",402)},{decodeToDataItem:d,RegistryTypes:o}=e.extend;var h,u;!function(t){t[t.requestId=1]=\"requestId\",t[t.signData=2]=\"signData\",t[t.dataType=3]=\"dataType\",t[t.chainId=4]=\"chainId\",t[t.derivationPath=5]=\"derivationPath\",t[t.address=6]=\"address\",t[t.origin=7]=\"origin\"}(h||(h={})),(u=exports.DataType||(exports.DataType={}))[u.transaction=1]=\"transaction\",u[u.typedData=2]=\"typedData\",u[u.personalMessage=3]=\"personalMessage\",u[u.typedTransaction=4]=\"typedTransaction\";class g extends e.RegistryItem{constructor(t){super(),this.getRegistryType=()=>n.ETH_SIGN_REQUEST,this.setupData=t=>{this.requestId=t.requestId,this.signData=t.signData,this.dataType=t.dataType,this.chainId=t.chainId,this.derivationPath=t.derivationPath,this.address=t.address,this.origin=t.origin},this.getRequestId=()=>this.requestId,this.getSignData=()=>this.signData,this.getDataType=()=>this.dataType,this.getChainId=()=>this.chainId,this.getDerivationPath=()=>this.derivationPath.getPath(),this.getSignRequestAddress=()=>this.address,this.getOrigin=()=>this.origin,this.toDataItem=()=>{const t={};this.requestId&&(t[h.requestId]=new e.DataItem(this.requestId,o.UUID.getTag())),this.address&&(t[h.address]=this.address),this.chainId&&(t[h.chainId]=this.chainId),this.origin&&(t[h.origin]=this.origin),t[h.signData]=this.signData,t[h.dataType]=this.dataType;const s=this.derivationPath.toDataItem();return s.setTag(this.derivationPath.getRegistryType().getTag()),t[h.derivationPath]=s,new e.DataItem(t)},this.setupData(t)}static constructETHRequest(t,a,i,r,n,d,o,h){const u=i.replace(/[m|M]\\//,\"\").split(\"/\"),c=new e.CryptoKeypath(u.map(t=>{const s=parseInt(t.replace(\"'\",\"\"));let a=!1;return t.endsWith(\"'\")&&(a=!0),new e.PathComponent({index:s,hardened:a})}),Buffer.from(r,\"hex\"));return new g({requestId:n?Buffer.from(s.parse(n)):void 0,signData:t,dataType:a,derivationPath:c,chainId:d,address:o?Buffer.from(o.replace(\"0x\",\"\"),\"hex\"):void 0,origin:h||void 0})}}g.fromDataItem=t=>{const s=t.getData(),a=s[h.signData],i=s[h.dataType],r=e.CryptoKeypath.fromDataItem(s[h.derivationPath]),n=s[h.chainId]?s[h.chainId]:void 0,d=s[h.address]?s[h.address]:void 0,o=s[h.requestId]?s[h.requestId].getData():void 0;return new g({requestId:o,signData:a,dataType:i,chainId:n,derivationPath:r,address:d,origin:s[h.origin]?s[h.origin]:void 0})},g.fromCBOR=t=>{const e=d(t);return g.fromDataItem(e)};const{RegistryTypes:c,decodeToDataItem:I}=e.extend;var p;!function(t){t[t.requestId=1]=\"requestId\",t[t.signature=2]=\"signature\"}(p||(p={}));class y extends e.RegistryItem{constructor(t,s){super(),this.getRegistryType=()=>n.ETH_SIGNATAURE,this.getRequestId=()=>this.requestId,this.getSignature=()=>this.signature,this.toDataItem=()=>{const t={};return this.requestId&&(t[p.requestId]=new e.DataItem(this.requestId,c.UUID.getTag())),t[p.signature]=this.signature,new e.DataItem(t)},this.signature=t,this.requestId=s}}y.fromDataItem=t=>{const e=t.getData(),s=e[p.signature],a=e[p.requestId]?e[p.requestId].getData():void 0;return new y(s,a)},y.fromCBOR=t=>{const e=I(t);return y.fromDataItem(e)};const T=(t,e)=>{const s=a.fromExtendedKey(t).derive(e),r=\"0x\"+i.publicToAddress(s.publicKey,!0).toString(\"hex\");return i.toChecksumAddress(r)},{cbor:D}=e.extend;D.patchTags(Object.values(n).filter(t=>!!t.getTag()).map(t=>t.getTag())),Object.keys(e).forEach((function(t){\"default\"!==t&&Object.defineProperty(exports,t,{enumerable:!0,get:function(){return e[t]}})})),exports.ETHSignature=y,exports.EthSignRequest=g,exports.findHDpatfromAddress=(t,e,s,a)=>{for(let i=0;i<s;i++){const s=T(e,\"M/0/\"+i);if(t.toLowerCase()==s.toLowerCase())return`${a}/0/${i}`}return null},exports.generateAddressfromXpub=T;\n//# sourceMappingURL=bc-ur-registry-eth.cjs.production.min.js.map\n","'use strict'\n\n// Set utils\nconst difference = (set1, set2) => new Set([...set1].filter(x => !set2.has(x)))\n\n// Poll utils\nconst sleep = (time) => new Promise(resolve => setTimeout(resolve, time))\n\nconst runWithDelay = async (func, topic, interval) => {\n  const peers = await func(topic)\n  await sleep(interval)\n  return peers\n}\n\nmodule.exports.runWithDelay = runWithDelay\nmodule.exports.difference = difference\n","'use strict';\nmodule.exports = (iterable, reducer, initVal) => new Promise((resolve, reject) => {\n\tconst iterator = iterable[Symbol.iterator]();\n\tlet i = 0;\n\n\tconst next = total => {\n\t\tconst el = iterator.next();\n\n\t\tif (el.done) {\n\t\t\tresolve(total);\n\t\t\treturn;\n\t\t}\n\n\t\tPromise.all([total, el.value])\n\t\t\t.then(value => {\n\t\t\t\tnext(reducer(value[0], value[1], i++));\n\t\t\t})\n\t\t\t.catch(reject);\n\t};\n\n\tnext(initVal);\n});\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util = require(\"util\");\nconst toString = Object.prototype.toString;\nconst isOfType = (type) => (value) => typeof value === type; // tslint:disable-line:strict-type-predicates\nconst getObjectType = (value) => {\n    const objectName = toString.call(value).slice(8, -1);\n    if (objectName) {\n        return objectName;\n    }\n    return null;\n};\nconst isObjectOfType = (typeName) => (value) => {\n    return getObjectType(value) === typeName;\n};\nfunction is(value) {\n    if (value === null) {\n        return \"null\" /* null */;\n    }\n    if (value === true || value === false) {\n        return \"boolean\" /* boolean */;\n    }\n    const type = typeof value;\n    if (type === 'undefined') {\n        return \"undefined\" /* undefined */;\n    }\n    if (type === 'string') {\n        return \"string\" /* string */;\n    }\n    if (type === 'number') {\n        return \"number\" /* number */;\n    }\n    if (type === 'symbol') {\n        return \"symbol\" /* symbol */;\n    }\n    if (is.function_(value)) {\n        return \"Function\" /* Function */;\n    }\n    if (Array.isArray(value)) {\n        return \"Array\" /* Array */;\n    }\n    if (Buffer.isBuffer(value)) {\n        return \"Buffer\" /* Buffer */;\n    }\n    const tagType = getObjectType(value);\n    if (tagType) {\n        return tagType;\n    }\n    if (value instanceof String || value instanceof Boolean || value instanceof Number) {\n        throw new TypeError('Please don\\'t use object wrappers for primitive types');\n    }\n    return \"Object\" /* Object */;\n}\n(function (is) {\n    const isObject = (value) => typeof value === 'object';\n    // tslint:disable:variable-name\n    is.undefined = isOfType('undefined');\n    is.string = isOfType('string');\n    is.number = isOfType('number');\n    is.function_ = isOfType('function');\n    is.null_ = (value) => value === null;\n    is.class_ = (value) => is.function_(value) && value.toString().startsWith('class ');\n    is.boolean = (value) => value === true || value === false;\n    // tslint:enable:variable-name\n    is.symbol = isOfType('symbol');\n    is.array = Array.isArray;\n    is.buffer = Buffer.isBuffer;\n    is.nullOrUndefined = (value) => is.null_(value) || is.undefined(value);\n    is.object = (value) => !is.nullOrUndefined(value) && (is.function_(value) || isObject(value));\n    is.iterable = (value) => !is.nullOrUndefined(value) && is.function_(value[Symbol.iterator]);\n    is.generator = (value) => is.iterable(value) && is.function_(value.next) && is.function_(value.throw);\n    is.nativePromise = isObjectOfType(\"Promise\" /* Promise */);\n    const hasPromiseAPI = (value) => !is.null_(value) &&\n        isObject(value) &&\n        is.function_(value.then) &&\n        is.function_(value.catch);\n    is.promise = (value) => is.nativePromise(value) || hasPromiseAPI(value);\n    // TODO: Change to use `isObjectOfType` once Node.js 6 or higher is targeted\n    const isFunctionOfType = (type) => (value) => is.function_(value) && is.function_(value.constructor) && value.constructor.name === type;\n    is.generatorFunction = isFunctionOfType('GeneratorFunction');\n    is.asyncFunction = isFunctionOfType('AsyncFunction');\n    is.boundFunction = (value) => is.function_(value) && !value.hasOwnProperty('prototype');\n    is.regExp = isObjectOfType(\"RegExp\" /* RegExp */);\n    is.date = isObjectOfType(\"Date\" /* Date */);\n    is.error = isObjectOfType(\"Error\" /* Error */);\n    is.map = isObjectOfType(\"Map\" /* Map */);\n    is.set = isObjectOfType(\"Set\" /* Set */);\n    is.weakMap = isObjectOfType(\"WeakMap\" /* WeakMap */);\n    is.weakSet = isObjectOfType(\"WeakSet\" /* WeakSet */);\n    is.int8Array = isObjectOfType(\"Int8Array\" /* Int8Array */);\n    is.uint8Array = isObjectOfType(\"Uint8Array\" /* Uint8Array */);\n    is.uint8ClampedArray = isObjectOfType(\"Uint8ClampedArray\" /* Uint8ClampedArray */);\n    is.int16Array = isObjectOfType(\"Int16Array\" /* Int16Array */);\n    is.uint16Array = isObjectOfType(\"Uint16Array\" /* Uint16Array */);\n    is.int32Array = isObjectOfType(\"Int32Array\" /* Int32Array */);\n    is.uint32Array = isObjectOfType(\"Uint32Array\" /* Uint32Array */);\n    is.float32Array = isObjectOfType(\"Float32Array\" /* Float32Array */);\n    is.float64Array = isObjectOfType(\"Float64Array\" /* Float64Array */);\n    is.arrayBuffer = isObjectOfType(\"ArrayBuffer\" /* ArrayBuffer */);\n    is.sharedArrayBuffer = isObjectOfType(\"SharedArrayBuffer\" /* SharedArrayBuffer */);\n    is.dataView = isObjectOfType(\"DataView\" /* DataView */);\n    // TODO: Remove `object` checks when targeting ES2015 or higher\n    // See `Notes`: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf\n    is.directInstanceOf = (instance, klass) => is.object(instance) && is.object(klass) && Object.getPrototypeOf(instance) === klass.prototype;\n    is.truthy = (value) => Boolean(value);\n    is.falsy = (value) => !value;\n    is.nan = (value) => Number.isNaN(value);\n    const primitiveTypes = new Set([\n        'undefined',\n        'string',\n        'number',\n        'boolean',\n        'symbol'\n    ]);\n    is.primitive = (value) => is.null_(value) || primitiveTypes.has(typeof value);\n    is.integer = (value) => Number.isInteger(value);\n    is.safeInteger = (value) => Number.isSafeInteger(value);\n    is.plainObject = (value) => {\n        // From: https://github.com/sindresorhus/is-plain-obj/blob/master/index.js\n        let prototype;\n        return getObjectType(value) === \"Object\" /* Object */ &&\n            (prototype = Object.getPrototypeOf(value), prototype === null || // tslint:disable-line:ban-comma-operator\n                prototype === Object.getPrototypeOf({}));\n    };\n    const typedArrayTypes = new Set([\n        \"Int8Array\" /* Int8Array */,\n        \"Uint8Array\" /* Uint8Array */,\n        \"Uint8ClampedArray\" /* Uint8ClampedArray */,\n        \"Int16Array\" /* Int16Array */,\n        \"Uint16Array\" /* Uint16Array */,\n        \"Int32Array\" /* Int32Array */,\n        \"Uint32Array\" /* Uint32Array */,\n        \"Float32Array\" /* Float32Array */,\n        \"Float64Array\" /* Float64Array */\n    ]);\n    is.typedArray = (value) => {\n        const objectType = getObjectType(value);\n        if (objectType === null) {\n            return false;\n        }\n        return typedArrayTypes.has(objectType);\n    };\n    const isValidLength = (value) => is.safeInteger(value) && value > -1;\n    is.arrayLike = (value) => !is.nullOrUndefined(value) && !is.function_(value) && isValidLength(value.length);\n    is.inRange = (value, range) => {\n        if (is.number(range)) {\n            return value >= Math.min(0, range) && value <= Math.max(range, 0);\n        }\n        if (is.array(range) && range.length === 2) {\n            // TODO: Use spread operator here when targeting Node.js 6 or higher\n            return value >= Math.min.apply(null, range) && value <= Math.max.apply(null, range);\n        }\n        throw new TypeError(`Invalid range: ${util.inspect(range)}`);\n    };\n    const NODE_TYPE_ELEMENT = 1;\n    const DOM_PROPERTIES_TO_CHECK = [\n        'innerHTML',\n        'ownerDocument',\n        'style',\n        'attributes',\n        'nodeValue'\n    ];\n    is.domElement = (value) => is.object(value) && value.nodeType === NODE_TYPE_ELEMENT && is.string(value.nodeName) &&\n        !is.plainObject(value) && DOM_PROPERTIES_TO_CHECK.every(property => property in value);\n    is.nodeStream = (value) => !is.nullOrUndefined(value) && isObject(value) && is.function_(value.pipe);\n    is.infinite = (value) => value === Infinity || value === -Infinity;\n    const isAbsoluteMod2 = (value) => (rem) => is.integer(rem) && Math.abs(rem % 2) === value;\n    is.even = isAbsoluteMod2(0);\n    is.odd = isAbsoluteMod2(1);\n    const isWhiteSpaceString = (value) => is.string(value) && /\\S/.test(value) === false;\n    const isEmptyStringOrArray = (value) => (is.string(value) || is.array(value)) && value.length === 0;\n    const isEmptyObject = (value) => !is.map(value) && !is.set(value) && is.object(value) && Object.keys(value).length === 0;\n    const isEmptyMapOrSet = (value) => (is.map(value) || is.set(value)) && value.size === 0;\n    is.empty = (value) => is.falsy(value) || isEmptyStringOrArray(value) || isEmptyObject(value) || isEmptyMapOrSet(value);\n    is.emptyOrWhitespace = (value) => is.empty(value) || isWhiteSpaceString(value);\n    const predicateOnArray = (method, predicate, args) => {\n        // `args` is the calling function's \"arguments object\".\n        // We have to do it this way to keep node v4 support.\n        // So here we convert it to an array and slice off the first item.\n        const values = Array.prototype.slice.call(args, 1);\n        if (is.function_(predicate) === false) {\n            throw new TypeError(`Invalid predicate: ${util.inspect(predicate)}`);\n        }\n        if (values.length === 0) {\n            throw new TypeError('Invalid number of values');\n        }\n        return method.call(values, predicate);\n    };\n    function any(predicate) {\n        return predicateOnArray(Array.prototype.some, predicate, arguments);\n    }\n    is.any = any;\n    function all(predicate) {\n        return predicateOnArray(Array.prototype.every, predicate, arguments);\n    }\n    is.all = all;\n    // tslint:enable:only-arrow-functions no-function-expression\n})(is || (is = {}));\n// Some few keywords are reserved, but we'll populate them for Node.js users\n// See https://github.com/Microsoft/TypeScript/issues/2536\nObject.defineProperties(is, {\n    class: {\n        value: is.class_\n    },\n    function: {\n        value: is.function_\n    },\n    null: {\n        value: is.null_\n    }\n});\nexports.default = is;\n// For CommonJS default export support\nmodule.exports = is;\nmodule.exports.default = is;\n","'use strict'\n\nfunction difference (a, b, key) {\n  // Indices for quick lookups\n  var processed = {}\n  var existing = {}\n\n  // Create an index of the first collection\n  var addToIndex = e => (existing[key ? e[key] : e] = true)\n  a.forEach(addToIndex)\n\n  // Reduce to entries that are not in the first collection\n  var reducer = (res, entry) => {\n    var isInFirst = existing[key ? entry[key] : entry] !== undefined\n    var hasBeenProcessed = processed[key ? entry[key] : entry] !== undefined\n    if (!isInFirst && !hasBeenProcessed) {\n      res.push(entry)\n      processed[key ? entry[key] : entry] = true\n    }\n    return res\n  }\n\n  return b.reduce(reducer, [])\n}\n\nmodule.exports = difference\n","'use strict'\n\nfunction findUniques (value, key) {\n  // Create an index of the collection\n  let uniques = {}\n  var get = e => uniques[e]\n  var addToIndex = e => (uniques[key ? e[key] : e] = e)\n  value.forEach(addToIndex)\n  return Object.keys(uniques).map(get)\n}\n\nmodule.exports = findUniques\n","'use strict'\n\nconst isDefined = (arg) => arg !== undefined && arg !== null\n\nmodule.exports = isDefined\n","'use strict'\n\nconst pWhilst = require('p-whilst')\nconst pMap = require('p-map')\nconst Entry = require('./entry')\n\nclass EntryIO {\n  /**\n   * Fetch log entries in parallel.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {string|Array<string>} hashes hashes of the entries to fetch\n   * @param {Object} options\n   * @param {number} options.length How many entries to fetch\n   * @param {Array<Entry>} options.exclude Entries to not fetch\n   * @param {number} options.concurrency Max concurrent fetch operations\n   * @param {number} options.timeout Maximum time to wait for each fetch operation, in ms\n   * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n   * @returns {Promise<Array<Entry>>}\n   */\n  static async fetchParallel (ipfs, hashes,\n    { length = -1, exclude = [], concurrency = null, timeout, onProgressCallback } = {}) {\n    const fetchOne = (hash) => EntryIO.fetchAll(ipfs, hash,\n      { length, exclude, timeout, onProgressCallback })\n    const getHashes = e => e.hash\n    const uniquelyConcatArrays = (arr1, arr2) => {\n      // Add any new entries to arr1\n      const entryHashes = arr1.map(getHashes)\n      arr2.forEach(entry => {\n        if (entryHashes.indexOf(entry.hash) === -1) arr1.push(entry)\n      })\n      return arr1\n    }\n    const flatten = (arr) => arr.reduce(uniquelyConcatArrays, [])\n    const hashesToFetch = Array.isArray(hashes) ? hashes.slice() : [hashes]\n    concurrency = Math.max(concurrency || hashesToFetch.length, 1)\n\n    const entries = await pMap(hashesToFetch, fetchOne, { concurrency: concurrency })\n    // Flatten the results and get unique vals\n    return flatten(entries)\n  }\n\n  /**\n   * Fetch log entries sequentially.\n   * @param {IPFS} ipfs An IPFS instance\n   * @param {string|Array<string>} hashes hashes of the entries to fetch\n   * @param {Object} options\n   * @param {number} options.length How many entries to fetch\n   * @param {Array<Entry>} options.exclude Entries to not fetch\n   * @param {number} options.concurrency Max concurrent fetch operations\n   * @param {number} options.timeout Maximum time to wait for each fetch operation, in ms\n   * @param {function(hash, entry, parent, depth)} options.onProgressCallback\n   * @returns {Promise<Array<Entry>>}\n   */\n  static async fetchAll (ipfs, hashes,\n    { length = -1, exclude = [], timeout = null, onProgressCallback }) {\n    let result = []\n    let cache = {}\n    let loadingQueue = Array.isArray(hashes)\n      ? hashes.slice()\n      : [hashes]\n\n    // Add a hash to the loading queue\n    const addToLoadingQueue = e => loadingQueue.push(e)\n\n    // Add entries that we don't need to fetch to the \"cache\"\n    exclude = exclude && Array.isArray(exclude) ? exclude : []\n    var addToExcludeCache = e => {\n      if (Entry.isEntry(e)) {\n        result.push(e)\n        cache[e.hash] = e\n      }\n    }\n    exclude.forEach(addToExcludeCache)\n\n    const shouldFetchMore = () => {\n      return loadingQueue.length > 0 &&\n          (result.length < length || length < 0)\n    }\n\n    const fetchEntry = () => {\n      const hash = loadingQueue.shift()\n\n      if (cache[hash]) {\n        return Promise.resolve()\n      }\n\n      return new Promise(async (resolve, reject) => {\n        // Resolve the promise after a timeout (if given) in order to\n        // not get stuck loading a block that is unreachable\n        const timer = timeout\n          ? setTimeout(() => {\n            console.warn(`Warning: Couldn't fetch entry '${hash}', request timed out (${timeout}ms)`)\n            resolve()\n          }, timeout)\n          : null\n\n        const addToResults = (entry) => {\n          if (Entry.isEntry(entry)) {\n            entry.next.forEach(addToLoadingQueue)\n            result.push(entry)\n            cache[hash] = entry\n            if (onProgressCallback) {\n              onProgressCallback(hash, entry, result.length)\n            }\n          }\n        }\n\n        // Load the entry\n        try {\n          const entry = await Entry.fromMultihash(ipfs, hash)\n          addToResults(entry)\n          resolve()\n        } catch (e) {\n          reject(e)\n        } finally {\n          clearTimeout(timer)\n        }\n      })\n    }\n\n    await pWhilst(shouldFetchMore, fetchEntry)\n    return result\n  }\n}\n\nmodule.exports = EntryIO\n","'use strict'\n\nconst DEFAULTS = require('./defaults')\nconst isFunction = require('./util').isFunction\nconst isBoolean = require('./util').isBoolean\nconst isObject = require('./util').isObject\nconst isArray = require('./util').isArray\nconst isRegex = require('./util').isRegex\nconst assign = require('./util').assign\nconst keys = require('./util').keys\n\nfunction serialize (obj) {\n  if (obj === null || obj === undefined) return obj\n  if (isRegex(obj)) return obj.toString()\n  return obj.toJSON ? obj.toJSON() : obj\n}\n\nfunction stringifyDeterministic (obj, opts) {\n  opts = opts || assign({}, DEFAULTS)\n\n  if (isFunction(opts)) opts = { compare: opts }\n\n  const space = opts.space || DEFAULTS.space\n  const cycles = isBoolean(opts.cycles) ? opts.cycles : DEFAULTS.cycles\n  const replacer = opts.replacer || DEFAULTS.replacer\n  const stringify = opts.stringify || DEFAULTS.stringify\n\n  const compare = opts.compare && (function (f) {\n    return function (node) {\n      return function (a, b) {\n        const aobj = {key: a, value: node[a]}\n        const bobj = {key: b, value: node[b]}\n        return f(aobj, bobj)\n      }\n    }\n  })(opts.compare)\n\n  // Detect circular structure in obj and raise error efficiently.\n  if (!cycles) stringify(obj)\n\n  const seen = []\n\n  return (function _deterministic (parent, key, node, level) {\n    const indent = space ? ('\\n' + new Array(level + 1).join(space)) : ''\n    const colonSeparator = space ? ': ' : ':'\n\n    node = serialize(node)\n    node = replacer.call(parent, key, node)\n\n    if (node === undefined) return\n\n    if (!isObject(node) || node === null) return stringify(node)\n\n    if (isArray(node)) {\n      const out = []\n      for (let i = 0; i < node.length; i++) {\n        const item = _deterministic(node, i, node[i], level + 1) || stringify(null)\n        out.push(indent + space + item)\n      }\n      return '[' + out.join(',') + indent + ']'\n    } else {\n      if (cycles) {\n        if (seen.indexOf(node) !== -1) {\n          return stringify('[Circular]')\n        } else {\n          seen.push(node)\n        }\n      }\n\n      const nodeKeys = keys(node).sort(compare && compare(node))\n      const out = []\n      for (let i = 0; i < nodeKeys.length; i++) {\n        const key = nodeKeys[i]\n        const value = _deterministic(node, key, node[key], level + 1)\n\n        if (!value) continue\n\n        const keyValue = stringify(key) + colonSeparator + value\n        out.push(indent + space + keyValue)\n      }\n      seen.splice(seen.indexOf(node), 1)\n      return '{' + out.join(',') + indent + '}'\n    }\n  })({ '': obj }, '', obj, 0)\n}\n\nmodule.exports = stringifyDeterministic\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar buffer_1 = require(\"buffer\");\nvar pad_string_1 = require(\"./pad-string\");\nfunction encode(input, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    if (buffer_1.Buffer.isBuffer(input)) {\n        return fromBase64(input.toString(\"base64\"));\n    }\n    return fromBase64(buffer_1.Buffer.from(input, encoding).toString(\"base64\"));\n}\n;\nfunction decode(base64url, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    return buffer_1.Buffer.from(toBase64(base64url), \"base64\").toString(encoding);\n}\nfunction toBase64(base64url) {\n    base64url = base64url.toString();\n    return pad_string_1.default(base64url)\n        .replace(/\\-/g, \"+\")\n        .replace(/_/g, \"/\");\n}\nfunction fromBase64(base64) {\n    return base64\n        .replace(/=/g, \"\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\");\n}\nfunction toBuffer(base64url) {\n    return buffer_1.Buffer.from(toBase64(base64url), \"base64\");\n}\nvar base64url = encode;\nbase64url.encode = encode;\nbase64url.decode = decode;\nbase64url.toBase64 = toBase64;\nbase64url.fromBase64 = fromBase64;\nbase64url.toBuffer = toBuffer;\nexports.default = base64url;\n","'use strict'\nconst isDefined = require('./is-defined')\n\nclass Identity {\n  constructor (id, publicKey, idSignature, pubKeyIdSignature, type, provider) {\n    if (!isDefined(id)) {\n      throw new Error('Identity id is required')\n    }\n\n    if (!isDefined(publicKey)) {\n      throw new Error('Invalid public key')\n    }\n\n    if (!isDefined(idSignature)) {\n      throw new Error('Signature of the id (idSignature) is required')\n    }\n\n    if (!isDefined(pubKeyIdSignature)) {\n      throw new Error('Signature of (publicKey + idSignature) is required')\n    }\n\n    if (!isDefined(type)) {\n      throw new Error('Identity type is required')\n    }\n\n    if (!isDefined(provider)) {\n      throw new Error('Identity provider is required')\n    }\n\n    this._id = id\n    this._publicKey = publicKey\n    this._signatures = Object.assign({}, { id: idSignature }, { publicKey: pubKeyIdSignature })\n    this._type = type\n    this._provider = provider\n  }\n\n  /**\n  * This is only used as a fallback to the clock id when necessary\n  * @return {string} public key hex encoded\n  */\n  get id () {\n    return this._id\n  }\n\n  get publicKey () {\n    return this._publicKey\n  }\n\n  get signatures () {\n    return this._signatures\n  }\n\n  get type () {\n    return this._type\n  }\n\n  get provider () {\n    return this._provider\n  }\n\n  toJSON () {\n    return {\n      id: this._id,\n      publicKey: this._publicKey,\n      signatures: this._signatures,\n      type: this._type\n    }\n  }\n}\n\nmodule.exports = Identity\n","'use strict'\nconst IdentityProvider = require('./identity-provider-interface')\nconst Keystore = require('orbit-db-keystore')\nconst signingKeysPath = './orbitdb/identity/signingkeys'\nconst type = 'orbitdb'\n\nclass OrbitDBIdentityProvider extends IdentityProvider {\n  constructor (options = {}) {\n    super()\n    this._keystore = options.keystore || Keystore.create(options.signingKeysPath || signingKeysPath)\n  }\n\n  // Returns the type of the identity provider\n  static get type () { return type }\n\n  async getId (options = {}) {\n    const id = options.id\n    if (!id) {\n      throw new Error('id is required')\n    }\n\n    const keystore = this._keystore\n    const key = await keystore.getKey(id) || await keystore.createKey(id)\n    return key.public.marshal().toString('hex')\n  }\n\n  async signIdentity (data, options = {}) {\n    const id = options.id\n    if (!id) {\n      throw new Error('id is required')\n    }\n    const keystore = this._keystore\n    const key = await keystore.getKey(id)\n    if (!key) {\n      throw new Error(`Signing key for '${id}' not found`)\n    }\n\n    return keystore.sign(key, data)\n  }\n\n  static async verifyIdentity (identity) {\n    // Verify that identity was signed by the ID\n    return Keystore.verify(\n      identity.signatures.publicKey,\n      identity.id,\n      identity.publicKey + identity.signatures.id\n    )\n  }\n}\n\nmodule.exports = OrbitDBIdentityProvider\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pad_string_1 = require(\"./pad-string\");\nfunction encode(input, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    if (Buffer.isBuffer(input)) {\n        return fromBase64(input.toString(\"base64\"));\n    }\n    return fromBase64(Buffer.from(input, encoding).toString(\"base64\"));\n}\n;\nfunction decode(base64url, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    return Buffer.from(toBase64(base64url), \"base64\").toString(encoding);\n}\nfunction toBase64(base64url) {\n    base64url = base64url.toString();\n    return pad_string_1.default(base64url)\n        .replace(/\\-/g, \"+\")\n        .replace(/_/g, \"/\");\n}\nfunction fromBase64(base64) {\n    return base64\n        .replace(/=/g, \"\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\");\n}\nfunction toBuffer(base64url) {\n    return Buffer.from(toBase64(base64url), \"base64\");\n}\nvar base64url = encode;\nbase64url.encode = encode;\nbase64url.decode = decode;\nbase64url.toBase64 = toBase64;\nbase64url.fromBase64 = fromBase64;\nbase64url.toBuffer = toBuffer;\nexports.default = base64url;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _tweetnacl = _interopRequireDefault(require(\"tweetnacl\"));\n\nvar _tweetnaclUtil = _interopRequireDefault(require(\"tweetnacl-util\"));\n\nfunction encodeBase64Url(data) {\n  return _tweetnaclUtil.default.encodeBase64(data).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n/**\n*  The NaclSigner returns a configured function for signing data using the Ed25519 algorithm. It also defines\n*  an interface that you can also implement yourself and use in our other modules.\n*\n*  The signing function itself takes the data as a string parameter and returls a base64Url encoded signature\n*\n*  @example\n*  const signer = NaclSigner(process.env.PRIVATE_KEY)\n*  signer(data, (err, signature) => {\n*    ...\n*  })\n*\n*  @param    {String}         base64PrivateKey    a 64 byte base64 encoded private key\n*  @return   {Function}                     a configured signer function\n*/\n\n\nfunction NaclSigner(base64PrivateKey) {\n  var privateKey = _tweetnaclUtil.default.decodeBase64(base64PrivateKey);\n\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(data) {\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", encodeBase64Url(_tweetnacl.default.sign.detached(_tweetnaclUtil.default.decodeUTF8(data), privateKey)));\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nmodule.exports = NaclSigner;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _elliptic = require(\"elliptic\");\n\nvar _Digest = require(\"./Digest\");\n\nvar secp256k1 = new _elliptic.ec('secp256k1');\n\nfunction leftpad(data) {\n  var size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 64;\n  if (data.length === size) return data;\n  return '0'.repeat(size - data.length) + data;\n}\n/**\n*  The SimpleSigner returns a configured function for signing data. It also defines\n*  an interface that you can also implement yourself and use in our other modules.\n*\n*  @example\n*  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n*  signer(data, (err, signature) => {\n*    ...\n*  })\n*\n*  @param    {String}         hexPrivateKey    a hex encoded private key\n*  @return   {Function}                     a configured signer function\n*/\n\n\nfunction SimpleSigner(hexPrivateKey) {\n  var privateKey = secp256k1.keyFromPrivate(hexPrivateKey);\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = (0, _asyncToGenerator2.default)(\n      /*#__PURE__*/\n      _regenerator.default.mark(function _callee(data) {\n        var _privateKey$sign, r, s, recoveryParam;\n\n        return _regenerator.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _privateKey$sign = privateKey.sign((0, _Digest.sha256)(data)), r = _privateKey$sign.r, s = _privateKey$sign.s, recoveryParam = _privateKey$sign.recoveryParam;\n                return _context.abrupt(\"return\", {\n                  r: leftpad(r.toString('hex')),\n                  s: leftpad(s.toString('hex')),\n                  recoveryParam: recoveryParam\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nmodule.exports = SimpleSigner;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeDID = normalizeDID;\nexports.decodeJWT = decodeJWT;\nexports.createJWT = createJWT;\nexports.verifyJWT = verifyJWT;\nexports.resolveAuthenticator = resolveAuthenticator;\nexports.default = exports.IAT_SKEW = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _VerifierAlgorithm = _interopRequireDefault(require(\"./VerifierAlgorithm\"));\n\nvar _SignerAlgorithm = _interopRequireDefault(require(\"./SignerAlgorithm\"));\n\nvar _base64url = _interopRequireDefault(require(\"base64url\"));\n\nvar _didResolver = _interopRequireDefault(require(\"did-resolver\"));\n\nvar SUPPORTED_PUBLIC_KEY_TYPES = {\n  ES256K: ['Secp256k1VerificationKey2018', 'Secp256k1SignatureVerificationKey2018', 'EcdsaPublicKeySecp256k1'],\n  'ES256K-R': ['Secp256k1VerificationKey2018', 'Secp256k1SignatureVerificationKey2018', 'EcdsaPublicKeySecp256k1'],\n  'Ed25519': ['ED25519SignatureVerification']\n};\nvar JOSE_HEADER = {\n  typ: 'JWT'\n};\nvar defaultAlg = 'ES256K';\n\nfunction encodeSection(data) {\n  return _base64url.default.encode(JSON.stringify(data));\n}\n\nvar IAT_SKEW = 300;\n/**  @module did-jwt/JWT */\n\nexports.IAT_SKEW = IAT_SKEW;\n\nfunction isMNID(id) {\n  return id.match(/^[123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz]+$/);\n}\n\nfunction isDIDOrMNID(mnidOrDid) {\n  return mnidOrDid && (mnidOrDid.match(/^did:/) || isMNID(mnidOrDid));\n}\n\nfunction normalizeDID(mnidOrDid) {\n  if (mnidOrDid.match(/^did:/)) return mnidOrDid; // Backwards compatibility\n\n  if (isMNID(mnidOrDid)) return \"did:uport:\".concat(mnidOrDid);\n  throw new Error(\"Not a valid DID '\".concat(mnidOrDid, \"'\"));\n}\n/**\n*  Decodes a JWT and returns an object representing the payload\n*\n*  @example\n*  decodeJWT('eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJpYXQiOjE1MjU5Mjc1MTcsImF1ZCI6ImRpZDp1cG9ydDoyb3NuZko0V3k3TEJBbTJuUEJYaXJlMVdmUW43NVJyVjZUcyIsImV4cCI6MTU1NzQ2MzQyMSwibmFtZSI6InVQb3J0IERldmVsb3BlciIsImlzcyI6ImRpZDp1cG9ydDoyb3NuZko0V3k3TEJBbTJuUEJYaXJlMVdmUW43NVJyVjZUcyJ9.R7owbvNZoL4ti5ec-Kpktb0datw9Y-FshHsF5R7cXuKaiGlQz1dcOOXbXTOb-wg7-30CDfchFERR6Yc8F61ymw')\n*\n*  @param    {String}            jwt                a JSON Web Token to verify\n*  @return   {Object}                               a JS object representing the decoded JWT\n*/\n\n\nfunction decodeJWT(jwt) {\n  if (!jwt) throw new Error('no JWT passed into decodeJWT');\n  var parts = jwt.match(/^([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)\\.([a-zA-Z0-9_-]+)$/);\n\n  if (parts) {\n    return {\n      header: JSON.parse(_base64url.default.decode(parts[1])),\n      payload: JSON.parse(_base64url.default.decode(parts[2])),\n      signature: parts[3],\n      data: \"\".concat(parts[1], \".\").concat(parts[2])\n    };\n  }\n\n  throw new Error('Incorrect format JWT');\n}\n/**\n*  Creates a signed JWT given an address which becomes the issuer, a signer, and a payload for which the signature is over.\n*\n*  @example\n*  const signer = SimpleSigner(process.env.PRIVATE_KEY)\n*  createJWT({address: '5A8bRWU3F7j3REx3vkJ...', signer}, {key1: 'value', key2: ..., ... }).then(jwt => {\n*      ...\n*  })\n*\n*  @param    {Object}            payload            payload object\n*  @param    {Object}            [options]           an unsigned credential object\n*  @param    {String}            options.issuer      The DID of the issuer (signer) of JWT\n*  @param    {String}            options.alg         The JWT signing algorithm to use. Supports: [ES256K, ES256K-R, Ed25519], Defaults to: ES256K\n*  @param    {SimpleSigner}      options.signer      a signer, reference our SimpleSigner.js\n*  @return   {Promise<Object, Error>}               a promise which resolves with a signed JSON Web Token or rejects with an error\n*/\n\n\nfunction createJWT(_x, _x2) {\n  return _createJWT.apply(this, arguments);\n}\n/**\n*  Verifies given JWT. If the JWT is valid, the promise returns an object including the JWT, the payload of the JWT,\n*  and the did doc of the issuer of the JWT.\n*\n*  @example\n*  verifyJWT('did:uport:eyJ0eXAiOiJKV1QiLCJhbGciOiJFUzI1NksifQ.eyJyZXF1Z....', {audience: '5A8bRWU3F7j3REx3vkJ...', callbackUrl: 'https://...'}).then(obj => {\n*      const did = obj.did // DID of signer\n*      const payload = obj.payload\n*      const doc = obj.doc // DID Document of signer\n*      const jwt = obj.jwt\n*      const signerKeyId = obj.signerKeyId // ID of key in DID document that signed JWT\n*      ...\n*  })\n*\n*  @param    {String}            jwt                a JSON Web Token to verify\n*  @param    {Object}            [options]           an unsigned credential object\n*  @param    {Boolean}           options.auth        Require signer to be listed in the authentication section of the DID document (for Authentication purposes)\n*  @param    {String}            options.audience    DID of the recipient of the JWT\n*  @param    {String}            options.callbackUrl callback url in JWT\n*  @return   {Promise<Object, Error>}               a promise which resolves with a response object or rejects with an error\n*/\n\n\nfunction _createJWT() {\n  _createJWT = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee(payload, _ref) {\n    var issuer, signer, alg, expiresIn, header, timestamps, signingInput, jwtSigner, signature;\n    return _regenerator.default.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            issuer = _ref.issuer, signer = _ref.signer, alg = _ref.alg, expiresIn = _ref.expiresIn;\n\n            if (signer) {\n              _context.next = 3;\n              break;\n            }\n\n            throw new Error('No Signer functionality has been configured');\n\n          case 3:\n            if (issuer) {\n              _context.next = 5;\n              break;\n            }\n\n            throw new Error('No issuing DID has been configured');\n\n          case 5:\n            header = (0, _objectSpread2.default)({}, JOSE_HEADER, {\n              alg: alg || defaultAlg\n            });\n            timestamps = {\n              iat: Math.floor(Date.now() / 1000)\n            };\n\n            if (!expiresIn) {\n              _context.next = 13;\n              break;\n            }\n\n            if (!(typeof expiresIn === 'number')) {\n              _context.next = 12;\n              break;\n            }\n\n            timestamps.exp = timestamps.iat + Math.floor(expiresIn);\n            _context.next = 13;\n            break;\n\n          case 12:\n            throw new Error('JWT expiresIn is not a number');\n\n          case 13:\n            signingInput = [encodeSection(header), encodeSection((0, _objectSpread2.default)({}, timestamps, payload, {\n              iss: issuer\n            }))].join('.');\n            jwtSigner = (0, _SignerAlgorithm.default)(header.alg);\n            _context.next = 17;\n            return jwtSigner(signingInput, signer);\n\n          case 17:\n            signature = _context.sent;\n            return _context.abrupt(\"return\", [signingInput, signature].join('.'));\n\n          case 19:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _createJWT.apply(this, arguments);\n}\n\nfunction verifyJWT(_x3) {\n  return _verifyJWT.apply(this, arguments);\n}\n/**\n* Resolves relevant public keys or other authenticating material used to verify signature from the DID document of provided DID\n*\n*  @example\n*  resolveAuthenticator('ES256K', 'did:uport:2nQtiQG6Cgm1GYTBaaKAgr76uY7iSexUkqX').then(obj => {\n*      const payload = obj.payload\n*      const profile = obj.profile\n*      const jwt = obj.jwt\n*      ...\n*  })\n*\n*  @param    {String}            alg                a JWT algorithm\n*  @param    {String}            did                a Decentralized IDentifier (DID) to lookup\n*  @param    {Boolean}           auth               Restrict public keys to ones specifically listed in the 'authentication' section of DID document\n*  @return   {Promise<Object, Error>}               a promise which resolves with a response object containing an array of authenticators or if non exist rejects with an error\n*/\n\n\nfunction _verifyJWT() {\n  _verifyJWT = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee2(jwt) {\n    var options,\n        aud,\n        _decodeJWT,\n        payload,\n        header,\n        signature,\n        data,\n        _ref2,\n        doc,\n        authenticators,\n        issuer,\n        signer,\n        now,\n        _args2 = arguments;\n\n    return _regenerator.default.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n            aud = options.audience ? normalizeDID(options.audience) : undefined;\n            _decodeJWT = decodeJWT(jwt), payload = _decodeJWT.payload, header = _decodeJWT.header, signature = _decodeJWT.signature, data = _decodeJWT.data;\n            _context2.next = 5;\n            return resolveAuthenticator(header.alg, payload.iss, options.auth);\n\n          case 5:\n            _ref2 = _context2.sent;\n            doc = _ref2.doc;\n            authenticators = _ref2.authenticators;\n            issuer = _ref2.issuer;\n            signer = (0, _VerifierAlgorithm.default)(header.alg)(data, signature, authenticators);\n            now = Math.floor(Date.now() / 1000);\n\n            if (!signer) {\n              _context2.next = 31;\n              break;\n            }\n\n            if (!(payload.iat && payload.iat > now + IAT_SKEW)) {\n              _context2.next = 14;\n              break;\n            }\n\n            throw new Error(\"JWT not valid yet (issued in the future): iat: \".concat(payload.iat, \" > now: \").concat(now));\n\n          case 14:\n            if (!(payload.exp && payload.exp <= now - IAT_SKEW)) {\n              _context2.next = 16;\n              break;\n            }\n\n            throw new Error(\"JWT has expired: exp: \".concat(payload.exp, \" < now: \").concat(now));\n\n          case 16:\n            if (!payload.aud) {\n              _context2.next = 28;\n              break;\n            }\n\n            if (!isDIDOrMNID(payload.aud)) {\n              _context2.next = 24;\n              break;\n            }\n\n            if (aud) {\n              _context2.next = 20;\n              break;\n            }\n\n            throw new Error('JWT audience is required but your app address has not been configured');\n\n          case 20:\n            if (!(aud !== normalizeDID(payload.aud))) {\n              _context2.next = 22;\n              break;\n            }\n\n            throw new Error(\"JWT audience does not match your DID: aud: \".concat(payload.aud, \" !== yours: \").concat(aud));\n\n          case 22:\n            _context2.next = 28;\n            break;\n\n          case 24:\n            if (options.callbackUrl) {\n              _context2.next = 26;\n              break;\n            }\n\n            throw new Error('JWT audience matching your callback url is required but one wasn\\'t passed in');\n\n          case 26:\n            if (!(payload.aud !== options.callbackUrl)) {\n              _context2.next = 28;\n              break;\n            }\n\n            throw new Error(\"JWT audience does not match the callback url: aud: \".concat(payload.aud, \" !== url: \").concat(options.callbackUrl));\n\n          case 28:\n            return _context2.abrupt(\"return\", {\n              payload: payload,\n              doc: doc,\n              issuer: issuer,\n              signer: signer,\n              jwt: jwt\n            });\n\n          case 31:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _verifyJWT.apply(this, arguments);\n}\n\nfunction resolveAuthenticator(_x4, _x5, _x6) {\n  return _resolveAuthenticator.apply(this, arguments);\n}\n\nfunction _resolveAuthenticator() {\n  _resolveAuthenticator = (0, _asyncToGenerator2.default)(\n  /*#__PURE__*/\n  _regenerator.default.mark(function _callee3(alg, mnidOrDid, auth) {\n    var types, issuer, doc, authenticationKeys, authenticators;\n    return _regenerator.default.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            types = SUPPORTED_PUBLIC_KEY_TYPES[alg];\n\n            if (!(!types || types.length === 0)) {\n              _context3.next = 3;\n              break;\n            }\n\n            throw new Error(\"No supported signature types for algorithm \".concat(alg));\n\n          case 3:\n            issuer = normalizeDID(mnidOrDid);\n            _context3.next = 6;\n            return (0, _didResolver.default)(issuer);\n\n          case 6:\n            doc = _context3.sent;\n\n            if (doc) {\n              _context3.next = 9;\n              break;\n            }\n\n            throw new Error(\"Unable to resolve DID document for \".concat(issuer));\n\n          case 9:\n            authenticationKeys = auth ? (doc.authentication || []).map(function (_ref3) {\n              var publicKey = _ref3.publicKey;\n              return publicKey;\n            }) : true;\n            authenticators = (doc.publicKey || []).filter(function (_ref4) {\n              var type = _ref4.type,\n                  id = _ref4.id;\n              return types.find(function (supported) {\n                return supported === type && (!auth || authenticationKeys.indexOf(id) >= 0);\n              });\n            });\n\n            if (!(auth && (!authenticators || authenticators.length === 0))) {\n              _context3.next = 13;\n              break;\n            }\n\n            throw new Error(\"DID document for \".concat(issuer, \" does not have public keys suitable for authenticationg user\"));\n\n          case 13:\n            if (!(!authenticators || authenticators.length === 0)) {\n              _context3.next = 15;\n              break;\n            }\n\n            throw new Error(\"DID document for \".concat(issuer, \" does not have public keys for \").concat(alg));\n\n          case 15:\n            return _context3.abrupt(\"return\", {\n              authenticators: authenticators,\n              issuer: issuer,\n              doc: doc\n            });\n\n          case 16:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  return _resolveAuthenticator.apply(this, arguments);\n}\n\nvar _default = {\n  decodeJWT: decodeJWT,\n  createJWT: createJWT,\n  verifyJWT: verifyJWT,\n  resolveAuthenticator: resolveAuthenticator\n};\nexports.default = _default;","'use strict'\n\nconst EventEmitter = require('events').EventEmitter\n\n/**\n * Interface for OrbitDB Access Controllers\n *\n * Any OrbitDB access controller needs to define and implement\n * the methods defined by the interface here.\n */\nclass AccessController extends EventEmitter {\n  /*\n    Every AC needs to have a 'Factory' method\n    that creates an instance of the AccessController\n  */\n  static async create (orbitdb, options) {}\n\n  /* Return the type for this controller */\n  static get type () {\n    throw new Error(`'static get type ()' needs to be defined in the inheriting class`)\n  }\n\n  /*\n    Return the type for this controller\n    NOTE! This is the only property of the interface that\n    shouldn't be overridden in the inherited Access Controller\n  */\n  get type () {\n    return this.constructor.type\n  }\n\n  /* Each Access Controller has some address to anchor to */\n  get address () {}\n\n  /*\n    Called by the databases (the log) to see if entry should\n    be allowed in the database. Return true if the entry is allowed,\n    false is not allowed\n  */\n  async canAppend (entry, identityProvider) {}\n\n  /* Add and remove access */\n  async grant (access, identity) {}\n  async revoke (access, identity) {}\n\n  /* AC creation and loading */\n  async load (address) {}\n  /* Returns AC manifest parameters object */\n  async save () {}\n  /* Called when the database for this AC gets closed */\n  async close () {}\n}\n\nmodule.exports = AccessController\n","'use strict';\nconst pReduce = require('p-reduce');\n\nmodule.exports = (iterable, iterator) => {\n\tconst ret = [];\n\n\treturn pReduce(iterable, (a, b, i) => {\n\t\treturn Promise.resolve(iterator(b, i)).then(val => {\n\t\t\tret.push(val);\n\t\t});\n\t}).then(() => ret);\n};\n","'use strict'\n\nconst isValidEthAddress = require('./is-valid-eth-address')\nconst io = require('./io.js')\n\nmodule.exports = {\n  io,\n  isValidEthAddress,\n}\n","class ReplicationInfo {\n  constructor () {\n    this.reset()\n  }\n\n  reset () {\n    this.progress = 0\n    this.max = 0\n    this.buffered = 0\n    this.queued = 0\n  }\n}\n\nmodule.exports = ReplicationInfo\n","'use strict'\n\n/*\n  Index\n\n  Index contains the state of a datastore, ie. what data we currently have.\n\n  Index receives a call from a Store when the operations log for the Store\n  was updated, ie. new operations were added. In updateIndex, the Index\n  implements its CRDT logic: add, remove or update items in the data\n  structure. Each new operation received from the operations log is applied\n  in order onto the current state, ie. each new operation changes the data\n  and the state changes.\n\n  Implementing each CRDT as an Index, we can implement both operation-based\n  and state-based CRDTs with the same higher level abstractions.\n\n  To read the current state of the database, Index provides a single public\n  function: `get()`. It is up to the Store to decide what kind of query\n  capabilities it provides to the consumer.\n\n  Usage:\n  ```javascript\n  const Index = new Index(userId)\n  ```\n*/\n\nclass Index {\n  /*\n    @param id - unique identifier of this index, eg. a user id or a hash\n  */\n  constructor (id) {\n    this.id = id\n    this._index = []\n  }\n\n  /*\n    Returns the state of the datastore, ie. most up-to-date data\n    @return - current state\n  */\n  get () {\n    return this._index\n  }\n\n  /*\n    Applies operations to the Index and updates the state\n    @param oplog - the source operations log that called updateIndex\n    @param entries - operations that were added to the log\n  */\n  async updateIndex (oplog, entries) {\n    this._index = oplog.values\n  }\n}\n\nmodule.exports = Index\n","const EventEmitter = require('events').EventEmitter\nconst pMap = require('p-map')\nconst Log = require('ipfs-log')\n\nconst Logger = require('logplease')\nconst logger = Logger.create('replicator', { color: Logger.Colors.Cyan })\nLogger.setLogLevel('ERROR')\n\nconst getNext = e => e.next\nconst flatMap = (res, val) => res.concat(val)\nconst notNull = entry => entry !== null && entry !== undefined\nconst uniqueValues = (res, val) => {\n  res[val] = val\n  return res\n}\n\nconst batchSize = 1\n\nclass Replicator extends EventEmitter {\n  constructor (store, concurrency) {\n    super()\n    this._store = store\n    this._fetching = {}\n    this._stats = {\n      tasksRequested: 0,\n      tasksStarted: 0,\n      tasksProcessed: 0\n    }\n    this._buffer = []\n\n    this._concurrency = concurrency || 128\n    this._queue = {}\n    this._q = new Set()\n\n    // Flush the queue as an emergency switch\n    this._flushTimer = setInterval(() => {\n      if (this.tasksRunning === 0 && Object.keys(this._queue).length > 0) {\n        logger.warn('Had to flush the queue!', Object.keys(this._queue).length, 'items in the queue, ', this.tasksRequested, this.tasksFinished, ' tasks requested/finished')\n        setTimeout(() => this._processQueue(), 0)\n      }\n    }, 3000)\n  }\n\n  /**\n   * Returns the number of tasks started during the life time\n   * @return {[Integer]} [Number of tasks started]\n   */\n  get tasksRequested () {\n    return this._stats.tasksRequested\n  }\n\n  /**\n   * Returns the number of tasks started during the life time\n   * @return {[Integer]} [Number of tasks running]\n   */\n  get tasksStarted () {\n    return this._stats.tasksStarted\n  }\n\n  /**\n   * Returns the number of tasks running currently\n   * @return {[Integer]} [Number of tasks running]\n   */\n  get tasksRunning () {\n    return this._stats.tasksStarted - this._stats.tasksProcessed\n  }\n\n  /**\n   * Returns the number of tasks currently queued\n   * @return {[Integer]} [Number of tasks queued]\n   */\n  get tasksQueued () {\n    return Math.max(Object.keys(this._queue).length - this.tasksRunning, 0)\n  }\n\n  /**\n   * Returns the number of tasks finished during the life time\n   * @return {[Integer]} [Number of tasks finished]\n   */\n  get tasksFinished () {\n    return this._stats.tasksProcessed\n  }\n\n  /**\n   * Returns the hashes currently queued\n   * @return {[Array<String>]} [Queued hashes]\n   */\n  getQueue () {\n    return Object.values(this._queue)\n  }\n\n  /*\n    Process new heads.\n   */\n  load (entries) {\n    const notKnown = entry => {\n      const hash = entry.hash || entry\n      return !this._store._oplog.has(hash) && !this._fetching[hash] && !this._queue[hash]\n    }\n\n    try {\n      entries\n        .filter(notNull)\n        .filter(notKnown)\n        .forEach(this._addToQueue.bind(this))\n\n      setTimeout(() => this._processQueue(), 0)\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  stop () {\n    // Clears the queue flusher\n    clearInterval(this._flushTimer)\n  }\n\n  _addToQueue (entry) {\n    const hash = entry.hash || entry\n    this._stats.tasksRequested += 1\n    this._queue[hash] = entry\n  }\n\n  async _processQueue () {\n    if (this.tasksRunning < this._concurrency) {\n      const capacity = this._concurrency - this.tasksRunning\n      const items = Object.values(this._queue).slice(0, capacity).filter(notNull)\n      items.forEach(entry => delete this._queue[entry.hash || entry])\n\n      const flattenAndGetUniques = (nexts) => nexts.reduce(flatMap, []).reduce(uniqueValues, {})\n      const processValues = (nexts) => {\n        const values = Object.values(nexts).filter(notNull)\n\n        if ((items.length > 0 && this._buffer.length > 0) ||\n        (this.tasksRunning === 0 && this._buffer.length > 0)) {\n          const logs = this._buffer.slice()\n          this._buffer = []\n          this.emit('load.end', logs)\n        }\n\n        if (values.length > 0) {\n          this.load(values)\n        }\n      }\n\n      return pMap(items, e => this._processOne(e))\n        .then(flattenAndGetUniques)\n        .then(processValues)\n    }\n  }\n\n  async _processOne (entry) {\n    const hash = entry.hash || entry\n\n    if (this._store._oplog.has(hash) || this._fetching[hash]) {\n      return\n    }\n\n    this._fetching[hash] = hash\n    this.emit('load.added', entry)\n    this._stats.tasksStarted += 1\n\n    const exclude = []\n    const log = await Log.fromEntryHash(this._store._ipfs, this._store.identity, hash, { logId: this._store._oplog.id, access: this._store.access, length: batchSize, exclude })\n    this._buffer.push(log)\n\n    const latest = log.values[0]\n    delete this._queue[hash]\n\n    // Mark this task as processed\n    this._stats.tasksProcessed += 1\n\n    // Notify subscribers that we made progress\n    this.emit('load.progress', this._id, hash, latest, null, this._buffer.length)\n\n    // Return all next pointers\n    return log.values.map(getNext).reduce(flatMap, [])\n  }\n}\n\nmodule.exports = Replicator\n","'use strict';\nconst pReduce = require('p-reduce');\n\nmodule.exports = (iterable, iterator) => pReduce(iterable, (a, b, i) => iterator(b, i)).then(() => iterable);\n","'use strict'\n\nexports.deepEqual = (a, b) => {\n  const propsA = Object.getOwnPropertyNames(a)\n  const propsB = Object.getOwnPropertyNames(b)\n\n  if(propsA.length !== propsB.length)\n    return false\n\n  for(let i = 0; i < propsA.length; i ++) {\n    const prop = propsA[i]\n    if(a[prop] !== b[prop])\n      return false\n  }\n\n  return true\n}\n\nclass OperationTuple3 {\n  constructor (value, added, removed) {\n    this.value = value\n    this.added = new Set(added)\n    this.removed = new Set(removed)\n  }\n\n  static create (value, added, removed) {\n    return new OperationTuple3(value, added, removed)\n  }\n\n  static from (json) {\n    return OperationTuple3.create(json.value, json.added, json.removed)\n  }\n}\n\nexports.OperationTuple3 = OperationTuple3\n","'use strict'\n\nmodule.exports = 'ipfs-pubsub-direct-channel/v1'\n","'use strict'\n\nconst getPeerID = async (ipfs) => {\n  const peerInfo = await ipfs.id()\n  return peerInfo.id\n}\n\nmodule.exports = getPeerID\n","'use strict'\n\nconst waitForPeers = async (ipfs, peersToWait, topic) => {\n  const checkPeers = async () => {\n    const peers = await ipfs.pubsub.peers(topic)\n    const hasAllPeers = peersToWait.map((e) => peers.includes(e)).filter((e) => e === false).length === 0\n    return hasAllPeers\n  }\n\n  if (await checkPeers()) {\n    return Promise.resolve()\n  }\n\n  return new Promise(async (resolve, reject) => {\n    const interval = setInterval(async () => {\n      try {\n        if (await checkPeers()) {\n          clearInterval(interval)\n          resolve()\n        }\n      } catch (e) {\n        reject(e)\n      }\n    }, 100)\n  })\n}\n\nmodule.exports = waitForPeers\n","'use strict'\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = (_message) => {\n  let message = _message\n  if (!Buffer.isBuffer(message)) {\n    message = Buffer.from(message)\n  }\n  return message\n}\n","'use strict'\n\nexports.test = function (key) {\n  return function test (impl) {\n    try {\n      impl.cmp(key, 0)\n      return true\n    } catch (err) {\n      return false\n    }\n  }\n}\n\nexports.binaryKeys = exports.test(new Uint8Array(0))\nexports.arrayKeys = exports.test([1])\n","/* global IDBKeyRange */\n\n'use strict'\n\nvar inherits = require('inherits')\nvar AbstractIterator = require('abstract-leveldown').AbstractIterator\nvar ltgt = require('ltgt')\nvar mixedToBuffer = require('./util/mixed-to-buffer')\nvar setImmediate = require('./util/immediate')\nvar noop = function () {}\n\nmodule.exports = Iterator\n\nfunction Iterator (db, location, options) {\n  AbstractIterator.call(this, db)\n\n  this._limit = options.limit\n  this._count = 0\n  this._callback = null\n  this._cache = []\n  this._completed = false\n  this._aborted = false\n  this._error = null\n  this._transaction = null\n\n  this._keyAsBuffer = options.keyAsBuffer\n  this._valueAsBuffer = options.valueAsBuffer\n\n  if (this._limit === 0) {\n    this._completed = true\n    return\n  }\n\n  try {\n    var keyRange = this.createKeyRange(options)\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just return 0 results.\n    this._completed = true\n    return\n  }\n\n  this.createIterator(location, keyRange, options.reverse)\n}\n\ninherits(Iterator, AbstractIterator)\n\nIterator.prototype.createKeyRange = function (options) {\n  var lower = ltgt.lowerBound(options)\n  var upper = ltgt.upperBound(options)\n  var lowerOpen = ltgt.lowerBoundExclusive(options)\n  var upperOpen = ltgt.upperBoundExclusive(options)\n\n  if (lower !== undefined && upper !== undefined) {\n    return IDBKeyRange.bound(lower, upper, lowerOpen, upperOpen)\n  } else if (lower !== undefined) {\n    return IDBKeyRange.lowerBound(lower, lowerOpen)\n  } else if (upper !== undefined) {\n    return IDBKeyRange.upperBound(upper, upperOpen)\n  } else {\n    return null\n  }\n}\n\nIterator.prototype.createIterator = function (location, keyRange, reverse) {\n  var self = this\n  var transaction = this.db.db.transaction([location], 'readonly')\n  var store = transaction.objectStore(location)\n  var req = store.openCursor(keyRange, reverse ? 'prev' : 'next')\n\n  req.onsuccess = function (ev) {\n    var cursor = ev.target.result\n    if (cursor) self.onItem(cursor)\n  }\n\n  this._transaction = transaction\n\n  // If an error occurs (on the request), the transaction will abort.\n  transaction.onabort = function () {\n    self.onAbort(self._transaction.error || new Error('aborted by user'))\n  }\n\n  transaction.oncomplete = function () {\n    self.onComplete()\n  }\n}\n\nIterator.prototype.onItem = function (cursor) {\n  this._cache.push(cursor.key, cursor.value)\n\n  if (this._limit <= 0 || ++this._count < this._limit) {\n    cursor['continue']()\n  }\n\n  this.maybeNext()\n}\n\nIterator.prototype.onAbort = function (err) {\n  this._aborted = true\n  this._error = err\n  this.maybeNext()\n}\n\nIterator.prototype.onComplete = function () {\n  this._completed = true\n  this.maybeNext()\n}\n\nIterator.prototype.maybeNext = function () {\n  if (this._callback) {\n    this._next(this._callback)\n    this._callback = null\n  }\n}\n\nIterator.prototype._next = function (callback) {\n  if (this._aborted) {\n    // The error should be picked up by either next() or end().\n    var err = this._error\n    this._error = null\n\n    setImmediate(function () {\n      callback(err)\n    })\n  } else if (this._cache.length > 0) {\n    var key = this._cache.shift()\n    var value = this._cache.shift()\n\n    if (this._keyAsBuffer) key = mixedToBuffer(key)\n    if (this._valueAsBuffer) value = mixedToBuffer(value)\n\n    setImmediate(function () {\n      callback(null, key, value)\n    })\n  } else if (this._completed) {\n    setImmediate(callback)\n  } else {\n    this._callback = callback\n  }\n}\n\nIterator.prototype._end = function (callback) {\n  if (this._aborted || this._completed) {\n    var err = this._error\n\n    setImmediate(function () {\n      callback(err)\n    })\n\n    return\n  }\n\n  // Don't advance the cursor anymore, and the transaction will complete\n  // on its own in the next tick. This approach is much cleaner than calling\n  // transaction.abort() with its unpredictable event order.\n  this.onItem = noop\n  this.onAbort = callback\n  this.onComplete = callback\n}\n","exports.AbstractLevelDOWN = require('./abstract-leveldown')\nexports.AbstractIterator = require('./abstract-iterator')\nexports.AbstractChainedBatch = require('./abstract-chained-batch')\n","'use strict'\n\nvar toBuffer = require('typedarray-to-buffer')\n\nmodule.exports = function (value) {\n  if (value instanceof Uint8Array) return toBuffer(value)\n  else if (value instanceof ArrayBuffer) return Buffer.from(value)\n  else return Buffer.from(String(value))\n}\n","module.exports = require('immediate')\n","var events = require('events')\nvar inherits = require('inherits')\n\nmodule.exports = LRU\n\nfunction LRU (opts) {\n  if (!(this instanceof LRU)) return new LRU(opts)\n  if (typeof opts === 'number') opts = {max: opts}\n  if (!opts) opts = {}\n  events.EventEmitter.call(this)\n  this.cache = {}\n  this.head = this.tail = null\n  this.length = 0\n  this.max = opts.max || 1000\n  this.maxAge = opts.maxAge || 0\n}\n\ninherits(LRU, events.EventEmitter)\n\nObject.defineProperty(LRU.prototype, 'keys', {\n  get: function () { return Object.keys(this.cache) }\n})\n\nLRU.prototype.clear = function () {\n  this.cache = {}\n  this.head = this.tail = null\n  this.length = 0\n}\n\nLRU.prototype.remove = function (key) {\n  if (typeof key !== 'string') key = '' + key\n  if (!this.cache.hasOwnProperty(key)) return\n\n  var element = this.cache[key]\n  delete this.cache[key]\n  this._unlink(key, element.prev, element.next)\n  return element.value\n}\n\nLRU.prototype._unlink = function (key, prev, next) {\n  this.length--\n\n  if (this.length === 0) {\n    this.head = this.tail = null\n  } else {\n    if (this.head === key) {\n      this.head = prev\n      this.cache[this.head].next = null\n    } else if (this.tail === key) {\n      this.tail = next\n      this.cache[this.tail].prev = null\n    } else {\n      this.cache[prev].next = next\n      this.cache[next].prev = prev\n    }\n  }\n}\n\nLRU.prototype.peek = function (key) {\n  if (!this.cache.hasOwnProperty(key)) return\n\n  var element = this.cache[key]\n\n  if (!this._checkAge(key, element)) return\n  return element.value\n}\n\nLRU.prototype.set = function (key, value) {\n  if (typeof key !== 'string') key = '' + key\n\n  var element\n\n  if (this.cache.hasOwnProperty(key)) {\n    element = this.cache[key]\n    element.value = value\n    if (this.maxAge) element.modified = Date.now()\n\n    // If it's already the head, there's nothing more to do:\n    if (key === this.head) return value\n    this._unlink(key, element.prev, element.next)\n  } else {\n    element = {value: value, modified: 0, next: null, prev: null}\n    if (this.maxAge) element.modified = Date.now()\n    this.cache[key] = element\n\n    // Eviction is only possible if the key didn't already exist:\n    if (this.length === this.max) this.evict()\n  }\n\n  this.length++\n  element.next = null\n  element.prev = this.head\n\n  if (this.head) this.cache[this.head].next = key\n  this.head = key\n\n  if (!this.tail) this.tail = key\n  return value\n}\n\nLRU.prototype._checkAge = function (key, element) {\n  if (this.maxAge && (Date.now() - element.modified) > this.maxAge) {\n    this.remove(key)\n    this.emit('evict', {key: key, value: element.value})\n    return false\n  }\n  return true\n}\n\nLRU.prototype.get = function (key) {\n  if (typeof key !== 'string') key = '' + key\n  if (!this.cache.hasOwnProperty(key)) return\n\n  var element = this.cache[key]\n\n  if (!this._checkAge(key, element)) return\n\n  if (this.head !== key) {\n    if (key === this.tail) {\n      this.tail = element.next\n      this.cache[this.tail].prev = null\n    } else {\n      // Set prev.next -> element.next:\n      this.cache[element.prev].next = element.next\n    }\n\n    // Set element.next.prev -> element.prev:\n    this.cache[element.next].prev = element.prev\n\n    // Element is the new head\n    this.cache[this.head].next = key\n    element.prev = this.head\n    element.next = null\n    this.head = key\n  }\n\n  return element.value\n}\n\nLRU.prototype.evict = function () {\n  if (!this.tail) return\n  var key = this.tail\n  var value = this.remove(this.tail)\n  this.emit('evict', {key: key, value: value})\n}\n","'use strict'\n\nconst verifiers = {\n  'v0': require('./verifierv0'),\n  'v1': require('./verifierv1')\n}\n\nmodule.exports = {\n  verifier: (v) => {\n    return verifiers[v]\n  }\n}\n","'use strict'\nmodule.exports = require('./lib')(require('./lib/elliptic'))\n","var EventEmitter = require('events').EventEmitter\nvar inherits = require('util').inherits\nvar extend = require('xtend')\nvar DeferredLevelDOWN = require('deferred-leveldown')\nvar IteratorStream = require('level-iterator-stream')\nvar Batch = require('./batch')\nvar errors = require('level-errors')\nvar assert = require('assert')\nvar promisify = require('./promisify')\nvar getCallback = require('./common').getCallback\nvar getOptions = require('./common').getOptions\n\nvar WriteError = errors.WriteError\nvar ReadError = errors.ReadError\nvar NotFoundError = errors.NotFoundError\nvar OpenError = errors.OpenError\nvar InitializationError = errors.InitializationError\n\n// Possible AbstractLevelDOWN#status values:\n//  - 'new'     - newly created, not opened or closed\n//  - 'opening' - waiting for the database to be opened, post open()\n//  - 'open'    - successfully opened the database, available for use\n//  - 'closing' - waiting for the database to be closed, post close()\n//  - 'closed'  - database has been successfully closed, should not be\n//                 used except for another open() operation\n\nfunction LevelUP (db, options, callback) {\n  if (!(this instanceof LevelUP)) {\n    return new LevelUP(db, options, callback)\n  }\n\n  var error\n\n  EventEmitter.call(this)\n  this.setMaxListeners(Infinity)\n\n  if (typeof options === 'function') {\n    callback = options\n    options = {}\n  }\n\n  options = options || {}\n\n  if (!db || typeof db !== 'object') {\n    error = new InitializationError('First argument must be an abstract-leveldown compliant store')\n    if (typeof callback === 'function') {\n      return process.nextTick(callback, error)\n    }\n    throw error\n  }\n\n  assert.strictEqual(typeof db.status, 'string', '.status required, old abstract-leveldown')\n\n  this.options = getOptions(options)\n  this._db = db\n  this.db = new DeferredLevelDOWN(db)\n  this.open(callback)\n}\n\nLevelUP.prototype.emit = EventEmitter.prototype.emit\nLevelUP.prototype.once = EventEmitter.prototype.once\ninherits(LevelUP, EventEmitter)\n\nLevelUP.prototype.open = function (opts, callback) {\n  var self = this\n  var promise\n\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = null\n  }\n\n  if (!callback) {\n    callback = promisify()\n    promise = callback.promise\n  }\n\n  if (!opts) {\n    opts = this.options\n  }\n\n  if (this.isOpen()) {\n    process.nextTick(callback, null, self)\n    return promise\n  }\n\n  if (this._isOpening()) {\n    this.once('open', function () { callback(null, self) })\n    return promise\n  }\n\n  this.emit('opening')\n\n  this.db.open(opts, function (err) {\n    if (err) {\n      return callback(new OpenError(err))\n    }\n    self.db = self._db\n    callback(null, self)\n    self.emit('open')\n    self.emit('ready')\n  })\n\n  return promise\n}\n\nLevelUP.prototype.close = function (callback) {\n  var self = this\n  var promise\n\n  if (!callback) {\n    callback = promisify()\n    promise = callback.promise\n  }\n\n  if (this.isOpen()) {\n    this.db.close(function () {\n      self.emit('closed')\n      callback.apply(null, arguments)\n    })\n    this.emit('closing')\n    this.db = new DeferredLevelDOWN(this._db)\n  } else if (this.isClosed()) {\n    process.nextTick(callback)\n  } else if (this.db.status === 'closing') {\n    this.once('closed', callback)\n  } else if (this._isOpening()) {\n    this.once('open', function () {\n      self.close(callback)\n    })\n  }\n\n  return promise\n}\n\nLevelUP.prototype.isOpen = function () {\n  return this.db.status === 'open'\n}\n\nLevelUP.prototype._isOpening = function () {\n  return this.db.status === 'opening'\n}\n\nLevelUP.prototype.isClosed = function () {\n  return (/^clos|new/).test(this.db.status)\n}\n\nLevelUP.prototype.get = function (key, options, callback) {\n  if (key === null || key === undefined) {\n    throw new ReadError('get() requires a key argument')\n  }\n\n  var promise\n\n  callback = getCallback(options, callback)\n\n  if (!callback) {\n    callback = promisify()\n    promise = callback.promise\n  }\n\n  if (maybeError(this, callback)) { return promise }\n\n  options = getOptions(options)\n\n  this.db.get(key, options, function (err, value) {\n    if (err) {\n      if ((/notfound/i).test(err) || err.notFound) {\n        err = new NotFoundError('Key not found in database [' + key + ']', err)\n      } else {\n        err = new ReadError(err)\n      }\n      return callback(err)\n    }\n    callback(null, value)\n  })\n\n  return promise\n}\n\nLevelUP.prototype.put = function (key, value, options, callback) {\n  if (key === null || key === undefined) {\n    throw new WriteError('put() requires a key argument')\n  }\n\n  var self = this\n  var promise\n\n  callback = getCallback(options, callback)\n\n  if (!callback) {\n    callback = promisify()\n    promise = callback.promise\n  }\n\n  if (maybeError(this, callback)) { return promise }\n\n  options = getOptions(options)\n\n  this.db.put(key, value, options, function (err) {\n    if (err) {\n      return callback(new WriteError(err))\n    }\n    self.emit('put', key, value)\n    callback()\n  })\n\n  return promise\n}\n\nLevelUP.prototype.del = function (key, options, callback) {\n  if (key === null || key === undefined) {\n    throw new WriteError('del() requires a key argument')\n  }\n\n  var self = this\n  var promise\n\n  callback = getCallback(options, callback)\n\n  if (!callback) {\n    callback = promisify()\n    promise = callback.promise\n  }\n\n  if (maybeError(this, callback)) { return promise }\n\n  options = getOptions(options)\n\n  this.db.del(key, options, function (err) {\n    if (err) {\n      return callback(new WriteError(err))\n    }\n    self.emit('del', key)\n    callback()\n  })\n\n  return promise\n}\n\nLevelUP.prototype.batch = function (arr, options, callback) {\n  if (!arguments.length) {\n    return new Batch(this)\n  }\n\n  if (!Array.isArray(arr)) {\n    throw new WriteError('batch() requires an array argument')\n  }\n\n  var self = this\n  var promise\n\n  callback = getCallback(options, callback)\n\n  if (!callback) {\n    callback = promisify()\n    promise = callback.promise\n  }\n\n  if (maybeError(this, callback)) { return promise }\n\n  options = getOptions(options)\n\n  this.db.batch(arr, options, function (err) {\n    if (err) {\n      return callback(new WriteError(err))\n    }\n    self.emit('batch', arr)\n    callback()\n  })\n\n  return promise\n}\n\nLevelUP.prototype.iterator = function (options) {\n  return this.db.iterator(options)\n}\n\nLevelUP.prototype.readStream =\nLevelUP.prototype.createReadStream = function (options) {\n  options = extend({ keys: true, values: true }, options)\n  if (typeof options.limit !== 'number') { options.limit = -1 }\n  return new IteratorStream(this.db.iterator(options), options)\n}\n\nLevelUP.prototype.keyStream =\nLevelUP.prototype.createKeyStream = function (options) {\n  return this.createReadStream(extend(options, { keys: true, values: false }))\n}\n\nLevelUP.prototype.valueStream =\nLevelUP.prototype.createValueStream = function (options) {\n  return this.createReadStream(extend(options, { keys: false, values: true }))\n}\n\nLevelUP.prototype.toString = function () {\n  return 'LevelUP'\n}\n\nfunction maybeError (db, callback) {\n  if (!db._isOpening() && !db.isOpen()) {\n    process.nextTick(callback, new ReadError('Database is not open'))\n    return true\n  }\n}\n\nLevelUP.errors = errors\nmodule.exports = LevelUP.default = LevelUP\n","'use strict'\n\nconst debug = require('debug')\nconst setImmediate = require('async/setImmediate')\n\nconst log = debug('repo:lock')\n\nconst lockFile = 'repo.lock'\n\nconst LOCKS = {}\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @param {function(Error, lock)} callback\n * @returns {void}\n */\nexports.lock = (dir, callback) => {\n  const file = dir + '/' + lockFile\n  log('locking %s', file)\n  LOCKS[file] = true\n  const closer = {\n    close (cb) {\n      if (LOCKS[file]) {\n        delete LOCKS[file]\n      }\n      setImmediate(cb)\n    }\n  }\n  setImmediate(() => {\n    callback(null, closer)\n  })\n}\n\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @param {function(Error, bool)} callback\n * @returns {void}\n */\nexports.locked = (dir, callback) => {\n  const file = dir + '/' + lockFile\n  log('checking lock: %s')\n\n  const locked = LOCKS[file]\n  setImmediate(() => {\n    callback(null, locked)\n  })\n}\n","'use strict'\n\nmodule.exports = {\n  repoVersion: 7\n}\n","'use strict'\n\nexports.create = function createBackend (name, path, options) {\n  const Ctor = options.storageBackends[name]\n  const backendOptions = Object.assign({}, options.storageBackendOptions[name] || {})\n  return new Ctor(path, backendOptions)\n}\n","'use strict'\n\n// Default configuration for the datastore spec in node.js\nmodule.exports = {\n  Spec: {\n    type: 'mount',\n    mounts: [\n      {\n        mountpoint: '/blocks',\n        type: 'measure',\n        prefix: 'flatfs.datastore',\n        child: {\n          type: 'flatfs',\n          path: 'blocks',\n          sync: true,\n          shardFunc: '/repo/flatfs/shard/v1/next-to-last/2'\n        }\n      },\n      {\n        mountpoint: '/',\n        type: 'measure',\n        prefix: 'leveldb.datastore',\n        child: {\n          type: 'levelds',\n          path: 'datastore',\n          compression: 'none'\n        }\n      }\n    ]\n  }\n}\n","'use strict'\n\nexports.ERR_REPO_NOT_INITIALIZED = 'ERR_REPO_NOT_INITIALIZED'\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v8.1.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    hasSymbol = typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol',\r\n\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if only one character,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.$|[+-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '1e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) -- > 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (hasSymbol) {\r\n      P[Symbol.toStringTag] = 'BigNumber';\r\n\r\n      // Node.js v10.12.0+\r\n      P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;\r\n    }\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","!function(t,n){\"object\"==typeof exports&&\"undefined\"!=typeof module?module.exports=function(t,n,e,i,o){for(n=n.split?n.split(\".\"):n,i=0;i<n.length;i++)t=t?t[n[i]]:o;return t===o?e:t}:\"function\"==typeof define&&define.amd?define(function(){return function(t,n,e,i,o){for(n=n.split?n.split(\".\"):n,i=0;i<n.length;i++)t=t?t[n[i]]:o;return t===o?e:t}}):t.dlv=function(t,n,e,i,o){for(n=n.split?n.split(\".\"):n,i=0;i<n.length;i++)t=t?t[n[i]]:o;return t===o?e:t}}(this);\n//# sourceMappingURL=dlv.umd.js.map\n","'use strict'\n\nmodule.exports = function pull (a) {\n  var length = arguments.length\n  if (typeof a === 'function' && a.length === 1) {\n    var args = new Array(length)\n    for(var i = 0; i < length; i++)\n      args[i] = arguments[i]\n    return function (read) {\n      if (args == null) {\n        throw new TypeError(\"partial sink should only be called once!\")\n      }\n\n      // Grab the reference after the check, because it's always an array now\n      // (engines like that kind of consistency).\n      var ref = args\n      args = null\n\n      // Prioritize common case of small number of pulls.\n      switch (length) {\n      case 1: return pull(read, ref[0])\n      case 2: return pull(read, ref[0], ref[1])\n      case 3: return pull(read, ref[0], ref[1], ref[2])\n      case 4: return pull(read, ref[0], ref[1], ref[2], ref[3])\n      default:\n        ref.unshift(read)\n        return pull.apply(null, ref)\n      }\n    }\n  }\n\n  var read = a\n\n  if (read && typeof read.source === 'function') {\n    read = read.source\n  }\n\n  for (var i = 1; i < length; i++) {\n    var s = arguments[i]\n    if (typeof s === 'function') {\n      read = s(read)\n    } else if (s && typeof s === 'object') {\n      s.sink(read)\n      read = s.source\n    }\n  }\n\n  return read\n}\n","'use strict'\n\nconst Key = require('interface-datastore').Key\nconst debug = require('debug')\nconst log = debug('repo:version')\n\nconst versionKey = new Key('version')\n\nmodule.exports = (store) => {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     * @param {function(Error, bool)} callback\n     * @returns {void}\n     */\n    exists (callback) {\n      store.has(versionKey, callback)\n    },\n    /**\n     * Get the current version.\n     *\n     * @param {function(Error, number)} callback\n     * @returns {void}\n     */\n    get (callback) {\n      store.get(versionKey, (err, buf) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, parseInt(buf.toString().trim(), 10))\n      })\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    set (version, callback) {\n      store.put(versionKey, Buffer.from(String(version)), callback)\n    },\n    /**\n     * Check the current version, and return an error on missmatch\n     * @param {number} expected\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    check (expected, callback) {\n      this.get((err, version) => {\n        if (err) {\n          return callback(err)\n        }\n        log('comparing version: %s and %s', version, expected)\n\n        // Version 6 and 7 are the same\n        // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n        const compatibleVersion = (version === 6 && expected === 7) || (expected === 6 && version === 7)\n\n        if (version !== expected && !compatibleVersion) {\n          return callback(new Error(`ipfs repo needs migration: expected version v${expected}, found version v${version}`))\n        }\n        callback()\n      })\n    }\n  }\n}\n","'use strict'\n\nconst Key = require('interface-datastore').Key\n\nconst apiFile = new Key('api')\n\nmodule.exports = (store) => {\n  return {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @param {function(Error, Object)} callback\n     * @returns {void}\n     */\n    get (callback) {\n      store.get(apiFile, (err, value) => callback(err, value && value.toString()))\n    },\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {Object} value - the api address to be written\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    set (value, callback) {\n      store.put(apiFile, Buffer.from(value.toString()), callback)\n    },\n    /**\n     * Deletes api file\n     *\n     * @param {function(Error, bool)} callback\n     * @returns {void}\n     */\n    delete (callback) {\n      store.delete(apiFile, callback)\n    }\n  }\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = eachLimit;\n\nvar _eachOf = require('./eachOf');\n\nvar _eachOf2 = _interopRequireDefault(_eachOf);\n\nvar _withoutIndex = require('./internal/withoutIndex');\n\nvar _withoutIndex2 = _interopRequireDefault(_withoutIndex);\n\nvar _wrapAsync = require('./internal/wrapAsync');\n\nvar _wrapAsync2 = _interopRequireDefault(_wrapAsync);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @example\n *\n * // assuming openFiles is an array of file names and saveFile is a function\n * // to save the modified contents of that file:\n *\n * async.each(openFiles, saveFile, function(err){\n *   // if any of the saves produced an error, err would equal that error\n * });\n *\n * // assuming openFiles is an array of file names\n * async.each(openFiles, function(file, callback) {\n *\n *     // Perform operation on file here.\n *     console.log('Processing file ' + file);\n *\n *     if( file.length > 32 ) {\n *       console.log('This file name is too long');\n *       callback('File name too long');\n *     } else {\n *       // Do work to process file here\n *       console.log('File processed');\n *       callback();\n *     }\n * }, function(err) {\n *     // if any of the file processing produced an error, err would equal that error\n *     if( err ) {\n *       // One of the iterations produced an error.\n *       // All processing will now stop.\n *       console.log('A file failed to process');\n *     } else {\n *       console.log('All files have been processed successfully');\n *     }\n * });\n */\nfunction eachLimit(coll, iteratee, callback) {\n  (0, _eachOf2.default)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);\n}\nmodule.exports = exports['default'];","'use strict'\n\nvar drain = require('./drain')\n\nmodule.exports = function reduce (reducer, acc, cb ) {\n  if(!cb) cb = acc, acc = null\n  var sink = drain(function (data) {\n    acc = reducer(acc, data)\n  }, function (err) {\n    cb(err, acc)\n  })\n  if (arguments.length === 2)\n    return function (source) {\n      source(null, function (end, data) {\n        //if ended immediately, and no initial...\n        if(end) return cb(end === true ? null : end)\n        acc = data; sink(source)\n      })\n    }\n  else\n    return sink\n}\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = series;\n\nvar _parallel = require('./internal/parallel');\n\nvar _parallel2 = _interopRequireDefault(_parallel);\n\nvar _eachOfSeries = require('./eachOfSeries');\n\nvar _eachOfSeries2 = _interopRequireDefault(_eachOfSeries);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Run the functions in the `tasks` collection in series, each one running once\n * the previous function has completed. If any functions in the series pass an\n * error to its callback, no more functions are run, and `callback` is\n * immediately called with the value of the error. Otherwise, `callback`\n * receives an array of results when `tasks` have completed.\n *\n * It is also possible to use an object instead of an array. Each property will\n * be run as a function, and the results will be passed to the final `callback`\n * as an object instead of an array. This can be a more readable way of handling\n *  results from {@link async.series}.\n *\n * **Note** that while many implementations preserve the order of object\n * properties, the [ECMAScript Language Specification](http://www.ecma-international.org/ecma-262/5.1/#sec-8.6)\n * explicitly states that\n *\n * > The mechanics and order of enumerating the properties is not specified.\n *\n * So if you rely on the order in which your series of functions are executed,\n * and want this to work on all platforms, consider using an array.\n *\n * @name series\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed. This function gets a results array (or object)\n * containing all the result arguments passed to the `task` callbacks. Invoked\n * with (err, result).\n * @example\n * async.series([\n *     function(callback) {\n *         // do some stuff ...\n *         callback(null, 'one');\n *     },\n *     function(callback) {\n *         // do some more stuff ...\n *         callback(null, 'two');\n *     }\n * ],\n * // optional callback\n * function(err, results) {\n *     // results is now equal to ['one', 'two']\n * });\n *\n * async.series({\n *     one: function(callback) {\n *         setTimeout(function() {\n *             callback(null, 1);\n *         }, 200);\n *     },\n *     two: function(callback){\n *         setTimeout(function() {\n *             callback(null, 2);\n *         }, 100);\n *     }\n * }, function(err, results) {\n *     // results is now equal to: {one: 1, two: 2}\n * });\n */\nfunction series(tasks, callback) {\n  (0, _parallel2.default)(_eachOfSeries2.default, tasks, callback);\n}\nmodule.exports = exports['default'];","'use strict'\n\nconst Key = require('interface-datastore').Key\nconst sortKeys = require('sort-keys')\n\nconst specKey = new Key('datastore_spec')\n\nmodule.exports = (store) => {\n  return {\n    /**\n     * Check if a datastore spec file exists.\n     *\n     * @param {function(Error, bool)} callback\n     * @returns {void}\n     */\n    exists (callback) {\n      store.has(specKey, callback)\n    },\n    /**\n     * Get the current datastore spec.\n     *\n     * @param {function(Error, number)} callback\n     * @returns {void}\n     */\n    get (callback) {\n      store.get(specKey, (err, buf) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, JSON.parse(buf.toString()))\n      })\n    },\n    /**\n     * Set the datastore spec of the repo, writing it to the underlying store.\n     *\n     * @param {number} spec\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    set (spec, callback) {\n      store.put(specKey, Buffer.from(JSON.stringify(sortKeys(spec, { deep: true }))), callback)\n    }\n  }\n}\n","'use strict'\n\nconst Key = require('interface-datastore').Key\nconst queue = require('async/queue')\nconst waterfall = require('async/waterfall')\nconst _get = require('dlv')\nconst _set = require('just-safe-set')\nconst Buffer = require('buffer').Buffer\n\nconst configKey = new Key('config')\n\nmodule.exports = (store) => {\n  const setQueue = queue(_doSet, 1)\n\n  const configStore = {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @param {String} key - the config key to get\n     * @param {function(Error, Object)} callback\n     * @returns {void}\n     */\n    get (key, callback) {\n      if (typeof key === 'function') {\n        callback = key\n        key = undefined\n      }\n      if (!key) {\n        key = undefined\n      }\n      store.get(configKey, (err, encodedValue) => {\n        if (err) { return callback(err) }\n\n        let config\n        try {\n          config = JSON.parse(encodedValue.toString())\n        } catch (err) {\n          return callback(err)\n        }\n\n        if (typeof key === 'undefined') {\n          return callback(null, config)\n        }\n\n        if (typeof key !== 'string') {\n          return callback(new Error('Key ' + key + ' must be a string.'))\n        }\n\n        const value = _get(config, key, null)\n\n        if (value === null) {\n          return callback(new Error('Key ' + key + ' does not exist in config.'))\n        }\n\n        callback(null, value)\n      })\n    },\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {String} key - the config key to be written\n     * @param {Object} value - the config value to be written\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    set (key, value, callback) {\n      if (typeof value === 'function') {\n        callback = value\n        value = key\n        key = undefined\n      } else if (!key || typeof key !== 'string') {\n        return callback(new Error('Invalid key type'))\n      }\n\n      if (value === undefined || Buffer.isBuffer(value)) {\n        return callback(new Error('Invalid value type'))\n      }\n\n      setQueue.push({\n        key: key,\n        value: value\n      }, callback)\n    },\n\n    /**\n     * Check if a config file exists.\n     *\n     * @param {function(Error, bool)} callback\n     * @returns {void}\n     */\n    exists (callback) {\n      store.has(configKey, callback)\n    }\n  }\n\n  return configStore\n\n  function _doSet (m, callback) {\n    const key = m.key\n    const value = m.value\n    if (key) {\n      waterfall(\n        [\n          (cb) => configStore.get(cb),\n          (config, cb) => {\n            _set(config, key, value)\n            cb(null, config)\n          },\n          _saveAll\n        ],\n        callback)\n    } else {\n      _saveAll(value, callback)\n    }\n  }\n\n  function _saveAll (config, callback) {\n    const buf = Buffer.from(JSON.stringify(config, null, 2))\n    store.put(configKey, buf, callback)\n  }\n}\n","'use strict'\n\nconst core = require('datastore-core')\nconst ShardingStore = core.ShardingDatastore\nconst Key = require('interface-datastore').Key\nconst base32 = require('base32.js')\nconst Block = require('ipfs-block')\nconst setImmediate = require('async/setImmediate')\nconst reject = require('async/reject')\nconst CID = require('cids')\nconst pull = require('pull-stream/pull')\nconst collect = require('pull-stream/sinks/collect')\n\n/**\n * Transform a raw buffer to a base32 encoded key.\n *\n * @param {Buffer} rawKey\n * @returns {Key}\n */\nconst keyFromBuffer = (rawKey) => {\n  const enc = new base32.Encoder()\n  return new Key('/' + enc.write(rawKey).finalize(), false)\n}\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\nconst cidToDsKey = (cid) => {\n  return keyFromBuffer(cid.buffer)\n}\n\nmodule.exports = (filestore, options, callback) => {\n  maybeWithSharding(filestore, options, (err, store) => {\n    if (err) { return callback(err) }\n\n    callback(null, createBaseStore(store))\n  })\n}\n\nfunction maybeWithSharding (filestore, options, callback) {\n  if (options.sharding) {\n    const shard = new core.shard.NextToLast(2)\n    ShardingStore.createOrOpen(filestore, shard, callback)\n  } else {\n    setImmediate(() => callback(null, filestore))\n  }\n}\n\nfunction createBaseStore (store) {\n  return {\n    /**\n     * Query the store.\n     *\n     * @param {object} query\n     * @param {function(Error, Array)} callback\n     * @return {void}\n     */\n    query (query, callback) {\n      pull(\n        store.query(query),\n        collect(callback)\n      )\n    },\n    /**\n     * Get a single block by CID.\n     *\n     * @param {CID} cid\n     * @param {function(Error, Block)} callback\n     * @returns {void}\n     */\n    get (cid, callback) {\n      if (!CID.isCID(cid)) {\n        return setImmediate(() => {\n          callback(new Error('Not a valid cid'))\n        })\n      }\n\n      const key = cidToDsKey(cid)\n      store.get(key, (err, blockData) => {\n        if (err) {\n          // If not found, we try with the other CID version.\n          // If exists, then store that block under the CID that was requested.\n          // Some duplication occurs.\n          if (err.code === 'ERR_NOT_FOUND') {\n            const otherCid = cidToOtherVersion(cid)\n            if (!otherCid) return callback(err)\n\n            const otherKey = cidToDsKey(otherCid)\n            return store.get(otherKey, (err, blockData) => {\n              if (err) return callback(err)\n\n              store.put(key, blockData, (err) => {\n                if (err) return callback(err)\n                callback(null, new Block(blockData, cid))\n              })\n            })\n          }\n\n          return callback(err)\n        }\n\n        callback(null, new Block(blockData, cid))\n      })\n    },\n    put (block, callback) {\n      if (!Block.isBlock(block)) {\n        return setImmediate(() => {\n          callback(new Error('invalid block'))\n        })\n      }\n\n      const k = cidToDsKey(block.cid)\n\n      store.has(k, (err, exists) => {\n        if (err) { return callback(err) }\n        if (exists) { return callback() }\n\n        store.put(k, block.data, callback)\n      })\n    },\n    /**\n     * Like put, but for more.\n     *\n     * @param {Array<Block>} blocks\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    putMany (blocks, callback) {\n      const keys = blocks.map((b) => ({\n        key: cidToDsKey(b.cid),\n        block: b\n      }))\n\n      const batch = store.batch()\n      reject(keys, (k, cb) => store.has(k.key, cb), (err, newKeys) => {\n        if (err) {\n          return callback(err)\n        }\n\n        newKeys.forEach((k) => {\n          batch.put(k.key, k.block.data)\n        })\n\n        batch.commit(callback)\n      })\n    },\n    /**\n     * Does the store contain block with this cid?\n     *\n     * @param {CID} cid\n     * @param {function(Error, bool)} callback\n     * @returns {void}\n     */\n    has (cid, callback) {\n      if (!CID.isCID(cid)) {\n        return setImmediate(() => {\n          callback(new Error('Not a valid cid'))\n        })\n      }\n\n      store.has(cidToDsKey(cid), (err, exists) => {\n        if (err) return callback(err)\n        if (exists) return callback(null, true)\n\n        // If not found, we try with the other CID version.\n        const otherCid = cidToOtherVersion(cid)\n        if (!otherCid) return callback(null, false)\n\n        store.has(cidToDsKey(otherCid), callback)\n      })\n    },\n    /**\n     * Delete a block from the store\n     *\n     * @param {CID} cid\n     * @param {function(Error)} callback\n     * @returns {void}\n     */\n    delete (cid, callback) {\n      if (!CID.isCID(cid)) {\n        return setImmediate(() => {\n          callback(new Error('Not a valid cid'))\n        })\n      }\n\n      store.delete(cidToDsKey(cid), callback)\n    },\n\n    close (callback) {\n      store.close(callback)\n    }\n  }\n}\n\nfunction cidToOtherVersion (cid) {\n  try {\n    return cid.version === 0 ? cid.toV1() : cid.toV0()\n  } catch (err) {\n    return null\n  }\n}\n","'use strict'\n\n// Default configuration for a repo in the browser\nmodule.exports = {\n  lock: 'memory',\n  storageBackends: {\n    root: require('datastore-level'),\n    blocks: require('datastore-level'),\n    keys: require('datastore-level'),\n    datastore: require('datastore-level')\n  },\n  storageBackendOptions: {\n    root: {\n      extension: ''\n    },\n    blocks: {\n      sharding: false\n    },\n    keys: {\n      sharding: false\n    }\n  }\n}\n","function each(obj, iter) {\n  for(var key in obj) {\n    var value = obj[key]\n    iter(value, key, obj)\n  }\n}\n\nfunction keys (obj) {\n  return Object.keys(obj).sort()\n}\n\nfunction contains (a, v) {\n  return ~a.indexOf(v)\n}\nfunction union (a, b) {\n  return a.filter(function (v) {\n    return contains(b, v)\n  })\n}\n\nfunction disunion1(a, b) {\n  return a.filter(function (v) {\n    return !contains(b, v)\n  })\n}\n\nfunction disunion(a, b) {\n  return a.filter(function (v) {\n    return !contains(b, v)\n  }).concat(b.filter(function (v) {\n    return !contains(a, v)\n  })).sort()\n}\n\nfunction equal (a, b) {\n  if(a.length != b.length) return false\n  for(var i in a)\n    if(b[i] !== a[i]) return false\n}\n\nfunction empty (v) {\n  for(var k in v)\n    return false\n  return true\n}\n\n//check that all transitions are to valid states.\nvar validate = exports.validate = function (fsm) {\n  var states = Object.keys(fsm)\n  each(fsm, function (state, name) {\n    each(state, function (_state, event) {\n      if(!fsm[_state])\n        throw new Error(\n            'invalid transition from state:' + name\n          + ' to state:' + _state\n          + ' on event:' + event\n        )\n    })\n  })\n  return true\n}\n\n//get a list of all states that are reachable from any given state.\n//(with the shortest paths?)\n// returns object: {STATES: {REACHABLE_STATE: path}}\n\nvar reachable = exports.reachable = function (fsm) {\n  var reachable = {}\n  var added = false\n  do {\n    added = false\n    each(fsm, function (state, name) {\n      var reach = reachable[name] = reachable[name] || {}\n      //add any state that can be reached directly.\n      each(state, function (_name, event) {\n        if(!reach[_name]) reach[_name] = [event], added = true\n      })\n      //add any state that can be reached from a state you can reach directly.\n      each(state, function (_name, event) {\n        var _state = reachable[_name]\n        each(_state, function (path, _name) {\n          if(!reach[_name])\n            reach[_name] = [event].concat(path), added = true\n        })\n      })\n    })\n  } while(added);\n  return reachable\n}\n\n// deadlock: are there any dead ends that cannot reach another state?\n\nexports.terminal =\nexports.deadlock = function (fsm) {\n  var dead = []\n  each(fsm, function (state, name) {\n    if(empty(state)) dead.push(name)\n  })\n  return dead\n}\n\n// livelock; are there any cycles that cannot reach a terminal state?\n// return any states that cannot reach the given terminal states,\n// unless they are themselves terminal states.\n\nvar livelock = exports.livelock = function (fsm, terminals) {\n  var reach = reachable(fsm), locked = []\n  each(reach, function (reaches, name) {\n    if(contains(terminals, name)) return\n    each(terminals, function (_name) {\n      if(!reaches[_name] && !contains(locked, name))\n        locked.push(name)\n    })\n  })\n  return locked.sort()\n}\n\n\nfunction events (fsm) {\n  var events = []\n  each(fsm, function (state, name) {\n    each(state, function (_state, event) {\n      if(!contains(events, event)) events.push(event)\n    })\n  })\n  return events.sort()\n}\n\nvar combine = exports.combine = function (fsm1, fsm2, start1, start2) {\n  var combined = {}\n  var events1 = events(fsm1)\n  var events2 = events(fsm2)\n  var independent = disunion(events1, events2)\n\n  function expand(name1, name2) {\n    var cName = name1 + '-' + name2, state\n    if(!combined[cName]) combined[cName] = {}\n    state = combined[cName]\n\n    //Q: what are the events which are allowed to occur from this state?\n    //A: independent events (used in only one fsm) or events that occur in both fsms in current state.\n\n    var trans1 = keys(fsm1[name1]), trans2 = keys(fsm2[name2])\n    var allowed = union(trans1, trans2)\n\n    //expand to a new state\n    allowed.forEach(function (event) {\n      state[event] = fsm1[name1][event] + '-' + fsm2[name2][event]\n      if(!combined[state[event]])\n        expand(fsm1[name1][event], fsm2[name2][event])\n    })\n\n    //only transition fsm1\n    union(independent, trans1).forEach(function (event) {\n      state[event] = fsm1[name1][event] + '-' + name2\n      if(!combined[state[event]])\n        expand(fsm1[name1][event], name2)\n    })\n\n    union(independent, trans2).forEach(function (event) {\n      state[event] =  name1 + '-' + fsm2[name2][event]\n      if(!combined[state[event]])\n        expand(name1, fsm2[name2][event])\n    })\n\n    return combined[cName]\n  }\n\n  expand(start1, start2)\n  return combined\n}\n\n","'use strict';\n\nmodule.exports = uniqueBy;\n\nfunction uniqueBy(arr, getValue) {\n  var unique = [];\n  var found = {};\n\n  if (typeof getValue !== 'function') {\n    var key = getValue;\n    getValue = function defaultGetValue(obj) {\n      return obj[key];\n    };\n  }\n\n  arr.forEach(function addUniques(obj) {\n    var value = getValue(obj);\n    if (!found[value]) {\n      found[value] = true;\n      unique.push(obj);\n    }\n  });\n\n  return unique;\n}\n","'use strict'\n\nmodule.exports = `enum KeyType {\n  RSA = 0;\n  Ed25519 = 1;\n  Secp256k1 = 2;\n}\nmessage PublicKey {\n  required KeyType Type = 1;\n  required bytes Data = 2;\n}\nmessage PrivateKey {\n  required KeyType Type = 1;\n  required bytes Data = 2;\n}`","/**\n * Node.js module for Forge.\n *\n * @author Dave Longley\n *\n * Copyright 2011-2016 Digital Bazaar, Inc.\n */\nmodule.exports = {\n  // default options\n  options: {\n    usePureJavaScript: false\n  }\n};\n","/**\n * Javascript implementation of Abstract Syntax Notation Number One.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2015 Digital Bazaar, Inc.\n *\n * An API for storing data using the Abstract Syntax Notation Number One\n * format using DER (Distinguished Encoding Rules) encoding. This encoding is\n * commonly used to store data for PKI, i.e. X.509 Certificates, and this\n * implementation exists for that purpose.\n *\n * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract\n * syntax of information without restricting the way the information is encoded\n * for transmission. It provides a standard that allows for open systems\n * communication. ASN.1 defines the syntax of information data and a number of\n * simple data types as well as a notation for describing them and specifying\n * values for them.\n *\n * The RSA algorithm creates public and private keys that are often stored in\n * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This\n * class provides the most basic functionality required to store and load DSA\n * keys that are encoded according to ASN.1.\n *\n * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)\n * and DER (Distinguished Encoding Rules). DER is just a subset of BER that\n * has stricter requirements for how data must be encoded.\n *\n * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)\n * and a byte array for the value of this ASN1 structure which may be data or a\n * list of ASN.1 structures.\n *\n * Each ASN.1 structure using BER is (Tag-Length-Value):\n *\n * | byte 0 | bytes X | bytes Y |\n * |--------|---------|----------\n * |  tag   | length  |  value  |\n *\n * ASN.1 allows for tags to be of \"High-tag-number form\" which allows a tag to\n * be two or more octets, but that is not supported by this class. A tag is\n * only 1 byte. Bits 1-5 give the tag number (ie the data type within a\n * particular 'class'), 6 indicates whether or not the ASN.1 value is\n * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If\n * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,\n * then the class is APPLICATION. If only bit 8 is set, then the class is\n * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.\n * The tag numbers for the data types for the class UNIVERSAL are listed below:\n *\n * UNIVERSAL 0 Reserved for use by the encoding rules\n * UNIVERSAL 1 Boolean type\n * UNIVERSAL 2 Integer type\n * UNIVERSAL 3 Bitstring type\n * UNIVERSAL 4 Octetstring type\n * UNIVERSAL 5 Null type\n * UNIVERSAL 6 Object identifier type\n * UNIVERSAL 7 Object descriptor type\n * UNIVERSAL 8 External type and Instance-of type\n * UNIVERSAL 9 Real type\n * UNIVERSAL 10 Enumerated type\n * UNIVERSAL 11 Embedded-pdv type\n * UNIVERSAL 12 UTF8String type\n * UNIVERSAL 13 Relative object identifier type\n * UNIVERSAL 14-15 Reserved for future editions\n * UNIVERSAL 16 Sequence and Sequence-of types\n * UNIVERSAL 17 Set and Set-of types\n * UNIVERSAL 18-22, 25-30 Character string types\n * UNIVERSAL 23-24 Time types\n *\n * The length of an ASN.1 structure is specified after the tag identifier.\n * There is a definite form and an indefinite form. The indefinite form may\n * be used if the encoding is constructed and not all immediately available.\n * The indefinite form is encoded using a length byte with only the 8th bit\n * set. The end of the constructed object is marked using end-of-contents\n * octets (two zero bytes).\n *\n * The definite form looks like this:\n *\n * The length may take up 1 or more bytes, it depends on the length of the\n * value of the ASN.1 structure. DER encoding requires that if the ASN.1\n * structure has a value that has a length greater than 127, more than 1 byte\n * will be used to store its length, otherwise just one byte will be used.\n * This is strict.\n *\n * In the case that the length of the ASN.1 value is less than 127, 1 octet\n * (byte) is used to store the \"short form\" length. The 8th bit has a value of\n * 0 indicating the length is \"short form\" and not \"long form\" and bits 7-1\n * give the length of the data. (The 8th bit is the left-most, most significant\n * bit: also known as big endian or network format).\n *\n * In the case that the length of the ASN.1 value is greater than 127, 2 to\n * 127 octets (bytes) are used to store the \"long form\" length. The first\n * byte's 8th bit is set to 1 to indicate the length is \"long form.\" Bits 7-1\n * give the number of additional octets. All following octets are in base 256\n * with the most significant digit first (typical big-endian binary unsigned\n * integer storage). So, for instance, if the length of a value was 257, the\n * first byte would be set to:\n *\n * 10000010 = 130 = 0x82.\n *\n * This indicates there are 2 octets (base 256) for the length. The second and\n * third bytes (the octets just mentioned) would store the length in base 256:\n *\n * octet 2: 00000001 = 1 * 256^1 = 256\n * octet 3: 00000001 = 1 * 256^0 = 1\n * total = 257\n *\n * The algorithm for converting a js integer value of 257 to base-256 is:\n *\n * var value = 257;\n * var bytes = [];\n * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first\n * bytes[1] = value & 0xFF;        // least significant byte last\n *\n * On the ASN.1 UNIVERSAL Object Identifier (OID) type:\n *\n * An OID can be written like: \"value1.value2.value3...valueN\"\n *\n * The DER encoding rules:\n *\n * The first byte has the value 40 * value1 + value2.\n * The following bytes, if any, encode the remaining values. Each value is\n * encoded in base 128, most significant digit first (big endian), with as\n * few digits as possible, and the most significant bit of each byte set\n * to 1 except the last in each value's encoding. For example: Given the\n * OID \"1.2.840.113549\", its DER encoding is (remember each byte except the\n * last one in each encoding is OR'd with 0x80):\n *\n * byte 1: 40 * 1 + 2 = 42 = 0x2A.\n * bytes 2-3: 128 * 6 + 72 = 840 = 6 72 = 6 72 = 0x0648 = 0x8648\n * bytes 4-6: 16384 * 6 + 128 * 119 + 13 = 6 119 13 = 0x06770D = 0x86F70D\n *\n * The final value is: 0x2A864886F70D.\n * The full OID (including ASN.1 tag and length of 6 bytes) is:\n * 0x06062A864886F70D\n */\nvar forge = require('./forge');\nrequire('./util');\nrequire('./oids');\n\n/* ASN.1 API */\nvar asn1 = module.exports = forge.asn1 = forge.asn1 || {};\n\n/**\n * ASN.1 classes.\n */\nasn1.Class = {\n  UNIVERSAL:        0x00,\n  APPLICATION:      0x40,\n  CONTEXT_SPECIFIC: 0x80,\n  PRIVATE:          0xC0\n};\n\n/**\n * ASN.1 types. Not all types are supported by this implementation, only\n * those necessary to implement a simple PKI are implemented.\n */\nasn1.Type = {\n  NONE:             0,\n  BOOLEAN:          1,\n  INTEGER:          2,\n  BITSTRING:        3,\n  OCTETSTRING:      4,\n  NULL:             5,\n  OID:              6,\n  ODESC:            7,\n  EXTERNAL:         8,\n  REAL:             9,\n  ENUMERATED:      10,\n  EMBEDDED:        11,\n  UTF8:            12,\n  ROID:            13,\n  SEQUENCE:        16,\n  SET:             17,\n  PRINTABLESTRING: 19,\n  IA5STRING:       22,\n  UTCTIME:         23,\n  GENERALIZEDTIME: 24,\n  BMPSTRING:       30\n};\n\n/**\n * Creates a new asn1 object.\n *\n * @param tagClass the tag class for the object.\n * @param type the data type (tag number) for the object.\n * @param constructed true if the asn1 object is in constructed form.\n * @param value the value for the object, if it is not constructed.\n * @param [options] the options to use:\n *          [bitStringContents] the plain BIT STRING content including padding\n *            byte.\n *\n * @return the asn1 object.\n */\nasn1.create = function(tagClass, type, constructed, value, options) {\n  /* An asn1 object has a tagClass, a type, a constructed flag, and a\n    value. The value's type depends on the constructed flag. If\n    constructed, it will contain a list of other asn1 objects. If not,\n    it will contain the ASN.1 value as an array of bytes formatted\n    according to the ASN.1 data type. */\n\n  // remove undefined values\n  if(forge.util.isArray(value)) {\n    var tmp = [];\n    for(var i = 0; i < value.length; ++i) {\n      if(value[i] !== undefined) {\n        tmp.push(value[i]);\n      }\n    }\n    value = tmp;\n  }\n\n  var obj = {\n    tagClass: tagClass,\n    type: type,\n    constructed: constructed,\n    composed: constructed || forge.util.isArray(value),\n    value: value\n  };\n  if(options && 'bitStringContents' in options) {\n    // TODO: copy byte buffer if it's a buffer not a string\n    obj.bitStringContents = options.bitStringContents;\n    // TODO: add readonly flag to avoid this overhead\n    // save copy to detect changes\n    obj.original = asn1.copy(obj);\n  }\n  return obj;\n};\n\n/**\n * Copies an asn1 object.\n *\n * @param obj the asn1 object.\n * @param [options] copy options:\n *          [excludeBitStringContents] true to not copy bitStringContents\n *\n * @return the a copy of the asn1 object.\n */\nasn1.copy = function(obj, options) {\n  var copy;\n\n  if(forge.util.isArray(obj)) {\n    copy = [];\n    for(var i = 0; i < obj.length; ++i) {\n      copy.push(asn1.copy(obj[i], options));\n    }\n    return copy;\n  }\n\n  if(typeof obj === 'string') {\n    // TODO: copy byte buffer if it's a buffer not a string\n    return obj;\n  }\n\n  copy = {\n    tagClass: obj.tagClass,\n    type: obj.type,\n    constructed: obj.constructed,\n    composed: obj.composed,\n    value: asn1.copy(obj.value, options)\n  };\n  if(options && !options.excludeBitStringContents) {\n    // TODO: copy byte buffer if it's a buffer not a string\n    copy.bitStringContents = obj.bitStringContents;\n  }\n  return copy;\n};\n\n/**\n * Compares asn1 objects for equality.\n *\n * Note this function does not run in constant time.\n *\n * @param obj1 the first asn1 object.\n * @param obj2 the second asn1 object.\n * @param [options] compare options:\n *          [includeBitStringContents] true to compare bitStringContents\n *\n * @return true if the asn1 objects are equal.\n */\nasn1.equals = function(obj1, obj2, options) {\n  if(forge.util.isArray(obj1)) {\n    if(!forge.util.isArray(obj2)) {\n      return false;\n    }\n    if(obj1.length !== obj2.length) {\n      return false;\n    }\n    for(var i = 0; i < obj1.length; ++i) {\n      if(!asn1.equals(obj1[i], obj2[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if(typeof obj1 !== typeof obj2) {\n    return false;\n  }\n\n  if(typeof obj1 === 'string') {\n    return obj1 === obj2;\n  }\n\n  var equal = obj1.tagClass === obj2.tagClass &&\n    obj1.type === obj2.type &&\n    obj1.constructed === obj2.constructed &&\n    obj1.composed === obj2.composed &&\n    asn1.equals(obj1.value, obj2.value);\n  if(options && options.includeBitStringContents) {\n    equal = equal && (obj1.bitStringContents === obj2.bitStringContents);\n  }\n\n  return equal;\n};\n\n/**\n * Gets the length of a BER-encoded ASN.1 value.\n *\n * In case the length is not specified, undefined is returned.\n *\n * @param b the BER-encoded ASN.1 byte buffer, starting with the first\n *          length byte.\n *\n * @return the length of the BER-encoded ASN.1 value or undefined.\n */\nasn1.getBerValueLength = function(b) {\n  // TODO: move this function and related DER/BER functions to a der.js\n  // file; better abstract ASN.1 away from der/ber.\n  var b2 = b.getByte();\n  if(b2 === 0x80) {\n    return undefined;\n  }\n\n  // see if the length is \"short form\" or \"long form\" (bit 8 set)\n  var length;\n  var longForm = b2 & 0x80;\n  if(!longForm) {\n    // length is just the first byte\n    length = b2;\n  } else {\n    // the number of bytes the length is specified in bits 7 through 1\n    // and each length byte is in big-endian base-256\n    length = b.getInt((b2 & 0x7F) << 3);\n  }\n  return length;\n};\n\n/**\n * Check if the byte buffer has enough bytes. Throws an Error if not.\n *\n * @param bytes the byte buffer to parse from.\n * @param remaining the bytes remaining in the current parsing state.\n * @param n the number of bytes the buffer must have.\n */\nfunction _checkBufferLength(bytes, remaining, n) {\n  if(n > remaining) {\n    var error = new Error('Too few bytes to parse DER.');\n    error.available = bytes.length();\n    error.remaining = remaining;\n    error.requested = n;\n    throw error;\n  }\n}\n\n/**\n * Gets the length of a BER-encoded ASN.1 value.\n *\n * In case the length is not specified, undefined is returned.\n *\n * @param bytes the byte buffer to parse from.\n * @param remaining the bytes remaining in the current parsing state.\n *\n * @return the length of the BER-encoded ASN.1 value or undefined.\n */\nvar _getValueLength = function(bytes, remaining) {\n  // TODO: move this function and related DER/BER functions to a der.js\n  // file; better abstract ASN.1 away from der/ber.\n  // fromDer already checked that this byte exists\n  var b2 = bytes.getByte();\n  remaining--;\n  if(b2 === 0x80) {\n    return undefined;\n  }\n\n  // see if the length is \"short form\" or \"long form\" (bit 8 set)\n  var length;\n  var longForm = b2 & 0x80;\n  if(!longForm) {\n    // length is just the first byte\n    length = b2;\n  } else {\n    // the number of bytes the length is specified in bits 7 through 1\n    // and each length byte is in big-endian base-256\n    var longFormBytes = b2 & 0x7F;\n    _checkBufferLength(bytes, remaining, longFormBytes);\n    length = bytes.getInt(longFormBytes << 3);\n  }\n  // FIXME: this will only happen for 32 bit getInt with high bit set\n  if(length < 0) {\n    throw new Error('Negative length: ' + length);\n  }\n  return length;\n};\n\n/**\n * Parses an asn1 object from a byte buffer in DER format.\n *\n * @param bytes the byte buffer to parse from.\n * @param [strict] true to be strict when checking value lengths, false to\n *          allow truncated values (default: true).\n * @param [options] object with options or boolean strict flag\n *          [strict] true to be strict when checking value lengths, false to\n *            allow truncated values (default: true).\n *          [decodeBitStrings] true to attempt to decode the content of\n *            BIT STRINGs (not OCTET STRINGs) using strict mode. Note that\n *            without schema support to understand the data context this can\n *            erroneously decode values that happen to be valid ASN.1. This\n *            flag will be deprecated or removed as soon as schema support is\n *            available. (default: true)\n *\n * @return the parsed asn1 object.\n */\nasn1.fromDer = function(bytes, options) {\n  if(options === undefined) {\n    options = {\n      strict: true,\n      decodeBitStrings: true\n    };\n  }\n  if(typeof options === 'boolean') {\n    options = {\n      strict: options,\n      decodeBitStrings: true\n    };\n  }\n  if(!('strict' in options)) {\n    options.strict = true;\n  }\n  if(!('decodeBitStrings' in options)) {\n    options.decodeBitStrings = true;\n  }\n\n  // wrap in buffer if needed\n  if(typeof bytes === 'string') {\n    bytes = forge.util.createBuffer(bytes);\n  }\n\n  return _fromDer(bytes, bytes.length(), 0, options);\n};\n\n/**\n * Internal function to parse an asn1 object from a byte buffer in DER format.\n *\n * @param bytes the byte buffer to parse from.\n * @param remaining the number of bytes remaining for this chunk.\n * @param depth the current parsing depth.\n * @param options object with same options as fromDer().\n *\n * @return the parsed asn1 object.\n */\nfunction _fromDer(bytes, remaining, depth, options) {\n  // temporary storage for consumption calculations\n  var start;\n\n  // minimum length for ASN.1 DER structure is 2\n  _checkBufferLength(bytes, remaining, 2);\n\n  // get the first byte\n  var b1 = bytes.getByte();\n  // consumed one byte\n  remaining--;\n\n  // get the tag class\n  var tagClass = (b1 & 0xC0);\n\n  // get the type (bits 1-5)\n  var type = b1 & 0x1F;\n\n  // get the variable value length and adjust remaining bytes\n  start = bytes.length();\n  var length = _getValueLength(bytes, remaining);\n  remaining -= start - bytes.length();\n\n  // ensure there are enough bytes to get the value\n  if(length !== undefined && length > remaining) {\n    if(options.strict) {\n      var error = new Error('Too few bytes to read ASN.1 value.');\n      error.available = bytes.length();\n      error.remaining = remaining;\n      error.requested = length;\n      throw error;\n    }\n    // Note: be lenient with truncated values and use remaining state bytes\n    length = remaining;\n  }\n\n  // value storage\n  var value;\n  // possible BIT STRING contents storage\n  var bitStringContents;\n\n  // constructed flag is bit 6 (32 = 0x20) of the first byte\n  var constructed = ((b1 & 0x20) === 0x20);\n  if(constructed) {\n    // parse child asn1 objects from the value\n    value = [];\n    if(length === undefined) {\n      // asn1 object of indefinite length, read until end tag\n      for(;;) {\n        _checkBufferLength(bytes, remaining, 2);\n        if(bytes.bytes(2) === String.fromCharCode(0, 0)) {\n          bytes.getBytes(2);\n          remaining -= 2;\n          break;\n        }\n        start = bytes.length();\n        value.push(_fromDer(bytes, remaining, depth + 1, options));\n        remaining -= start - bytes.length();\n      }\n    } else {\n      // parsing asn1 object of definite length\n      while(length > 0) {\n        start = bytes.length();\n        value.push(_fromDer(bytes, length, depth + 1, options));\n        remaining -= start - bytes.length();\n        length -= start - bytes.length();\n      }\n    }\n  }\n\n  // if a BIT STRING, save the contents including padding\n  if(value === undefined && tagClass === asn1.Class.UNIVERSAL &&\n    type === asn1.Type.BITSTRING) {\n    bitStringContents = bytes.bytes(length);\n  }\n\n  // determine if a non-constructed value should be decoded as a composed\n  // value that contains other ASN.1 objects. BIT STRINGs (and OCTET STRINGs)\n  // can be used this way.\n  if(value === undefined && options.decodeBitStrings &&\n    tagClass === asn1.Class.UNIVERSAL &&\n    // FIXME: OCTET STRINGs not yet supported here\n    // .. other parts of forge expect to decode OCTET STRINGs manually\n    (type === asn1.Type.BITSTRING /*|| type === asn1.Type.OCTETSTRING*/) &&\n    length > 1) {\n    // save read position\n    var savedRead = bytes.read;\n    var savedRemaining = remaining;\n    var unused = 0;\n    if(type === asn1.Type.BITSTRING) {\n      /* The first octet gives the number of bits by which the length of the\n        bit string is less than the next multiple of eight (this is called\n        the \"number of unused bits\").\n\n        The second and following octets give the value of the bit string\n        converted to an octet string. */\n      _checkBufferLength(bytes, remaining, 1);\n      unused = bytes.getByte();\n      remaining--;\n    }\n    // if all bits are used, maybe the BIT/OCTET STRING holds ASN.1 objs\n    if(unused === 0) {\n      try {\n        // attempt to parse child asn1 object from the value\n        // (stored in array to signal composed value)\n        start = bytes.length();\n        var subOptions = {\n          // enforce strict mode to avoid parsing ASN.1 from plain data\n          verbose: options.verbose,\n          strict: true,\n          decodeBitStrings: true\n        };\n        var composed = _fromDer(bytes, remaining, depth + 1, subOptions);\n        var used = start - bytes.length();\n        remaining -= used;\n        if(type == asn1.Type.BITSTRING) {\n          used++;\n        }\n\n        // if the data all decoded and the class indicates UNIVERSAL or\n        // CONTEXT_SPECIFIC then assume we've got an encapsulated ASN.1 object\n        var tc = composed.tagClass;\n        if(used === length &&\n          (tc === asn1.Class.UNIVERSAL || tc === asn1.Class.CONTEXT_SPECIFIC)) {\n          value = [composed];\n        }\n      } catch(ex) {\n      }\n    }\n    if(value === undefined) {\n      // restore read position\n      bytes.read = savedRead;\n      remaining = savedRemaining;\n    }\n  }\n\n  if(value === undefined) {\n    // asn1 not constructed or composed, get raw value\n    // TODO: do DER to OID conversion and vice-versa in .toDer?\n\n    if(length === undefined) {\n      if(options.strict) {\n        throw new Error('Non-constructed ASN.1 object of indefinite length.');\n      }\n      // be lenient and use remaining state bytes\n      length = remaining;\n    }\n\n    if(type === asn1.Type.BMPSTRING) {\n      value = '';\n      for(; length > 0; length -= 2) {\n        _checkBufferLength(bytes, remaining, 2);\n        value += String.fromCharCode(bytes.getInt16());\n        remaining -= 2;\n      }\n    } else {\n      value = bytes.getBytes(length);\n    }\n  }\n\n  // add BIT STRING contents if available\n  var asn1Options = bitStringContents === undefined ? null : {\n    bitStringContents: bitStringContents\n  };\n\n  // create and return asn1 object\n  return asn1.create(tagClass, type, constructed, value, asn1Options);\n}\n\n/**\n * Converts the given asn1 object to a buffer of bytes in DER format.\n *\n * @param asn1 the asn1 object to convert to bytes.\n *\n * @return the buffer of bytes.\n */\nasn1.toDer = function(obj) {\n  var bytes = forge.util.createBuffer();\n\n  // build the first byte\n  var b1 = obj.tagClass | obj.type;\n\n  // for storing the ASN.1 value\n  var value = forge.util.createBuffer();\n\n  // use BIT STRING contents if available and data not changed\n  var useBitStringContents = false;\n  if('bitStringContents' in obj) {\n    useBitStringContents = true;\n    if(obj.original) {\n      useBitStringContents = asn1.equals(obj, obj.original);\n    }\n  }\n\n  if(useBitStringContents) {\n    value.putBytes(obj.bitStringContents);\n  } else if(obj.composed) {\n    // if composed, use each child asn1 object's DER bytes as value\n    // turn on 6th bit (0x20 = 32) to indicate asn1 is constructed\n    // from other asn1 objects\n    if(obj.constructed) {\n      b1 |= 0x20;\n    } else {\n      // type is a bit string, add unused bits of 0x00\n      value.putByte(0x00);\n    }\n\n    // add all of the child DER bytes together\n    for(var i = 0; i < obj.value.length; ++i) {\n      if(obj.value[i] !== undefined) {\n        value.putBuffer(asn1.toDer(obj.value[i]));\n      }\n    }\n  } else {\n    // use asn1.value directly\n    if(obj.type === asn1.Type.BMPSTRING) {\n      for(var i = 0; i < obj.value.length; ++i) {\n        value.putInt16(obj.value.charCodeAt(i));\n      }\n    } else {\n      // ensure integer is minimally-encoded\n      // TODO: should all leading bytes be stripped vs just one?\n      // .. ex '00 00 01' => '01'?\n      if(obj.type === asn1.Type.INTEGER &&\n        obj.value.length > 1 &&\n        // leading 0x00 for positive integer\n        ((obj.value.charCodeAt(0) === 0 &&\n        (obj.value.charCodeAt(1) & 0x80) === 0) ||\n        // leading 0xFF for negative integer\n        (obj.value.charCodeAt(0) === 0xFF &&\n        (obj.value.charCodeAt(1) & 0x80) === 0x80))) {\n        value.putBytes(obj.value.substr(1));\n      } else {\n        value.putBytes(obj.value);\n      }\n    }\n  }\n\n  // add tag byte\n  bytes.putByte(b1);\n\n  // use \"short form\" encoding\n  if(value.length() <= 127) {\n    // one byte describes the length\n    // bit 8 = 0 and bits 7-1 = length\n    bytes.putByte(value.length() & 0x7F);\n  } else {\n    // use \"long form\" encoding\n    // 2 to 127 bytes describe the length\n    // first byte: bit 8 = 1 and bits 7-1 = # of additional bytes\n    // other bytes: length in base 256, big-endian\n    var len = value.length();\n    var lenBytes = '';\n    do {\n      lenBytes += String.fromCharCode(len & 0xFF);\n      len = len >>> 8;\n    } while(len > 0);\n\n    // set first byte to # bytes used to store the length and turn on\n    // bit 8 to indicate long-form length is used\n    bytes.putByte(lenBytes.length | 0x80);\n\n    // concatenate length bytes in reverse since they were generated\n    // little endian and we need big endian\n    for(var i = lenBytes.length - 1; i >= 0; --i) {\n      bytes.putByte(lenBytes.charCodeAt(i));\n    }\n  }\n\n  // concatenate value bytes\n  bytes.putBuffer(value);\n  return bytes;\n};\n\n/**\n * Converts an OID dot-separated string to a byte buffer. The byte buffer\n * contains only the DER-encoded value, not any tag or length bytes.\n *\n * @param oid the OID dot-separated string.\n *\n * @return the byte buffer.\n */\nasn1.oidToDer = function(oid) {\n  // split OID into individual values\n  var values = oid.split('.');\n  var bytes = forge.util.createBuffer();\n\n  // first byte is 40 * value1 + value2\n  bytes.putByte(40 * parseInt(values[0], 10) + parseInt(values[1], 10));\n  // other bytes are each value in base 128 with 8th bit set except for\n  // the last byte for each value\n  var last, valueBytes, value, b;\n  for(var i = 2; i < values.length; ++i) {\n    // produce value bytes in reverse because we don't know how many\n    // bytes it will take to store the value\n    last = true;\n    valueBytes = [];\n    value = parseInt(values[i], 10);\n    do {\n      b = value & 0x7F;\n      value = value >>> 7;\n      // if value is not last, then turn on 8th bit\n      if(!last) {\n        b |= 0x80;\n      }\n      valueBytes.push(b);\n      last = false;\n    } while(value > 0);\n\n    // add value bytes in reverse (needs to be in big endian)\n    for(var n = valueBytes.length - 1; n >= 0; --n) {\n      bytes.putByte(valueBytes[n]);\n    }\n  }\n\n  return bytes;\n};\n\n/**\n * Converts a DER-encoded byte buffer to an OID dot-separated string. The\n * byte buffer should contain only the DER-encoded value, not any tag or\n * length bytes.\n *\n * @param bytes the byte buffer.\n *\n * @return the OID dot-separated string.\n */\nasn1.derToOid = function(bytes) {\n  var oid;\n\n  // wrap in buffer if needed\n  if(typeof bytes === 'string') {\n    bytes = forge.util.createBuffer(bytes);\n  }\n\n  // first byte is 40 * value1 + value2\n  var b = bytes.getByte();\n  oid = Math.floor(b / 40) + '.' + (b % 40);\n\n  // other bytes are each value in base 128 with 8th bit set except for\n  // the last byte for each value\n  var value = 0;\n  while(bytes.length() > 0) {\n    b = bytes.getByte();\n    value = value << 7;\n    // not the last byte for the value\n    if(b & 0x80) {\n      value += b & 0x7F;\n    } else {\n      // last byte\n      oid += '.' + (value + b);\n      value = 0;\n    }\n  }\n\n  return oid;\n};\n\n/**\n * Converts a UTCTime value to a date.\n *\n * Note: GeneralizedTime has 4 digits for the year and is used for X.509\n * dates past 2049. Parsing that structure hasn't been implemented yet.\n *\n * @param utc the UTCTime value to convert.\n *\n * @return the date.\n */\nasn1.utcTimeToDate = function(utc) {\n  /* The following formats can be used:\n\n    YYMMDDhhmmZ\n    YYMMDDhhmm+hh'mm'\n    YYMMDDhhmm-hh'mm'\n    YYMMDDhhmmssZ\n    YYMMDDhhmmss+hh'mm'\n    YYMMDDhhmmss-hh'mm'\n\n    Where:\n\n    YY is the least significant two digits of the year\n    MM is the month (01 to 12)\n    DD is the day (01 to 31)\n    hh is the hour (00 to 23)\n    mm are the minutes (00 to 59)\n    ss are the seconds (00 to 59)\n    Z indicates that local time is GMT, + indicates that local time is\n    later than GMT, and - indicates that local time is earlier than GMT\n    hh' is the absolute value of the offset from GMT in hours\n    mm' is the absolute value of the offset from GMT in minutes */\n  var date = new Date();\n\n  // if YY >= 50 use 19xx, if YY < 50 use 20xx\n  var year = parseInt(utc.substr(0, 2), 10);\n  year = (year >= 50) ? 1900 + year : 2000 + year;\n  var MM = parseInt(utc.substr(2, 2), 10) - 1; // use 0-11 for month\n  var DD = parseInt(utc.substr(4, 2), 10);\n  var hh = parseInt(utc.substr(6, 2), 10);\n  var mm = parseInt(utc.substr(8, 2), 10);\n  var ss = 0;\n\n  // not just YYMMDDhhmmZ\n  if(utc.length > 11) {\n    // get character after minutes\n    var c = utc.charAt(10);\n    var end = 10;\n\n    // see if seconds are present\n    if(c !== '+' && c !== '-') {\n      // get seconds\n      ss = parseInt(utc.substr(10, 2), 10);\n      end += 2;\n    }\n  }\n\n  // update date\n  date.setUTCFullYear(year, MM, DD);\n  date.setUTCHours(hh, mm, ss, 0);\n\n  if(end) {\n    // get +/- after end of time\n    c = utc.charAt(end);\n    if(c === '+' || c === '-') {\n      // get hours+minutes offset\n      var hhoffset = parseInt(utc.substr(end + 1, 2), 10);\n      var mmoffset = parseInt(utc.substr(end + 4, 2), 10);\n\n      // calculate offset in milliseconds\n      var offset = hhoffset * 60 + mmoffset;\n      offset *= 60000;\n\n      // apply offset\n      if(c === '+') {\n        date.setTime(+date - offset);\n      } else {\n        date.setTime(+date + offset);\n      }\n    }\n  }\n\n  return date;\n};\n\n/**\n * Converts a GeneralizedTime value to a date.\n *\n * @param gentime the GeneralizedTime value to convert.\n *\n * @return the date.\n */\nasn1.generalizedTimeToDate = function(gentime) {\n  /* The following formats can be used:\n\n    YYYYMMDDHHMMSS\n    YYYYMMDDHHMMSS.fff\n    YYYYMMDDHHMMSSZ\n    YYYYMMDDHHMMSS.fffZ\n    YYYYMMDDHHMMSS+hh'mm'\n    YYYYMMDDHHMMSS.fff+hh'mm'\n    YYYYMMDDHHMMSS-hh'mm'\n    YYYYMMDDHHMMSS.fff-hh'mm'\n\n    Where:\n\n    YYYY is the year\n    MM is the month (01 to 12)\n    DD is the day (01 to 31)\n    hh is the hour (00 to 23)\n    mm are the minutes (00 to 59)\n    ss are the seconds (00 to 59)\n    .fff is the second fraction, accurate to three decimal places\n    Z indicates that local time is GMT, + indicates that local time is\n    later than GMT, and - indicates that local time is earlier than GMT\n    hh' is the absolute value of the offset from GMT in hours\n    mm' is the absolute value of the offset from GMT in minutes */\n  var date = new Date();\n\n  var YYYY = parseInt(gentime.substr(0, 4), 10);\n  var MM = parseInt(gentime.substr(4, 2), 10) - 1; // use 0-11 for month\n  var DD = parseInt(gentime.substr(6, 2), 10);\n  var hh = parseInt(gentime.substr(8, 2), 10);\n  var mm = parseInt(gentime.substr(10, 2), 10);\n  var ss = parseInt(gentime.substr(12, 2), 10);\n  var fff = 0;\n  var offset = 0;\n  var isUTC = false;\n\n  if(gentime.charAt(gentime.length - 1) === 'Z') {\n    isUTC = true;\n  }\n\n  var end = gentime.length - 5, c = gentime.charAt(end);\n  if(c === '+' || c === '-') {\n    // get hours+minutes offset\n    var hhoffset = parseInt(gentime.substr(end + 1, 2), 10);\n    var mmoffset = parseInt(gentime.substr(end + 4, 2), 10);\n\n    // calculate offset in milliseconds\n    offset = hhoffset * 60 + mmoffset;\n    offset *= 60000;\n\n    // apply offset\n    if(c === '+') {\n      offset *= -1;\n    }\n\n    isUTC = true;\n  }\n\n  // check for second fraction\n  if(gentime.charAt(14) === '.') {\n    fff = parseFloat(gentime.substr(14), 10) * 1000;\n  }\n\n  if(isUTC) {\n    date.setUTCFullYear(YYYY, MM, DD);\n    date.setUTCHours(hh, mm, ss, fff);\n\n    // apply offset\n    date.setTime(+date + offset);\n  } else {\n    date.setFullYear(YYYY, MM, DD);\n    date.setHours(hh, mm, ss, fff);\n  }\n\n  return date;\n};\n\n/**\n * Converts a date to a UTCTime value.\n *\n * Note: GeneralizedTime has 4 digits for the year and is used for X.509\n * dates past 2049. Converting to a GeneralizedTime hasn't been\n * implemented yet.\n *\n * @param date the date to convert.\n *\n * @return the UTCTime value.\n */\nasn1.dateToUtcTime = function(date) {\n  // TODO: validate; currently assumes proper format\n  if(typeof date === 'string') {\n    return date;\n  }\n\n  var rval = '';\n\n  // create format YYMMDDhhmmssZ\n  var format = [];\n  format.push(('' + date.getUTCFullYear()).substr(2));\n  format.push('' + (date.getUTCMonth() + 1));\n  format.push('' + date.getUTCDate());\n  format.push('' + date.getUTCHours());\n  format.push('' + date.getUTCMinutes());\n  format.push('' + date.getUTCSeconds());\n\n  // ensure 2 digits are used for each format entry\n  for(var i = 0; i < format.length; ++i) {\n    if(format[i].length < 2) {\n      rval += '0';\n    }\n    rval += format[i];\n  }\n  rval += 'Z';\n\n  return rval;\n};\n\n/**\n * Converts a date to a GeneralizedTime value.\n *\n * @param date the date to convert.\n *\n * @return the GeneralizedTime value as a string.\n */\nasn1.dateToGeneralizedTime = function(date) {\n  // TODO: validate; currently assumes proper format\n  if(typeof date === 'string') {\n    return date;\n  }\n\n  var rval = '';\n\n  // create format YYYYMMDDHHMMSSZ\n  var format = [];\n  format.push('' + date.getUTCFullYear());\n  format.push('' + (date.getUTCMonth() + 1));\n  format.push('' + date.getUTCDate());\n  format.push('' + date.getUTCHours());\n  format.push('' + date.getUTCMinutes());\n  format.push('' + date.getUTCSeconds());\n\n  // ensure 2 digits are used for each format entry\n  for(var i = 0; i < format.length; ++i) {\n    if(format[i].length < 2) {\n      rval += '0';\n    }\n    rval += format[i];\n  }\n  rval += 'Z';\n\n  return rval;\n};\n\n/**\n * Converts a javascript integer to a DER-encoded byte buffer to be used\n * as the value for an INTEGER type.\n *\n * @param x the integer.\n *\n * @return the byte buffer.\n */\nasn1.integerToDer = function(x) {\n  var rval = forge.util.createBuffer();\n  if(x >= -0x80 && x < 0x80) {\n    return rval.putSignedInt(x, 8);\n  }\n  if(x >= -0x8000 && x < 0x8000) {\n    return rval.putSignedInt(x, 16);\n  }\n  if(x >= -0x800000 && x < 0x800000) {\n    return rval.putSignedInt(x, 24);\n  }\n  if(x >= -0x80000000 && x < 0x80000000) {\n    return rval.putSignedInt(x, 32);\n  }\n  var error = new Error('Integer too large; max is 32-bits.');\n  error.integer = x;\n  throw error;\n};\n\n/**\n * Converts a DER-encoded byte buffer to a javascript integer. This is\n * typically used to decode the value of an INTEGER type.\n *\n * @param bytes the byte buffer.\n *\n * @return the integer.\n */\nasn1.derToInteger = function(bytes) {\n  // wrap in buffer if needed\n  if(typeof bytes === 'string') {\n    bytes = forge.util.createBuffer(bytes);\n  }\n\n  var n = bytes.length() * 8;\n  if(n > 32) {\n    throw new Error('Integer too large; max is 32-bits.');\n  }\n  return bytes.getSignedInt(n);\n};\n\n/**\n * Validates that the given ASN.1 object is at least a super set of the\n * given ASN.1 structure. Only tag classes and types are checked. An\n * optional map may also be provided to capture ASN.1 values while the\n * structure is checked.\n *\n * To capture an ASN.1 value, set an object in the validator's 'capture'\n * parameter to the key to use in the capture map. To capture the full\n * ASN.1 object, specify 'captureAsn1'. To capture BIT STRING bytes, including\n * the leading unused bits counter byte, specify 'captureBitStringContents'.\n * To capture BIT STRING bytes, without the leading unused bits counter byte,\n * specify 'captureBitStringValue'.\n *\n * Objects in the validator may set a field 'optional' to true to indicate\n * that it isn't necessary to pass validation.\n *\n * @param obj the ASN.1 object to validate.\n * @param v the ASN.1 structure validator.\n * @param capture an optional map to capture values in.\n * @param errors an optional array for storing validation errors.\n *\n * @return true on success, false on failure.\n */\nasn1.validate = function(obj, v, capture, errors) {\n  var rval = false;\n\n  // ensure tag class and type are the same if specified\n  if((obj.tagClass === v.tagClass || typeof(v.tagClass) === 'undefined') &&\n    (obj.type === v.type || typeof(v.type) === 'undefined')) {\n    // ensure constructed flag is the same if specified\n    if(obj.constructed === v.constructed ||\n      typeof(v.constructed) === 'undefined') {\n      rval = true;\n\n      // handle sub values\n      if(v.value && forge.util.isArray(v.value)) {\n        var j = 0;\n        for(var i = 0; rval && i < v.value.length; ++i) {\n          rval = v.value[i].optional || false;\n          if(obj.value[j]) {\n            rval = asn1.validate(obj.value[j], v.value[i], capture, errors);\n            if(rval) {\n              ++j;\n            } else if(v.value[i].optional) {\n              rval = true;\n            }\n          }\n          if(!rval && errors) {\n            errors.push(\n              '[' + v.name + '] ' +\n              'Tag class \"' + v.tagClass + '\", type \"' +\n              v.type + '\" expected value length \"' +\n              v.value.length + '\", got \"' +\n              obj.value.length + '\"');\n          }\n        }\n      }\n\n      if(rval && capture) {\n        if(v.capture) {\n          capture[v.capture] = obj.value;\n        }\n        if(v.captureAsn1) {\n          capture[v.captureAsn1] = obj;\n        }\n        if(v.captureBitStringContents && 'bitStringContents' in obj) {\n          capture[v.captureBitStringContents] = obj.bitStringContents;\n        }\n        if(v.captureBitStringValue && 'bitStringContents' in obj) {\n          var value;\n          if(obj.bitStringContents.length < 2) {\n            capture[v.captureBitStringValue] = '';\n          } else {\n            // FIXME: support unused bits with data shifting\n            var unused = obj.bitStringContents.charCodeAt(0);\n            if(unused !== 0) {\n              throw new Error(\n                'captureBitStringValue only supported for zero unused bits');\n            }\n            capture[v.captureBitStringValue] = obj.bitStringContents.slice(1);\n          }\n        }\n      }\n    } else if(errors) {\n      errors.push(\n        '[' + v.name + '] ' +\n        'Expected constructed \"' + v.constructed + '\", got \"' +\n        obj.constructed + '\"');\n    }\n  } else if(errors) {\n    if(obj.tagClass !== v.tagClass) {\n      errors.push(\n        '[' + v.name + '] ' +\n        'Expected tag class \"' + v.tagClass + '\", got \"' +\n        obj.tagClass + '\"');\n    }\n    if(obj.type !== v.type) {\n      errors.push(\n        '[' + v.name + '] ' +\n        'Expected type \"' + v.type + '\", got \"' + obj.type + '\"');\n    }\n  }\n  return rval;\n};\n\n// regex for testing for non-latin characters\nvar _nonLatinRegex = /[^\\\\u0000-\\\\u00ff]/;\n\n/**\n * Pretty prints an ASN.1 object to a string.\n *\n * @param obj the object to write out.\n * @param level the level in the tree.\n * @param indentation the indentation to use.\n *\n * @return the string.\n */\nasn1.prettyPrint = function(obj, level, indentation) {\n  var rval = '';\n\n  // set default level and indentation\n  level = level || 0;\n  indentation = indentation || 2;\n\n  // start new line for deep levels\n  if(level > 0) {\n    rval += '\\n';\n  }\n\n  // create indent\n  var indent = '';\n  for(var i = 0; i < level * indentation; ++i) {\n    indent += ' ';\n  }\n\n  // print class:type\n  rval += indent + 'Tag: ';\n  switch(obj.tagClass) {\n  case asn1.Class.UNIVERSAL:\n    rval += 'Universal:';\n    break;\n  case asn1.Class.APPLICATION:\n    rval += 'Application:';\n    break;\n  case asn1.Class.CONTEXT_SPECIFIC:\n    rval += 'Context-Specific:';\n    break;\n  case asn1.Class.PRIVATE:\n    rval += 'Private:';\n    break;\n  }\n\n  if(obj.tagClass === asn1.Class.UNIVERSAL) {\n    rval += obj.type;\n\n    // known types\n    switch(obj.type) {\n    case asn1.Type.NONE:\n      rval += ' (None)';\n      break;\n    case asn1.Type.BOOLEAN:\n      rval += ' (Boolean)';\n      break;\n    case asn1.Type.INTEGER:\n      rval += ' (Integer)';\n      break;\n    case asn1.Type.BITSTRING:\n      rval += ' (Bit string)';\n      break;\n    case asn1.Type.OCTETSTRING:\n      rval += ' (Octet string)';\n      break;\n    case asn1.Type.NULL:\n      rval += ' (Null)';\n      break;\n    case asn1.Type.OID:\n      rval += ' (Object Identifier)';\n      break;\n    case asn1.Type.ODESC:\n      rval += ' (Object Descriptor)';\n      break;\n    case asn1.Type.EXTERNAL:\n      rval += ' (External or Instance of)';\n      break;\n    case asn1.Type.REAL:\n      rval += ' (Real)';\n      break;\n    case asn1.Type.ENUMERATED:\n      rval += ' (Enumerated)';\n      break;\n    case asn1.Type.EMBEDDED:\n      rval += ' (Embedded PDV)';\n      break;\n    case asn1.Type.UTF8:\n      rval += ' (UTF8)';\n      break;\n    case asn1.Type.ROID:\n      rval += ' (Relative Object Identifier)';\n      break;\n    case asn1.Type.SEQUENCE:\n      rval += ' (Sequence)';\n      break;\n    case asn1.Type.SET:\n      rval += ' (Set)';\n      break;\n    case asn1.Type.PRINTABLESTRING:\n      rval += ' (Printable String)';\n      break;\n    case asn1.Type.IA5String:\n      rval += ' (IA5String (ASCII))';\n      break;\n    case asn1.Type.UTCTIME:\n      rval += ' (UTC time)';\n      break;\n    case asn1.Type.GENERALIZEDTIME:\n      rval += ' (Generalized time)';\n      break;\n    case asn1.Type.BMPSTRING:\n      rval += ' (BMP String)';\n      break;\n    }\n  } else {\n    rval += obj.type;\n  }\n\n  rval += '\\n';\n  rval += indent + 'Constructed: ' + obj.constructed + '\\n';\n\n  if(obj.composed) {\n    var subvalues = 0;\n    var sub = '';\n    for(var i = 0; i < obj.value.length; ++i) {\n      if(obj.value[i] !== undefined) {\n        subvalues += 1;\n        sub += asn1.prettyPrint(obj.value[i], level + 1, indentation);\n        if((i + 1) < obj.value.length) {\n          sub += ',';\n        }\n      }\n    }\n    rval += indent + 'Sub values: ' + subvalues + sub;\n  } else {\n    rval += indent + 'Value: ';\n    if(obj.type === asn1.Type.OID) {\n      var oid = asn1.derToOid(obj.value);\n      rval += oid;\n      if(forge.pki && forge.pki.oids) {\n        if(oid in forge.pki.oids) {\n          rval += ' (' + forge.pki.oids[oid] + ') ';\n        }\n      }\n    }\n    if(obj.type === asn1.Type.INTEGER) {\n      try {\n        rval += asn1.derToInteger(obj.value);\n      } catch(ex) {\n        rval += '0x' + forge.util.bytesToHex(obj.value);\n      }\n    } else if(obj.type === asn1.Type.BITSTRING) {\n      // TODO: shift bits as needed to display without padding\n      if(obj.value.length > 1) {\n        // remove unused bits field\n        rval += '0x' + forge.util.bytesToHex(obj.value.slice(1));\n      } else {\n        rval += '(none)';\n      }\n      // show unused bit count\n      if(obj.value.length > 0) {\n        var unused = obj.value.charCodeAt(0);\n        if(unused == 1) {\n          rval += ' (1 unused bit shown)';\n        } else if(unused > 1) {\n          rval += ' (' + unused + ' unused bits shown)';\n        }\n      }\n    } else if(obj.type === asn1.Type.OCTETSTRING) {\n      if(!_nonLatinRegex.test(obj.value)) {\n        rval += '(' + obj.value + ') ';\n      }\n      rval += '0x' + forge.util.bytesToHex(obj.value);\n    } else if(obj.type === asn1.Type.UTF8) {\n      rval += forge.util.decodeUtf8(obj.value);\n    } else if(obj.type === asn1.Type.PRINTABLESTRING ||\n      obj.type === asn1.Type.IA5String) {\n      rval += obj.value;\n    } else if(_nonLatinRegex.test(obj.value)) {\n      rval += '0x' + forge.util.bytesToHex(obj.value);\n    } else if(obj.value.length === 0) {\n      rval += '[null]';\n    } else {\n      rval += obj.value;\n    }\n  }\n\n  return rval;\n};\n","'use strict'\n\nconst multihashing = require('multihashing-async')\nconst protobuf = require('protons')\nconst bs58 = require('bs58')\n\nconst crypto = require('./ed25519')\nconst pbm = protobuf(require('./keys.proto'))\n\nclass Ed25519PublicKey {\n  constructor (key) {\n    this._key = ensureKey(key, crypto.publicKeyLength)\n  }\n\n  verify (data, sig, callback) {\n    ensure(callback)\n    crypto.hashAndVerify(this._key, sig, data, callback)\n  }\n\n  marshal () {\n    return Buffer.from(this._key)\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n}\n\nclass Ed25519PrivateKey {\n  // key       - 64 byte Uint8Array or Buffer containing private key\n  // publicKey - 32 byte Uint8Array or Buffer containing public key\n  constructor (key, publicKey) {\n    this._key = ensureKey(key, crypto.privateKeyLength)\n    this._publicKey = ensureKey(publicKey, crypto.publicKeyLength)\n  }\n\n  sign (message, callback) {\n    ensure(callback)\n    crypto.hashAndSign(this._key, message, callback)\n  }\n\n  get public () {\n    if (!this._publicKey) {\n      throw new Error('public key not provided')\n    }\n\n    return new Ed25519PublicKey(this._publicKey)\n  }\n\n  marshal () {\n    return Buffer.concat([Buffer.from(this._key), Buffer.from(this._publicKey)])\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.Ed25519,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n  id (callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, bs58.encode(hash))\n    })\n  }\n}\n\nfunction unmarshalEd25519PrivateKey (bytes, callback) {\n  try {\n    bytes = ensureKey(bytes, crypto.privateKeyLength + crypto.publicKeyLength)\n  } catch (err) {\n    return callback(err)\n  }\n  const privateKeyBytes = bytes.slice(0, crypto.privateKeyLength)\n  const publicKeyBytes = bytes.slice(crypto.privateKeyLength, bytes.length)\n  callback(null, new Ed25519PrivateKey(privateKeyBytes, publicKeyBytes))\n}\n\nfunction unmarshalEd25519PublicKey (bytes) {\n  bytes = ensureKey(bytes, crypto.publicKeyLength)\n  return new Ed25519PublicKey(bytes)\n}\n\nfunction generateKeyPair (_bits, cb) {\n  if (cb === undefined && typeof _bits === 'function') {\n    cb = _bits\n  }\n\n  crypto.generateKey((err, keys) => {\n    if (err) {\n      return cb(err)\n    }\n    let privkey\n    try {\n      privkey = new Ed25519PrivateKey(keys.secretKey, keys.publicKey)\n    } catch (err) {\n      cb(err)\n      return\n    }\n\n    cb(null, privkey)\n  })\n}\n\nfunction generateKeyPairFromSeed (seed, _bits, cb) {\n  if (cb === undefined && typeof _bits === 'function') {\n    cb = _bits\n  }\n\n  crypto.generateKeyFromSeed(seed, (err, keys) => {\n    if (err) {\n      return cb(err)\n    }\n    let privkey\n    try {\n      privkey = new Ed25519PrivateKey(keys.secretKey, keys.publicKey)\n    } catch (err) {\n      cb(err)\n      return\n    }\n\n    cb(null, privkey)\n  })\n}\n\nfunction ensure (cb) {\n  if (typeof cb !== 'function') {\n    throw new Error('callback is required')\n  }\n}\n\nfunction ensureKey (key, length) {\n  if (Buffer.isBuffer(key)) {\n    key = new Uint8Array(key)\n  }\n  if (!(key instanceof Uint8Array) || key.length !== length) {\n    throw new Error('Key must be a Uint8Array or Buffer of length ' + length)\n  }\n  return key\n}\n\nmodule.exports = {\n  Ed25519PublicKey,\n  Ed25519PrivateKey,\n  unmarshalEd25519PrivateKey,\n  unmarshalEd25519PublicKey,\n  generateKeyPair,\n  generateKeyPairFromSeed\n}\n","'use strict'\n\nconst whilst = require('async/whilst')\nconst hmac = require('../hmac')\n\nconst cipherMap = {\n  'AES-128': {\n    ivSize: 16,\n    keySize: 16\n  },\n  'AES-256': {\n    ivSize: 16,\n    keySize: 32\n  },\n  Blowfish: {\n    ivSize: 8,\n    cipherKeySize: 32\n  }\n}\n\n// Generates a set of keys for each party by stretching the shared key.\n// (myIV, theirIV, myCipherKey, theirCipherKey, myMACKey, theirMACKey)\nmodule.exports = (cipherType, hash, secret, callback) => {\n  const cipher = cipherMap[cipherType]\n\n  if (!cipher) {\n    return callback(new Error('unkown cipherType passed'))\n  }\n\n  if (!hash) {\n    return callback(new Error('unkown hashType passed'))\n  }\n\n  const cipherKeySize = cipher.keySize\n  const ivSize = cipher.ivSize\n  const hmacKeySize = 20\n  const seed = Buffer.from('key expansion')\n  const resultLength = 2 * (ivSize + cipherKeySize + hmacKeySize)\n\n  hmac.create(hash, secret, (err, m) => {\n    if (err) {\n      return callback(err)\n    }\n\n    m.digest(seed, (err, a) => {\n      if (err) {\n        return callback(err)\n      }\n\n      let result = []\n      let j = 0\n\n      whilst(\n        () => j < resultLength,\n        stretch,\n        finish\n      )\n\n      function stretch (cb) {\n        m.digest(Buffer.concat([a, seed]), (err, b) => {\n          if (err) {\n            return cb(err)\n          }\n\n          let todo = b.length\n\n          if (j + todo > resultLength) {\n            todo = resultLength - j\n          }\n\n          result.push(b)\n\n          j += todo\n\n          m.digest(a, (err, _a) => {\n            if (err) {\n              return cb(err)\n            }\n            a = _a\n            cb()\n          })\n        })\n      }\n\n      function finish (err) {\n        if (err) {\n          return callback(err)\n        }\n\n        const half = resultLength / 2\n        const resultBuffer = Buffer.concat(result)\n        const r1 = resultBuffer.slice(0, half)\n        const r2 = resultBuffer.slice(half, resultLength)\n\n        const createKey = (res) => ({\n          iv: res.slice(0, ivSize),\n          cipherKey: res.slice(ivSize, ivSize + cipherKeySize),\n          macKey: res.slice(ivSize + cipherKeySize)\n        })\n\n        callback(null, {\n          k1: createKey(r1),\n          k2: createKey(r2)\n        })\n      }\n    })\n  })\n}\n","/**\n * Javascript implementation of basic RSA algorithms.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2014 Digital Bazaar, Inc.\n *\n * The only algorithm currently supported for PKI is RSA.\n *\n * An RSA key is often stored in ASN.1 DER format. The SubjectPublicKeyInfo\n * ASN.1 structure is composed of an algorithm of type AlgorithmIdentifier\n * and a subjectPublicKey of type bit string.\n *\n * The AlgorithmIdentifier contains an Object Identifier (OID) and parameters\n * for the algorithm, if any. In the case of RSA, there aren't any.\n *\n * SubjectPublicKeyInfo ::= SEQUENCE {\n *   algorithm AlgorithmIdentifier,\n *   subjectPublicKey BIT STRING\n * }\n *\n * AlgorithmIdentifer ::= SEQUENCE {\n *   algorithm OBJECT IDENTIFIER,\n *   parameters ANY DEFINED BY algorithm OPTIONAL\n * }\n *\n * For an RSA public key, the subjectPublicKey is:\n *\n * RSAPublicKey ::= SEQUENCE {\n *   modulus            INTEGER,    -- n\n *   publicExponent     INTEGER     -- e\n * }\n *\n * PrivateKeyInfo ::= SEQUENCE {\n *   version                   Version,\n *   privateKeyAlgorithm       PrivateKeyAlgorithmIdentifier,\n *   privateKey                PrivateKey,\n *   attributes           [0]  IMPLICIT Attributes OPTIONAL\n * }\n *\n * Version ::= INTEGER\n * PrivateKeyAlgorithmIdentifier ::= AlgorithmIdentifier\n * PrivateKey ::= OCTET STRING\n * Attributes ::= SET OF Attribute\n *\n * An RSA private key as the following structure:\n *\n * RSAPrivateKey ::= SEQUENCE {\n *   version Version,\n *   modulus INTEGER, -- n\n *   publicExponent INTEGER, -- e\n *   privateExponent INTEGER, -- d\n *   prime1 INTEGER, -- p\n *   prime2 INTEGER, -- q\n *   exponent1 INTEGER, -- d mod (p-1)\n *   exponent2 INTEGER, -- d mod (q-1)\n *   coefficient INTEGER -- (inverse of q) mod p\n * }\n *\n * Version ::= INTEGER\n *\n * The OID for the RSA key algorithm is: 1.2.840.113549.1.1.1\n */\nvar forge = require('./forge');\nrequire('./asn1');\nrequire('./jsbn');\nrequire('./oids');\nrequire('./pkcs1');\nrequire('./prime');\nrequire('./random');\nrequire('./util');\n\nif(typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\nvar _crypto = forge.util.isNodejs ? require('crypto') : null;\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n// shortcut for util API\nvar util = forge.util;\n\n/*\n * RSA encryption and decryption, see RFC 2313.\n */\nforge.pki = forge.pki || {};\nmodule.exports = forge.pki.rsa = forge.rsa = forge.rsa || {};\nvar pki = forge.pki;\n\n// for finding primes, which are 30k+i for i = 1, 7, 11, 13, 17, 19, 23, 29\nvar GCD_30_DELTA = [6, 4, 2, 4, 2, 4, 6, 2];\n\n// validator for a PrivateKeyInfo structure\nvar privateKeyValidator = {\n  // PrivateKeyInfo\n  name: 'PrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // Version (INTEGER)\n    name: 'PrivateKeyInfo.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyVersion'\n  }, {\n    // privateKeyAlgorithm\n    name: 'PrivateKeyInfo.privateKeyAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'privateKeyOid'\n    }]\n  }, {\n    // PrivateKey\n    name: 'PrivateKeyInfo',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'privateKey'\n  }]\n};\n\n// validator for an RSA private key\nvar rsaPrivateKeyValidator = {\n  // RSAPrivateKey\n  name: 'RSAPrivateKey',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // Version (INTEGER)\n    name: 'RSAPrivateKey.version',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyVersion'\n  }, {\n    // modulus (n)\n    name: 'RSAPrivateKey.modulus',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyModulus'\n  }, {\n    // publicExponent (e)\n    name: 'RSAPrivateKey.publicExponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPublicExponent'\n  }, {\n    // privateExponent (d)\n    name: 'RSAPrivateKey.privateExponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrivateExponent'\n  }, {\n    // prime1 (p)\n    name: 'RSAPrivateKey.prime1',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrime1'\n  }, {\n    // prime2 (q)\n    name: 'RSAPrivateKey.prime2',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyPrime2'\n  }, {\n    // exponent1 (d mod (p-1))\n    name: 'RSAPrivateKey.exponent1',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyExponent1'\n  }, {\n    // exponent2 (d mod (q-1))\n    name: 'RSAPrivateKey.exponent2',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyExponent2'\n  }, {\n    // coefficient ((inverse of q) mod p)\n    name: 'RSAPrivateKey.coefficient',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'privateKeyCoefficient'\n  }]\n};\n\n// validator for an RSA public key\nvar rsaPublicKeyValidator = {\n  // RSAPublicKey\n  name: 'RSAPublicKey',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    // modulus (n)\n    name: 'RSAPublicKey.modulus',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'publicKeyModulus'\n  }, {\n    // publicExponent (e)\n    name: 'RSAPublicKey.exponent',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'publicKeyExponent'\n  }]\n};\n\n// validator for an SubjectPublicKeyInfo structure\n// Note: Currently only works with an RSA public key\nvar publicKeyValidator = forge.pki.rsa.publicKeyValidator = {\n  name: 'SubjectPublicKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  captureAsn1: 'subjectPublicKeyInfo',\n  value: [{\n    name: 'SubjectPublicKeyInfo.AlgorithmIdentifier',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'publicKeyOid'\n    }]\n  }, {\n    // subjectPublicKey\n    name: 'SubjectPublicKeyInfo.subjectPublicKey',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.BITSTRING,\n    constructed: false,\n    value: [{\n      // RSAPublicKey\n      name: 'SubjectPublicKeyInfo.subjectPublicKey.RSAPublicKey',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      optional: true,\n      captureAsn1: 'rsaPublicKey'\n    }]\n  }]\n};\n\n/**\n * Wrap digest in DigestInfo object.\n *\n * This function implements EMSA-PKCS1-v1_5-ENCODE as per RFC 3447.\n *\n * DigestInfo ::= SEQUENCE {\n *   digestAlgorithm DigestAlgorithmIdentifier,\n *   digest Digest\n * }\n *\n * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n * Digest ::= OCTET STRING\n *\n * @param md the message digest object with the hash to sign.\n *\n * @return the encoded message (ready for RSA encrytion)\n */\nvar emsaPkcs1v15encode = function(md) {\n  // get the oid for the algorithm\n  var oid;\n  if(md.algorithm in pki.oids) {\n    oid = pki.oids[md.algorithm];\n  } else {\n    var error = new Error('Unknown message digest algorithm.');\n    error.algorithm = md.algorithm;\n    throw error;\n  }\n  var oidBytes = asn1.oidToDer(oid).getBytes();\n\n  // create the digest info\n  var digestInfo = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n  var digestAlgorithm = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, []);\n  digestAlgorithm.value.push(asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.OID, false, oidBytes));\n  digestAlgorithm.value.push(asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.NULL, false, ''));\n  var digest = asn1.create(\n    asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING,\n    false, md.digest().getBytes());\n  digestInfo.value.push(digestAlgorithm);\n  digestInfo.value.push(digest);\n\n  // encode digest info\n  return asn1.toDer(digestInfo).getBytes();\n};\n\n/**\n * Performs x^c mod n (RSA encryption or decryption operation).\n *\n * @param x the number to raise and mod.\n * @param key the key to use.\n * @param pub true if the key is public, false if private.\n *\n * @return the result of x^c mod n.\n */\nvar _modPow = function(x, key, pub) {\n  if(pub) {\n    return x.modPow(key.e, key.n);\n  }\n\n  if(!key.p || !key.q) {\n    // allow calculation without CRT params (slow)\n    return x.modPow(key.d, key.n);\n  }\n\n  // pre-compute dP, dQ, and qInv if necessary\n  if(!key.dP) {\n    key.dP = key.d.mod(key.p.subtract(BigInteger.ONE));\n  }\n  if(!key.dQ) {\n    key.dQ = key.d.mod(key.q.subtract(BigInteger.ONE));\n  }\n  if(!key.qInv) {\n    key.qInv = key.q.modInverse(key.p);\n  }\n\n  /* Chinese remainder theorem (CRT) states:\n\n    Suppose n1, n2, ..., nk are positive integers which are pairwise\n    coprime (n1 and n2 have no common factors other than 1). For any\n    integers x1, x2, ..., xk there exists an integer x solving the\n    system of simultaneous congruences (where ~= means modularly\n    congruent so a ~= b mod n means a mod n = b mod n):\n\n    x ~= x1 mod n1\n    x ~= x2 mod n2\n    ...\n    x ~= xk mod nk\n\n    This system of congruences has a single simultaneous solution x\n    between 0 and n - 1. Furthermore, each xk solution and x itself\n    is congruent modulo the product n = n1*n2*...*nk.\n    So x1 mod n = x2 mod n = xk mod n = x mod n.\n\n    The single simultaneous solution x can be solved with the following\n    equation:\n\n    x = sum(xi*ri*si) mod n where ri = n/ni and si = ri^-1 mod ni.\n\n    Where x is less than n, xi = x mod ni.\n\n    For RSA we are only concerned with k = 2. The modulus n = pq, where\n    p and q are coprime. The RSA decryption algorithm is:\n\n    y = x^d mod n\n\n    Given the above:\n\n    x1 = x^d mod p\n    r1 = n/p = q\n    s1 = q^-1 mod p\n    x2 = x^d mod q\n    r2 = n/q = p\n    s2 = p^-1 mod q\n\n    So y = (x1r1s1 + x2r2s2) mod n\n         = ((x^d mod p)q(q^-1 mod p) + (x^d mod q)p(p^-1 mod q)) mod n\n\n    According to Fermat's Little Theorem, if the modulus P is prime,\n    for any integer A not evenly divisible by P, A^(P-1) ~= 1 mod P.\n    Since A is not divisible by P it follows that if:\n    N ~= M mod (P - 1), then A^N mod P = A^M mod P. Therefore:\n\n    A^N mod P = A^(M mod (P - 1)) mod P. (The latter takes less effort\n    to calculate). In order to calculate x^d mod p more quickly the\n    exponent d mod (p - 1) is stored in the RSA private key (the same\n    is done for x^d mod q). These values are referred to as dP and dQ\n    respectively. Therefore we now have:\n\n    y = ((x^dP mod p)q(q^-1 mod p) + (x^dQ mod q)p(p^-1 mod q)) mod n\n\n    Since we'll be reducing x^dP by modulo p (same for q) we can also\n    reduce x by p (and q respectively) before hand. Therefore, let\n\n    xp = ((x mod p)^dP mod p), and\n    xq = ((x mod q)^dQ mod q), yielding:\n\n    y = (xp*q*(q^-1 mod p) + xq*p*(p^-1 mod q)) mod n\n\n    This can be further reduced to a simple algorithm that only\n    requires 1 inverse (the q inverse is used) to be used and stored.\n    The algorithm is called Garner's algorithm. If qInv is the\n    inverse of q, we simply calculate:\n\n    y = (qInv*(xp - xq) mod p) * q + xq\n\n    However, there are two further complications. First, we need to\n    ensure that xp > xq to prevent signed BigIntegers from being used\n    so we add p until this is true (since we will be mod'ing with\n    p anyway). Then, there is a known timing attack on algorithms\n    using the CRT. To mitigate this risk, \"cryptographic blinding\"\n    should be used. This requires simply generating a random number r\n    between 0 and n-1 and its inverse and multiplying x by r^e before\n    calculating y and then multiplying y by r^-1 afterwards. Note that\n    r must be coprime with n (gcd(r, n) === 1) in order to have an\n    inverse.\n  */\n\n  // cryptographic blinding\n  var r;\n  do {\n    r = new BigInteger(\n      forge.util.bytesToHex(forge.random.getBytes(key.n.bitLength() / 8)),\n      16);\n  } while(r.compareTo(key.n) >= 0 || !r.gcd(key.n).equals(BigInteger.ONE));\n  x = x.multiply(r.modPow(key.e, key.n)).mod(key.n);\n\n  // calculate xp and xq\n  var xp = x.mod(key.p).modPow(key.dP, key.p);\n  var xq = x.mod(key.q).modPow(key.dQ, key.q);\n\n  // xp must be larger than xq to avoid signed bit usage\n  while(xp.compareTo(xq) < 0) {\n    xp = xp.add(key.p);\n  }\n\n  // do last step\n  var y = xp.subtract(xq)\n    .multiply(key.qInv).mod(key.p)\n    .multiply(key.q).add(xq);\n\n  // remove effect of random for cryptographic blinding\n  y = y.multiply(r.modInverse(key.n)).mod(key.n);\n\n  return y;\n};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED, use 'sign' on a private key object or\n * 'encrypt' on a public key object instead.\n *\n * Performs RSA encryption.\n *\n * The parameter bt controls whether to put padding bytes before the\n * message passed in. Set bt to either true or false to disable padding\n * completely (in order to handle e.g. EMSA-PSS encoding seperately before),\n * signaling whether the encryption operation is a public key operation\n * (i.e. encrypting data) or not, i.e. private key operation (data signing).\n *\n * For PKCS#1 v1.5 padding pass in the block type to use, i.e. either 0x01\n * (for signing) or 0x02 (for encryption). The key operation mode (private\n * or public) is derived from this flag in that case).\n *\n * @param m the message to encrypt as a byte string.\n * @param key the RSA key to use.\n * @param bt for PKCS#1 v1.5 padding, the block type to use\n *   (0x01 for private key, 0x02 for public),\n *   to disable padding: true = public key, false = private key.\n *\n * @return the encrypted bytes as a string.\n */\npki.rsa.encrypt = function(m, key, bt) {\n  var pub = bt;\n  var eb;\n\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  if(bt !== false && bt !== true) {\n    // legacy, default to PKCS#1 v1.5 padding\n    pub = (bt === 0x02);\n    eb = _encodePkcs1_v1_5(m, key, bt);\n  } else {\n    eb = forge.util.createBuffer();\n    eb.putBytes(m);\n  }\n\n  // load encryption block as big integer 'x'\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var x = new BigInteger(eb.toHex(), 16);\n\n  // do RSA encryption\n  var y = _modPow(x, key, pub);\n\n  // convert y into the encrypted data byte string, if y is shorter in\n  // bytes than k, then prepend zero bytes to fill up ed\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var yhex = y.toString(16);\n  var ed = forge.util.createBuffer();\n  var zeros = k - Math.ceil(yhex.length / 2);\n  while(zeros > 0) {\n    ed.putByte(0x00);\n    --zeros;\n  }\n  ed.putBytes(forge.util.hexToBytes(yhex));\n  return ed.getBytes();\n};\n\n/**\n * NOTE: THIS METHOD IS DEPRECATED, use 'decrypt' on a private key object or\n * 'verify' on a public key object instead.\n *\n * Performs RSA decryption.\n *\n * The parameter ml controls whether to apply PKCS#1 v1.5 padding\n * or not.  Set ml = false to disable padding removal completely\n * (in order to handle e.g. EMSA-PSS later on) and simply pass back\n * the RSA encryption block.\n *\n * @param ed the encrypted data to decrypt in as a byte string.\n * @param key the RSA key to use.\n * @param pub true for a public key operation, false for private.\n * @param ml the message length, if known, false to disable padding.\n *\n * @return the decrypted message as a byte string.\n */\npki.rsa.decrypt = function(ed, key, pub, ml) {\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  // error if the length of the encrypted data ED is not k\n  if(ed.length !== k) {\n    var error = new Error('Encrypted message length is invalid.');\n    error.length = ed.length;\n    error.expected = k;\n    throw error;\n  }\n\n  // convert encrypted data into a big integer\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var y = new BigInteger(forge.util.createBuffer(ed).toHex(), 16);\n\n  // y must be less than the modulus or it wasn't the result of\n  // a previous mod operation (encryption) using that modulus\n  if(y.compareTo(key.n) >= 0) {\n    throw new Error('Encrypted message is invalid.');\n  }\n\n  // do RSA decryption\n  var x = _modPow(y, key, pub);\n\n  // create the encryption block, if x is shorter in bytes than k, then\n  // prepend zero bytes to fill up eb\n  // FIXME: hex conversion inefficient, get BigInteger w/byte strings\n  var xhex = x.toString(16);\n  var eb = forge.util.createBuffer();\n  var zeros = k - Math.ceil(xhex.length / 2);\n  while(zeros > 0) {\n    eb.putByte(0x00);\n    --zeros;\n  }\n  eb.putBytes(forge.util.hexToBytes(xhex));\n\n  if(ml !== false) {\n    // legacy, default to PKCS#1 v1.5 padding\n    return _decodePkcs1_v1_5(eb.getBytes(), key, pub);\n  }\n\n  // return message\n  return eb.getBytes();\n};\n\n/**\n * Creates an RSA key-pair generation state object. It is used to allow\n * key-generation to be performed in steps. It also allows for a UI to\n * display progress updates.\n *\n * @param bits the size for the private key in bits, defaults to 2048.\n * @param e the public exponent to use, defaults to 65537 (0x10001).\n * @param [options] the options to use.\n *          prng a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\".\n *          algorithm the algorithm to use (default: 'PRIMEINC').\n *\n * @return the state object to use to generate the key-pair.\n */\npki.rsa.createKeyPairGenerationState = function(bits, e, options) {\n  // TODO: migrate step-based prime generation code to forge.prime\n\n  // set default bits\n  if(typeof(bits) === 'string') {\n    bits = parseInt(bits, 10);\n  }\n  bits = bits || 2048;\n\n  // create prng with api that matches BigInteger secure random\n  options = options || {};\n  var prng = options.prng || forge.random;\n  var rng = {\n    // x is an array to fill with bytes\n    nextBytes: function(x) {\n      var b = prng.getBytesSync(x.length);\n      for(var i = 0; i < x.length; ++i) {\n        x[i] = b.charCodeAt(i);\n      }\n    }\n  };\n\n  var algorithm = options.algorithm || 'PRIMEINC';\n\n  // create PRIMEINC algorithm state\n  var rval;\n  if(algorithm === 'PRIMEINC') {\n    rval = {\n      algorithm: algorithm,\n      state: 0,\n      bits: bits,\n      rng: rng,\n      eInt: e || 65537,\n      e: new BigInteger(null),\n      p: null,\n      q: null,\n      qBits: bits >> 1,\n      pBits: bits - (bits >> 1),\n      pqState: 0,\n      num: null,\n      keys: null\n    };\n    rval.e.fromInt(rval.eInt);\n  } else {\n    throw new Error('Invalid key generation algorithm: ' + algorithm);\n  }\n\n  return rval;\n};\n\n/**\n * Attempts to runs the key-generation algorithm for at most n seconds\n * (approximately) using the given state. When key-generation has completed,\n * the keys will be stored in state.keys.\n *\n * To use this function to update a UI while generating a key or to prevent\n * causing browser lockups/warnings, set \"n\" to a value other than 0. A\n * simple pattern for generating a key and showing a progress indicator is:\n *\n * var state = pki.rsa.createKeyPairGenerationState(2048);\n * var step = function() {\n *   // step key-generation, run algorithm for 100 ms, repeat\n *   if(!forge.pki.rsa.stepKeyPairGenerationState(state, 100)) {\n *     setTimeout(step, 1);\n *   } else {\n *     // key-generation complete\n *     // TODO: turn off progress indicator here\n *     // TODO: use the generated key-pair in \"state.keys\"\n *   }\n * };\n * // TODO: turn on progress indicator here\n * setTimeout(step, 0);\n *\n * @param state the state to use.\n * @param n the maximum number of milliseconds to run the algorithm for, 0\n *          to run the algorithm to completion.\n *\n * @return true if the key-generation completed, false if not.\n */\npki.rsa.stepKeyPairGenerationState = function(state, n) {\n  // set default algorithm if not set\n  if(!('algorithm' in state)) {\n    state.algorithm = 'PRIMEINC';\n  }\n\n  // TODO: migrate step-based prime generation code to forge.prime\n  // TODO: abstract as PRIMEINC algorithm\n\n  // do key generation (based on Tom Wu's rsa.js, see jsbn.js license)\n  // with some minor optimizations and designed to run in steps\n\n  // local state vars\n  var THIRTY = new BigInteger(null);\n  THIRTY.fromInt(30);\n  var deltaIdx = 0;\n  var op_or = function(x, y) {return x | y;};\n\n  // keep stepping until time limit is reached or done\n  var t1 = +new Date();\n  var t2;\n  var total = 0;\n  while(state.keys === null && (n <= 0 || total < n)) {\n    // generate p or q\n    if(state.state === 0) {\n      /* Note: All primes are of the form:\n\n        30k+i, for i < 30 and gcd(30, i)=1, where there are 8 values for i\n\n        When we generate a random number, we always align it at 30k + 1. Each\n        time the number is determined not to be prime we add to get to the\n        next 'i', eg: if the number was at 30k + 1 we add 6. */\n      var bits = (state.p === null) ? state.pBits : state.qBits;\n      var bits1 = bits - 1;\n\n      // get a random number\n      if(state.pqState === 0) {\n        state.num = new BigInteger(bits, state.rng);\n        // force MSB set\n        if(!state.num.testBit(bits1)) {\n          state.num.bitwiseTo(\n            BigInteger.ONE.shiftLeft(bits1), op_or, state.num);\n        }\n        // align number on 30k+1 boundary\n        state.num.dAddOffset(31 - state.num.mod(THIRTY).byteValue(), 0);\n        deltaIdx = 0;\n\n        ++state.pqState;\n      } else if(state.pqState === 1) {\n        // try to make the number a prime\n        if(state.num.bitLength() > bits) {\n          // overflow, try again\n          state.pqState = 0;\n          // do primality test\n        } else if(state.num.isProbablePrime(\n          _getMillerRabinTests(state.num.bitLength()))) {\n          ++state.pqState;\n        } else {\n          // get next potential prime\n          state.num.dAddOffset(GCD_30_DELTA[deltaIdx++ % 8], 0);\n        }\n      } else if(state.pqState === 2) {\n        // ensure number is coprime with e\n        state.pqState =\n          (state.num.subtract(BigInteger.ONE).gcd(state.e)\n            .compareTo(BigInteger.ONE) === 0) ? 3 : 0;\n      } else if(state.pqState === 3) {\n        // store p or q\n        state.pqState = 0;\n        if(state.p === null) {\n          state.p = state.num;\n        } else {\n          state.q = state.num;\n        }\n\n        // advance state if both p and q are ready\n        if(state.p !== null && state.q !== null) {\n          ++state.state;\n        }\n        state.num = null;\n      }\n    } else if(state.state === 1) {\n      // ensure p is larger than q (swap them if not)\n      if(state.p.compareTo(state.q) < 0) {\n        state.num = state.p;\n        state.p = state.q;\n        state.q = state.num;\n      }\n      ++state.state;\n    } else if(state.state === 2) {\n      // compute phi: (p - 1)(q - 1) (Euler's totient function)\n      state.p1 = state.p.subtract(BigInteger.ONE);\n      state.q1 = state.q.subtract(BigInteger.ONE);\n      state.phi = state.p1.multiply(state.q1);\n      ++state.state;\n    } else if(state.state === 3) {\n      // ensure e and phi are coprime\n      if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) === 0) {\n        // phi and e are coprime, advance\n        ++state.state;\n      } else {\n        // phi and e aren't coprime, so generate a new p and q\n        state.p = null;\n        state.q = null;\n        state.state = 0;\n      }\n    } else if(state.state === 4) {\n      // create n, ensure n is has the right number of bits\n      state.n = state.p.multiply(state.q);\n\n      // ensure n is right number of bits\n      if(state.n.bitLength() === state.bits) {\n        // success, advance\n        ++state.state;\n      } else {\n        // failed, get new q\n        state.q = null;\n        state.state = 0;\n      }\n    } else if(state.state === 5) {\n      // set keys\n      var d = state.e.modInverse(state.phi);\n      state.keys = {\n        privateKey: pki.rsa.setPrivateKey(\n          state.n, state.e, d, state.p, state.q,\n          d.mod(state.p1), d.mod(state.q1),\n          state.q.modInverse(state.p)),\n        publicKey: pki.rsa.setPublicKey(state.n, state.e)\n      };\n    }\n\n    // update timing\n    t2 = +new Date();\n    total += t2 - t1;\n    t1 = t2;\n  }\n\n  return state.keys !== null;\n};\n\n/**\n * Generates an RSA public-private key pair in a single call.\n *\n * To generate a key-pair in steps (to allow for progress updates and to\n * prevent blocking or warnings in slow browsers) then use the key-pair\n * generation state functions.\n *\n * To generate a key-pair asynchronously (either through web-workers, if\n * available, or by breaking up the work on the main thread), pass a\n * callback function.\n *\n * @param [bits] the size for the private key in bits, defaults to 2048.\n * @param [e] the public exponent to use, defaults to 65537.\n * @param [options] options for key-pair generation, if given then 'bits'\n *            and 'e' must *not* be given:\n *          bits the size for the private key in bits, (default: 2048).\n *          e the public exponent to use, (default: 65537 (0x10001)).\n *          workerScript the worker script URL.\n *          workers the number of web workers (if supported) to use,\n *            (default: 2).\n *          workLoad the size of the work load, ie: number of possible prime\n *            numbers for each web worker to check per work assignment,\n *            (default: 100).\n *          prng a custom crypto-secure pseudo-random number generator to use,\n *            that must define \"getBytesSync\". Disables use of native APIs.\n *          algorithm the algorithm to use (default: 'PRIMEINC').\n * @param [callback(err, keypair)] called once the operation completes.\n *\n * @return an object with privateKey and publicKey properties.\n */\npki.rsa.generateKeyPair = function(bits, e, options, callback) {\n  // (bits), (options), (callback)\n  if(arguments.length === 1) {\n    if(typeof bits === 'object') {\n      options = bits;\n      bits = undefined;\n    } else if(typeof bits === 'function') {\n      callback = bits;\n      bits = undefined;\n    }\n  } else if(arguments.length === 2) {\n    // (bits, e), (bits, options), (bits, callback), (options, callback)\n    if(typeof bits === 'number') {\n      if(typeof e === 'function') {\n        callback = e;\n        e = undefined;\n      } else if(typeof e !== 'number') {\n        options = e;\n        e = undefined;\n      }\n    } else {\n      options = bits;\n      callback = e;\n      bits = undefined;\n      e = undefined;\n    }\n  } else if(arguments.length === 3) {\n    // (bits, e, options), (bits, e, callback), (bits, options, callback)\n    if(typeof e === 'number') {\n      if(typeof options === 'function') {\n        callback = options;\n        options = undefined;\n      }\n    } else {\n      callback = options;\n      options = e;\n      e = undefined;\n    }\n  }\n  options = options || {};\n  if(bits === undefined) {\n    bits = options.bits || 2048;\n  }\n  if(e === undefined) {\n    e = options.e || 0x10001;\n  }\n\n  // use native code if permitted, available, and parameters are acceptable\n  if(!forge.options.usePureJavaScript && !options.prng &&\n    bits >= 256 && bits <= 16384 && (e === 0x10001 || e === 3)) {\n    if(callback) {\n      // try native async\n      if(_detectNodeCrypto('generateKeyPair')) {\n        return _crypto.generateKeyPair('rsa', {\n          modulusLength: bits,\n          publicExponent: e,\n          publicKeyEncoding: {\n            type: 'spki',\n            format: 'pem'\n          },\n          privateKeyEncoding: {\n            type: 'pkcs8',\n            format: 'pem'\n          }\n        }, function(err, pub, priv) {\n          if(err) {\n            return callback(err);\n          }\n          callback(null, {\n            privateKey: pki.privateKeyFromPem(priv),\n            publicKey: pki.publicKeyFromPem(pub)\n          });\n        });\n      }\n      if(_detectSubtleCrypto('generateKey') &&\n        _detectSubtleCrypto('exportKey')) {\n        // use standard native generateKey\n        return util.globalScope.crypto.subtle.generateKey({\n          name: 'RSASSA-PKCS1-v1_5',\n          modulusLength: bits,\n          publicExponent: _intToUint8Array(e),\n          hash: {name: 'SHA-256'}\n        }, true /* key can be exported*/, ['sign', 'verify'])\n        .then(function(pair) {\n          return util.globalScope.crypto.subtle.exportKey(\n            'pkcs8', pair.privateKey);\n        // avoiding catch(function(err) {...}) to support IE <= 8\n        }).then(undefined, function(err) {\n          callback(err);\n        }).then(function(pkcs8) {\n          if(pkcs8) {\n            var privateKey = pki.privateKeyFromAsn1(\n              asn1.fromDer(forge.util.createBuffer(pkcs8)));\n            callback(null, {\n              privateKey: privateKey,\n              publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)\n            });\n          }\n        });\n      }\n      if(_detectSubtleMsCrypto('generateKey') &&\n        _detectSubtleMsCrypto('exportKey')) {\n        var genOp = util.globalScope.msCrypto.subtle.generateKey({\n          name: 'RSASSA-PKCS1-v1_5',\n          modulusLength: bits,\n          publicExponent: _intToUint8Array(e),\n          hash: {name: 'SHA-256'}\n        }, true /* key can be exported*/, ['sign', 'verify']);\n        genOp.oncomplete = function(e) {\n          var pair = e.target.result;\n          var exportOp = util.globalScope.msCrypto.subtle.exportKey(\n            'pkcs8', pair.privateKey);\n          exportOp.oncomplete = function(e) {\n            var pkcs8 = e.target.result;\n            var privateKey = pki.privateKeyFromAsn1(\n              asn1.fromDer(forge.util.createBuffer(pkcs8)));\n            callback(null, {\n              privateKey: privateKey,\n              publicKey: pki.setRsaPublicKey(privateKey.n, privateKey.e)\n            });\n          };\n          exportOp.onerror = function(err) {\n            callback(err);\n          };\n        };\n        genOp.onerror = function(err) {\n          callback(err);\n        };\n        return;\n      }\n    } else {\n      // try native sync\n      if(_detectNodeCrypto('generateKeyPairSync')) {\n        var keypair = _crypto.generateKeyPairSync('rsa', {\n          modulusLength: bits,\n          publicExponent: e,\n          publicKeyEncoding: {\n            type: 'spki',\n            format: 'pem'\n          },\n          privateKeyEncoding: {\n            type: 'pkcs8',\n            format: 'pem'\n          }\n        });\n        return {\n          privateKey: pki.privateKeyFromPem(keypair.privateKey),\n          publicKey: pki.publicKeyFromPem(keypair.publicKey)\n        };\n      }\n    }\n  }\n\n  // use JavaScript implementation\n  var state = pki.rsa.createKeyPairGenerationState(bits, e, options);\n  if(!callback) {\n    pki.rsa.stepKeyPairGenerationState(state, 0);\n    return state.keys;\n  }\n  _generateKeyPair(state, options, callback);\n};\n\n/**\n * Sets an RSA public key from BigIntegers modulus and exponent.\n *\n * @param n the modulus.\n * @param e the exponent.\n *\n * @return the public key.\n */\npki.setRsaPublicKey = pki.rsa.setPublicKey = function(n, e) {\n  var key = {\n    n: n,\n    e: e\n  };\n\n  /**\n   * Encrypts the given data with this public key. Newer applications\n   * should use the 'RSA-OAEP' decryption scheme, 'RSAES-PKCS1-V1_5' is for\n   * legacy applications.\n   *\n   * @param data the byte string to encrypt.\n   * @param scheme the encryption scheme to use:\n   *          'RSAES-PKCS1-V1_5' (default),\n   *          'RSA-OAEP',\n   *          'RAW', 'NONE', or null to perform raw RSA encryption,\n   *          an object with an 'encode' property set to a function\n   *          with the signature 'function(data, key)' that returns\n   *          a binary-encoded string representing the encoded data.\n   * @param schemeOptions any scheme-specific options.\n   *\n   * @return the encrypted byte string.\n   */\n  key.encrypt = function(data, scheme, schemeOptions) {\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if(scheme === undefined) {\n      scheme = 'RSAES-PKCS1-V1_5';\n    }\n\n    if(scheme === 'RSAES-PKCS1-V1_5') {\n      scheme = {\n        encode: function(m, key, pub) {\n          return _encodePkcs1_v1_5(m, key, 0x02).getBytes();\n        }\n      };\n    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {\n      scheme = {\n        encode: function(m, key) {\n          return forge.pkcs1.encode_rsa_oaep(key, m, schemeOptions);\n        }\n      };\n    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {\n      scheme = {encode: function(e) {return e;}};\n    } else if(typeof scheme === 'string') {\n      throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n    }\n\n    // do scheme-based encoding then rsa encryption\n    var e = scheme.encode(data, key, true);\n    return pki.rsa.encrypt(e, key, true);\n  };\n\n  /**\n   * Verifies the given signature against the given digest.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-V1_5, in which case once RSA-decrypted, the\n   * signature is an OCTET STRING that holds a DigestInfo.\n   *\n   * DigestInfo ::= SEQUENCE {\n   *   digestAlgorithm DigestAlgorithmIdentifier,\n   *   digest Digest\n   * }\n   * DigestAlgorithmIdentifier ::= AlgorithmIdentifier\n   * Digest ::= OCTET STRING\n   *\n   * To perform PSS signature verification, provide an instance\n   * of Forge PSS object as the scheme parameter.\n   *\n   * @param digest the message digest hash to compare against the signature,\n   *          as a binary-encoded string.\n   * @param signature the signature to verify, as a binary-encoded string.\n   * @param scheme signature verification scheme to use:\n   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n   *          a Forge PSS object for RSASSA-PSS,\n   *          'NONE' or null for none, DigestInfo will not be expected, but\n   *            PKCS#1 v1.5 padding will still be used.\n   *\n   * @return true if the signature was verified, false if not.\n   */\n  key.verify = function(digest, signature, scheme) {\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if(scheme === undefined) {\n      scheme = 'RSASSA-PKCS1-V1_5';\n    }\n\n    if(scheme === 'RSASSA-PKCS1-V1_5') {\n      scheme = {\n        verify: function(digest, d) {\n          // remove padding\n          d = _decodePkcs1_v1_5(d, key, true);\n          // d is ASN.1 BER-encoded DigestInfo\n          var obj = asn1.fromDer(d);\n          // compare the given digest to the decrypted one\n          return digest === obj.value[1].value;\n        }\n      };\n    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {\n      scheme = {\n        verify: function(digest, d) {\n          // remove padding\n          d = _decodePkcs1_v1_5(d, key, true);\n          return digest === d;\n        }\n      };\n    }\n\n    // do rsa decryption w/o any decoding, then verify -- which does decoding\n    var d = pki.rsa.decrypt(signature, key, true, false);\n    return scheme.verify(digest, d, key.n.bitLength());\n  };\n\n  return key;\n};\n\n/**\n * Sets an RSA private key from BigIntegers modulus, exponent, primes,\n * prime exponents, and modular multiplicative inverse.\n *\n * @param n the modulus.\n * @param e the public exponent.\n * @param d the private exponent ((inverse of e) mod n).\n * @param p the first prime.\n * @param q the second prime.\n * @param dP exponent1 (d mod (p-1)).\n * @param dQ exponent2 (d mod (q-1)).\n * @param qInv ((inverse of q) mod p)\n *\n * @return the private key.\n */\npki.setRsaPrivateKey = pki.rsa.setPrivateKey = function(\n  n, e, d, p, q, dP, dQ, qInv) {\n  var key = {\n    n: n,\n    e: e,\n    d: d,\n    p: p,\n    q: q,\n    dP: dP,\n    dQ: dQ,\n    qInv: qInv\n  };\n\n  /**\n   * Decrypts the given data with this private key. The decryption scheme\n   * must match the one used to encrypt the data.\n   *\n   * @param data the byte string to decrypt.\n   * @param scheme the decryption scheme to use:\n   *          'RSAES-PKCS1-V1_5' (default),\n   *          'RSA-OAEP',\n   *          'RAW', 'NONE', or null to perform raw RSA decryption.\n   * @param schemeOptions any scheme-specific options.\n   *\n   * @return the decrypted byte string.\n   */\n  key.decrypt = function(data, scheme, schemeOptions) {\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    } else if(scheme === undefined) {\n      scheme = 'RSAES-PKCS1-V1_5';\n    }\n\n    // do rsa decryption w/o any decoding\n    var d = pki.rsa.decrypt(data, key, false, false);\n\n    if(scheme === 'RSAES-PKCS1-V1_5') {\n      scheme = {decode: _decodePkcs1_v1_5};\n    } else if(scheme === 'RSA-OAEP' || scheme === 'RSAES-OAEP') {\n      scheme = {\n        decode: function(d, key) {\n          return forge.pkcs1.decode_rsa_oaep(key, d, schemeOptions);\n        }\n      };\n    } else if(['RAW', 'NONE', 'NULL', null].indexOf(scheme) !== -1) {\n      scheme = {decode: function(d) {return d;}};\n    } else {\n      throw new Error('Unsupported encryption scheme: \"' + scheme + '\".');\n    }\n\n    // decode according to scheme\n    return scheme.decode(d, key, false);\n  };\n\n  /**\n   * Signs the given digest, producing a signature.\n   *\n   * PKCS#1 supports multiple (currently two) signature schemes:\n   * RSASSA-PKCS1-V1_5 and RSASSA-PSS.\n   *\n   * By default this implementation uses the \"old scheme\", i.e.\n   * RSASSA-PKCS1-V1_5. In order to generate a PSS signature, provide\n   * an instance of Forge PSS object as the scheme parameter.\n   *\n   * @param md the message digest object with the hash to sign.\n   * @param scheme the signature scheme to use:\n   *          'RSASSA-PKCS1-V1_5' or undefined for RSASSA PKCS#1 v1.5,\n   *          a Forge PSS object for RSASSA-PSS,\n   *          'NONE' or null for none, DigestInfo will not be used but\n   *            PKCS#1 v1.5 padding will still be used.\n   *\n   * @return the signature as a byte string.\n   */\n  key.sign = function(md, scheme) {\n    /* Note: The internal implementation of RSA operations is being\n      transitioned away from a PKCS#1 v1.5 hard-coded scheme. Some legacy\n      code like the use of an encoding block identifier 'bt' will eventually\n      be removed. */\n\n    // private key operation\n    var bt = false;\n\n    if(typeof scheme === 'string') {\n      scheme = scheme.toUpperCase();\n    }\n\n    if(scheme === undefined || scheme === 'RSASSA-PKCS1-V1_5') {\n      scheme = {encode: emsaPkcs1v15encode};\n      bt = 0x01;\n    } else if(scheme === 'NONE' || scheme === 'NULL' || scheme === null) {\n      scheme = {encode: function() {return md;}};\n      bt = 0x01;\n    }\n\n    // encode and then encrypt\n    var d = scheme.encode(md, key.n.bitLength());\n    return pki.rsa.encrypt(d, key, bt);\n  };\n\n  return key;\n};\n\n/**\n * Wraps an RSAPrivateKey ASN.1 object in an ASN.1 PrivateKeyInfo object.\n *\n * @param rsaKey the ASN.1 RSAPrivateKey.\n *\n * @return the ASN.1 PrivateKeyInfo.\n */\npki.wrapRsaPrivateKey = function(rsaKey) {\n  // PrivateKeyInfo\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version (0)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(0).getBytes()),\n    // privateKeyAlgorithm\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(\n        asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n    ]),\n    // PrivateKey\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false,\n      asn1.toDer(rsaKey).getBytes())\n  ]);\n};\n\n/**\n * Converts a private key from an ASN.1 object.\n *\n * @param obj the ASN.1 representation of a PrivateKeyInfo containing an\n *          RSAPrivateKey or an RSAPrivateKey.\n *\n * @return the private key.\n */\npki.privateKeyFromAsn1 = function(obj) {\n  // get PrivateKeyInfo\n  var capture = {};\n  var errors = [];\n  if(asn1.validate(obj, privateKeyValidator, capture, errors)) {\n    obj = asn1.fromDer(forge.util.createBuffer(capture.privateKey));\n  }\n\n  // get RSAPrivateKey\n  capture = {};\n  errors = [];\n  if(!asn1.validate(obj, rsaPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read private key. ' +\n      'ASN.1 object does not contain an RSAPrivateKey.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // Note: Version is currently ignored.\n  // capture.privateKeyVersion\n  // FIXME: inefficient, get a BigInteger that uses byte strings\n  var n, e, d, p, q, dP, dQ, qInv;\n  n = forge.util.createBuffer(capture.privateKeyModulus).toHex();\n  e = forge.util.createBuffer(capture.privateKeyPublicExponent).toHex();\n  d = forge.util.createBuffer(capture.privateKeyPrivateExponent).toHex();\n  p = forge.util.createBuffer(capture.privateKeyPrime1).toHex();\n  q = forge.util.createBuffer(capture.privateKeyPrime2).toHex();\n  dP = forge.util.createBuffer(capture.privateKeyExponent1).toHex();\n  dQ = forge.util.createBuffer(capture.privateKeyExponent2).toHex();\n  qInv = forge.util.createBuffer(capture.privateKeyCoefficient).toHex();\n\n  // set private key\n  return pki.setRsaPrivateKey(\n    new BigInteger(n, 16),\n    new BigInteger(e, 16),\n    new BigInteger(d, 16),\n    new BigInteger(p, 16),\n    new BigInteger(q, 16),\n    new BigInteger(dP, 16),\n    new BigInteger(dQ, 16),\n    new BigInteger(qInv, 16));\n};\n\n/**\n * Converts a private key to an ASN.1 RSAPrivateKey.\n *\n * @param key the private key.\n *\n * @return the ASN.1 representation of an RSAPrivateKey.\n */\npki.privateKeyToAsn1 = pki.privateKeyToRSAPrivateKey = function(key) {\n  // RSAPrivateKey\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // version (0 = only 2 primes, 1 multiple primes)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      asn1.integerToDer(0).getBytes()),\n    // modulus (n)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.n)),\n    // publicExponent (e)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.e)),\n    // privateExponent (d)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.d)),\n    // privateKeyPrime1 (p)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.p)),\n    // privateKeyPrime2 (q)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.q)),\n    // privateKeyExponent1 (dP)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.dP)),\n    // privateKeyExponent2 (dQ)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.dQ)),\n    // coefficient (qInv)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.qInv))\n  ]);\n};\n\n/**\n * Converts a public key from an ASN.1 SubjectPublicKeyInfo or RSAPublicKey.\n *\n * @param obj the asn1 representation of a SubjectPublicKeyInfo or RSAPublicKey.\n *\n * @return the public key.\n */\npki.publicKeyFromAsn1 = function(obj) {\n  // get SubjectPublicKeyInfo\n  var capture = {};\n  var errors = [];\n  if(asn1.validate(obj, publicKeyValidator, capture, errors)) {\n    // get oid\n    var oid = asn1.derToOid(capture.publicKeyOid);\n    if(oid !== pki.oids.rsaEncryption) {\n      var error = new Error('Cannot read public key. Unknown OID.');\n      error.oid = oid;\n      throw error;\n    }\n    obj = capture.rsaPublicKey;\n  }\n\n  // get RSA params\n  errors = [];\n  if(!asn1.validate(obj, rsaPublicKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read public key. ' +\n      'ASN.1 object does not contain an RSAPublicKey.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // FIXME: inefficient, get a BigInteger that uses byte strings\n  var n = forge.util.createBuffer(capture.publicKeyModulus).toHex();\n  var e = forge.util.createBuffer(capture.publicKeyExponent).toHex();\n\n  // set public key\n  return pki.setRsaPublicKey(\n    new BigInteger(n, 16),\n    new BigInteger(e, 16));\n};\n\n/**\n * Converts a public key to an ASN.1 SubjectPublicKeyInfo.\n *\n * @param key the public key.\n *\n * @return the asn1 representation of a SubjectPublicKeyInfo.\n */\npki.publicKeyToAsn1 = pki.publicKeyToSubjectPublicKeyInfo = function(key) {\n  // SubjectPublicKeyInfo\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // AlgorithmIdentifier\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      // algorithm\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(pki.oids.rsaEncryption).getBytes()),\n      // parameters (null)\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n    ]),\n    // subjectPublicKey\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.BITSTRING, false, [\n      pki.publicKeyToRSAPublicKey(key)\n    ])\n  ]);\n};\n\n/**\n * Converts a public key to an ASN.1 RSAPublicKey.\n *\n * @param key the public key.\n *\n * @return the asn1 representation of a RSAPublicKey.\n */\npki.publicKeyToRSAPublicKey = function(key) {\n  // RSAPublicKey\n  return asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // modulus (n)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.n)),\n    // publicExponent (e)\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      _bnToBytes(key.e))\n  ]);\n};\n\n/**\n * Encodes a message using PKCS#1 v1.5 padding.\n *\n * @param m the message to encode.\n * @param key the RSA key to use.\n * @param bt the block type to use, i.e. either 0x01 (for signing) or 0x02\n *          (for encryption).\n *\n * @return the padded byte buffer.\n */\nfunction _encodePkcs1_v1_5(m, key, bt) {\n  var eb = forge.util.createBuffer();\n\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  /* use PKCS#1 v1.5 padding */\n  if(m.length > (k - 11)) {\n    var error = new Error('Message is too long for PKCS#1 v1.5 padding.');\n    error.length = m.length;\n    error.max = k - 11;\n    throw error;\n  }\n\n  /* A block type BT, a padding string PS, and the data D shall be\n    formatted into an octet string EB, the encryption block:\n\n    EB = 00 || BT || PS || 00 || D\n\n    The block type BT shall be a single octet indicating the structure of\n    the encryption block. For this version of the document it shall have\n    value 00, 01, or 02. For a private-key operation, the block type\n    shall be 00 or 01. For a public-key operation, it shall be 02.\n\n    The padding string PS shall consist of k-3-||D|| octets. For block\n    type 00, the octets shall have value 00; for block type 01, they\n    shall have value FF; and for block type 02, they shall be\n    pseudorandomly generated and nonzero. This makes the length of the\n    encryption block EB equal to k. */\n\n  // build the encryption block\n  eb.putByte(0x00);\n  eb.putByte(bt);\n\n  // create the padding\n  var padNum = k - 3 - m.length;\n  var padByte;\n  // private key op\n  if(bt === 0x00 || bt === 0x01) {\n    padByte = (bt === 0x00) ? 0x00 : 0xFF;\n    for(var i = 0; i < padNum; ++i) {\n      eb.putByte(padByte);\n    }\n  } else {\n    // public key op\n    // pad with random non-zero values\n    while(padNum > 0) {\n      var numZeros = 0;\n      var padBytes = forge.random.getBytes(padNum);\n      for(var i = 0; i < padNum; ++i) {\n        padByte = padBytes.charCodeAt(i);\n        if(padByte === 0) {\n          ++numZeros;\n        } else {\n          eb.putByte(padByte);\n        }\n      }\n      padNum = numZeros;\n    }\n  }\n\n  // zero followed by message\n  eb.putByte(0x00);\n  eb.putBytes(m);\n\n  return eb;\n}\n\n/**\n * Decodes a message using PKCS#1 v1.5 padding.\n *\n * @param em the message to decode.\n * @param key the RSA key to use.\n * @param pub true if the key is a public key, false if it is private.\n * @param ml the message length, if specified.\n *\n * @return the decoded bytes.\n */\nfunction _decodePkcs1_v1_5(em, key, pub, ml) {\n  // get the length of the modulus in bytes\n  var k = Math.ceil(key.n.bitLength() / 8);\n\n  /* It is an error if any of the following conditions occurs:\n\n    1. The encryption block EB cannot be parsed unambiguously.\n    2. The padding string PS consists of fewer than eight octets\n      or is inconsisent with the block type BT.\n    3. The decryption process is a public-key operation and the block\n      type BT is not 00 or 01, or the decryption process is a\n      private-key operation and the block type is not 02.\n   */\n\n  // parse the encryption block\n  var eb = forge.util.createBuffer(em);\n  var first = eb.getByte();\n  var bt = eb.getByte();\n  if(first !== 0x00 ||\n    (pub && bt !== 0x00 && bt !== 0x01) ||\n    (!pub && bt != 0x02) ||\n    (pub && bt === 0x00 && typeof(ml) === 'undefined')) {\n    throw new Error('Encryption block is invalid.');\n  }\n\n  var padNum = 0;\n  if(bt === 0x00) {\n    // check all padding bytes for 0x00\n    padNum = k - 3 - ml;\n    for(var i = 0; i < padNum; ++i) {\n      if(eb.getByte() !== 0x00) {\n        throw new Error('Encryption block is invalid.');\n      }\n    }\n  } else if(bt === 0x01) {\n    // find the first byte that isn't 0xFF, should be after all padding\n    padNum = 0;\n    while(eb.length() > 1) {\n      if(eb.getByte() !== 0xFF) {\n        --eb.read;\n        break;\n      }\n      ++padNum;\n    }\n  } else if(bt === 0x02) {\n    // look for 0x00 byte\n    padNum = 0;\n    while(eb.length() > 1) {\n      if(eb.getByte() === 0x00) {\n        --eb.read;\n        break;\n      }\n      ++padNum;\n    }\n  }\n\n  // zero must be 0x00 and padNum must be (k - 3 - message length)\n  var zero = eb.getByte();\n  if(zero !== 0x00 || padNum !== (k - 3 - eb.length())) {\n    throw new Error('Encryption block is invalid.');\n  }\n\n  return eb.getBytes();\n}\n\n/**\n * Runs the key-generation algorithm asynchronously, either in the background\n * via Web Workers, or using the main thread and setImmediate.\n *\n * @param state the key-pair generation state.\n * @param [options] options for key-pair generation:\n *          workerScript the worker script URL.\n *          workers the number of web workers (if supported) to use,\n *            (default: 2, -1 to use estimated cores minus one).\n *          workLoad the size of the work load, ie: number of possible prime\n *            numbers for each web worker to check per work assignment,\n *            (default: 100).\n * @param callback(err, keypair) called once the operation completes.\n */\nfunction _generateKeyPair(state, options, callback) {\n  if(typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n\n  var opts = {\n    algorithm: {\n      name: options.algorithm || 'PRIMEINC',\n      options: {\n        workers: options.workers || 2,\n        workLoad: options.workLoad || 100,\n        workerScript: options.workerScript\n      }\n    }\n  };\n  if('prng' in options) {\n    opts.prng = options.prng;\n  }\n\n  generate();\n\n  function generate() {\n    // find p and then q (done in series to simplify)\n    getPrime(state.pBits, function(err, num) {\n      if(err) {\n        return callback(err);\n      }\n      state.p = num;\n      if(state.q !== null) {\n        return finish(err, state.q);\n      }\n      getPrime(state.qBits, finish);\n    });\n  }\n\n  function getPrime(bits, callback) {\n    forge.prime.generateProbablePrime(bits, opts, callback);\n  }\n\n  function finish(err, num) {\n    if(err) {\n      return callback(err);\n    }\n\n    // set q\n    state.q = num;\n\n    // ensure p is larger than q (swap them if not)\n    if(state.p.compareTo(state.q) < 0) {\n      var tmp = state.p;\n      state.p = state.q;\n      state.q = tmp;\n    }\n\n    // ensure p is coprime with e\n    if(state.p.subtract(BigInteger.ONE).gcd(state.e)\n      .compareTo(BigInteger.ONE) !== 0) {\n      state.p = null;\n      generate();\n      return;\n    }\n\n    // ensure q is coprime with e\n    if(state.q.subtract(BigInteger.ONE).gcd(state.e)\n      .compareTo(BigInteger.ONE) !== 0) {\n      state.q = null;\n      getPrime(state.qBits, finish);\n      return;\n    }\n\n    // compute phi: (p - 1)(q - 1) (Euler's totient function)\n    state.p1 = state.p.subtract(BigInteger.ONE);\n    state.q1 = state.q.subtract(BigInteger.ONE);\n    state.phi = state.p1.multiply(state.q1);\n\n    // ensure e and phi are coprime\n    if(state.phi.gcd(state.e).compareTo(BigInteger.ONE) !== 0) {\n      // phi and e aren't coprime, so generate a new p and q\n      state.p = state.q = null;\n      generate();\n      return;\n    }\n\n    // create n, ensure n is has the right number of bits\n    state.n = state.p.multiply(state.q);\n    if(state.n.bitLength() !== state.bits) {\n      // failed, get new q\n      state.q = null;\n      getPrime(state.qBits, finish);\n      return;\n    }\n\n    // set keys\n    var d = state.e.modInverse(state.phi);\n    state.keys = {\n      privateKey: pki.rsa.setPrivateKey(\n        state.n, state.e, d, state.p, state.q,\n        d.mod(state.p1), d.mod(state.q1),\n        state.q.modInverse(state.p)),\n      publicKey: pki.rsa.setPublicKey(state.n, state.e)\n    };\n\n    callback(null, state.keys);\n  }\n}\n\n/**\n * Converts a positive BigInteger into 2's-complement big-endian bytes.\n *\n * @param b the big integer to convert.\n *\n * @return the bytes.\n */\nfunction _bnToBytes(b) {\n  // prepend 0x00 if first byte >= 0x80\n  var hex = b.toString(16);\n  if(hex[0] >= '8') {\n    hex = '00' + hex;\n  }\n  var bytes = forge.util.hexToBytes(hex);\n\n  // ensure integer is minimally-encoded\n  if(bytes.length > 1 &&\n    // leading 0x00 for positive integer\n    ((bytes.charCodeAt(0) === 0 &&\n    (bytes.charCodeAt(1) & 0x80) === 0) ||\n    // leading 0xFF for negative integer\n    (bytes.charCodeAt(0) === 0xFF &&\n    (bytes.charCodeAt(1) & 0x80) === 0x80))) {\n    return bytes.substr(1);\n  }\n  return bytes;\n}\n\n/**\n * Returns the required number of Miller-Rabin tests to generate a\n * prime with an error probability of (1/2)^80.\n *\n * See Handbook of Applied Cryptography Chapter 4, Table 4.4.\n *\n * @param bits the bit size.\n *\n * @return the required number of iterations.\n */\nfunction _getMillerRabinTests(bits) {\n  if(bits <= 100) return 27;\n  if(bits <= 150) return 18;\n  if(bits <= 200) return 15;\n  if(bits <= 250) return 12;\n  if(bits <= 300) return 9;\n  if(bits <= 350) return 8;\n  if(bits <= 400) return 7;\n  if(bits <= 500) return 6;\n  if(bits <= 600) return 5;\n  if(bits <= 800) return 4;\n  if(bits <= 1250) return 3;\n  return 2;\n}\n\n/**\n * Performs feature detection on the Node crypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */\nfunction _detectNodeCrypto(fn) {\n  return forge.util.isNodejs && typeof _crypto[fn] === 'function';\n}\n\n/**\n * Performs feature detection on the SubtleCrypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */\nfunction _detectSubtleCrypto(fn) {\n  return (typeof util.globalScope !== 'undefined' &&\n    typeof util.globalScope.crypto === 'object' &&\n    typeof util.globalScope.crypto.subtle === 'object' &&\n    typeof util.globalScope.crypto.subtle[fn] === 'function');\n}\n\n/**\n * Performs feature detection on the deprecated Microsoft Internet Explorer\n * outdated SubtleCrypto interface. This function should only be used after\n * checking for the modern, standard SubtleCrypto interface.\n *\n * @param fn the feature (function) to detect.\n *\n * @return true if detected, false if not.\n */\nfunction _detectSubtleMsCrypto(fn) {\n  return (typeof util.globalScope !== 'undefined' &&\n    typeof util.globalScope.msCrypto === 'object' &&\n    typeof util.globalScope.msCrypto.subtle === 'object' &&\n    typeof util.globalScope.msCrypto.subtle[fn] === 'function');\n}\n\nfunction _intToUint8Array(x) {\n  var bytes = forge.util.hexToBytes(x.toString(16));\n  var buffer = new Uint8Array(bytes.length);\n  for(var i = 0; i < bytes.length; ++i) {\n    buffer[i] = bytes.charCodeAt(i);\n  }\n  return buffer;\n}\n\nfunction _privateKeyFromJwk(jwk) {\n  if(jwk.kty !== 'RSA') {\n    throw new Error(\n      'Unsupported key algorithm \"' + jwk.kty + '\"; algorithm must be \"RSA\".');\n  }\n  return pki.setRsaPrivateKey(\n    _base64ToBigInt(jwk.n),\n    _base64ToBigInt(jwk.e),\n    _base64ToBigInt(jwk.d),\n    _base64ToBigInt(jwk.p),\n    _base64ToBigInt(jwk.q),\n    _base64ToBigInt(jwk.dp),\n    _base64ToBigInt(jwk.dq),\n    _base64ToBigInt(jwk.qi));\n}\n\nfunction _publicKeyFromJwk(jwk) {\n  if(jwk.kty !== 'RSA') {\n    throw new Error('Key algorithm must be \"RSA\".');\n  }\n  return pki.setRsaPublicKey(\n    _base64ToBigInt(jwk.n),\n    _base64ToBigInt(jwk.e));\n}\n\nfunction _base64ToBigInt(b64) {\n  return new BigInteger(forge.util.bytesToHex(forge.util.decode64(b64)), 16);\n}\n","/**\n * Password-based encryption functions.\n *\n * @author Dave Longley\n * @author Stefan Siegl <stesie@brokenpipe.de>\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n * Copyright (c) 2012 Stefan Siegl <stesie@brokenpipe.de>\n *\n * An EncryptedPrivateKeyInfo:\n *\n * EncryptedPrivateKeyInfo ::= SEQUENCE {\n *   encryptionAlgorithm  EncryptionAlgorithmIdentifier,\n *   encryptedData        EncryptedData }\n *\n * EncryptionAlgorithmIdentifier ::= AlgorithmIdentifier\n *\n * EncryptedData ::= OCTET STRING\n */\nvar forge = require('./forge');\nrequire('./aes');\nrequire('./asn1');\nrequire('./des');\nrequire('./md');\nrequire('./oids');\nrequire('./pbkdf2');\nrequire('./pem');\nrequire('./random');\nrequire('./rc2');\nrequire('./rsa');\nrequire('./util');\n\nif(typeof BigInteger === 'undefined') {\n  var BigInteger = forge.jsbn.BigInteger;\n}\n\n// shortcut for asn.1 API\nvar asn1 = forge.asn1;\n\n/* Password-based encryption implementation. */\nvar pki = forge.pki = forge.pki || {};\nmodule.exports = pki.pbe = forge.pbe = forge.pbe || {};\nvar oids = pki.oids;\n\n// validator for an EncryptedPrivateKeyInfo structure\n// Note: Currently only works w/algorithm params\nvar encryptedPrivateKeyValidator = {\n  name: 'EncryptedPrivateKeyInfo',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'EncryptedPrivateKeyInfo.encryptionAlgorithm',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'AlgorithmIdentifier.algorithm',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encryptionOid'\n    }, {\n      name: 'AlgorithmIdentifier.parameters',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      captureAsn1: 'encryptionParams'\n    }]\n  }, {\n    // encryptedData\n    name: 'EncryptedPrivateKeyInfo.encryptedData',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'encryptedData'\n  }]\n};\n\n// validator for a PBES2Algorithms structure\n// Note: Currently only works w/PBKDF2 + AES encryption schemes\nvar PBES2AlgorithmsValidator = {\n  name: 'PBES2Algorithms',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'PBES2Algorithms.keyDerivationFunc',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.keyDerivationFunc.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'kdfOid'\n    }, {\n      name: 'PBES2Algorithms.params',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.SEQUENCE,\n      constructed: true,\n      value: [{\n        name: 'PBES2Algorithms.params.salt',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.OCTETSTRING,\n        constructed: false,\n        capture: 'kdfSalt'\n      }, {\n        name: 'PBES2Algorithms.params.iterationCount',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        capture: 'kdfIterationCount'\n      }, {\n        name: 'PBES2Algorithms.params.keyLength',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.INTEGER,\n        constructed: false,\n        optional: true,\n        capture: 'keyLength'\n      }, {\n        // prf\n        name: 'PBES2Algorithms.params.prf',\n        tagClass: asn1.Class.UNIVERSAL,\n        type: asn1.Type.SEQUENCE,\n        constructed: true,\n        optional: true,\n        value: [{\n          name: 'PBES2Algorithms.params.prf.algorithm',\n          tagClass: asn1.Class.UNIVERSAL,\n          type: asn1.Type.OID,\n          constructed: false,\n          capture: 'prfOid'\n        }]\n      }]\n    }]\n  }, {\n    name: 'PBES2Algorithms.encryptionScheme',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.SEQUENCE,\n    constructed: true,\n    value: [{\n      name: 'PBES2Algorithms.encryptionScheme.oid',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OID,\n      constructed: false,\n      capture: 'encOid'\n    }, {\n      name: 'PBES2Algorithms.encryptionScheme.iv',\n      tagClass: asn1.Class.UNIVERSAL,\n      type: asn1.Type.OCTETSTRING,\n      constructed: false,\n      capture: 'encIv'\n    }]\n  }]\n};\n\nvar pkcs12PbeParamsValidator = {\n  name: 'pkcs-12PbeParams',\n  tagClass: asn1.Class.UNIVERSAL,\n  type: asn1.Type.SEQUENCE,\n  constructed: true,\n  value: [{\n    name: 'pkcs-12PbeParams.salt',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.OCTETSTRING,\n    constructed: false,\n    capture: 'salt'\n  }, {\n    name: 'pkcs-12PbeParams.iterations',\n    tagClass: asn1.Class.UNIVERSAL,\n    type: asn1.Type.INTEGER,\n    constructed: false,\n    capture: 'iterations'\n  }]\n};\n\n/**\n * Encrypts a ASN.1 PrivateKeyInfo object, producing an EncryptedPrivateKeyInfo.\n *\n * PBES2Algorithms ALGORITHM-IDENTIFIER ::=\n *   { {PBES2-params IDENTIFIED BY id-PBES2}, ...}\n *\n * id-PBES2 OBJECT IDENTIFIER ::= {pkcs-5 13}\n *\n * PBES2-params ::= SEQUENCE {\n *   keyDerivationFunc AlgorithmIdentifier {{PBES2-KDFs}},\n *   encryptionScheme AlgorithmIdentifier {{PBES2-Encs}}\n * }\n *\n * PBES2-KDFs ALGORITHM-IDENTIFIER ::=\n *   { {PBKDF2-params IDENTIFIED BY id-PBKDF2}, ... }\n *\n * PBES2-Encs ALGORITHM-IDENTIFIER ::= { ... }\n *\n * PBKDF2-params ::= SEQUENCE {\n *   salt CHOICE {\n *     specified OCTET STRING,\n *     otherSource AlgorithmIdentifier {{PBKDF2-SaltSources}}\n *   },\n *   iterationCount INTEGER (1..MAX),\n *   keyLength INTEGER (1..MAX) OPTIONAL,\n *   prf AlgorithmIdentifier {{PBKDF2-PRFs}} DEFAULT algid-hmacWithSHA1\n * }\n *\n * @param obj the ASN.1 PrivateKeyInfo object.\n * @param password the password to encrypt with.\n * @param options:\n *          algorithm the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des'), defaults to 'aes128'.\n *          count the iteration count to use.\n *          saltSize the salt size to use.\n *          prfAlgorithm the PRF message digest algorithm to use\n *            ('sha1', 'sha224', 'sha256', 'sha384', 'sha512')\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptPrivateKeyInfo = function(obj, password, options) {\n  // set default options\n  options = options || {};\n  options.saltSize = options.saltSize || 8;\n  options.count = options.count || 2048;\n  options.algorithm = options.algorithm || 'aes128';\n  options.prfAlgorithm = options.prfAlgorithm || 'sha1';\n\n  // generate PBE params\n  var salt = forge.random.getBytesSync(options.saltSize);\n  var count = options.count;\n  var countBytes = asn1.integerToDer(count);\n  var dkLen;\n  var encryptionAlgorithm;\n  var encryptedData;\n  if(options.algorithm.indexOf('aes') === 0 || options.algorithm === 'des') {\n    // do PBES2\n    var ivLen, encOid, cipherFn;\n    switch(options.algorithm) {\n    case 'aes128':\n      dkLen = 16;\n      ivLen = 16;\n      encOid = oids['aes128-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes192':\n      dkLen = 24;\n      ivLen = 16;\n      encOid = oids['aes192-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'aes256':\n      dkLen = 32;\n      ivLen = 16;\n      encOid = oids['aes256-CBC'];\n      cipherFn = forge.aes.createEncryptionCipher;\n      break;\n    case 'des':\n      dkLen = 8;\n      ivLen = 8;\n      encOid = oids['desCBC'];\n      cipherFn = forge.des.createEncryptionCipher;\n      break;\n    default:\n      var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n      error.algorithm = options.algorithm;\n      throw error;\n    }\n\n    // get PRF message digest\n    var prfAlgorithm = 'hmacWith' + options.prfAlgorithm.toUpperCase();\n    var md = prfAlgorithmToMessageDigest(prfAlgorithm);\n\n    // encrypt private key using pbe SHA-1 and AES/DES\n    var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n    var iv = forge.random.getBytesSync(ivLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    // get PBKDF2-params\n    var params = createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm);\n\n    encryptionAlgorithm = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(oids['pkcs5PBES2']).getBytes()),\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // keyDerivationFunc\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(oids['pkcs5PBKDF2']).getBytes()),\n          // PBKDF2-params\n          params\n        ]),\n        // encryptionScheme\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n          asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n            asn1.oidToDer(encOid).getBytes()),\n          // iv\n          asn1.create(\n            asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, iv)\n        ])\n      ])\n    ]);\n  } else if(options.algorithm === '3des') {\n    // Do PKCS12 PBE\n    dkLen = 24;\n\n    var saltBytes = new forge.util.ByteBuffer(salt);\n    var dk = pki.pbe.generatePkcs12Key(password, saltBytes, 1, count, dkLen);\n    var iv = pki.pbe.generatePkcs12Key(password, saltBytes, 2, count, dkLen);\n    var cipher = forge.des.createEncryptionCipher(dk);\n    cipher.start(iv);\n    cipher.update(asn1.toDer(obj));\n    cipher.finish();\n    encryptedData = cipher.output.getBytes();\n\n    encryptionAlgorithm = asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n        asn1.oidToDer(oids['pbeWithSHAAnd3-KeyTripleDES-CBC']).getBytes()),\n      // pkcs-12PbeParams\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // salt\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n        // iteration count\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n          countBytes.getBytes())\n      ])\n    ]);\n  } else {\n    var error = new Error('Cannot encrypt private key. Unknown encryption algorithm.');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // EncryptedPrivateKeyInfo\n  var rval = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // encryptionAlgorithm\n    encryptionAlgorithm,\n    // encryptedData\n    asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, encryptedData)\n  ]);\n  return rval;\n};\n\n/**\n * Decrypts a ASN.1 PrivateKeyInfo object.\n *\n * @param obj the ASN.1 EncryptedPrivateKeyInfo object.\n * @param password the password to decrypt with.\n *\n * @return the ASN.1 PrivateKeyInfo on success, null on failure.\n */\npki.decryptPrivateKeyInfo = function(obj, password) {\n  var rval = null;\n\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(obj, encryptedPrivateKeyValidator, capture, errors)) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // get cipher\n  var oid = asn1.derToOid(capture.encryptionOid);\n  var cipher = pki.pbe.getCipher(oid, capture.encryptionParams, password);\n\n  // get encrypted data\n  var encrypted = forge.util.createBuffer(capture.encryptedData);\n\n  cipher.update(encrypted);\n  if(cipher.finish()) {\n    rval = asn1.fromDer(cipher.output);\n  }\n\n  return rval;\n};\n\n/**\n * Converts a EncryptedPrivateKeyInfo to PEM format.\n *\n * @param epki the EncryptedPrivateKeyInfo.\n * @param maxline the maximum characters per line, defaults to 64.\n *\n * @return the PEM-formatted encrypted private key.\n */\npki.encryptedPrivateKeyToPem = function(epki, maxline) {\n  // convert to DER, then PEM-encode\n  var msg = {\n    type: 'ENCRYPTED PRIVATE KEY',\n    body: asn1.toDer(epki).getBytes()\n  };\n  return forge.pem.encode(msg, {maxline: maxline});\n};\n\n/**\n * Converts a PEM-encoded EncryptedPrivateKeyInfo to ASN.1 format. Decryption\n * is not performed.\n *\n * @param pem the EncryptedPrivateKeyInfo in PEM-format.\n *\n * @return the ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptedPrivateKeyFromPem = function(pem) {\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY') {\n    var error = new Error('Could not convert encrypted private key from PEM; ' +\n      'PEM header type is \"ENCRYPTED PRIVATE KEY\".');\n    error.headerType = msg.type;\n    throw error;\n  }\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    throw new Error('Could not convert encrypted private key from PEM; ' +\n      'PEM is encrypted.');\n  }\n\n  // convert DER to ASN.1 object\n  return asn1.fromDer(msg.body);\n};\n\n/**\n * Encrypts an RSA private key. By default, the key will be wrapped in\n * a PrivateKeyInfo and encrypted to produce a PKCS#8 EncryptedPrivateKeyInfo.\n * This is the standard, preferred way to encrypt a private key.\n *\n * To produce a non-standard PEM-encrypted private key that uses encapsulated\n * headers to indicate the encryption algorithm (old-style non-PKCS#8 OpenSSL\n * private key encryption), set the 'legacy' option to true. Note: Using this\n * option will cause the iteration count to be forced to 1.\n *\n * Note: The 'des' algorithm is supported, but it is not considered to be\n * secure because it only uses a single 56-bit key. If possible, it is highly\n * recommended that a different algorithm be used.\n *\n * @param rsaKey the RSA key to encrypt.\n * @param password the password to use.\n * @param options:\n *          algorithm: the encryption algorithm to use\n *            ('aes128', 'aes192', 'aes256', '3des', 'des').\n *          count: the iteration count to use.\n *          saltSize: the salt size to use.\n *          legacy: output an old non-PKCS#8 PEM-encrypted+encapsulated\n *            headers (DEK-Info) private key.\n *\n * @return the PEM-encoded ASN.1 EncryptedPrivateKeyInfo.\n */\npki.encryptRsaPrivateKey = function(rsaKey, password, options) {\n  // standard PKCS#8\n  options = options || {};\n  if(!options.legacy) {\n    // encrypt PrivateKeyInfo\n    var rval = pki.wrapRsaPrivateKey(pki.privateKeyToAsn1(rsaKey));\n    rval = pki.encryptPrivateKeyInfo(rval, password, options);\n    return pki.encryptedPrivateKeyToPem(rval);\n  }\n\n  // legacy non-PKCS#8\n  var algorithm;\n  var iv;\n  var dkLen;\n  var cipherFn;\n  switch(options.algorithm) {\n  case 'aes128':\n    algorithm = 'AES-128-CBC';\n    dkLen = 16;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case 'aes192':\n    algorithm = 'AES-192-CBC';\n    dkLen = 24;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case 'aes256':\n    algorithm = 'AES-256-CBC';\n    dkLen = 32;\n    iv = forge.random.getBytesSync(16);\n    cipherFn = forge.aes.createEncryptionCipher;\n    break;\n  case '3des':\n    algorithm = 'DES-EDE3-CBC';\n    dkLen = 24;\n    iv = forge.random.getBytesSync(8);\n    cipherFn = forge.des.createEncryptionCipher;\n    break;\n  case 'des':\n    algorithm = 'DES-CBC';\n    dkLen = 8;\n    iv = forge.random.getBytesSync(8);\n    cipherFn = forge.des.createEncryptionCipher;\n    break;\n  default:\n    var error = new Error('Could not encrypt RSA private key; unsupported ' +\n      'encryption algorithm \"' + options.algorithm + '\".');\n    error.algorithm = options.algorithm;\n    throw error;\n  }\n\n  // encrypt private key using OpenSSL legacy key derivation\n  var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n  cipher.update(asn1.toDer(pki.privateKeyToAsn1(rsaKey)));\n  cipher.finish();\n\n  var msg = {\n    type: 'RSA PRIVATE KEY',\n    procType: {\n      version: '4',\n      type: 'ENCRYPTED'\n    },\n    dekInfo: {\n      algorithm: algorithm,\n      parameters: forge.util.bytesToHex(iv).toUpperCase()\n    },\n    body: cipher.output.getBytes()\n  };\n  return forge.pem.encode(msg);\n};\n\n/**\n * Decrypts an RSA private key.\n *\n * @param pem the PEM-formatted EncryptedPrivateKeyInfo to decrypt.\n * @param password the password to use.\n *\n * @return the RSA key on success, null on failure.\n */\npki.decryptRsaPrivateKey = function(pem, password) {\n  var rval = null;\n\n  var msg = forge.pem.decode(pem)[0];\n\n  if(msg.type !== 'ENCRYPTED PRIVATE KEY' &&\n    msg.type !== 'PRIVATE KEY' &&\n    msg.type !== 'RSA PRIVATE KEY') {\n    var error = new Error('Could not convert private key from PEM; PEM header type ' +\n      'is not \"ENCRYPTED PRIVATE KEY\", \"PRIVATE KEY\", or \"RSA PRIVATE KEY\".');\n    error.headerType = error;\n    throw error;\n  }\n\n  if(msg.procType && msg.procType.type === 'ENCRYPTED') {\n    var dkLen;\n    var cipherFn;\n    switch(msg.dekInfo.algorithm) {\n    case 'DES-CBC':\n      dkLen = 8;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'DES-EDE3-CBC':\n      dkLen = 24;\n      cipherFn = forge.des.createDecryptionCipher;\n      break;\n    case 'AES-128-CBC':\n      dkLen = 16;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'AES-192-CBC':\n      dkLen = 24;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'AES-256-CBC':\n      dkLen = 32;\n      cipherFn = forge.aes.createDecryptionCipher;\n      break;\n    case 'RC2-40-CBC':\n      dkLen = 5;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 40);\n      };\n      break;\n    case 'RC2-64-CBC':\n      dkLen = 8;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 64);\n      };\n      break;\n    case 'RC2-128-CBC':\n      dkLen = 16;\n      cipherFn = function(key) {\n        return forge.rc2.createDecryptionCipher(key, 128);\n      };\n      break;\n    default:\n      var error = new Error('Could not decrypt private key; unsupported ' +\n        'encryption algorithm \"' + msg.dekInfo.algorithm + '\".');\n      error.algorithm = msg.dekInfo.algorithm;\n      throw error;\n    }\n\n    // use OpenSSL legacy key derivation\n    var iv = forge.util.hexToBytes(msg.dekInfo.parameters);\n    var dk = forge.pbe.opensslDeriveBytes(password, iv.substr(0, 8), dkLen);\n    var cipher = cipherFn(dk);\n    cipher.start(iv);\n    cipher.update(forge.util.createBuffer(msg.body));\n    if(cipher.finish()) {\n      rval = cipher.output.getBytes();\n    } else {\n      return rval;\n    }\n  } else {\n    rval = msg.body;\n  }\n\n  if(msg.type === 'ENCRYPTED PRIVATE KEY') {\n    rval = pki.decryptPrivateKeyInfo(asn1.fromDer(rval), password);\n  } else {\n    // decryption already performed above\n    rval = asn1.fromDer(rval);\n  }\n\n  if(rval !== null) {\n    rval = pki.privateKeyFromAsn1(rval);\n  }\n\n  return rval;\n};\n\n/**\n * Derives a PKCS#12 key.\n *\n * @param password the password to derive the key material from, null or\n *          undefined for none.\n * @param salt the salt, as a ByteBuffer, to use.\n * @param id the PKCS#12 ID byte (1 = key material, 2 = IV, 3 = MAC).\n * @param iter the iteration count.\n * @param n the number of bytes to derive from the password.\n * @param md the message digest to use, defaults to SHA-1.\n *\n * @return a ByteBuffer with the bytes derived from the password.\n */\npki.pbe.generatePkcs12Key = function(password, salt, id, iter, n, md) {\n  var j, l;\n\n  if(typeof md === 'undefined' || md === null) {\n    if(!('sha1' in forge.md)) {\n      throw new Error('\"sha1\" hash algorithm unavailable.');\n    }\n    md = forge.md.sha1.create();\n  }\n\n  var u = md.digestLength;\n  var v = md.blockLength;\n  var result = new forge.util.ByteBuffer();\n\n  /* Convert password to Unicode byte buffer + trailing 0-byte. */\n  var passBuf = new forge.util.ByteBuffer();\n  if(password !== null && password !== undefined) {\n    for(l = 0; l < password.length; l++) {\n      passBuf.putInt16(password.charCodeAt(l));\n    }\n    passBuf.putInt16(0);\n  }\n\n  /* Length of salt and password in BYTES. */\n  var p = passBuf.length();\n  var s = salt.length();\n\n  /* 1. Construct a string, D (the \"diversifier\"), by concatenating\n        v copies of ID. */\n  var D = new forge.util.ByteBuffer();\n  D.fillWithByte(id, v);\n\n  /* 2. Concatenate copies of the salt together to create a string S of length\n        v * ceil(s / v) bytes (the final copy of the salt may be trunacted\n        to create S).\n        Note that if the salt is the empty string, then so is S. */\n  var Slen = v * Math.ceil(s / v);\n  var S = new forge.util.ByteBuffer();\n  for(l = 0; l < Slen; l++) {\n    S.putByte(salt.at(l % s));\n  }\n\n  /* 3. Concatenate copies of the password together to create a string P of\n        length v * ceil(p / v) bytes (the final copy of the password may be\n        truncated to create P).\n        Note that if the password is the empty string, then so is P. */\n  var Plen = v * Math.ceil(p / v);\n  var P = new forge.util.ByteBuffer();\n  for(l = 0; l < Plen; l++) {\n    P.putByte(passBuf.at(l % p));\n  }\n\n  /* 4. Set I=S||P to be the concatenation of S and P. */\n  var I = S;\n  I.putBuffer(P);\n\n  /* 5. Set c=ceil(n / u). */\n  var c = Math.ceil(n / u);\n\n  /* 6. For i=1, 2, ..., c, do the following: */\n  for(var i = 1; i <= c; i++) {\n    /* a) Set Ai=H^r(D||I). (l.e. the rth hash of D||I, H(H(H(...H(D||I)))) */\n    var buf = new forge.util.ByteBuffer();\n    buf.putBytes(D.bytes());\n    buf.putBytes(I.bytes());\n    for(var round = 0; round < iter; round++) {\n      md.start();\n      md.update(buf.getBytes());\n      buf = md.digest();\n    }\n\n    /* b) Concatenate copies of Ai to create a string B of length v bytes (the\n          final copy of Ai may be truncated to create B). */\n    var B = new forge.util.ByteBuffer();\n    for(l = 0; l < v; l++) {\n      B.putByte(buf.at(l % u));\n    }\n\n    /* c) Treating I as a concatenation I0, I1, ..., Ik-1 of v-byte blocks,\n          where k=ceil(s / v) + ceil(p / v), modify I by setting\n          Ij=(Ij+B+1) mod 2v for each j.  */\n    var k = Math.ceil(s / v) + Math.ceil(p / v);\n    var Inew = new forge.util.ByteBuffer();\n    for(j = 0; j < k; j++) {\n      var chunk = new forge.util.ByteBuffer(I.getBytes(v));\n      var x = 0x1ff;\n      for(l = B.length() - 1; l >= 0; l--) {\n        x = x >> 8;\n        x += B.at(l) + chunk.at(l);\n        chunk.setAt(l, x & 0xff);\n      }\n      Inew.putBuffer(chunk);\n    }\n    I = Inew;\n\n    /* Add Ai to A. */\n    result.putBuffer(buf);\n  }\n\n  result.truncate(result.length() - n);\n  return result;\n};\n\n/**\n * Get new Forge cipher object instance.\n *\n * @param oid the OID (in string notation).\n * @param params the ASN.1 params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipher = function(oid, params, password) {\n  switch(oid) {\n  case pki.oids['pkcs5PBES2']:\n    return pki.pbe.getCipherForPBES2(oid, params, password);\n\n  case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n  case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n    return pki.pbe.getCipherForPKCS12PBE(oid, params, password);\n\n  default:\n    var error = new Error('Cannot read encrypted PBE data block. Unsupported OID.');\n    error.oid = oid;\n    error.supportedOids = [\n      'pkcs5PBES2',\n      'pbeWithSHAAnd3-KeyTripleDES-CBC',\n      'pbewithSHAAnd40BitRC2-CBC'\n    ];\n    throw error;\n  }\n};\n\n/**\n * Get new Forge cipher object instance according to PBES2 params block.\n *\n * The returned cipher instance is already started using the IV\n * from PBES2 parameter block.\n *\n * @param oid the PKCS#5 PBKDF2 OID (in string notation).\n * @param params the ASN.1 PBES2-params object.\n * @param password the password to decrypt with.\n *\n * @return new cipher object instance.\n */\npki.pbe.getCipherForPBES2 = function(oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(params, PBES2AlgorithmsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  // check oids\n  oid = asn1.derToOid(capture.kdfOid);\n  if(oid !== pki.oids['pkcs5PBKDF2']) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'Unsupported key derivation function OID.');\n    error.oid = oid;\n    error.supportedOids = ['pkcs5PBKDF2'];\n    throw error;\n  }\n  oid = asn1.derToOid(capture.encOid);\n  if(oid !== pki.oids['aes128-CBC'] &&\n    oid !== pki.oids['aes192-CBC'] &&\n    oid !== pki.oids['aes256-CBC'] &&\n    oid !== pki.oids['des-EDE3-CBC'] &&\n    oid !== pki.oids['desCBC']) {\n    var error = new Error('Cannot read encrypted private key. ' +\n      'Unsupported encryption scheme OID.');\n    error.oid = oid;\n    error.supportedOids = [\n      'aes128-CBC', 'aes192-CBC', 'aes256-CBC', 'des-EDE3-CBC', 'desCBC'];\n    throw error;\n  }\n\n  // set PBE params\n  var salt = capture.kdfSalt;\n  var count = forge.util.createBuffer(capture.kdfIterationCount);\n  count = count.getInt(count.length() << 3);\n  var dkLen;\n  var cipherFn;\n  switch(pki.oids[oid]) {\n  case 'aes128-CBC':\n    dkLen = 16;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'aes192-CBC':\n    dkLen = 24;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'aes256-CBC':\n    dkLen = 32;\n    cipherFn = forge.aes.createDecryptionCipher;\n    break;\n  case 'des-EDE3-CBC':\n    dkLen = 24;\n    cipherFn = forge.des.createDecryptionCipher;\n    break;\n  case 'desCBC':\n    dkLen = 8;\n    cipherFn = forge.des.createDecryptionCipher;\n    break;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n\n  // decrypt private key using pbe with chosen PRF and AES/DES\n  var dk = forge.pkcs5.pbkdf2(password, salt, count, dkLen, md);\n  var iv = capture.encIv;\n  var cipher = cipherFn(dk);\n  cipher.start(iv);\n\n  return cipher;\n};\n\n/**\n * Get new Forge cipher object instance for PKCS#12 PBE.\n *\n * The returned cipher instance is already started using the key & IV\n * derived from the provided password and PKCS#12 PBE salt.\n *\n * @param oid The PKCS#12 PBE OID (in string notation).\n * @param params The ASN.1 PKCS#12 PBE-params object.\n * @param password The password to decrypt with.\n *\n * @return the new cipher object instance.\n */\npki.pbe.getCipherForPKCS12PBE = function(oid, params, password) {\n  // get PBE params\n  var capture = {};\n  var errors = [];\n  if(!asn1.validate(params, pkcs12PbeParamsValidator, capture, errors)) {\n    var error = new Error('Cannot read password-based-encryption algorithm ' +\n      'parameters. ASN.1 object is not a supported EncryptedPrivateKeyInfo.');\n    error.errors = errors;\n    throw error;\n  }\n\n  var salt = forge.util.createBuffer(capture.salt);\n  var count = forge.util.createBuffer(capture.iterations);\n  count = count.getInt(count.length() << 3);\n\n  var dkLen, dIvLen, cipherFn;\n  switch(oid) {\n    case pki.oids['pbeWithSHAAnd3-KeyTripleDES-CBC']:\n      dkLen = 24;\n      dIvLen = 8;\n      cipherFn = forge.des.startDecrypting;\n      break;\n\n    case pki.oids['pbewithSHAAnd40BitRC2-CBC']:\n      dkLen = 5;\n      dIvLen = 8;\n      cipherFn = function(key, iv) {\n        var cipher = forge.rc2.createDecryptionCipher(key, 40);\n        cipher.start(iv, null);\n        return cipher;\n      };\n      break;\n\n    default:\n      var error = new Error('Cannot read PKCS #12 PBE data block. Unsupported OID.');\n      error.oid = oid;\n      throw error;\n  }\n\n  // get PRF message digest\n  var md = prfOidToMessageDigest(capture.prfOid);\n  var key = pki.pbe.generatePkcs12Key(password, salt, 1, count, dkLen, md);\n  md.start();\n  var iv = pki.pbe.generatePkcs12Key(password, salt, 2, count, dIvLen, md);\n\n  return cipherFn(key, iv);\n};\n\n/**\n * OpenSSL's legacy key derivation function.\n *\n * See: http://www.openssl.org/docs/crypto/EVP_BytesToKey.html\n *\n * @param password the password to derive the key from.\n * @param salt the salt to use, null for none.\n * @param dkLen the number of bytes needed for the derived key.\n * @param [options] the options to use:\n *          [md] an optional message digest object to use.\n */\npki.pbe.opensslDeriveBytes = function(password, salt, dkLen, md) {\n  if(typeof md === 'undefined' || md === null) {\n    if(!('md5' in forge.md)) {\n      throw new Error('\"md5\" hash algorithm unavailable.');\n    }\n    md = forge.md.md5.create();\n  }\n  if(salt === null) {\n    salt = '';\n  }\n  var digests = [hash(md, password + salt)];\n  for(var length = 16, i = 1; length < dkLen; ++i, length += 16) {\n    digests.push(hash(md, digests[i - 1] + password + salt));\n  }\n  return digests.join('').substr(0, dkLen);\n};\n\nfunction hash(md, bytes) {\n  return md.start().update(bytes).digest().getBytes();\n}\n\nfunction prfOidToMessageDigest(prfOid) {\n  // get PRF algorithm, default to SHA-1\n  var prfAlgorithm;\n  if(!prfOid) {\n    prfAlgorithm = 'hmacWithSHA1';\n  } else {\n    prfAlgorithm = pki.oids[asn1.derToOid(prfOid)];\n    if(!prfAlgorithm) {\n      var error = new Error('Unsupported PRF OID.');\n      error.oid = prfOid;\n      error.supported = [\n        'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\n        'hmacWithSHA512'];\n      throw error;\n    }\n  }\n  return prfAlgorithmToMessageDigest(prfAlgorithm);\n}\n\nfunction prfAlgorithmToMessageDigest(prfAlgorithm) {\n  var factory = forge.md;\n  switch(prfAlgorithm) {\n  case 'hmacWithSHA224':\n    factory = forge.md.sha512;\n  case 'hmacWithSHA1':\n  case 'hmacWithSHA256':\n  case 'hmacWithSHA384':\n  case 'hmacWithSHA512':\n    prfAlgorithm = prfAlgorithm.substr(8).toLowerCase();\n    break;\n  default:\n    var error = new Error('Unsupported PRF algorithm.');\n    error.algorithm = prfAlgorithm;\n    error.supported = [\n      'hmacWithSHA1', 'hmacWithSHA224', 'hmacWithSHA256', 'hmacWithSHA384',\n      'hmacWithSHA512'];\n    throw error;\n  }\n  if(!factory || !(prfAlgorithm in factory)) {\n    throw new Error('Unknown hash algorithm: ' + prfAlgorithm);\n  }\n  return factory[prfAlgorithm].create();\n}\n\nfunction createPbkdf2Params(salt, countBytes, dkLen, prfAlgorithm) {\n  var params = asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n    // salt\n    asn1.create(\n      asn1.Class.UNIVERSAL, asn1.Type.OCTETSTRING, false, salt),\n    // iteration count\n    asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n      countBytes.getBytes())\n  ]);\n  // when PRF algorithm is not SHA-1 default, add key length and PRF algorithm\n  if(prfAlgorithm !== 'hmacWithSHA1') {\n    params.value.push(\n      // key length\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.INTEGER, false,\n        forge.util.hexToBytes(dkLen.toString(16))),\n      // AlgorithmIdentifier\n      asn1.create(asn1.Class.UNIVERSAL, asn1.Type.SEQUENCE, true, [\n        // algorithm\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.OID, false,\n          asn1.oidToDer(pki.oids[prfAlgorithm]).getBytes()),\n        // parameters (null)\n        asn1.create(asn1.Class.UNIVERSAL, asn1.Type.NULL, false, '')\n      ]));\n  }\n  return params;\n}\n","'use strict'\n\nconst multihashing = require('multihashing-async')\nconst protobuf = require('protons')\nconst bs58 = require('bs58')\nconst nextTick = require('async/nextTick')\n\nconst crypto = require('./rsa')\nconst pbm = protobuf(require('./keys.proto'))\nrequire('node-forge/lib/sha512')\nrequire('node-forge/lib/pbe')\nconst forge = require('node-forge/lib/forge')\n\nclass RsaPublicKey {\n  constructor (key) {\n    this._key = key\n  }\n\n  verify (data, sig, callback) {\n    ensure(callback)\n    crypto.hashAndVerify(this._key, sig, data, callback)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkix(this._key)\n  }\n\n  get bytes () {\n    return pbm.PublicKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  encrypt (bytes) {\n    return this._key.encrypt(bytes, 'RSAES-PKCS1-V1_5')\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n}\n\nclass RsaPrivateKey {\n  // key       - Object of the jwk format\n  // publicKey - Buffer of the spki format\n  constructor (key, publicKey) {\n    this._key = key\n    this._publicKey = publicKey\n  }\n\n  genSecret () {\n    return crypto.getRandomValues(16)\n  }\n\n  sign (message, callback) {\n    ensure(callback)\n    crypto.hashAndSign(this._key, message, callback)\n  }\n\n  get public () {\n    if (!this._publicKey) {\n      throw new Error('public key not provided')\n    }\n\n    return new RsaPublicKey(this._publicKey)\n  }\n\n  decrypt (msg, callback) {\n    crypto.decrypt(this._key, msg, callback)\n  }\n\n  marshal () {\n    return crypto.utils.jwkToPkcs1(this._key)\n  }\n\n  get bytes () {\n    return pbm.PrivateKey.encode({\n      Type: pbm.KeyType.RSA,\n      Data: this.marshal()\n    })\n  }\n\n  equals (key) {\n    return this.bytes.equals(key.bytes)\n  }\n\n  hash (callback) {\n    ensure(callback)\n    multihashing(this.bytes, 'sha2-256', callback)\n  }\n\n  /**\n   * Gets the ID of the key.\n   *\n   * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n   * The public key is a protobuf encoding containing a type and the DER encoding\n   * of the PKCS SubjectPublicKeyInfo.\n   *\n   * @param {function(Error, id)} callback\n   * @returns {undefined}\n   */\n  id (callback) {\n    this.public.hash((err, hash) => {\n      if (err) {\n        return callback(err)\n      }\n      callback(null, bs58.encode(hash))\n    })\n  }\n\n  /**\n   * Exports the key into a password protected PEM format\n   *\n   * @param {string} [format] - Defaults to 'pkcs-8'.\n   * @param {string} password - The password to read the encrypted PEM\n   * @param {function(Error, KeyInfo)} callback\n   * @returns {undefined}\n   */\n  export (format, password, callback) {\n    if (typeof password === 'function') {\n      callback = password\n      password = format\n      format = 'pkcs-8'\n    }\n\n    ensure(callback)\n\n    nextTick(() => {\n      let err = null\n      let pem = null\n      try {\n        const buffer = new forge.util.ByteBuffer(this.marshal())\n        const asn1 = forge.asn1.fromDer(buffer)\n        const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n        if (format === 'pkcs-8') {\n          const options = {\n            algorithm: 'aes256',\n            count: 10000,\n            saltSize: 128 / 8,\n            prfAlgorithm: 'sha512'\n          }\n          pem = forge.pki.encryptRsaPrivateKey(privateKey, password, options)\n        } else {\n          err = new Error(`Unknown export format '${format}'`)\n        }\n      } catch (_err) {\n        err = _err\n      }\n\n      callback(err, pem)\n    })\n  }\n}\n\nfunction unmarshalRsaPrivateKey (bytes, callback) {\n  const jwk = crypto.utils.pkcs1ToJwk(bytes)\n\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction unmarshalRsaPublicKey (bytes) {\n  const jwk = crypto.utils.pkixToJwk(bytes)\n\n  return new RsaPublicKey(jwk)\n}\n\nfunction fromJwk (jwk, callback) {\n  crypto.unmarshalPrivateKey(jwk, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction generateKeyPair (bits, callback) {\n  crypto.generateKey(bits, (err, keys) => {\n    if (err) {\n      return callback(err)\n    }\n\n    callback(null, new RsaPrivateKey(keys.privateKey, keys.publicKey))\n  })\n}\n\nfunction ensure (callback) {\n  if (typeof callback !== 'function') {\n    throw new Error('callback is required')\n  }\n}\n\nmodule.exports = {\n  RsaPublicKey,\n  RsaPrivateKey,\n  unmarshalRsaPublicKey,\n  unmarshalRsaPrivateKey,\n  generateKeyPair,\n  fromJwk\n}\n","'use strict'\n\nvar schema = require('protocol-buffers-schema')\nvar compile = require('./compile')\n\nvar flatten = function (values) {\n  if (!values) return null\n  var result = {}\n  Object.keys(values).forEach(function (k) {\n    result[k] = values[k].value\n  })\n  return result\n}\n\nmodule.exports = function (proto, opts) {\n  if (!opts) opts = {}\n  if (!proto) throw new Error('Pass in a .proto string or a protobuf-schema parsed object')\n\n  var sch = (typeof proto === 'object' && !Buffer.isBuffer(proto)) ? proto : schema.parse(proto)\n\n  // to not make toString,toJSON enumarable we make a fire-and-forget prototype\n  var Messages = function () {\n    var self = this\n\n    compile(sch, opts.encodings || {}).forEach(function (m) {\n      self[m.name] = flatten(m.values) || m\n    })\n  }\n\n  Messages.prototype.toString = function () {\n    return schema.stringify(sch)\n  }\n\n  Messages.prototype.toJSON = function () {\n    return sch\n  }\n\n  return new Messages()\n}\n","'use strict'\n\nconst ecdh = require('./ecdh')\n\n// Generates an ephemeral public key and returns a function that will compute\n// the shared secret key.\n//\n// Focuses only on ECDH now, but can be made more general in the future.\nmodule.exports = (curve, callback) => {\n  ecdh.generateEphmeralKeyPair(curve, callback)\n}\n","'use strict'\n\nconst bs58 = require('bs58')\nconst multihashing = require('multihashing-async')\n\nmodule.exports = (keysProtobuf, randomBytes, crypto) => {\n  crypto = crypto || require('./crypto')(randomBytes)\n\n  class Secp256k1PublicKey {\n    constructor (key) {\n      crypto.validatePublicKey(key)\n      this._key = key\n    }\n\n    verify (data, sig, callback) {\n      ensure(callback)\n      crypto.hashAndVerify(this._key, sig, data, callback)\n    }\n\n    marshal () {\n      return crypto.compressPublicKey(this._key)\n    }\n\n    get bytes () {\n      return keysProtobuf.PublicKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      })\n    }\n\n    equals (key) {\n      return this.bytes.equals(key.bytes)\n    }\n\n    hash (callback) {\n      ensure(callback)\n      multihashing(this.bytes, 'sha2-256', callback)\n    }\n  }\n\n  class Secp256k1PrivateKey {\n    constructor (key, publicKey) {\n      this._key = key\n      this._publicKey = publicKey || crypto.computePublicKey(key)\n      crypto.validatePrivateKey(this._key)\n      crypto.validatePublicKey(this._publicKey)\n    }\n\n    sign (message, callback) {\n      ensure(callback)\n      crypto.hashAndSign(this._key, message, callback)\n    }\n\n    get public () {\n      return new Secp256k1PublicKey(this._publicKey)\n    }\n\n    marshal () {\n      return this._key\n    }\n\n    get bytes () {\n      return keysProtobuf.PrivateKey.encode({\n        Type: keysProtobuf.KeyType.Secp256k1,\n        Data: this.marshal()\n      })\n    }\n\n    equals (key) {\n      return this.bytes.equals(key.bytes)\n    }\n\n    hash (callback) {\n      ensure(callback)\n      multihashing(this.bytes, 'sha2-256', callback)\n    }\n\n    /**\n     * Gets the ID of the key.\n     *\n     * The key id is the base58 encoding of the SHA-256 multihash of its public key.\n     * The public key is a protobuf encoding containing a type and the DER encoding\n     * of the PKCS SubjectPublicKeyInfo.\n     *\n     * @param {function(Error, id)} callback\n     * @returns {undefined}\n     */\n    id (callback) {\n      this.public.hash((err, hash) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, bs58.encode(hash))\n      })\n    }\n  }\n\n  function unmarshalSecp256k1PrivateKey (bytes, callback) {\n    callback(null, new Secp256k1PrivateKey(bytes))\n  }\n\n  function unmarshalSecp256k1PublicKey (bytes) {\n    return new Secp256k1PublicKey(bytes)\n  }\n\n  function generateKeyPair (_bits, callback) {\n    if (callback === undefined && typeof _bits === 'function') {\n      callback = _bits\n    }\n\n    ensure(callback)\n\n    crypto.generateKey((err, privateKeyBytes) => {\n      if (err) { return callback(err) }\n\n      let privkey\n      try {\n        privkey = new Secp256k1PrivateKey(privateKeyBytes)\n      } catch (err) { return callback(err) }\n\n      callback(null, privkey)\n    })\n  }\n\n  function ensure (callback) {\n    if (typeof callback !== 'function') {\n      throw new Error('callback is required')\n    }\n  }\n\n  return {\n    Secp256k1PublicKey,\n    Secp256k1PrivateKey,\n    unmarshalSecp256k1PrivateKey,\n    unmarshalSecp256k1PublicKey,\n    generateKeyPair\n  }\n}\n","'use strict'\n\nconst { Buffer } = require('buffer')\nconst errcode = require('err-code')\nconst multihash = require('multihashes')\nconst crypto = require('./crypto')\n\n/**\n * Hash the given `buf` using the algorithm specified by `alg`.\n * @param {Buffer} buf - The value to hash.\n * @param {number|string} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Buffer>}\n */\nasync function Multihashing (buf, alg, length) {\n  const digest = await Multihashing.digest(buf, alg, length)\n  return multihash.encode(digest, alg, length)\n}\n\n/**\n * The `buffer` module for easy use in the browser.\n *\n * @type {Buffer}\n */\nMultihashing.Buffer = Buffer // for browser things\n\n/**\n * Expose multihash itself, to avoid silly double requires.\n */\nMultihashing.multihash = multihash\n\n/**\n * @param {Buffer} buf - The value to hash.\n * @param {number|string} alg - The algorithm to use eg 'sha1'\n * @param {number} [length] - Optionally trim the result to this length.\n * @returns {Promise<Buffer>}\n */\nMultihashing.digest = async (buf, alg, length) => {\n  const hash = Multihashing.createHash(alg)\n  const digest = await hash(buf)\n  return length ? digest.slice(0, length) : digest\n}\n\n/**\n * Creates a function that hashes with the given algorithm\n *\n * @param {string|number} alg - The algorithm to use eg 'sha1'\n *\n * @returns {function} - The hash function corresponding to `alg`\n */\nMultihashing.createHash = function (alg) {\n  if (!alg) {\n    throw errcode('hash algorithm must be specified', 'ERR_HASH_ALGORITHM_NOT_SPECIFIED')\n  }\n\n  alg = multihash.coerceCode(alg)\n  if (!Multihashing.functions[alg]) {\n    throw errcode(`multihash function '${alg}' not yet supported`, 'ERR_HASH_ALGORITHM_NOT_SUPPORTED')\n  }\n\n  return Multihashing.functions[alg]\n}\n\n/**\n * Mapping of multihash codes to their hashing functions.\n * @type {Object}\n */\nMultihashing.functions = {\n  // sha1\n  0x11: crypto.sha1,\n  // sha2-256\n  0x12: crypto.sha2256,\n  // sha2-512\n  0x13: crypto.sha2512,\n  // sha3-512\n  0x14: crypto.sha3512,\n  // sha3-384\n  0x15: crypto.sha3384,\n  // sha3-256\n  0x16: crypto.sha3256,\n  // sha3-224\n  0x17: crypto.sha3224,\n  // shake-128\n  0x18: crypto.shake128,\n  // shake-256\n  0x19: crypto.shake256,\n  // keccak-224\n  0x1A: crypto.keccak224,\n  // keccak-256\n  0x1B: crypto.keccak256,\n  // keccak-384\n  0x1C: crypto.keccak384,\n  // keccak-512\n  0x1D: crypto.keccak512,\n  // murmur3-128\n  0x22: crypto.murmur3128,\n  // murmur3-32\n  0x23: crypto.murmur332,\n  // dbl-sha2-256\n  0x56: crypto.dblSha2256\n}\n\n// add blake functions\ncrypto.addBlake(Multihashing.functions)\n\nMultihashing.validate = async (buf, hash) => {\n  const newHash = await Multihashing(buf, multihash.decode(hash).name)\n\n  return Buffer.compare(hash, newHash) === 0\n}\n\nmodule.exports = Multihashing\n","'use strict'\n\nconst CID = require('cids')\n\nconst util = require('./util')\n\n/**\n * Resolves a path within a CBOR block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Buffer} binaryBlob - Binary representation of a CBOR block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\nexports.resolve = (binaryBlob, path) => {\n  let node = util.deserialize(binaryBlob)\n\n  const parts = path.split('/').filter(Boolean)\n  while (parts.length) {\n    const key = parts.shift()\n    if (node[key] === undefined) {\n      throw new Error(`Object has no property '${key}'`)\n    }\n\n    node = node[key]\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      }\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  }\n}\n\nconst traverse = function * (node, path) {\n  // Traverse only objects and arrays\n  if (Buffer.isBuffer(node) || CID.isCID(node) || typeof node === 'string' ||\n      node === null) {\n    return\n  }\n  for (const item of Object.keys(node)) {\n    const nextpath = path === undefined ? item : path + '/' + item\n    yield nextpath\n    yield * traverse(node[item], nextpath)\n  }\n}\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Buffer} binaryBlob - Binary representation of a CBOR block\n * @yields {string} - A single path\n */\nexports.tree = function * (binaryBlob) {\n  const node = util.deserialize(binaryBlob)\n\n  yield * traverse(node)\n}\n","'use strict'\n\nconst cbor = require('borc')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst isCircular = require('is-circular')\n\n// https://github.com/ipfs/go-ipfs/issues/3570#issuecomment-273931692\nconst CID_CBOR_TAG = 42\n\nfunction tagCID (cid) {\n  if (typeof cid === 'string') {\n    cid = new CID(cid).buffer\n  } else if (CID.isCID(cid)) {\n    cid = cid.buffer\n  }\n\n  return new cbor.Tagged(CID_CBOR_TAG, Buffer.concat([\n    Buffer.from('00', 'hex'), // thanks jdag\n    cid\n  ]))\n}\n\nfunction replaceCIDbyTAG (dagNode) {\n  let circular\n  try {\n    circular = isCircular(dagNode)\n  } catch (e) {\n    circular = false\n  }\n  if (circular) {\n    throw new Error('The object passed has circular references')\n  }\n\n  function transform (obj) {\n    if (!obj || Buffer.isBuffer(obj) || typeof obj === 'string') {\n      return obj\n    }\n\n    if (Array.isArray(obj)) {\n      return obj.map(transform)\n    }\n\n    if (CID.isCID(obj)) {\n      return tagCID(obj)\n    }\n\n    const keys = Object.keys(obj)\n\n    if (keys.length > 0) {\n      // Recursive transform\n      const out = {}\n      keys.forEach((key) => {\n        if (typeof obj[key] === 'object') {\n          out[key] = transform(obj[key])\n        } else {\n          out[key] = obj[key]\n        }\n      })\n      return out\n    } else {\n      return obj\n    }\n  }\n\n  return transform(dagNode)\n}\n\nexports = module.exports\n\nexports.codec = multicodec.DAG_CBOR\nexports.defaultHashAlg = multicodec.SHA2_256\n\nconst defaultTags = {\n  [CID_CBOR_TAG]: (val) => {\n    // remove that 0\n    val = val.slice(1)\n    return new CID(val)\n  }\n}\nconst defaultSize = 64 * 1024 // current decoder heap size, 64 Kb\nlet currentSize = defaultSize\nconst defaultMaxSize = 64 * 1024 * 1024 // max heap size when auto-growing, 64 Mb\nlet maxSize = defaultMaxSize\nlet decoder = null\n\n/**\n * Configure the underlying CBOR decoder.\n *\n * @param {Object} [options] - The options the decoder takes. The decoder will reset to the defaul values if no options are given.\n * @param {number} [options.size=65536] - The current heap size used in CBOR parsing, this may grow automatically as larger blocks are encountered up to `maxSize`\n * @param {number} [options.maxSize=67108864] - The maximum size the CBOR parsing heap is allowed to grow to before `dagCBOR.util.deserialize()` returns an error\n * @param {Object} [options.tags] - An object whose keys are CBOR tag numbers and values are transform functions that accept a `value` and return a decoded representation of that `value`\n */\nexports.configureDecoder = (options) => {\n  let tags = defaultTags\n\n  if (options) {\n    if (typeof options.size === 'number') {\n      currentSize = options.size\n    }\n    if (typeof options.maxSize === 'number') {\n      maxSize = options.maxSize\n    }\n    if (options.tags) {\n      tags = Object.assign({}, defaultTags, options && options.tags)\n    }\n  } else {\n    // no options, reset to defaults\n    currentSize = defaultSize\n    maxSize = defaultMaxSize\n  }\n\n  let decoderOptions = {\n    tags: tags,\n    size: currentSize\n  }\n\n  decoder = new cbor.Decoder(decoderOptions)\n  // borc edits opts.size in-place so we can capture _actual_ size\n  currentSize = decoderOptions.size\n}\n\nexports.configureDecoder() // Setup default cbor.Decoder\n\n/**\n * Serialize internal representation into a binary CBOR block.\n *\n * @param {Object} node - Internal representation of a CBOR block\n * @returns {Buffer} - The encoded binary representation\n */\nexports.serialize = (node) => {\n  const nodeTagged = replaceCIDbyTAG(node)\n  const serialized = cbor.encode(nodeTagged)\n\n  return serialized\n}\n\n/**\n * Deserialize CBOR block into the internal representation.\n *\n * @param {Buffer} data - Binary representation of a CBOR block\n * @returns {Object} - An object that conforms to the IPLD Data Model\n */\nexports.deserialize = (data) => {\n  if (data.length > currentSize && data.length <= maxSize) {\n    exports.configureDecoder({ size: data.length })\n  }\n\n  if (data.length > currentSize) {\n    throw new Error('Data is too large to deserialize with current decoder')\n  }\n\n  const deserialized = decoder.decodeFirst(data)\n\n  return deserialized\n}\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\nexports.cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = { cidVersion: 1, hashAlg: exports.defaultHashAlg }\n  const options = Object.assign(defaultOptions, userOptions)\n\n  const multihash = await multihashing(binaryBlob, options.hashAlg)\n  const codecName = multicodec.print[exports.codec]\n  const cid = new CID(options.cidVersion, codecName, multihash)\n\n  return cid\n}\n","'use strict'\n\nconst CID = require('cids')\nconst protons = require('protons')\nconst proto = protons(require('./dag.proto.js'))\nconst DAGLink = require('./dag-link')\nconst DAGNode = require('./dag-node')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\n\nexports = module.exports\n\nexports.codec = multicodec.DAG_PB\nexports.defaultHashAlg = multicodec.SHA2_256\n\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\nconst cid = async (binaryBlob, userOptions) => {\n  const defaultOptions = { cidVersion: 1, hashAlg: exports.defaultHashAlg }\n  const options = Object.assign(defaultOptions, userOptions)\n\n  const multihash = await multihashing(binaryBlob, options.hashAlg)\n  const codecName = multicodec.print[exports.codec]\n  const cid = new CID(options.cidVersion, codecName, multihash)\n\n  return cid\n}\n\n/**\n * Serialize internal representation into a binary PB block.\n *\n * @param {Object} node - Internal representation of a CBOR block\n * @returns {Buffer} - The encoded binary representation\n */\nconst serialize = (node) => {\n  let data = node.Data\n  let links = node.Links || []\n\n  // If the node is not an instance of a DAGNode, the link.hash might be a Base58 encoded string; decode it\n  if (!DAGNode.isDAGNode(node) && links) {\n    links = links.map((link) => {\n      return DAGLink.isDAGLink(link) ? link : DAGLink.util.createDagLinkFromB58EncodedHash(link)\n    })\n  }\n\n  const serialized = proto.PBNode.encode(toProtoBuf({\n    Data: data,\n    Links: links\n  }))\n\n  return serialized\n}\n\n/**\n * Deserialize PB block into the internal representation.\n *\n * @param {Buffer} buffer - Binary representation of a PB block\n * @returns {Object} - An object that conforms to the IPLD Data Model\n */\nconst deserialize = (buffer) => {\n  const pbn = proto.PBNode.decode(buffer)\n\n  const links = pbn.Links.map((link) => {\n    return new DAGLink(link.Name, link.Tsize, link.Hash)\n  })\n\n  const data = pbn.Data == null ? Buffer.alloc(0) : pbn.Data\n\n  return new DAGNode(data, links, buffer.length)\n}\n\nfunction toProtoBuf (node) {\n  const pbn = {}\n\n  if (node.Data && node.Data.length > 0) {\n    pbn.Data = node.Data\n  } else {\n    // NOTE: this has to be null in order to match go-ipfs serialization `null !== new Buffer(0)`\n    pbn.Data = null\n  }\n\n  if (node.Links && node.Links.length > 0) {\n    pbn.Links = node.Links\n      .map((link) => ({\n        Hash: link.Hash.buffer,\n        Name: link.Name,\n        Tsize: link.Tsize\n      }))\n  } else {\n    pbn.Links = null\n  }\n\n  return pbn\n}\n\nexports.serialize = serialize\nexports.deserialize = deserialize\nexports.cid = cid\n","'use strict'\n\nconst CID = require('cids')\n\nconst util = require('./util')\n\n/**\n * Resolves a path within a PB block.\n *\n * Returns the value or a link and the partial mising path. This way the\n * IPLD Resolver can fetch the link and continue to resolve.\n *\n * @param {Buffer} binaryBlob - Binary representation of a PB block\n * @param {string} [path='/'] - Path that should be resolved\n * @returns {Object} result - Result of the path it it was resolved successfully\n * @returns {*} result.value - Value the path resolves to\n * @returns {string} result.remainderPath - If the path resolves half-way to a\n *   link, then the `remainderPath` is the part after the link that can be used\n *   for further resolving\n */\nexports.resolve = (binaryBlob, path) => {\n  let node = util.deserialize(binaryBlob)\n\n  const parts = path.split('/').filter(Boolean)\n  while (parts.length) {\n    const key = parts.shift()\n    if (node[key] === undefined) {\n      throw new Error(`Object has no property '${key}'`)\n    }\n\n    node = node[key]\n    if (CID.isCID(node)) {\n      return {\n        value: node,\n        remainderPath: parts.join('/')\n      }\n    }\n  }\n\n  return {\n    value: node,\n    remainderPath: ''\n  }\n}\n\nconst traverse = function * (node, path) {\n  // Traverse only objects and arrays\n  if (Buffer.isBuffer(node) || CID.isCID(node) || typeof node === 'string' ||\n      node === null) {\n    return\n  }\n  for (const item of Object.keys(node)) {\n    const nextpath = path === undefined ? item : path + '/' + item\n    yield nextpath\n    yield * traverse(node[item], nextpath)\n  }\n}\n\n/**\n * Return all available paths of a block.\n *\n * @generator\n * @param {Buffer} binaryBlob - Binary representation of a PB block\n * @yields {string} - A single path\n */\nexports.tree = function * (binaryBlob) {\n  const node = util.deserialize(binaryBlob)\n\n  yield * traverse(node)\n}\n","'use strict'\n\nconst CID = require('cids')\nconst assert = require('assert')\nconst withIs = require('class-is')\nconst visibility = require('../visibility')\n\n// Link represents an IPFS Merkle DAG Link between Nodes.\nclass DAGLink {\n  constructor (name, size, cid) {\n    assert(cid, 'A link requires a cid to point to')\n    // assert(size, 'A link requires a size')\n    //  note - links should include size, but this assert is disabled\n    //  for now to maintain consistency with go-ipfs pinset\n\n    this._name = name || ''\n    this._nameBuf = null\n    this._size = size\n    this._cid = new CID(cid)\n\n    // Make sure we have a nice public API that can be used by an IPLD resolver\n    visibility.hidePrivateFields(this)\n    visibility.addEnumerableGetters(this, ['Hash', 'Name', 'Tsize'])\n  }\n\n  toString () {\n    return `DAGLink <${this._cid.toBaseEncodedString()} - name: \"${this.Name}\", size: ${this.Tsize}>`\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        name: this.Name,\n        size: this.Tsize,\n        cid: this.Hash.toBaseEncodedString()\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  get Name () {\n    return this._name\n  }\n\n  // Memoize the Buffer representation of name\n  // We need this to sort the links, otherwise\n  // we will reallocate new buffers every time\n  get nameAsBuffer () {\n    if (this._nameBuf !== null) {\n      return this._nameBuf\n    }\n\n    this._nameBuf = Buffer.from(this._name)\n    return this._nameBuf\n  }\n\n  set Name (name) {\n    throw new Error(\"Can't set property: 'name' is immutable\")\n  }\n\n  get Tsize () {\n    return this._size\n  }\n\n  set Tsize (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  get Hash () {\n    return this._cid\n  }\n\n  set Hash (cid) {\n    throw new Error(\"Can't set property: 'cid' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGLink, { className: 'DAGLink', symbolName: '@ipld/js-ipld-dag-pb/daglink' })\nexports.util = require('./util')\n","'use strict'\n\nconst assert = require('assert')\nconst withIs = require('class-is')\nconst addNamedLink = require('./addNamedLink')\nconst visibility = require('../visibility')\n\nclass DAGNode {\n  constructor (data, links, serializedSize) {\n    if (serializedSize !== 0) {\n      assert(serializedSize, 'A DAGNode requires it\\'s serialized size')\n    }\n\n    this._data = data || Buffer.alloc(0)\n    this._links = links\n    this._serializedSize = serializedSize\n\n    // Make sure we have a nice public API that can be used by an IPLD resolver\n    visibility.hidePrivateFields(this)\n    visibility.addEnumerableGetters(this, ['Data', 'Links'])\n\n    // Add getters for existing links by the name of the link\n    // This is how paths are traversed in IPFS. Links with names won't\n    // override existing fields like `data` or `links`.\n    links.forEach((link, position) => {\n      addNamedLink(this, link.Name, position)\n    })\n  }\n\n  toJSON () {\n    if (!this._json) {\n      this._json = Object.freeze({\n        data: this.Data,\n        links: this._links.map((l) => l.toJSON()),\n        size: this.size\n      })\n    }\n\n    return Object.assign({}, this._json)\n  }\n\n  toString () {\n    return `DAGNode <data: \"${this.Data.toString('base64')}\", links: ${this.Links.length}, size: ${this.size}>`\n  }\n\n  get size () {\n    if (this._size === undefined) {\n      this._size = this._links.reduce((sum, l) => sum + l.Tsize, this._serializedSize)\n    }\n\n    return this._size\n  }\n\n  set size (size) {\n    throw new Error(\"Can't set property: 'size' is immutable\")\n  }\n\n  // Getters for backwards compatible path resolving\n  get Data () {\n    return this._data\n  }\n  set Data (_) {\n    throw new Error(\"Can't set property: 'Data' is immutable\")\n  }\n  get Links () {\n    return this._links.map((link) => {\n      return {\n        Name: link.Name,\n        Tsize: link.Tsize,\n        Hash: link.Hash\n      }\n    })\n  }\n  set Links (_) {\n    throw new Error(\"Can't set property: 'Links' is immutable\")\n  }\n}\n\nexports = module.exports = withIs(DAGNode, { className: 'DAGNode', symbolName: '@ipld/js-ipld-dag-pb/dagnode' })\nexports.create = require('./create')\nexports.clone = require('./clone')\nexports.addLink = require('./addLink')\nexports.rmLink = require('./rmLink')\n","'use strict'\n\nclass Base {\n  constructor (name, code, implementation, alphabet) {\n    this.name = name\n    this.code = code\n    this.alphabet = alphabet\n    if (implementation && alphabet) {\n      this.engine = implementation(alphabet)\n    }\n  }\n\n  encode (stringOrBuffer) {\n    return this.engine.encode(stringOrBuffer)\n  }\n\n  decode (stringOrBuffer) {\n    return this.engine.decode(stringOrBuffer)\n  }\n\n  isImplemented () {\n    return this.engine\n  }\n}\n\nmodule.exports = Base\n","'use strict'\n\nmodule.exports = function base16 (alphabet) {\n  return {\n    encode (input) {\n      if (typeof input === 'string') {\n        return Buffer.from(input).toString('hex')\n      }\n      return input.toString('hex')\n    },\n    decode (input) {\n      for (let char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base16 character')\n        }\n      }\n      return Buffer.from(input, 'hex')\n    }\n  }\n}\n","'use strict'\n\nfunction decode (input, alphabet) {\n  input = input.replace(new RegExp('=', 'g'), '')\n  let length = input.length\n\n  let bits = 0\n  let value = 0\n\n  let index = 0\n  let output = new Uint8Array((length * 5 / 8) | 0)\n\n  for (let i = 0; i < length; i++) {\n    value = (value << 5) | alphabet.indexOf(input[i])\n    bits += 5\n\n    if (bits >= 8) {\n      output[index++] = (value >>> (bits - 8)) & 255\n      bits -= 8\n    }\n  }\n\n  return output.buffer\n}\n\nfunction encode (buffer, alphabet) {\n  let length = buffer.byteLength\n  let view = new Uint8Array(buffer)\n  let padding = alphabet.indexOf('=') === alphabet.length - 1\n\n  if (padding) {\n    alphabet = alphabet.substring(0, alphabet.length - 2)\n  }\n\n  let bits = 0\n  let value = 0\n  let output = ''\n\n  for (let i = 0; i < length; i++) {\n    value = (value << 8) | view[i]\n    bits += 8\n\n    while (bits >= 5) {\n      output += alphabet[(value >>> (bits - 5)) & 31]\n      bits -= 5\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[(value << (5 - bits)) & 31]\n  }\n\n  if (padding) {\n    while ((output.length % 8) !== 0) {\n      output += '='\n    }\n  }\n\n  return output\n}\n\nmodule.exports = function base32 (alphabet) {\n  return {\n    encode (input) {\n      if (typeof input === 'string') {\n        return encode(Buffer.from(input), alphabet)\n      }\n\n      return encode(input, alphabet)\n    },\n    decode (input) {\n      for (let char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base32 character')\n        }\n      }\n\n      return decode(input, alphabet)\n    }\n  }\n}\n","'use strict'\n\nmodule.exports = function base64 (alphabet) {\n  // The alphabet is only used to know:\n  //   1. If padding is enabled (must contain '=')\n  //   2. If the output must be url-safe (must contain '-' and '_')\n  //   3. If the input of the output function is valid\n  // The alphabets from RFC 4648 are always used.\n  const padding = alphabet.indexOf('=') > -1\n  const url = alphabet.indexOf('-') > -1 && alphabet.indexOf('_') > -1\n\n  return {\n    encode (input) {\n      let output = ''\n\n      if (typeof input === 'string') {\n        output = Buffer.from(input).toString('base64')\n      } else {\n        output = input.toString('base64')\n      }\n\n      if (url) {\n        output = output.replace(/\\+/g, '-').replace(/\\//g, '_')\n      }\n\n      const pad = output.indexOf('=')\n      if (pad > 0 && !padding) {\n        output = output.substring(0, pad)\n      }\n\n      return output\n    },\n    decode (input) {\n      for (let char of input) {\n        if (alphabet.indexOf(char) < 0) {\n          throw new Error('invalid base64 character')\n        }\n      }\n\n      return Buffer.from(input, 'base64')\n    }\n  }\n}\n","// base-x encoding\n// Forked from https://github.com/cryptocoinjs/bs58\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nvar Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  var ALPHABET_MAP = {}\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n\n  // pre-compute lookup table\n  for (var z = 0; z < ALPHABET.length; z++) {\n    var x = ALPHABET.charAt(z)\n\n    if (ALPHABET_MAP[x] !== undefined) throw new TypeError(x + ' is ambiguous')\n    ALPHABET_MAP[x] = z\n  }\n\n  function encode (source) {\n    if (source.length === 0) return ''\n\n    var digits = [0]\n    for (var i = 0; i < source.length; ++i) {\n      for (var j = 0, carry = source[i]; j < digits.length; ++j) {\n        carry += digits[j] << 8\n        digits[j] = carry % BASE\n        carry = (carry / BASE) | 0\n      }\n\n      while (carry > 0) {\n        digits.push(carry % BASE)\n        carry = (carry / BASE) | 0\n      }\n    }\n\n    var string = ''\n\n    // deal with leading zeros\n    for (var k = 0; source[k] === 0 && k < source.length - 1; ++k) string += LEADER\n    // convert digits to a string\n    for (var q = digits.length - 1; q >= 0; --q) string += ALPHABET[digits[q]]\n\n    return string\n  }\n\n  function decodeUnsafe (string) {\n    if (typeof string !== 'string') throw new TypeError('Expected String')\n    if (string.length === 0) return Buffer.allocUnsafe(0)\n\n    var bytes = [0]\n    for (var i = 0; i < string.length; i++) {\n      var value = ALPHABET_MAP[string[i]]\n      if (value === undefined) return\n\n      for (var j = 0, carry = value; j < bytes.length; ++j) {\n        carry += bytes[j] * BASE\n        bytes[j] = carry & 0xff\n        carry >>= 8\n      }\n\n      while (carry > 0) {\n        bytes.push(carry & 0xff)\n        carry >>= 8\n      }\n    }\n\n    // deal with leading zeros\n    for (var k = 0; string[k] === LEADER && k < string.length - 1; ++k) {\n      bytes.push(0)\n    }\n\n    return Buffer.from(bytes.reverse())\n  }\n\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n","'use strict'\n\nconst ip = require('ip')\nconst isIp = require('is-ip')\nconst protocols = require('./protocols-table')\nconst bs58 = require('bs58')\nconst base32 = require('hi-base32')\nconst varint = require('varint')\n\nmodule.exports = Convert\n\n// converts (serializes) addresses\nfunction Convert (proto, a) {\n  if (a instanceof Buffer) {\n    return Convert.toString(proto, a)\n  } else {\n    return Convert.toBuffer(proto, a)\n  }\n}\n\nConvert.toString = function convertToString (proto, buf) {\n  proto = protocols(proto)\n  switch (proto.code) {\n    case 4: // ipv4\n    case 41: // ipv6\n      return buf2ip(buf)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return buf2port(buf)\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n      return buf2str(buf)\n\n    case 421: // ipfs\n      return buf2mh(buf)\n    case 444: // onion\n      return buf2onion(buf)\n    case 445: // onion3\n      return buf2onion(buf)\n    default:\n      return buf.toString('hex') // no clue. convert to hex\n  }\n}\n\nConvert.toBuffer = function convertToBuffer (proto, str) {\n  proto = protocols(proto)\n  switch (proto.code) {\n    case 4: // ipv4\n      return ip2buf(str)\n    case 41: // ipv6\n      return ip2buf(str)\n\n    case 6: // tcp\n    case 273: // udp\n    case 33: // dccp\n    case 132: // sctp\n      return port2buf(parseInt(str, 10))\n\n    case 53: // dns\n    case 54: // dns4\n    case 55: // dns6\n    case 56: // dnsaddr\n    case 400: // unix\n      return str2buf(str)\n\n    case 421: // ipfs\n      return mh2buf(str)\n    case 444: // onion\n      return onion2buf(str)\n    case 445: // onion3\n      return onion32buf(str)\n    default:\n      return Buffer.from(str, 'hex') // no clue. convert from hex\n  }\n}\n\nfunction ip2buf (ipString) {\n  if (!isIp(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ip.toBuffer(ipString)\n}\n\nfunction buf2ip (ipBuff) {\n  const ipString = ip.toString(ipBuff)\n  if (!isIp(ipString)) {\n    throw new Error('invalid ip address')\n  }\n  return ipString\n}\n\nfunction port2buf (port) {\n  const buf = Buffer.alloc(2)\n  buf.writeUInt16BE(port, 0)\n  return buf\n}\n\nfunction buf2port (buf) {\n  return buf.readUInt16BE(0)\n}\n\nfunction str2buf (str) {\n  const buf = Buffer.from(str)\n  const size = Buffer.from(varint.encode(buf.length))\n  return Buffer.concat([size, buf])\n}\n\nfunction buf2str (buf) {\n  const size = varint.decode(buf)\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return buf.toString()\n}\n\nfunction mh2buf (hash) {\n  // the address is a varint prefixed multihash string representation\n  const mh = Buffer.from(bs58.decode(hash))\n  const size = Buffer.from(varint.encode(mh.length))\n  return Buffer.concat([size, mh])\n}\n\nfunction buf2mh (buf) {\n  const size = varint.decode(buf)\n  const address = buf.slice(varint.decode.bytes)\n\n  if (address.length !== size) {\n    throw new Error('inconsistent lengths')\n  }\n\n  return bs58.encode(address)\n}\n\nfunction onion2buf (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 16) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion address.')\n  }\n  const buf = Buffer.from(base32.decode.asBytes(addr[0].toUpperCase()))\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2buf(port)\n  return Buffer.concat([buf, portBuf])\n}\n\nfunction onion32buf (str) {\n  const addr = str.split(':')\n  if (addr.length !== 2) {\n    throw new Error('failed to parse onion addr: ' + addr + ' does not contain a port number')\n  }\n  if (addr[0].length !== 56) {\n    throw new Error('failed to parse onion addr: ' + addr[0] + ' not a Tor onion3 address.')\n  }\n  const buf = Buffer.from(base32.decode.asBytes(addr[0].toUpperCase()))\n\n  // onion port number\n  const port = parseInt(addr[1], 10)\n  if (port < 1 || port > 65536) {\n    throw new Error('Port number is not in range(1, 65536)')\n  }\n  const portBuf = port2buf(port)\n  return Buffer.concat([buf, portBuf])\n}\n\nfunction buf2onion (buf) {\n  const addrBytes = buf.slice(0, buf.length - 2)\n  const portBytes = buf.slice(buf.length - 2)\n  const addr = base32.encode(addrBytes).toString('ascii').toLowerCase()\n  const port = buf2port(portBytes)\n  return addr + ':' + port\n}\n","'use strict'\n\nexports.toCallback = (doWork) => {\n  return function (input, callback) {\n    let res\n    try {\n      res = doWork(input)\n    } catch (err) {\n      process.nextTick(callback, err)\n      return\n    }\n\n    process.nextTick(callback, null, res)\n  }\n}\n\nexports.toBuf = (doWork, other) => (input) => {\n  let result = doWork(input, other)\n  return Buffer.from(result, 'hex')\n}\n\nexports.fromString = (doWork, other) => (_input) => {\n  const input = Buffer.isBuffer(_input) ? _input.toString() : _input\n  return doWork(input, other)\n}\n\nexports.fromNumberTo32BitBuf = (doWork, other) => (input) => {\n  let number = doWork(input, other)\n  const bytes = new Array(4)\n\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff\n    number = number >> 8\n  }\n\n  return Buffer.from(bytes)\n}\n","module.exports = require('./lib/murmurHash3js');\n","'use strict'\n\nconst blake = require('blakejs')\n\nconst toCallback = require('./utils').toCallback\n\nconst minB = 0xb201\nconst minS = 0xb241\n\nconst blake2b = {\n  init: blake.blake2bInit,\n  update: blake.blake2bUpdate,\n  digest: blake.blake2bFinal\n}\n\nconst blake2s = {\n  init: blake.blake2sInit,\n  update: blake.blake2sUpdate,\n  digest: blake.blake2sFinal\n}\n\nconst makeB2Hash = (size, hf) => toCallback((buf) => {\n  const ctx = hf.init(size, null)\n  hf.update(ctx, buf)\n  return Buffer.from(hf.digest(ctx))\n})\n\nmodule.exports = (table) => {\n  for (let i = 0; i < 64; i++) {\n    table[minB + i] = makeB2Hash(i + 1, blake2b)\n  }\n  for (let i = 0; i < 32; i++) {\n    table[minS + i] = makeB2Hash(i + 1, blake2s)\n  }\n}\n","/* global self */\n\n'use strict'\n\nconst nodeify = require('nodeify')\n\nconst webCrypto = getWebCrypto()\n\nfunction getWebCrypto () {\n  if (self.crypto) {\n    return self.crypto.subtle || self.crypto.webkitSubtle\n  }\n\n  if (self.msCrypto) {\n    return self.msCrypto.subtle\n  }\n}\n\nfunction webCryptoHash (type) {\n  if (!webCrypto) {\n    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context')\n  }\n\n  return (data, callback) => {\n    const res = webCrypto.digest({ name: type }, data)\n\n    if (typeof res.then !== 'function') { // IE11\n      res.onerror = () => {\n        callback(new Error(`hashing data using ${type}`))\n      }\n      res.oncomplete = (e) => {\n        callback(null, e.target.result)\n      }\n      return\n    }\n\n    nodeify(\n      res.then((raw) => Buffer.from(new Uint8Array(raw))),\n      callback\n    )\n  }\n}\n\nfunction sha1 (buf, callback) {\n  webCryptoHash('SHA-1')(buf, callback)\n}\n\nfunction sha2256 (buf, callback) {\n  webCryptoHash('SHA-256')(buf, callback)\n}\n\nfunction sha2512 (buf, callback) {\n  webCryptoHash('SHA-512')(buf, callback)\n}\n\nmodule.exports = {\n  sha1: sha1,\n  sha2256: sha2256,\n  sha2512: sha2512\n}\n","/* global self */\n\n'use strict'\n\nmodule.exports = self.crypto || self.msCrypto\n","'use strict'\n\n// Based on npmjs.com/nodeify but without additional `nextTick` calls\n// to keep the overhead low\nmodule.exports = function nodeify (promise, cb) {\n  return promise.then((res) => {\n    cb(null, res)\n  }, (err) => {\n    cb(err)\n  })\n}\n","'use strict'\n\nmodule.exports = {\n  SHA1: 20,\n  SHA256: 32,\n  SHA512: 64\n}\n","'use strict';\n\nconst crypto = global.crypto || global.msCrypto;\n\n// limit of Crypto.getRandomValues()\n// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\nconst MAX_BYTES = 65536;\n\nfunction oldBrowser() {\n    throw new Error(\n        'Secure random number generation is not supported by this browser.\\nUse Chrome, Firefox or Internet Explorer 11'\n    );\n}\n\nif (crypto && crypto.getRandomValues) {\n    module.exports = randomBytes;\n} else {\n    module.exports = oldBrowser;\n}\n\nfunction randomBytes(size) {\n    const bytes = new Uint8Array(size);\n    let generated = 0;\n\n    if (size > 0) {\n        // getRandomValues fails on IE if size == 0\n        if (size > MAX_BYTES) {\n            while (generated < bytes) {\n                if (generated + MAX_BYTES > bytes) {\n                    crypto.getRandomValues(\n                        bytes.subarray(generated, bytes - generated)\n                    );\n                } else {\n                    crypto.getRandomValues(\n                        bytes.subarray(generated, generated + MAX_BYTES)\n                    );\n                    generated += MAX_BYTES;\n                }\n            }\n        } else {\n            crypto.getRandomValues(bytes);\n        }\n    }\n\n    return Buffer.from(bytes);\n}\n","'use strict'\n\nconst crypto = require('browserify-aes')\n\nmodule.exports = {\n  createCipheriv: crypto.createCipheriv,\n  createDecipheriv: crypto.createDecipheriv\n}\n","/**\n * Password-Based Key-Derivation Function #2 implementation.\n *\n * See RFC 2898 for details.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2013 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nrequire('./hmac');\nrequire('./md');\nrequire('./util');\n\nvar pkcs5 = forge.pkcs5 = forge.pkcs5 || {};\n\nvar crypto;\nif(forge.util.isNodejs && !forge.options.usePureJavaScript) {\n  crypto = require('crypto');\n}\n\n/**\n * Derives a key from a password.\n *\n * @param p the password as a binary-encoded string of bytes.\n * @param s the salt as a binary-encoded string of bytes.\n * @param c the iteration count, a positive integer.\n * @param dkLen the intended length, in bytes, of the derived key,\n *          (max: 2^32 - 1) * hash length of the PRF.\n * @param [md] the message digest (or algorithm identifier as a string) to use\n *          in the PRF, defaults to SHA-1.\n * @param [callback(err, key)] presence triggers asynchronous version, called\n *          once the operation completes.\n *\n * @return the derived key, as a binary-encoded string of bytes, for the\n *           synchronous version (if no callback is specified).\n */\nmodule.exports = forge.pbkdf2 = pkcs5.pbkdf2 = function(\n  p, s, c, dkLen, md, callback) {\n  if(typeof md === 'function') {\n    callback = md;\n    md = null;\n  }\n\n  // use native implementation if possible and not disabled, note that\n  // some node versions only support SHA-1, others allow digest to be changed\n  if(forge.util.isNodejs && !forge.options.usePureJavaScript &&\n    crypto.pbkdf2 && (md === null || typeof md !== 'object') &&\n    (crypto.pbkdf2Sync.length > 4 || (!md || md === 'sha1'))) {\n    if(typeof md !== 'string') {\n      // default prf to SHA-1\n      md = 'sha1';\n    }\n    p = Buffer.from(p, 'binary');\n    s = Buffer.from(s, 'binary');\n    if(!callback) {\n      if(crypto.pbkdf2Sync.length === 4) {\n        return crypto.pbkdf2Sync(p, s, c, dkLen).toString('binary');\n      }\n      return crypto.pbkdf2Sync(p, s, c, dkLen, md).toString('binary');\n    }\n    if(crypto.pbkdf2Sync.length === 4) {\n      return crypto.pbkdf2(p, s, c, dkLen, function(err, key) {\n        if(err) {\n          return callback(err);\n        }\n        callback(null, key.toString('binary'));\n      });\n    }\n    return crypto.pbkdf2(p, s, c, dkLen, md, function(err, key) {\n      if(err) {\n        return callback(err);\n      }\n      callback(null, key.toString('binary'));\n    });\n  }\n\n  if(typeof md === 'undefined' || md === null) {\n    // default prf to SHA-1\n    md = 'sha1';\n  }\n  if(typeof md === 'string') {\n    if(!(md in forge.md.algorithms)) {\n      throw new Error('Unknown hash algorithm: ' + md);\n    }\n    md = forge.md[md].create();\n  }\n\n  var hLen = md.digestLength;\n\n  /* 1. If dkLen > (2^32 - 1) * hLen, output \"derived key too long\" and\n    stop. */\n  if(dkLen > (0xFFFFFFFF * hLen)) {\n    var err = new Error('Derived key is too long.');\n    if(callback) {\n      return callback(err);\n    }\n    throw err;\n  }\n\n  /* 2. Let len be the number of hLen-octet blocks in the derived key,\n    rounding up, and let r be the number of octets in the last\n    block:\n\n    len = CEIL(dkLen / hLen),\n    r = dkLen - (len - 1) * hLen. */\n  var len = Math.ceil(dkLen / hLen);\n  var r = dkLen - (len - 1) * hLen;\n\n  /* 3. For each block of the derived key apply the function F defined\n    below to the password P, the salt S, the iteration count c, and\n    the block index to compute the block:\n\n    T_1 = F(P, S, c, 1),\n    T_2 = F(P, S, c, 2),\n    ...\n    T_len = F(P, S, c, len),\n\n    where the function F is defined as the exclusive-or sum of the\n    first c iterates of the underlying pseudorandom function PRF\n    applied to the password P and the concatenation of the salt S\n    and the block index i:\n\n    F(P, S, c, i) = u_1 XOR u_2 XOR ... XOR u_c\n\n    where\n\n    u_1 = PRF(P, S || INT(i)),\n    u_2 = PRF(P, u_1),\n    ...\n    u_c = PRF(P, u_{c-1}).\n\n    Here, INT(i) is a four-octet encoding of the integer i, most\n    significant octet first. */\n  var prf = forge.hmac.create();\n  prf.start(md, p);\n  var dk = '';\n  var xor, u_c, u_c1;\n\n  // sync version\n  if(!callback) {\n    for(var i = 1; i <= len; ++i) {\n      // PRF(P, S || INT(i)) (first iteration)\n      prf.start(null, null);\n      prf.update(s);\n      prf.update(forge.util.int32ToBytes(i));\n      xor = u_c1 = prf.digest().getBytes();\n\n      // PRF(P, u_{c-1}) (other iterations)\n      for(var j = 2; j <= c; ++j) {\n        prf.start(null, null);\n        prf.update(u_c1);\n        u_c = prf.digest().getBytes();\n        // F(p, s, c, i)\n        xor = forge.util.xorBytes(xor, u_c, hLen);\n        u_c1 = u_c;\n      }\n\n      /* 4. Concatenate the blocks and extract the first dkLen octets to\n        produce a derived key DK:\n\n        DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */\n      dk += (i < len) ? xor : xor.substr(0, r);\n    }\n    /* 5. Output the derived key DK. */\n    return dk;\n  }\n\n  // async version\n  var i = 1, j;\n  function outer() {\n    if(i > len) {\n      // done\n      return callback(null, dk);\n    }\n\n    // PRF(P, S || INT(i)) (first iteration)\n    prf.start(null, null);\n    prf.update(s);\n    prf.update(forge.util.int32ToBytes(i));\n    xor = u_c1 = prf.digest().getBytes();\n\n    // PRF(P, u_{c-1}) (other iterations)\n    j = 2;\n    inner();\n  }\n\n  function inner() {\n    if(j <= c) {\n      prf.start(null, null);\n      prf.update(u_c1);\n      u_c = prf.digest().getBytes();\n      // F(p, s, c, i)\n      xor = forge.util.xorBytes(xor, u_c, hLen);\n      u_c1 = u_c;\n      ++j;\n      return forge.util.setImmediate(inner);\n    }\n\n    /* 4. Concatenate the blocks and extract the first dkLen octets to\n      produce a derived key DK:\n\n      DK = T_1 || T_2 ||  ...  || T_len<0..r-1> */\n    dk += (i < len) ? xor : xor.substr(0, r);\n\n    ++i;\n    outer();\n  }\n\n  outer();\n};\n","/**\n * Utility functions for web applications.\n *\n * @author Dave Longley\n *\n * Copyright (c) 2010-2018 Digital Bazaar, Inc.\n */\nvar forge = require('./forge');\nvar baseN = require('./baseN');\n\n/* Utilities API */\nvar util = module.exports = forge.util = forge.util || {};\n\n// define setImmediate and nextTick\n(function() {\n  // use native nextTick (unless we're in webpack)\n  // webpack (or better node-libs-browser polyfill) sets process.browser.\n  // this way we can detect webpack properly\n  if(typeof process !== 'undefined' && process.nextTick && !process.browser) {\n    util.nextTick = process.nextTick;\n    if(typeof setImmediate === 'function') {\n      util.setImmediate = setImmediate;\n    } else {\n      // polyfill setImmediate with nextTick, older versions of node\n      // (those w/o setImmediate) won't totally starve IO\n      util.setImmediate = util.nextTick;\n    }\n    return;\n  }\n\n  // polyfill nextTick with native setImmediate\n  if(typeof setImmediate === 'function') {\n    util.setImmediate = function() { return setImmediate.apply(undefined, arguments); };\n    util.nextTick = function(callback) {\n      return setImmediate(callback);\n    };\n    return;\n  }\n\n  /* Note: A polyfill upgrade pattern is used here to allow combining\n  polyfills. For example, MutationObserver is fast, but blocks UI updates,\n  so it needs to allow UI updates periodically, so it falls back on\n  postMessage or setTimeout. */\n\n  // polyfill with setTimeout\n  util.setImmediate = function(callback) {\n    setTimeout(callback, 0);\n  };\n\n  // upgrade polyfill to use postMessage\n  if(typeof window !== 'undefined' &&\n    typeof window.postMessage === 'function') {\n    var msg = 'forge.setImmediate';\n    var callbacks = [];\n    util.setImmediate = function(callback) {\n      callbacks.push(callback);\n      // only send message when one hasn't been sent in\n      // the current turn of the event loop\n      if(callbacks.length === 1) {\n        window.postMessage(msg, '*');\n      }\n    };\n    function handler(event) {\n      if(event.source === window && event.data === msg) {\n        event.stopPropagation();\n        var copy = callbacks.slice();\n        callbacks.length = 0;\n        copy.forEach(function(callback) {\n          callback();\n        });\n      }\n    }\n    window.addEventListener('message', handler, true);\n  }\n\n  // upgrade polyfill to use MutationObserver\n  if(typeof MutationObserver !== 'undefined') {\n    // polyfill with MutationObserver\n    var now = Date.now();\n    var attr = true;\n    var div = document.createElement('div');\n    var callbacks = [];\n    new MutationObserver(function() {\n      var copy = callbacks.slice();\n      callbacks.length = 0;\n      copy.forEach(function(callback) {\n        callback();\n      });\n    }).observe(div, {attributes: true});\n    var oldSetImmediate = util.setImmediate;\n    util.setImmediate = function(callback) {\n      if(Date.now() - now > 15) {\n        now = Date.now();\n        oldSetImmediate(callback);\n      } else {\n        callbacks.push(callback);\n        // only trigger observer when it hasn't been triggered in\n        // the current turn of the event loop\n        if(callbacks.length === 1) {\n          div.setAttribute('a', attr = !attr);\n        }\n      }\n    };\n  }\n\n  util.nextTick = util.setImmediate;\n})();\n\n// check if running under Node.js\nutil.isNodejs =\n  typeof process !== 'undefined' && process.versions && process.versions.node;\n\n\n// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while\n// it will point to `window` in the main thread.\n// To remain compatible with older browsers, we fall back to 'window' if 'self'\n// is not available.\nutil.globalScope = (function() {\n  if(util.isNodejs) {\n    return global;\n  }\n\n  return typeof self === 'undefined' ? window : self;\n})();\n\n// define isArray\nutil.isArray = Array.isArray || function(x) {\n  return Object.prototype.toString.call(x) === '[object Array]';\n};\n\n// define isArrayBuffer\nutil.isArrayBuffer = function(x) {\n  return typeof ArrayBuffer !== 'undefined' && x instanceof ArrayBuffer;\n};\n\n// define isArrayBufferView\nutil.isArrayBufferView = function(x) {\n  return x && util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;\n};\n\n/**\n * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for\n * algorithms where bit manipulation, JavaScript limitations, and/or algorithm\n * design only allow for byte operations of a limited size.\n *\n * @param n number of bits.\n *\n * Throw Error if n invalid.\n */\nfunction _checkBitsParam(n) {\n  if(!(n === 8 || n === 16 || n === 24 || n === 32)) {\n    throw new Error('Only 8, 16, 24, or 32 bits supported: ' + n);\n  }\n}\n\n// TODO: set ByteBuffer to best available backing\nutil.ByteBuffer = ByteStringBuffer;\n\n/** Buffer w/BinaryString backing */\n\n/**\n * Constructor for a binary string backed byte buffer.\n *\n * @param [b] the bytes to wrap (either encoded as string, one byte per\n *          character, or as an ArrayBuffer or Typed Array).\n */\nfunction ByteStringBuffer(b) {\n  // TODO: update to match DataBuffer API\n\n  // the data in this buffer\n  this.data = '';\n  // the pointer for reading from this buffer\n  this.read = 0;\n\n  if(typeof b === 'string') {\n    this.data = b;\n  } else if(util.isArrayBuffer(b) || util.isArrayBufferView(b)) {\n    if(typeof Buffer !== 'undefined' && b instanceof Buffer) {\n      this.data = b.toString('binary');\n    } else {\n      // convert native buffer to forge buffer\n      // FIXME: support native buffers internally instead\n      var arr = new Uint8Array(b);\n      try {\n        this.data = String.fromCharCode.apply(null, arr);\n      } catch(e) {\n        for(var i = 0; i < arr.length; ++i) {\n          this.putByte(arr[i]);\n        }\n      }\n    }\n  } else if(b instanceof ByteStringBuffer ||\n    (typeof b === 'object' && typeof b.data === 'string' &&\n    typeof b.read === 'number')) {\n    // copy existing buffer\n    this.data = b.data;\n    this.read = b.read;\n  }\n\n  // used for v8 optimization\n  this._constructedStringLength = 0;\n}\nutil.ByteStringBuffer = ByteStringBuffer;\n\n/* Note: This is an optimization for V8-based browsers. When V8 concatenates\n  a string, the strings are only joined logically using a \"cons string\" or\n  \"constructed/concatenated string\". These containers keep references to one\n  another and can result in very large memory usage. For example, if a 2MB\n  string is constructed by concatenating 4 bytes together at a time, the\n  memory usage will be ~44MB; so ~22x increase. The strings are only joined\n  together when an operation requiring their joining takes place, such as\n  substr(). This function is called when adding data to this buffer to ensure\n  these types of strings are periodically joined to reduce the memory\n  footprint. */\nvar _MAX_CONSTRUCTED_STRING_LENGTH = 4096;\nutil.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {\n  this._constructedStringLength += x;\n  if(this._constructedStringLength > _MAX_CONSTRUCTED_STRING_LENGTH) {\n    // this substr() should cause the constructed string to join\n    this.data.substr(0, 1);\n    this._constructedStringLength = 0;\n  }\n};\n\n/**\n * Gets the number of bytes in this buffer.\n *\n * @return the number of bytes in this buffer.\n */\nutil.ByteStringBuffer.prototype.length = function() {\n  return this.data.length - this.read;\n};\n\n/**\n * Gets whether or not this buffer is empty.\n *\n * @return true if this buffer is empty, false if not.\n */\nutil.ByteStringBuffer.prototype.isEmpty = function() {\n  return this.length() <= 0;\n};\n\n/**\n * Puts a byte in this buffer.\n *\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putByte = function(b) {\n  return this.putBytes(String.fromCharCode(b));\n};\n\n/**\n * Puts a byte in this buffer N times.\n *\n * @param b the byte to put.\n * @param n the number of bytes of value b to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.fillWithByte = function(b, n) {\n  b = String.fromCharCode(b);\n  var d = this.data;\n  while(n > 0) {\n    if(n & 1) {\n      d += b;\n    }\n    n >>>= 1;\n    if(n > 0) {\n      b += b;\n    }\n  }\n  this.data = d;\n  this._optimizeConstructedString(n);\n  return this;\n};\n\n/**\n * Puts bytes in this buffer.\n *\n * @param bytes the bytes (as a binary encoded string) to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putBytes = function(bytes) {\n  this.data += bytes;\n  this._optimizeConstructedString(bytes.length);\n  return this;\n};\n\n/**\n * Puts a UTF-16 encoded string into this buffer.\n *\n * @param str the string to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putString = function(str) {\n  return this.putBytes(util.encodeUtf8(str));\n};\n\n/**\n * Puts a 16-bit integer in this buffer in big-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt16 = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n/**\n * Puts a 24-bit integer in this buffer in big-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt24 = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n/**\n * Puts a 32-bit integer in this buffer in big-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt32 = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i >> 24 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n/**\n * Puts a 16-bit integer in this buffer in little-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt16Le = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF));\n};\n\n/**\n * Puts a 24-bit integer in this buffer in little-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt24Le = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF));\n};\n\n/**\n * Puts a 32-bit integer in this buffer in little-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt32Le = function(i) {\n  return this.putBytes(\n    String.fromCharCode(i & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 24 & 0xFF));\n};\n\n/**\n * Puts an n-bit integer in this buffer in big-endian order.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putInt = function(i, n) {\n  _checkBitsParam(n);\n  var bytes = '';\n  do {\n    n -= 8;\n    bytes += String.fromCharCode((i >> n) & 0xFF);\n  } while(n > 0);\n  return this.putBytes(bytes);\n};\n\n/**\n * Puts a signed n-bit integer in this buffer in big-endian order. Two's\n * complement representation is used.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putSignedInt = function(i, n) {\n  // putInt checks n\n  if(i < 0) {\n    i += 2 << (n - 1);\n  }\n  return this.putInt(i, n);\n};\n\n/**\n * Puts the given buffer into this buffer.\n *\n * @param buffer the buffer to put into this one.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.putBuffer = function(buffer) {\n  return this.putBytes(buffer.getBytes());\n};\n\n/**\n * Gets a byte from this buffer and advances the read pointer by 1.\n *\n * @return the byte.\n */\nutil.ByteStringBuffer.prototype.getByte = function() {\n  return this.data.charCodeAt(this.read++);\n};\n\n/**\n * Gets a uint16 from this buffer in big-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.ByteStringBuffer.prototype.getInt16 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 8 ^\n    this.data.charCodeAt(this.read + 1));\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in big-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.ByteStringBuffer.prototype.getInt24 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 16 ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2));\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in big-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.ByteStringBuffer.prototype.getInt32 = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) << 24 ^\n    this.data.charCodeAt(this.read + 1) << 16 ^\n    this.data.charCodeAt(this.read + 2) << 8 ^\n    this.data.charCodeAt(this.read + 3));\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets a uint16 from this buffer in little-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.ByteStringBuffer.prototype.getInt16Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8);\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in little-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.ByteStringBuffer.prototype.getInt24Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2) << 16);\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in little-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.ByteStringBuffer.prototype.getInt32Le = function() {\n  var rval = (\n    this.data.charCodeAt(this.read) ^\n    this.data.charCodeAt(this.read + 1) << 8 ^\n    this.data.charCodeAt(this.read + 2) << 16 ^\n    this.data.charCodeAt(this.read + 3) << 24);\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets an n-bit integer from this buffer in big-endian order and advances the\n * read pointer by ceil(n/8).\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.ByteStringBuffer.prototype.getInt = function(n) {\n  _checkBitsParam(n);\n  var rval = 0;\n  do {\n    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.\n    rval = (rval << 8) + this.data.charCodeAt(this.read++);\n    n -= 8;\n  } while(n > 0);\n  return rval;\n};\n\n/**\n * Gets a signed n-bit integer from this buffer in big-endian order, using\n * two's complement, and advances the read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.ByteStringBuffer.prototype.getSignedInt = function(n) {\n  // getInt checks n\n  var x = this.getInt(n);\n  var max = 2 << (n - 2);\n  if(x >= max) {\n    x -= max << 1;\n  }\n  return x;\n};\n\n/**\n * Reads bytes out as a binary encoded string and clears them from the\n * buffer. Note that the resulting string is binary encoded (in node.js this\n * encoding is referred to as `binary`, it is *not* `utf8`).\n *\n * @param count the number of bytes to read, undefined or null for all.\n *\n * @return a binary encoded string of bytes.\n */\nutil.ByteStringBuffer.prototype.getBytes = function(count) {\n  var rval;\n  if(count) {\n    // read count bytes\n    count = Math.min(this.length(), count);\n    rval = this.data.slice(this.read, this.read + count);\n    this.read += count;\n  } else if(count === 0) {\n    rval = '';\n  } else {\n    // read all bytes, optimize to only copy when needed\n    rval = (this.read === 0) ? this.data : this.data.slice(this.read);\n    this.clear();\n  }\n  return rval;\n};\n\n/**\n * Gets a binary encoded string of the bytes from this buffer without\n * modifying the read pointer.\n *\n * @param count the number of bytes to get, omit to get all.\n *\n * @return a string full of binary encoded characters.\n */\nutil.ByteStringBuffer.prototype.bytes = function(count) {\n  return (typeof(count) === 'undefined' ?\n    this.data.slice(this.read) :\n    this.data.slice(this.read, this.read + count));\n};\n\n/**\n * Gets a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n *\n * @return the byte.\n */\nutil.ByteStringBuffer.prototype.at = function(i) {\n  return this.data.charCodeAt(this.read + i);\n};\n\n/**\n * Puts a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.setAt = function(i, b) {\n  this.data = this.data.substr(0, this.read + i) +\n    String.fromCharCode(b) +\n    this.data.substr(this.read + i + 1);\n  return this;\n};\n\n/**\n * Gets the last byte without modifying the read pointer.\n *\n * @return the last byte.\n */\nutil.ByteStringBuffer.prototype.last = function() {\n  return this.data.charCodeAt(this.data.length - 1);\n};\n\n/**\n * Creates a copy of this buffer.\n *\n * @return the copy.\n */\nutil.ByteStringBuffer.prototype.copy = function() {\n  var c = util.createBuffer(this.data);\n  c.read = this.read;\n  return c;\n};\n\n/**\n * Compacts this buffer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.compact = function() {\n  if(this.read > 0) {\n    this.data = this.data.slice(this.read);\n    this.read = 0;\n  }\n  return this;\n};\n\n/**\n * Clears this buffer.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.clear = function() {\n  this.data = '';\n  this.read = 0;\n  return this;\n};\n\n/**\n * Shortens this buffer by triming bytes off of the end of this buffer.\n *\n * @param count the number of bytes to trim off.\n *\n * @return this buffer.\n */\nutil.ByteStringBuffer.prototype.truncate = function(count) {\n  var len = Math.max(0, this.length() - count);\n  this.data = this.data.substr(this.read, len);\n  this.read = 0;\n  return this;\n};\n\n/**\n * Converts this buffer to a hexadecimal string.\n *\n * @return a hexadecimal string.\n */\nutil.ByteStringBuffer.prototype.toHex = function() {\n  var rval = '';\n  for(var i = this.read; i < this.data.length; ++i) {\n    var b = this.data.charCodeAt(i);\n    if(b < 16) {\n      rval += '0';\n    }\n    rval += b.toString(16);\n  }\n  return rval;\n};\n\n/**\n * Converts this buffer to a UTF-16 string (standard JavaScript string).\n *\n * @return a UTF-16 string.\n */\nutil.ByteStringBuffer.prototype.toString = function() {\n  return util.decodeUtf8(this.bytes());\n};\n\n/** End Buffer w/BinaryString backing */\n\n/** Buffer w/UInt8Array backing */\n\n/**\n * FIXME: Experimental. Do not use yet.\n *\n * Constructor for an ArrayBuffer-backed byte buffer.\n *\n * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a\n * TypedArray.\n *\n * If a string is given, its encoding should be provided as an option,\n * otherwise it will default to 'binary'. A 'binary' string is encoded such\n * that each character is one byte in length and size.\n *\n * If an ArrayBuffer, DataView, or TypedArray is given, it will be used\n * *directly* without any copying. Note that, if a write to the buffer requires\n * more space, the buffer will allocate a new backing ArrayBuffer to\n * accommodate. The starting read and write offsets for the buffer may be\n * given as options.\n *\n * @param [b] the initial bytes for this buffer.\n * @param options the options to use:\n *          [readOffset] the starting read offset to use (default: 0).\n *          [writeOffset] the starting write offset to use (default: the\n *            length of the first parameter).\n *          [growSize] the minimum amount, in bytes, to grow the buffer by to\n *            accommodate writes (default: 1024).\n *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the\n *            first parameter, if it is a string (default: 'binary').\n */\nfunction DataBuffer(b, options) {\n  // default options\n  options = options || {};\n\n  // pointers for read from/write to buffer\n  this.read = options.readOffset || 0;\n  this.growSize = options.growSize || 1024;\n\n  var isArrayBuffer = util.isArrayBuffer(b);\n  var isArrayBufferView = util.isArrayBufferView(b);\n  if(isArrayBuffer || isArrayBufferView) {\n    // use ArrayBuffer directly\n    if(isArrayBuffer) {\n      this.data = new DataView(b);\n    } else {\n      // TODO: adjust read/write offset based on the type of view\n      // or specify that this must be done in the options ... that the\n      // offsets are byte-based\n      this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);\n    }\n    this.write = ('writeOffset' in options ?\n      options.writeOffset : this.data.byteLength);\n    return;\n  }\n\n  // initialize to empty array buffer and add any given bytes using putBytes\n  this.data = new DataView(new ArrayBuffer(0));\n  this.write = 0;\n\n  if(b !== null && b !== undefined) {\n    this.putBytes(b);\n  }\n\n  if('writeOffset' in options) {\n    this.write = options.writeOffset;\n  }\n}\nutil.DataBuffer = DataBuffer;\n\n/**\n * Gets the number of bytes in this buffer.\n *\n * @return the number of bytes in this buffer.\n */\nutil.DataBuffer.prototype.length = function() {\n  return this.write - this.read;\n};\n\n/**\n * Gets whether or not this buffer is empty.\n *\n * @return true if this buffer is empty, false if not.\n */\nutil.DataBuffer.prototype.isEmpty = function() {\n  return this.length() <= 0;\n};\n\n/**\n * Ensures this buffer has enough empty space to accommodate the given number\n * of bytes. An optional parameter may be given that indicates a minimum\n * amount to grow the buffer if necessary. If the parameter is not given,\n * the buffer will be grown by some previously-specified default amount\n * or heuristic.\n *\n * @param amount the number of bytes to accommodate.\n * @param [growSize] the minimum amount, in bytes, to grow the buffer by if\n *          necessary.\n */\nutil.DataBuffer.prototype.accommodate = function(amount, growSize) {\n  if(this.length() >= amount) {\n    return this;\n  }\n  growSize = Math.max(growSize || this.growSize, amount);\n\n  // grow buffer\n  var src = new Uint8Array(\n    this.data.buffer, this.data.byteOffset, this.data.byteLength);\n  var dst = new Uint8Array(this.length() + growSize);\n  dst.set(src);\n  this.data = new DataView(dst.buffer);\n\n  return this;\n};\n\n/**\n * Puts a byte in this buffer.\n *\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putByte = function(b) {\n  this.accommodate(1);\n  this.data.setUint8(this.write++, b);\n  return this;\n};\n\n/**\n * Puts a byte in this buffer N times.\n *\n * @param b the byte to put.\n * @param n the number of bytes of value b to put.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.fillWithByte = function(b, n) {\n  this.accommodate(n);\n  for(var i = 0; i < n; ++i) {\n    this.data.setUint8(b);\n  }\n  return this;\n};\n\n/**\n * Puts bytes in this buffer. The bytes may be given as a string, an\n * ArrayBuffer, a DataView, or a TypedArray.\n *\n * @param bytes the bytes to put.\n * @param [encoding] the encoding for the first parameter ('binary', 'utf8',\n *          'utf16', 'hex'), if it is a string (default: 'binary').\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putBytes = function(bytes, encoding) {\n  if(util.isArrayBufferView(bytes)) {\n    var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);\n    var len = src.byteLength - src.byteOffset;\n    this.accommodate(len);\n    var dst = new Uint8Array(this.data.buffer, this.write);\n    dst.set(src);\n    this.write += len;\n    return this;\n  }\n\n  if(util.isArrayBuffer(bytes)) {\n    var src = new Uint8Array(bytes);\n    this.accommodate(src.byteLength);\n    var dst = new Uint8Array(this.data.buffer);\n    dst.set(src, this.write);\n    this.write += src.byteLength;\n    return this;\n  }\n\n  // bytes is a util.DataBuffer or equivalent\n  if(bytes instanceof util.DataBuffer ||\n    (typeof bytes === 'object' &&\n    typeof bytes.read === 'number' && typeof bytes.write === 'number' &&\n    util.isArrayBufferView(bytes.data))) {\n    var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());\n    this.accommodate(src.byteLength);\n    var dst = new Uint8Array(bytes.data.byteLength, this.write);\n    dst.set(src);\n    this.write += src.byteLength;\n    return this;\n  }\n\n  if(bytes instanceof util.ByteStringBuffer) {\n    // copy binary string and process as the same as a string parameter below\n    bytes = bytes.data;\n    encoding = 'binary';\n  }\n\n  // string conversion\n  encoding = encoding || 'binary';\n  if(typeof bytes === 'string') {\n    var view;\n\n    // decode from string\n    if(encoding === 'hex') {\n      this.accommodate(Math.ceil(bytes.length / 2));\n      view = new Uint8Array(this.data.buffer, this.write);\n      this.write += util.binary.hex.decode(bytes, view, this.write);\n      return this;\n    }\n    if(encoding === 'base64') {\n      this.accommodate(Math.ceil(bytes.length / 4) * 3);\n      view = new Uint8Array(this.data.buffer, this.write);\n      this.write += util.binary.base64.decode(bytes, view, this.write);\n      return this;\n    }\n\n    // encode text as UTF-8 bytes\n    if(encoding === 'utf8') {\n      // encode as UTF-8 then decode string as raw binary\n      bytes = util.encodeUtf8(bytes);\n      encoding = 'binary';\n    }\n\n    // decode string as raw binary\n    if(encoding === 'binary' || encoding === 'raw') {\n      // one byte per character\n      this.accommodate(bytes.length);\n      view = new Uint8Array(this.data.buffer, this.write);\n      this.write += util.binary.raw.decode(view);\n      return this;\n    }\n\n    // encode text as UTF-16 bytes\n    if(encoding === 'utf16') {\n      // two bytes per character\n      this.accommodate(bytes.length * 2);\n      view = new Uint16Array(this.data.buffer, this.write);\n      this.write += util.text.utf16.encode(view);\n      return this;\n    }\n\n    throw new Error('Invalid encoding: ' + encoding);\n  }\n\n  throw Error('Invalid parameter: ' + bytes);\n};\n\n/**\n * Puts the given buffer into this buffer.\n *\n * @param buffer the buffer to put into this one.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putBuffer = function(buffer) {\n  this.putBytes(buffer);\n  buffer.clear();\n  return this;\n};\n\n/**\n * Puts a string into this buffer.\n *\n * @param str the string to put.\n * @param [encoding] the encoding for the string (default: 'utf16').\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putString = function(str) {\n  return this.putBytes(str, 'utf16');\n};\n\n/**\n * Puts a 16-bit integer in this buffer in big-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt16 = function(i) {\n  this.accommodate(2);\n  this.data.setInt16(this.write, i);\n  this.write += 2;\n  return this;\n};\n\n/**\n * Puts a 24-bit integer in this buffer in big-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt24 = function(i) {\n  this.accommodate(3);\n  this.data.setInt16(this.write, i >> 8 & 0xFFFF);\n  this.data.setInt8(this.write, i >> 16 & 0xFF);\n  this.write += 3;\n  return this;\n};\n\n/**\n * Puts a 32-bit integer in this buffer in big-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt32 = function(i) {\n  this.accommodate(4);\n  this.data.setInt32(this.write, i);\n  this.write += 4;\n  return this;\n};\n\n/**\n * Puts a 16-bit integer in this buffer in little-endian order.\n *\n * @param i the 16-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt16Le = function(i) {\n  this.accommodate(2);\n  this.data.setInt16(this.write, i, true);\n  this.write += 2;\n  return this;\n};\n\n/**\n * Puts a 24-bit integer in this buffer in little-endian order.\n *\n * @param i the 24-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt24Le = function(i) {\n  this.accommodate(3);\n  this.data.setInt8(this.write, i >> 16 & 0xFF);\n  this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);\n  this.write += 3;\n  return this;\n};\n\n/**\n * Puts a 32-bit integer in this buffer in little-endian order.\n *\n * @param i the 32-bit integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt32Le = function(i) {\n  this.accommodate(4);\n  this.data.setInt32(this.write, i, true);\n  this.write += 4;\n  return this;\n};\n\n/**\n * Puts an n-bit integer in this buffer in big-endian order.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putInt = function(i, n) {\n  _checkBitsParam(n);\n  this.accommodate(n / 8);\n  do {\n    n -= 8;\n    this.data.setInt8(this.write++, (i >> n) & 0xFF);\n  } while(n > 0);\n  return this;\n};\n\n/**\n * Puts a signed n-bit integer in this buffer in big-endian order. Two's\n * complement representation is used.\n *\n * @param i the n-bit integer.\n * @param n the number of bits in the integer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.putSignedInt = function(i, n) {\n  _checkBitsParam(n);\n  this.accommodate(n / 8);\n  if(i < 0) {\n    i += 2 << (n - 1);\n  }\n  return this.putInt(i, n);\n};\n\n/**\n * Gets a byte from this buffer and advances the read pointer by 1.\n *\n * @return the byte.\n */\nutil.DataBuffer.prototype.getByte = function() {\n  return this.data.getInt8(this.read++);\n};\n\n/**\n * Gets a uint16 from this buffer in big-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.DataBuffer.prototype.getInt16 = function() {\n  var rval = this.data.getInt16(this.read);\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in big-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.DataBuffer.prototype.getInt24 = function() {\n  var rval = (\n    this.data.getInt16(this.read) << 8 ^\n    this.data.getInt8(this.read + 2));\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in big-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.DataBuffer.prototype.getInt32 = function() {\n  var rval = this.data.getInt32(this.read);\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets a uint16 from this buffer in little-endian order and advances the read\n * pointer by 2.\n *\n * @return the uint16.\n */\nutil.DataBuffer.prototype.getInt16Le = function() {\n  var rval = this.data.getInt16(this.read, true);\n  this.read += 2;\n  return rval;\n};\n\n/**\n * Gets a uint24 from this buffer in little-endian order and advances the read\n * pointer by 3.\n *\n * @return the uint24.\n */\nutil.DataBuffer.prototype.getInt24Le = function() {\n  var rval = (\n    this.data.getInt8(this.read) ^\n    this.data.getInt16(this.read + 1, true) << 8);\n  this.read += 3;\n  return rval;\n};\n\n/**\n * Gets a uint32 from this buffer in little-endian order and advances the read\n * pointer by 4.\n *\n * @return the word.\n */\nutil.DataBuffer.prototype.getInt32Le = function() {\n  var rval = this.data.getInt32(this.read, true);\n  this.read += 4;\n  return rval;\n};\n\n/**\n * Gets an n-bit integer from this buffer in big-endian order and advances the\n * read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.DataBuffer.prototype.getInt = function(n) {\n  _checkBitsParam(n);\n  var rval = 0;\n  do {\n    // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.\n    rval = (rval << 8) + this.data.getInt8(this.read++);\n    n -= 8;\n  } while(n > 0);\n  return rval;\n};\n\n/**\n * Gets a signed n-bit integer from this buffer in big-endian order, using\n * two's complement, and advances the read pointer by n/8.\n *\n * @param n the number of bits in the integer (8, 16, 24, or 32).\n *\n * @return the integer.\n */\nutil.DataBuffer.prototype.getSignedInt = function(n) {\n  // getInt checks n\n  var x = this.getInt(n);\n  var max = 2 << (n - 2);\n  if(x >= max) {\n    x -= max << 1;\n  }\n  return x;\n};\n\n/**\n * Reads bytes out as a binary encoded string and clears them from the\n * buffer.\n *\n * @param count the number of bytes to read, undefined or null for all.\n *\n * @return a binary encoded string of bytes.\n */\nutil.DataBuffer.prototype.getBytes = function(count) {\n  // TODO: deprecate this method, it is poorly named and\n  // this.toString('binary') replaces it\n  // add a toTypedArray()/toArrayBuffer() function\n  var rval;\n  if(count) {\n    // read count bytes\n    count = Math.min(this.length(), count);\n    rval = this.data.slice(this.read, this.read + count);\n    this.read += count;\n  } else if(count === 0) {\n    rval = '';\n  } else {\n    // read all bytes, optimize to only copy when needed\n    rval = (this.read === 0) ? this.data : this.data.slice(this.read);\n    this.clear();\n  }\n  return rval;\n};\n\n/**\n * Gets a binary encoded string of the bytes from this buffer without\n * modifying the read pointer.\n *\n * @param count the number of bytes to get, omit to get all.\n *\n * @return a string full of binary encoded characters.\n */\nutil.DataBuffer.prototype.bytes = function(count) {\n  // TODO: deprecate this method, it is poorly named, add \"getString()\"\n  return (typeof(count) === 'undefined' ?\n    this.data.slice(this.read) :\n    this.data.slice(this.read, this.read + count));\n};\n\n/**\n * Gets a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n *\n * @return the byte.\n */\nutil.DataBuffer.prototype.at = function(i) {\n  return this.data.getUint8(this.read + i);\n};\n\n/**\n * Puts a byte at the given index without modifying the read pointer.\n *\n * @param i the byte index.\n * @param b the byte to put.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.setAt = function(i, b) {\n  this.data.setUint8(i, b);\n  return this;\n};\n\n/**\n * Gets the last byte without modifying the read pointer.\n *\n * @return the last byte.\n */\nutil.DataBuffer.prototype.last = function() {\n  return this.data.getUint8(this.write - 1);\n};\n\n/**\n * Creates a copy of this buffer.\n *\n * @return the copy.\n */\nutil.DataBuffer.prototype.copy = function() {\n  return new util.DataBuffer(this);\n};\n\n/**\n * Compacts this buffer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.compact = function() {\n  if(this.read > 0) {\n    var src = new Uint8Array(this.data.buffer, this.read);\n    var dst = new Uint8Array(src.byteLength);\n    dst.set(src);\n    this.data = new DataView(dst);\n    this.write -= this.read;\n    this.read = 0;\n  }\n  return this;\n};\n\n/**\n * Clears this buffer.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.clear = function() {\n  this.data = new DataView(new ArrayBuffer(0));\n  this.read = this.write = 0;\n  return this;\n};\n\n/**\n * Shortens this buffer by triming bytes off of the end of this buffer.\n *\n * @param count the number of bytes to trim off.\n *\n * @return this buffer.\n */\nutil.DataBuffer.prototype.truncate = function(count) {\n  this.write = Math.max(0, this.length() - count);\n  this.read = Math.min(this.read, this.write);\n  return this;\n};\n\n/**\n * Converts this buffer to a hexadecimal string.\n *\n * @return a hexadecimal string.\n */\nutil.DataBuffer.prototype.toHex = function() {\n  var rval = '';\n  for(var i = this.read; i < this.data.byteLength; ++i) {\n    var b = this.data.getUint8(i);\n    if(b < 16) {\n      rval += '0';\n    }\n    rval += b.toString(16);\n  }\n  return rval;\n};\n\n/**\n * Converts this buffer to a string, using the given encoding. If no\n * encoding is given, 'utf8' (UTF-8) is used.\n *\n * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',\n *          'base64' (default: 'utf8').\n *\n * @return a string representation of the bytes in this buffer.\n */\nutil.DataBuffer.prototype.toString = function(encoding) {\n  var view = new Uint8Array(this.data, this.read, this.length());\n  encoding = encoding || 'utf8';\n\n  // encode to string\n  if(encoding === 'binary' || encoding === 'raw') {\n    return util.binary.raw.encode(view);\n  }\n  if(encoding === 'hex') {\n    return util.binary.hex.encode(view);\n  }\n  if(encoding === 'base64') {\n    return util.binary.base64.encode(view);\n  }\n\n  // decode to text\n  if(encoding === 'utf8') {\n    return util.text.utf8.decode(view);\n  }\n  if(encoding === 'utf16') {\n    return util.text.utf16.decode(view);\n  }\n\n  throw new Error('Invalid encoding: ' + encoding);\n};\n\n/** End Buffer w/UInt8Array backing */\n\n/**\n * Creates a buffer that stores bytes. A value may be given to populate the\n * buffer with data. This value can either be string of encoded bytes or a\n * regular string of characters. When passing a string of binary encoded\n * bytes, the encoding `raw` should be given. This is also the default. When\n * passing a string of characters, the encoding `utf8` should be given.\n *\n * @param [input] a string with encoded bytes to store in the buffer.\n * @param [encoding] (default: 'raw', other: 'utf8').\n */\nutil.createBuffer = function(input, encoding) {\n  // TODO: deprecate, use new ByteBuffer() instead\n  encoding = encoding || 'raw';\n  if(input !== undefined && encoding === 'utf8') {\n    input = util.encodeUtf8(input);\n  }\n  return new util.ByteBuffer(input);\n};\n\n/**\n * Fills a string with a particular value. If you want the string to be a byte\n * string, pass in String.fromCharCode(theByte).\n *\n * @param c the character to fill the string with, use String.fromCharCode\n *          to fill the string with a byte value.\n * @param n the number of characters of value c to fill with.\n *\n * @return the filled string.\n */\nutil.fillString = function(c, n) {\n  var s = '';\n  while(n > 0) {\n    if(n & 1) {\n      s += c;\n    }\n    n >>>= 1;\n    if(n > 0) {\n      c += c;\n    }\n  }\n  return s;\n};\n\n/**\n * Performs a per byte XOR between two byte strings and returns the result as a\n * string of bytes.\n *\n * @param s1 first string of bytes.\n * @param s2 second string of bytes.\n * @param n the number of bytes to XOR.\n *\n * @return the XOR'd result.\n */\nutil.xorBytes = function(s1, s2, n) {\n  var s3 = '';\n  var b = '';\n  var t = '';\n  var i = 0;\n  var c = 0;\n  for(; n > 0; --n, ++i) {\n    b = s1.charCodeAt(i) ^ s2.charCodeAt(i);\n    if(c >= 10) {\n      s3 += t;\n      t = '';\n      c = 0;\n    }\n    t += String.fromCharCode(b);\n    ++c;\n  }\n  s3 += t;\n  return s3;\n};\n\n/**\n * Converts a hex string into a 'binary' encoded string of bytes.\n *\n * @param hex the hexadecimal string to convert.\n *\n * @return the binary-encoded string of bytes.\n */\nutil.hexToBytes = function(hex) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.hex.decode instead.\"\n  var rval = '';\n  var i = 0;\n  if(hex.length & 1 == 1) {\n    // odd number of characters, convert first character alone\n    i = 1;\n    rval += String.fromCharCode(parseInt(hex[0], 16));\n  }\n  // convert 2 characters (1 byte) at a time\n  for(; i < hex.length; i += 2) {\n    rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\n  }\n  return rval;\n};\n\n/**\n * Converts a 'binary' encoded string of bytes to hex.\n *\n * @param bytes the byte string to convert.\n *\n * @return the string of hexadecimal characters.\n */\nutil.bytesToHex = function(bytes) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.hex.encode instead.\"\n  return util.createBuffer(bytes).toHex();\n};\n\n/**\n * Converts an 32-bit integer to 4-big-endian byte string.\n *\n * @param i the integer.\n *\n * @return the byte string.\n */\nutil.int32ToBytes = function(i) {\n  return (\n    String.fromCharCode(i >> 24 & 0xFF) +\n    String.fromCharCode(i >> 16 & 0xFF) +\n    String.fromCharCode(i >> 8 & 0xFF) +\n    String.fromCharCode(i & 0xFF));\n};\n\n// base64 characters, reverse mapping\nvar _base64 =\n  'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nvar _base64Idx = [\n/*43 -43 = 0*/\n/*'+',  1,  2,  3,'/' */\n   62, -1, -1, -1, 63,\n\n/*'0','1','2','3','4','5','6','7','8','9' */\n   52, 53, 54, 55, 56, 57, 58, 59, 60, 61,\n\n/*15, 16, 17,'=', 19, 20, 21 */\n  -1, -1, -1, 64, -1, -1, -1,\n\n/*65 - 43 = 22*/\n/*'A','B','C','D','E','F','G','H','I','J','K','L','M', */\n   0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12,\n\n/*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */\n   13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n\n/*91 - 43 = 48 */\n/*48, 49, 50, 51, 52, 53 */\n  -1, -1, -1, -1, -1, -1,\n\n/*97 - 43 = 54*/\n/*'a','b','c','d','e','f','g','h','i','j','k','l','m' */\n   26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38,\n\n/*'n','o','p','q','r','s','t','u','v','w','x','y','z' */\n   39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51\n];\n\n// base58 characters (Bitcoin alphabet)\nvar _base58 = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';\n\n/**\n * Base64 encodes a 'binary' encoded string of bytes.\n *\n * @param input the binary encoded string of bytes to base64-encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the base64-encoded output.\n */\nutil.encode64 = function(input, maxline) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.base64.encode instead.\"\n  var line = '';\n  var output = '';\n  var chr1, chr2, chr3;\n  var i = 0;\n  while(i < input.length) {\n    chr1 = input.charCodeAt(i++);\n    chr2 = input.charCodeAt(i++);\n    chr3 = input.charCodeAt(i++);\n\n    // encode 4 character group\n    line += _base64.charAt(chr1 >> 2);\n    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));\n    if(isNaN(chr2)) {\n      line += '==';\n    } else {\n      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));\n      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);\n    }\n\n    if(maxline && line.length > maxline) {\n      output += line.substr(0, maxline) + '\\r\\n';\n      line = line.substr(maxline);\n    }\n  }\n  output += line;\n  return output;\n};\n\n/**\n * Base64 decodes a string into a 'binary' encoded string of bytes.\n *\n * @param input the base64-encoded input.\n *\n * @return the binary encoded string.\n */\nutil.decode64 = function(input) {\n  // TODO: deprecate: \"Deprecated. Use util.binary.base64.decode instead.\"\n\n  // remove all non-base64 characters\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n  var output = '';\n  var enc1, enc2, enc3, enc4;\n  var i = 0;\n\n  while(i < input.length) {\n    enc1 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc2 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc3 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc4 = _base64Idx[input.charCodeAt(i++) - 43];\n\n    output += String.fromCharCode((enc1 << 2) | (enc2 >> 4));\n    if(enc3 !== 64) {\n      // decoded at least 2 bytes\n      output += String.fromCharCode(((enc2 & 15) << 4) | (enc3 >> 2));\n      if(enc4 !== 64) {\n        // decoded 3 bytes\n        output += String.fromCharCode(((enc3 & 3) << 6) | enc4);\n      }\n    }\n  }\n\n  return output;\n};\n\n/**\n * Encodes the given string of characters (a standard JavaScript\n * string) as a binary encoded string where the bytes represent\n * a UTF-8 encoded string of characters. Non-ASCII characters will be\n * encoded as multiple bytes according to UTF-8.\n *\n * @param str a standard string of characters to encode.\n *\n * @return the binary encoded string.\n */\nutil.encodeUtf8 = function(str) {\n  return unescape(encodeURIComponent(str));\n};\n\n/**\n * Decodes a binary encoded string that contains bytes that\n * represent a UTF-8 encoded string of characters -- into a\n * string of characters (a standard JavaScript string).\n *\n * @param str the binary encoded string to decode.\n *\n * @return the resulting standard string of characters.\n */\nutil.decodeUtf8 = function(str) {\n  return decodeURIComponent(escape(str));\n};\n\n// binary encoding/decoding tools\n// FIXME: Experimental. Do not use yet.\nutil.binary = {\n  raw: {},\n  hex: {},\n  base64: {},\n  base58: {},\n  baseN : {\n    encode: baseN.encode,\n    decode: baseN.decode\n  }\n};\n\n/**\n * Encodes a Uint8Array as a binary-encoded string. This encoding uses\n * a value between 0 and 255 for each character.\n *\n * @param bytes the Uint8Array to encode.\n *\n * @return the binary-encoded string.\n */\nutil.binary.raw.encode = function(bytes) {\n  return String.fromCharCode.apply(null, bytes);\n};\n\n/**\n * Decodes a binary-encoded string to a Uint8Array. This encoding uses\n * a value between 0 and 255 for each character.\n *\n * @param str the binary-encoded string to decode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.binary.raw.decode = function(str, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(str.length);\n  }\n  offset = offset || 0;\n  var j = offset;\n  for(var i = 0; i < str.length; ++i) {\n    out[j++] = str.charCodeAt(i);\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or\n * ByteBuffer as a string of hexadecimal characters.\n *\n * @param bytes the bytes to convert.\n *\n * @return the string of hexadecimal characters.\n */\nutil.binary.hex.encode = util.bytesToHex;\n\n/**\n * Decodes a hex-encoded string to a Uint8Array.\n *\n * @param hex the hexadecimal string to convert.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.binary.hex.decode = function(hex, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(Math.ceil(hex.length / 2));\n  }\n  offset = offset || 0;\n  var i = 0, j = offset;\n  if(hex.length & 1) {\n    // odd number of characters, convert first character alone\n    i = 1;\n    out[j++] = parseInt(hex[0], 16);\n  }\n  // convert 2 characters (1 byte) at a time\n  for(; i < hex.length; i += 2) {\n    out[j++] = parseInt(hex.substr(i, 2), 16);\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Base64-encodes a Uint8Array.\n *\n * @param input the Uint8Array to encode.\n * @param maxline the maximum number of encoded characters per line to use,\n *          defaults to none.\n *\n * @return the base64-encoded output string.\n */\nutil.binary.base64.encode = function(input, maxline) {\n  var line = '';\n  var output = '';\n  var chr1, chr2, chr3;\n  var i = 0;\n  while(i < input.byteLength) {\n    chr1 = input[i++];\n    chr2 = input[i++];\n    chr3 = input[i++];\n\n    // encode 4 character group\n    line += _base64.charAt(chr1 >> 2);\n    line += _base64.charAt(((chr1 & 3) << 4) | (chr2 >> 4));\n    if(isNaN(chr2)) {\n      line += '==';\n    } else {\n      line += _base64.charAt(((chr2 & 15) << 2) | (chr3 >> 6));\n      line += isNaN(chr3) ? '=' : _base64.charAt(chr3 & 63);\n    }\n\n    if(maxline && line.length > maxline) {\n      output += line.substr(0, maxline) + '\\r\\n';\n      line = line.substr(maxline);\n    }\n  }\n  output += line;\n  return output;\n};\n\n/**\n * Decodes a base64-encoded string to a Uint8Array.\n *\n * @param input the base64-encoded input string.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.binary.base64.decode = function(input, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(Math.ceil(input.length / 4) * 3);\n  }\n\n  // remove all non-base64 characters\n  input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n  offset = offset || 0;\n  var enc1, enc2, enc3, enc4;\n  var i = 0, j = offset;\n\n  while(i < input.length) {\n    enc1 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc2 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc3 = _base64Idx[input.charCodeAt(i++) - 43];\n    enc4 = _base64Idx[input.charCodeAt(i++) - 43];\n\n    out[j++] = (enc1 << 2) | (enc2 >> 4);\n    if(enc3 !== 64) {\n      // decoded at least 2 bytes\n      out[j++] = ((enc2 & 15) << 4) | (enc3 >> 2);\n      if(enc4 !== 64) {\n        // decoded 3 bytes\n        out[j++] = ((enc3 & 3) << 6) | enc4;\n      }\n    }\n  }\n\n  // make sure result is the exact decoded length\n  return output ? (j - offset) : out.subarray(0, j);\n};\n\n// add support for base58 encoding/decoding with Bitcoin alphabet\nutil.binary.base58.encode = function(input, maxline) {\n  return util.binary.baseN.encode(input, _base58, maxline);\n};\nutil.binary.base58.decode = function(input, maxline) {\n  return util.binary.baseN.decode(input, _base58, maxline);\n};\n\n// text encoding/decoding tools\n// FIXME: Experimental. Do not use yet.\nutil.text = {\n  utf8: {},\n  utf16: {}\n};\n\n/**\n * Encodes the given string as UTF-8 in a Uint8Array.\n *\n * @param str the string to encode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.text.utf8.encode = function(str, output, offset) {\n  str = util.encodeUtf8(str);\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(str.length);\n  }\n  offset = offset || 0;\n  var j = offset;\n  for(var i = 0; i < str.length; ++i) {\n    out[j++] = str.charCodeAt(i);\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Decodes the UTF-8 contents from a Uint8Array.\n *\n * @param bytes the Uint8Array to decode.\n *\n * @return the resulting string.\n */\nutil.text.utf8.decode = function(bytes) {\n  return util.decodeUtf8(String.fromCharCode.apply(null, bytes));\n};\n\n/**\n * Encodes the given string as UTF-16 in a Uint8Array.\n *\n * @param str the string to encode.\n * @param [output] an optional Uint8Array to write the output to; if it\n *          is too small, an exception will be thrown.\n * @param [offset] the start offset for writing to the output (default: 0).\n *\n * @return the Uint8Array or the number of bytes written if output was given.\n */\nutil.text.utf16.encode = function(str, output, offset) {\n  var out = output;\n  if(!out) {\n    out = new Uint8Array(str.length * 2);\n  }\n  var view = new Uint16Array(out.buffer);\n  offset = offset || 0;\n  var j = offset;\n  var k = offset;\n  for(var i = 0; i < str.length; ++i) {\n    view[k++] = str.charCodeAt(i);\n    j += 2;\n  }\n  return output ? (j - offset) : out;\n};\n\n/**\n * Decodes the UTF-16 contents from a Uint8Array.\n *\n * @param bytes the Uint8Array to decode.\n *\n * @return the resulting string.\n */\nutil.text.utf16.decode = function(bytes) {\n  return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));\n};\n\n/**\n * Deflates the given data using a flash interface.\n *\n * @param api the flash interface.\n * @param bytes the data.\n * @param raw true to return only raw deflate data, false to include zlib\n *          header and trailer.\n *\n * @return the deflated data as a string.\n */\nutil.deflate = function(api, bytes, raw) {\n  bytes = util.decode64(api.deflate(util.encode64(bytes)).rval);\n\n  // strip zlib header and trailer if necessary\n  if(raw) {\n    // zlib header is 2 bytes (CMF,FLG) where FLG indicates that\n    // there is a 4-byte DICT (alder-32) block before the data if\n    // its 5th bit is set\n    var start = 2;\n    var flg = bytes.charCodeAt(1);\n    if(flg & 0x20) {\n      start = 6;\n    }\n    // zlib trailer is 4 bytes of adler-32\n    bytes = bytes.substring(start, bytes.length - 4);\n  }\n\n  return bytes;\n};\n\n/**\n * Inflates the given data using a flash interface.\n *\n * @param api the flash interface.\n * @param bytes the data.\n * @param raw true if the incoming data has no zlib header or trailer and is\n *          raw DEFLATE data.\n *\n * @return the inflated data as a string, null on error.\n */\nutil.inflate = function(api, bytes, raw) {\n  // TODO: add zlib header and trailer if necessary/possible\n  var rval = api.inflate(util.encode64(bytes)).rval;\n  return (rval === null) ? null : util.decode64(rval);\n};\n\n/**\n * Sets a storage object.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param obj the storage object, null to remove.\n */\nvar _setStorageObject = function(api, id, obj) {\n  if(!api) {\n    throw new Error('WebStorage not available.');\n  }\n\n  var rval;\n  if(obj === null) {\n    rval = api.removeItem(id);\n  } else {\n    // json-encode and base64-encode object\n    obj = util.encode64(JSON.stringify(obj));\n    rval = api.setItem(id, obj);\n  }\n\n  // handle potential flash error\n  if(typeof(rval) !== 'undefined' && rval.rval !== true) {\n    var error = new Error(rval.error.message);\n    error.id = rval.error.id;\n    error.name = rval.error.name;\n    throw error;\n  }\n};\n\n/**\n * Gets a storage object.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n *\n * @return the storage object entry or null if none exists.\n */\nvar _getStorageObject = function(api, id) {\n  if(!api) {\n    throw new Error('WebStorage not available.');\n  }\n\n  // get the existing entry\n  var rval = api.getItem(id);\n\n  /* Note: We check api.init because we can't do (api == localStorage)\n    on IE because of \"Class doesn't support Automation\" exception. Only\n    the flash api has an init method so this works too, but we need a\n    better solution in the future. */\n\n  // flash returns item wrapped in an object, handle special case\n  if(api.init) {\n    if(rval.rval === null) {\n      if(rval.error) {\n        var error = new Error(rval.error.message);\n        error.id = rval.error.id;\n        error.name = rval.error.name;\n        throw error;\n      }\n      // no error, but also no item\n      rval = null;\n    } else {\n      rval = rval.rval;\n    }\n  }\n\n  // handle decoding\n  if(rval !== null) {\n    // base64-decode and json-decode data\n    rval = JSON.parse(util.decode64(rval));\n  }\n\n  return rval;\n};\n\n/**\n * Stores an item in local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param data the data for the item (any javascript object/primitive).\n */\nvar _setItem = function(api, id, key, data) {\n  // get storage object\n  var obj = _getStorageObject(api, id);\n  if(obj === null) {\n    // create a new storage object\n    obj = {};\n  }\n  // update key\n  obj[key] = data;\n\n  // set storage object\n  _setStorageObject(api, id, obj);\n};\n\n/**\n * Gets an item from local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n *\n * @return the item.\n */\nvar _getItem = function(api, id, key) {\n  // get storage object\n  var rval = _getStorageObject(api, id);\n  if(rval !== null) {\n    // return data at key\n    rval = (key in rval) ? rval[key] : null;\n  }\n\n  return rval;\n};\n\n/**\n * Removes an item from local storage.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n */\nvar _removeItem = function(api, id, key) {\n  // get storage object\n  var obj = _getStorageObject(api, id);\n  if(obj !== null && key in obj) {\n    // remove key\n    delete obj[key];\n\n    // see if entry has no keys remaining\n    var empty = true;\n    for(var prop in obj) {\n      empty = false;\n      break;\n    }\n    if(empty) {\n      // remove entry entirely if no keys are left\n      obj = null;\n    }\n\n    // set storage object\n    _setStorageObject(api, id, obj);\n  }\n};\n\n/**\n * Clears the local disk storage identified by the given ID.\n *\n * @param api the storage interface.\n * @param id the storage ID to use.\n */\nvar _clearItems = function(api, id) {\n  _setStorageObject(api, id, null);\n};\n\n/**\n * Calls a storage function.\n *\n * @param func the function to call.\n * @param args the arguments for the function.\n * @param location the location argument.\n *\n * @return the return value from the function.\n */\nvar _callStorageFunction = function(func, args, location) {\n  var rval = null;\n\n  // default storage types\n  if(typeof(location) === 'undefined') {\n    location = ['web', 'flash'];\n  }\n\n  // apply storage types in order of preference\n  var type;\n  var done = false;\n  var exception = null;\n  for(var idx in location) {\n    type = location[idx];\n    try {\n      if(type === 'flash' || type === 'both') {\n        if(args[0] === null) {\n          throw new Error('Flash local storage not available.');\n        }\n        rval = func.apply(this, args);\n        done = (type === 'flash');\n      }\n      if(type === 'web' || type === 'both') {\n        args[0] = localStorage;\n        rval = func.apply(this, args);\n        done = true;\n      }\n    } catch(ex) {\n      exception = ex;\n    }\n    if(done) {\n      break;\n    }\n  }\n\n  if(!done) {\n    throw exception;\n  }\n\n  return rval;\n};\n\n/**\n * Stores an item on local disk.\n *\n * The available types of local storage include 'flash', 'web', and 'both'.\n *\n * The type 'flash' refers to flash local storage (SharedObject). In order\n * to use flash local storage, the 'api' parameter must be valid. The type\n * 'web' refers to WebStorage, if supported by the browser. The type 'both'\n * refers to storing using both 'flash' and 'web', not just one or the\n * other.\n *\n * The location array should list the storage types to use in order of\n * preference:\n *\n * ['flash']: flash only storage\n * ['web']: web only storage\n * ['both']: try to store in both\n * ['flash','web']: store in flash first, but if not available, 'web'\n * ['web','flash']: store in web first, but if not available, 'flash'\n *\n * The location array defaults to: ['web', 'flash']\n *\n * @param api the flash interface, null to use only WebStorage.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param data the data for the item (any javascript object/primitive).\n * @param location an array with the preferred types of storage to use.\n */\nutil.setItem = function(api, id, key, data, location) {\n  _callStorageFunction(_setItem, arguments, location);\n};\n\n/**\n * Gets an item on local disk.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface, null to use only WebStorage.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param location an array with the preferred types of storage to use.\n *\n * @return the item.\n */\nutil.getItem = function(api, id, key, location) {\n  return _callStorageFunction(_getItem, arguments, location);\n};\n\n/**\n * Removes an item on local disk.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface.\n * @param id the storage ID to use.\n * @param key the key for the item.\n * @param location an array with the preferred types of storage to use.\n */\nutil.removeItem = function(api, id, key, location) {\n  _callStorageFunction(_removeItem, arguments, location);\n};\n\n/**\n * Clears the local disk storage identified by the given ID.\n *\n * Set setItem() for details on storage types.\n *\n * @param api the flash interface if flash is available.\n * @param id the storage ID to use.\n * @param location an array with the preferred types of storage to use.\n */\nutil.clearItems = function(api, id, location) {\n  _callStorageFunction(_clearItems, arguments, location);\n};\n\n/**\n * Check if an object is empty.\n *\n * Taken from:\n * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937\n *\n * @param object the object to check.\n */\nutil.isEmpty = function(obj) {\n  for(var prop in obj) {\n    if(obj.hasOwnProperty(prop)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * Format with simple printf-style interpolation.\n *\n * %%: literal '%'\n * %s,%o: convert next argument into a string.\n *\n * @param format the string to format.\n * @param ... arguments to interpolate into the format string.\n */\nutil.format = function(format) {\n  var re = /%./g;\n  // current match\n  var match;\n  // current part\n  var part;\n  // current arg index\n  var argi = 0;\n  // collected parts to recombine later\n  var parts = [];\n  // last index found\n  var last = 0;\n  // loop while matches remain\n  while((match = re.exec(format))) {\n    part = format.substring(last, re.lastIndex - 2);\n    // don't add empty strings (ie, parts between %s%s)\n    if(part.length > 0) {\n      parts.push(part);\n    }\n    last = re.lastIndex;\n    // switch on % code\n    var code = match[0][1];\n    switch(code) {\n    case 's':\n    case 'o':\n      // check if enough arguments were given\n      if(argi < arguments.length) {\n        parts.push(arguments[argi++ + 1]);\n      } else {\n        parts.push('<?>');\n      }\n      break;\n    // FIXME: do proper formating for numbers, etc\n    //case 'f':\n    //case 'd':\n    case '%':\n      parts.push('%');\n      break;\n    default:\n      parts.push('<%' + code + '?>');\n    }\n  }\n  // add trailing part of format string\n  parts.push(format.substring(last));\n  return parts.join('');\n};\n\n/**\n * Formats a number.\n *\n * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/\n */\nutil.formatNumber = function(number, decimals, dec_point, thousands_sep) {\n  // http://kevin.vanzonneveld.net\n  // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n  // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)\n  // +     bugfix by: Michael White (http://crestidg.com)\n  // +     bugfix by: Benjamin Lupton\n  // +     bugfix by: Allan Jensen (http://www.winternet.no)\n  // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)\n  // *     example 1: number_format(1234.5678, 2, '.', '');\n  // *     returns 1: 1234.57\n\n  var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;\n  var d = dec_point === undefined ? ',' : dec_point;\n  var t = thousands_sep === undefined ?\n   '.' : thousands_sep, s = n < 0 ? '-' : '';\n  var i = parseInt((n = Math.abs(+n || 0).toFixed(c)), 10) + '';\n  var j = (i.length > 3) ? i.length % 3 : 0;\n  return s + (j ? i.substr(0, j) + t : '') +\n    i.substr(j).replace(/(\\d{3})(?=\\d)/g, '$1' + t) +\n    (c ? d + Math.abs(n - i).toFixed(c).slice(2) : '');\n};\n\n/**\n * Formats a byte size.\n *\n * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/\n */\nutil.formatSize = function(size) {\n  if(size >= 1073741824) {\n    size = util.formatNumber(size / 1073741824, 2, '.', '') + ' GiB';\n  } else if(size >= 1048576) {\n    size = util.formatNumber(size / 1048576, 2, '.', '') + ' MiB';\n  } else if(size >= 1024) {\n    size = util.formatNumber(size / 1024, 0) + ' KiB';\n  } else {\n    size = util.formatNumber(size, 0) + ' bytes';\n  }\n  return size;\n};\n\n/**\n * Converts an IPv4 or IPv6 string representation into bytes (in network order).\n *\n * @param ip the IPv4 or IPv6 address to convert.\n *\n * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't\n *         be parsed.\n */\nutil.bytesFromIP = function(ip) {\n  if(ip.indexOf('.') !== -1) {\n    return util.bytesFromIPv4(ip);\n  }\n  if(ip.indexOf(':') !== -1) {\n    return util.bytesFromIPv6(ip);\n  }\n  return null;\n};\n\n/**\n * Converts an IPv4 string representation into bytes (in network order).\n *\n * @param ip the IPv4 address to convert.\n *\n * @return the 4-byte address or null if the address can't be parsed.\n */\nutil.bytesFromIPv4 = function(ip) {\n  ip = ip.split('.');\n  if(ip.length !== 4) {\n    return null;\n  }\n  var b = util.createBuffer();\n  for(var i = 0; i < ip.length; ++i) {\n    var num = parseInt(ip[i], 10);\n    if(isNaN(num)) {\n      return null;\n    }\n    b.putByte(num);\n  }\n  return b.getBytes();\n};\n\n/**\n * Converts an IPv6 string representation into bytes (in network order).\n *\n * @param ip the IPv6 address to convert.\n *\n * @return the 16-byte address or null if the address can't be parsed.\n */\nutil.bytesFromIPv6 = function(ip) {\n  var blanks = 0;\n  ip = ip.split(':').filter(function(e) {\n    if(e.length === 0) ++blanks;\n    return true;\n  });\n  var zeros = (8 - ip.length + blanks) * 2;\n  var b = util.createBuffer();\n  for(var i = 0; i < 8; ++i) {\n    if(!ip[i] || ip[i].length === 0) {\n      b.fillWithByte(0, zeros);\n      zeros = 0;\n      continue;\n    }\n    var bytes = util.hexToBytes(ip[i]);\n    if(bytes.length < 2) {\n      b.putByte(0);\n    }\n    b.putBytes(bytes);\n  }\n  return b.getBytes();\n};\n\n/**\n * Converts 4-bytes into an IPv4 string representation or 16-bytes into\n * an IPv6 string representation. The bytes must be in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,\n *         respectively, are given, otherwise null.\n */\nutil.bytesToIP = function(bytes) {\n  if(bytes.length === 4) {\n    return util.bytesToIPv4(bytes);\n  }\n  if(bytes.length === 16) {\n    return util.bytesToIPv6(bytes);\n  }\n  return null;\n};\n\n/**\n * Converts 4-bytes into an IPv4 string representation. The bytes must be\n * in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv4 string representation or null for an invalid # of bytes.\n */\nutil.bytesToIPv4 = function(bytes) {\n  if(bytes.length !== 4) {\n    return null;\n  }\n  var ip = [];\n  for(var i = 0; i < bytes.length; ++i) {\n    ip.push(bytes.charCodeAt(i));\n  }\n  return ip.join('.');\n};\n\n/**\n * Converts 16-bytes into an IPv16 string representation. The bytes must be\n * in network order.\n *\n * @param bytes the bytes to convert.\n *\n * @return the IPv16 string representation or null for an invalid # of bytes.\n */\nutil.bytesToIPv6 = function(bytes) {\n  if(bytes.length !== 16) {\n    return null;\n  }\n  var ip = [];\n  var zeroGroups = [];\n  var zeroMaxGroup = 0;\n  for(var i = 0; i < bytes.length; i += 2) {\n    var hex = util.bytesToHex(bytes[i] + bytes[i + 1]);\n    // canonicalize zero representation\n    while(hex[0] === '0' && hex !== '0') {\n      hex = hex.substr(1);\n    }\n    if(hex === '0') {\n      var last = zeroGroups[zeroGroups.length - 1];\n      var idx = ip.length;\n      if(!last || idx !== last.end + 1) {\n        zeroGroups.push({start: idx, end: idx});\n      } else {\n        last.end = idx;\n        if((last.end - last.start) >\n          (zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start)) {\n          zeroMaxGroup = zeroGroups.length - 1;\n        }\n      }\n    }\n    ip.push(hex);\n  }\n  if(zeroGroups.length > 0) {\n    var group = zeroGroups[zeroMaxGroup];\n    // only shorten group of length > 0\n    if(group.end - group.start > 0) {\n      ip.splice(group.start, group.end - group.start + 1, '');\n      if(group.start === 0) {\n        ip.unshift('');\n      }\n      if(group.end === 7) {\n        ip.push('');\n      }\n    }\n  }\n  return ip.join(':');\n};\n\n/**\n * Estimates the number of processes that can be run concurrently. If\n * creating Web Workers, keep in mind that the main JavaScript process needs\n * its own core.\n *\n * @param options the options to use:\n *          update true to force an update (not use the cached value).\n * @param callback(err, max) called once the operation completes.\n */\nutil.estimateCores = function(options, callback) {\n  if(typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n  options = options || {};\n  if('cores' in util && !options.update) {\n    return callback(null, util.cores);\n  }\n  if(typeof navigator !== 'undefined' &&\n    'hardwareConcurrency' in navigator &&\n    navigator.hardwareConcurrency > 0) {\n    util.cores = navigator.hardwareConcurrency;\n    return callback(null, util.cores);\n  }\n  if(typeof Worker === 'undefined') {\n    // workers not available\n    util.cores = 1;\n    return callback(null, util.cores);\n  }\n  if(typeof Blob === 'undefined') {\n    // can't estimate, default to 2\n    util.cores = 2;\n    return callback(null, util.cores);\n  }\n\n  // create worker concurrency estimation code as blob\n  var blobUrl = URL.createObjectURL(new Blob(['(',\n    function() {\n      self.addEventListener('message', function(e) {\n        // run worker for 4 ms\n        var st = Date.now();\n        var et = st + 4;\n        while(Date.now() < et);\n        self.postMessage({st: st, et: et});\n      });\n    }.toString(),\n  ')()'], {type: 'application/javascript'}));\n\n  // take 5 samples using 16 workers\n  sample([], 5, 16);\n\n  function sample(max, samples, numWorkers) {\n    if(samples === 0) {\n      // get overlap average\n      var avg = Math.floor(max.reduce(function(avg, x) {\n        return avg + x;\n      }, 0) / max.length);\n      util.cores = Math.max(1, avg);\n      URL.revokeObjectURL(blobUrl);\n      return callback(null, util.cores);\n    }\n    map(numWorkers, function(err, results) {\n      max.push(reduce(numWorkers, results));\n      sample(max, samples - 1, numWorkers);\n    });\n  }\n\n  function map(numWorkers, callback) {\n    var workers = [];\n    var results = [];\n    for(var i = 0; i < numWorkers; ++i) {\n      var worker = new Worker(blobUrl);\n      worker.addEventListener('message', function(e) {\n        results.push(e.data);\n        if(results.length === numWorkers) {\n          for(var i = 0; i < numWorkers; ++i) {\n            workers[i].terminate();\n          }\n          callback(null, results);\n        }\n      });\n      workers.push(worker);\n    }\n    for(var i = 0; i < numWorkers; ++i) {\n      workers[i].postMessage(i);\n    }\n  }\n\n  function reduce(numWorkers, results) {\n    // find overlapping time windows\n    var overlaps = [];\n    for(var n = 0; n < numWorkers; ++n) {\n      var r1 = results[n];\n      var overlap = overlaps[n] = [];\n      for(var i = 0; i < numWorkers; ++i) {\n        if(n === i) {\n          continue;\n        }\n        var r2 = results[i];\n        if((r1.st > r2.st && r1.st < r2.et) ||\n          (r2.st > r1.st && r2.st < r1.et)) {\n          overlap.push(i);\n        }\n      }\n    }\n    // get maximum overlaps ... don't include overlapping worker itself\n    // as the main JS process was also being scheduled during the work and\n    // would have to be subtracted from the estimate anyway\n    return overlaps.reduce(function(max, overlap) {\n      return Math.max(max, overlap.length);\n    }, 0);\n  }\n};\n","/* global self */\n'use strict'\n\nmodule.exports = (domain, opts, callback) => {\n  if (typeof opts === 'function') {\n    callback = opts\n    opts = {}\n  }\n\n  opts = opts || {}\n\n  domain = encodeURIComponent(domain)\n  let url = `https://ipfs.io/api/v0/dns?arg=${domain}`\n\n  Object.keys(opts).forEach(prop => {\n    url += `&${encodeURIComponent(prop)}=${encodeURIComponent(opts[prop])}`\n  })\n\n  self.fetch(url, { mode: 'cors' })\n    .then((response) => {\n      return response.json()\n    })\n    .then((response) => {\n      if (response.Path) {\n        return callback(null, response.Path)\n      } else {\n        return callback(new Error(response.Message))\n      }\n    })\n    .catch((error) => {\n      callback(error)\n    })\n}\n","module.exports={\n  \"name\": \"ipfs\",\n  \"version\": \"0.36.4\",\n  \"description\": \"JavaScript implementation of the IPFS specification\",\n  \"keywords\": [\n    \"IPFS\"\n  ],\n  \"homepage\": \"https://js.ipfs.io\",\n  \"bugs\": \"https://github.com/ipfs/js-ipfs/issues\",\n  \"license\": \"MIT\",\n  \"leadMaintainer\": \"Alan Shaw <alan@tableflip.io>\",\n  \"files\": [\n    \"src\",\n    \"dist\"\n  ],\n  \"main\": \"src/core/index.js\",\n  \"browser\": {\n    \"./src/core/components/init-assets.js\": false,\n    \"./src/core/runtime/add-from-fs-nodejs.js\": \"./src/core/runtime/add-from-fs-browser.js\",\n    \"./src/core/runtime/config-nodejs.js\": \"./src/core/runtime/config-browser.js\",\n    \"./src/core/runtime/dns-nodejs.js\": \"./src/core/runtime/dns-browser.js\",\n    \"./src/core/runtime/fetch-nodejs.js\": \"./src/core/runtime/fetch-browser.js\",\n    \"./src/core/runtime/libp2p-nodejs.js\": \"./src/core/runtime/libp2p-browser.js\",\n    \"./src/core/runtime/preload-nodejs.js\": \"./src/core/runtime/preload-browser.js\",\n    \"./src/core/runtime/repo-nodejs.js\": \"./src/core/runtime/repo-browser.js\",\n    \"./src/core/runtime/ipld-nodejs.js\": \"./src/core/runtime/ipld-browser.js\",\n    \"./test/utils/create-repo-nodejs.js\": \"./test/utils/create-repo-browser.js\",\n    \"stream\": \"readable-stream\"\n  },\n  \"browser-all-ipld-formats\": {\n    \"./src/core/runtime/ipld-browser.js\": \"./src/core/runtime/ipld-browser-all.js\"\n  },\n  \"bin\": {\n    \"jsipfs\": \"src/cli/bin.js\"\n  },\n  \"repository\": \"github:ipfs/js-ipfs\",\n  \"scripts\": {\n    \"lint\": \"aegir lint\",\n    \"build\": \"aegir build\",\n    \"test\": \"aegir test\",\n    \"test:node\": \"aegir test -t node\",\n    \"test:browser\": \"aegir test -t browser\",\n    \"test:webworker\": \"aegir test -t webworker\",\n    \"test:node:core\": \"aegir test -t node -f test/core/**/*.js\",\n    \"test:node:http\": \"aegir test -t node -f test/http-api/index.js\",\n    \"test:node:gateway\": \"aegir test -t node -f test/gateway/index.js\",\n    \"test:node:cli\": \"aegir test -t node -f test/cli/index.js\",\n    \"test:node:interface\": \"aegir test -t node -f test/core/interface.spec.js\",\n    \"test:bootstrapers\": \"IPFS_TEST=bootstrapers aegir test -t browser -f test/bootstrapers.js\",\n    \"benchmark\": \"echo \\\"Error: no benchmarks yet\\\" && exit 1\",\n    \"benchmark:node\": \"echo \\\"Error: no benchmarks yet\\\" && exit 1\",\n    \"benchmark:node:core\": \"echo \\\"Error: no benchmarks yet\\\" && exit 1\",\n    \"benchmark:node:http\": \"echo \\\"Error: no benchmarks yet\\\" && exit 1\",\n    \"benchmark:browser\": \"echo \\\"Error: no benchmarks yet\\\" && exit 1\",\n    \"release\": \"aegir release -t node -t browser\",\n    \"release-minor\": \"aegir release --type minor -t node -t browser\",\n    \"release-major\": \"aegir release --type major -t node -t browser\"\n  },\n  \"dependencies\": {\n    \"@hapi/ammo\": \"^3.1.0\",\n    \"@hapi/hapi\": \"^18.3.1\",\n    \"@hapi/joi\": \"^15.0.1\",\n    \"async\": \"^2.6.1\",\n    \"async-iterator-all\": \"^1.0.0\",\n    \"async-iterator-to-pull-stream\": \"^1.1.0\",\n    \"async-iterator-to-stream\": \"^1.1.0\",\n    \"base32.js\": \"~0.1.0\",\n    \"bignumber.js\": \"^9.0.0\",\n    \"binary-querystring\": \"~0.1.2\",\n    \"bl\": \"^3.0.0\",\n    \"boom\": \"^7.2.0\",\n    \"bs58\": \"^4.0.1\",\n    \"buffer-peek-stream\": \"^1.0.1\",\n    \"byteman\": \"^1.3.5\",\n    \"callbackify\": \"^1.1.0\",\n    \"cid-tool\": \"~0.3.0\",\n    \"cids\": \"~0.7.1\",\n    \"class-is\": \"^1.1.0\",\n    \"datastore-core\": \"~0.6.0\",\n    \"datastore-pubsub\": \"~0.1.1\",\n    \"debug\": \"^4.1.0\",\n    \"dlv\": \"^1.1.3\",\n    \"err-code\": \"^1.1.2\",\n    \"file-type\": \"^11.1.0\",\n    \"fnv1a\": \"^1.0.1\",\n    \"fsm-event\": \"^2.1.0\",\n    \"get-folder-size\": \"^2.0.0\",\n    \"glob\": \"^7.1.3\",\n    \"hapi-pino\": \"^6.0.0\",\n    \"human-to-milliseconds\": \"^1.0.0\",\n    \"interface-datastore\": \"~0.6.0\",\n    \"ipfs-bitswap\": \"~0.24.1\",\n    \"ipfs-block\": \"~0.8.1\",\n    \"ipfs-block-service\": \"~0.15.1\",\n    \"ipfs-http-client\": \"^32.0.0\",\n    \"ipfs-http-response\": \"~0.3.0\",\n    \"ipfs-mfs\": \"~0.11.4\",\n    \"ipfs-multipart\": \"~0.1.0\",\n    \"ipfs-repo\": \"~0.26.6\",\n    \"ipfs-unixfs\": \"~0.1.16\",\n    \"ipfs-unixfs-exporter\": \"~0.37.6\",\n    \"ipfs-unixfs-importer\": \"~0.39.9\",\n    \"ipfs-utils\": \"~0.0.3\",\n    \"ipld\": \"~0.24.1\",\n    \"ipld-bitcoin\": \"~0.3.0\",\n    \"ipld-dag-cbor\": \"~0.15.0\",\n    \"ipld-dag-pb\": \"~0.17.4\",\n    \"ipld-ethereum\": \"^4.0.0\",\n    \"ipld-git\": \"~0.5.0\",\n    \"ipld-raw\": \"^4.0.0\",\n    \"ipld-zcash\": \"~0.3.0\",\n    \"ipns\": \"~0.5.2\",\n    \"is-ipfs\": \"~0.6.1\",\n    \"is-pull-stream\": \"~0.0.0\",\n    \"is-stream\": \"^2.0.0\",\n    \"iso-url\": \"~0.4.6\",\n    \"just-flatten-it\": \"^2.1.0\",\n    \"just-safe-set\": \"^2.1.0\",\n    \"kind-of\": \"^6.0.2\",\n    \"libp2p\": \"~0.25.3\",\n    \"libp2p-bootstrap\": \"~0.9.3\",\n    \"libp2p-crypto\": \"~0.16.0\",\n    \"libp2p-kad-dht\": \"~0.15.1\",\n    \"libp2p-keychain\": \"~0.4.1\",\n    \"libp2p-mdns\": \"~0.12.0\",\n    \"libp2p-record\": \"~0.6.3\",\n    \"libp2p-secio\": \"~0.11.0\",\n    \"libp2p-tcp\": \"~0.13.0\",\n    \"libp2p-webrtc-star\": \"~0.16.0\",\n    \"libp2p-websocket-star-multi\": \"~0.4.3\",\n    \"libp2p-websockets\": \"~0.12.2\",\n    \"lodash\": \"^4.17.11\",\n    \"mafmt\": \"^6.0.2\",\n    \"merge-options\": \"^1.0.1\",\n    \"mime-types\": \"^2.1.21\",\n    \"mkdirp\": \"~0.5.1\",\n    \"multiaddr\": \"^6.0.5\",\n    \"multiaddr-to-uri\": \"^4.0.1\",\n    \"multibase\": \"~0.6.0\",\n    \"multicodec\": \"~0.5.1\",\n    \"multihashes\": \"~0.4.14\",\n    \"multihashing-async\": \"~0.6.0\",\n    \"node-fetch\": \"^2.3.0\",\n    \"peer-book\": \"~0.9.0\",\n    \"peer-id\": \"~0.12.0\",\n    \"peer-info\": \"~0.15.0\",\n    \"progress\": \"^2.0.1\",\n    \"promisify-es6\": \"^1.0.3\",\n    \"protons\": \"^1.0.1\",\n    \"pull-abortable\": \"^4.1.1\",\n    \"pull-cat\": \"^1.1.11\",\n    \"pull-defer\": \"~0.2.3\",\n    \"pull-file\": \"^1.1.0\",\n    \"pull-mplex\": \"~0.1.1\",\n    \"pull-ndjson\": \"~0.1.1\",\n    \"pull-pushable\": \"^2.2.0\",\n    \"pull-sort\": \"^1.0.1\",\n    \"pull-stream\": \"^3.6.9\",\n    \"pull-stream-to-async-iterator\": \"^1.0.1\",\n    \"pull-stream-to-stream\": \"^1.3.4\",\n    \"pull-traverse\": \"^1.0.3\",\n    \"readable-stream\": \"^3.4.0\",\n    \"receptacle\": \"^1.3.2\",\n    \"semver\": \"^6.1.1\",\n    \"stream-to-pull-stream\": \"^1.7.3\",\n    \"superstruct\": \"~0.6.0\",\n    \"tar-stream\": \"^2.0.0\",\n    \"temp\": \"~0.9.0\",\n    \"update-notifier\": \"^3.0.0\",\n    \"uri-to-multiaddr\": \"^3.0.1\",\n    \"varint\": \"^5.0.0\",\n    \"yargs\": \"^13.2.4\",\n    \"yargs-promise\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"aegir\": \"^19.0.3\",\n    \"base64url\": \"^3.0.1\",\n    \"chai\": \"^4.2.0\",\n    \"delay\": \"^4.1.0\",\n    \"detect-node\": \"^2.0.4\",\n    \"dir-compare\": \"^1.4.0\",\n    \"dirty-chai\": \"^2.0.1\",\n    \"execa\": \"^1.0.0\",\n    \"form-data\": \"^2.3.3\",\n    \"hat\": \"0.0.3\",\n    \"interface-ipfs-core\": \"~0.104.0\",\n    \"ipfsd-ctl\": \"~0.42.0\",\n    \"libp2p-websocket-star\": \"~0.10.2\",\n    \"ncp\": \"^2.0.0\",\n    \"qs\": \"^6.5.2\",\n    \"rimraf\": \"^2.6.2\",\n    \"sinon\": \"^7.3.1\",\n    \"stream-to-promise\": \"^2.2.0\"\n  },\n  \"optionalDependencies\": {\n    \"prom-client\": \"^11.1.3\",\n    \"prometheus-gc-stats\": \"~0.6.0\"\n  },\n  \"engines\": {\n    \"node\": \">=10.0.0\",\n    \"npm\": \">=6.0.0\"\n  },\n  \"contributors\": [\n    \"0xflotus <0xflotus@gmail.com>\",\n    \"A_A <21040751+Otto-AA@users.noreply.github.com>\",\n    \"Alan Shaw <alan.shaw@protocol.ai>\",\n    \"Alan Shaw <alan@tableflip.io>\",\n    \"Alex North <alex@alexnorth.me>\",\n    \"Alex Potsides <alex@achingbrain.net>\",\n    \"Andrew Nesbitt <andrewnez@gmail.com>\",\n    \"Andrew de Andrade <andrew@deandrade.com.br>\",\n    \"André Cruz <andremiguelcruz@msn.com>\",\n    \"Arkadiy Kukarkin <parkan@users.noreply.github.com>\",\n    \"Arpit Agarwal <93arpit@gmail.com>\",\n    \"Arpit Agarwal <atvanguard@users.noreply.github.com>\",\n    \"Bernard Mordan <bernard@tableflip.io>\",\n    \"Brian Vander Schaaf <bvs330@gmail.com>\",\n    \"Bruno Zell <bruno.zzell@gmail.com>\",\n    \"CHEVALAY JOSSELIN <josselin54.chevalay@gmail.com>\",\n    \"Caio Gondim <me@caiogondim.com>\",\n    \"Chance Hudson <jchancehud@gmail.com>\",\n    \"Chirag Shinde <chirag-shinde@users.noreply.github.com>\",\n    \"Christian Couder <chriscool@tuxfamily.org>\",\n    \"Dafeng <dfguo.joe@gmail.com>\",\n    \"Dan Ordille <dordille@gmail.com>\",\n    \"Daniel J. O'Quinn <danieljoquinn@gmail.com>\",\n    \"Daniela Borges Matos de Carvalho <alunassertiva@gmail.com>\",\n    \"David Dias <daviddias.p@gmail.com>\",\n    \"David Gilbertson <gilbertson.david@gmail.com>\",\n    \"David da Silva <dasilvacontin@gmail.com>\",\n    \"Diogo Silva <fsdiogo@gmail.com>\",\n    \"Dmitriy Ryajov <dryajov@gmail.com>\",\n    \"Dzmitry Das <dbachko@gmail.com>\",\n    \"Enrico Marino <enrico.marino@email.com>\",\n    \"Faheel Ahmad <faheel@live.in>\",\n    \"Felix Yan <felixonmars@archlinux.org>\",\n    \"Francisco Baio Dias <xicombd@gmail.com>\",\n    \"Francisco Baio Dias <francisco@typeform.com>\",\n    \"Friedel Ziegelmayer <dignifiedquire@gmail.com>\",\n    \"Gar <gar+gh@danger.computer>\",\n    \"Georgios Rassias <georassias@gmail.com>\",\n    \"Gorka Ludlow <gorka@aquigorka.com>\",\n    \"Grant Herman <grantlouisherman041@gmail.com>\",\n    \"Greenkeeper <support@greenkeeper.io>\",\n    \"Haad <haadcode@users.noreply.github.com>\",\n    \"Haoliang Yu <haoliangyu@users.noreply.github.com>\",\n    \"Harsh Vakharia <harshjv@users.noreply.github.com>\",\n    \"Henrique Dias <hacdias@gmail.com>\",\n    \"Henry Rodrick <moshisushi@gmail.com>\",\n    \"Heo Sangmin <heo@mapiacompany.com>\",\n    \"Hugo Dias <mail@hugodias.me>\",\n    \"Hugo Dias <hugomrdias@gmail.com>\",\n    \"Irakli Gozalishvili <contact@gozala.io>\",\n    \"Jacob Heun <jacobheun@gmail.com>\",\n    \"Jacob Heun <jake@andyet.net>\",\n    \"Jade Meskill <jade.meskill@gmail.com>\",\n    \"Johannes Wikner <johannes.wikner@gmail.com>\",\n    \"Jon Schlinkert <dev@sellside.com>\",\n    \"Jonathan <jkrone@vt.edu>\",\n    \"Jonybang <Jonybange@gmail.com>\",\n    \"João Antunes <j.goncalo.antunes@gmail.com>\",\n    \"João Santos <joaosantos15@users.noreply.github.com>\",\n    \"Kevin Wang <kevin@fossa.io>\",\n    \"Lars Gierth <larsg@systemli.org>\",\n    \"Lukas Drgon <lukas.drgon@gmail.com>\",\n    \"Maciej Krüger <mkg20001@gmail.com>\",\n    \"Marcin Rataj <lidel@lidel.org>\",\n    \"Marius Darila <marius.darila@gmail.com>\",\n    \"Mat Kelly <machawk1@gmail.com>\",\n    \"Michelle Lee <michelle@protocol.ai>\",\n    \"Mikeal Rogers <mikeal.rogers@gmail.com>\",\n    \"Mithgol <getgit@mithgol.ru>\",\n    \"Molly <momack2@users.noreply.github.com>\",\n    \"Mounish Sai <pvsmounish@gmail.com>\",\n    \"My9Bot <34904312+My9Bot@users.noreply.github.com>\",\n    \"Nitin Patel <31539366+niinpatel@users.noreply.github.com>\",\n    \"Nuno Nogueira <nunofmn@gmail.com>\",\n    \"Oli Evans <oli@tableflip.io>\",\n    \"Oskar Nyberg <oskar@oskarnyberg.com>\",\n    \"Pascal Precht <pascal.precht@googlemail.com>\",\n    \"Pau Ramon Revilla <masylum@gmail.com>\",\n    \"Paulo Rodrigues <me@paulogr.com>\",\n    \"Pedro Teixeira <i@pgte.me>\",\n    \"Portia Burton <plburton@gmail.com>\",\n    \"Prabhakar Poudel <yuvrajzohan@gmail.com>\",\n    \"Raoul Millais <raoul@raoulmillais.com>\",\n    \"RasmusErik Voel Jensen <github@solsort.com>\",\n    \"Richard Littauer <richard.littauer@gmail.com>\",\n    \"Richard Schneider <makaretu@gmail.com>\",\n    \"Rob Brackett <rob@robbrackett.com>\",\n    \"Rod Keys <rod@zokos.com>\",\n    \"Sangwon Hong <qpakzk@gmail.com>\",\n    \"Sid Harder <sideharder@gmail.com>\",\n    \"SidHarder <softwarenavigator@gmail.com>\",\n    \"Stephen Whitmore <stephen.whitmore@gmail.com>\",\n    \"Stephen Whitmore <noffle@users.noreply.github.com>\",\n    \"Steven Allen <steven@stebalien.com>\",\n    \"Terence Pae <terencepae@gmail.com>\",\n    \"Uroš Jurglič <jurglic@gmail.com>\",\n    \"Vasco Santos <vasco.santos@moxy.studio>\",\n    \"Vasco Santos <vasco.santos@ua.pt>\",\n    \"Volker Mische <volker.mische@gmail.com>\",\n    \"Xiao Liang <yxliang01@users.noreply.github.com>\",\n    \"Yahya <ya7yaz@gmail.com>\",\n    \"Yole <yole@ultiledger.io>\",\n    \"bitspill <bitspill+github@bitspill.net>\",\n    \"datafatmunger <jbg@peerparty.org>\",\n    \"dirkmc <dirkmdev@gmail.com>\",\n    \"dirkmc <dirk@mccormick.cx>\",\n    \"greenkeeper[bot] <greenkeeper[bot]@users.noreply.github.com>\",\n    \"haad <haad@headbanggames.com>\",\n    \"jbenet <juan@benet.ai>\",\n    \"jonahweissman <19804455+jonahweissman@users.noreply.github.com>\",\n    \"kevingzhang <kevin.zhang.canada@gmail.com>\",\n    \"kumavis <kumavis@users.noreply.github.com>\",\n    \"nginnever <ginneversource@gmail.com>\",\n    \"npmcdn-to-unpkg-bot <npmcdn-to-unpkg-bot@users.noreply.github.com>\",\n    \"robbsolter <35879806+robbsolter@users.noreply.github.com>\",\n    \"seungwon-kang <ksw3894@gmail.com>\",\n    \"tcme <hi@this-connect.me>\",\n    \"victorbjelkholm <victorbjelkholm@gmail.com>\",\n    \"Łukasz Magiera <magik6k@users.noreply.github.com>\",\n    \"Максим Ильин <negamaxi@gmail.com>\"\n  ]\n}\n","'use strict'\n\nmodule.exports = () => ({\n  Addresses: {\n    Swarm: [\n    ],\n    API: '',\n    Gateway: ''\n  },\n  Discovery: {\n    MDNS: {\n      Enabled: false,\n      Interval: 10\n    },\n    webRTCStar: {\n      Enabled: true\n    }\n  },\n  Bootstrap: [\n    '/dns4/ams-1.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLer265NRgSp2LA3dPaeykiS1J6DifTC88f5uVQKNAd',\n    '/dns4/lon-1.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLMeWqB7YGVLJN3pNLQpmmEk35v6wYtsMGLzSr5QBU3',\n    '/dns4/sfo-3.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLPppuBtQSGwKDZT2M73ULpjvfd3aZ6ha4oFGL1KrGM',\n    '/dns4/sgp-1.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLSafTMBsPKadTEgaXctDQVcqN88CNLHXMkTNwMKPnu',\n    '/dns4/nyc-1.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLueR4xBeUbY9WZ9xGUUxunbKWcrNFTDAadQJmocnWm',\n    '/dns4/nyc-2.bootstrap.libp2p.io/tcp/443/wss/ipfs/QmSoLV4Bbm51jM9C4gDYZQ9Cy3U6aXMJDAbzgu2fzaDs64',\n    '/dns4/node0.preload.ipfs.io/tcp/443/wss/ipfs/QmZMxNdpMkewiVZLMRxaNxUeZpDUb34pWjZ1kZvsd16Zic',\n    '/dns4/node1.preload.ipfs.io/tcp/443/wss/ipfs/Qmbut9Ywz9YEDrz8ySBSgWyJk41Uvm2QJPhwDJzJyGFsD6'\n  ],\n  Swarm: {\n    ConnMgr: {\n      LowWater: 200,\n      HighWater: 500\n    }\n  }\n})\n","\nvar Stream = require('stream')\n\nmodule.exports = duplex\n\n\nmodule.exports.source = function (source) {\n  return duplex(null, source)\n}\n\nmodule.exports.sink = function (sink) {\n  return duplex(sink, null)\n}\n\nvar next = (\n  'undefined' === typeof setImmediate\n  ? process.nextTick\n  : setImmediate\n)\n\nfunction duplex (reader, read) {\n  if(reader && 'object' === typeof reader) {\n    read = reader.source\n    reader = reader.sink\n  }\n\n  var cbs = [], input = [], ended, needDrain\n  var s = new Stream()\n  s.writable = s.readable = true\n  s.write = function (data) {\n    if(cbs.length)\n      cbs.shift()(null, data)\n    else\n      input.push(data)\n\n    if (!cbs.length) {\n      needDrain = true\n    }\n    return !!cbs.length\n  }\n\n  s.end = function () {\n    if(read) {\n      if (input.length)\n        drain()\n      else\n        read(ended = true, cbs.length ? cbs.shift() : function () {})\n    } else if(cbs.length) {\n      cbs.shift()(true)\n    }\n  }\n\n  s.source = function (end, cb) {\n    if(input.length) {\n      cb(null, input.shift())\n      if(!input.length)\n        s.emit('drain')\n    }\n    else {\n      if(ended = ended || end)\n        cb(ended)\n      else\n        cbs.push(cb)\n\n      if (needDrain) {\n        needDrain = false\n        s.emit('drain')\n      }\n    }\n  }\n\n  var n\n  if(reader) n = reader(s.source)\n  if(n && !read) read = n\n\n  var output = [], _cbs = []\n  var _ended = false, waiting = false, busy = false\n\n  s.sink = function (_read) {\n    read = _read\n    next(drain)\n  }\n\n  if(read) {\n    s.sink(read)\n\n    var pipe = s.pipe.bind(s)\n    s.pipe = function (dest, opts) {\n      var res = pipe(dest, opts)\n\n      if(s.paused) s.resume()\n\n      return res\n    }\n  }\n\n  function drain () {\n    waiting = false\n    if(!read || busy) return\n    while(output.length && !s.paused) {\n      s.emit('data', output.shift())\n    }\n    if(s.paused) return\n    if(_ended)\n      return s.emit('end')\n\n    busy = true\n    read(null, function next (end, data) {\n      busy = false\n      if(s.paused) {\n        if(end === true) _ended = end\n        else if(end) s.emit('error', end)\n        else output.push(data)\n        waiting = true\n      } else {\n        if(end && (ended = end) !== true)\n          s.emit('error', end)\n        else if(ended = ended || end) s.emit('end')\n        else {\n          s.emit('data', data)\n          busy = true\n          read(null, next)\n        }\n      }\n    })\n  }\n\n  s.pause = function () {\n    s.paused = true\n    return s\n  }\n\n  s.resume = function () {\n    s.paused = false\n    drain()\n    return s\n  }\n\n  s.destroy = function () {\n    if(!ended && read)\n      read(ended = true, function () {})\n    ended = true\n    if(cbs.length)\n      cbs.shift()(true)\n\n    s.emit('close')\n  }\n\n  return s\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst map = require('async/map')\nconst isIpfs = require('is-ipfs')\nconst CID = require('cids')\n\nconst ERR_BAD_PATH = 'ERR_BAD_PATH'\nexports.OFFLINE_ERROR = 'This command must be run in online mode. Try running \\'ipfs daemon\\' first.'\n\n/**\n * Break an ipfs-path down into it's hash and an array of links.\n *\n * examples:\n *  b58Hash -> { hash: 'b58Hash', links: [] }\n *  b58Hash/mercury/venus -> { hash: 'b58Hash', links: ['mercury', 'venus']}\n *  /ipfs/b58Hash/links/by/name -> { hash: 'b58Hash', links: ['links', 'by', 'name'] }\n *\n * @param  {String} ipfsPath An ipfs-path\n * @return {Object}            { hash: base58 string, links: [string], ?err: Error }\n * @throws on an invalid @param ipfsPath\n */\nfunction parseIpfsPath (ipfsPath) {\n  const invalidPathErr = new Error('invalid ipfs ref path')\n  ipfsPath = ipfsPath.replace(/^\\/ipfs\\//, '')\n  const matched = ipfsPath.match(/([^/]+(?:\\/[^/]+)*)\\/?$/)\n  if (!matched) {\n    throw invalidPathErr\n  }\n\n  const [hash, ...links] = matched[1].split('/')\n\n  // check that a CID can be constructed with the hash\n  if (isIpfs.cid(hash)) {\n    return { hash, links }\n  } else {\n    throw invalidPathErr\n  }\n}\n\n/**\n * Returns a well-formed ipfs Path.\n * The returned path will always be prefixed with /ipfs/ or /ipns/.\n * If the received string is not a valid ipfs path, an error will be returned\n * examples:\n *  b58Hash -> { hash: 'b58Hash', links: [] }\n *  b58Hash/mercury/venus -> { hash: 'b58Hash', links: ['mercury', 'venus']}\n *  /ipfs/b58Hash/links/by/name -> { hash: 'b58Hash', links: ['links', 'by', 'name'] }\n *\n * @param  {String} pathStr An ipfs-path, or ipns-path or a cid\n * @return {String} ipfs-path or ipns-path\n * @throws on an invalid @param ipfsPath\n */\nconst normalizePath = (pathStr) => {\n  if (isIpfs.cid(pathStr)) {\n    return `/ipfs/${pathStr}`\n  } else if (isIpfs.path(pathStr)) {\n    return pathStr\n  } else {\n    throw Object.assign(new Error(`invalid ${pathStr} path`), { code: ERR_BAD_PATH })\n  }\n}\n\n/**\n * Resolve various styles of an ipfs-path to the hash of the target node.\n * Follows links in the path.\n *\n * Accepts formats:\n *  - <base58 string>\n *  - <base58 string>/link/to/venus\n *  - /ipfs/<base58 string>/link/to/pluto\n *  - multihash Buffer\n *  - Arrays of the above\n *\n * @param  {IPFS}               objectAPI The IPFS object api\n * @param  {Described above}    ipfsPaths A single or collection of ipfs-paths\n * @param  {Function<err, res>} callback res is Array<Buffer(hash)>\n *                              if no callback is passed, returns a Promise\n * @return {Promise|void}\n */\nconst resolvePath = promisify(function (objectAPI, ipfsPaths, callback) {\n  if (!Array.isArray(ipfsPaths)) {\n    ipfsPaths = [ipfsPaths]\n  }\n\n  map(ipfsPaths, (path, cb) => {\n    if (typeof path !== 'string') {\n      let cid\n\n      try {\n        cid = new CID(path)\n      } catch (err) {\n        return cb(err)\n      }\n\n      return cb(null, cid.buffer)\n    }\n\n    let parsedPath\n    try {\n      parsedPath = exports.parseIpfsPath(path)\n    } catch (err) {\n      return cb(err)\n    }\n\n    const rootHash = new CID(parsedPath.hash)\n    const rootLinks = parsedPath.links\n\n    if (!rootLinks.length) {\n      return cb(null, rootHash.buffer)\n    }\n\n    objectAPI.get(rootHash, follow.bind(null, rootHash, rootLinks))\n\n    // recursively follow named links to the target node\n    function follow (cid, links, err, obj) {\n      if (err) {\n        return cb(err)\n      }\n\n      if (!links.length) {\n        // done tracing, obj is the target node\n        return cb(null, cid.buffer)\n      }\n\n      const linkName = links[0]\n      const nextObj = obj.Links.find(link => link.Name === linkName)\n\n      if (!nextObj) {\n        return cb(new Error(`no link named \"${linkName}\" under ${cid}`))\n      }\n\n      objectAPI.get(nextObj.Hash, follow.bind(null, nextObj.Hash, links.slice(1)))\n    }\n  }, callback)\n})\n\nexports.normalizePath = normalizePath\nexports.parseIpfsPath = parseIpfsPath\nexports.resolvePath = resolvePath\n","module.exports = pullPushable\n\nfunction pullPushable (separated, onClose) {\n  if (typeof separated === 'function') {\n    onClose = separated\n    separated = false\n  }\n\n  // create a buffer for data\n  // that have been pushed\n  // but not yet pulled.\n  var buffer = []\n\n  // a pushable is a source stream\n  // (abort, cb) => cb(end, data)\n  //\n  // when pushable is pulled,\n  // keep references to abort and cb\n  // so we can call back after\n  // .end(end) or .push(data)\n  var abort, cb\n  function read (_abort, _cb) {\n    if (_abort) {\n      abort = _abort\n      // if there is already a cb waiting, abort it.\n      if (cb) callback(abort)\n    }\n    cb = _cb\n    drain()\n  }\n\n  var ended\n  function end (end) {\n    ended = ended || end || true\n    // attempt to drain\n    drain()\n  }\n\n  function push (data) {\n    if (ended) return\n    // if sink already waiting,\n    // we can call back directly.\n    if (cb) {\n      callback(abort, data)\n      return\n    }\n    // otherwise buffer data\n    buffer.push(data)\n  }\n\n  // Return functions separated from source { push, end, source }\n  if (separated) {\n    return { push: push, end: end, source: read, buffer: buffer }\n  }\n\n  // Return normal\n  read.push = push\n  read.end = end\n  read.buffer = buffer\n  return read\n\n  // `drain` calls back to (if any) waiting\n  // sink with abort, end, or next data.\n  function drain () {\n    if (!cb) return\n\n    if (abort) callback(abort)\n    else if (!buffer.length && ended) callback(ended)\n    else if (buffer.length) callback(null, buffer.shift())\n  }\n\n  // `callback` calls back to waiting sink,\n  // and removes references to sink cb.\n  function callback (err, val) {\n    var _cb = cb\n    // if error and pushable passed onClose, call it\n    // the first time this stream ends or errors.\n    if (err && onClose) {\n      var c = onClose\n      onClose = null\n      c(err === true ? null : err)\n    }\n    cb = null\n    _cb(err, val)\n  }\n}\n","'use strict'\n\nvar sources  = require('./sources')\nvar sinks    = require('./sinks')\nvar throughs = require('./throughs')\n\nexports = module.exports = require('./pull')\n\nexports.pull = exports\n\nfor(var k in sources)\n  exports[k] = sources[k]\n\nfor(var k in throughs)\n  exports[k] = throughs[k]\n\nfor(var k in sinks)\n  exports[k] = sinks[k]\n\n","'use strict';\n\nfunction createError(msg, code, props) {\n    var err = msg instanceof Error ? msg : new Error(msg);\n    var key;\n\n    if (typeof code === 'object') {\n        props = code;\n    } else if (code != null) {\n        err.code = code;\n    }\n\n    if (props) {\n        for (key in props) {\n            err[key] = props[key];\n        }\n    }\n\n    return err;\n}\n\nmodule.exports = createError;\n","'use strict'\n\nconst CID = require('cids')\n\n/**\n* Stringify a CID encoded in the requested base, upgrading to v1 if necessary.\n*\n* Setting upgrade to false will disable automatic CID upgrading from v0 to v1\n* which is necessary if the multibase is something other than base58btc. Note\n* that it will also not apply the encoding (since v0 CIDs can only be encoded\n* as base58btc).\n*\n* @param {CID|Buffer|String} cid The CID to encode\n* @param {Object} [options] Optional options\n* @param {String} [options.base] Name of multibase codec to encode the CID with\n* @param {Boolean} [options.upgrade] Automatically upgrade v0 CIDs to v1 when\n* necessary. Default: true.\n* @returns {String}\n*/\nexports.cidToString = (cid, options) => {\n  options = options || {}\n  options.upgrade = options.upgrade !== false\n\n  if (!CID.isCID(cid)) {\n    cid = new CID(cid)\n  }\n\n  if (cid.version === 0 && options.base && options.base !== 'base58btc') {\n    if (!options.upgrade) return cid.toString()\n    cid = cid.toV1()\n  }\n\n  return cid.toBaseEncodedString(options.base)\n}\n","'use strict'\n\nfunction fail () {\n  throw new Error('Key management requires \\'--pass ...\\' option')\n}\n\nclass NoKeychain {\n  static get options () { fail() }\n  static generateOptions () { fail() }\n\n  createKey () { fail() }\n  listKeys () { fail() }\n  findKeyById () { fail() }\n  findKeyByName () { fail() }\n  renameKey () { fail() }\n  removeKey () { fail() }\n  exportKey () { fail() }\n  importKey () { fail() }\n  importPeer () { fail() }\n\n  get cms () { fail() }\n}\n\nmodule.exports = NoKeychain\n","'use strict'\n\nmodule.exports = require('./keychain')\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) -- > 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","'use strict'\n\nconst promisify = require('promisify-es6')\n\nconst whole = /^((\\d+(\\.\\d+)*)(ns|ms|us|µs|m|s|h))+$/\nconst pieces = /((\\d+(\\.\\d+)*)(ns|ms|us|µs|m|s|h))/g\nconst measure = /(ns|ms|us|µs|m|s|h)/g\n\nconst multipliers = {\n  ns: 1e-6,\n  us: 0.001,\n  µs: 0.001,\n  ms: 1,\n  s: 1000,\n  m: 60000,\n  h: 3.6e+6\n}\n\nfunction analyse (time) {\n  let unit = time.match(measure)[0]\n  time = time.substring(0, time.length - unit.length)\n\n  return parseFloat(time) * multipliers[unit]\n}\n\nmodule.exports = promisify(function (time, callback) {\n  if (typeof time !== 'string') {\n    return callback(new Error('the first argument must be a string'))\n  }\n\n  if (!whole.test(time)) {\n    return callback(new Error('invalid time'))\n  }\n\n  callback(null, time.match(pieces).reduce((sum, currentVal) => {\n    return sum + analyse(currentVal)\n  }, 0))\n})\n","'use strict'\n\nconst protons = require('protons')\nconst pb = protons(require('./unixfs.proto'))\n// encode/decode\nconst unixfsData = pb.Data\n// const unixfsMetadata = pb.MetaData // encode/decode\n\nconst types = [\n  'raw',\n  'directory',\n  'file',\n  'metadata',\n  'symlink',\n  'hamt-sharded-directory'\n]\n\nconst dirTypes = [\n  'directory',\n  'hamt-sharded-directory'\n]\n\nfunction Data (type, data) {\n  if (!(this instanceof Data)) {\n    return new Data(type, data)\n  }\n  if (types.indexOf(type) === -1) {\n    throw new Error('Type: ' + type + ' is not valid')\n  }\n\n  this.type = type\n  this.data = data\n  this.blockSizes = []\n\n  this.addBlockSize = (size) => {\n    this.blockSizes.push(size)\n  }\n\n  this.removeBlockSize = (index) => {\n    this.blockSizes.splice(index, 1)\n  }\n\n  // data.length + blockSizes\n  this.fileSize = () => {\n    if (dirTypes.indexOf(this.type) >= 0) {\n      // dirs don't have file size\n      return undefined\n    }\n\n    let sum = 0\n    this.blockSizes.forEach((size) => {\n      sum += size\n    })\n    if (data) {\n      sum += data.length\n    }\n    return sum\n  }\n\n  // encode to protobuf\n  this.marshal = () => {\n    let type\n\n    switch (this.type) {\n      case 'raw': type = unixfsData.DataType.Raw; break\n      case 'directory': type = unixfsData.DataType.Directory; break\n      case 'file': type = unixfsData.DataType.File; break\n      case 'metadata': type = unixfsData.DataType.Metadata; break\n      case 'symlink': type = unixfsData.DataType.Symlink; break\n      case 'hamt-sharded-directory': type = unixfsData.DataType.HAMTShard; break\n      default:\n        throw new Error(`Unkown type: \"${this.type}\"`)\n    }\n    let fileSize = this.fileSize()\n\n    let data = this.data\n\n    if (!this.data || !this.data.length) {\n      data = undefined\n    }\n\n    let blockSizes = this.blockSizes\n\n    if (!this.blockSizes || !this.blockSizes.length) {\n      blockSizes = undefined\n    }\n\n    return unixfsData.encode({\n      Type: type,\n      Data: data,\n      filesize: fileSize,\n      blocksizes: blockSizes,\n      hashType: this.hashType,\n      fanout: this.fanout\n    })\n  }\n}\n\n// decode from protobuf https://github.com/ipfs/go-ipfs/blob/master/unixfs/format.go#L24\nData.unmarshal = (marsheled) => {\n  const decoded = unixfsData.decode(marsheled)\n  if (!decoded.Data) {\n    decoded.Data = undefined\n  }\n  const obj = new Data(types[decoded.Type], decoded.Data)\n  obj.blockSizes = decoded.blocksizes\n  return obj\n}\n\nexports = module.exports = Data\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _setImmediate = require('./internal/setImmediate');\n\n/**\n * Calls `callback` on a later loop around the event loop. In Node.js this just\n * calls `process.nextTick`.  In the browser it will use `setImmediate` if\n * available, otherwise `setTimeout(callback, 0)`, which means other higher\n * priority events may precede the execution of `callback`.\n *\n * This is used internally for browser-compatibility purposes.\n *\n * @name nextTick\n * @static\n * @memberOf module:Utils\n * @method\n * @see [async.setImmediate]{@link module:Utils.setImmediate}\n * @category Util\n * @param {Function} callback - The function to call on a later loop around\n * the event loop. Invoked with (args...).\n * @param {...*} args... - any number of additional arguments to pass to the\n * callback on the next tick.\n * @example\n *\n * var call_order = [];\n * async.nextTick(function() {\n *     call_order.push('two');\n *     // call_order now equals ['one','two']\n * });\n * call_order.push('one');\n *\n * async.setImmediate(function (a, b, c) {\n *     // a, b, and c equal 1, 2, and 3\n * }, 1, 2, 3);\n */\nvar _defer;\n\nif (_setImmediate.hasNextTick) {\n    _defer = process.nextTick;\n} else if (_setImmediate.hasSetImmediate) {\n    _defer = setImmediate;\n} else {\n    _defer = _setImmediate.fallback;\n}\n\nexports.default = (0, _setImmediate.wrap)(_defer);\nmodule.exports = exports['default'];","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createTester = require('./internal/createTester');\n\nvar _createTester2 = _interopRequireDefault(_createTester);\n\nvar _doParallel = require('./internal/doParallel');\n\nvar _doParallel2 = _interopRequireDefault(_doParallel);\n\nvar _notId = require('./internal/notId');\n\nvar _notId2 = _interopRequireDefault(_notId);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Returns `true` if every element in `coll` satisfies an async test. If any\n * iteratee call returns `false`, the main `callback` is immediately called.\n *\n * @name every\n * @static\n * @memberOf module:Collections\n * @method\n * @alias all\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result will be either `true` or `false`\n * depending on the values of the async tests. Invoked with (err, result).\n * @example\n *\n * async.every(['file1','file2','file3'], function(filePath, callback) {\n *     fs.access(filePath, function(err) {\n *         callback(null, !err)\n *     });\n * }, function(err, result) {\n *     // if result is true then every file exists\n * });\n */\nexports.default = (0, _doParallel2.default)((0, _createTester2.default)(_notId2.default, _notId2.default));\nmodule.exports = exports['default'];","module.exports = flatten;\n\n/*\n  flatten([[1, [2, 3]], [[4, 5], 6, 7, [8, 9]]]);\n  // [1, 2, 3, 4, 5, 6, 7, 8, 9]\n*/\n\nfunction flatten(arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error('expected an array');\n  }\n  var result = [];\n  var len = arr.length;\n  for (var i = 0; i < len; i++) {\n    var elem = arr[i];\n    if (Array.isArray(elem)) {\n      result.push.apply(result, flatten(elem));\n    } else {\n      result.push(elem);\n    }\n  }\n  return result;\n}\n","const getIterator = require('get-iterator')\nconst toIterable = require('pull-stream-to-async-iterator')\n\nfunction toPull (source) {\n  source = getIterator(source)\n\n  return async (end, cb) => {\n    if (end) {\n      if (source.return) {\n        try {\n          await source.return()\n        } catch (err) {\n          return cb(err)\n        }\n      }\n      return cb(end)\n    }\n\n    let next\n    try {\n      next = await source.next()\n    } catch (err) {\n      return cb(err)\n    }\n\n    if (next.done) return cb(true) // eslint-disable-line\n    cb(null, next.value)\n  }\n}\n\ntoPull.source = toPull\n\ntoPull.transform = toPull.through = source => read => toPull(source(toIterable(read)))\n\ntoPull.duplex = duplex => ({\n  sink: toPull.sink(duplex.sink),\n  source: toPull(duplex.source)\n})\n\ntoPull.sink = sink => {\n  return read => {\n    sink({\n      [Symbol.asyncIterator] () {\n        return this\n      },\n\n      next: () => new Promise((resolve, reject) => {\n        read(null, (end, value) => {\n          if (end === true) return resolve({ done: true, value })\n          if (end) return reject(end)\n          resolve({ done: false, value })\n        })\n      }),\n\n      return: () => new Promise((resolve, reject) => {\n        read(true, (end, value) => {\n          if (end && end !== true) return reject(end)\n          resolve({ done: true, value })\n        })\n      }),\n\n      throw: err => new Promise((resolve, reject) => {\n        read(err, (end, value) => {\n          if (end && end !== true) return reject(end)\n          resolve({ done: true, value })\n        })\n      })\n    })\n  }\n}\n\nmodule.exports = toPull\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _mapLimit = require('./mapLimit');\n\nvar _mapLimit2 = _interopRequireDefault(_mapLimit);\n\nvar _doLimit = require('./internal/doLimit');\n\nvar _doLimit2 = _interopRequireDefault(_doLimit);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an array of the\n * transformed items from the `coll`. Invoked with (err, results).\n */\nexports.default = (0, _doLimit2.default)(_mapLimit2.default, 1);\nmodule.exports = exports['default'];","/* @flow */\n'use strict'\n\nconst Key = require('./key')\nconst MemoryDatastore = require('./memory')\nconst utils = require('./utils')\nconst Errors = require('./errors')\n\nexports.Key = Key\nexports.MemoryDatastore = MemoryDatastore\nexports.utils = utils\nexports.Errors = Errors\n\n/* ::\n// -- Basics\n\nexport type Callback<Value> = (err: ?Error, ?Value) => void\n\n// eslint-disable-next-line\nexport interface Datastore<Value> {\n  // eslint-disable-next-line\n  put(Key, Value, Callback<void>): void;\n  // eslint-disable-next-line\n  get(Key, Callback<Value>): void;\n  has(Key, Callback<bool>): void;\n  delete(Key, Callback<void>): void;\n  // eslint-disable-next-line\n  query(Query<Value>): QueryResult<Value>;\n\n  // eslint-disable-next-line\n  batch(): Batch<Value>;\n  close(Callback<void>): void;\n  open(Callback<void>): void;\n}\n\n// -- Batch\nexport type Batch<Value> = {\n  put(Key, Value): void,\n  delete(Key): void,\n  commit(Callback<void>): void\n}\n\n// -- Query\n\nexport type Query<Value> = {\n  prefix?: string,\n  filters?: Array<Filter<Value>>,\n  orders?: Array<Order<Value>>,\n  limit?: number,\n  offset?: number,\n  keysOnly?: bool\n}\n\nexport type PullEnd = bool | Error\nexport type PullSource<Val> = (end: ?PullEnd, (end: ?PullEnd, Val) => void) => void\n\nexport type QueryResult<Value> = PullSource<QueryEntry<Value>>\n\nexport type QueryEntry<Value> = {\n  key: Key,\n  value?: Value\n}\n\nexport type Filter<Value> = (QueryEntry<Value>, Callback<bool>) => void\n\nexport type Order<Value> = (QueryResult<Value>, Callback<QueryResult<Value>>) => void\n\n*/\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _identity = require('lodash/identity');\n\nvar _identity2 = _interopRequireDefault(_identity);\n\nvar _createTester = require('./internal/createTester');\n\nvar _createTester2 = _interopRequireDefault(_createTester);\n\nvar _doParallelLimit = require('./internal/doParallelLimit');\n\nvar _doParallelLimit2 = _interopRequireDefault(_doParallelLimit);\n\nvar _findGetResult = require('./internal/findGetResult');\n\nvar _findGetResult2 = _interopRequireDefault(_findGetResult);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n * @static\n * @memberOf module:Collections\n * @method\n * @see [async.detect]{@link module:Collections.detect}\n * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called as soon as any\n * iteratee returns `true`, or after all the `iteratee` functions have finished.\n * Result will be the first item in the array that passes the truth test\n * (iteratee) or the value `undefined` if none passed. Invoked with\n * (err, result).\n */\nexports.default = (0, _doParallelLimit2.default)((0, _createTester2.default)(_identity2.default, _findGetResult2.default));\nmodule.exports = exports['default'];","'use strict'\n\nconst multihashes = require('multihashes')\nconst CID = require('cids')\nconst protobuf = require('protons')\nconst fnv1a = require('fnv1a')\nconst varint = require('varint')\nconst { DAGNode, DAGLink } = require('ipld-dag-pb')\nconst multicodec = require('multicodec')\nconst someSeries = require('async/someSeries')\nconst eachOfSeries = require('async/eachOfSeries')\n\nconst pbSchema = require('./pin.proto')\n\nconst emptyKeyHash = 'QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n'\nconst emptyKey = multihashes.fromB58String(emptyKeyHash)\nconst defaultFanout = 256\nconst maxItems = 8192\nconst pb = protobuf(pbSchema)\n\nfunction toB58String (hash) {\n  return new CID(hash).toBaseEncodedString()\n}\n\nfunction readHeader (rootNode) {\n  // rootNode.data should be a buffer of the format:\n  // < varint(headerLength) | header | itemData... >\n  const rootData = rootNode.Data\n  const hdrLength = varint.decode(rootData)\n  const vBytes = varint.decode.bytes\n  if (vBytes <= 0) {\n    throw new Error('Invalid Set header length')\n  }\n  if (vBytes + hdrLength > rootData.length) {\n    throw new Error('Impossibly large set header length')\n  }\n  const hdrSlice = rootData.slice(vBytes, hdrLength + vBytes)\n  const header = pb.Set.decode(hdrSlice)\n  if (header.version !== 1) {\n    throw new Error(`Unsupported Set version: ${header.version}`)\n  }\n  if (header.fanout > rootNode.Links.length) {\n    throw new Error('Impossibly large fanout')\n  }\n  return {\n    header: header,\n    data: rootData.slice(hdrLength + vBytes)\n  }\n}\n\nfunction hash (seed, key) {\n  const buf = Buffer.alloc(4)\n  buf.writeUInt32LE(seed, 0)\n  const data = Buffer.concat([\n    buf, Buffer.from(toB58String(key))\n  ])\n  return fnv1a(data.toString('binary'))\n}\n\nexports = module.exports = function (dag) {\n  const pinSet = {\n    // should this be part of `object` API?\n    hasDescendant: (root, childhash, callback) => {\n      const seen = {}\n\n      if (CID.isCID(childhash) || Buffer.isBuffer(childhash)) {\n        childhash = toB58String(childhash)\n      }\n\n      return searchChildren(root, callback)\n\n      function searchChildren (root, cb) {\n        someSeries(root.Links, (link, done) => {\n          const cid = link.Hash\n          const bs58Link = toB58String(cid)\n\n          if (bs58Link === childhash) {\n            return done(null, true)\n          }\n\n          if (bs58Link in seen) {\n            return done(null, false)\n          }\n\n          seen[bs58Link] = true\n\n          dag.get(cid, '', { preload: false }, (err, res) => {\n            if (err) {\n              return done(err)\n            }\n\n            searchChildren(res.value, done)\n          })\n        }, cb)\n      }\n    },\n\n    storeSet: (keys, callback) => {\n      const pins = keys.map(key => {\n        if (typeof key === 'string' || Buffer.isBuffer(key)) {\n          key = new CID(key)\n        }\n\n        return {\n          key: key,\n          data: null\n        }\n      })\n\n      pinSet.storeItems(pins, (err, rootNode) => {\n        if (err) { return callback(err) }\n\n        dag.put(rootNode, {\n          version: 0,\n          format: multicodec.DAG_PB,\n          hashAlg: multicodec.SHA2_256,\n          preload: false\n        }, (err, cid) => {\n          if (err) { return callback(err, cid) }\n          callback(null, { node: rootNode, cid })\n        })\n      })\n    },\n\n    storeItems: (items, callback) => {\n      return storePins(items, 0, callback)\n\n      function storePins (pins, depth, storePinsCb) {\n        const pbHeader = pb.Set.encode({\n          version: 1,\n          fanout: defaultFanout,\n          seed: depth\n        })\n        const headerBuf = Buffer.concat([\n          Buffer.from(varint.encode(pbHeader.length)), pbHeader\n        ])\n        const fanoutLinks = []\n        for (let i = 0; i < defaultFanout; i++) {\n          fanoutLinks.push(new DAGLink('', 1, emptyKey))\n        }\n\n        if (pins.length <= maxItems) {\n          const nodes = pins\n            .map(item => {\n              return ({\n                link: new DAGLink('', 1, item.key),\n                data: item.data || Buffer.alloc(0)\n              })\n            })\n            // sorting makes any ordering of `pins` produce the same DAGNode\n            .sort((a, b) => Buffer.compare(a.link.Hash.buffer, b.link.Hash.buffer))\n\n          const rootLinks = fanoutLinks.concat(nodes.map(item => item.link))\n          const rootData = Buffer.concat(\n            [headerBuf].concat(nodes.map(item => item.data))\n          )\n\n          let rootNode\n\n          try {\n            rootNode = DAGNode.create(rootData, rootLinks)\n          } catch (err) {\n            return storePinsCb(err)\n          }\n\n          return storePinsCb(null, rootNode)\n        } else {\n          // If the array of pins is > maxItems, we:\n          //  - distribute the pins among `defaultFanout` bins\n          //    - create a DAGNode for each bin\n          //      - add each pin as a DAGLink to that bin\n          //  - create a root DAGNode\n          //    - add each bin as a DAGLink\n          //  - send that root DAGNode via callback\n          // (using go-ipfs' \"wasteful but simple\" approach for consistency)\n          // https://github.com/ipfs/go-ipfs/blob/master/pin/set.go#L57\n\n          const bins = pins.reduce((bins, pin) => {\n            const n = hash(depth, pin.key) % defaultFanout\n            bins[n] = n in bins ? bins[n].concat([pin]) : [pin]\n            return bins\n          }, {})\n\n          eachOfSeries(bins, (bin, idx, eachCb) => {\n            storePins(\n              bin,\n              depth + 1,\n              (err, child) => storeChild(err, child, idx, eachCb)\n            )\n          }, err => {\n            if (err) { return storePinsCb(err) }\n\n            let rootNode\n\n            try {\n              rootNode = DAGNode.create(headerBuf, fanoutLinks)\n            } catch (err) {\n              return storePinsCb(err)\n            }\n\n            return storePinsCb(null, rootNode)\n          })\n        }\n\n        function storeChild (err, child, binIdx, cb) {\n          if (err) { return cb(err) }\n\n          const opts = {\n            version: 0,\n            format: multicodec.DAG_PB,\n            hashAlg: multicodec.SHA2_256,\n            preload: false\n          }\n\n          dag.put(child, opts, (err, cid) => {\n            if (err) { return cb(err) }\n            fanoutLinks[binIdx] = new DAGLink('', child.size, cid)\n            cb(null)\n          })\n        }\n      }\n    },\n\n    loadSet: (rootNode, name, callback) => {\n      const link = rootNode.Links.find(l => l.Name === name)\n      if (!link) {\n        return callback(new Error('No link found with name ' + name))\n      }\n\n      dag.get(link.Hash, '', { preload: false }, (err, res) => {\n        if (err) { return callback(err) }\n        const keys = []\n        const step = link => keys.push(link.Hash.buffer)\n        pinSet.walkItems(res.value, step, err => {\n          if (err) { return callback(err) }\n          return callback(null, keys)\n        })\n      })\n    },\n\n    walkItems: (node, step, callback) => {\n      let pbh\n      try {\n        pbh = readHeader(node)\n      } catch (err) {\n        return callback(err)\n      }\n\n      eachOfSeries(node.Links, (link, idx, eachCb) => {\n        if (idx < pbh.header.fanout) {\n          // the first pbh.header.fanout links are fanout bins\n          // if a fanout bin is not 'empty', dig into and walk its DAGLinks\n          const linkHash = link.Hash.buffer\n\n          if (!emptyKey.equals(linkHash)) {\n            // walk the links of this fanout bin\n            return dag.get(linkHash, '', { preload: false }, (err, res) => {\n              if (err) { return eachCb(err) }\n              pinSet.walkItems(res.value, step, eachCb)\n            })\n          }\n        } else {\n          // otherwise, the link is a pin\n          step(link, idx, pbh.data)\n        }\n\n        eachCb(null)\n      }, callback)\n    }\n  }\n  return pinSet\n}\n","'use strict'\n\nconst isIPFS = require('is-ipfs')\n\nconst debug = require('debug')\nconst log = debug('ipfs:ipns:path')\nlog.error = debug('ipfs:ipns:path:error')\n\n// resolves the given path by parsing out protocol-specific entries\n// (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\nconst resolvePath = (ipfsNode, name, callback) => {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    log(`resolve ipns path ${name}`)\n\n    return ipfsNode._ipns.resolve(name, callback)\n  }\n\n  // ipfs path\n  ipfsNode.dag.get(name.substring('/ipfs/'.length), (err, value) => {\n    if (err) {\n      return callback(err)\n    }\n\n    return callback(null, value)\n  })\n}\n\nmodule.exports = {\n  resolvePath\n}\n","'use strict'\n\nconst debug = require('debug')\nconst errcode = require('err-code')\nconst promisify = require('promisify-es6')\n\nconst IpnsPubsubDatastore = require('../ipns/routing/pubsub-datastore')\n\nconst log = debug('ipfs:name-pubsub')\nlog.error = debug('ipfs:name-pubsub:error')\n\n// Is pubsub enabled\nconst isNamePubsubEnabled = (node) => {\n  try {\n    return Boolean(getPubsubRouting(node))\n  } catch (err) {\n    return false\n  }\n}\n\n// Get pubsub from IPNS routing\nconst getPubsubRouting = (node) => {\n  if (!node._ipns || !node._options.EXPERIMENTAL.ipnsPubsub) {\n    const errMsg = 'IPNS pubsub subsystem is not enabled'\n\n    throw errcode(errMsg, 'ERR_IPNS_PUBSUB_NOT_ENABLED')\n  }\n\n  // Only one store and it is pubsub\n  if (IpnsPubsubDatastore.isIpnsPubsubDatastore(node._ipns.routing)) {\n    return node._ipns.routing\n  }\n\n  // Find in tiered\n  const pubsub = (node._ipns.routing.stores || []).find(s => IpnsPubsubDatastore.isIpnsPubsubDatastore(s))\n\n  if (!pubsub) {\n    const errMsg = 'IPNS pubsub datastore not found'\n\n    throw errcode(errMsg, 'ERR_PUBSUB_DATASTORE_NOT_FOUND')\n  }\n\n  return pubsub\n}\n\nmodule.exports = function namePubsub (self) {\n  return {\n    /**\n     * Query the state of IPNS pubsub.\n     *\n     * @returns {Promise|void}\n     */\n    state: promisify((callback) => {\n      callback(null, {\n        enabled: isNamePubsubEnabled(self)\n      })\n    }),\n    /**\n     * Cancel a name subscription.\n     *\n     * @param {String} name subscription name.\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    cancel: promisify((name, callback) => {\n      let pubsub\n      try {\n        pubsub = getPubsubRouting(self)\n      } catch (err) {\n        return callback(err)\n      }\n\n      pubsub.cancel(name, callback)\n    }),\n    /**\n     * Show current name subscriptions.\n     *\n     * @param {function(Error)} [callback]\n     * @returns {Promise|void}\n     */\n    subs: promisify((callback) => {\n      let pubsub\n      try {\n        pubsub = getPubsubRouting(self)\n      } catch (err) {\n        return callback(err)\n      }\n\n      pubsub.getSubscriptions(callback)\n    })\n  }\n}\n","'use strict'\n\nconst { TieredDatastore } = require('datastore-core')\nconst get = require('dlv')\n\nconst PubsubDatastore = require('./pubsub-datastore')\nconst OfflineDatastore = require('./offline-datastore')\n\nmodule.exports = (ipfs) => {\n  // Setup online routing for IPNS with a tiered routing composed by a DHT and a Pubsub router (if properly enabled)\n  const ipnsStores = []\n\n  // Add IPNS pubsub if enabled\n  let pubsubDs\n  if (get(ipfs._options, 'EXPERIMENTAL.ipnsPubsub', false)) {\n    const pubsub = ipfs.libp2p.pubsub\n    const localDatastore = ipfs._repo.datastore\n    const peerId = ipfs._peerInfo.id\n\n    pubsubDs = new PubsubDatastore(pubsub, localDatastore, peerId)\n    ipnsStores.push(pubsubDs)\n  }\n\n  // DHT should not be added as routing if we are offline or it is disabled\n  if (get(ipfs._options, 'offline') || !get(ipfs._options, 'libp2p.dht.enabled', false)) {\n    const offlineDatastore = new OfflineDatastore(ipfs._repo)\n    ipnsStores.push(offlineDatastore)\n  } else {\n    ipnsStores.push(ipfs.libp2p.dht)\n  }\n\n  // Create ipns routing with a set of datastores\n  return new TieredDatastore(ipnsStores)\n}\n","'use strict'\n\nconst { createFromPrivKey } = require('peer-id')\nconst series = require('async/series')\nconst Receptacle = require('receptacle')\n\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = debug('ipfs:ipns')\nlog.error = debug('ipfs:ipns:error')\n\nconst IpnsPublisher = require('./publisher')\nconst IpnsRepublisher = require('./republisher')\nconst IpnsResolver = require('./resolver')\nconst path = require('./path')\n\nconst defaultRecordTtl = 60 * 1000\n\nclass IPNS {\n  constructor (routing, datastore, peerInfo, keychain, options) {\n    this.publisher = new IpnsPublisher(routing, datastore)\n    this.republisher = new IpnsRepublisher(this.publisher, datastore, peerInfo, keychain, options)\n    this.resolver = new IpnsResolver(routing)\n    this.cache = new Receptacle({ max: 1000 }) // Create an LRU cache with max 1000 items\n    this.routing = routing\n  }\n\n  // Publish\n  publish (privKey, value, lifetime, callback) {\n    series([\n      (cb) => createFromPrivKey(privKey.bytes, cb),\n      (cb) => this.publisher.publishWithEOL(privKey, value, lifetime, cb)\n    ], (err, results) => {\n      if (err) {\n        log.error(err)\n        return callback(err)\n      }\n\n      log(`IPNS value ${value} was published correctly`)\n\n      // Add to cache\n      const id = results[0].toB58String()\n      const ttEol = parseFloat(lifetime)\n      const ttl = (ttEol < defaultRecordTtl) ? ttEol : defaultRecordTtl\n\n      this.cache.set(id, value, { ttl: ttl })\n\n      log(`IPNS value ${value} was cached correctly`)\n\n      callback(null, {\n        name: id,\n        value: value\n      })\n    })\n  }\n\n  // Resolve\n  resolve (name, options, callback) {\n    if (typeof name !== 'string') {\n      const errMsg = `name received is not valid`\n\n      log.error(errMsg)\n      return callback(errcode(new Error(errMsg), 'ERR_INVALID_NAME'))\n    }\n\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    options = options || {}\n\n    // If recursive, we should not try to get the cached value\n    if (!options.nocache && !options.recursive) {\n      // Try to get the record from cache\n      const id = name.split('/')[2]\n      const result = this.cache.get(id)\n\n      if (result) {\n        return callback(null, {\n          path: result\n        })\n      }\n    }\n\n    this.resolver.resolve(name, options, (err, result) => {\n      if (err) {\n        log.error(err)\n        return callback(err)\n      }\n\n      log(`IPNS record from ${name} was resolved correctly`)\n\n      callback(null, {\n        path: result\n      })\n    })\n  }\n\n  // Initialize keyspace\n  // sets the ipns record for the given key to point to an empty directory\n  initializeKeyspace (privKey, value, callback) {\n    this.publisher.publish(privKey, value, callback)\n  }\n}\n\nexports = module.exports = IPNS\nexports.path = path\n","'use strict'\n\nconst waterfall = require('async/waterfall')\nconst reject = require('async/reject')\nconst each = require('async/each')\nconst series = require('async/series')\nconst map = require('async/map')\nconst nextTick = require('async/nextTick')\n\nconst WantManager = require('./want-manager')\nconst Network = require('./network')\nconst DecisionEngine = require('./decision-engine')\nconst Notifications = require('./notifications')\nconst logger = require('./utils').logger\nconst Stats = require('./stats')\n\nconst defaultOptions = {\n  statsEnabled: false,\n  statsComputeThrottleTimeout: 1000,\n  statsComputeThrottleMaxQueueSize: 1000\n}\nconst statsKeys = [\n  'blocksReceived',\n  'dataReceived',\n  'dupBlksReceived',\n  'dupDataReceived',\n  'blocksSent',\n  'dataSent',\n  'providesBufferLength',\n  'wantListLength',\n  'peerCount'\n]\n\n/**\n * JavaScript implementation of the Bitswap 'data exchange' protocol\n * used by IPFS.\n *\n * @param {Libp2p} libp2p\n * @param {Blockstore} blockstore\n */\nclass Bitswap {\n  constructor (libp2p, blockstore, options) {\n    this._libp2p = libp2p\n    this._log = logger(this.peerInfo.id)\n\n    this._options = Object.assign({}, defaultOptions, options)\n\n    // stats\n    this._stats = new Stats(statsKeys, {\n      enabled: this._options.statsEnabled,\n      computeThrottleTimeout: this._options.statsComputeThrottleTimeout,\n      computeThrottleMaxQueueSize: this._options.statsComputeThrottleMaxQueueSize\n    })\n\n    // the network delivers messages\n    this.network = new Network(libp2p, this, {}, this._stats)\n\n    // local database\n    this.blockstore = blockstore\n\n    this.engine = new DecisionEngine(this.peerInfo.id, blockstore, this.network, this._stats)\n\n    // handle message sending\n    this.wm = new WantManager(this.peerInfo.id, this.network, this._stats)\n\n    this.notifications = new Notifications(this.peerInfo.id)\n  }\n\n  get peerInfo () {\n    return this._libp2p.peerInfo\n  }\n\n  // handle messages received through the network\n  _receiveMessage (peerId, incoming, callback) {\n    this.engine.messageReceived(peerId, incoming, (err) => {\n      if (err) {\n        // Only logging the issue to process as much as possible\n        // of the message. Currently `messageReceived` does not\n        // return any errors, but this could change in the future.\n        this._log('failed to receive message', incoming)\n      }\n\n      if (incoming.blocks.size === 0) {\n        return callback()\n      }\n\n      const blocks = Array.from(incoming.blocks.values())\n\n      // quickly send out cancels, reduces chances of duplicate block receives\n      const wanted = blocks\n        .filter((b) => this.wm.wantlist.contains(b.cid))\n        .map((b) => b.cid)\n\n      this.wm.cancelWants(wanted)\n\n      each(\n        blocks,\n        (b, cb) => {\n          const wasWanted = wanted.includes(b.cid)\n          this._handleReceivedBlock(peerId, b, wasWanted, cb)\n        },\n        callback\n      )\n    })\n  }\n\n  _handleReceivedBlock (peerId, block, wasWanted, callback) {\n    this._log('received block')\n\n    waterfall([\n      (cb) => this.blockstore.has(block.cid, cb),\n      (has, cb) => {\n        this._updateReceiveCounters(peerId.toB58String(), block, has)\n        if (has || !wasWanted) {\n          return nextTick(cb)\n        }\n\n        this._putBlock(block, cb)\n      }\n    ], callback)\n  }\n\n  _updateReceiveCounters (peerId, block, exists) {\n    this._stats.push(peerId, 'blocksReceived', 1)\n    this._stats.push(peerId, 'dataReceived', block.data.length)\n\n    if (exists) {\n      this._stats.push(peerId, 'dupBlksReceived', 1)\n      this._stats.push(peerId, 'dupDataReceived', block.data.length)\n    }\n  }\n\n  // handle errors on the receiving channel\n  _receiveError (err) {\n    this._log.error('ReceiveError: %s', err.message)\n  }\n\n  // handle new peers\n  _onPeerConnected (peerId) {\n    this.wm.connected(peerId)\n  }\n\n  // handle peers being disconnected\n  _onPeerDisconnected (peerId) {\n    this.wm.disconnected(peerId)\n    this.engine.peerDisconnected(peerId)\n    this._stats.disconnected(peerId)\n  }\n\n  _putBlock (block, callback) {\n    this.blockstore.put(block, (err) => {\n      if (err) {\n        return callback(err)\n      }\n\n      this.notifications.hasBlock(block)\n      this.network.provide(block.cid, (err) => {\n        if (err) {\n          this._log.error('Failed to provide: %s', err.message)\n        }\n      })\n\n      this.engine.receivedBlocks([block.cid])\n      callback()\n    })\n  }\n\n  enableStats () {\n    this._stats.enable()\n  }\n\n  disableStats () {\n    this._stats.disable()\n  }\n\n  /**\n   * Return the current wantlist for a given `peerId`\n   *\n   * @param {PeerId} peerId\n   * @returns {Wantlist}\n   */\n  wantlistForPeer (peerId) {\n    return this.engine.wantlistForPeer(peerId)\n  }\n\n  /**\n   * Return ledger information for a given `peerId`\n   *\n   * @param {PeerId} peerId\n   * @returns {?Object}\n   */\n  ledgerForPeer (peerId) {\n    return this.engine.ledgerForPeer(peerId)\n  }\n\n  /**\n   * Fetch a given block by cid. If the block is in the local\n   * blockstore it is returned, otherwise the block is added to the wantlist and returned once another node sends it to us.\n   *\n   * @param {CID} cid\n   * @param {function(Error, Block)} callback\n   * @returns {void}\n   */\n  get (cid, callback) {\n    this.getMany([cid], (err, blocks) => {\n      if (err) {\n        return callback(err)\n      }\n\n      if (blocks && blocks.length > 0) {\n        callback(null, blocks[0])\n      } else {\n        // when a unwant happens\n        callback()\n      }\n    })\n  }\n\n  /**\n   * Fetch a a list of blocks by cid. If the blocks are in the local\n   * blockstore they are returned, otherwise the blocks are added to the wantlist and returned once another node sends them to us.\n   *\n   * @param {Array<CID>} cids\n   * @param {function(Error, Blocks)} callback\n   * @returns {void}\n   */\n  getMany (cids, callback) {\n    let pendingStart = cids.length\n    const wantList = []\n    let promptedNetwork = false\n\n    const getFromOutside = (cid, cb) => {\n      wantList.push(cid)\n\n      this.notifications.wantBlock(\n        cid,\n        // called on block receive\n        (block) => {\n          this.wm.cancelWants([cid])\n          cb(null, block)\n        },\n        // called on unwant\n        () => {\n          this.wm.cancelWants([cid])\n          cb(null, undefined)\n        }\n      )\n\n      if (!pendingStart) {\n        this.wm.wantBlocks(wantList)\n      }\n    }\n\n    map(cids, (cid, cb) => {\n      waterfall(\n        [\n          (cb) => this.blockstore.has(cid, cb),\n          (has, cb) => {\n            pendingStart--\n            if (has) {\n              if (!pendingStart) {\n                this.wm.wantBlocks(wantList)\n              }\n              return this.blockstore.get(cid, cb)\n            }\n\n            if (!promptedNetwork) {\n              promptedNetwork = true\n              this.network.findAndConnect(cids[0], (err) => {\n                if (err) {\n                  this._log.error(err)\n                }\n              })\n            }\n\n            // we don't have the block here\n            getFromOutside(cid, cb)\n          }\n        ],\n        cb)\n    }, callback)\n  }\n\n  // removes the given cids from the wantlist independent of any ref counts\n  unwant (cids) {\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n\n    this.wm.unwantBlocks(cids)\n    cids.forEach((cid) => this.notifications.unwantBlock(cid))\n  }\n\n  // removes the given keys from the want list\n  cancelWants (cids) {\n    if (!Array.isArray(cids)) {\n      cids = [cids]\n    }\n    this.wm.cancelWants(cids)\n  }\n\n  /**\n   * Put the given block to the underlying blockstore and\n   * send it to nodes that have it in their wantlist.\n   *\n   * @param {Block} block\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n  put (block, callback) {\n    this._log('putting block')\n\n    waterfall([\n      (cb) => this.blockstore.has(block.cid, cb),\n      (has, cb) => {\n        if (has) {\n          return nextTick(cb)\n        }\n\n        this._putBlock(block, cb)\n      }\n    ], callback)\n  }\n\n  /**\n   * Put the given blocks to the underlying blockstore and\n   * send it to nodes that have it them their wantlist.\n   *\n   * @param {Array<Block>} blocks\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n  putMany (blocks, callback) {\n    waterfall([\n      (cb) => reject(blocks, (b, cb) => {\n        this.blockstore.has(b.cid, cb)\n      }, cb),\n      (newBlocks, cb) => this.blockstore.putMany(newBlocks, (err) => {\n        if (err) {\n          return cb(err)\n        }\n\n        newBlocks.forEach((block) => {\n          this.notifications.hasBlock(block)\n          this.engine.receivedBlocks([block.cid])\n          this.network.provide(block.cid, (err) => {\n            if (err) {\n              this._log.error('Failed to provide: %s', err.message)\n            }\n          })\n        })\n        cb()\n      })\n    ], callback)\n  }\n\n  /**\n   * Get the current list of wants.\n   *\n   * @returns {Iterator<WantlistEntry>}\n   */\n  getWantlist () {\n    return this.wm.wantlist.entries()\n  }\n\n  /**\n   * Get the current list of partners.\n   *\n   * @returns {Array<PeerId>}\n   */\n  peers () {\n    return this.engine.peers()\n  }\n\n  /**\n   * Get stats about the bitswap node.\n   *\n   * @returns {Object}\n   */\n  stat () {\n    return this._stats\n  }\n\n  /**\n   * Start the bitswap node.\n   *\n   * @param {function(Error)} callback\n   *\n   * @returns {void}\n   */\n  start (callback) {\n    series([\n      (cb) => this.wm.start(cb),\n      (cb) => this.network.start(cb),\n      (cb) => this.engine.start(cb)\n    ], callback)\n  }\n\n  /**\n   * Stop the bitswap node.\n   *\n   * @param {function(Error)} callback\n   *\n   * @returns {void}\n   */\n  stop (callback) {\n    this._stats.stop()\n    series([\n      (cb) => this.wm.stop(cb),\n      (cb) => this.network.stop(cb),\n      (cb) => this.engine.stop(cb)\n    ], callback)\n  }\n}\n\nmodule.exports = Bitswap\n","'use strict'\n\nconst { Key } = require('interface-datastore')\nconst { Record } = require('libp2p-record')\nconst { encodeBase32 } = require('./utils')\n\nconst errcode = require('err-code')\nconst debug = require('debug')\nconst log = debug('ipfs:ipns:offline-datastore')\nlog.error = debug('ipfs:ipns:offline-datastore:error')\n\n// Offline datastore aims to mimic the same encoding as routing when storing records\n// to the local datastore\nclass OfflineDatastore {\n  constructor (repo) {\n    this._repo = repo\n  }\n\n  /**\n   * Put a value to the local datastore indexed by the received key properly encoded.\n   * @param {Buffer} key identifier of the value.\n   * @param {Buffer} value value to be stored.\n   * @param {function(Error)} callback\n   * @returns {void}\n   */\n  put (key, value, callback) {\n    if (!Buffer.isBuffer(key)) {\n      const errMsg = `Offline datastore key must be a buffer`\n\n      log.error(errMsg)\n      return callback(errcode(new Error(errMsg), 'ERR_INVALID_KEY'))\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      const errMsg = `Offline datastore value must be a buffer`\n\n      log.error(errMsg)\n      return callback(errcode(new Error(errMsg), 'ERR_INVALID_VALUE'))\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (err) {\n      const errMsg = `Not possible to generate the routing key`\n\n      log.error(errMsg)\n      return callback(errcode(new Error(errMsg), 'ERR_GENERATING_ROUTING_KEY'))\n    }\n\n    // Marshal to libp2p record as the DHT does\n    const record = new Record(key, value)\n\n    this._repo.datastore.put(routingKey, record.serialize(), callback)\n  }\n\n  /**\n   * Get a value from the local datastore indexed by the received key properly encoded.\n   * @param {Buffer} key identifier of the value to be obtained.\n   * @param {function(Error, Buffer)} callback\n   * @returns {void}\n   */\n  get (key, callback) {\n    if (!Buffer.isBuffer(key)) {\n      const errMsg = `Offline datastore key must be a buffer`\n\n      log.error(errMsg)\n      return callback(errcode(new Error(errMsg), 'ERR_INVALID_KEY'))\n    }\n\n    let routingKey\n\n    try {\n      routingKey = this._routingKey(key)\n    } catch (err) {\n      const errMsg = `Not possible to generate the routing key`\n\n      log.error(errMsg)\n      return callback(errcode(new Error(errMsg), 'ERR_GENERATING_ROUTING_KEY'))\n    }\n\n    this._repo.datastore.get(routingKey, (err, res) => {\n      if (err) {\n        return callback(err)\n      }\n\n      // Unmarshal libp2p record as the DHT does\n      let record\n      try {\n        record = Record.deserialize(res)\n      } catch (err) {\n        log.error(err)\n        return callback(err)\n      }\n\n      callback(null, record.value)\n    })\n  }\n\n  // encode key properly - base32(/ipns/{cid})\n  _routingKey (key) {\n    return new Key('/' + encodeBase32(key), false)\n  }\n}\n\nexports = module.exports = OfflineDatastore\n","'use strict'\n\nconst multibase = require('multibase')\nconst ipns = require('ipns')\n\nmodule.exports = {\n  encodeBase32: (buf) => {\n    const m = multibase.encode('base32', buf).slice(1) // slice off multibase codec\n\n    return m.toString().toUpperCase() // should be uppercase for interop with go\n  },\n  validator: {\n    func: (key, record, cb) => ipns.validator.validate(record, key, cb)\n  },\n  selector: (k, records) => ipns.validator.select(records[0], records[1])\n}\n","'use strict'\n\nconst WS = require('libp2p-websockets')\nconst WebRTCStar = require('libp2p-webrtc-star')\nconst WebSocketStarMulti = require('libp2p-websocket-star-multi')\nconst Multiplex = require('pull-mplex')\nconst SECIO = require('libp2p-secio')\nconst Bootstrap = require('libp2p-bootstrap')\nconst KadDHT = require('libp2p-kad-dht')\nconst libp2p = require('libp2p')\nconst mergeOptions = require('merge-options')\nconst multiaddr = require('multiaddr')\n\nclass Node extends libp2p {\n  constructor (_options) {\n    const wrtcstar = new WebRTCStar({ id: _options.peerInfo.id })\n\n    // this can be replaced once optional listening is supported with the below code. ref: https://github.com/libp2p/interface-transport/issues/41\n    // const wsstar = new WebSocketStar({ id: _options.peerInfo.id })\n    const wsstarServers = _options.peerInfo.multiaddrs.toArray().map(String).filter(addr => addr.includes('p2p-websocket-star'))\n    _options.peerInfo.multiaddrs.replace(wsstarServers.map(multiaddr), '/p2p-websocket-star') // the ws-star-multi module will replace this with the chosen ws-star servers\n    const wsstar = new WebSocketStarMulti({ servers: wsstarServers, id: _options.peerInfo.id, ignore_no_online: !wsstarServers.length || _options.wsStarIgnoreErrors })\n\n    const defaults = {\n      switch: {\n        blacklistTTL: 2 * 60 * 1e3, // 2 minute base\n        blackListAttempts: 5, // back off 5 times\n        maxParallelDials: 100,\n        maxColdCalls: 25,\n        dialTimeout: 20e3\n      },\n      modules: {\n        transport: [\n          WS,\n          wrtcstar,\n          wsstar\n        ],\n        streamMuxer: [\n          Multiplex\n        ],\n        connEncryption: [\n          SECIO\n        ],\n        peerDiscovery: [\n          wrtcstar.discovery,\n          wsstar.discovery,\n          Bootstrap\n        ],\n        dht: KadDHT\n      },\n      config: {\n        peerDiscovery: {\n          autoDial: true,\n          bootstrap: {\n            enabled: true\n          },\n          webRTCStar: {\n            enabled: true\n          },\n          websocketStar: {\n            enabled: true\n          }\n        },\n        dht: {\n          enabled: false\n        },\n        EXPERIMENTAL: {\n          pubsub: false\n        }\n      }\n    }\n\n    super(mergeOptions(defaults, _options))\n  }\n}\n\nmodule.exports = Node\n","'use strict'\n\nmodule.exports = self => require('./add')(self)\n","'use strict'\n\nconst { URL } = require('iso-url')\nconst fetch = require('../../runtime/fetch-nodejs')\n\nmodule.exports = (self) => {\n  return async (url, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    let files\n\n    try {\n      const parsedUrl = new URL(url)\n      const res = await fetch(url)\n\n      if (!res.ok) {\n        throw new Error('unexpected status code: ' + res.status)\n      }\n\n      // TODO: use res.body when supported\n      const content = Buffer.from(await res.arrayBuffer())\n      const path = decodeURIComponent(parsedUrl.pathname.split('/').pop())\n\n      files = await self.add({ content, path }, options)\n    } catch (err) {\n      if (callback) {\n        return callback(err)\n      }\n      throw err\n    }\n\n    if (callback) {\n      callback(null, files)\n    }\n\n    return files\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst pull = require('pull-stream')\n\nmodule.exports = function (self) {\n  return promisify((ipfsPath, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    options = options || {}\n\n    pull(\n      self.refsPullStream(ipfsPath, options),\n      pull.collect((err, values) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, values)\n      })\n    )\n  })\n}\n\n// Preset format strings\nmodule.exports.Format = {\n  default: '<dst>',\n  edges: '<src> -> <dst>'\n}\n","'use strict'\n\nconst toStream = require('pull-stream-to-stream')\n\nmodule.exports = function (self) {\n  return (ipfsPath, options) => {\n    return toStream.source(self.lsPullStream(ipfsPath, options))\n  }\n}\n","'use strict'\n\nconst pull = require('pull-stream')\nconst toStream = require('pull-stream-to-stream')\n\nmodule.exports = function (self) {\n  return (ipfsPath, options) => {\n    options = options || {}\n\n    return toStream.source(\n      pull(\n        self.getPullStream(ipfsPath, options),\n        pull.map((file) => {\n          if (file.content) {\n            file.content = toStream.source(file.content)\n            file.content.pause()\n          }\n\n          return file\n        })\n      )\n    )\n  }\n}\n","'use strict'\n\nconst toStream = require('pull-stream-to-stream')\n\nmodule.exports = function (self) {\n  return (ipfsPath, options) => {\n    return toStream.source(self.refsPullStream(ipfsPath, options))\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst pull = require('pull-stream')\n\nmodule.exports = function (self) {\n  return promisify((ipfsPath, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    options = options || {}\n\n    pull(\n      self.lsPullStream(ipfsPath, options),\n      pull.collect((err, values) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, values)\n      })\n    )\n  })\n}\n","'use strict'\n\nconst pull = require('pull-stream')\nconst pushable = require('pull-pushable')\nconst Duplex = require('readable-stream').Duplex\n\nclass AddHelper extends Duplex {\n  constructor (pullStream, push, options) {\n    super(Object.assign({ objectMode: true }, options))\n    this._pullStream = pullStream\n    this._pushable = push\n    this._waitingPullFlush = []\n  }\n\n  _read () {\n    this._pullStream(null, (end, data) => {\n      while (this._waitingPullFlush.length) {\n        const cb = this._waitingPullFlush.shift()\n        cb()\n      }\n      if (end) {\n        if (end instanceof Error) {\n          this.emit('error', end)\n        } else {\n          this.push(null)\n        }\n      } else {\n        this.push(data)\n      }\n    })\n  }\n\n  _write (chunk, encoding, callback) {\n    this._waitingPullFlush.push(callback)\n    this._pushable.push(chunk)\n  }\n}\n\nmodule.exports = function (self) {\n  return (options) => {\n    options = options || {}\n\n    const p = pushable()\n    const s = pull(\n      p,\n      self.addPullStream(options)\n    )\n\n    const retStream = new AddHelper(s, p)\n\n    retStream.once('finish', () => p.end())\n\n    return retStream\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst pull = require('pull-stream')\n\nmodule.exports = function (self) {\n  return promisify((ipfsPath, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    options = options || {}\n\n    pull(\n      self.getPullStream(ipfsPath, options),\n      pull.asyncMap((file, cb) => {\n        if (file.content) {\n          pull(\n            file.content,\n            pull.collect((err, buffers) => {\n              if (err) { return cb(err) }\n              file.content = Buffer.concat(buffers)\n              cb(null, file)\n            })\n          )\n        } else {\n          cb(null, file)\n        }\n      }),\n      pull.collect(callback)\n    )\n  })\n}\n","'use strict'\n\nconst toStream = require('pull-stream-to-stream')\n\nmodule.exports = function (self) {\n  return (ipfsPath, options) => toStream.source(self.catPullStream(ipfsPath, options))\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst pull = require('pull-stream')\n\nmodule.exports = function (self) {\n  return promisify((ipfsPath, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    pull(\n      self.catPullStream(ipfsPath, options),\n      pull.collect((err, buffers) => {\n        if (err) { return callback(err) }\n        callback(null, Buffer.concat(buffers))\n      })\n    )\n  })\n}\n","'use strict'\n\nconst toStream = require('pull-stream-to-stream')\n\nmodule.exports = function (self) {\n  return (ipfsPath, options) => {\n    return toStream.source(self.refs.localPullStream())\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst pull = require('pull-stream')\n\nmodule.exports = function (self) {\n  return promisify((callback) => {\n    pull(\n      self.refs.localPullStream(),\n      pull.collect((err, values) => {\n        if (err) {\n          return callback(err)\n        }\n        callback(null, values)\n      })\n    )\n  })\n}\n","'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst deferred = require('pull-defer')\nconst toPullStream = require('async-iterator-to-pull-stream')\nconst { normalizePath } = require('./utils')\n\nmodule.exports = function (self) {\n  return function catPullStream (ipfsPath, options) {\n    if (typeof ipfsPath === 'function') {\n      throw new Error('You must supply an ipfsPath')\n    }\n\n    options = options || {}\n\n    ipfsPath = normalizePath(ipfsPath)\n    const pathComponents = ipfsPath.split('/')\n\n    if (options.preload !== false) {\n      self._preload(pathComponents[0])\n    }\n\n    const d = deferred.source()\n\n    exporter(ipfsPath, self._ipld, options)\n      .then(file => {\n        // File may not have unixfs prop if small & imported with rawLeaves true\n        if (file.unixfs && file.unixfs.type.includes('dir')) {\n          return d.abort(new Error('this dag node is a directory'))\n        }\n\n        if (!file.content) {\n          return d.abort(new Error('this dag node has no content'))\n        }\n\n        d.resolve(toPullStream.source(file.content(options)))\n      }, err => {\n        d.abort(err)\n      })\n\n    return d\n  }\n}\n","'use strict'\n\nconst pull = require('pull-stream')\nconst pullDefer = require('pull-defer')\nconst pullTraverse = require('pull-traverse')\nconst pullCat = require('pull-cat')\nconst isIpfs = require('is-ipfs')\nconst CID = require('cids')\nconst { DAGNode } = require('ipld-dag-pb')\nconst { normalizePath } = require('./utils')\nconst { Format } = require('./refs')\n\nmodule.exports = function (self) {\n  return function (ipfsPath, options = {}) {\n    if (options.maxDepth === 0) {\n      return pull.empty()\n    }\n    if (options.edges && options.format && options.format !== Format.default) {\n      return pull.error(new Error('Cannot set edges to true and also specify format'))\n    }\n\n    options.format = options.edges ? Format.edges : options.format || Format.default\n\n    if (typeof options.maxDepth !== 'number') {\n      options.maxDepth = options.recursive ? Infinity : 1\n    }\n\n    let paths\n    try {\n      const rawPaths = Array.isArray(ipfsPath) ? ipfsPath : [ipfsPath]\n      paths = rawPaths.map(p => getFullPath(self, p, options))\n    } catch (err) {\n      return pull.error(err)\n    }\n\n    return pullCat(paths.map(p => refsStream(self, p, options)))\n  }\n}\n\nfunction getFullPath (ipfs, ipfsPath, options) {\n  // normalizePath() strips /ipfs/ off the front of the path so the CID will\n  // be at the front of the path\n  const path = normalizePath(ipfsPath)\n  const pathComponents = path.split('/')\n  const cid = pathComponents[0]\n  if (!isIpfs.cid(cid)) {\n    throw new Error(`Error resolving path '${path}': '${cid}' is not a valid CID`)\n  }\n\n  if (options.preload !== false) {\n    ipfs._preload(cid)\n  }\n\n  return '/ipfs/' + path\n}\n\n// Get a stream of refs at the given path\nfunction refsStream (ipfs, path, options) {\n  const deferred = pullDefer.source()\n\n  // Resolve to the target CID of the path\n  ipfs.resolve(path, (err, resPath) => {\n    if (err) {\n      return deferred.resolve(pull.error(err))\n    }\n\n    // path is /ipfs/<cid>\n    const parts = resPath.split('/')\n    const cid = parts[2]\n    deferred.resolve(pull(\n      // Traverse the DAG, converting it into a stream\n      objectStream(ipfs, cid, options.maxDepth, options.unique),\n      // Root object will not have a parent\n      pull.filter(obj => Boolean(obj.parent)),\n      // Filter out duplicates (isDuplicate flag is only set if options.unique is set)\n      pull.filter(obj => !obj.isDuplicate),\n      // Format the links\n      pull.map(obj => formatLink(obj.parent.cid, obj.node.cid, obj.node.name, options.format)),\n      // Clients expect refs to be in the format { ref: <ref> }\n      pull.map(ref => ({ ref }))\n    ))\n  })\n\n  return deferred\n}\n\n// Get formatted link\nfunction formatLink (srcCid, dstCid, linkName, format) {\n  let out = format.replace(/<src>/g, srcCid.toString())\n  out = out.replace(/<dst>/g, dstCid.toString())\n  out = out.replace(/<linkname>/g, linkName)\n  return out\n}\n\n// Do a depth first search of the DAG, starting from the given root cid\nfunction objectStream (ipfs, rootCid, maxDepth, isUnique) {\n  const uniques = new Set()\n\n  const root = { node: { cid: rootCid }, depth: 0 }\n  const traverseLevel = (obj) => {\n    const { node, depth } = obj\n\n    // Check the depth\n    const nextLevelDepth = depth + 1\n    if (nextLevelDepth > maxDepth) {\n      return pull.empty()\n    }\n\n    // If unique option is enabled, check if the CID has been seen before.\n    // Note we need to do this here rather than before adding to the stream\n    // so that the unique check happens in the order that items are examined\n    // in the DAG.\n    if (isUnique) {\n      if (uniques.has(node.cid.toString())) {\n        // Mark this object as a duplicate so we can filter it out later\n        obj.isDuplicate = true\n        return pull.empty()\n      }\n      uniques.add(node.cid.toString())\n    }\n\n    const deferred = pullDefer.source()\n\n    // Get this object's links\n    getLinks(ipfs, node.cid, (err, links) => {\n      if (err) {\n        if (err.code === 'ERR_NOT_FOUND') {\n          err.message = `Could not find object with CID: ${node.cid}`\n        }\n        return deferred.resolve(pull.error(err))\n      }\n\n      // Add to the stream each link, parent and the new depth\n      const vals = links.map(link => ({\n        parent: node,\n        node: link,\n        depth: nextLevelDepth\n      }))\n\n      deferred.resolve(pull.values(vals))\n    })\n\n    return deferred\n  }\n\n  return pullTraverse.depthFirst(root, traverseLevel)\n}\n\n// Fetch a node from IPLD then get all its links\nfunction getLinks (ipfs, cid, callback) {\n  ipfs._ipld.get(new CID(cid))\n    .then(node => {\n      let links\n      if (DAGNode.isDAGNode(node)) {\n        links = node.Links.map(({ Name, Hash }) => {\n          return { name: Name, cid: new CID(Hash) }\n        })\n      } else {\n        links = getNodeLinks(node)\n      }\n      callback(null, links)\n    })\n    .catch(callback)\n}\n\n// Recursively search the node for CIDs\nfunction getNodeLinks (node, path = '') {\n  let links = []\n  for (const [name, value] of Object.entries(node)) {\n    if (CID.isCID(value)) {\n      links.push({\n        name: path + name,\n        cid: value\n      })\n    } else if (typeof value === 'object') {\n      links = links.concat(getNodeLinks(value, path + name + '/'))\n    }\n  }\n  return links\n}\n","'use strict'\n\nmodule.exports = (self) => require('../../runtime/add-from-fs-nodejs')(self)\n","'use strict'\n\nconst CID = require('cids')\nconst base32 = require('base32.js')\nconst pull = require('pull-stream')\nconst pullDefer = require('pull-defer')\n\nmodule.exports = function (self) {\n  return () => {\n    const deferred = pullDefer.source()\n\n    self._repo.blocks.query({ keysOnly: true }, (err, blocks) => {\n      if (err) {\n        return deferred.resolve(pull.error(err))\n      }\n\n      const refs = blocks.map(b => dsKeyToRef(b.key))\n      deferred.resolve(pull.values(refs))\n    })\n\n    return deferred\n  }\n}\n\nfunction dsKeyToRef (key) {\n  try {\n    // Block key is of the form /<base32 encoded string>\n    const decoder = new base32.Decoder()\n    const buff = Buffer.from(decoder.write(key.toString().slice(1)).finalize())\n    return { ref: new CID(buff).toString() }\n  } catch (err) {\n    return { err: `Could not convert block with key '${key}' to CID: ${err.message}` }\n  }\n}\n","'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst deferred = require('pull-defer')\nconst pull = require('pull-stream/pull')\nconst once = require('pull-stream/sources/once')\nconst map = require('pull-stream/throughs/map')\nconst filter = require('pull-stream/throughs/filter')\nconst errCode = require('err-code')\nconst toPullStream = require('async-iterator-to-pull-stream')\nconst { normalizePath, mapFile } = require('./utils')\n\nmodule.exports = function (self) {\n  return function (ipfsPath, options) {\n    options = options || {}\n\n    const path = normalizePath(ipfsPath)\n    const recursive = options.recursive\n    const pathComponents = path.split('/')\n\n    if (options.preload !== false) {\n      self._preload(pathComponents[0])\n    }\n\n    const d = deferred.source()\n\n    exporter(ipfsPath, self._ipld, options)\n      .then(file => {\n        if (!file.unixfs) {\n          return d.abort(errCode(new Error('dag node was not a UnixFS node'), 'ENOTUNIXFS'))\n        }\n\n        if (file.unixfs.type === 'file') {\n          return d.resolve(once(mapFile(options)(file)))\n        }\n\n        if (file.unixfs.type.includes('dir')) {\n          if (recursive) {\n            return d.resolve(pull(\n              toPullStream.source(exporter.recursive(file.cid, self._ipld, options)),\n              filter(child => file.cid.toBaseEncodedString() !== child.cid.toBaseEncodedString()),\n              map(mapFile(options))\n            ))\n          }\n\n          return d.resolve(pull(\n            toPullStream.source(file.content()),\n            map(mapFile(options)),\n            map((file) => {\n              file.depth--\n\n              return file\n            })\n          ))\n        }\n\n        d.abort(errCode(new Error(`Unknown UnixFS type ${file.unixfs.type}`), 'EUNKNOWNUNIXFSTYPE'))\n      }, err => {\n        d.abort(err)\n      })\n\n    return d\n  }\n}\n","'use strict'\n\nconst promisify = require('promisify-es6')\nconst pull = require('pull-stream')\nconst sort = require('pull-sort')\nconst isSource = require('is-pull-stream').isSource\nconst validateAddInput = require('ipfs-utils/src/files/add-input-validation')\n\nmodule.exports = function (self) {\n  const add = promisify((data, options, callback) => {\n    if (typeof options === 'function') {\n      callback = options\n      options = {}\n    }\n\n    options = options || {}\n\n    try {\n      validateAddInput(data)\n    } catch (err) {\n      return callback(err)\n    }\n\n    pull(\n      pull.values([data]),\n      self.addPullStream(options),\n      sort((a, b) => {\n        if (a.path < b.path) return 1\n        if (a.path > b.path) return -1\n        return 0\n      }),\n      pull.collect(callback)\n    )\n  })\n\n  return function () {\n    const args = Array.from(arguments)\n\n    // If we .add(<pull stream>), then promisify thinks the pull stream\n    // is a callback! Add an empty options object in this case so that a\n    // promise is returned.\n    if (args.length === 1 && isSource(args[0])) {\n      args.push({})\n    }\n\n    return add.apply(null, args)\n  }\n}\n","'use strict'\n\nconst exporter = require('ipfs-unixfs-exporter')\nconst toPullStream = require('async-iterator-to-pull-stream')\nconst errCode = require('err-code')\nconst pull = require('pull-stream/pull')\nconst map = require('pull-stream/throughs/map')\nconst { normalizePath, mapFile } = require('./utils')\n\nmodule.exports = function (self) {\n  return (ipfsPath, options) => {\n    options = options || {}\n\n    if (options.preload !== false) {\n      let pathComponents\n\n      try {\n        pathComponents = normalizePath(ipfsPath).split('/')\n      } catch (err) {\n        return pull.error(errCode(err, 'ERR_INVALID_PATH'))\n      }\n\n      self._preload(pathComponents[0])\n    }\n\n    return pull(\n      toPullStream.source(exporter.recursive(ipfsPath, self._ipld, options)),\n      map(mapFile({\n        ...options,\n        includeContent: true\n      }))\n    )\n  }\n}\n","'use strict'\n\nconst importer = require('ipfs-unixfs-importer')\nconst kindOf = require('kind-of')\nconst toAsyncIterator = require('pull-stream-to-async-iterator')\nconst toPullStream = require('async-iterator-to-pull-stream')\nconst pull = require('pull-stream/pull')\nconst pullValues = require('pull-stream/sources/values')\nconst pullMap = require('pull-stream/throughs/map')\nconst pullAsyncMap = require('pull-stream/throughs/async-map')\nconst pullFlatten = require('pull-stream/throughs/flatten')\nconst toPull = require('stream-to-pull-stream')\nconst waterfall = require('async/waterfall')\nconst isStream = require('is-stream')\nconst { isSource } = require('is-pull-stream')\nconst { parseChunkerString } = require('./utils')\nconst streamFromFileReader = require('ipfs-utils/src/streams/stream-from-filereader')\nconst { supportsFileReader } = require('ipfs-utils/src/supports')\n\nfunction noop () {}\n\nfunction prepareFile (file, self, opts, callback) {\n  opts = opts || {}\n\n  let cid = file.cid\n\n  waterfall([\n    (cb) => opts.onlyHash\n      ? cb(null, file)\n      : self.object.get(file.cid, Object.assign({}, opts, { preload: false }), cb),\n    (node, cb) => {\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      const b58Hash = cid.toBaseEncodedString()\n      let size = node.size\n\n      if (Buffer.isBuffer(node)) {\n        size = node.length\n      }\n\n      cb(null, {\n        path: file.path === undefined ? b58Hash : (file.path || ''),\n        hash: b58Hash,\n        // multihash: b58Hash,\n        size\n      })\n    }\n  ], callback)\n}\n\nfunction normalizeContent (content, opts) {\n  if (!Array.isArray(content)) {\n    content = [content]\n  }\n\n  return content.map((data) => {\n    if (supportsFileReader && kindOf(data) === 'file') {\n      data = { path: '', content: toPull.source(streamFromFileReader(data)) }\n    }\n    // Buffer input\n    if (Buffer.isBuffer(data)) {\n      data = { path: '', content: pullValues([data]) }\n    }\n\n    // Readable stream input\n    if (isStream.readable(data)) {\n      data = { path: '', content: toPull.source(data) }\n    }\n\n    if (isSource(data)) {\n      data = { path: '', content: data }\n    }\n\n    if (data && data.content && typeof data.content !== 'function') {\n      if (supportsFileReader && kindOf(data.content) === 'file') {\n        data = { path: data.path, content: toPull.source(streamFromFileReader(data.content)) }\n      }\n\n      if (Buffer.isBuffer(data.content)) {\n        data = { path: data.path, content: pullValues([data.content]) }\n      }\n\n      if (isStream.readable(data.content)) {\n        data = { path: data.path, content: toPull.source(data.content) }\n      }\n    }\n\n    if (opts.wrapWithDirectory && !data.path) {\n      throw new Error('Must provide a path when wrapping with a directory')\n    }\n\n    return data\n  })\n}\n\nfunction preloadFile (file, self, opts) {\n  const isRootFile = !file.path || opts.wrapWithDirectory\n    ? file.path === ''\n    : !file.path.includes('/')\n\n  const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false\n\n  if (shouldPreload) {\n    self._preload(file.hash)\n  }\n\n  return file\n}\n\nfunction pinFile (file, self, opts, cb) {\n  // Pin a file if it is the root dir of a recursive add or the single file\n  // of a direct add.\n  const pin = 'pin' in opts ? opts.pin : true\n  const isRootDir = !file.path.includes('/')\n  const shouldPin = pin && isRootDir && !opts.onlyHash && !opts.hashAlg\n  if (shouldPin) {\n    return self.pin.add(file.hash, { preload: false }, err => cb(err, file))\n  } else {\n    cb(null, file)\n  }\n}\n\nmodule.exports = function (self) {\n  // Internal add func that gets used by all add funcs\n  return function addPullStream (options) {\n    options = options || {}\n\n    let chunkerOptions\n    try {\n      chunkerOptions = parseChunkerString(options.chunker)\n    } catch (err) {\n      return pullMap(() => { throw err })\n    }\n    const opts = Object.assign({}, {\n      shardSplitThreshold: self._options.EXPERIMENTAL.sharding\n        ? 1000\n        : Infinity\n    }, options, {\n      chunker: chunkerOptions.chunker,\n      chunkerOptions: chunkerOptions.chunkerOptions\n    })\n\n    // CID v0 is for multihashes encoded with sha2-256\n    if (opts.hashAlg && opts.cidVersion !== 1) {\n      opts.cidVersion = 1\n    }\n\n    let total = 0\n\n    const prog = opts.progress || noop\n    const progress = (bytes) => {\n      total += bytes\n      prog(total)\n    }\n\n    opts.progress = progress\n    return pull(\n      pullMap(content => normalizeContent(content, opts)),\n      pullFlatten(),\n      pullMap(file => ({\n        path: file.path ? file.path : undefined,\n        content: file.content ? toAsyncIterator(file.content) : undefined\n      })),\n      toPullStream.transform(source => importer(source, self._ipld, opts)),\n      pullAsyncMap((file, cb) => prepareFile(file, self, opts, cb)),\n      pullMap(file => preloadFile(file, self, opts)),\n      pullAsyncMap((file, cb) => pinFile(file, self, opts, cb))\n    )\n  }\n}\n","'use strict'\n\nconst toArray = async (iterator) => {\n  const arr = []\n\n  for await (const entry of iterator) {\n    arr.push(entry)\n  }\n\n  return arr\n}\n\nmodule.exports = toArray\n","\nfunction isFunction (f) {\n  return 'function' === typeof f\n}\n\nfunction isDuplex (d) {\n  return 'object' === typeof d && isSource(d.source) && isSink(d.sink)\n}\n\nfunction isSource (s) {\n  return isFunction(s) && s.length === 2\n}\n\nfunction isSink (s) {\n  return isFunction(s) && s.length === 1\n}\n\nexports.isDuplex = isDuplex\nexports.isSource = isSource\nexports.isSink = isSink\n//can't do is through, it will appear as a sink til you git it a source.\n\n","function callbackify(fn) {\n  var fnLength = fn.length\n  return function () {\n    var args = [].slice.call(arguments)\n    var ctx = this\n    if (args.length === fnLength + 1 &&\n        typeof args[fnLength] === 'function') {\n      // callback mode\n      var cb = args.pop()\n      fn.apply(this, args)\n        .then(function (val) { cb.call(ctx, null, val) },\n          function (err) { cb.call(ctx, err) })\n        return\n    }\n    // promise mode\n    return fn.apply(ctx, arguments)\n  }\n}\n\nfunction callbackifyVariadic(fn) {\n  return function () {\n    var args = [].slice.call(arguments)\n    var ctx = this\n    if (args.length >= 1 &&\n        typeof args[args.length - 1] === 'function') {\n      // callback mode\n      var cb = args.pop()\n      fn.apply(this, args)\n        .then(function (val) { cb.call(ctx, null, val) },\n          function (err) { cb.call(ctx, err) })\n        return\n    }\n    // promise mode\n    return fn.apply(ctx, arguments)\n  }\n}\n\nmodule.exports = callbackify\nmodule.exports.variadic = callbackifyVariadic;\n","const pull = require('pull-stream/pull')\n\nmodule.exports = source => {\n  return (async function * () {\n    let _read\n\n    const sink = read => {\n      _read = () => new Promise((resolve, reject) => {\n        read(null, (end, data) => {\n          if (end === true) return resolve({ end })\n          if (end) return reject(end)\n          resolve({ data })\n        })\n      })\n    }\n\n    pull(source, sink)\n\n    while (true) {\n      const { end, data } = await _read()\n      if (end) break\n      yield data\n    }\n  })()\n}\n","'use strict'\n\nfunction id (e) { return e }\nvar prop = require('../util/prop')\n\nmodule.exports = function map (mapper) {\n  if(!mapper) return id\n  mapper = prop(mapper)\n  return function (read) {\n    return function (abort, cb) {\n      read(abort, function (end, data) {\n        try {\n        data = !end ? mapper(data) : null\n        } catch (err) {\n          return read(err, function () {\n            return cb(err)\n          })\n        }\n        cb(end, data)\n      })\n    }\n  }\n}\n","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\nexports.finished = require('./lib/internal/streams/end-of-stream.js');\nexports.pipeline = require('./lib/internal/streams/pipeline.js');\n","\"use strict\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\nconst _require = require(\"readable-stream\"),\n      Readable = _require.Readable;\n\nconst getSymbol = typeof Symbol === \"function\" ? name => {\n  const symbol = Symbol[name];\n  return symbol !== undefined ? symbol : `@@${name}`;\n} : name => `@@${name}`;\nconst $$asyncIterator = asyncIteratorToStream.$$asyncIterator = getSymbol(\"asyncIterator\");\nconst $$iterator = asyncIteratorToStream.$$iterator = getSymbol(\"iterator\");\n\nconst resolveToIterator = value => {\n  let tmp;\n\n  if (typeof (tmp = value[$$asyncIterator]) === \"function\") {\n    return tmp.call(value);\n  }\n\n  if (typeof (tmp = value[$$iterator]) === \"function\") {\n    return tmp.call(value);\n  }\n\n  return value;\n};\n\nfunction asyncIteratorToStream(iterable, options) {\n  if (typeof iterable === \"function\") {\n    return function () {\n      return asyncIteratorToStream(iterable.apply(this, arguments), options);\n    };\n  }\n\n  const then = iterable.then;\n\n  if (typeof then === \"function\") {\n    return then.call(iterable, iterable => asyncIteratorToStream(iterable, options));\n  }\n\n  const iterator = resolveToIterator(iterable);\n  const isGenerator = \"return\" in iterator;\n  const readable = options instanceof Readable ? options : new Readable(options);\n\n  if (isGenerator) {\n    readable._destroy = function () {\n      var _ref = _asyncToGenerator(function* (error, cb) {\n        try {\n          yield error != null ? iterator.throw(error) : iterator.return();\n        } catch (error) {\n          return cb(error);\n        }\n\n        cb(error);\n      });\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n\n  let running = false;\n\n  readable._read = function () {\n    var _ref2 = _asyncToGenerator(function* (size) {\n      if (running) {\n        return;\n      }\n\n      running = true;\n\n      try {\n        let value;\n\n        do {\n          let cursor = iterator.next(size);\n\n          if (typeof cursor.then === \"function\") {\n            cursor = yield cursor;\n          } else {\n            while (!cursor.done && (value = cursor.value) != null && typeof value.then === \"function\") {\n              try {\n                value = yield value;\n              } catch (error) {\n                cursor = iterator.throw(error);\n                continue;\n              }\n\n              cursor = iterator.next(value);\n            }\n          }\n\n          if (cursor.done) {\n            return readable.push(null);\n          }\n\n          value = cursor.value;\n        } while (value === undefined || readable.push(value));\n      } catch (error) {\n        process.nextTick(readable.emit.bind(readable, \"error\", error));\n      } finally {\n        running = false;\n      }\n    });\n\n    return function (_x3) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return readable;\n}\n\nmodule.exports = asyncIteratorToStream;\n\nasyncIteratorToStream.obj = (iterable, options) => asyncIteratorToStream(iterable, _extends({\n  objectMode: true\n}, options));\n//# sourceMappingURL=index.js.map","'use strict'\n\nmodule.exports = require('./src/core')\n","// DO NOT CHANGE THIS FILE. IT IS GENERATED BY tools/update-table.js\n/* eslint quote-props: off */\n'use strict'\n\n/**\n * @type {__import__('./generated-types').NameCodeMap}\n */\nconst baseTable = Object.freeze({\n  'identity': 0x00,\n  'cidv1': 0x01,\n  'cidv2': 0x02,\n  'cidv3': 0x03,\n  'ip4': 0x04,\n  'tcp': 0x06,\n  'sha1': 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  'sha3-512': 0x14,\n  'sha3-384': 0x15,\n  'sha3-256': 0x16,\n  'sha3-224': 0x17,\n  'shake-128': 0x18,\n  'shake-256': 0x19,\n  'keccak-224': 0x1a,\n  'keccak-256': 0x1b,\n  'keccak-384': 0x1c,\n  'keccak-512': 0x1d,\n  'blake3': 0x1e,\n  'dccp': 0x21,\n  'murmur3-128': 0x22,\n  'murmur3-32': 0x23,\n  'ip6': 0x29,\n  'ip6zone': 0x2a,\n  'path': 0x2f,\n  'multicodec': 0x30,\n  'multihash': 0x31,\n  'multiaddr': 0x32,\n  'multibase': 0x33,\n  'dns': 0x35,\n  'dns4': 0x36,\n  'dns6': 0x37,\n  'dnsaddr': 0x38,\n  'protobuf': 0x50,\n  'cbor': 0x51,\n  'raw': 0x55,\n  'dbl-sha2-256': 0x56,\n  'rlp': 0x60,\n  'bencode': 0x63,\n  'dag-pb': 0x70,\n  'dag-cbor': 0x71,\n  'libp2p-key': 0x72,\n  'git-raw': 0x78,\n  'torrent-info': 0x7b,\n  'torrent-file': 0x7c,\n  'leofcoin-block': 0x81,\n  'leofcoin-tx': 0x82,\n  'leofcoin-pr': 0x83,\n  'sctp': 0x84,\n  'dag-jose': 0x85,\n  'dag-cose': 0x86,\n  'eth-block': 0x90,\n  'eth-block-list': 0x91,\n  'eth-tx-trie': 0x92,\n  'eth-tx': 0x93,\n  'eth-tx-receipt-trie': 0x94,\n  'eth-tx-receipt': 0x95,\n  'eth-state-trie': 0x96,\n  'eth-account-snapshot': 0x97,\n  'eth-storage-trie': 0x98,\n  'bitcoin-block': 0xb0,\n  'bitcoin-tx': 0xb1,\n  'bitcoin-witness-commitment': 0xb2,\n  'zcash-block': 0xc0,\n  'zcash-tx': 0xc1,\n  'docid': 0xce,\n  'stellar-block': 0xd0,\n  'stellar-tx': 0xd1,\n  'md4': 0xd4,\n  'md5': 0xd5,\n  'bmt': 0xd6,\n  'decred-block': 0xe0,\n  'decred-tx': 0xe1,\n  'ipld-ns': 0xe2,\n  'ipfs-ns': 0xe3,\n  'swarm-ns': 0xe4,\n  'ipns-ns': 0xe5,\n  'zeronet': 0xe6,\n  'secp256k1-pub': 0xe7,\n  'bls12_381-g1-pub': 0xea,\n  'bls12_381-g2-pub': 0xeb,\n  'x25519-pub': 0xec,\n  'ed25519-pub': 0xed,\n  'bls12_381-g1g2-pub': 0xee,\n  'dash-block': 0xf0,\n  'dash-tx': 0xf1,\n  'swarm-manifest': 0xfa,\n  'swarm-feed': 0xfb,\n  'udp': 0x0111,\n  'p2p-webrtc-star': 0x0113,\n  'p2p-webrtc-direct': 0x0114,\n  'p2p-stardust': 0x0115,\n  'p2p-circuit': 0x0122,\n  'dag-json': 0x0129,\n  'udt': 0x012d,\n  'utp': 0x012e,\n  'unix': 0x0190,\n  'thread': 0x0196,\n  'p2p': 0x01a5,\n  'ipfs': 0x01a5,\n  'https': 0x01bb,\n  'onion': 0x01bc,\n  'onion3': 0x01bd,\n  'garlic64': 0x01be,\n  'garlic32': 0x01bf,\n  'tls': 0x01c0,\n  'quic': 0x01cc,\n  'ws': 0x01dd,\n  'wss': 0x01de,\n  'p2p-websocket-star': 0x01df,\n  'http': 0x01e0,\n  'json': 0x0200,\n  'messagepack': 0x0201,\n  'libp2p-peer-record': 0x0301,\n  'sha2-256-trunc254-padded': 0x1012,\n  'ripemd-128': 0x1052,\n  'ripemd-160': 0x1053,\n  'ripemd-256': 0x1054,\n  'ripemd-320': 0x1055,\n  'x11': 0x1100,\n  'p256-pub': 0x1200,\n  'p384-pub': 0x1201,\n  'p521-pub': 0x1202,\n  'ed448-pub': 0x1203,\n  'x448-pub': 0x1204,\n  'ed25519-priv': 0x1300,\n  'kangarootwelve': 0x1d01,\n  'sm3-256': 0x534d,\n  'blake2b-8': 0xb201,\n  'blake2b-16': 0xb202,\n  'blake2b-24': 0xb203,\n  'blake2b-32': 0xb204,\n  'blake2b-40': 0xb205,\n  'blake2b-48': 0xb206,\n  'blake2b-56': 0xb207,\n  'blake2b-64': 0xb208,\n  'blake2b-72': 0xb209,\n  'blake2b-80': 0xb20a,\n  'blake2b-88': 0xb20b,\n  'blake2b-96': 0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8': 0xb241,\n  'blake2s-16': 0xb242,\n  'blake2s-24': 0xb243,\n  'blake2s-32': 0xb244,\n  'blake2s-40': 0xb245,\n  'blake2s-48': 0xb246,\n  'blake2s-56': 0xb247,\n  'blake2s-64': 0xb248,\n  'blake2s-72': 0xb249,\n  'blake2s-80': 0xb24a,\n  'blake2s-88': 0xb24b,\n  'blake2s-96': 0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'skein256-8': 0xb301,\n  'skein256-16': 0xb302,\n  'skein256-24': 0xb303,\n  'skein256-32': 0xb304,\n  'skein256-40': 0xb305,\n  'skein256-48': 0xb306,\n  'skein256-56': 0xb307,\n  'skein256-64': 0xb308,\n  'skein256-72': 0xb309,\n  'skein256-80': 0xb30a,\n  'skein256-88': 0xb30b,\n  'skein256-96': 0xb30c,\n  'skein256-104': 0xb30d,\n  'skein256-112': 0xb30e,\n  'skein256-120': 0xb30f,\n  'skein256-128': 0xb310,\n  'skein256-136': 0xb311,\n  'skein256-144': 0xb312,\n  'skein256-152': 0xb313,\n  'skein256-160': 0xb314,\n  'skein256-168': 0xb315,\n  'skein256-176': 0xb316,\n  'skein256-184': 0xb317,\n  'skein256-192': 0xb318,\n  'skein256-200': 0xb319,\n  'skein256-208': 0xb31a,\n  'skein256-216': 0xb31b,\n  'skein256-224': 0xb31c,\n  'skein256-232': 0xb31d,\n  'skein256-240': 0xb31e,\n  'skein256-248': 0xb31f,\n  'skein256-256': 0xb320,\n  'skein512-8': 0xb321,\n  'skein512-16': 0xb322,\n  'skein512-24': 0xb323,\n  'skein512-32': 0xb324,\n  'skein512-40': 0xb325,\n  'skein512-48': 0xb326,\n  'skein512-56': 0xb327,\n  'skein512-64': 0xb328,\n  'skein512-72': 0xb329,\n  'skein512-80': 0xb32a,\n  'skein512-88': 0xb32b,\n  'skein512-96': 0xb32c,\n  'skein512-104': 0xb32d,\n  'skein512-112': 0xb32e,\n  'skein512-120': 0xb32f,\n  'skein512-128': 0xb330,\n  'skein512-136': 0xb331,\n  'skein512-144': 0xb332,\n  'skein512-152': 0xb333,\n  'skein512-160': 0xb334,\n  'skein512-168': 0xb335,\n  'skein512-176': 0xb336,\n  'skein512-184': 0xb337,\n  'skein512-192': 0xb338,\n  'skein512-200': 0xb339,\n  'skein512-208': 0xb33a,\n  'skein512-216': 0xb33b,\n  'skein512-224': 0xb33c,\n  'skein512-232': 0xb33d,\n  'skein512-240': 0xb33e,\n  'skein512-248': 0xb33f,\n  'skein512-256': 0xb340,\n  'skein512-264': 0xb341,\n  'skein512-272': 0xb342,\n  'skein512-280': 0xb343,\n  'skein512-288': 0xb344,\n  'skein512-296': 0xb345,\n  'skein512-304': 0xb346,\n  'skein512-312': 0xb347,\n  'skein512-320': 0xb348,\n  'skein512-328': 0xb349,\n  'skein512-336': 0xb34a,\n  'skein512-344': 0xb34b,\n  'skein512-352': 0xb34c,\n  'skein512-360': 0xb34d,\n  'skein512-368': 0xb34e,\n  'skein512-376': 0xb34f,\n  'skein512-384': 0xb350,\n  'skein512-392': 0xb351,\n  'skein512-400': 0xb352,\n  'skein512-408': 0xb353,\n  'skein512-416': 0xb354,\n  'skein512-424': 0xb355,\n  'skein512-432': 0xb356,\n  'skein512-440': 0xb357,\n  'skein512-448': 0xb358,\n  'skein512-456': 0xb359,\n  'skein512-464': 0xb35a,\n  'skein512-472': 0xb35b,\n  'skein512-480': 0xb35c,\n  'skein512-488': 0xb35d,\n  'skein512-496': 0xb35e,\n  'skein512-504': 0xb35f,\n  'skein512-512': 0xb360,\n  'skein1024-8': 0xb361,\n  'skein1024-16': 0xb362,\n  'skein1024-24': 0xb363,\n  'skein1024-32': 0xb364,\n  'skein1024-40': 0xb365,\n  'skein1024-48': 0xb366,\n  'skein1024-56': 0xb367,\n  'skein1024-64': 0xb368,\n  'skein1024-72': 0xb369,\n  'skein1024-80': 0xb36a,\n  'skein1024-88': 0xb36b,\n  'skein1024-96': 0xb36c,\n  'skein1024-104': 0xb36d,\n  'skein1024-112': 0xb36e,\n  'skein1024-120': 0xb36f,\n  'skein1024-128': 0xb370,\n  'skein1024-136': 0xb371,\n  'skein1024-144': 0xb372,\n  'skein1024-152': 0xb373,\n  'skein1024-160': 0xb374,\n  'skein1024-168': 0xb375,\n  'skein1024-176': 0xb376,\n  'skein1024-184': 0xb377,\n  'skein1024-192': 0xb378,\n  'skein1024-200': 0xb379,\n  'skein1024-208': 0xb37a,\n  'skein1024-216': 0xb37b,\n  'skein1024-224': 0xb37c,\n  'skein1024-232': 0xb37d,\n  'skein1024-240': 0xb37e,\n  'skein1024-248': 0xb37f,\n  'skein1024-256': 0xb380,\n  'skein1024-264': 0xb381,\n  'skein1024-272': 0xb382,\n  'skein1024-280': 0xb383,\n  'skein1024-288': 0xb384,\n  'skein1024-296': 0xb385,\n  'skein1024-304': 0xb386,\n  'skein1024-312': 0xb387,\n  'skein1024-320': 0xb388,\n  'skein1024-328': 0xb389,\n  'skein1024-336': 0xb38a,\n  'skein1024-344': 0xb38b,\n  'skein1024-352': 0xb38c,\n  'skein1024-360': 0xb38d,\n  'skein1024-368': 0xb38e,\n  'skein1024-376': 0xb38f,\n  'skein1024-384': 0xb390,\n  'skein1024-392': 0xb391,\n  'skein1024-400': 0xb392,\n  'skein1024-408': 0xb393,\n  'skein1024-416': 0xb394,\n  'skein1024-424': 0xb395,\n  'skein1024-432': 0xb396,\n  'skein1024-440': 0xb397,\n  'skein1024-448': 0xb398,\n  'skein1024-456': 0xb399,\n  'skein1024-464': 0xb39a,\n  'skein1024-472': 0xb39b,\n  'skein1024-480': 0xb39c,\n  'skein1024-488': 0xb39d,\n  'skein1024-496': 0xb39e,\n  'skein1024-504': 0xb39f,\n  'skein1024-512': 0xb3a0,\n  'skein1024-520': 0xb3a1,\n  'skein1024-528': 0xb3a2,\n  'skein1024-536': 0xb3a3,\n  'skein1024-544': 0xb3a4,\n  'skein1024-552': 0xb3a5,\n  'skein1024-560': 0xb3a6,\n  'skein1024-568': 0xb3a7,\n  'skein1024-576': 0xb3a8,\n  'skein1024-584': 0xb3a9,\n  'skein1024-592': 0xb3aa,\n  'skein1024-600': 0xb3ab,\n  'skein1024-608': 0xb3ac,\n  'skein1024-616': 0xb3ad,\n  'skein1024-624': 0xb3ae,\n  'skein1024-632': 0xb3af,\n  'skein1024-640': 0xb3b0,\n  'skein1024-648': 0xb3b1,\n  'skein1024-656': 0xb3b2,\n  'skein1024-664': 0xb3b3,\n  'skein1024-672': 0xb3b4,\n  'skein1024-680': 0xb3b5,\n  'skein1024-688': 0xb3b6,\n  'skein1024-696': 0xb3b7,\n  'skein1024-704': 0xb3b8,\n  'skein1024-712': 0xb3b9,\n  'skein1024-720': 0xb3ba,\n  'skein1024-728': 0xb3bb,\n  'skein1024-736': 0xb3bc,\n  'skein1024-744': 0xb3bd,\n  'skein1024-752': 0xb3be,\n  'skein1024-760': 0xb3bf,\n  'skein1024-768': 0xb3c0,\n  'skein1024-776': 0xb3c1,\n  'skein1024-784': 0xb3c2,\n  'skein1024-792': 0xb3c3,\n  'skein1024-800': 0xb3c4,\n  'skein1024-808': 0xb3c5,\n  'skein1024-816': 0xb3c6,\n  'skein1024-824': 0xb3c7,\n  'skein1024-832': 0xb3c8,\n  'skein1024-840': 0xb3c9,\n  'skein1024-848': 0xb3ca,\n  'skein1024-856': 0xb3cb,\n  'skein1024-864': 0xb3cc,\n  'skein1024-872': 0xb3cd,\n  'skein1024-880': 0xb3ce,\n  'skein1024-888': 0xb3cf,\n  'skein1024-896': 0xb3d0,\n  'skein1024-904': 0xb3d1,\n  'skein1024-912': 0xb3d2,\n  'skein1024-920': 0xb3d3,\n  'skein1024-928': 0xb3d4,\n  'skein1024-936': 0xb3d5,\n  'skein1024-944': 0xb3d6,\n  'skein1024-952': 0xb3d7,\n  'skein1024-960': 0xb3d8,\n  'skein1024-968': 0xb3d9,\n  'skein1024-976': 0xb3da,\n  'skein1024-984': 0xb3db,\n  'skein1024-992': 0xb3dc,\n  'skein1024-1000': 0xb3dd,\n  'skein1024-1008': 0xb3de,\n  'skein1024-1016': 0xb3df,\n  'skein1024-1024': 0xb3e0,\n  'poseidon-bls12_381-a2-fc1': 0xb401,\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402,\n  'zeroxcert-imprint-256': 0xce11,\n  'fil-commitment-unsealed': 0xf101,\n  'fil-commitment-sealed': 0xf102,\n  'holochain-adr-v0': 0x807124,\n  'holochain-adr-v1': 0x817124,\n  'holochain-key-v0': 0x947124,\n  'holochain-key-v1': 0x957124,\n  'holochain-sig-v0': 0xa27124,\n  'holochain-sig-v1': 0xa37124,\n  'skynet-ns': 0xb19910\n})\n\nmodule.exports = { baseTable }\n","\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n","module.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l || shift > 49) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\n","module.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  if (Number.MAX_SAFE_INTEGER && num > Number.MAX_SAFE_INTEGER) {\n    encode.bytes = 0\n    throw new RangeError('Could not encode varint')\n  }\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\n","'use strict'\n\n/** @typedef {__import__('./types').CodecFactory} CodecFactory */\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */\nconst rfc4648 = (bitsPerChar) => (alphabet) => {\n  return {\n    /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar)\n    }\n  }\n}\n\nmodule.exports = { rfc4648 }\n","'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {__import__('./types').CodecFactory} CodecFactory */\n/** @typedef {__import__(\"./types\").BaseName} BaseName */\n/** @typedef {__import__(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip leading spaces.\n    if (source[psz] === ' ') { return }\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip trailing spaces.\n    if (source[psz] === ' ') { return }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","'use strict'\n\n/** @typedef {__import__('./types').CodecFactory} CodecFactory */\n\n/**\n * @param {string} string\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {Uint8Array}\n */\nconst decode = (string, alphabet, bitsPerChar) => {\n  // Build the character lookup table:\n  /** @type {Record<string, number>} */\n  const codes = {}\n  for (let i = 0; i < alphabet.length; ++i) {\n    codes[alphabet[i]] = i\n  }\n\n  // Count the padding bytes:\n  let end = string.length\n  while (string[end - 1] === '=') {\n    --end\n  }\n\n  // Allocate the output:\n  const out = new Uint8Array((end * bitsPerChar / 8) | 0)\n\n  // Parse the data:\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  let written = 0 // Next byte to write\n  for (let i = 0; i < end; ++i) {\n    // Read one character from the string:\n    const value = codes[string[i]]\n    if (value === undefined) {\n      throw new SyntaxError('Invalid character ' + string[i])\n    }\n\n    // Append the bits to the buffer:\n    buffer = (buffer << bitsPerChar) | value\n    bits += bitsPerChar\n\n    // Write out some bits if the buffer has a byte's worth:\n    if (bits >= 8) {\n      bits -= 8\n      out[written++] = 0xff & (buffer >> bits)\n    }\n  }\n\n  // Verify that we have received just enough bits:\n  if (bits >= bitsPerChar || 0xff & (buffer << (8 - bits))) {\n    throw new SyntaxError('Unexpected end of data')\n  }\n\n  return out\n}\n\n/**\n * @param {Uint8Array} data\n * @param {string} alphabet\n * @param {number} bitsPerChar\n * @returns {string}\n */\nconst encode = (data, alphabet, bitsPerChar) => {\n  const pad = alphabet[alphabet.length - 1] === '='\n  const mask = (1 << bitsPerChar) - 1\n  let out = ''\n\n  let bits = 0 // Number of bits currently in the buffer\n  let buffer = 0 // Bits waiting to be written out, MSB first\n  for (let i = 0; i < data.length; ++i) {\n    // Slurp data into the buffer:\n    buffer = (buffer << 8) | data[i]\n    bits += 8\n\n    // Write out as much as we can:\n    while (bits > bitsPerChar) {\n      bits -= bitsPerChar\n      out += alphabet[mask & (buffer >> bits)]\n    }\n  }\n\n  // Partial character:\n  if (bits) {\n    out += alphabet[mask & (buffer << (bitsPerChar - bits))]\n  }\n\n  // Add padding characters until we hit a byte boundary:\n  if (pad) {\n    while ((out.length * bitsPerChar) & 7) {\n      out += '='\n    }\n  }\n\n  return out\n}\n\n/**\n * RFC4648 Factory\n *\n * @param {number} bitsPerChar\n * @returns {CodecFactory}\n */\nconst rfc4648 = (bitsPerChar) => (alphabet) => {\n  return {\n    /**\n     * @param {Uint8Array} input\n     * @returns {string}\n     */\n    encode (input) {\n      return encode(input, alphabet, bitsPerChar)\n    },\n    /**\n     * @param {string} input\n     * @returns {Uint8Array}\n     */\n    decode (input) {\n      return decode(input, alphabet, bitsPerChar)\n    }\n  }\n}\n\nmodule.exports = { rfc4648 }\n","'use strict'\n\nconst { encodeText } = require('./util')\n\n/** @typedef {__import__('./types').CodecFactory} CodecFactory */\n/** @typedef {__import__(\"./types\").BaseName} BaseName */\n/** @typedef {__import__(\"./types\").BaseCode} BaseCode */\n\n/**\n * Class to encode/decode in the supported Bases\n *\n */\nclass Base {\n  /**\n   * @param {BaseName} name\n   * @param {BaseCode} code\n   * @param {CodecFactory} factory\n   * @param {string} alphabet\n   */\n  constructor (name, code, factory, alphabet) {\n    this.name = name\n    this.code = code\n    this.codeBuf = encodeText(this.code)\n    this.alphabet = alphabet\n    this.codec = factory(alphabet)\n  }\n\n  /**\n   * @param {Uint8Array} buf\n   * @returns {string}\n   */\n  encode (buf) {\n    return this.codec.encode(buf)\n  }\n\n  /**\n   * @param {string} string\n   * @returns {Uint8Array}\n   */\n  decode (string) {\n    for (const char of string) {\n      if (this.alphabet && this.alphabet.indexOf(char) < 0) {\n        throw new Error(`invalid character '${char}' in '${string}'`)\n      }\n    }\n    return this.codec.decode(string)\n  }\n}\n\nmodule.exports = Base\n","'use strict'\n\n// @ts-ignore\nconst { TextEncoder, TextDecoder } = require('web-encoding')\n\nconst textDecoder = new TextDecoder()\n/**\n * @param {ArrayBufferView|ArrayBuffer} bytes\n * @returns {string}\n */\nconst decodeText = (bytes) => textDecoder.decode(bytes)\n\nconst textEncoder = new TextEncoder()\n/**\n * @param {string} text\n * @returns {Uint8Array}\n */\nconst encodeText = (text) => textEncoder.encode(text)\n\n/**\n * Returns a new Uint8Array created by concatenating the passed Arrays\n *\n * @param {Array<ArrayLike<number>>} arrs\n * @param {number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrs, length) {\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrs) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = { decodeText, encodeText, concat }\n","module.exports={\n  \"COMPRESSED_TYPE_INVALID\": \"compressed should be a boolean\",\n  \"EC_PRIVATE_KEY_TYPE_INVALID\": \"private key should be a Buffer\",\n  \"EC_PRIVATE_KEY_LENGTH_INVALID\": \"private key length is invalid\",\n  \"EC_PRIVATE_KEY_RANGE_INVALID\": \"private key range is invalid\",\n  \"EC_PRIVATE_KEY_TWEAK_ADD_FAIL\": \"tweak out of range or resulting private key is invalid\",\n  \"EC_PRIVATE_KEY_TWEAK_MUL_FAIL\": \"tweak out of range\",\n  \"EC_PRIVATE_KEY_EXPORT_DER_FAIL\": \"couldn't export to DER format\",\n  \"EC_PRIVATE_KEY_IMPORT_DER_FAIL\": \"couldn't import from DER format\",\n  \"EC_PUBLIC_KEYS_TYPE_INVALID\": \"public keys should be an Array\",\n  \"EC_PUBLIC_KEYS_LENGTH_INVALID\": \"public keys Array should have at least 1 element\",\n  \"EC_PUBLIC_KEY_TYPE_INVALID\": \"public key should be a Buffer\",\n  \"EC_PUBLIC_KEY_LENGTH_INVALID\": \"public key length is invalid\",\n  \"EC_PUBLIC_KEY_PARSE_FAIL\": \"the public key could not be parsed or is invalid\",\n  \"EC_PUBLIC_KEY_CREATE_FAIL\": \"private was invalid, try again\",\n  \"EC_PUBLIC_KEY_TWEAK_ADD_FAIL\": \"tweak out of range or resulting public key is invalid\",\n  \"EC_PUBLIC_KEY_TWEAK_MUL_FAIL\": \"tweak out of range\",\n  \"EC_PUBLIC_KEY_COMBINE_FAIL\": \"the sum of the public keys is not valid\",\n  \"ECDH_FAIL\": \"scalar was invalid (zero or overflow)\",\n  \"ECDSA_SIGNATURE_TYPE_INVALID\": \"signature should be a Buffer\",\n  \"ECDSA_SIGNATURE_LENGTH_INVALID\": \"signature length is invalid\",\n  \"ECDSA_SIGNATURE_PARSE_FAIL\": \"couldn't parse signature\",\n  \"ECDSA_SIGNATURE_PARSE_DER_FAIL\": \"couldn't parse DER signature\",\n  \"ECDSA_SIGNATURE_SERIALIZE_DER_FAIL\": \"couldn't serialize signature to DER format\",\n  \"ECDSA_SIGN_FAIL\": \"nonce generation function failed or private key is invalid\",\n  \"ECDSA_RECOVER_FAIL\": \"couldn't recover public key from signature\",\n  \"MSG32_TYPE_INVALID\": \"message should be a Buffer\",\n  \"MSG32_LENGTH_INVALID\": \"message length is invalid\",\n  \"OPTIONS_TYPE_INVALID\": \"options should be an Object\",\n  \"OPTIONS_DATA_TYPE_INVALID\": \"options.data should be a Buffer\",\n  \"OPTIONS_DATA_LENGTH_INVALID\": \"options.data length is invalid\",\n  \"OPTIONS_NONCEFN_TYPE_INVALID\": \"options.noncefn should be a Function\",\n  \"RECOVERY_ID_TYPE_INVALID\": \"recovery should be a Number\",\n  \"RECOVERY_ID_VALUE_INVALID\": \"recovery should have value between -1 and 4\",\n  \"TWEAK_TYPE_INVALID\": \"tweak should be a Buffer\",\n  \"TWEAK_LENGTH_INVALID\": \"tweak length is invalid\"\n}\n","'use strict'\nvar toString = Object.prototype.toString\n\n// TypeError\nexports.isArray = function (value, message) {\n  if (!Array.isArray(value)) throw TypeError(message)\n}\n\nexports.isBoolean = function (value, message) {\n  if (toString.call(value) !== '[object Boolean]') throw TypeError(message)\n}\n\nexports.isBuffer = function (value, message) {\n  if (!Buffer.isBuffer(value)) throw TypeError(message)\n}\n\nexports.isFunction = function (value, message) {\n  if (toString.call(value) !== '[object Function]') throw TypeError(message)\n}\n\nexports.isNumber = function (value, message) {\n  if (toString.call(value) !== '[object Number]') throw TypeError(message)\n}\n\nexports.isObject = function (value, message) {\n  if (toString.call(value) !== '[object Object]') throw TypeError(message)\n}\n\n// RangeError\nexports.isBufferLength = function (buffer, length, message) {\n  if (buffer.length !== length) throw RangeError(message)\n}\n\nexports.isBufferLength2 = function (buffer, length1, length2, message) {\n  if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message)\n}\n\nexports.isLengthGTZero = function (value, message) {\n  if (value.length === 0) throw RangeError(message)\n}\n\nexports.isNumberInInterval = function (number, x, y, message) {\n  if (number <= x || number >= y) throw RangeError(message)\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar bip66 = require('bip66')\n\nvar EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([\n  // begin\n  0x30, 0x81, 0xd3, 0x02, 0x01, 0x01, 0x04, 0x20,\n  // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // middle\n  0xa0, 0x81, 0x85, 0x30, 0x81, 0x82, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,\n  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,\n  0x21, 0x02, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,\n  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,\n  0x17, 0x98, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,\n  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x24, 0x03, 0x22, 0x00,\n  // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00\n])\n\nvar EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([\n  // begin\n  0x30, 0x82, 0x01, 0x13, 0x02, 0x01, 0x01, 0x04, 0x20,\n  // private key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  // middle\n  0xa0, 0x81, 0xa5, 0x30, 0x81, 0xa2, 0x02, 0x01, 0x01, 0x30, 0x2c, 0x06, 0x07, 0x2a, 0x86, 0x48,\n  0xcE, 0x3d, 0x01, 0x01, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xfE, 0xff, 0xff, 0xfc, 0x2f, 0x30, 0x06, 0x04, 0x01, 0x00, 0x04, 0x01, 0x07, 0x04,\n  0x41, 0x04, 0x79, 0xbE, 0x66, 0x7E, 0xf9, 0xdc, 0xbb, 0xac, 0x55, 0xa0, 0x62, 0x95, 0xcE, 0x87,\n  0x0b, 0x07, 0x02, 0x9b, 0xfc, 0xdb, 0x2d, 0xcE, 0x28, 0xd9, 0x59, 0xf2, 0x81, 0x5b, 0x16, 0xf8,\n  0x17, 0x98, 0x48, 0x3a, 0xda, 0x77, 0x26, 0xa3, 0xc4, 0x65, 0x5d, 0xa4, 0xfb, 0xfc, 0x0E, 0x11,\n  0x08, 0xa8, 0xfd, 0x17, 0xb4, 0x48, 0xa6, 0x85, 0x54, 0x19, 0x9c, 0x47, 0xd0, 0x8f, 0xfb, 0x10,\n  0xd4, 0xb8, 0x02, 0x21, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n  0xff, 0xff, 0xff, 0xff, 0xfE, 0xba, 0xaE, 0xdc, 0xE6, 0xaf, 0x48, 0xa0, 0x3b, 0xbf, 0xd2, 0x5E,\n  0x8c, 0xd0, 0x36, 0x41, 0x41, 0x02, 0x01, 0x01, 0xa1, 0x44, 0x03, 0x42, 0x00,\n  // public key\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n  0x00\n])\n\nexports.privateKeyExport = function (privateKey, publicKey, compressed) {\n  var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED)\n  privateKey.copy(result, compressed ? 8 : 9)\n  publicKey.copy(result, compressed ? 181 : 214)\n  return result\n}\n\nexports.privateKeyImport = function (privateKey) {\n  var length = privateKey.length\n\n  // sequence header\n  var index = 0\n  if (length < index + 1 || privateKey[index] !== 0x30) return\n  index += 1\n\n  // sequence length constructor\n  if (length < index + 1 || !(privateKey[index] & 0x80)) return\n\n  var lenb = privateKey[index] & 0x7f\n  index += 1\n  if (lenb < 1 || lenb > 2) return\n  if (length < index + lenb) return\n\n  // sequence length\n  var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0)\n  index += lenb\n  if (length < index + len) return\n\n  // sequence element 0: version number (=1)\n  if (length < index + 3 ||\n      privateKey[index] !== 0x02 ||\n      privateKey[index + 1] !== 0x01 ||\n      privateKey[index + 2] !== 0x01) {\n    return\n  }\n  index += 3\n\n  // sequence element 1: octet string, up to 32 bytes\n  if (length < index + 2 ||\n      privateKey[index] !== 0x04 ||\n      privateKey[index + 1] > 0x20 ||\n      length < index + 2 + privateKey[index + 1]) {\n    return\n  }\n\n  return privateKey.slice(index + 2, index + 2 + privateKey[index + 1])\n}\n\nexports.signatureExport = function (sigObj) {\n  var r = Buffer.concat([Buffer.from([0]), sigObj.r])\n  for (var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);\n\n  var s = Buffer.concat([Buffer.from([0]), sigObj.s])\n  for (var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);\n\n  return bip66.encode(r.slice(posR), s.slice(posS))\n}\n\nexports.signatureImport = function (sig) {\n  var r = Buffer.alloc(32, 0)\n  var s = Buffer.alloc(32, 0)\n\n  try {\n    var sigObj = bip66.decode(sig)\n    if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1)\n    if (sigObj.r.length > 32) throw new Error('R length is too long')\n    if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1)\n    if (sigObj.s.length > 32) throw new Error('S length is too long')\n  } catch (err) {\n    return\n  }\n\n  sigObj.r.copy(r, 32 - sigObj.r.length)\n  sigObj.s.copy(s, 32 - sigObj.s.length)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImportLax = function (sig) {\n  var r = Buffer.alloc(32, 0)\n  var s = Buffer.alloc(32, 0)\n\n  var length = sig.length\n  var index = 0\n\n  // sequence tag byte\n  if (sig[index++] !== 0x30) return\n\n  // sequence length byte\n  var lenbyte = sig[index++]\n  if (lenbyte & 0x80) {\n    index += lenbyte - 0x80\n    if (index > length) return\n  }\n\n  // sequence tag byte for r\n  if (sig[index++] !== 0x02) return\n\n  // length for r\n  var rlen = sig[index++]\n  if (rlen & 0x80) {\n    lenbyte = rlen - 0x80\n    if (index + lenbyte > length) return\n    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n    for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1) rlen = (rlen << 8) + sig[index]\n  }\n  if (rlen > length - index) return\n  var rindex = index\n  index += rlen\n\n  // sequence tag byte for s\n  if (sig[index++] !== 0x02) return\n\n  // length for s\n  var slen = sig[index++]\n  if (slen & 0x80) {\n    lenbyte = slen - 0x80\n    if (index + lenbyte > length) return\n    for (; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);\n    for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1) slen = (slen << 8) + sig[index]\n  }\n  if (slen > length - index) return\n  var sindex = index\n  index += slen\n\n  // ignore leading zeros in r\n  for (; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);\n  // copy r value\n  if (rlen > 32) return\n  var rvalue = sig.slice(rindex, rindex + rlen)\n  rvalue.copy(r, 32 - rvalue.length)\n\n  // ignore leading zeros in s\n  for (; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);\n  // copy s value\n  if (slen > 32) return\n  var svalue = sig.slice(sindex, sindex + slen)\n  svalue.copy(s, 32 - svalue.length)\n\n  return { r: r, s: s }\n}\n","'use strict'\nvar P1600_ROUND_CONSTANTS = [1, 0, 32898, 0, 32906, 2147483648, 2147516416, 2147483648, 32907, 0, 2147483649, 0, 2147516545, 2147483648, 32777, 2147483648, 138, 0, 136, 0, 2147516425, 0, 2147483658, 0, 2147516555, 0, 139, 2147483648, 32905, 2147483648, 32771, 2147483648, 32770, 2147483648, 128, 2147483648, 32778, 0, 2147483658, 2147483648, 2147516545, 2147483648, 32896, 2147483648, 2147483649, 0, 2147516424, 2147483648]\n\nexports.p1600 = function (s) {\n  for (var round = 0; round < 24; ++round) {\n    // theta\n    var lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40]\n    var hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41]\n    var lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42]\n    var hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43]\n    var lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44]\n    var hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45]\n    var lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46]\n    var hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47]\n    var lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48]\n    var hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49]\n\n    var lo = lo4 ^ (lo1 << 1 | hi1 >>> 31)\n    var hi = hi4 ^ (hi1 << 1 | lo1 >>> 31)\n    var t1slo0 = s[0] ^ lo\n    var t1shi0 = s[1] ^ hi\n    var t1slo5 = s[10] ^ lo\n    var t1shi5 = s[11] ^ hi\n    var t1slo10 = s[20] ^ lo\n    var t1shi10 = s[21] ^ hi\n    var t1slo15 = s[30] ^ lo\n    var t1shi15 = s[31] ^ hi\n    var t1slo20 = s[40] ^ lo\n    var t1shi20 = s[41] ^ hi\n    lo = lo0 ^ (lo2 << 1 | hi2 >>> 31)\n    hi = hi0 ^ (hi2 << 1 | lo2 >>> 31)\n    var t1slo1 = s[2] ^ lo\n    var t1shi1 = s[3] ^ hi\n    var t1slo6 = s[12] ^ lo\n    var t1shi6 = s[13] ^ hi\n    var t1slo11 = s[22] ^ lo\n    var t1shi11 = s[23] ^ hi\n    var t1slo16 = s[32] ^ lo\n    var t1shi16 = s[33] ^ hi\n    var t1slo21 = s[42] ^ lo\n    var t1shi21 = s[43] ^ hi\n    lo = lo1 ^ (lo3 << 1 | hi3 >>> 31)\n    hi = hi1 ^ (hi3 << 1 | lo3 >>> 31)\n    var t1slo2 = s[4] ^ lo\n    var t1shi2 = s[5] ^ hi\n    var t1slo7 = s[14] ^ lo\n    var t1shi7 = s[15] ^ hi\n    var t1slo12 = s[24] ^ lo\n    var t1shi12 = s[25] ^ hi\n    var t1slo17 = s[34] ^ lo\n    var t1shi17 = s[35] ^ hi\n    var t1slo22 = s[44] ^ lo\n    var t1shi22 = s[45] ^ hi\n    lo = lo2 ^ (lo4 << 1 | hi4 >>> 31)\n    hi = hi2 ^ (hi4 << 1 | lo4 >>> 31)\n    var t1slo3 = s[6] ^ lo\n    var t1shi3 = s[7] ^ hi\n    var t1slo8 = s[16] ^ lo\n    var t1shi8 = s[17] ^ hi\n    var t1slo13 = s[26] ^ lo\n    var t1shi13 = s[27] ^ hi\n    var t1slo18 = s[36] ^ lo\n    var t1shi18 = s[37] ^ hi\n    var t1slo23 = s[46] ^ lo\n    var t1shi23 = s[47] ^ hi\n    lo = lo3 ^ (lo0 << 1 | hi0 >>> 31)\n    hi = hi3 ^ (hi0 << 1 | lo0 >>> 31)\n    var t1slo4 = s[8] ^ lo\n    var t1shi4 = s[9] ^ hi\n    var t1slo9 = s[18] ^ lo\n    var t1shi9 = s[19] ^ hi\n    var t1slo14 = s[28] ^ lo\n    var t1shi14 = s[29] ^ hi\n    var t1slo19 = s[38] ^ lo\n    var t1shi19 = s[39] ^ hi\n    var t1slo24 = s[48] ^ lo\n    var t1shi24 = s[49] ^ hi\n\n    // rho & pi\n    var t2slo0 = t1slo0\n    var t2shi0 = t1shi0\n    var t2slo16 = (t1shi5 << 4 | t1slo5 >>> 28)\n    var t2shi16 = (t1slo5 << 4 | t1shi5 >>> 28)\n    var t2slo7 = (t1slo10 << 3 | t1shi10 >>> 29)\n    var t2shi7 = (t1shi10 << 3 | t1slo10 >>> 29)\n    var t2slo23 = (t1shi15 << 9 | t1slo15 >>> 23)\n    var t2shi23 = (t1slo15 << 9 | t1shi15 >>> 23)\n    var t2slo14 = (t1slo20 << 18 | t1shi20 >>> 14)\n    var t2shi14 = (t1shi20 << 18 | t1slo20 >>> 14)\n    var t2slo10 = (t1slo1 << 1 | t1shi1 >>> 31)\n    var t2shi10 = (t1shi1 << 1 | t1slo1 >>> 31)\n    var t2slo1 = (t1shi6 << 12 | t1slo6 >>> 20)\n    var t2shi1 = (t1slo6 << 12 | t1shi6 >>> 20)\n    var t2slo17 = (t1slo11 << 10 | t1shi11 >>> 22)\n    var t2shi17 = (t1shi11 << 10 | t1slo11 >>> 22)\n    var t2slo8 = (t1shi16 << 13 | t1slo16 >>> 19)\n    var t2shi8 = (t1slo16 << 13 | t1shi16 >>> 19)\n    var t2slo24 = (t1slo21 << 2 | t1shi21 >>> 30)\n    var t2shi24 = (t1shi21 << 2 | t1slo21 >>> 30)\n    var t2slo20 = (t1shi2 << 30 | t1slo2 >>> 2)\n    var t2shi20 = (t1slo2 << 30 | t1shi2 >>> 2)\n    var t2slo11 = (t1slo7 << 6 | t1shi7 >>> 26)\n    var t2shi11 = (t1shi7 << 6 | t1slo7 >>> 26)\n    var t2slo2 = (t1shi12 << 11 | t1slo12 >>> 21)\n    var t2shi2 = (t1slo12 << 11 | t1shi12 >>> 21)\n    var t2slo18 = (t1slo17 << 15 | t1shi17 >>> 17)\n    var t2shi18 = (t1shi17 << 15 | t1slo17 >>> 17)\n    var t2slo9 = (t1shi22 << 29 | t1slo22 >>> 3)\n    var t2shi9 = (t1slo22 << 29 | t1shi22 >>> 3)\n    var t2slo5 = (t1slo3 << 28 | t1shi3 >>> 4)\n    var t2shi5 = (t1shi3 << 28 | t1slo3 >>> 4)\n    var t2slo21 = (t1shi8 << 23 | t1slo8 >>> 9)\n    var t2shi21 = (t1slo8 << 23 | t1shi8 >>> 9)\n    var t2slo12 = (t1slo13 << 25 | t1shi13 >>> 7)\n    var t2shi12 = (t1shi13 << 25 | t1slo13 >>> 7)\n    var t2slo3 = (t1slo18 << 21 | t1shi18 >>> 11)\n    var t2shi3 = (t1shi18 << 21 | t1slo18 >>> 11)\n    var t2slo19 = (t1shi23 << 24 | t1slo23 >>> 8)\n    var t2shi19 = (t1slo23 << 24 | t1shi23 >>> 8)\n    var t2slo15 = (t1slo4 << 27 | t1shi4 >>> 5)\n    var t2shi15 = (t1shi4 << 27 | t1slo4 >>> 5)\n    var t2slo6 = (t1slo9 << 20 | t1shi9 >>> 12)\n    var t2shi6 = (t1shi9 << 20 | t1slo9 >>> 12)\n    var t2slo22 = (t1shi14 << 7 | t1slo14 >>> 25)\n    var t2shi22 = (t1slo14 << 7 | t1shi14 >>> 25)\n    var t2slo13 = (t1slo19 << 8 | t1shi19 >>> 24)\n    var t2shi13 = (t1shi19 << 8 | t1slo19 >>> 24)\n    var t2slo4 = (t1slo24 << 14 | t1shi24 >>> 18)\n    var t2shi4 = (t1shi24 << 14 | t1slo24 >>> 18)\n\n    // chi\n    s[0] = t2slo0 ^ (~t2slo1 & t2slo2)\n    s[1] = t2shi0 ^ (~t2shi1 & t2shi2)\n    s[10] = t2slo5 ^ (~t2slo6 & t2slo7)\n    s[11] = t2shi5 ^ (~t2shi6 & t2shi7)\n    s[20] = t2slo10 ^ (~t2slo11 & t2slo12)\n    s[21] = t2shi10 ^ (~t2shi11 & t2shi12)\n    s[30] = t2slo15 ^ (~t2slo16 & t2slo17)\n    s[31] = t2shi15 ^ (~t2shi16 & t2shi17)\n    s[40] = t2slo20 ^ (~t2slo21 & t2slo22)\n    s[41] = t2shi20 ^ (~t2shi21 & t2shi22)\n    s[2] = t2slo1 ^ (~t2slo2 & t2slo3)\n    s[3] = t2shi1 ^ (~t2shi2 & t2shi3)\n    s[12] = t2slo6 ^ (~t2slo7 & t2slo8)\n    s[13] = t2shi6 ^ (~t2shi7 & t2shi8)\n    s[22] = t2slo11 ^ (~t2slo12 & t2slo13)\n    s[23] = t2shi11 ^ (~t2shi12 & t2shi13)\n    s[32] = t2slo16 ^ (~t2slo17 & t2slo18)\n    s[33] = t2shi16 ^ (~t2shi17 & t2shi18)\n    s[42] = t2slo21 ^ (~t2slo22 & t2slo23)\n    s[43] = t2shi21 ^ (~t2shi22 & t2shi23)\n    s[4] = t2slo2 ^ (~t2slo3 & t2slo4)\n    s[5] = t2shi2 ^ (~t2shi3 & t2shi4)\n    s[14] = t2slo7 ^ (~t2slo8 & t2slo9)\n    s[15] = t2shi7 ^ (~t2shi8 & t2shi9)\n    s[24] = t2slo12 ^ (~t2slo13 & t2slo14)\n    s[25] = t2shi12 ^ (~t2shi13 & t2shi14)\n    s[34] = t2slo17 ^ (~t2slo18 & t2slo19)\n    s[35] = t2shi17 ^ (~t2shi18 & t2shi19)\n    s[44] = t2slo22 ^ (~t2slo23 & t2slo24)\n    s[45] = t2shi22 ^ (~t2shi23 & t2shi24)\n    s[6] = t2slo3 ^ (~t2slo4 & t2slo0)\n    s[7] = t2shi3 ^ (~t2shi4 & t2shi0)\n    s[16] = t2slo8 ^ (~t2slo9 & t2slo5)\n    s[17] = t2shi8 ^ (~t2shi9 & t2shi5)\n    s[26] = t2slo13 ^ (~t2slo14 & t2slo10)\n    s[27] = t2shi13 ^ (~t2shi14 & t2shi10)\n    s[36] = t2slo18 ^ (~t2slo19 & t2slo15)\n    s[37] = t2shi18 ^ (~t2shi19 & t2shi15)\n    s[46] = t2slo23 ^ (~t2slo24 & t2slo20)\n    s[47] = t2shi23 ^ (~t2shi24 & t2shi20)\n    s[8] = t2slo4 ^ (~t2slo0 & t2slo1)\n    s[9] = t2shi4 ^ (~t2shi0 & t2shi1)\n    s[18] = t2slo9 ^ (~t2slo5 & t2slo6)\n    s[19] = t2shi9 ^ (~t2shi5 & t2shi6)\n    s[28] = t2slo14 ^ (~t2slo10 & t2slo11)\n    s[29] = t2shi14 ^ (~t2shi10 & t2shi11)\n    s[38] = t2slo19 ^ (~t2slo15 & t2slo16)\n    s[39] = t2shi19 ^ (~t2shi15 & t2shi16)\n    s[48] = t2slo24 ^ (~t2slo20 & t2slo21)\n    s[49] = t2shi24 ^ (~t2shi20 & t2shi21)\n\n    // iota\n    s[0] ^= P1600_ROUND_CONSTANTS[round * 2]\n    s[1] ^= P1600_ROUND_CONSTANTS[round * 2 + 1]\n  }\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar inherits = require('inherits')\n\nmodule.exports = function (KeccakState) {\n  function Shake (rate, capacity, delimitedSuffix, options) {\n    Transform.call(this, options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  inherits(Shake, Transform)\n\n  Shake.prototype._transform = function (chunk, encoding, callback) {\n    var error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Shake.prototype._flush = function () {}\n\n  Shake.prototype._read = function (size) {\n    this.push(this.squeeze(size))\n  }\n\n  Shake.prototype.update = function (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Squeeze already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  Shake.prototype.squeeze = function (dataByteLength, encoding) {\n    if (!this._finalized) {\n      this._finalized = true\n      this._state.absorbLastFewBits(this._delimitedSuffix)\n    }\n\n    var data = this._state.squeeze(dataByteLength)\n    if (encoding !== undefined) data = data.toString(encoding)\n\n    return data\n  }\n\n  Shake.prototype._resetState = function () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  Shake.prototype._clone = function () {\n    var clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n\n  return Shake\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar Transform = require('stream').Transform\nvar inherits = require('inherits')\n\nmodule.exports = function (KeccakState) {\n  function Keccak (rate, capacity, delimitedSuffix, hashBitLength, options) {\n    Transform.call(this, options)\n\n    this._rate = rate\n    this._capacity = capacity\n    this._delimitedSuffix = delimitedSuffix\n    this._hashBitLength = hashBitLength\n    this._options = options\n\n    this._state = new KeccakState()\n    this._state.initialize(rate, capacity)\n    this._finalized = false\n  }\n\n  inherits(Keccak, Transform)\n\n  Keccak.prototype._transform = function (chunk, encoding, callback) {\n    var error = null\n    try {\n      this.update(chunk, encoding)\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Keccak.prototype._flush = function (callback) {\n    var error = null\n    try {\n      this.push(this.digest())\n    } catch (err) {\n      error = err\n    }\n\n    callback(error)\n  }\n\n  Keccak.prototype.update = function (data, encoding) {\n    if (!Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer')\n    if (this._finalized) throw new Error('Digest already called')\n    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding)\n\n    this._state.absorb(data)\n\n    return this\n  }\n\n  Keccak.prototype.digest = function (encoding) {\n    if (this._finalized) throw new Error('Digest already called')\n    this._finalized = true\n\n    if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix)\n    var digest = this._state.squeeze(this._hashBitLength / 8)\n    if (encoding !== undefined) digest = digest.toString(encoding)\n\n    this._resetState()\n\n    return digest\n  }\n\n  // remove result from memory\n  Keccak.prototype._resetState = function () {\n    this._state.initialize(this._rate, this._capacity)\n    return this\n  }\n\n  // because sometimes we need hash right now and little later\n  Keccak.prototype._clone = function () {\n    var clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options)\n    this._state.copy(clone._state)\n    clone._finalized = this._finalized\n\n    return clone\n  }\n\n  return Keccak\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1 = require('./secp256k1v3-adapter');\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\n/**\n * Returns the ECDSA signature of a message hash.\n */\nexports.ecsign = function (msgHash, privateKey, chainId) {\n    var sig = secp256k1.sign(msgHash, privateKey);\n    var recovery = sig.recovery;\n    var ret = {\n        r: sig.signature.slice(0, 32),\n        s: sig.signature.slice(32, 64),\n        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,\n    };\n    return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n    var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nexports.toRpcSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nexports.fromRpcSig = function (sig) {\n    var buf = bytes_1.toBuffer(sig);\n    // NOTE: with potential introduction of chainId this might need to be updated\n    if (buf.length !== 65) {\n        throw new Error('Invalid signature length');\n    }\n    var v = buf[64];\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: buf.slice(0, 32),\n        s: buf.slice(32, 64),\n    };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\n    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    var rBN = new BN(r);\n    var sBN = new BN(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexports.hashPersonalMessage = function (message) {\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n    return hash_1.keccak(Buffer.concat([prefix, message]));\n};\nfunction calculateSigRecovery(v, chainId) {\n    return chainId ? v - (2 * chainId + 35) : v - 27;\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === 0 || recovery === 1;\n}\n//# sourceMappingURL=signature.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;\nvar assert = require('assert');\nvar ethjsUtil = require('ethjs-util');\nvar secp256k1 = require('./secp256k1v3-adapter');\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\n/**\n * Returns a zero address.\n */\nexports.zeroAddress = function () {\n    var addressLength = 20;\n    var addr = bytes_1.zeros(addressLength);\n    return bytes_1.bufferToHex(addr);\n};\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nexports.isValidAddress = function (address) {\n    return /^0x[0-9a-fA-F]{40}$/.test(address);\n};\n/**\n * Checks if a given address is a zero address.\n */\nexports.isZeroAddress = function (address) {\n    var zeroAddr = exports.zeroAddress();\n    return zeroAddr === bytes_1.addHexPrefix(address);\n};\n/**\n * Returns a checksummed address.\n *\n * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details, consult EIP-1191.\n *\n * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly\n * used variation in Ethereum was without the chainId. This may change in the future.\n */\nexports.toChecksumAddress = function (address, eip1191ChainId) {\n    address = ethjsUtil.stripHexPrefix(address).toLowerCase();\n    var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';\n    var hash = hash_1.keccak(prefix + address).toString('hex');\n    var ret = '0x';\n    for (var i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nexports.isValidChecksumAddress = function (address, eip1191ChainId) {\n    return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nexports.generateAddress = function (from, nonce) {\n    from = bytes_1.toBuffer(from);\n    var nonceBN = new BN(nonce);\n    if (nonceBN.isZero()) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return hash_1.rlphash([from, null]).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nexports.generateAddress2 = function (from, salt, initCode) {\n    var fromBuf = bytes_1.toBuffer(from);\n    var saltBuf = bytes_1.toBuffer(salt);\n    var initCodeBuf = bytes_1.toBuffer(initCode);\n    assert(fromBuf.length === 20);\n    assert(saltBuf.length === 32);\n    var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));\n    return address.slice(-20);\n};\n/**\n * Returns true if the supplied address belongs to a precompiled account (Byzantium).\n */\nexports.isPrecompiled = function (address) {\n    var a = bytes_1.unpad(address);\n    return a.length === 1 && a[0] >= 1 && a[0] <= 8;\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nexports.isValidPrivate = function (privateKey) {\n    return secp256k1.privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n    }\n    if (!sanitize) {\n        return false;\n    }\n    return secp256k1.publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.pubToAddress = function (pubKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    pubKey = bytes_1.toBuffer(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);\n    }\n    assert(pubKey.length === 64);\n    // Only take the lower 160bits of the hash\n    return hash_1.keccak(pubKey).slice(-20);\n};\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToAddress = function (privateKey) {\n    return exports.publicToAddress(exports.privateToPublic(privateKey));\n};\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToPublic = function (privateKey) {\n    privateKey = bytes_1.toBuffer(privateKey);\n    // skip the type flag and use the X, Y points\n    return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n};\n/**\n * Converts a public key to the Ethereum format.\n */\nexports.importPublic = function (publicKey) {\n    publicKey = bytes_1.toBuffer(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);\n    }\n    return publicKey;\n};\n//# sourceMappingURL=account.js.map"]}