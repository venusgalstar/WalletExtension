{"version":3,"sources":["node_modules/@ngraveio/bc-ur/dist/bytewords.js","node_modules/@ngraveio/bc-ur/dist/fountainEncoder.js","node_modules/@ngraveio/bc-ur/dist/errors.js","node_modules/@ngraveio/bc-ur/dist/utils.js","node_modules/@ngraveio/bc-ur/dist/fountainDecoder.js","node_modules/@ngraveio/bc-ur/dist/cbor.js","node_modules/lodash/_baseIndexOf.js","node_modules/babel-runtime/node_modules/core-js/library/modules/_to-absolute-index.js","node_modules/babel-runtime/node_modules/core-js/library/modules/_object-create.js","node_modules/prop-types/checkPropTypes.js","node_modules/@babel/runtime/helpers/objectSpread2.js","node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/end-of-stream.js","node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/pipeline.js","node_modules/stream-http/node_modules/readable-stream/lib/_stream_passthrough.js","node_modules/stream-http/node_modules/readable-stream/lib/_stream_duplex.js","node_modules/stream-http/node_modules/readable-stream/lib/_stream_transform.js","node_modules/stream-http/node_modules/readable-stream/lib/_stream_writable.js","node_modules/stream-http/node_modules/readable-stream/lib/_stream_readable.js","node_modules/lodash/_isKeyable.js","node_modules/lodash/_hashDelete.js","node_modules/lodash/_hashGet.js","node_modules/lodash/_hashSet.js","node_modules/lodash/_hashHas.js","node_modules/lodash/_hashClear.js","node_modules/lodash/_baseToString.js","node_modules/lodash/_memoizeCapped.js","node_modules/lodash/_setCacheHas.js","node_modules/lodash/_setCacheAdd.js","node_modules/web3-provider-engine/node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/der.js","node_modules/web3-provider-engine/node_modules/ethereumjs-abi/node_modules/ethereumjs-util/dist/secp256k1v3-lib/index.js","node_modules/@ngraveio/bc-ur/dist/fountainUtils.js","node_modules/crc/lib/index.js","node_modules/cbor-sync/main.js","node_modules/lodash/_strictIndexOf.js","node_modules/lodash/_baseIsNaN.js","node_modules/lodash/_baseFindIndex.js","node_modules/lodash/_arrayMap.js","node_modules/babel-runtime/node_modules/core-js/library/modules/_object-dps.js","node_modules/prop-types/lib/ReactPropTypesSecret.js","node_modules/stream-http/node_modules/readable-stream/errors-browser.js","node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/destroy.js","node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/stream-browser.js","node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/state.js","node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/from-browser.js","node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/buffer_list.js","node_modules/stream-http/node_modules/readable-stream/lib/internal/streams/async_iterator.js","node_modules/lodash/_nativeCreate.js","node_modules/lodash/memoize.js","node_modules/@apocentre/alias-sampling/index.js","node_modules/@ngraveio/bc-ur/dist/xoshiro.js","node_modules/crc/lib/crc16.js","node_modules/crc/lib/crc8.js","node_modules/crc/lib/crc16_modbus.js","node_modules/crc/lib/crc16_ccitt.js","node_modules/crc/lib/crc24.js","node_modules/crc/lib/crcjam.js","node_modules/crc/lib/crc32.js","node_modules/crc/lib/crc8_1wire.js","node_modules/crc/lib/crc16_xmodem.js","node_modules/crc/lib/crc1.js","node_modules/crc/lib/crc16_kermit.js","node_modules/@ngraveio/bc-ur/node_modules/bignumber.js/bignumber.js","node_modules/jsbi/dist/jsbi-umd.js","node_modules/crc/lib/es6/crc16.js","node_modules/crc/lib/es6/crc8.js","node_modules/crc/lib/es6/crc16modbus.js","node_modules/crc/lib/es6/crc16ccitt.js","node_modules/crc/lib/es6/crc24.js","node_modules/crc/lib/es6/crcjam.js","node_modules/crc/lib/es6/crc32.js","node_modules/crc/lib/es6/crc81wire.js","node_modules/crc/lib/es6/crc16xmodem.js","node_modules/crc/lib/es6/crc1.js","node_modules/crc/lib/es6/crc16kermit.js","node_modules/crc/lib/es6/create_buffer.js","node_modules/crc/lib/es6/define_crc.js"],"names":["__importDefault","this","mod","__esModule","default","Object","defineProperty","exports","value","assert_1","require","utils_1","bytewordsLookUpTable","STYLES","getWord","index","slice","addCRC","string","getCRCHex","Buffer","from","encodeWithSeparator","word","separator","crcAppendedWord","reduce","result","w","join","encodeMinimal","byteword","BYTEWORD_LENGTH","getMinimalWord","_decode","wordLength","decodedString","split","partition","map","length","dim","Array","i","x","charCodeAt","y","toLowerCase","c1","c2","toString","decodeWord","body","bodyChecksum","checksum","decode","style","MINIMAL","STANDARD","URI","Error","encode","FountainEncoderPart","fountainUtils_1","cbor_1","constructor","_seqNum","_seqLength","_messageLength","_checksum","_fragment","messageLength","fragment","seqNum","seqLength","cbor","cborEncode","description","static","cborPayload","cborDecode","isBuffer","FountainEncoder","message","maxFragmentLength","firstSeqNum","minFragmentLength","fragmentLength","findNominalFragmentLength","_fragments","partitionMessage","toUint32","getCRC","fragmentsLength","fragments","isComplete","isSinglePart","mix","indexes","bufferXOR","alloc","nextPart","chooseFragments","mixed","maxFragmentCount","Math","ceil","fragmentCount","remaining","fill","push","InvalidChecksumError","InvalidSequenceComponentError","InvalidTypeError","InvalidPathLengthError","InvalidSchemeError","super","name","setDifference","arrayContains","arraysEqual","hasPrefix","isURType","intToBytes","sha256Hash","sha_js_1","crc_1","data","update","digest","s","n","match","RegExp","crc32","padStart","number","num","arr","ArrayBuffer","DataView","setUint32","type","every","_","c","prefix","indexOf","ar1","ar2","el","includes","v","filter","a","b","max","buffer","allocUnsafe","FountainDecoderPart","errors_1","_indexes","encoderPart","isSimple","FountainDecoder","undefined","expectedMessageLength","expectedChecksum","expectedFragmentLength","processedPartsCount","expectedPartIndexes","lastPartIndexes","queuedParts","receivedPartIndexes","mixedParts","simpleParts","validatePart","part","forEach","reducePartByPart","newIndexes","newFragment","reduceMixedBy","newMixed","mixedPart","reducedPart","key","processSimplePart","fragmentIndex","sortedParts","sort","joinFragments","error","processMixedPart","some","p2","acc","p","processQueuedItem","shift","receivePart","decoderPart","fromEncoderPart","Boolean","isSuccess","resultMessage","isFailure","resultError","expectedPartCount","getExpectedPartIndexes","getReceivedPartIndexes","getLastPartIndexes","estimatedPercentComplete","min","getProgress","concat","baseFindIndex","baseIsNaN","strictIndexOf","module","array","fromIndex","toInteger","anObject","dPs","enumBugKeys","IE_PROTO","Empty","createDict","iframeDocument","iframe","display","appendChild","src","contentWindow","document","open","write","close","F","create","O","Properties","checkPropTypes","typeSpecs","values","location","componentName","getStack","resetWarningCache","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","enumerable","apply","target","arguments","source","getOwnPropertyDescriptors","defineProperties","ERR_STREAM_PREMATURE_CLOSE","codes","noop","eos","stream","opts","callback","called","_len","args","_key","once","readable","writable","onlegacyfinish","onfinish","writableEnded","_writableState","finished","call","readableEnded","_readableState","endEmitted","onend","onerror","err","onclose","ended","onrequest","req","on","setHeader","abort","isRequest","removeListener","_require$codes","ERR_MISSING_ARGS","ERR_STREAM_DESTROYED","destroyer","reading","writing","closed","destroyed","destroy","fn","pipe","to","popCallback","streams","pop","isArray","destroys","PassThrough","Transform","options","prototype","_transform","chunk","encoding","cb","objectKeys","obj","Duplex","Readable","Writable","method","allowHalfOpen","process","nextTick","onEndNT","self","end","get","highWaterMark","getBuffer","set","ERR_METHOD_NOT_IMPLEMENTED","ERR_MULTIPLE_CALLBACK","ERR_TRANSFORM_ALREADY_TRANSFORMING","ERR_TRANSFORM_WITH_LENGTH_0","afterTransform","er","ts","_transformState","transforming","writecb","emit","writechunk","rs","needReadable","_read","bind","needTransform","writeencoding","sync","transform","flush","_flush","prefinish","_this","done","_write","_destroy","err2","CorkedRequest","state","next","entry","finish","corkReq","pendingcb","corkedRequestsFree","onCorkedFinish","WritableState","internalUtil","deprecate","Stream","OurUint8Array","global","Uint8Array","realHasInstance","destroyImpl","getHighWaterMark","ERR_INVALID_ARG_TYPE","ERR_STREAM_CANNOT_PIPE","ERR_STREAM_NULL_VALUES","ERR_STREAM_WRITE_AFTER_END","ERR_UNKNOWN_ENCODING","errorOrDestroy","nop","isDuplex","objectMode","writableObjectMode","finalCalled","needDrain","ending","noDecode","decodeStrings","defaultEncoding","corked","bufferProcessing","onwrite","writelen","onwriteStateUpdate","finishMaybe","errorEmitted","onwriteError","needFinish","bufferedRequest","clearBuffer","afterWrite","lastBufferedRequest","prefinished","emitClose","autoDestroy","bufferedRequestCount","writev","_writev","final","_final","doWrite","len","onwriteDrain","l","holder","count","allBuffers","isBuf","callFinal","need","rState","current","out","Symbol","hasInstance","Function","ret","_uint8ArrayToBuffer","writeAfterEnd","validChunk","newChunk","decodeChunk","last","writeOrBuffer","cork","uncork","setDefaultEncoding","endWritable","_undestroy","undestroy","ReadableState","EventEmitter","EElistenerCount","emitter","listeners","debug","debugUtil","debuglog","StringDecoder","createReadableStreamAsyncIterator","BufferList","ERR_STREAM_PUSH_AFTER_EOF","ERR_STREAM_UNSHIFT_AFTER_END_EVENT","kProxyEvents","readableObjectMode","pipes","pipesCount","flowing","emittedReadable","readableListening","resumeScheduled","paused","awaitDrain","readingMore","decoder","read","readableAddChunk","addToFront","skipChunkCheck","emitReadable","emitReadable_","onEofChunk","chunkInvalid","getPrototypeOf","addChunk","maybeReadMore","unshift","isPaused","setEncoding","enc","head","content","clear","MAX_HWM","howMuchToRead","computeNewHighWaterMark","flow","maybeReadMore_","updateReadableListening","listenerCount","resume","nReadingNextTick","resume_","fromList","first","consume","endReadable","endReadableNT","wState","xs","parseInt","nOrig","doRead","dest","pipeOpts","endFn","stdout","stderr","unpipe","onunpipe","unpipeInfo","hasUnpiped","ondrain","ondata","cleanedUp","pipeOnDrain","pause","event","prependListener","_events","dests","splice","ev","res","addListener","removeAllListeners","wrap","asyncIterator","_fromList","iterable","has","__data__","size","nativeCreate","hasOwnProperty","arrayMap","isSymbol","symbolProto","symbolToString","baseToString","memoize","func","cache","EC_PRIVKEY_EXPORT_DER_COMPRESSED","EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED","privateKeyExport","privateKey","publicKey","compressed","copy","privateKeyImport","lenb","signatureImportLax","signature","r","lenbyte","rlen","rindex","slen","sindex","rvalue","svalue","BN","ec","EC","ecparams","curve","d","ucmp","point","g","mul","toPublicKey","getX","getY","privateKeyModInverse","bn","isZero","invm","toArrayLike","signatureImport","sigObj","ecdhUnsafe","keyFromPublic","scalar","shared","pub","isOdd","shuffle","chooseDegree","xoshiro_1","randomSampler","seqLenth","rng","degreeProbabilities","nextDouble","items","nextInt","item","seed","degree","crc1","crc8","crc81wire","crc16","crc16ccitt","crc16modbus","crc16xmodem","crc16kermit","crc24","crcjam","factory","define","amd","CBOR","BinaryHex","hex","$hex","format","encoded","substring","decodeURIComponent","String","fromCharCode","fromLatinString","latinString","pair","fromUtf8String","utf8String","encodeURIComponent","charAt","hexPair","semanticEncoders","semanticDecoders","notImplemented","label","Reader","Writer","valueFromHeader","header","reader","readByte","readUint16","readUint32","readUint64","writeHeader","writer","firstByte","writeByte","writeUint16","writeUint32","writeUint64","peekByte","readChunk","readFloat16","half","exponent","mantissa","negative","Infinity","NaN","magnitude","pow","readFloat32","intValue","readFloat64","int1","writeFloat16","writeFloat32","writeFloat64","floor","writeString","canWriteBinary","writeBinary","stopCode","decodeReader","readHeaderRaw","arrayLength","objResult","tag","JSON","stringify","encodeWriter","replacement","toCBOR","writeHeaderRaw","api","config","useToJSON","toJSON","readerFunctions","writerFunctions","addWriter","writerFunction","f","addReader","readerFunction","addSemanticEncode","addSemanticDecode","BufferReader","pos","BufferWriter","stringFormat","byteLength","defaultBufferLength","latestBuffer","latestBufferOffset","completeBuffers","HexReader","HexWriter","finalFormat","readUInt16BE","readUInt32BE","readFloatBE","readDoubleBE","writeFloatBE","writeBuffer","writeDoubleBE","lengthFunc","TypeError","offset","lengthFunction","Date","toISOString","isoString","predicate","fromRight","iteratee","dP","getKeys","P","createErrorType","code","Base","NodeError","_Base","subClass","superClass","arg1","arg2","arg3","getMessage","__proto__","oneOf","expected","thing","actual","determiner","search","msg","substr","replace","str","this_len","endsWith","start","arg","emitErrorAndCloseNT","emitErrorNT","emitCloseNT","readableDestroyed","writableDestroyed","ERR_INVALID_OPT_VALUE","duplexKey","hwm","highWaterMarkFrom","isFinite","_defineProperty","configurable","_defineProperties","props","descriptor","inspect","custom","instance","Constructor","_classCallCheck","tail","protoProps","staticProps","hasStrings","_getString","_getBuffer","nb","buf","_objectSpread","depth","customInspect","_Object$setPrototypeO","kLastResolve","kLastReject","kError","kEnded","kLastPromise","kHandlePromise","kStream","createIterResult","readAndResolve","iter","resolve","onReadable","AsyncIteratorPrototype","ReadableStreamAsyncIteratorPrototype","setPrototypeOf","Promise","reject","promise","lastPromise","then","wrapForNext","_this2","_Object$create","iterator","getNative","MapCache","resolver","memoized","Cache","Sample","probabilities","outcomes","alias","prob","indexedOutcomes","random","precomputeAlias","numOfSamples","sum","nS","nL","S","L","o","randomInt","bignumber_js_1","jsbi_1","rotl","k","bitwiseXor","asUintN","leftShift","BigInt","signedRightShift","subtract","roll","div","MAX_UINT64","low","high","toNumber","nextByte","nextData","setS","bitwiseOr","multiply","t","globalObject","BigNumber","isNumeric","mathceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","bitFloor","coeffToString","z","j","compare","xc","yc","e","intCheck","toExponential","toFixedPoint","zs","clone","configObject","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabet","caseChanged","isNum","_isBigNumber","test","round","DEBUG","toUpperCase","rm","id","c0","ne","maxOrMin","m","normalise","sd","ni","rd","pows10","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","lt","minimum","gt","dp","rand","Uint32Array","plus","decimal","toBaseOut","baseIn","baseOut","arrL","reverse","sign","callerIsToString","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","isNaN","p1","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","times","integerValue","isEqualTo","eq","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","minus","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","toFraction","md","d0","d1","d2","exp","n0","n1","toPrecision","window","clz32","__kMaxLength","RangeError","Number","__zero","__isOneDigitInt","__oneDigit","__fromDouble","__fromString","SyntaxError","__toPrimitive","toDebugString","__toStringBasePowerOfTwo","__toStringGeneric","__unsignedDigit","__digit","__clz30","u","h","__decideRounding","__kBitConversionInts","__kBitConversionDouble","__copy","__absoluteSubOne","__trim","__absoluteAddOne","unaryMinus","__kMaxLengthBits","__initializeDigits","__setDigit","__clzmsd","__multiplyAccumulate","__absoluteCompare","__absoluteDivSmall","__absoluteDivLarge","__absoluteModSmall","__absoluteAdd","__absoluteSub","__rightShiftByAbsolute","__leftShiftByAbsolute","__compareToBigInt","equal","__absoluteAnd","__absoluteOr","__absoluteAndNot","__absoluteXor","__truncateToNBits","__truncateAndSubFromPowerOfTwo","__toNumeric","__isBigInt","add","__compare","EQ","__equalToNumber","__isWhitespace","__kMaxBitsPerChar","__kBitsPerCharTableMultiplier","__kBitsPerCharTableShift","__fillFromParts","D","__inplaceMultiplyAdd","__kConversionChars","exponentiate","__halfDigit","__setHalfDigit","quotient","remainder","__unequalSign","__absoluteGreater","__absoluteLess","__compareToDouble","__comparisonResultToBool","__compareToNumber","__setDigitGrow","__imul","__halfDigitLength","__clz15","__specialLeftShift","__internalMultiplyAdd","__inplaceSub","__inplaceAdd","__inplaceRightShift","__toShiftAmount","__rightShiftByMaximum","toPrimitive","__kBitConversionBuffer","Float64Array","Int32Array","log","LN2","imul","JSBI","_buffer","_create_buffer2","_interopRequireDefault","_define_crc2","TABLE","previous","crc","byte","accum","createBuffer","allocUnsafeSlow","val","model","calc","signed","unsigned"],"mappings":"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SAAAmH,UA0BAsD,EAAApN,QAhBA,SAAAmiB,EAAAliB,GAEA,GAAA,iBAAAA,EACA,OAAAA,EAEA,GAAAmT,EAAAnT,GAEA,OAAA8hB,EAAA9hB,EAAAkiB,GAAA,GAEA,GAAAH,EAAA/hB,GACA,OAAAiiB,EAAAA,EAAA7Q,KAAApR,GAAA,GAEA,IAAAmB,EAAAnB,EAAA,GACA,MAAA,KAAAmB,GAAA,EAAAnB,IA3BA,SA2BA,KAAAmB,sNCjCA,IAAAghB,EAAAjiB,EAAA,aAyBAiN,EAAApN,QAZA,SAAAqiB,GACA,IAAAjhB,EAAAghB,EAAAC,GAAA,SAAAlX,GAIA,OAfA,MAYAmX,EAAAV,MACAU,EAAA5D,QAEAvT,KAGAmX,EAAAlhB,EAAAkhB,MACA,OAAAlhB,uMCTAgM,EAAApN,QAJA,SAAAC,GACA,OAAAP,KAAAiiB,SAAAD,IAAAzhB,sMCQAmN,EAAApN,QALA,SAAAC,GAEA,OADAP,KAAAiiB,SAAA9M,IAAA5U,EAbA,6BAcAP,4OCZAI,OAAAC,eAAAC,EAAA,aAAA,CAAAC,OAAA,IACA,IAAAsiB,EAAA1hB,EAAAC,KAAA,CAEA,GACA,IACA,IACA,EACA,EACA,EACA,EACA,GAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,IACA,IACA,IACA,GACA,IACA,IACA,EACA,EACA,EACA,GACA,GACA,EACA,EACA,GACA,IACA,GACA,IACA,GACA,EACA,EACA,EACA,GACA,EACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,GACA,IACA,IACA,IACA,GACA,EACA,EACA,IACA,IACA,IACA,GACA,IACA,GACA,IACA,GACA,IACA,IACA,GACA,GACA,IACA,GACA,IACA,EACA,GACA,EACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,GACA,IACA,IACA,GACA,IACA,IACA,GACA,GACA,GACA,EACA,EACA,EACA,IACA,GACA,EACA,GACA,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEA0hB,EAAA3hB,EAAAC,KAAA,CAEA,GACA,IACA,EACA,GACA,EACA,EACA,EACA,EACA,GAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAEA,IACA,IACA,IACA,GACA,IACA,IACA,EACA,EACA,EACA,GACA,GACA,EACA,EACA,GACA,IACA,GACA,IACA,GACA,EACA,EACA,EACA,GACA,EACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,GACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,GACA,EACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,GACA,IACA,IACA,IACA,GACA,EACA,EACA,IACA,IACA,IACA,GACA,IACA,GACA,IACA,GACA,IACA,IACA,GACA,GACA,IACA,GACA,IACA,GACA,GACA,IACA,IACA,GACA,IACA,IACA,IACA,GACA,IACA,IACA,IACA,GACA,GACA,EACA,IACA,IACA,GACA,IACA,GACA,IACA,IACA,GACA,GACA,IACA,GACA,IACA,IACA,IACA,GACA,IACA,IACA,EACA,GACA,EACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACA,IACA,GACA,IACA,IACA,GACA,IACA,IACA,GACA,GACA,GACA,EACA,EACA,EACA,IACA,GACA,EACA,GACA,EAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,IAEAd,EAAAyiB,iBAAA,SAAAC,EAAAC,EAAAC,QACA,IAAAA,IAAAA,GAAA,GACA,IAAAxhB,EAAAP,EAAAC,KAAA8hB,EAAAL,EAAAC,GAGA,OAFAE,EAAAG,KAAAzhB,EAAAwhB,EAAA,EAAA,GACAD,EAAAE,KAAAzhB,EAAAwhB,EAAA,IAAA,KACAxhB,GAEApB,EAAA8iB,iBAAA,SAAAJ,GACA,IAAAzgB,EAAAygB,EAAAzgB,OAEAzB,EAAA,EACA,GAAAyB,EAAAzB,EAAA,GAAA,KAAAkiB,EAAAliB,GACA,OAAA,KAGA,GAAAyB,GAFAzB,GAAA,GAEA,KAAA,IAAAkiB,EAAAliB,IACA,OAAA,KACA,IAAAuiB,EAAA,IAAAL,EAAAliB,GAEA,GAAAuiB,EAAA,GAAAA,EAAA,EACA,OAAA,KACA,GAAA9gB,GAHAzB,GAAA,GAGAuiB,EACA,OAAA,KAEA,IAAA5I,EAAAuI,EAAAliB,EAAAuiB,EAAA,IAAAA,EAAA,EAAAL,EAAAliB,EAAAuiB,EAAA,IAAA,EAAA,GAEA,OAAA9gB,GADAzB,GAAAuiB,GACA5I,GAGAlY,EAAAzB,EAAA,GACA,IAAAkiB,EAAAliB,IACA,IAAAkiB,EAAAliB,EAAA,IACA,IAAAkiB,EAAAliB,EAAA,IAKAyB,GAFAzB,GAAA,GAEA,GACA,IAAAkiB,EAAAliB,IACAkiB,EAAAliB,EAAA,GAAA,IACAyB,EAAAzB,EAAA,EAAAkiB,EAAAliB,EAAA,GAbA,KAgBAkiB,EAAAjiB,MAAAD,EAAA,EAAAA,EAAA,EAAAkiB,EAAAliB,EAAA,KAEAR,EAAAgjB,mBAAA,SAAAC,GACA,IAAAC,EAAAriB,EAAAgF,MAAA,GAAA,GACA8B,EAAA9G,EAAAgF,MAAA,GAAA,GACA5D,EAAAghB,EAAAhhB,OACAzB,EAAA,EAEA,GAAA,KAAAyiB,EAAAziB,KACA,OAAA,KAGA,IAAA2iB,EAAAF,EAAAziB,KACA,GAAA,IAAA2iB,IACA3iB,GAAA2iB,EAAA,KACAlhB,EACA,OAAA,KAIA,GAAA,IAAAghB,EAAAziB,KACA,OAAA,KAGA,IAAA4iB,EAAAH,EAAAziB,KACA,GAAA,IAAA4iB,EAAA,CAEA,GAAA5iB,GADA2iB,EAAAC,EAAA,KACAnhB,EACA,OAAA,KAEA,KAAAkhB,EAAA,GAAA,IAAAF,EAAAziB,GAAAA,GAAA,EAAA2iB,GAAA,GAEA,IAAAC,EAAA,EAAAD,EAAA,EAAA3iB,GAAA,EAAA2iB,GAAA,EACAC,GAAAA,GAAA,GAAAH,EAAAziB,GAEA,GAAA4iB,EAAAnhB,EAAAzB,EACA,OAAA,KAEA,IAAA6iB,EAAA7iB,EAGA,GAFAA,GAAA4iB,EAEA,IAAAH,EAAAziB,KACA,OAAA,KAGA,IAAA8iB,EAAAL,EAAAziB,KACA,GAAA,IAAA8iB,EAAA,CAEA,GAAA9iB,GADA2iB,EAAAG,EAAA,KACArhB,EACA,OAAA,KAEA,KAAAkhB,EAAA,GAAA,IAAAF,EAAAziB,GAAAA,GAAA,EAAA2iB,GAAA,GAEA,IAAAG,EAAA,EAAAH,EAAA,EAAA3iB,GAAA,EAAA2iB,GAAA,EACAG,GAAAA,GAAA,GAAAL,EAAAziB,GAEA,GAAA8iB,EAAArhB,EAAAzB,EACA,OAAA,KAEA,IAAA+iB,EAAA/iB,EAGA,IAFAA,GAAA8iB,EAEAF,EAAA,GAAA,IAAAH,EAAAI,GAAAD,GAAA,EAAAC,GAAA,GAGA,GAAAD,EAAA,GACA,OAAA,KAEA,IAAAI,EAAAP,EAAAxiB,MAAA4iB,EAAAA,EAAAD,GAGA,IAFAI,EAAAX,KAAAK,EAAA,GAAAM,EAAAvhB,QAEAqhB,EAAA,GAAA,IAAAL,EAAAM,GAAAD,GAAA,EAAAC,GAAA,GAGA,GAAAD,EAAA,GACA,OAAA,KAEA,IAAAG,EAAAR,EAAAxiB,MAAA8iB,EAAAA,EAAAD,GAEA,OADAG,EAAAZ,KAAAlb,EAAA,GAAA8b,EAAAxhB,QACA,CAAAihB,EAAAA,EAAAvb,EAAAA,8YCpnBA7H,OAAAC,eAAAC,EAAA,aAAA,CAAAC,OAAA,IACA,IAAAyjB,EAAAvjB,EAAA,SAEAwjB,EAAA,IAAAC,EADAzjB,EAAA,YAAAwjB,IACA,aACAE,EAAAF,EAAAG,MACA9jB,EAAAyiB,iBAAA,SAAAC,EAAAE,QACA,IAAAA,IAAAA,GAAA,GACA,IAAAmB,EAAA,IAAAL,EAAAhB,GACA,GAAAqB,EAAAC,KAAAH,EAAAjc,IAAA,EACA,MAAA,IAAAvE,MAAA,iCAEA,IAAA4gB,EAAAN,EAAAO,EAAAC,IAAAJ,GACA,OAAAK,EAAAH,EAAAI,OAAAJ,EAAAK,OAAA1B,IAEA5iB,EAAAukB,qBAAA,SAAA7B,GACA,IAAA8B,EAAA,IAAAd,EAAAhB,GACA,GAAA8B,EAAAR,KAAAH,EAAAjc,IAAA,GAAA4c,EAAAC,SACA,MAAA,IAAAphB,MAAA,gCAEA,OAAAmhB,EAAAE,KAAAb,EAAAjc,GAAA+c,YAAA9jB,EAAA,KAAA,KAEAb,EAAA4kB,gBAAA,SAAAC,GACA,IAAA3B,EAAA,IAAAQ,EAAAmB,EAAA3B,GACAA,EAAAc,KAAAH,EAAAjc,IAAA,IACAsb,EAAA,IAAAQ,EAAA,IAEA,IAAA/b,EAAA,IAAA+b,EAAAmB,EAAAld,GAIA,OAHAA,EAAAqc,KAAAH,EAAAjc,IAAA,IACAD,EAAA,IAAA+b,EAAA,IAEA7iB,EAAAmM,OAAA,CAAAkW,EAAAyB,YAAA9jB,EAAA,KAAA,IAAA8G,EAAAgd,YAAA9jB,EAAA,KAAA,OAEAb,EAAA8kB,WAAA,SAAAnC,EAAAD,EAAAE,QACA,IAAAA,IAAAA,GAAA,GACA,IAAAqB,EAAAN,EAAAoB,cAAApC,GACAqC,EAAA,IAAAtB,EAAAhB,GACA,GAAAsC,EAAAhB,KAAAH,EAAAjc,IAAA,GAAAod,EAAAP,SACA,MAAA,IAAAphB,MAAA,yCAEA,IAAA4hB,EAAAhB,EAAAiB,IAAAf,IAAAa,GACA,OAAAZ,EAAAa,EAAAZ,OAAAY,EAAAX,OAAA1B,IAEA,IAAAwB,EAAA,SAAA/hB,EAAAE,EAAAqgB,GACA,IAAAD,EAYA,OAXAC,IACAD,EAAA9hB,EAAAgF,MAAA,KACA,GAAAtD,EAAA4iB,QAAA,EAAA,EACA9iB,EAAAsiB,YAAA9jB,EAAA,KAAA,IAAAgiB,KAAAF,EAAA,MAGAA,EAAA9hB,EAAAgF,MAAA,KACA,GAAA,EACAxD,EAAAsiB,YAAA9jB,EAAA,KAAA,IAAAgiB,KAAAF,EAAA,GACApgB,EAAAoiB,YAAA9jB,EAAA,KAAA,IAAAgiB,KAAAF,EAAA,KAEAA,obCzDA,IAAAljB,EAAAC,MAAAA,KAAAD,iBAAA,SAAAE,GACA,OAAAA,GAAAA,EAAAC,WAAAD,EAAA,CAAAE,QAAAF,IAEAG,OAAAC,eAAAC,EAAA,aAAA,CAAAC,OAAA,IACAD,EAAA+F,gBAAA/F,EAAAolB,QAAAplB,EAAAqlB,kBAAA,EACA,MAAAjlB,EAAAD,EAAA,WACAmlB,EAAA7lB,EAAAU,EAAA,cACAolB,EAAAplB,EAAA,6BAMAH,EAAAqlB,aALA,CAAAG,EAAAC,KACA,MAAAC,EAAA,IAAA,IAAAvjB,MAAAqjB,IAAAxjB,KAAA,CAAAyG,EAAAjI,IAAA,GAAAA,EAAA,KAEA,OADA+kB,EAAAG,EAAA,KAAAD,EAAAE,YACA/O,OAAA,GAeA5W,EAAAolB,QAZA,CAAAQ,EAAAH,KACA,IAAApf,EAAA,IAAAuf,GACAxkB,EAAA,GACA,KAAAiF,EAAApE,OAAA,GAAA,CACA,IAAAzB,EAAAilB,EAAAI,QAAA,EAAAxf,EAAApE,OAAA,GACA6jB,EAAAzf,EAAA7F,GAEA6F,EAAA4a,OAAAzgB,EAAA,GACAY,EAAAmF,KAAAuf,GAEA,OAAA1kB,GAmBApB,EAAA+F,gBAhBA,CAAA7B,EAAAC,EAAApB,KAIA,GAAAmB,GAAAC,EACA,MAAA,CAAAD,EAAA,GAEA,CACA,MAAA6hB,EAAAllB,EAAAmM,OAAA,CAAA5M,EAAAgH,WAAAlD,GAAA9D,EAAAgH,WAAArE,KACA0iB,EAAA,IAAAH,EAAAzlB,QAAAkmB,GACAC,EAAAhmB,EAAAqlB,aAAAlhB,EAAAshB,GACA9f,EAAA,IAAA,IAAAxD,MAAAgC,IAAAnC,KAAA,CAAAyG,EAAAjI,IAAAA,IAEA,OADAR,EAAAolB,QAAAzf,EAAA8f,GACAhlB,MAAA,EAAAulB,+cCvCA5Y,EAAApN,QAAA,CACAimB,KAAA9lB,EAAA,UACA+lB,KAAA/lB,EAAA,UACAgmB,UAAAhmB,EAAA,gBACAimB,MAAAjmB,EAAA,WACAkmB,WAAAlmB,EAAA,iBACAmmB,YAAAnmB,EAAA,kBACAomB,YAAApmB,EAAA,kBACAqmB,YAAArmB,EAAA,kBACAsmB,MAAAtmB,EAAA,WACA4H,MAAA5H,EAAA,WACAumB,OAAAvmB,EAAA,2OCbA,SAAAqX,EAAAmP,GACA,mBAAAC,QAAAA,OAAAC,IACAD,OAAA,GAAAD,QACA,IAAAvZ,GAAAA,EAAApN,QACAoN,EAAApN,QAAA2mB,IAEAnP,EAAAsP,KAAAH,IANA,CAQAjnB,MAAA,WACA,IAAAonB,EAAA,WACA,SAAAC,EAAAC,GACAtnB,KAAAunB,KAAAD,EAEAD,EAAAtT,UAAA,CACAxR,OAAA,WACA,OAAAvC,KAAAunB,KAAAhlB,OAAA,GAEAU,SAAA,SAAAukB,GACA,IAAAA,GAAA,QAAAA,GAAA,KAAAA,EAAA,OAAAxnB,KAAAunB,KACA,GAAA,UAAAC,EAAA,CAEA,IADA,IAAAC,EAAA,GACA/kB,EAAA,EAAAA,EAAA1C,KAAAunB,KAAAhlB,OAAAG,GAAA,EACA+kB,GAAA,IAAAznB,KAAAunB,KAAAG,UAAAhlB,EAAAA,EAAA,GAEA,OAAAilB,mBAAAF,GAEA,GAAA,UAAAD,EAAA,CAEA,IADAC,EAAA,GACA/kB,EAAA,EAAAA,EAAA1C,KAAAunB,KAAAhlB,OAAAG,GAAA,EACA+kB,EAAA5gB,KAAAqZ,SAAAlgB,KAAAunB,KAAAG,UAAAhlB,EAAAA,EAAA,GAAA,KAEA,OAAAklB,OAAAC,aAAA3X,MAAA0X,OAAAH,GAEA,MAAA,IAAA9jB,MAAA,wBAAA6jB,KAGAH,EAAAS,gBAAA,SAAAC,GAEA,IADA,IAAAT,EAAA,GACA5kB,EAAA,EAAAA,EAAAqlB,EAAAxlB,OAAAG,IAAA,CACA,IAAAslB,EAAAD,EAAAnlB,WAAAF,GAAAO,SAAA,IACA,IAAA+kB,EAAAzlB,SAAAylB,EAAA,IAAAA,GACAV,GAAAU,EAEA,OAAA,IAAAX,EAAAC,IAEAD,EAAAY,eAAA,SAAAC,GAGA,IAFA,IAAAT,EAAAU,mBAAAD,GACAZ,EAAA,GACA5kB,EAAA,EAAAA,EAAA+kB,EAAAllB,OAAAG,IACA,GAAA,MAAA+kB,EAAAW,OAAA1lB,GACA4kB,GAAAG,EAAAC,UAAAhlB,EAAA,EAAAA,EAAA,GACAA,GAAA,MACA,CACA,IAAA2lB,EAAAZ,EAAA7kB,WAAAF,GAAAO,SAAA,IACAolB,EAAA9lB,OAAA,IAAA8lB,EAAA,IAAAA,GACAf,GAAAe,EAGA,OAAA,IAAAhB,EAAAC,IAGA,IAAAgB,EAAA,GACAC,EAAA,GAEAC,EAAA,SAAAC,GACA,OAAA,WACA,MAAA,IAAA9kB,MAAA8kB,EAAA,sBAIA,SAAAC,KA0DA,SAAAC,KAoCA,SAAAC,EAAAC,EAAAC,GACA,IAAAvoB,EAAAsoB,EAAAtoB,MACA,OAAAA,EAAA,GACAA,EACA,IAAAA,EACAuoB,EAAAC,WACA,IAAAxoB,EACAuoB,EAAAE,aACA,IAAAzoB,EACAuoB,EAAAG,aACA,IAAA1oB,EACAuoB,EAAAI,aACA,IAAA3oB,EAEA,UAEAioB,EAAA,oBAAAjoB,EAAAioB,GAOA,SAAAW,EAAAtgB,EAAAtI,EAAA6oB,GACA,IAAAC,EAAAxgB,GAAA,EACAtI,EAAA,GACA6oB,EAAAE,UAAAD,EAAA9oB,GACAA,EAAA,KACA6oB,EAAAE,UAAA,GAAAD,GACAD,EAAAE,UAAA/oB,IACAA,EAAA,OACA6oB,EAAAE,UAAA,GAAAD,GACAD,EAAAG,YAAAhpB,IACAA,EAAA,YACA6oB,EAAAE,UAAA,GAAAD,GACAD,EAAAI,YAAAjpB,KAEA6oB,EAAAE,UAAA,GAAAD,GACAD,EAAAK,YAAAlpB,IAlIAmoB,EAAA3U,UAAA,CACA2V,SAAAlB,EAAA,YACAO,SAAAP,EAAA,YACAmB,UAAAnB,EAAA,aACAoB,YAAA,WACA,IAAAC,EAAA7pB,KAAAgpB,aACAc,GAAA,MAAAD,IAAA,GACAE,EAAA,KAAAF,EACAG,EAAA,MAAAH,EACA,GAAA,KAAAC,EACA,OAAA,IAAAC,EACAC,GAAAC,SAAAA,SAEAC,IAEA,IAAAC,EAAAL,EAAAtjB,KAAA4jB,IAAA,EAAAN,EAAA,KAAA,KAAAC,GAAAvjB,KAAA4jB,IAAA,GAAA,IAAAL,EACA,OAAAC,GAAAG,EAAAA,GAEAE,YAAA,WACA,IAAAC,EAAAtqB,KAAAipB,aACAa,GAAA,WAAAQ,IAAA,GACAP,EAAA,QAAAO,EACAN,EAAA,WAAAM,EACA,GAAA,MAAAR,EACA,OAAA,IAAAC,EACAC,GAAAC,SAAAA,SAEAC,IAEA,IAAAC,EAAAL,EAAAtjB,KAAA4jB,IAAA,EAAAN,EAAA,GAAA,MAAA,QAAAC,GAAAvjB,KAAA4jB,IAAA,GAAA,KAAAL,EACA,OAAAC,GAAAG,EAAAA,GAEAI,YAAA,WACA,IAAAC,EAAAxqB,KAAAipB,aACAa,EAAAU,GAAA,GAAA,KACAT,EAAA,YAAA,QAAAS,GAFAxqB,KAAAipB,aAGAe,EAAA,WAAAQ,EACA,GAAA,OAAAV,EACA,OAAA,IAAAC,EACAC,GAAAC,SAAAA,SAEAC,IAEA,IAAAC,EAAAL,EAAAtjB,KAAA4jB,IAAA,EAAAN,EAAA,GAAA,OAAA,iBAAAC,GAAAvjB,KAAA4jB,IAAA,GAAA,MAAAL,EACA,OAAAC,GAAAG,EAAAA,GAEAnB,WAAA,WACA,OAAA,IAAAhpB,KAAA+oB,WAAA/oB,KAAA+oB,YAEAE,WAAA,WACA,OAAA,MAAAjpB,KAAAgpB,aAAAhpB,KAAAgpB,cAEAE,WAAA,WACA,OAAA,WAAAlpB,KAAAipB,aAAAjpB,KAAAipB,eAKAN,EAAA5U,UAAA,CACAuV,UAAAd,EAAA,aACA9mB,OAAA8mB,EAAA,UACAiC,aAAAjC,EAAA,gBACAkC,aAAAlC,EAAA,gBACAmC,aAAAnC,EAAA,gBACAe,YAAA,SAAAhpB,GACAP,KAAAspB,UAAA/oB,GAAA,EAAA,KACAP,KAAAspB,UAAA,IAAA/oB,IAEAipB,YAAA,SAAAjpB,GACAP,KAAAupB,YAAAhpB,GAAA,GAAA,OACAP,KAAAupB,YAAA,MAAAhpB,IAEAkpB,YAAA,SAAAlpB,GACA,GAAAA,GAAA,kBAAAA,IAAA,iBACA,MAAA,IAAAoD,MAAA,4BAAApD,EAAA,6CAEAP,KAAAwpB,YAAAhjB,KAAAokB,MAAArqB,EAAA,aACAP,KAAAwpB,YAAAjpB,EAAA,aAEAsqB,YAAArC,EAAA,eACAsC,eAAA,SAAA7W,GACA,OAAA,GAEA8W,YAAAvC,EAAA,eAmDA,IAAAwC,EAAA,IAAArnB,MAEA,SAAAsnB,EAAAnC,GACA,IAAAD,EAnDA,SAAAC,GACA,IAAAO,EAAAP,EAAAC,WAEA,MAAA,CAAAlgB,KADAwgB,GAAA,EACA9oB,MADA,GAAA8oB,GAiDA6B,CAAApC,GACA,OAAAD,EAAAhgB,MACA,KAAA,EACA,OAAA+f,EAAAC,EAAAC,GACA,KAAA,EACA,OAAA,EAAAF,EAAAC,EAAAC,GACA,KAAA,EACA,OAAAA,EAAAa,UAAAf,EAAAC,EAAAC,IACA,KAAA,EAEA,OADAA,EAAAa,UAAAf,EAAAC,EAAAC,IACA7lB,SAAA,SACA,KAAA,EACA,KAAA,EACA,IAAAkoB,EAAAvC,EAAAC,EAAAC,GACApnB,EAAA,GACA,GAAA,OAAAypB,EAAA,CACA,IAAAtC,EAAAhgB,OACAsiB,GAAA,GAEA,IAAA,IAAAzoB,EAAA,EAAAA,EAAAyoB,EAAAzoB,IACAhB,EAAAgB,GAAAuoB,EAAAnC,QAIA,IADA,IAAA1C,GACAA,EAAA6E,EAAAnC,MAAAkC,GACAtpB,EAAAmF,KAAAuf,GAGA,GAAA,IAAAyC,EAAAhgB,KAAA,CACA,IAAAuiB,EAAA,GACA,IAAA1oB,EAAA,EAAAA,EAAAhB,EAAAa,OAAAG,GAAA,EACA0oB,EAAA1pB,EAAAgB,IAAAhB,EAAAgB,EAAA,GAEA,OAAA0oB,EAEA,OAAA1pB,EAEA,KAAA,EACA,IAAA2pB,EAAAzC,EAAAC,EAAAC,GACAhL,EAAAyK,EAAA8C,GACA3pB,EAAAupB,EAAAnC,GACA,OAAAhL,EAAAA,EAAApc,GAAAA,EACA,KAAA,EACA,GAAA,KAAAmnB,EAAAtoB,MACA,OAAAuoB,EAAAc,cACA,GAAA,KAAAf,EAAAtoB,MACA,OAAAuoB,EAAAuB,cACA,GAAA,KAAAxB,EAAAtoB,MACA,OAAAuoB,EAAAyB,cAEA,OAAA3B,EAAAC,EAAAC,IACA,KAAA,GACA,OAAA,EACA,KAAA,GACA,OAAA,EACA,KAAA,GACA,OAAA,KACA,KAAA,GACA,OAAA1e,UACA,KAAA,KACA,OAAA4gB,EACA,QACA,MAAA,IAAArnB,MAAA,wBAAAklB,EAAAtoB,OAEA,QACA,MAAA,IAAAoD,MAAA,uBAAA2nB,KAAAC,UAAA1C,IAEA,MAAA,IAAAllB,MAAA,uBAGA,SAAA6nB,EAAA1jB,EAAAshB,GACA,IAAA,IAAA1mB,EAAA,EAAAA,EAAA4lB,EAAA/lB,OAAAG,IAAA,CACA,IAAA+oB,EAAAnD,EAAA5lB,GAAA0Q,GAAAtL,GACA,GAAA2jB,IAAArhB,UAEA,OADA+e,EAAA,EAAAb,EAAA5lB,GAAA2oB,IAAAjC,GACAoC,EAAAC,EAAArC,GAQA,GAJAthB,GAAA,mBAAAA,EAAA4jB,SACA5jB,EAAAA,EAAA4jB,WAGA,IAAA5jB,EACAqhB,EAAA,EAAA,GAAAC,QACA,IAAA,IAAAthB,EACAqhB,EAAA,EAAA,GAAAC,QACA,GAAA,OAAAthB,EACAqhB,EAAA,EAAA,GAAAC,QACA,GAAAthB,IAAAsC,UACA+e,EAAA,EAAA,GAAAC,QACA,GAAA,iBAAAthB,EACAtB,KAAAokB,MAAA9iB,KAAAA,GAAAA,EAAA,kBAAAA,GAAA,iBAEAA,EAAA,EACAqhB,EAAA,GAAA,EAAArhB,EAAAshB,GAEAD,EAAA,EAAArhB,EAAAshB,KA3HA,SAAAvgB,EAAAtI,EAAA6oB,GACAA,EAAAE,UAAAzgB,GAAA,EAAAtI,GA6HAorB,CAAA,EAAA,GAAAvC,GACAA,EAAAuB,aAAA7iB,SAEA,GAAA,iBAAAA,EACAshB,EAAAyB,YAAA/iB,GAAA,SAAAvF,GACA4mB,EAAA,EAAA5mB,EAAA6mB,WAEA,GAAAA,EAAA0B,eAAAhjB,GACAshB,EAAA2B,YAAAjjB,GAAA,SAAAvF,GACA4mB,EAAA,EAAA5mB,EAAA6mB,UAEA,CAAA,GAAA,iBAAAthB,EAkBA,MAAA,IAAAnE,MAAA,gCAAAmE,GAdA,GAHA8jB,EAAAC,OAAAC,WAAA,mBAAAhkB,EAAAikB,SACAjkB,EAAAA,EAAAikB,UAEAtpB,MAAAiR,QAAA5L,GAAA,CACAqhB,EAAA,EAAArhB,EAAAvF,OAAA6mB,GACA,IAAA1mB,EAAA,EAAAA,EAAAoF,EAAAvF,OAAAG,IACA8oB,EAAA1jB,EAAApF,GAAA0mB,OAEA,CACA,IAAAxZ,EAAAxP,OAAAwP,KAAA9H,GACAqhB,EAAA,EAAAvZ,EAAArN,OAAA6mB,GACA,IAAA1mB,EAAA,EAAAA,EAAAkN,EAAArN,OAAAG,IACA8oB,EAAA5b,EAAAlN,GAAA0mB,GACAoC,EAAA1jB,EAAA8H,EAAAlN,IAAA0mB,KAQA,IAAA4C,EAAA,GACAC,EAAA,GAEAL,EAAA,CACAC,OAAA,CACAC,WAAA,GAEAI,UAAA,SAAA1E,EAAA2E,GACA,iBAAA3E,EACAyE,EAAAplB,MAAA,SAAAulB,GACA,GAAA5E,IAAA4E,EAAA,OAAAD,EAAAC,MAGAH,EAAAplB,KAAA2gB,IAGA6E,UAAA,SAAA7E,EAAA8E,GACA,iBAAA9E,EACAwE,EAAAnlB,MAAA,SAAAiB,EAAAskB,GACA,GAAA5E,IAAA4E,EAAA,OAAAE,EAAAxkB,EAAAskB,MAGAJ,EAAAnlB,KAAA2gB,IAGA5jB,OAAA,SAAAkE,EAAA0f,GACA,IAAA,IAAA9kB,EAAA,EAAAA,EAAAupB,EAAA1pB,OAAAG,IAAA,CACA,IACA0mB,GAAAzG,EADAsJ,EAAAvpB,IACA8kB,GACA,GAAA4B,EAEA,OADAoC,EAAA1jB,EAAAshB,GACAA,EAAA1nB,SAGA,MAAA,IAAAiC,MAAA,8BAAA6jB,IAEAlkB,OAAA,SAAAwE,EAAA0f,GACA,IAAA,IAAA9kB,EAAA,EAAAA,EAAAspB,EAAAzpB,OAAAG,IAAA,CACA,IACAomB,GAAAnG,EADAqJ,EAAAtpB,IACAoF,EAAA0f,GACA,GAAAsB,EACA,OAAAmC,EAAAnC,GAGA,MAAA,IAAAnlB,MAAA,6BAAA6jB,IAEA+E,kBAAA,SAAAlB,EAAAjY,GACA,GAAA,iBAAAiY,GAAAA,EAAA,GAAA,GAAAA,EAAA,EACA,MAAA,IAAA1nB,MAAA,kCAGA,OADA2kB,EAAAzhB,KAAA,CAAAwkB,IAAAA,EAAAjY,GAAAA,IACApT,MAEAwsB,kBAAA,SAAAnB,EAAAjY,GACA,GAAA,iBAAAiY,GAAAA,EAAA,GAAA,GAAAA,EAAA,EACA,MAAA,IAAA1nB,MAAA,kCAGA,OADA4kB,EAAA8C,GAAAjY,EACApT,MAEA0oB,OAAAA,EACAC,OAAAA,GAIA,SAAA8D,EAAA7iB,GACA5J,KAAA4J,OAAAA,EACA5J,KAAA0sB,IAAA,EAmCA,SAAAC,EAAAC,GACA5sB,KAAA6sB,WAAA,EACA7sB,KAAA8sB,oBAAA,MACA9sB,KAAA+sB,aAAA5rB,EAAAgF,MAAAnG,KAAA8sB,qBACA9sB,KAAAgtB,mBAAA,EACAhtB,KAAAitB,gBAAA,GACAjtB,KAAA4sB,aAAAA,EA2FA,SAAAM,EAAA5F,GACAtnB,KAAAsnB,IAAAA,EACAtnB,KAAA0sB,IAAA,EAmBA,SAAAS,EAAAC,GACAptB,KAAAunB,KAAA,GACAvnB,KAAAotB,YAAAA,GAAA,MAmDA,OA5MAX,EAAA1Y,UAAA3T,OAAA2O,OAAA2Z,EAAA3U,WACA0Y,EAAA1Y,UAAA2V,SAAA,WACA,OAAA1pB,KAAA4J,OAAA5J,KAAA0sB,MAEAD,EAAA1Y,UAAAgV,SAAA,WACA,OAAA/oB,KAAA4J,OAAA5J,KAAA0sB,QAEAD,EAAA1Y,UAAAiV,WAAA,WACA,IAAAtnB,EAAA1B,KAAA4J,OAAAyjB,aAAArtB,KAAA0sB,KAEA,OADA1sB,KAAA0sB,KAAA,EACAhrB,GAEA+qB,EAAA1Y,UAAAkV,WAAA,WACA,IAAAvnB,EAAA1B,KAAA4J,OAAA0jB,aAAAttB,KAAA0sB,KAEA,OADA1sB,KAAA0sB,KAAA,EACAhrB,GAEA+qB,EAAA1Y,UAAAsW,YAAA,WACA,IAAA3oB,EAAA1B,KAAA4J,OAAA2jB,YAAAvtB,KAAA0sB,KAEA,OADA1sB,KAAA0sB,KAAA,EACAhrB,GAEA+qB,EAAA1Y,UAAAwW,YAAA,WACA,IAAA7oB,EAAA1B,KAAA4J,OAAA4jB,aAAAxtB,KAAA0sB,KAEA,OADA1sB,KAAA0sB,KAAA,EACAhrB,GAEA+qB,EAAA1Y,UAAA4V,UAAA,SAAApnB,GACA,IAAAb,EAAAP,EAAAgF,MAAA5D,GAEA,OADAvC,KAAA4J,OAAAuZ,KAAAzhB,EAAA,EAAA1B,KAAA0sB,IAAA1sB,KAAA0sB,KAAAnqB,GACAb,GAWAirB,EAAA5Y,UAAA3T,OAAA2O,OAAA4Z,EAAA5U,WACA4Y,EAAA5Y,UAAAuV,UAAA,SAAA/oB,GACAP,KAAA+sB,aAAA/sB,KAAAgtB,sBAAAzsB,EACAP,KAAAgtB,oBAAAhtB,KAAA+sB,aAAAxqB,SACAvC,KAAAitB,gBAAApmB,KAAA7G,KAAA+sB,cACA/sB,KAAA+sB,aAAA5rB,EAAAgF,MAAAnG,KAAA8sB,qBACA9sB,KAAAgtB,mBAAA,GAEAhtB,KAAA6sB,cAEAF,EAAA5Y,UAAA2W,aAAA,SAAAnqB,GACA,IAAAqJ,EAAAzI,EAAAgF,MAAA,GACAyD,EAAA6jB,aAAAltB,EAAA,GACAP,KAAA0tB,YAAA9jB,IAEA+iB,EAAA5Y,UAAA4W,aAAA,SAAApqB,GACA,IAAAqJ,EAAAzI,EAAAgF,MAAA,GACAyD,EAAA+jB,cAAAptB,EAAA,GACAP,KAAA0tB,YAAA9jB,IAEA+iB,EAAA5Y,UAAA8W,YAAA,SAAA5pB,EAAA2sB,GACA,IAAAhkB,EAAAzI,EAAAC,KAAAH,EAAA,SACA2sB,EAAAhkB,EAAArH,QACAvC,KAAA0tB,YAAA9jB,IAEA+iB,EAAA5Y,UAAA+W,eAAA,SAAAhjB,GACA,OAAAA,aAAA3G,GAEAwrB,EAAA5Y,UAAAgX,YAAA,SAAAnhB,EAAAgkB,GACAA,EAAAhkB,EAAArH,QACAvC,KAAA0tB,YAAA9jB,IAEA+iB,EAAA5Y,UAAA2Z,YAAA,SAAAzZ,GACA,KAAAA,aAAA9S,GAAA,MAAA,IAAA0sB,UAAA,qCACA7tB,KAAAgtB,mBAEAhtB,KAAA+sB,aAAAxqB,OAAAvC,KAAAgtB,oBAAA/Y,EAAA1R,QACA0R,EAAAkP,KAAAnjB,KAAA+sB,aAAA/sB,KAAAgtB,oBACAhtB,KAAAgtB,oBAAA/Y,EAAA1R,OACAvC,KAAAgtB,oBAAAhtB,KAAA+sB,aAAAxqB,SACAvC,KAAAitB,gBAAApmB,KAAA7G,KAAA+sB,cACA/sB,KAAA+sB,aAAA5rB,EAAAgF,MAAAnG,KAAA8sB,qBACA9sB,KAAAgtB,mBAAA,KAGAhtB,KAAAitB,gBAAApmB,KAAA7G,KAAA+sB,aAAAhsB,MAAA,EAAAf,KAAAgtB,qBACAhtB,KAAAitB,gBAAApmB,KAAAoN,GACAjU,KAAA+sB,aAAA5rB,EAAAgF,MAAAnG,KAAA8sB,qBACA9sB,KAAAgtB,mBAAA,GAbAhtB,KAAAitB,gBAAApmB,KAAAoN,GAeAjU,KAAA6sB,YAAA5Y,EAAA1R,QAEAoqB,EAAA5Y,UAAArS,OAAA,WAIA,IAFA,IAAAA,EAAAP,EAAAgF,MAAAnG,KAAA6sB,YACAiB,EAAA,EACAprB,EAAA,EAAAA,EAAA1C,KAAAitB,gBAAA1qB,OAAAG,IAAA,CACA,IAAAkH,EAAA5J,KAAAitB,gBAAAvqB,GACAkH,EAAAuZ,KAAAzhB,EAAAosB,EAAA,EAAAlkB,EAAArH,QACAurB,GAAAlkB,EAAArH,OAMA,OAJAvC,KAAAgtB,oBACAhtB,KAAA+sB,aAAA5J,KAAAzhB,EAAAosB,EAAA,EAAA9tB,KAAAgtB,oBAGAhtB,KAAA4sB,aAAAlrB,EAAAuB,SAAAjD,KAAA4sB,cACAlrB,GAGA,mBAAAP,IACAyqB,EAAAS,WAAA,SAAAvkB,EAAA0f,GACA,OAAA1f,aAAA3G,EACA,IAAAsrB,EAAA3kB,GAEA,QAAA0f,GAAA,WAAAA,EAEA,IAAAiF,EADAtrB,EAAAC,KAAA0G,EAAA0f,SADA,KAKAoE,EAAAM,WAAA,SAAA1E,GACA,OAAAA,GAAA,WAAAA,EAEA,QAAAA,GAAA,WAAAA,EACA,IAAAmF,EAAAnF,QADA,EADA,IAAAmF,MAYAO,EAAAnZ,UAAA3T,OAAA2O,OAAA2Z,EAAA3U,WACAmZ,EAAAnZ,UAAA2V,SAAA,WACA,IAAA1B,EAAAhoB,KAAAsnB,IAAAI,UAAA1nB,KAAA0sB,IAAA,GACA,OAAAxM,SAAA8H,EAAA,KAEAkF,EAAAnZ,UAAAgV,SAAA,WACA,IAAAf,EAAAhoB,KAAAsnB,IAAAI,UAAA1nB,KAAA0sB,IAAA1sB,KAAA0sB,IAAA,GAEA,OADA1sB,KAAA0sB,KAAA,EACAxM,SAAA8H,EAAA,KAEAkF,EAAAnZ,UAAA4V,UAAA,SAAApnB,GACA,IAAA+kB,EAAAtnB,KAAAsnB,IAAAI,UAAA1nB,KAAA0sB,IAAA1sB,KAAA0sB,IAAA,EAAAnqB,GAEA,OADAvC,KAAA0sB,KAAA,EAAAnqB,EACA,mBAAApB,EAAAA,EAAAC,KAAAkmB,EAAA,OACA,IAAAD,EAAAC,IAOA6F,EAAApZ,UAAA3T,OAAA2O,OAAA4Z,EAAA5U,WACAoZ,EAAApZ,UAAAuV,UAAA,SAAA/oB,GACA,GAAAA,EAAA,GAAAA,EAAA,IAAA,MAAA,IAAAoD,MAAA,4BAAApD,GACA,IAAA+mB,EAAA/mB,EAAA0C,SAAA,IACA,GAAAqkB,EAAA/kB,SACA+kB,EAAA,IAAAA,GAEAtnB,KAAAunB,MAAAD,GAEA6F,EAAApZ,UAAA+W,eAAA,SAAA7W,GACA,OAAAA,aAAAoT,GAAA,mBAAAlmB,GAAA8S,aAAA9S,GAEAgsB,EAAApZ,UAAAgX,YAAA,SAAA9W,EAAA8Z,GACA,GAAA9Z,aAAAoT,EACA0G,EAAA9Z,EAAA1R,UACAvC,KAAAunB,MAAAtT,EAAAsT,SACA,CAAA,KAAA,mBAAApmB,GAAA8S,aAAA9S,GAIA,MAAA,IAAA0sB,UAAA,+CAHAE,EAAA9Z,EAAA1R,QACAvC,KAAAunB,MAAAtT,EAAAhR,SAAA,SAKAkqB,EAAApZ,UAAArS,OAAA,WACA,MAAA,WAAA1B,KAAAotB,aAAA,mBAAAjsB,EACAA,EAAAC,KAAApB,KAAAunB,KAAA,OAEA,IAAAF,EAAArnB,KAAAunB,MAAAtkB,SAAAjD,KAAAotB,cAEAD,EAAApZ,UAAA8W,YAAA,SAAA5pB,EAAA8sB,GACA,IAAAnkB,EAAAyd,EAAAY,eAAAhnB,GACA8sB,EAAAnkB,EAAArH,UACAvC,KAAAunB,MAAA3d,EAAA2d,MAGAqE,EAAAS,WAAA,SAAAvkB,EAAA0f,GACA,OAAA1f,aAAAuf,GAAAvf,EAAAyf,KACA,IAAA2F,EAAAplB,EAAAyf,MAEA,QAAAC,EACA,IAAA0F,EAAAplB,QADA,KAIA8jB,EAAAM,WAAA,SAAA1E,GACA,GAAA,QAAAA,EACA,OAAA,IAAA2F,KAIAvB,EA9lBA,GA2mBA,OAVAxE,EAAAmF,kBAAA,GAAA,SAAAzkB,GACA,GAAAA,aAAAkmB,KACA,OAAAlmB,EAAAmmB,iBAEAzB,kBAAA,GAAA,SAAA0B,GACA,OAAA,IAAAF,KAAAE,MACA1B,kBAAA,GAAA,SAAA0B,GACA,OAAA,IAAAF,KAAAE,MAGA9G,kPC9lBA1Z,EAAApN,QAZA,SAAAqN,EAAApN,EAAAqN,GAIA,IAHA,IAAA9M,EAAA8M,EAAA,EACArL,EAAAoL,EAAApL,SAEAzB,EAAAyB,GACA,GAAAoL,EAAA7M,KAAAP,EACA,OAAAO,EAGA,OAAA,uMCRA4M,EAAApN,QAJA,SAAAC,GACA,OAAAA,GAAAA,mMCeAmN,EAAApN,QAZA,SAAAqN,EAAAwgB,EAAAvgB,EAAAwgB,GAIA,IAHA,IAAA7rB,EAAAoL,EAAApL,OACAzB,EAAA8M,GAAAwgB,EAAA,GAAA,GAEAA,EAAAttB,MAAAA,EAAAyB,GACA,GAAA4rB,EAAAxgB,EAAA7M,GAAAA,EAAA6M,GACA,OAAA7M,EAGA,OAAA,uMCAA4M,EAAApN,QAXA,SAAAqN,EAAA0gB,GAKA,IAJA,IAAAvtB,GAAA,EACAyB,EAAA,MAAAoL,EAAA,EAAAA,EAAApL,OACAb,EAAAe,MAAAF,KAEAzB,EAAAyB,GACAb,EAAAZ,GAAAutB,EAAA1gB,EAAA7M,GAAAA,EAAA6M,GAEA,OAAAjM,qRCjBA,IAAA4sB,EAAA7tB,EAAA,gBACAqN,EAAArN,EAAA,gBACA8tB,EAAA9tB,EAAA,kBAEAiN,EAAApN,QAAAG,EAAA,kBAAAL,OAAAmQ,iBAAA,SAAAvB,EAAAC,GACAnB,EAAAkB,GAKA,IAJA,IAGAwf,EAHA5e,EAAA2e,EAAAtf,GACA1M,EAAAqN,EAAArN,OACAG,EAAA,EAEAH,EAAAG,GAAA4rB,EAAAlC,EAAApd,EAAAwf,EAAA5e,EAAAlN,KAAAuM,EAAAuf,IACA,OAAAxf,iPCAAtB,EAAApN,QAFA,qQCLA,IAAAmQ,EAAA,GAEA,SAAAge,EAAAC,EAAAxpB,EAAAypB,GACAA,IACAA,EAAAhrB,OAWA,IAAAirB,EAEA,SAAAC,GAnBA,IAAAC,EAAAC,EAsBA,SAAAH,EAAAI,EAAAC,EAAAC,GACA,OAAAL,EAAAld,KAAA3R,KAdA,SAAAgvB,EAAAC,EAAAC,GACA,MAAA,iBAAAhqB,EACAA,EAEAA,EAAA8pB,EAAAC,EAAAC,GAUAC,CAAAH,EAAAC,EAAAC,KAAAlvB,KAGA,OA1BA+uB,EAoBAF,GApBAC,EAoBAF,GApBA7a,UAAA3T,OAAA2O,OAAAggB,EAAAhb,WAAA+a,EAAA/a,UAAA/P,YAAA8qB,EAAAA,EAAAM,UAAAL,EA0BAH,EAPA,CAQAD,GAEAC,EAAA7a,UAAA3M,KAAAunB,EAAAvnB,KACAwnB,EAAA7a,UAAA2a,KAAAA,EACAje,EAAAie,GAAAE,EAIA,SAAAS,EAAAC,EAAAC,GACA,GAAA9sB,MAAAiR,QAAA4b,GAAA,CACA,IAAA7U,EAAA6U,EAAA/sB,OAKA,OAJA+sB,EAAAA,EAAAhtB,KAAA,SAAAI,GACA,OAAAklB,OAAAllB,MAGA+X,EAAA,EACA,UAAAnN,OAAAiiB,EAAA,KAAAjiB,OAAAgiB,EAAAvuB,MAAA,EAAA0Z,EAAA,GAAA7Y,KAAA,MAAA,SAAA0tB,EAAA7U,EAAA,GACA,IAAAA,EACA,UAAAnN,OAAAiiB,EAAA,KAAAjiB,OAAAgiB,EAAA,GAAA,QAAAhiB,OAAAgiB,EAAA,IAEA,MAAAhiB,OAAAiiB,EAAA,KAAAjiB,OAAAgiB,EAAA,IAGA,MAAA,MAAAhiB,OAAAiiB,EAAA,KAAAjiB,OAAAsa,OAAA0H,IA+BAb,EAAA,yBAAA,SAAArnB,EAAA7G,GACA,MAAA,cAAAA,EAAA,4BAAA6G,EAAA,MACAymB,WACAY,EAAA,wBAAA,SAAArnB,EAAAkoB,EAAAE,GAEA,IAAAC,EA/BAC,EAAAhD,EAwCAiD,EAEA,GATA,iBAAAL,IAjCAI,EAiCA,OAAAJ,EAhCAM,QAAAlD,GAAAA,EAAA,EAAA,GAAAA,EAAAgD,EAAAntB,UAAAmtB,IAiCAD,EAAA,cACAH,EAAAA,EAAAO,QAAA,QAAA,KAEAJ,EAAA,UAhCA,SAAAK,EAAAJ,EAAAK,GAKA,OAJAA,IAAA3lB,WAAA2lB,EAAAD,EAAAvtB,UACAwtB,EAAAD,EAAAvtB,QAGAutB,EAAApI,UAAAqI,EAAAL,EAAAntB,OAAAwtB,KAAAL,EAgCAM,CAAA5oB,EAAA,aAEAuoB,EAAA,OAAAriB,OAAAlG,EAAA,KAAAkG,OAAAmiB,EAAA,KAAAniB,OAAA+hB,EAAAC,EAAA,aACA,CACA,IAAAzmB,EAhCA,SAAAinB,EAAAJ,EAAAO,GAKA,MAJA,iBAAAA,IACAA,EAAA,KAGAA,EAAAP,EAAAntB,OAAAutB,EAAAvtB,UAGA,IAAAutB,EAAA5mB,QAAAwmB,EAAAO,GAwBA3mB,CAAAlC,EAAA,KAAA,WAAA,WACAuoB,EAAA,QAAAriB,OAAAlG,EAAA,MAAAkG,OAAAzE,EAAA,KAAAyE,OAAAmiB,EAAA,KAAAniB,OAAA+hB,EAAAC,EAAA,SAIA,OADAK,GAAA,mBAAAriB,cAAAkiB,KAEA3B,WACAY,EAAA,4BAAA,2BACAA,EAAA,8BAAA,SAAArnB,GACA,MAAA,OAAAA,EAAA,gCAEAqnB,EAAA,6BAAA,mBACAA,EAAA,wBAAA,SAAArnB,GACA,MAAA,eAAAA,EAAA,mCAEAqnB,EAAA,wBAAA,kCACAA,EAAA,yBAAA,6BACAA,EAAA,6BAAA,mBACAA,EAAA,yBAAA,sCAAAZ,WACAY,EAAA,wBAAA,SAAAyB,GACA,MAAA,qBAAAA,IACArC,WACAY,EAAA,qCAAA,oCACA/gB,EAAApN,QAAAmQ,MAAAA,uRCvEA,SAAA0f,EAAArb,EAAA7C,GACAme,EAAAtb,EAAA7C,GACAoe,EAAAvb,GAGA,SAAAub,EAAAvb,GACAA,EAAArD,iBAAAqD,EAAArD,eAAAwI,WACAnF,EAAAjD,iBAAAiD,EAAAjD,eAAAoI,WACAnF,EAAAgB,KAAA,SAsBA,SAAAsa,EAAAtb,EAAA7C,GACA6C,EAAAgB,KAAA,QAAA7D,GAcAvE,EAAApN,QAAA,CACA6S,QAnGA,SAAAlB,EAAAkC,GACA,IAAAwC,EAAA3W,KAEAswB,EAAAtwB,KAAA6R,gBAAA7R,KAAA6R,eAAAqB,UACAqd,EAAAvwB,KAAAyR,gBAAAzR,KAAAyR,eAAAyB,UAEA,OAAAod,GAAAC,GACApc,EACAA,EAAAlC,GACAA,IACAjS,KAAAyR,eAEAzR,KAAAyR,eAAAgI,eACAzZ,KAAAyR,eAAAgI,cAAA,EACA9E,EAAAC,SAAAwb,EAAApwB,KAAAiS,IAHA0C,EAAAC,SAAAwb,EAAApwB,KAAAiS,IAOAjS,OAKAA,KAAA6R,iBACA7R,KAAA6R,eAAAqB,WAAA,GAIAlT,KAAAyR,iBACAzR,KAAAyR,eAAAyB,WAAA,GAGAlT,KAAA8W,SAAA7E,GAAA,MAAA,SAAAA,IACAkC,GAAAlC,EACA0E,EAAAlF,eAEAkF,EAAAlF,eAAAgI,aAIA9E,EAAAC,SAAAyb,EAAA1Z,IAHAA,EAAAlF,eAAAgI,cAAA,EACA9E,EAAAC,SAAAub,EAAAxZ,EAAA1E,IAHA0C,EAAAC,SAAAub,EAAAxZ,EAAA1E,GAOAkC,GACAQ,EAAAC,SAAAyb,EAAA1Z,GACAxC,EAAAlC,IAEA0C,EAAAC,SAAAyb,EAAA1Z,MAIA3W,OAkDAqc,UApCA,WACArc,KAAA6R,iBACA7R,KAAA6R,eAAAqB,WAAA,EACAlT,KAAA6R,eAAAkB,SAAA,EACA/S,KAAA6R,eAAAM,OAAA,EACAnS,KAAA6R,eAAAC,YAAA,GAGA9R,KAAAyR,iBACAzR,KAAAyR,eAAAyB,WAAA,EACAlT,KAAAyR,eAAAU,OAAA,EACAnS,KAAAyR,eAAAsH,QAAA,EACA/Y,KAAAyR,eAAAoH,aAAA,EACA7Y,KAAAyR,eAAAuI,aAAA,EACAha,KAAAyR,eAAAC,UAAA,EACA1R,KAAAyR,eAAAgI,cAAA,IAsBAjB,eAdA,SAAA5H,EAAAqB,GAMA,IAAAiJ,EAAAtK,EAAAiB,eACAmO,EAAApP,EAAAa,eACAyJ,GAAAA,EAAAhB,aAAA8F,GAAAA,EAAA9F,YAAAtJ,EAAAuC,QAAAlB,GAAArB,EAAAkF,KAAA,QAAA7D,qTCjGAvE,EAAApN,QAAAG,EAAA,UAAA8b,uSCEA,IAAAiU,EAAA/vB,EAAA,mBAAAgQ,MAAA+f,sBAsBA9iB,EAAApN,QAAA,CACA4X,iBAjBA,SAAAjB,EAAAnD,EAAA2c,EAAA/X,GACA,IAAAgY,EALA,SAAA5c,EAAA4E,EAAA+X,GACA,OAAA,MAAA3c,EAAAmB,cAAAnB,EAAAmB,cAAAyD,EAAA5E,EAAA2c,GAAA,KAIAE,CAAA7c,EAAA4E,EAAA+X,GAEA,GAAA,MAAAC,EAAA,CACA,IAAAE,SAAAF,IAAAlqB,KAAAokB,MAAA8F,KAAAA,GAAAA,EAAA,EAEA,MAAA,IAAAF,EADA9X,EAAA+X,EAAA,gBACAC,GAGA,OAAAlqB,KAAAokB,MAAA8F,GAIA,OAAAzZ,EAAA0B,WAAA,GAAA,mQCrBAjL,EAAApN,QAAA,WACA,MAAA,IAAAqD,MAAA,yUCCA,SAAA8L,EAAAC,EAAAC,GAAA,IAAAC,EAAAxP,OAAAwP,KAAAF,GAAA,GAAAtP,OAAAyP,sBAAA,CAAA,IAAAC,EAAA1P,OAAAyP,sBAAAH,GAAAC,IAAAG,EAAAA,EAAAtG,QAAA,SAAAuG,GAAA,OAAA3P,OAAA4P,yBAAAN,EAAAK,GAAAE,eAAAL,EAAA/I,KAAAqJ,MAAAN,EAAAE,GAAA,OAAAF,EAIA,SAAAihB,EAAAxc,EAAA5I,EAAAlL,GAAA,OAAAkL,KAAA4I,EAAAjU,OAAAC,eAAAgU,EAAA5I,EAAA,CAAAlL,MAAAA,EAAA0P,YAAA,EAAA6gB,cAAA,EAAAzf,UAAA,IAAAgD,EAAA5I,GAAAlL,EAAA8T,EAIA,SAAA0c,EAAA5gB,EAAA6gB,GAAA,IAAA,IAAAtuB,EAAA,EAAAA,EAAAsuB,EAAAzuB,OAAAG,IAAA,CAAA,IAAAuuB,EAAAD,EAAAtuB,GAAAuuB,EAAAhhB,WAAAghB,EAAAhhB,aAAA,EAAAghB,EAAAH,cAAA,EAAA,UAAAG,IAAAA,EAAA5f,UAAA,GAAAjR,OAAAC,eAAA8P,EAAA8gB,EAAAxlB,IAAAwlB,IAIA,IACA9vB,EADAV,EAAA,UACAU,OAGA+vB,EADAzwB,EAAA,QACAywB,QAEAC,EAAAD,GAAAA,EAAAC,QAAA,UAMAzjB,EAAApN,QAEA,WACA,SAAA0c,KArBA,SAAAoU,EAAAC,GAAA,KAAAD,aAAAC,GAAA,MAAA,IAAAxD,UAAA,qCAsBAyD,CAAAtxB,KAAAgd,GAEAhd,KAAA8e,KAAA,KACA9e,KAAAuxB,KAAA,KACAvxB,KAAAuC,OAAA,EAtBA,IAAA8uB,EAAAG,EAAAC,EAoMA,OApMAJ,EAyBArU,EAzBAwU,EAyBA,CAAA,CACA/lB,IAAA,OACAlL,MAAA,SAAAgJ,GACA,IAAA4N,EAAA,CACArP,KAAAyB,EACA2N,KAAA,MAEAlX,KAAAuC,OAAA,EAAAvC,KAAAuxB,KAAAra,KAAAC,EAAAnX,KAAA8e,KAAA3H,EACAnX,KAAAuxB,KAAApa,IACAnX,KAAAuC,SAEA,CACAkJ,IAAA,UACAlL,MAAA,SAAAgJ,GACA,IAAA4N,EAAA,CACArP,KAAAyB,EACA2N,KAAAlX,KAAA8e,MAEA,IAAA9e,KAAAuC,SAAAvC,KAAAuxB,KAAApa,GACAnX,KAAA8e,KAAA3H,IACAnX,KAAAuC,SAEA,CACAkJ,IAAA,QACAlL,MAAA,WACA,GAAA,IAAAP,KAAAuC,OAAA,CACA,IAAAiZ,EAAAxb,KAAA8e,KAAAhX,KAGA,OAFA,IAAA9H,KAAAuC,OAAAvC,KAAA8e,KAAA9e,KAAAuxB,KAAA,KAAAvxB,KAAA8e,KAAA9e,KAAA8e,KAAA5H,OACAlX,KAAAuC,OACAiZ,KAEA,CACA/P,IAAA,QACAlL,MAAA,WACAP,KAAA8e,KAAA9e,KAAAuxB,KAAA,KACAvxB,KAAAuC,OAAA,IAEA,CACAkJ,IAAA,OACAlL,MAAA,SAAA0H,GACA,GAAA,IAAAjI,KAAAuC,OAAA,MAAA,GAIA,IAHA,IAAA6J,EAAApM,KAAA8e,KACAtD,EAAA,GAAApP,EAAAtE,KAEAsE,EAAAA,EAAA8K,MACAsE,GAAAvT,EAAAmE,EAAAtE,KAGA,OAAA0T,IAEA,CACA/P,IAAA,SACAlL,MAAA,SAAA2H,GACA,GAAA,IAAAlI,KAAAuC,OAAA,OAAApB,EAAAgF,MAAA,GAKA,IAJA,IArEAqI,EAAA2B,EAAA2d,EAqEAtS,EAAAra,EAAA0I,YAAA3B,IAAA,GACAkE,EAAApM,KAAA8e,KACApc,EAAA,EAEA0J,GAzEAoC,EA0EApC,EAAAtE,KA1EAqI,EA0EAqL,EA1EAsS,EA0EAprB,EAzEAvB,EAAA4S,UAAAoP,KAAAxR,KAAAnD,EAAA2B,EAAA2d,GA0EAprB,GAAA0J,EAAAtE,KAAAvF,OACA6J,EAAAA,EAAA8K,KAGA,OAAAsE,IAGA,CACA/P,IAAA,UACAlL,MAAA,SAAA2H,EAAAwpB,GACA,IAAAlW,EAcA,OAZAtT,EAAAlI,KAAA8e,KAAAhX,KAAAvF,QAEAiZ,EAAAxb,KAAA8e,KAAAhX,KAAA/G,MAAA,EAAAmH,GACAlI,KAAA8e,KAAAhX,KAAA9H,KAAA8e,KAAAhX,KAAA/G,MAAAmH,IAGAsT,EAFAtT,IAAAlI,KAAA8e,KAAAhX,KAAAvF,OAEAvC,KAAAsM,QAGAolB,EAAA1xB,KAAA2xB,WAAAzpB,GAAAlI,KAAA4xB,WAAA1pB,GAGAsT,IAEA,CACA/P,IAAA,QACAlL,MAAA,WACA,OAAAP,KAAA8e,KAAAhX,OAGA,CACA2D,IAAA,aACAlL,MAAA,SAAA2H,GACA,IAAAkE,EAAApM,KAAA8e,KACA9V,EAAA,EACAwS,EAAApP,EAAAtE,KAGA,IAFAI,GAAAsT,EAAAjZ,OAEA6J,EAAAA,EAAA8K,MAAA,CACA,IAAA4Y,EAAA1jB,EAAAtE,KACA+pB,EAAA3pB,EAAA4nB,EAAAvtB,OAAAutB,EAAAvtB,OAAA2F,EAIA,GAHA2pB,IAAA/B,EAAAvtB,OAAAiZ,GAAAsU,EAAAtU,GAAAsU,EAAA/uB,MAAA,EAAAmH,GAGA,IAFAA,GAAA2pB,GAEA,CACAA,IAAA/B,EAAAvtB,UACAyG,EACAoD,EAAA8K,KAAAlX,KAAA8e,KAAA1S,EAAA8K,KAAAlX,KAAA8e,KAAA9e,KAAAuxB,KAAA,OAEAvxB,KAAA8e,KAAA1S,EACAA,EAAAtE,KAAAgoB,EAAA/uB,MAAA8wB,IAGA,QAGA7oB,EAIA,OADAhJ,KAAAuC,QAAAyG,EACAwS,IAGA,CACA/P,IAAA,aACAlL,MAAA,SAAA2H,GACA,IAAAsT,EAAAra,EAAA0I,YAAA3B,GACAkE,EAAApM,KAAA8e,KACA9V,EAAA,EAIA,IAHAoD,EAAAtE,KAAAqb,KAAA3H,GACAtT,GAAAkE,EAAAtE,KAAAvF,OAEA6J,EAAAA,EAAA8K,MAAA,CACA,IAAA4a,EAAA1lB,EAAAtE,KACA+pB,EAAA3pB,EAAA4pB,EAAAvvB,OAAAuvB,EAAAvvB,OAAA2F,EAIA,GAHA4pB,EAAA3O,KAAA3H,EAAAA,EAAAjZ,OAAA2F,EAAA,EAAA2pB,GAGA,IAFA3pB,GAAA2pB,GAEA,CACAA,IAAAC,EAAAvvB,UACAyG,EACAoD,EAAA8K,KAAAlX,KAAA8e,KAAA1S,EAAA8K,KAAAlX,KAAA8e,KAAA9e,KAAAuxB,KAAA,OAEAvxB,KAAA8e,KAAA1S,EACAA,EAAAtE,KAAAgqB,EAAA/wB,MAAA8wB,IAGA,QAGA7oB,EAIA,OADAhJ,KAAAuC,QAAAyG,EACAwS,IAGA,CACA/P,IAAA0lB,EACA5wB,MAAA,SAAAwI,EAAA+K,GACA,OAAAod,EAAAlxB,KAnMA,SAAAmQ,GAAA,IAAA,IAAAzN,EAAA,EAAAA,EAAA0N,UAAA7N,OAAAG,IAAA,CAAA,IAAA2N,EAAA,MAAAD,UAAA1N,GAAA0N,UAAA1N,GAAA,GAAAA,EAAA,EAAA+M,EAAArP,OAAAiQ,IAAA,GAAApF,SAAA,SAAAQ,GAAAolB,EAAA1gB,EAAA1E,EAAA4E,EAAA5E,OAAArL,OAAAkQ,0BAAAlQ,OAAAmQ,iBAAAJ,EAAA/P,OAAAkQ,0BAAAD,IAAAZ,EAAArP,OAAAiQ,IAAApF,SAAA,SAAAQ,GAAArL,OAAAC,eAAA8P,EAAA1E,EAAArL,OAAA4P,yBAAAK,EAAA5E,OAAA,OAAA0E,EAmMA4hB,CAAA,GAAAje,EAAA,CAEAke,MAAA,EAEAC,eAAA,QA/LAT,GAAAT,EAAAM,EAAAtd,UAAAyd,GAAAC,GAAAV,EAAAM,EAAAI,GAoMAzU,EApLA,iUC1BA,IAAAkV,EAEA,SAAArB,EAAAxc,EAAA5I,EAAAlL,GAAA,OAAAkL,KAAA4I,EAAAjU,OAAAC,eAAAgU,EAAA5I,EAAA,CAAAlL,MAAAA,EAAA0P,YAAA,EAAA6gB,cAAA,EAAAzf,UAAA,IAAAgD,EAAA5I,GAAAlL,EAAA8T,EAEA,IAAA3C,EAAAjR,EAAA,mBAEA0xB,EAAA9W,OAAA,eACA+W,EAAA/W,OAAA,cACAgX,EAAAhX,OAAA,SACAiX,EAAAjX,OAAA,SACAkX,EAAAlX,OAAA,eACAmX,EAAAnX,OAAA,iBACAoX,EAAApX,OAAA,UAEA,SAAAqX,EAAAnyB,EAAAqW,GACA,MAAA,CACArW,MAAAA,EACAqW,KAAAA,GAIA,SAAA+b,EAAAC,GACA,IAAAC,EAAAD,EAAAT,GAEA,GAAA,OAAAU,EAAA,CACA,IAAA/qB,EAAA8qB,EAAAH,GAAA1U,OAIA,OAAAjW,IACA8qB,EAAAL,GAAA,KACAK,EAAAT,GAAA,KACAS,EAAAR,GAAA,KACAS,EAAAH,EAAA5qB,GAAA,MAKA,SAAAgrB,EAAAF,GAGAje,EAAAC,SAAA+d,EAAAC,GAgBA,IAAAG,EAAA3yB,OAAAme,gBAAA,eACAyU,EAAA5yB,OAAA6yB,gBA4DApC,EA5DAqB,EAAA,CACAthB,aACA,OAAA5Q,KAAAyyB,IAGAvb,KAAA,WACA,IAAAP,EAAA3W,KAIA+L,EAAA/L,KAAAqyB,GAEA,GAAA,OAAAtmB,EACA,OAAAmnB,QAAAC,OAAApnB,GAGA,GAAA/L,KAAAsyB,GACA,OAAAY,QAAAL,QAAAH,EAAAtoB,WAAA,IAGA,GAAApK,KAAAyyB,GAAAvf,UAKA,OAAA,IAAAggB,SAAA,SAAAL,EAAAM,GACAxe,EAAAC,UAAA,WACA+B,EAAA0b,GACAc,EAAAxc,EAAA0b,IAEAQ,EAAAH,EAAAtoB,WAAA,UAUA,IACAgpB,EADAC,EAAArzB,KAAAuyB,GAGA,GAAAc,EACAD,EAAA,IAAAF,QA1DA,SAAAG,EAAAT,GACA,OAAA,SAAAC,EAAAM,GACAE,EAAAC,MAAA,WACAV,EAAAN,GACAO,EAAAH,EAAAtoB,WAAA,IAIAwoB,EAAAJ,GAAAK,EAAAM,KACAA,IAiDAI,CAAAF,EAAArzB,WACA,CAGA,IAAA8H,EAAA9H,KAAAyyB,GAAA1U,OAEA,GAAA,OAAAjW,EACA,OAAAorB,QAAAL,QAAAH,EAAA5qB,GAAA,IAGAsrB,EAAA,IAAAF,QAAAlzB,KAAAwyB,IAIA,OADAxyB,KAAAuyB,GAAAa,EACAA,IAEA/X,OAAAwG,eAAA,WACA,OAAA7hB,QACA6wB,EAAAqB,EAAA,UAAA,WACA,IAAAsB,EAAAxzB,KAKA,OAAA,IAAAkzB,SAAA,SAAAL,EAAAM,GACAK,EAAAf,GAAAtf,QAAA,MAAA,SAAAlB,GACAA,EACAkhB,EAAAlhB,GAIA4gB,EAAAH,EAAAtoB,WAAA,aAGA8nB,GAAAa,GAoEArlB,EAAApN,QAlEA,SAAAsQ,GACA,IAAA6iB,EAEAC,EAAAtzB,OAAA2O,OAAAikB,GAAAnC,EAAA4C,EAAA,GAAAhB,EAAA,CACAlyB,MAAAqQ,EACAS,UAAA,IACAwf,EAAA4C,EAAAtB,EAAA,CACA5xB,MAAA,KACA8Q,UAAA,IACAwf,EAAA4C,EAAArB,EAAA,CACA7xB,MAAA,KACA8Q,UAAA,IACAwf,EAAA4C,EAAApB,EAAA,CACA9xB,MAAA,KACA8Q,UAAA,IACAwf,EAAA4C,EAAAnB,EAAA,CACA/xB,MAAAqQ,EAAAiB,eAAAC,WACAT,UAAA,IACAwf,EAAA4C,EAAAjB,EAAA,CACAjyB,MAAA,SAAAsyB,EAAAM,GACA,IAAArrB,EAAA4rB,EAAAjB,GAAA1U,OAEAjW,GACA4rB,EAAAnB,GAAA,KACAmB,EAAAvB,GAAA,KACAuB,EAAAtB,GAAA,KACAS,EAAAH,EAAA5qB,GAAA,MAEA4rB,EAAAvB,GAAAU,EACAa,EAAAtB,GAAAe,IAGA9hB,UAAA,IACAoiB,IA8BA,OA7BAC,EAAAnB,GAAA,KACA7gB,EAAAd,GAAA,SAAAqB,GACA,GAAAA,GAAA,+BAAAA,EAAAyc,KAAA,CACA,IAAAyE,EAAAO,EAAAtB,GAWA,OARA,OAAAe,IACAO,EAAAnB,GAAA,KACAmB,EAAAvB,GAAA,KACAuB,EAAAtB,GAAA,KACAe,EAAAlhB,SAGAyhB,EAAArB,GAAApgB,GAIA,IAAA4gB,EAAAa,EAAAvB,GAEA,OAAAU,IACAa,EAAAnB,GAAA,KACAmB,EAAAvB,GAAA,KACAuB,EAAAtB,GAAA,KACAS,EAAAH,EAAAtoB,WAAA,KAGAspB,EAAApB,IAAA,KAEA1hB,EAAA0B,GAAA,WAAAwgB,EAAA3c,KAAA,KAAAud,IACAA,kUC3MA,IAGAvR,EAHA1hB,EAAA,eAGAkzB,CAAAvzB,OAAA,UAEAsN,EAAApN,QAAA6hB,uNCLA,IAAAyR,EAAAnzB,EAAA,eAiDA,SAAAiiB,EAAAC,EAAAkR,GACA,GAAA,mBAAAlR,GAAA,MAAAkR,GAAA,mBAAAA,EACA,MAAA,IAAAhG,UAhDA,uBAkDA,IAAAiG,EAAA,WACA,IAAA7iB,EAAAb,UACA3E,EAAAooB,EAAAA,EAAA3jB,MAAAlQ,KAAAiR,GAAAA,EAAA,GACA2R,EAAAkR,EAAAlR,MAEA,GAAAA,EAAAZ,IAAAvW,GACA,OAAAmX,EAAA5N,IAAAvJ,GAEA,IAAA/J,EAAAihB,EAAAzS,MAAAlQ,KAAAiR,GAEA,OADA6iB,EAAAlR,MAAAA,EAAAzN,IAAA1J,EAAA/J,IAAAkhB,EACAlhB,GAGA,OADAoyB,EAAAlR,MAAA,IAAAF,EAAAqR,OAAAH,GACAE,EAIApR,EAAAqR,MAAAH,EAEAlmB,EAAApN,QAAAoiB,8LC7DA,SAAAsR,EAAAC,EAAAC,EAAAnO,GAGA/lB,KAAAm0B,MAAA,GACAn0B,KAAAo0B,KAAA,GACAp0B,KAAAk0B,SAAAA,GAAAl0B,KAAAq0B,gBAAAJ,EAAA1xB,QACAvC,KAAA+lB,IAAAA,GAAAvf,KAAA8tB,OACAt0B,KAAAu0B,gBAAAN,GAWAD,EAAAjgB,UAAAmD,KAAA,SAAAsd,GAGA,IAAAtsB,EAAAssB,GAAA,EACApZ,EAAA,GACA1Y,EAAA,EAEA,EAAA,CACA,IAAAsG,EAAAxC,KAAAokB,MAAA5qB,KAAA+lB,MAAA/lB,KAAAo0B,KAAA7xB,QACA6Y,EAAA1Y,GAAA1C,KAAAk0B,SAAAl0B,KAAA+lB,MAAA/lB,KAAAo0B,KAAAprB,GAAAA,EAAAhJ,KAAAm0B,MAAAnrB,YACAtG,EAAAwF,GAEA,OAAAA,EAAA,EAAAkT,EAAAA,EAAA,IAQA4Y,EAAAjgB,UAAAwgB,gBAAA,SAAAnoB,GAGA,IAOAoY,EAAA9hB,EAAA+G,EAPAvB,EAAAkE,EAAA7J,OACAkyB,EAAA,EACAC,EAAA,EACAC,EAAA,EACAnG,EAAA,GACAoG,EAAA,GACAC,EAAA,GAIA,IAAAnyB,EAAA,EAAAA,EAAAwF,IAAAxF,EAAA,CACA,GAAA0J,EAAA1J,GAAA,EACA,KAAA,qCAAAA,EAAA,KAAA0J,EAAA1J,GAEA+xB,GAAAroB,EAAA1J,GAGA,GAAA,IAAA+xB,EACA,KAAA,8BAGA,IAAA/xB,EAAA,EAAAA,EAAAwF,IAAAxF,EACA8rB,EAAA9rB,GAAA0J,EAAA1J,GAAAwF,EAAAusB,EAIA,IAAA/xB,EAAAwF,EAAA,EAAAxF,GAAA,IAAAA,EAEA8rB,EAAA9rB,GAAA,EACAkyB,EAAAF,KAAAhyB,EAEAmyB,EAAAF,KAAAjyB,EAIA,KAAAgyB,GAAAC,GACAlrB,EAAAmrB,IAAAF,GACAlQ,EAAAqQ,IAAAF,GAEA30B,KAAAo0B,KAAA3qB,GAAA+kB,EAAA/kB,GACAzJ,KAAAm0B,MAAA1qB,GAAA+a,EAEAgK,EAAAhK,GAAAgK,EAAAhK,GAAAgK,EAAA/kB,GAAA,EACA+kB,EAAAhK,GAAA,EACAoQ,EAAAF,KAAAlQ,EAEAqQ,EAAAF,KAAAnQ,EAGA,KAAAmQ,GACA30B,KAAAo0B,KAAAS,IAAAF,IAAA,EAEA,KAAAD,GAEA10B,KAAAo0B,KAAAQ,IAAAF,IAAA,GAGAV,EAAAjgB,UAAAsgB,gBAAA,SAAAnsB,GAIA,IADA,IAAA4sB,EAAA,GACApyB,EAAA,EAAAA,EAAAwF,EAAAxF,IAAAoyB,EAAApyB,GAAAA,EACA,OAAAoyB,GAGAd,EAAAjgB,UAAAghB,UAAA,SAAA3nB,EAAAzD,GAGA,OAAAnD,KAAAokB,MAAA5qB,KAAA+lB,OAAApc,EAAAyD,IAAAA,GAGAM,EAAApN,QAAA,SAAA2zB,EAAAC,EAAAnO,GAGA,OAAA,IAAAiO,EAAAC,EAAAC,EAAAnO,iRC7HA,IAAAhmB,EAAAC,MAAAA,KAAAD,iBAAA,SAAAE,GACA,OAAAA,GAAAA,EAAAC,WAAAD,EAAA,CAAAE,QAAAF,IAEAG,OAAAC,eAAAC,EAAA,aAAA,CAAAC,OAAA,IACA,MAAAG,EAAAD,EAAA,WACAu0B,EAAAj1B,EAAAU,EAAA,iBACAw0B,EAAAl1B,EAAAU,EAAA,SAEAy0B,EAAA,CAAAvyB,EAAAwyB,IAAAF,EAAA90B,QAAAi1B,WAAAH,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAm1B,UAAA3yB,EAAAsyB,EAAA90B,QAAAo1B,OAAAJ,KAAAF,EAAA90B,QAAAo1B,OAAAN,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAq1B,iBAAA7yB,EAAAsyB,EAAA90B,QAAAs1B,SAAAR,EAAA90B,QAAAo1B,OAAA,IAAAN,EAAA90B,QAAAo1B,OAAAJ,QAyCA70B,EAAAH,QAxCA,MACA6D,YAAAqiB,GACArmB,KAAAkX,KAAA,IACA,IAAA8d,EAAA70B,QAAAH,KAAA01B,OAAAzyB,YAEAjD,KAAAimB,WAAA,IACA,IAAA+O,EAAA70B,QAAAH,KAAA01B,OAAAzyB,YAAA0yB,IAAAC,qBAEA51B,KAAAmmB,QAAA,CAAA0P,EAAAC,IACAtvB,KAAAokB,MAAA5qB,KAAAimB,aAAA8P,YAAAD,EAAAD,EAAA,GAAAA,GAEA71B,KAAAg2B,SAAA,IAAAh2B,KAAAmmB,QAAA,EAAA,KACAnmB,KAAAi2B,SAAApb,GAAA,IAAA,IAAApY,MAAAoY,IAAAvY,KAAA,IAAAtC,KAAAg2B,aACA,MAAAhuB,EAAAtH,EAAAiH,WAAA0e,GACArmB,KAAAiI,EAAA,CAAAgtB,EAAA90B,QAAAo1B,OAAA,GAAAN,EAAA90B,QAAAo1B,OAAA,GAAAN,EAAA90B,QAAAo1B,OAAA,GAAAN,EAAA90B,QAAAo1B,OAAA,IACAv1B,KAAAk2B,KAAAluB,GAEAkuB,KAAAluB,GACA,IAAA,IAAAtF,EAAA,EAAAA,EAAA,EAAAA,IAAA,CACA,IAAAoyB,EAAA,EAAApyB,EACA6G,EAAA0rB,EAAA90B,QAAAo1B,OAAA,GACA,IAAA,IAAArtB,EAAA,EAAAA,EAAA,EAAAA,IACAqB,EAAA0rB,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAm1B,UAAA/rB,EAAA0rB,EAAA90B,QAAAo1B,OAAA,KACAhsB,EAAA0rB,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAg2B,UAAA5sB,EAAA0rB,EAAA90B,QAAAo1B,OAAAvtB,EAAA8sB,EAAA5sB,MAEAlI,KAAAiI,EAAAvF,GAAAuyB,EAAA90B,QAAAk1B,QAAA,GAAA9rB,IAGAmsB,OACA,MAAAh0B,EAAAuzB,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAi2B,SAAAlB,EAAAD,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAi2B,SAAAp2B,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAo1B,OAAA,KAAA,GAAAN,EAAA90B,QAAAo1B,OAAA,KACAc,EAAApB,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAm1B,UAAAt1B,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAo1B,OAAA,MAOA,OANAv1B,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAi1B,WAAAp1B,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAo1B,OAAAv1B,KAAAiI,EAAA,MACAjI,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAi1B,WAAAp1B,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAo1B,OAAAv1B,KAAAiI,EAAA,MACAjI,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAi1B,WAAAp1B,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAo1B,OAAAv1B,KAAAiI,EAAA,MACAjI,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAi1B,WAAAp1B,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAo1B,OAAAv1B,KAAAiI,EAAA,MACAjI,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAk1B,QAAA,GAAAJ,EAAA90B,QAAAi1B,WAAAp1B,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAo1B,OAAAc,KACAr2B,KAAAiI,EAAA,GAAAgtB,EAAA90B,QAAAk1B,QAAA,GAAAH,EAAAl1B,KAAAiI,EAAA,GAAA,KACAvG,yOC7CAgM,EAAApN,QAAAG,EAAA,eAAAN,kNCAAuN,EAAApN,QAAAG,EAAA,cAAAN,wNCAAuN,EAAApN,QAAAG,EAAA,qBAAAN,+NCAAuN,EAAApN,QAAAG,EAAA,oBAAAN,yNCAAuN,EAAApN,QAAAG,EAAA,eAAAN,oNCAAuN,EAAApN,QAAAG,EAAA,gBAAAN,oNCAAuN,EAAApN,QAAAG,EAAA,eAAAN,uNCAAuN,EAAApN,QAAAG,EAAA,mBAAAN,8NCAAuN,EAAApN,QAAAG,EAAA,qBAAAN,yNCAAuN,EAAApN,QAAAG,EAAA,cAAAN,wNCAAuN,EAAApN,QAAAG,EAAA,qBAAAN,yMCFA,SAAAm2B,GAmDA,IAAAC,EACAC,EAAA,6CACAC,EAAAjwB,KAAAC,KACAiwB,EAAAlwB,KAAAokB,MAEA+L,EAAA,qBACAC,EAAAD,EAAA,yDAEAE,EAAA,KACAC,EAAA,GACAC,EAAA,iBAEAC,EAAA,CAAA,EAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAA,KAAA,KAAA,MACAC,EAAA,IAKAC,EAAA,IAioFA,SAAAC,EAAAjvB,GACA,IAAAxF,EAAA,EAAAwF,EACA,OAAAA,EAAA,GAAAA,IAAAxF,EAAAA,EAAAA,EAAA,EAKA,SAAA00B,EAAA3tB,GAMA,IALA,IAAAxB,EAAAovB,EACA30B,EAAA,EACA40B,EAAA7tB,EAAAlH,OACAihB,EAAA/Z,EAAA,GAAA,GAEA/G,EAAA40B,GAAA,CAGA,IAFArvB,EAAAwB,EAAA/G,KAAA,GACA20B,EAAAP,EAAA7uB,EAAA1F,OACA80B,IAAApvB,EAAA,IAAAA,GACAub,GAAAvb,EAIA,IAAAqvB,EAAA9T,EAAAjhB,OAAA,KAAAihB,EAAA5gB,aAAA00B,KAEA,OAAA9T,EAAAziB,MAAA,EAAAu2B,EAAA,GAAA,GAKA,SAAAC,EAAA50B,EAAAE,GACA,IAAA4G,EAAAC,EACA8tB,EAAA70B,EAAAqG,EACAyuB,EAAA50B,EAAAmG,EACAtG,EAAAC,EAAAsF,EACAqvB,EAAAz0B,EAAAoF,EACAktB,EAAAxyB,EAAA+0B,EACA/c,EAAA9X,EAAA60B,EAGA,IAAAh1B,IAAA40B,EAAA,OAAA,KAMA,GAJA7tB,EAAA+tB,IAAAA,EAAA,GACA9tB,EAAA+tB,IAAAA,EAAA,GAGAhuB,GAAAC,EAAA,OAAAD,EAAAC,EAAA,GAAA4tB,EAAA50B,EAGA,GAAAA,GAAA40B,EAAA,OAAA50B,EAMA,GAJA+G,EAAA/G,EAAA,EACAgH,EAAAyrB,GAAAxa,GAGA6c,IAAAC,EAAA,OAAA/tB,EAAA,GAAA8tB,EAAA/tB,EAAA,GAAA,EAGA,IAAAC,EAAA,OAAAyrB,EAAAxa,EAAAlR,EAAA,GAAA,EAKA,IAHA6tB,GAAAnC,EAAAqC,EAAAj1B,SAAAoY,EAAA8c,EAAAl1B,QAAA4yB,EAAAxa,EAGAjY,EAAA,EAAAA,EAAA40B,EAAA50B,IAAA,GAAA80B,EAAA90B,IAAA+0B,EAAA/0B,GAAA,OAAA80B,EAAA90B,GAAA+0B,EAAA/0B,GAAA+G,EAAA,GAAA,EAGA,OAAA0rB,GAAAxa,EAAA,EAAAwa,EAAAxa,EAAAlR,EAAA,GAAA,EAOA,SAAAkuB,EAAAzvB,EAAAkF,EAAAzD,EAAAvC,GACA,GAAAc,EAAAkF,GAAAlF,EAAAyB,GAAAzB,IAAAwuB,EAAAxuB,GACA,MAAAvE,MACAgzB,GAAAvvB,GAAA,aAAA,iBAAAc,EACAA,EAAAkF,GAAAlF,EAAAyB,EAAA,kBAAA,oBACA,6BAAAie,OAAA1f,IAMA,SAAAud,EAAAvd,GACA,IAAAitB,EAAAjtB,EAAAc,EAAAzG,OAAA,EACA,OAAA40B,EAAAjvB,EAAAwvB,EAAAZ,IAAA3B,GAAAjtB,EAAAc,EAAAmsB,GAAA,GAAA,EAIA,SAAAyC,EAAA9H,EAAA4H,GACA,OAAA5H,EAAAvtB,OAAA,EAAAutB,EAAA1H,OAAA,GAAA,IAAA0H,EAAA/uB,MAAA,GAAA+uB,IACA4H,EAAA,EAAA,IAAA,MAAAA,EAIA,SAAAG,EAAA/H,EAAA4H,EAAAL,GACA,IAAA5c,EAAAqd,EAGA,GAAAJ,EAAA,EAAA,CAGA,IAAAI,EAAAT,EAAA,MAAAK,EAAAI,GAAAT,GACAvH,EAAAgI,EAAAhI,OAOA,KAAA4H,GAHAjd,EAAAqV,EAAAvtB,QAGA,CACA,IAAAu1B,EAAAT,EAAAK,GAAAjd,IAAAid,EAAAI,GAAAT,GACAvH,GAAAgI,OACAJ,EAAAjd,IACAqV,EAAAA,EAAA/uB,MAAA,EAAA22B,GAAA,IAAA5H,EAAA/uB,MAAA22B,IAIA,OAAA5H,EAOAyG,EAvvFA,SAAAwB,EAAAC,GACA,IAAArC,EAAAsC,EAAAC,EA0kBAC,EAMAC,EAwqBAC,EACAC,EACAC,EACAC,EACAC,EA3vCAjK,EAAA+H,EAAAxiB,UAAA,CAAA/P,YAAAuyB,EAAAtzB,SAAA,KAAAy1B,QAAA,MACAC,EAAA,IAAApC,EAAA,GAUAqC,EAAA,GAaAC,EAAA,EAMAC,GAAA,EAIAC,EAAA,GAMAC,GAAA,IAKAC,EAAA,IAGAC,GAAA,EAkBAC,EAAA,EAIAC,EAAA,EAGAC,EAAA,CACApwB,OAAA,GACAqwB,UAAA,EACAC,mBAAA,EACAC,eAAA,IACAC,iBAAA,IACAC,kBAAA,EACAC,uBAAA,IACAC,OAAA,IAMAC,EAAA,uCAgBA,SAAAtD,EAAAhtB,EAAAG,GACA,IAAAowB,EAAA9wB,EAAA+wB,EAAArC,EAAAh1B,EAAAs3B,EAAAvf,EAAAqV,EACAntB,EAAA3C,KAGA,KAAA2C,aAAA4zB,GAAA,OAAA,IAAAA,EAAAhtB,EAAAG,GAEA,GAAA,MAAAA,EAAA,CAEA,GAAAH,IAAA,IAAAA,EAAA0wB,aAYA,OAXAt3B,EAAAsF,EAAAsB,EAAAtB,QAEAsB,EAAAP,GAAAO,EAAAmuB,EAAAuB,EACAt2B,EAAAqG,EAAArG,EAAA+0B,EAAA,KACAnuB,EAAAmuB,EAAAsB,EACAr2B,EAAAqG,EAAA,CAAArG,EAAA+0B,EAAA,IAEA/0B,EAAA+0B,EAAAnuB,EAAAmuB,EACA/0B,EAAAqG,EAAAO,EAAAP,EAAAjI,UAMA,IAAAi5B,EAAA,iBAAAzwB,IAAA,EAAAA,GAAA,EAAA,CAMA,GAHA5G,EAAAsF,EAAA,EAAAsB,EAAA,GAAAA,GAAAA,GAAA,GAAA,EAGAA,MAAAA,EAAA,CACA,IAAAmuB,EAAA,EAAAh1B,EAAA6G,EAAA7G,GAAA,GAAAA,GAAA,GAAAg1B,KASA,YAPAA,EAAAuB,EACAt2B,EAAAqG,EAAArG,EAAA+0B,EAAA,MAEA/0B,EAAA+0B,EAAAA,EACA/0B,EAAAqG,EAAA,CAAAO,KAMAumB,EAAAlI,OAAAre,OACA,CAEA,IAAAitB,EAAA0D,KAAApK,EAAAlI,OAAAre,IAAA,OAAA2uB,EAAAv1B,EAAAmtB,EAAAkK,GAEAr3B,EAAAsF,EAAA,IAAA6nB,EAAAltB,WAAA,IAAAktB,EAAAA,EAAA/uB,MAAA,IAAA,GAAA,GAIA22B,EAAA5H,EAAA5mB,QAAA,OAAA,IAAA4mB,EAAAA,EAAAD,QAAA,IAAA,MAGAntB,EAAAotB,EAAAJ,OAAA,OAAA,GAGAgI,EAAA,IAAAA,EAAAh1B,GACAg1B,IAAA5H,EAAA/uB,MAAA2B,EAAA,GACAotB,EAAAA,EAAApI,UAAA,EAAAhlB,IACAg1B,EAAA,IAGAA,EAAA5H,EAAAvtB,YAGA,CAOA,GAJAo1B,EAAAjuB,EAAA,EAAAmwB,EAAAt3B,OAAA,QAIA,IAAAmH,EAEA,OAAAywB,EADAx3B,EAAA,IAAA4zB,EAAAhtB,GACAqvB,EAAAj2B,EAAA+0B,EAAA,EAAAmB,GAKA,GAFA/I,EAAAlI,OAAAre,GAEAywB,EAAA,iBAAAzwB,EAAA,CAGA,GAAA,EAAAA,GAAA,EAAA,OAAA2uB,EAAAv1B,EAAAmtB,EAAAkK,EAAAtwB,GAKA,GAHA/G,EAAAsF,EAAA,EAAAsB,EAAA,GAAAumB,EAAAA,EAAA/uB,MAAA,IAAA,GAAA,EAGAw1B,EAAA6D,OAAAtK,EAAAD,QAAA,YAAA,IAAAttB,OAAA,GACA,MAAAoB,MACAizB,EAAArtB,QAGA5G,EAAAsF,EAAA,KAAA6nB,EAAAltB,WAAA,IAAAktB,EAAAA,EAAA/uB,MAAA,IAAA,GAAA,EAQA,IALA+4B,EAAAD,EAAA94B,MAAA,EAAA2I,GACAguB,EAAAh1B,EAAA,EAIA+X,EAAAqV,EAAAvtB,OAAAG,EAAA+X,EAAA/X,IACA,GAAAo3B,EAAA5wB,QAAAF,EAAA8mB,EAAA1H,OAAA1lB,IAAA,EAAA,CACA,GAAA,KAAAsG,GAGA,GAAAtG,EAAAg1B,EAAA,CACAA,EAAAjd,EACA,eAEA,IAAAsf,IAGAjK,GAAAA,EAAAuK,gBAAAvK,EAAAA,EAAAhtB,gBACAgtB,GAAAA,EAAAhtB,gBAAAgtB,EAAAA,EAAAuK,gBAAA,CACAN,GAAA,EACAr3B,GAAA,EACAg1B,EAAA,EACA,SAIA,OAAAQ,EAAAv1B,EAAAilB,OAAAre,GAAAywB,EAAAtwB,GAKAswB,GAAA,GAIAtC,GAHA5H,EAAAmI,EAAAnI,EAAApmB,EAAA,GAAA/G,EAAAsF,IAGAiB,QAAA,OAAA,EAAA4mB,EAAAA,EAAAD,QAAA,IAAA,IACA6H,EAAA5H,EAAAvtB,OAIA,IAAAG,EAAA,EAAA,KAAAotB,EAAAltB,WAAAF,GAAAA,KAGA,IAAA+X,EAAAqV,EAAAvtB,OAAA,KAAAutB,EAAAltB,aAAA6X,KAEA,GAAAqV,EAAAA,EAAA/uB,MAAA2B,IAAA+X,GAAA,CAIA,GAHAA,GAAA/X,EAGAs3B,GAAAzD,EAAA6D,OACA3f,EAAA,KAAAlR,EAAAwtB,GAAAxtB,IAAAmtB,EAAAntB,IACA,MAAA5F,MACAizB,EAAAj0B,EAAAsF,EAAAsB,GAIA,IAAAmuB,EAAAA,EAAAh1B,EAAA,GAAAu2B,EAGAt2B,EAAAqG,EAAArG,EAAA+0B,EAAA,UAGA,GAAAA,EAAAsB,EAGAr2B,EAAAqG,EAAA,CAAArG,EAAA+0B,EAAA,OACA,CAWA,GAVA/0B,EAAA+0B,EAAAA,EACA/0B,EAAAqG,EAAA,GAMAtG,GAAAg1B,EAAA,GAAAZ,EACAY,EAAA,IAAAh1B,GAAAo0B,GAEAp0B,EAAA+X,EAAA,CAGA,IAFA/X,GAAAC,EAAAqG,EAAAnC,MAAAipB,EAAA/uB,MAAA,EAAA2B,IAEA+X,GAAAqc,EAAAp0B,EAAA+X,GACA9X,EAAAqG,EAAAnC,MAAAipB,EAAA/uB,MAAA2B,EAAAA,GAAAo0B,IAGAp0B,EAAAo0B,GAAAhH,EAAAA,EAAA/uB,MAAA2B,IAAAH,YAEAG,GAAA+X,EAGA,KAAA/X,IAAAotB,GAAA,KACAntB,EAAAqG,EAAAnC,MAAAipB,SAKAntB,EAAAqG,EAAA,CAAArG,EAAA+0B,EAAA,GA41BA,SAAAlQ,EAAAtf,EAAAxF,EAAA43B,EAAAC,GACA,IAAAC,EAAA9C,EAAA+C,EAAAhgB,EAAAqV,EAKA,GAHA,MAAAwK,EAAAA,EAAAzB,EACAlB,EAAA2C,EAAA,EAAA,IAEApyB,EAAAc,EAAA,OAAAd,EAAAjF,WAKA,GAHAu3B,EAAAtyB,EAAAc,EAAA,GACAyxB,EAAAvyB,EAAAwvB,EAEA,MAAAh1B,EACAotB,EAAAsH,EAAAlvB,EAAAc,GACA8mB,EAAA,GAAAyK,GAAA,GAAAA,IAAAE,GAAA3B,GAAA2B,GAAA1B,GACAnB,EAAA9H,EAAA2K,GACA5C,EAAA/H,EAAA2K,EAAA,UAeA,GAVA/C,GAHAxvB,EAAAiyB,EAAA,IAAA5D,EAAAruB,GAAAxF,EAAA43B,IAGA5C,EAGAjd,GADAqV,EAAAsH,EAAAlvB,EAAAc,IACAzG,OAOA,GAAAg4B,GAAA,GAAAA,IAAA73B,GAAAg1B,GAAAA,GAAAoB,GAAA,CAGA,KAAAre,EAAA/X,EAAAotB,GAAA,IAAArV,KACAqV,EAAA8H,EAAA9H,EAAA4H,QAQA,GAJAh1B,GAAA+3B,EACA3K,EAAA+H,EAAA/H,EAAA4H,EAAA,KAGAA,EAAA,EAAAjd,GACA,KAAA/X,EAAA,EAAA,IAAAotB,GAAA,IAAAptB,IAAAotB,GAAA,WAGA,IADAptB,GAAAg1B,EAAAjd,GACA,EAEA,IADAid,EAAA,GAAAjd,IAAAqV,GAAA,KACAptB,IAAAotB,GAAA,KAMA,OAAA5nB,EAAAD,EAAA,GAAAuyB,EAAA,IAAA1K,EAAAA,EAKA,SAAA4K,EAAAzpB,EAAAwD,GAKA,IAJA,IAAAvM,EACAxF,EAAA,EACAi4B,EAAA,IAAApE,EAAAtlB,EAAA,IAEAvO,EAAAuO,EAAA1O,OAAAG,IAAA,CAIA,KAHAwF,EAAA,IAAAquB,EAAAtlB,EAAAvO,KAGAuF,EAAA,CACA0yB,EAAAzyB,EACA,MACAuM,EAAA9C,KAAAgpB,EAAAzyB,KACAyyB,EAAAzyB,GAIA,OAAAyyB,EAQA,SAAAC,EAAA1yB,EAAAc,EAAA0uB,GAKA,IAJA,IAAAh1B,EAAA,EACA40B,EAAAtuB,EAAAzG,QAGAyG,IAAAsuB,GAAAtuB,EAAAyK,OAGA,IAAA6jB,EAAAtuB,EAAA,GAAAsuB,GAAA,GAAAA,GAAA,GAAA50B,KAkBA,OAfAg1B,EAAAh1B,EAAAg1B,EAAAZ,EAAA,GAAAmC,EAGA/wB,EAAAc,EAAAd,EAAAwvB,EAAA,KAGAA,EAAAsB,EAGA9wB,EAAAc,EAAA,CAAAd,EAAAwvB,EAAA,IAEAxvB,EAAAwvB,EAAAA,EACAxvB,EAAAc,EAAAA,GAGAd,EA0DA,SAAAiyB,EAAAx3B,EAAAk4B,EAAAP,EAAA9W,GACA,IAAAa,EAAA3hB,EAAA40B,EAAAnC,EAAAjtB,EAAA4yB,EAAAC,EACAvD,EAAA70B,EAAAqG,EACAgyB,EAAAhE,EAGA,GAAAQ,EAAA,CAQApc,EAAA,CAGA,IAAAiJ,EAAA,EAAA8Q,EAAAqC,EAAA,GAAArC,GAAA,GAAAA,GAAA,GAAA9Q,KAIA,IAHA3hB,EAAAm4B,EAAAxW,GAGA,EACA3hB,GAAAo0B,EACAQ,EAAAuD,EAIAE,GAHA7yB,EAAAsvB,EAAAsD,EAAA,IAGAE,EAAA3W,EAAAiT,EAAA,GAAA,GAAA,OAIA,IAFAwD,EAAArE,GAAA/zB,EAAA,GAAAo0B,KAEAU,EAAAj1B,OAAA,CAEA,IAAAihB,EASA,MAAApI,EANA,KAAAoc,EAAAj1B,QAAAu4B,EAAAtD,EAAA3wB,KAAA,IACAqB,EAAA6yB,EAAA,EACA1W,EAAA,EAEAiT,GADA50B,GAAAo0B,GACAA,EAAA,MAIA,CAIA,IAHA5uB,EAAAitB,EAAAqC,EAAAsD,GAGAzW,EAAA,EAAA8Q,GAAA,GAAAA,GAAA,GAAA9Q,KAUA0W,GAHAzD,GAJA50B,GAAAo0B,GAIAA,EAAAzS,GAGA,EAAA,EAAAnc,EAAA8yB,EAAA3W,EAAAiT,EAAA,GAAA,GAAA,EAmBA,GAfA9T,EAAAA,GAAAqX,EAAA,GAKA,MAAArD,EAAAsD,EAAA,KAAAxD,EAAA,EAAApvB,EAAAA,EAAA8yB,EAAA3W,EAAAiT,EAAA,IAEA9T,EAAA8W,EAAA,GACAS,GAAAvX,KAAA,GAAA8W,GAAAA,IAAA33B,EAAAsF,EAAA,EAAA,EAAA,IACA8yB,EAAA,GAAA,GAAAA,IAAA,GAAAT,GAAA9W,GAAA,GAAA8W,IAGA53B,EAAA,EAAA40B,EAAA,EAAApvB,EAAA8yB,EAAA3W,EAAAiT,GAAA,EAAAE,EAAAsD,EAAA,IAAA,GAAA,GACAR,IAAA33B,EAAAsF,EAAA,EAAA,EAAA,IAEA4yB,EAAA,IAAArD,EAAA,GAiBA,OAhBAA,EAAAj1B,OAAA,EAEAihB,GAGAqX,GAAAl4B,EAAA+0B,EAAA,EAGAF,EAAA,GAAAwD,GAAAlE,EAAA+D,EAAA/D,GAAAA,GACAn0B,EAAA+0B,GAAAmD,GAAA,GAIArD,EAAA,GAAA70B,EAAA+0B,EAAA,EAGA/0B,EAkBA,GAdA,GAAAD,GACA80B,EAAAj1B,OAAAu4B,EACA3F,EAAA,EACA2F,MAEAtD,EAAAj1B,OAAAu4B,EAAA,EACA3F,EAAA6F,EAAAlE,EAAAp0B,GAIA80B,EAAAsD,GAAAxD,EAAA,EAAAZ,EAAAxuB,EAAA8yB,EAAA3W,EAAAiT,GAAA0D,EAAA1D,IAAAnC,EAAA,GAIA3R,EAEA,OAAA,CAGA,GAAA,GAAAsX,EAAA,CAGA,IAAAp4B,EAAA,EAAA40B,EAAAE,EAAA,GAAAF,GAAA,GAAAA,GAAA,GAAA50B,KAEA,IADA40B,EAAAE,EAAA,IAAArC,EACAA,EAAA,EAAAmC,GAAA,GAAAA,GAAA,GAAAnC,KAGAzyB,GAAAyyB,IACAxyB,EAAA+0B,IACAF,EAAA,IAAAX,IAAAW,EAAA,GAAA,IAGA,MAGA,GADAA,EAAAsD,IAAA3F,EACAqC,EAAAsD,IAAAjE,EAAA,MACAW,EAAAsD,KAAA,EACA3F,EAAA,EAMA,IAAAzyB,EAAA80B,EAAAj1B,OAAA,IAAAi1B,IAAA90B,GAAA80B,EAAA/jB,QAIA9Q,EAAA+0B,EAAAuB,EACAt2B,EAAAqG,EAAArG,EAAA+0B,EAAA,KAGA/0B,EAAA+0B,EAAAsB,IACAr2B,EAAAqG,EAAA,CAAArG,EAAA+0B,EAAA,IAIA,OAAA/0B,EAIA,SAAA+1B,EAAAxwB,GACA,IAAA4nB,EACA4H,EAAAxvB,EAAAwvB,EAEA,OAAA,OAAAA,EAAAxvB,EAAAjF,YAEA6sB,EAAAsH,EAAAlvB,EAAAc,GAEA8mB,EAAA4H,GAAAoB,GAAApB,GAAAqB,EACAnB,EAAA9H,EAAA4H,GACAG,EAAA/H,EAAA4H,EAAA,KAEAxvB,EAAAD,EAAA,EAAA,IAAA6nB,EAAAA,GA0pCA,OAh0EAyG,EAAAwB,MAAAA,EAEAxB,EAAA0E,SAAA,EACA1E,EAAA2E,WAAA,EACA3E,EAAA4E,WAAA,EACA5E,EAAA6E,YAAA,EACA7E,EAAA8E,cAAA,EACA9E,EAAA+E,gBAAA,EACA/E,EAAAgF,gBAAA,EACAhF,EAAAiF,gBAAA,EACAjF,EAAAkF,iBAAA,EACAlF,EAAAmF,OAAA,EAqCAnF,EAAA1K,OAAA0K,EAAAphB,IAAA,SAAAd,GACA,IAAAjI,EAAA7C,EAEA,GAAA,MAAA8K,EAAA,CAEA,GAAA,iBAAAA,EA2HA,MAAA1Q,MACAgzB,EAAA,oBAAAtiB,GAtFA,GAlCAA,EAAA+N,eAAAhW,EAAA,oBAEAurB,EADApuB,EAAA8K,EAAAjI,GACA,EAAA8qB,EAAA9qB,GACAwsB,EAAArvB,GAKA8K,EAAA+N,eAAAhW,EAAA,mBAEAurB,EADApuB,EAAA8K,EAAAjI,GACA,EAAA,EAAAA,GACAysB,EAAAtvB,GAOA8K,EAAA+N,eAAAhW,EAAA,qBACA7C,EAAA8K,EAAAjI,KACA7C,EAAAkK,KACAkkB,EAAApuB,EAAA,IAAA2tB,EAAA,EAAA9qB,GACAurB,EAAApuB,EAAA,GAAA,EAAA2tB,EAAA9qB,GACA0sB,EAAAvvB,EAAA,GACAwvB,EAAAxvB,EAAA,KAEAouB,EAAApuB,GAAA2tB,EAAAA,EAAA9qB,GACA0sB,IAAAC,EAAAxvB,EAAA,GAAAA,EAAAA,KAOA8K,EAAA+N,eAAAhW,EAAA,SAEA,IADA7C,EAAA8K,EAAAjI,KACA7C,EAAAkK,IACAkkB,EAAApuB,EAAA,IAAA2tB,GAAA,EAAA9qB,GACAurB,EAAApuB,EAAA,GAAA,EAAA2tB,EAAA9qB,GACA4sB,EAAAzvB,EAAA,GACA0vB,EAAA1vB,EAAA,OACA,CAEA,GADAouB,EAAApuB,GAAA2tB,EAAAA,EAAA9qB,IACA7C,EAGA,MAAA5F,MACAgzB,EAAAvqB,EAAA,oBAAA7C,GAHAyvB,IAAAC,EAAA1vB,EAAA,GAAAA,EAAAA,GAWA,GAAA8K,EAAA+N,eAAAhW,EAAA,UAAA,CAEA,IADA7C,EAAA8K,EAAAjI,QACA7C,EAcA,MAAA5F,MACAgzB,EAAAvqB,EAAA,uBAAA7C,GAdA,GAAAA,EAAA,CACA,GAAA,oBAAAoyB,SAAAA,SACAA,OAAAC,kBAAAD,OAAAE,YAIA,MADA3C,GAAA3vB,EACA5F,MACAgzB,EAAA,sBAJAuC,EAAA3vB,OAOA2vB,EAAA3vB,EA0BA,GAhBA8K,EAAA+N,eAAAhW,EAAA,iBAEAurB,EADApuB,EAAA8K,EAAAjI,GACA,EAAA,EAAAA,GACA+sB,EAAA5vB,GAKA8K,EAAA+N,eAAAhW,EAAA,mBAEAurB,EADApuB,EAAA8K,EAAAjI,GACA,EAAA8qB,EAAA9qB,GACAgtB,EAAA7vB,GAKA8K,EAAA+N,eAAAhW,EAAA,UAAA,CAEA,GAAA,iBADA7C,EAAA8K,EAAAjI,IAEA,MAAAzI,MACAgzB,EAAAvqB,EAAA,mBAAA7C,GAFA8vB,EAAA9vB,EAOA,GAAA8K,EAAA+N,eAAAhW,EAAA,YAAA,CAKA,GAAA,iBAJA7C,EAAA8K,EAAAjI,KAIA,wBAAA8tB,KAAA3wB,GAGA,MAAA5F,MACAgzB,EAAAvqB,EAAA,aAAA7C,GAHAswB,EAAAtwB,GAeA,MAAA,CACAqvB,eAAAA,EACAC,cAAAA,EACAiD,eAAA,CAAAhD,EAAAC,GACAgD,MAAA,CAAA/C,EAAAC,GACAC,OAAAA,EACAC,YAAAA,EACAC,cAAAA,EACAC,OAAAA,EACAQ,SAAAA,IAcAtD,EAAAyF,YAAA,SAAAzyB,GACA,IAAAA,IAAA,IAAAA,EAAA0wB,aAAA,OAAA,EACA,IAAA1D,EAAA6D,MAAA,OAAA,EAEA,IAAA13B,EAAAwF,EACAc,EAAAO,EAAAP,EACA0uB,EAAAnuB,EAAAmuB,EACAzvB,EAAAsB,EAAAtB,EAEAmT,EAAA,GAAA,kBAAA,GAAAnY,SAAA0O,KAAA3I,IAEA,IAAA,IAAAf,IAAA,IAAAA,IAAAyvB,IAAAR,GAAAQ,GAAAR,GAAAQ,IAAAhB,EAAAgB,GAAA,CAGA,GAAA,IAAA1uB,EAAA,GAAA,CACA,GAAA,IAAA0uB,GAAA,IAAA1uB,EAAAzG,OAAA,OAAA,EACA,MAAA6Y,EASA,IALA1Y,GAAAg1B,EAAA,GAAAZ,GACA,IAAAp0B,GAAAo0B,GAIAlP,OAAA5e,EAAA,IAAAzG,QAAAG,EAAA,CAEA,IAAAA,EAAA,EAAAA,EAAAsG,EAAAzG,OAAAG,IAEA,IADAwF,EAAAc,EAAAtG,IACA,GAAAwF,GAAA2uB,GAAA3uB,IAAAwuB,EAAAxuB,GAAA,MAAAkT,EAIA,GAAA,IAAAlT,EAAA,OAAA,SAKA,GAAA,OAAAc,GAAA,OAAA0uB,IAAA,OAAAzvB,GAAA,IAAAA,IAAA,IAAAA,GACA,OAAA,EAGA,MAAAtE,MACAgzB,EAAA,sBAAAptB,IASAgtB,EAAA0F,QAAA1F,EAAA5sB,IAAA,WACA,OAAA+wB,EAAAtqB,UAAAoe,EAAA0N,KASA3F,EAAA4F,QAAA5F,EAAAnpB,IAAA,WACA,OAAAstB,EAAAtqB,UAAAoe,EAAA4N,KAcA7F,EAAAjC,QACA6D,EAAA,iBAMAC,EAAA5xB,KAAA8tB,SAAA6D,EAAA,QACA,WAAA,OAAAzB,EAAAlwB,KAAA8tB,SAAA6D,IACA,WAAA,OAAA,SAAA,WAAA3xB,KAAA8tB,SAAA,IACA,QAAA9tB,KAAA8tB,SAAA,IAEA,SAAA+H,GACA,IAAA5yB,EAAAC,EAAAguB,EAAAvC,EAAA5rB,EACA7G,EAAA,EACAsG,EAAA,GACAszB,EAAA,IAAA/F,EAAAoC,GAOA,GALA,MAAA0D,EAAAA,EAAAzD,EACAjB,EAAA0E,EAAA,EAAAnF,GAEA/B,EAAAsB,EAAA4F,EAAAvF,GAEAoC,EAGA,GAAAyC,OAAAC,gBAAA,CAIA,IAFAnyB,EAAAkyB,OAAAC,gBAAA,IAAAW,YAAApH,GAAA,IAEAzyB,EAAAyyB,IAQA5rB,EAAA,OAAAE,EAAA/G,IAAA+G,EAAA/G,EAAA,KAAA,MAMA,MACAgH,EAAAiyB,OAAAC,gBAAA,IAAAW,YAAA,IACA9yB,EAAA/G,GAAAgH,EAAA,GACAD,EAAA/G,EAAA,GAAAgH,EAAA,KAKAV,EAAAnC,KAAA0C,EAAA,MACA7G,GAAA,GAGAA,EAAAyyB,EAAA,MAGA,CAAA,IAAAwG,OAAAE,YA2BA,MADA3C,GAAA,EACAv1B,MACAgzB,EAAA,sBAvBA,IAFAltB,EAAAkyB,OAAAE,YAAA1G,GAAA,GAEAzyB,EAAAyyB,IAMA5rB,EAAA,iBAAA,GAAAE,EAAA/G,IAAA,cAAA+G,EAAA/G,EAAA,GACA,WAAA+G,EAAA/G,EAAA,GAAA,SAAA+G,EAAA/G,EAAA,IACA+G,EAAA/G,EAAA,IAAA,KAAA+G,EAAA/G,EAAA,IAAA,GAAA+G,EAAA/G,EAAA,KAEA,KACAi5B,OAAAE,YAAA,GAAA1Y,KAAA1Z,EAAA/G,IAIAsG,EAAAnC,KAAA0C,EAAA,MACA7G,GAAA,GAGAA,EAAAyyB,EAAA,EASA,IAAA+D,EAEA,KAAAx2B,EAAAyyB,IACA5rB,EAAA6uB,KACA,OAAApvB,EAAAtG,KAAA6G,EAAA,MAcA,IAVA4rB,EAAAnsB,IAAAtG,GACA25B,GAAAvF,EAGA3B,GAAAkH,IACA9yB,EAAAytB,EAAAF,EAAAuF,GACArzB,EAAAtG,GAAAg0B,EAAAvB,EAAA5rB,GAAAA,GAIA,IAAAP,EAAAtG,GAAAsG,EAAAyK,MAAA/Q,KAGA,GAAAA,EAAA,EACAsG,EAAA,CAAA0uB,EAAA,OACA,CAGA,IAAAA,GAAA,EAAA,IAAA1uB,EAAA,GAAAA,EAAAuY,OAAA,EAAA,GAAAmW,GAAAZ,GAGA,IAAAp0B,EAAA,EAAA6G,EAAAP,EAAA,GAAAO,GAAA,GAAAA,GAAA,GAAA7G,KAGAA,EAAAo0B,IAAAY,GAAAZ,EAAAp0B,GAKA,OAFA45B,EAAA5E,EAAAA,EACA4E,EAAAtzB,EAAAA,EACAszB,IAUA/F,EAAA9B,IAAA,WAIA,IAHA,IAAA/xB,EAAA,EACAuO,EAAAb,UACAqkB,EAAA,IAAA8B,EAAAtlB,EAAA,IACAvO,EAAAuO,EAAA1O,QAAAkyB,EAAAA,EAAA+H,KAAAvrB,EAAAvO,MACA,OAAA+xB,GAQAwD,EAAA,WACA,IAAAwE,EAAA,aAOA,SAAAC,EAAA5M,EAAA6M,EAAAC,EAAA9C,GAOA,IANA,IAAAxC,EAEAuF,EADAp0B,EAAA,CAAA,GAEA/F,EAAA,EACA+X,EAAAqV,EAAAvtB,OAEAG,EAAA+X,GAAA,CACA,IAAAoiB,EAAAp0B,EAAAlG,OAAAs6B,IAAAp0B,EAAAo0B,IAAAF,GAIA,IAFAl0B,EAAA,IAAAqxB,EAAA5wB,QAAA4mB,EAAA1H,OAAA1lB,MAEA40B,EAAA,EAAAA,EAAA7uB,EAAAlG,OAAA+0B,IAEA7uB,EAAA6uB,GAAAsF,EAAA,IACA,MAAAn0B,EAAA6uB,EAAA,KAAA7uB,EAAA6uB,EAAA,GAAA,GACA7uB,EAAA6uB,EAAA,IAAA7uB,EAAA6uB,GAAAsF,EAAA,EACAn0B,EAAA6uB,IAAAsF,GAKA,OAAAn0B,EAAAq0B,UAMA,OAAA,SAAAhN,EAAA6M,EAAAC,EAAAG,EAAAC,GACA,IAAAlD,EAAAzV,EAAAqT,EAAAvC,EAAA3R,EAAA7gB,EAAA60B,EAAA30B,EACAH,EAAAotB,EAAA5mB,QAAA,KACAmzB,EAAAzD,EACA0B,EAAAzB,EA+BA,IA5BAn2B,GAAA,IACAyyB,EAAAiE,EAGAA,EAAA,EACAtJ,EAAAA,EAAAD,QAAA,IAAA,IAEAltB,GADAE,EAAA,IAAA0zB,EAAAoG,IACAvS,IAAA0F,EAAAvtB,OAAAG,GACA02B,EAAAjE,EAKAtyB,EAAAmG,EAAA0zB,EAAA7E,EAAAT,EAAAz0B,EAAAqG,GAAArG,EAAA+0B,EAAA,KACA,GAAAkF,EAAAH,GACA55B,EAAA60B,EAAA70B,EAAAmG,EAAAzG,QAUAm1B,EAAAvC,GALAqC,EAAAkF,EAAA5M,EAAA6M,EAAAC,EAAAI,GACAlD,EAAAD,EAAA4C,IACA3C,EAAA2C,EAAA5C,KAGAt3B,OAGA,GAAAi1B,IAAArC,GAAAqC,EAAA/jB,OAGA,IAAA+jB,EAAA,GAAA,OAAAsC,EAAA1R,OAAA,GAqCA,GAlCA1lB,EAAA,IACAg1B,GAEA/0B,EAAAqG,EAAAwuB,EACA70B,EAAA+0B,EAAAA,EAGA/0B,EAAAsF,EAAA80B,EAEAvF,GADA70B,EAAAgzB,EAAAhzB,EAAAE,EAAAw5B,EAAA/B,EAAAsC,IACA5zB,EACAwa,EAAA7gB,EAAA6gB,EACAkU,EAAA/0B,EAAA+0B,GASAh1B,EAAA80B,EAHAnT,EAAAqT,EAAA2E,EAAA,GAOAlH,EAAAyH,EAAA,EACApZ,EAAAA,GAAAa,EAAA,GAAA,MAAAmT,EAAAnT,EAAA,GAEAb,EAAA8W,EAAA,GAAA,MAAA53B,GAAA8gB,KAAA,GAAA8W,GAAAA,IAAA33B,EAAAsF,EAAA,EAAA,EAAA,IACAvF,EAAAyyB,GAAAzyB,GAAAyyB,IAAA,GAAAmF,GAAA9W,GAAA,GAAA8W,GAAA,EAAA9C,EAAAnT,EAAA,IACAiW,IAAA33B,EAAAsF,EAAA,EAAA,EAAA,IAKAoc,EAAA,IAAAmT,EAAA,GAGA1H,EAAAtM,EAAAqU,EAAAiC,EAAA1R,OAAA,IAAAiU,EAAAvC,EAAA1R,OAAA,IAAA0R,EAAA1R,OAAA,OACA,CAMA,GAHAoP,EAAAj1B,OAAA8hB,EAGAb,EAGA,MAAAoZ,IAAApF,IAAAnT,GAAAuY,GACApF,EAAAnT,GAAA,EAEAA,MACAqT,EACAF,EAAA,CAAA,GAAAlqB,OAAAkqB,IAMA,IAAArC,EAAAqC,EAAAj1B,QAAAi1B,IAAArC,KAGA,IAAAzyB,EAAA,EAAAotB,EAAA,GAAAptB,GAAAyyB,EAAArF,GAAAgK,EAAA1R,OAAAoP,EAAA90B,OAGAotB,EAAA+H,EAAA/H,EAAA4H,EAAAoC,EAAA1R,OAAA,IAIA,OAAA0H,GAjJA,GAuJA6F,EAAA,WAGA,SAAAS,EAAAzzB,EAAAwyB,EAAA8H,GACA,IAAAtC,EAAAuC,EAAAC,EAAAC,EACAC,EAAA,EACA36B,EAAAC,EAAAJ,OACA+6B,EAAAnI,EAAA8B,EACAsG,EAAApI,EAAA8B,EAAA,EAEA,IAAAt0B,EAAAA,EAAA5B,QAAA2B,KAKA26B,IADAH,EAAAI,GAHAH,EAAAx6B,EAAAD,GAAAu0B,IAEA0D,EAAA4C,EAAAJ,GADAC,EAAAz6B,EAAAD,GAAAu0B,EAAA,GACAqG,GACArG,EAAAA,EAAAoG,GACAJ,EAAA,IAAAtC,EAAA1D,EAAA,GAAAsG,EAAAH,EACAz6B,EAAAD,GAAAw6B,EAAAD,EAKA,OAFAI,IAAA16B,EAAA,CAAA06B,GAAA/vB,OAAA3K,IAEAA,EAGA,SAAA40B,EAAA9tB,EAAAC,EAAA8zB,EAAAC,GACA,IAAA/6B,EAAAg7B,EAEA,GAAAF,GAAAC,EACAC,EAAAF,EAAAC,EAAA,GAAA,OAGA,IAAA/6B,EAAAg7B,EAAA,EAAAh7B,EAAA86B,EAAA96B,IAEA,GAAA+G,EAAA/G,IAAAgH,EAAAhH,GAAA,CACAg7B,EAAAj0B,EAAA/G,GAAAgH,EAAAhH,GAAA,GAAA,EACA,MAKA,OAAAg7B,EAGA,SAAAjI,EAAAhsB,EAAAC,EAAA8zB,EAAAP,GAIA,IAHA,IAAAv6B,EAAA,EAGA86B,KACA/zB,EAAA+zB,IAAA96B,EACAA,EAAA+G,EAAA+zB,GAAA9zB,EAAA8zB,GAAA,EAAA,EACA/zB,EAAA+zB,GAAA96B,EAAAu6B,EAAAxzB,EAAA+zB,GAAA9zB,EAAA8zB,GAIA,MAAA/zB,EAAA,IAAAA,EAAAlH,OAAA,EAAAkH,EAAA8X,OAAA,EAAA,KAIA,OAAA,SAAA5e,EAAAE,EAAAw5B,EAAA/B,EAAA2C,GACA,IAAAS,EAAAhG,EAAAh1B,EAAAi7B,EAAAz1B,EAAA01B,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACAC,EAAAC,EACAt2B,EAAAtF,EAAAsF,GAAApF,EAAAoF,EAAA,GAAA,EACAuvB,EAAA70B,EAAAqG,EACAyuB,EAAA50B,EAAAmG,EAGA,KAAAwuB,GAAAA,EAAA,IAAAC,GAAAA,EAAA,IAEA,OAAA,IAAAlB,EAGA5zB,EAAAsF,GAAApF,EAAAoF,IAAAuvB,GAAAC,GAAAD,EAAA,IAAAC,EAAA,GAAAA,GAGAD,GAAA,GAAAA,EAAA,KAAAC,EAAA,EAAAxvB,EAAAA,EAAA,EAHAiiB,KAoBA,IAZA6T,GADAD,EAAA,IAAAvH,EAAAtuB,IACAe,EAAA,GAEAf,EAAAo0B,GADA3E,EAAA/0B,EAAA+0B,EAAA70B,EAAA60B,GACA,EAEAuF,IACAA,EAAApG,EACAa,EAAAP,EAAAx0B,EAAA+0B,EAAAZ,GAAAK,EAAAt0B,EAAA60B,EAAAZ,GACA7uB,EAAAA,EAAA6uB,EAAA,GAKAp0B,EAAA,EAAA+0B,EAAA/0B,KAAA80B,EAAA90B,IAAA,GAAAA,KAIA,GAFA+0B,EAAA/0B,IAAA80B,EAAA90B,IAAA,IAAAg1B,IAEAzvB,EAAA,EACA81B,EAAAl3B,KAAA,GACA82B,GAAA,MACA,CAwBA,IAvBAS,EAAA5G,EAAAj1B,OACA+7B,EAAA7G,EAAAl1B,OACAG,EAAA,EACAuF,GAAA,GAIAC,EAAAwuB,EAAAuG,GAAAxF,EAAA,GAAA,KAIA,IACAA,EAAArB,EAAAqB,EAAAvvB,EAAA+0B,GACAzF,EAAApB,EAAAoB,EAAAtvB,EAAA+0B,GACAqB,EAAA7G,EAAAl1B,OACA67B,EAAA5G,EAAAj1B,QAGA47B,EAAAG,EAEAL,GADAD,EAAAxG,EAAAz2B,MAAA,EAAAu9B,IACA/7B,OAGA07B,EAAAK,EAAAN,EAAAC,KAAA,GACAM,EAAA9G,EAAA12B,QACAw9B,EAAA,CAAA,GAAAjxB,OAAAixB,GACAF,EAAA5G,EAAA,GACAA,EAAA,IAAAwF,EAAA,GAAAoB,IAIA,EAAA,CAOA,GANAn2B,EAAA,GAGAw1B,EAAAnG,EAAAE,EAAAuG,EAAAM,EAAAL,IAGA,EAAA,CAqBA,GAjBAC,EAAAF,EAAA,GACAM,GAAAL,IAAAC,EAAAA,EAAAjB,GAAAe,EAAA,IAAA,KAGA91B,EAAAwuB,EAAAwH,EAAAG,IAaA,EAcA,IAXAn2B,GAAA+0B,IAAA/0B,EAAA+0B,EAAA,GAIAY,GADAD,EAAAxH,EAAAqB,EAAAvvB,EAAA+0B,IACA16B,OACA07B,EAAAD,EAAAz7B,OAMA,GAAAg1B,EAAAqG,EAAAI,EAAAH,EAAAI,IACA/1B,IAGAutB,EAAAmI,EAAAU,EAAAT,EAAAU,EAAA9G,EAAAoG,EAAAZ,GACAY,EAAAD,EAAAr7B,OACAm7B,EAAA,OAQA,GAAAx1B,IAGAw1B,EAAAx1B,EAAA,GAKA21B,GADAD,EAAAnG,EAAA12B,SACAwB,OAUA,GAPAs7B,EAAAI,IAAAL,EAAA,CAAA,GAAAtwB,OAAAswB,IAGAnI,EAAAuI,EAAAJ,EAAAK,EAAAhB,GACAgB,EAAAD,EAAAz7B,QAGA,GAAAm7B,EAMA,KAAAnG,EAAAE,EAAAuG,EAAAM,EAAAL,GAAA,GACA/1B,IAGAutB,EAAAuI,EAAAM,EAAAL,EAAAM,EAAA9G,EAAAwG,EAAAhB,GACAgB,EAAAD,EAAAz7B,YAGA,IAAAm7B,IACAx1B,IACA81B,EAAA,CAAA,IAIAD,EAAAr7B,KAAAwF,EAGA81B,EAAA,GACAA,EAAAC,KAAAzG,EAAA2G,IAAA,GAEAH,EAAA,CAAAxG,EAAA2G,IACAF,EAAA,UAEAE,IAAAC,GAAA,MAAAJ,EAAA,KAAA/1B,KAEA01B,EAAA,MAAAK,EAAA,GAGAD,EAAA,IAAAA,EAAAxc,OAAA,EAAA,GAGA,GAAA0b,GAAApG,EAAA,CAGA,IAAAn0B,EAAA,EAAAuF,EAAA81B,EAAA,GAAA91B,GAAA,GAAAA,GAAA,GAAAvF,KAEAy3B,EAAA2D,EAAAzB,GAAAyB,EAAApG,EAAAh1B,EAAAg1B,EAAAZ,EAAA,GAAA,EAAAwD,EAAAqD,QAIAG,EAAApG,EAAAA,EACAoG,EAAAta,GAAAma,EAGA,OAAAG,GA9PA,GAgYAzF,EAAA,8BACAC,EAAA,cACAC,EAAA,cACAC,EAAA,qBACAC,EAAA,6BALAP,EAOA,SAAAv1B,EAAAmtB,EAAAkK,EAAAtwB,GACA,IAAAuzB,EACAh1B,EAAA+xB,EAAAlK,EAAAA,EAAAD,QAAA4I,EAAA,IAGA,GAAAD,EAAA0B,KAAAjyB,GACAtF,EAAAsF,EAAAu2B,MAAAv2B,GAAA,KAAAA,EAAA,GAAA,EAAA,MACA,CACA,IAAA+xB,IAGA/xB,EAAAA,EAAA4nB,QAAAwI,GAAA,SAAAsC,EAAA8D,EAAAvyB,GAEA,OADA+wB,EAAA,MAAA/wB,EAAAA,EAAApJ,eAAA,GAAA,KAAAoJ,EAAA,EAAA,EACAxC,GAAAA,GAAAuzB,EAAAtC,EAAA8D,KAGA/0B,IACAuzB,EAAAvzB,EAGAzB,EAAAA,EAAA4nB,QAAAyI,EAAA,MAAAzI,QAAA0I,EAAA,SAGAzI,GAAA7nB,GAAA,OAAA,IAAAsuB,EAAAtuB,EAAAg1B,GAKA,GAAA1G,EAAA6D,MACA,MAAAz2B,MACAgzB,EAAA,SAAAjtB,EAAA,SAAAA,EAAA,IAAA,YAAAomB,GAIAntB,EAAAsF,EAAA,KAGAtF,EAAAqG,EAAArG,EAAA+0B,EAAA,MA6LAlJ,EAAAkQ,cAAAlQ,EAAAmQ,IAAA,WACA,IAAAh8B,EAAA,IAAA4zB,EAAAv2B,MAEA,OADA2C,EAAAsF,EAAA,IAAAtF,EAAAsF,EAAA,GACAtF,GAWA6rB,EAAAoQ,WAAA,SAAA/7B,EAAA6G,GACA,OAAA6tB,EAAAv3B,KAAA,IAAAu2B,EAAA1zB,EAAA6G,KAiBA8kB,EAAAqQ,cAAArQ,EAAA6N,GAAA,SAAAA,EAAA/B,GACA,IAAAtxB,EAAAd,EAAAqB,EACA5G,EAAA3C,KAEA,GAAA,MAAAq8B,EAKA,OAJA1E,EAAA0E,EAAA,EAAAnF,GACA,MAAAoD,EAAAA,EAAAzB,EACAlB,EAAA2C,EAAA,EAAA,GAEAH,EAAA,IAAA5D,EAAA5zB,GAAA05B,EAAA15B,EAAA+0B,EAAA,EAAA4C,GAGA,KAAAtxB,EAAArG,EAAAqG,GAAA,OAAA,KAIA,GAHAd,IAAAqB,EAAAP,EAAAzG,OAAA,GAAA40B,EAAAn3B,KAAA03B,EAAAZ,IAAAA,EAGAvtB,EAAAP,EAAAO,GAAA,KAAAA,EAAA,IAAA,EAAAA,GAAA,GAAArB,KAGA,OAFAA,EAAA,IAAAA,EAAA,GAEAA,GAwBAsmB,EAAAsQ,UAAAtQ,EAAAmH,IAAA,SAAA9yB,EAAA6G,GACA,OAAAisB,EAAA31B,KAAA,IAAAu2B,EAAA1zB,EAAA6G,GAAAkvB,EAAAC,IAQArK,EAAAuQ,mBAAAvQ,EAAAwQ,KAAA,SAAAn8B,EAAA6G,GACA,OAAAisB,EAAA31B,KAAA,IAAAu2B,EAAA1zB,EAAA6G,GAAA,EAAA,IAmBA8kB,EAAAyQ,gBAAAzQ,EAAApE,IAAA,SAAAliB,EAAAyyB,GACA,IAAA9Q,EAAAqV,EAAAx8B,EAAAyyB,EAAAgK,EAAAC,EAAAC,EAAAx8B,EACAF,EAAA3C,KAKA,IAHAkI,EAAA,IAAAquB,EAAAruB,IAGAc,IAAAd,EAAAo3B,YACA,MAAA37B,MACAgzB,EAAA,4BAAA+B,EAAAxwB,IASA,GANA,MAAAyyB,IAAAA,EAAA,IAAApE,EAAAoE,IAGAwE,EAAAj3B,EAAAwvB,EAAA,IAGA/0B,EAAAqG,IAAArG,EAAAqG,EAAA,IAAA,GAAArG,EAAAqG,EAAA,KAAArG,EAAA+0B,GAAA,GAAA/0B,EAAAqG,EAAAzG,SAAA2F,EAAAc,IAAAd,EAAAc,EAAA,GAKA,OADAnG,EAAA,IAAA0zB,EAAA/vB,KAAA4jB,KAAAsO,EAAA/1B,GAAAw8B,EAAA,EAAA1Z,EAAAvd,IAAAwwB,EAAAxwB,KACAyyB,EAAA93B,EAAA5C,IAAA06B,GAAA93B,EAKA,GAFAu8B,EAAAl3B,EAAAD,EAAA,EAEA0yB,EAAA,CAGA,GAAAA,EAAA3xB,GAAA2xB,EAAA3xB,EAAA,IAAA2xB,EAAA1yB,EAAA,OAAA,IAAAsuB,EAAArM,MAEAgV,GAAAE,GAAAz8B,EAAA28B,aAAA3E,EAAA2E,eAEA38B,EAAAA,EAAA1C,IAAA06B,QAIA,CAAA,GAAAzyB,EAAAwvB,EAAA,IAAA/0B,EAAA+0B,EAAA,GAAA/0B,EAAA+0B,GAAA,IAAA,GAAA/0B,EAAA+0B,EAEA/0B,EAAAqG,EAAA,GAAA,GAAAm2B,GAAAx8B,EAAAqG,EAAA,IAAA,KAEArG,EAAAqG,EAAA,GAAA,MAAAm2B,GAAAx8B,EAAAqG,EAAA,IAAA,YASA,OANAmsB,EAAAxyB,EAAAsF,EAAA,GAAAwd,EAAAvd,IAAA,EAAA,EAGAvF,EAAA+0B,GAAA,IAAAvC,EAAA,EAAAA,GAGA,IAAAoB,EAAA6I,EAAA,EAAAjK,EAAAA,GAEAiE,IAKAjE,EAAAsB,EAAA2C,EAAAtC,EAAA,IAeA,IAZAqI,GACAtV,EAAA,IAAA0M,EAAA,IACA6I,IAAAl3B,EAAAD,EAAA,GACAo3B,EAAA5Z,EAAAvd,IAGAm3B,GADA38B,EAAA8D,KAAAm4B,KAAAjG,EAAAxwB,KACA,EAGArF,EAAA,IAAA0zB,EAAAoC,KAGA,CAEA,GAAA0G,EAAA,CAEA,KADAx8B,EAAAA,EAAA08B,MAAA58B,IACAqG,EAAA,MAEAmsB,EACAtyB,EAAAmG,EAAAzG,OAAA4yB,IAAAtyB,EAAAmG,EAAAzG,OAAA4yB,GACA+J,IACAr8B,EAAAA,EAAA5C,IAAA06B,IAIA,GAAAj4B,EAAA,CAEA,GAAA,KADAA,EAAAg0B,EAAAh0B,EAAA,IACA,MACA28B,EAAA38B,EAAA,OAKA,GAFAy3B,EADAjyB,EAAAA,EAAAq3B,MAAA1V,GACA3hB,EAAAwvB,EAAA,EAAA,GAEAxvB,EAAAwvB,EAAA,GACA2H,EAAA5Z,EAAAvd,OACA,CAEA,GAAA,KADAxF,GAAAg2B,EAAAxwB,IACA,MACAm3B,EAAA38B,EAAA,EAIAC,EAAAA,EAAA48B,MAAA58B,GAEAwyB,EACAxyB,EAAAqG,GAAArG,EAAAqG,EAAAzG,OAAA4yB,IAAAxyB,EAAAqG,EAAAzG,OAAA4yB,GACA+J,IACAv8B,EAAAA,EAAA1C,IAAA06B,IAIA,OAAAuE,EAAAr8B,GACAu8B,IAAAv8B,EAAA81B,EAAAhD,IAAA9yB,IAEA83B,EAAA93B,EAAA5C,IAAA06B,GAAAxF,EAAAgF,EAAAt3B,EAAAu2B,EAAAP,EAnHA8E,WAmHA96B,IAYA2rB,EAAAgR,aAAA,SAAAlF,GACA,IAAApyB,EAAA,IAAAquB,EAAAv2B,MAGA,OAFA,MAAAs6B,EAAAA,EAAAzB,EACAlB,EAAA2C,EAAA,EAAA,GACAH,EAAAjyB,EAAAA,EAAAwvB,EAAA,EAAA4C,IAQA9L,EAAAiR,UAAAjR,EAAAkR,GAAA,SAAA78B,EAAA6G,GACA,OAAA,IAAA6tB,EAAAv3B,KAAA,IAAAu2B,EAAA1zB,EAAA6G,KAOA8kB,EAAAoC,SAAA,WACA,QAAA5wB,KAAAgJ,GAQAwlB,EAAAmR,cAAAnR,EAAA4N,GAAA,SAAAv5B,EAAA6G,GACA,OAAA6tB,EAAAv3B,KAAA,IAAAu2B,EAAA1zB,EAAA6G,IAAA,GAQA8kB,EAAAoR,uBAAApR,EAAAqR,IAAA,SAAAh9B,EAAA6G,GACA,OAAA,KAAAA,EAAA6tB,EAAAv3B,KAAA,IAAAu2B,EAAA1zB,EAAA6G,MAAA,IAAAA,GAQA8kB,EAAA8Q,UAAA,WACA,QAAAt/B,KAAAgJ,GAAAmuB,EAAAn3B,KAAA03B,EAAAZ,GAAA92B,KAAAgJ,EAAAzG,OAAA,GAQAisB,EAAAsR,WAAAtR,EAAA0N,GAAA,SAAAr5B,EAAA6G,GACA,OAAA6tB,EAAAv3B,KAAA,IAAAu2B,EAAA1zB,EAAA6G,IAAA,GAQA8kB,EAAAuR,oBAAAvR,EAAAwR,IAAA,SAAAn9B,EAAA6G,GACA,OAAA,KAAAA,EAAA6tB,EAAAv3B,KAAA,IAAAu2B,EAAA1zB,EAAA6G,MAAA,IAAAA,GAOA8kB,EAAAgQ,MAAA,WACA,OAAAx+B,KAAAiI,GAOAumB,EAAAyR,WAAA,WACA,OAAAjgC,KAAAiI,EAAA,GAOAumB,EAAA0R,WAAA,WACA,OAAAlgC,KAAAiI,EAAA,GAOAumB,EAAAzJ,OAAA,WACA,QAAA/kB,KAAAgJ,GAAA,GAAAhJ,KAAAgJ,EAAA,IAwBAwlB,EAAA2R,MAAA,SAAAt9B,EAAA6G,GACA,IAAAhH,EAAA40B,EAAAjB,EAAA+J,EACAz9B,EAAA3C,KACAyJ,EAAA9G,EAAAsF,EAMA,GAHAyB,GADA7G,EAAA,IAAA0zB,EAAA1zB,EAAA6G,IACAzB,GAGAwB,IAAAC,EAAA,OAAA,IAAA6sB,EAAArM,KAGA,GAAAzgB,GAAAC,EAEA,OADA7G,EAAAoF,GAAAyB,EACA/G,EAAA65B,KAAA35B,GAGA,IAAAw9B,EAAA19B,EAAA+0B,EAAAZ,EACAwJ,EAAAz9B,EAAA60B,EAAAZ,EACAU,EAAA70B,EAAAqG,EACAyuB,EAAA50B,EAAAmG,EAEA,IAAAq3B,IAAAC,EAAA,CAGA,IAAA9I,IAAAC,EAAA,OAAAD,GAAA30B,EAAAoF,GAAAyB,EAAA7G,GAAA,IAAA0zB,EAAAkB,EAAA90B,EAAAunB,KAGA,IAAAsN,EAAA,KAAAC,EAAA,GAGA,OAAAA,EAAA,IAAA50B,EAAAoF,GAAAyB,EAAA7G,GAAA,IAAA0zB,EAAAiB,EAAA,GAAA70B,EAGA,GAAAk2B,GAAA,EAAA,GASA,GALAwH,EAAAlJ,EAAAkJ,GACAC,EAAAnJ,EAAAmJ,GACA9I,EAAAA,EAAAz2B,QAGA0I,EAAA42B,EAAAC,EAAA,CAaA,KAXAF,EAAA32B,EAAA,IACAA,GAAAA,EACA4sB,EAAAmB,IAEA8I,EAAAD,EACAhK,EAAAoB,GAGApB,EAAAyG,UAGApzB,EAAAD,EAAAC,IAAA2sB,EAAAxvB,KAAA,IACAwvB,EAAAyG,eAMA,IAFAxF,GAAA8I,GAAA32B,EAAA+tB,EAAAj1B,SAAAmH,EAAA+tB,EAAAl1B,SAAAkH,EAAAC,EAEAD,EAAAC,EAAA,EAAAA,EAAA4tB,EAAA5tB,IAEA,GAAA8tB,EAAA9tB,IAAA+tB,EAAA/tB,GAAA,CACA02B,EAAA5I,EAAA9tB,GAAA+tB,EAAA/tB,GACA,MAYA,GANA02B,IAAA/J,EAAAmB,EAAAA,EAAAC,EAAAA,EAAApB,EAAAxzB,EAAAoF,GAAApF,EAAAoF,IAEAyB,GAAA4tB,EAAAG,EAAAl1B,SAAAG,EAAA80B,EAAAj1B,SAIA,EAAA,KAAAmH,IAAA8tB,EAAA90B,KAAA,GAIA,IAHAgH,EAAAmtB,EAAA,EAGAS,EAAA7tB,GAAA,CAEA,GAAA+tB,IAAAF,GAAAG,EAAAH,GAAA,CACA,IAAA50B,EAAA40B,EAAA50B,IAAA80B,IAAA90B,GAAA80B,EAAA90B,GAAAgH,KACA8tB,EAAA90B,GACA80B,EAAAF,IAAAT,EAGAW,EAAAF,IAAAG,EAAAH,GAIA,KAAA,GAAAE,EAAA,GAAAA,EAAAjW,OAAA,EAAA,KAAA+e,GAGA,OAAA9I,EAAA,GAWAoD,EAAA/3B,EAAA20B,EAAA8I,IAPAz9B,EAAAoF,EAAA,GAAA4wB,GAAA,EAAA,EACAh2B,EAAAmG,EAAA,CAAAnG,EAAA60B,EAAA,GACA70B,IA8BA2rB,EAAA+R,OAAA/R,EAAAvuB,IAAA,SAAA4C,EAAA6G,GACA,IAAAo0B,EAAA71B,EACAtF,EAAA3C,KAKA,OAHA6C,EAAA,IAAA0zB,EAAA1zB,EAAA6G,IAGA/G,EAAAqG,IAAAnG,EAAAoF,GAAApF,EAAAmG,IAAAnG,EAAAmG,EAAA,GACA,IAAAutB,EAAArM,MAGArnB,EAAAmG,GAAArG,EAAAqG,IAAArG,EAAAqG,EAAA,GACA,IAAAutB,EAAA5zB,IAGA,GAAAw2B,GAIAlxB,EAAApF,EAAAoF,EACApF,EAAAoF,EAAA,EACA61B,EAAAnI,EAAAhzB,EAAAE,EAAA,EAAA,GACAA,EAAAoF,EAAAA,EACA61B,EAAA71B,GAAAA,GAEA61B,EAAAnI,EAAAhzB,EAAAE,EAAA,EAAAs2B,IAGAt2B,EAAAF,EAAAw9B,MAAArC,EAAAyB,MAAA18B,KAGAmG,EAAA,IAAA,GAAAmwB,IAAAt2B,EAAAoF,EAAAtF,EAAAsF,GAEApF,IAwBA2rB,EAAAgS,aAAAhS,EAAA+Q,MAAA,SAAA18B,EAAA6G,GACA,IAAAV,EAAA0uB,EAAAh1B,EAAA40B,EAAAnC,EAAAwF,EAAA8F,EAAAtD,EAAAC,EAAAsD,EAAAC,EAAAC,EAAAC,EACA5D,EAAA6D,EACAn+B,EAAA3C,KACAw3B,EAAA70B,EAAAqG,EACAyuB,GAAA50B,EAAA,IAAA0zB,EAAA1zB,EAAA6G,IAAAV,EAGA,KAAAwuB,GAAAC,GAAAD,EAAA,IAAAC,EAAA,IAmBA,OAhBA90B,EAAAsF,IAAApF,EAAAoF,GAAAuvB,IAAAA,EAAA,KAAAC,GAAAA,IAAAA,EAAA,KAAAD,EACA30B,EAAAmG,EAAAnG,EAAA60B,EAAA70B,EAAAoF,EAAA,MAEApF,EAAAoF,GAAAtF,EAAAsF,EAGAuvB,GAAAC,GAKA50B,EAAAmG,EAAA,CAAA,GACAnG,EAAA60B,EAAA,GALA70B,EAAAmG,EAAAnG,EAAA60B,EAAA,MASA70B,EAYA,IATA60B,EAAAP,EAAAx0B,EAAA+0B,EAAAZ,GAAAK,EAAAt0B,EAAA60B,EAAAZ,GACAj0B,EAAAoF,GAAAtF,EAAAsF,GACAw4B,EAAAjJ,EAAAj1B,SACAm+B,EAAAjJ,EAAAl1B,UAGAs+B,EAAArJ,EAAAA,EAAAC,EAAAA,EAAAoJ,EAAAn+B,EAAA+9B,EAAAA,EAAAC,EAAAA,EAAAh+B,GAGAA,EAAA+9B,EAAAC,EAAAG,EAAA,GAAAn+B,IAAAm+B,EAAAh6B,KAAA,IAKA,IAHAo2B,EAAApG,EACAiK,EAAA7J,EAEAv0B,EAAAg+B,IAAAh+B,GAAA,GAAA,CAKA,IAJAsG,EAAA,EACA23B,EAAAlJ,EAAA/0B,GAAAo+B,EACAF,EAAAnJ,EAAA/0B,GAAAo+B,EAAA,EAEAxJ,EAAA50B,GAAAyyB,EAAAsL,GAAAnJ,EAAA50B,GAKAsG,IADAm0B,EAAAwD,GAHAxD,EAAA3F,IAAArC,GAAA2L,IAEAnG,EAAAiG,EAAAzD,GADAC,EAAA5F,EAAArC,GAAA2L,EAAA,GACAH,GACAG,EAAAA,EAAAD,EAAAvJ,GAAAtuB,GACAi0B,EAAA,IAAAtC,EAAAmG,EAAA,GAAAF,EAAAxD,EACAyD,EAAAvJ,KAAA6F,EAAAF,EAGA4D,EAAAvJ,GAAAtuB,EASA,OANAA,IACA0uB,EAEAmJ,EAAAtf,OAAA,EAAA,GAGAqZ,EAAA/3B,EAAAg+B,EAAAnJ,IAQAlJ,EAAAuS,QAAA,WACA,IAAAp+B,EAAA,IAAA4zB,EAAAv2B,MAEA,OADA2C,EAAAsF,GAAAtF,EAAAsF,GAAA,KACAtF,GAwBA6rB,EAAAgO,KAAA,SAAA35B,EAAA6G,GACA,IAAA2sB,EACA1zB,EAAA3C,KACAyJ,EAAA9G,EAAAsF,EAMA,GAHAyB,GADA7G,EAAA,IAAA0zB,EAAA1zB,EAAA6G,IACAzB,GAGAwB,IAAAC,EAAA,OAAA,IAAA6sB,EAAArM,KAGA,GAAAzgB,GAAAC,EAEA,OADA7G,EAAAoF,GAAAyB,EACA/G,EAAAw9B,MAAAt9B,GAGA,IAAAw9B,EAAA19B,EAAA+0B,EAAAZ,EACAwJ,EAAAz9B,EAAA60B,EAAAZ,EACAU,EAAA70B,EAAAqG,EACAyuB,EAAA50B,EAAAmG,EAEA,IAAAq3B,IAAAC,EAAA,CAGA,IAAA9I,IAAAC,EAAA,OAAA,IAAAlB,EAAA9sB,EAAA,GAIA,IAAA+tB,EAAA,KAAAC,EAAA,GAAA,OAAAA,EAAA,GAAA50B,EAAA,IAAA0zB,EAAAiB,EAAA,GAAA70B,EAAA,EAAA8G,GAQA,GALA42B,EAAAlJ,EAAAkJ,GACAC,EAAAnJ,EAAAmJ,GACA9I,EAAAA,EAAAz2B,QAGA0I,EAAA42B,EAAAC,EAAA,CAUA,IATA72B,EAAA,GACA62B,EAAAD,EACAhK,EAAAoB,IAEAhuB,GAAAA,EACA4sB,EAAAmB,GAGAnB,EAAAyG,UACArzB,IAAA4sB,EAAAxvB,KAAA,IACAwvB,EAAAyG,UAUA,KAPArzB,EAAA+tB,EAAAj1B,SACAmH,EAAA+tB,EAAAl1B,QAGA,IAAA8zB,EAAAoB,EAAAA,EAAAD,EAAAA,EAAAnB,EAAA3sB,EAAAD,GAGAA,EAAA,EAAAC,GACAD,GAAA+tB,IAAA9tB,GAAA8tB,EAAA9tB,GAAA+tB,EAAA/tB,GAAAD,GAAAotB,EAAA,EACAW,EAAA9tB,GAAAmtB,IAAAW,EAAA9tB,GAAA,EAAA8tB,EAAA9tB,GAAAmtB,EAUA,OAPAptB,IACA+tB,EAAA,CAAA/tB,GAAA6D,OAAAkqB,KACA8I,GAKA1F,EAAA/3B,EAAA20B,EAAA8I,IAmBA9R,EAAAwS,UAAAxS,EAAAqM,GAAA,SAAAA,EAAAP,GACA,IAAAtxB,EAAAd,EAAAqB,EACA5G,EAAA3C,KAEA,GAAA,MAAA66B,GAAAA,MAAAA,EAKA,OAJAlD,EAAAkD,EAAA,EAAA3D,GACA,MAAAoD,EAAAA,EAAAzB,EACAlB,EAAA2C,EAAA,EAAA,GAEAH,EAAA,IAAA5D,EAAA5zB,GAAAk4B,EAAAP,GAGA,KAAAtxB,EAAArG,EAAAqG,GAAA,OAAA,KAIA,GAFAd,GADAqB,EAAAP,EAAAzG,OAAA,GACAu0B,EAAA,EAEAvtB,EAAAP,EAAAO,GAAA,CAGA,KAAAA,EAAA,IAAA,EAAAA,GAAA,GAAArB,KAGA,IAAAqB,EAAAP,EAAA,GAAAO,GAAA,GAAAA,GAAA,GAAArB,MAKA,OAFA2yB,GAAAl4B,EAAA+0B,EAAA,EAAAxvB,IAAAA,EAAAvF,EAAA+0B,EAAA,GAEAxvB,GAYAsmB,EAAAyS,UAAA,SAAA9L,GAEA,OADAwC,EAAAxC,GAAA,iBAAA4B,GACA/2B,KAAAu/B,MAAA,KAAApK,IAeA3G,EAAA0S,WAAA1S,EAAA2S,KAAA,WACA,IAAAxG,EAAAzyB,EAAAsb,EAAA4d,EAAA/K,EACA1zB,EAAA3C,KACAgJ,EAAArG,EAAAqG,EACAf,EAAAtF,EAAAsF,EACAyvB,EAAA/0B,EAAA+0B,EACA2E,EAAAzD,EAAA,EACA/O,EAAA,IAAA0M,EAAA,OAGA,GAAA,IAAAtuB,IAAAe,IAAAA,EAAA,GACA,OAAA,IAAAutB,GAAAtuB,GAAAA,EAAA,KAAAe,GAAAA,EAAA,IAAAkhB,IAAAlhB,EAAArG,EAAA,EAAA,GA8BA,GAtBA,IAJAsF,EAAAzB,KAAA26B,MAAAzI,EAAA/1B,MAIAsF,GAAA,EAAA,KACAC,EAAAkvB,EAAApuB,IACAzG,OAAAm1B,GAAA,GAAA,IAAAxvB,GAAA,KACAD,EAAAzB,KAAA26B,MAAAj5B,GACAwvB,EAAAP,GAAAO,EAAA,GAAA,IAAAA,EAAA,GAAAA,EAAA,GASAlU,EAAA,IAAA+S,EANAruB,EADAD,GAAA,EAAA,EACA,KAAAyvB,GAEAxvB,EAAAD,EAAA2vB,iBACA72B,MAAA,EAAAmH,EAAAgB,QAAA,KAAA,GAAAwuB,IAKAlU,EAAA,IAAA+S,EAAAtuB,EAAA,IAOAub,EAAAxa,EAAA,GAMA,KAJAf,GADAyvB,EAAAlU,EAAAkU,GACA2E,GACA,IAAAp0B,EAAA,KAOA,GAHAouB,EAAA7S,EACAA,EAAAqG,EAAA0V,MAAAlJ,EAAAmG,KAAA7G,EAAAhzB,EAAA0zB,EAAAgG,EAAA,KAEAjF,EAAAf,EAAArtB,GAAAjI,MAAA,EAAAkH,MAAAC,EAAAkvB,EAAA5T,EAAAxa,IAAAjI,MAAA,EAAAkH,GAAA,CAWA,GANAub,EAAAkU,EAAAA,KAAAzvB,EAMA,SALAC,EAAAA,EAAAnH,MAAAkH,EAAA,EAAAA,EAAA,MAKAm5B,GAAA,QAAAl5B,GAgBA,EAIAA,KAAAA,EAAAnH,MAAA,IAAA,KAAAmH,EAAAkgB,OAAA,MAGA+R,EAAA3W,EAAAA,EAAAkU,EAAAkB,EAAA,EAAA,GACA+B,GAAAnX,EAAA+b,MAAA/b,GAAAkc,GAAA/8B,IAGA,MAvBA,IAAAy+B,IACAjH,EAAA9D,EAAAA,EAAAqB,EAAAkB,EAAA,EAAA,GAEAvC,EAAAkJ,MAAAlJ,GAAAqJ,GAAA/8B,IAAA,CACA6gB,EAAA6S,EACA,MAIAgG,GAAA,EACAp0B,GAAA,EACAm5B,EAAA,EAkBA,OAAAjH,EAAA3W,EAAAA,EAAAkU,EAAAkB,EAAA,EAAAC,EAAA8B,IAaAnM,EAAAoJ,cAAA,SAAAyE,EAAA/B,GAKA,OAJA,MAAA+B,IACA1E,EAAA0E,EAAA,EAAAnF,GACAmF,KAEA7U,EAAAxnB,KAAAq8B,EAAA/B,EAAA,IAgBA9L,EAAA6S,QAAA,SAAAhF,EAAA/B,GAKA,OAJA,MAAA+B,IACA1E,EAAA0E,EAAA,EAAAnF,GACAmF,EAAAA,EAAAr8B,KAAA03B,EAAA,GAEAlQ,EAAAxnB,KAAAq8B,EAAA/B,IA6BA9L,EAAA8S,SAAA,SAAAjF,EAAA/B,EAAA9S,GACA,IAAAsI,EACAntB,EAAA3C,KAEA,GAAA,MAAAwnB,EACA,MAAA6U,GAAA/B,GAAA,iBAAAA,GACA9S,EAAA8S,EACAA,EAAA,MACA+B,GAAA,iBAAAA,GACA7U,EAAA6U,EACAA,EAAA/B,EAAA,MAEA9S,EAAA6R,OAEA,GAAA,iBAAA7R,EACA,MAAA7jB,MACAgzB,EAAA,2BAAAnP,GAKA,GAFAsI,EAAAntB,EAAA0+B,QAAAhF,EAAA/B,GAEA33B,EAAAqG,EAAA,CACA,IAAAtG,EACA+F,EAAAqnB,EAAA1tB,MAAA,KACAm/B,GAAA/Z,EAAA8R,UACAkI,GAAAha,EAAA+R,mBACAC,EAAAhS,EAAAgS,gBAAA,GACAiI,EAAAh5B,EAAA,GACAi5B,EAAAj5B,EAAA,GACAk5B,EAAAh/B,EAAAsF,EAAA,EACA25B,EAAAD,EAAAF,EAAA1gC,MAAA,GAAA0gC,EACAhnB,EAAAmnB,EAAAr/B,OAIA,GAFAi/B,IAAA9+B,EAAA6+B,EAAAA,EAAAC,EAAAA,EAAA9+B,EAAA+X,GAAA/X,GAEA6+B,EAAA,GAAA9mB,EAAA,EAAA,CAGA,IAFA/X,EAAA+X,EAAA8mB,GAAAA,EACAE,EAAAG,EAAAhS,OAAA,EAAAltB,GACAA,EAAA+X,EAAA/X,GAAA6+B,EAAAE,GAAAjI,EAAAoI,EAAAhS,OAAAltB,EAAA6+B,GACAC,EAAA,IAAAC,GAAAjI,EAAAoI,EAAA7gC,MAAA2B,IACAi/B,IAAAF,EAAA,IAAAA,GAGA3R,EAAA4R,EACAD,GAAAja,EAAAiS,kBAAA,MAAA+H,GAAAha,EAAAkS,mBACAgI,EAAA7R,QAAA,IAAAznB,OAAA,OAAAo5B,EAAA,OAAA,KACA,MAAAha,EAAAmS,wBAAA,KACA+H,GACAD,EAGA,OAAAja,EAAAve,QAAA,IAAA6mB,GAAAtI,EAAAoS,QAAA,KAeApL,EAAAqT,WAAA,SAAAC,GACA,IAAAzd,EAAA0d,EAAAC,EAAAC,EAAAvK,EAAAwK,EAAAh6B,EAAAi6B,EAAAC,EAAAtE,EAAAta,EAAAvb,EACAtF,EAAA3C,KACAw3B,EAAA70B,EAAAqG,EAEA,GAAA,MAAA84B,MACA55B,EAAA,IAAAquB,EAAAuL,IAGAxC,cAAAp3B,EAAAc,GAAA,IAAAd,EAAAD,IAAAC,EAAAg0B,GAAAvD,IACA,MAAAh1B,MACAgzB,EAAA,aACAzuB,EAAAo3B,YAAA,iBAAA,oBAAA5G,EAAAxwB,IAIA,IAAAsvB,EAAA,OAAA,IAAAjB,EAAA5zB,GAoBA,IAlBA0hB,EAAA,IAAAkS,EAAAoC,GACAyJ,EAAAL,EAAA,IAAAxL,EAAAoC,GACAqJ,EAAAG,EAAA,IAAA5L,EAAAoC,GACA1wB,EAAAmvB,EAAAI,GAIAE,EAAArT,EAAAqT,EAAAzvB,EAAA1F,OAAAI,EAAA+0B,EAAA,EACArT,EAAArb,EAAA,GAAAguB,GAAAkL,EAAAxK,EAAAZ,GAAA,EAAAA,EAAAoL,EAAAA,GACAJ,GAAAA,GAAA55B,EAAA02B,WAAAva,GAAA,EAAAqT,EAAA,EAAArT,EAAA+d,EAAAl6B,EAEAg6B,EAAAjJ,EACAA,EAAA,EAAA,EACA/wB,EAAA,IAAAquB,EAAAtuB,GAGAk6B,EAAAn5B,EAAA,GAAA,EAGA80B,EAAAnI,EAAAztB,EAAAmc,EAAA,EAAA,GAEA,IADA4d,EAAAF,EAAAvF,KAAAsB,EAAAyB,MAAAyC,KACApD,WAAAkD,IACAC,EAAAC,EACAA,EAAAC,EACAG,EAAAD,EAAA3F,KAAAsB,EAAAyB,MAAA0C,EAAAG,IACAD,EAAAF,EACA5d,EAAAnc,EAAAi4B,MAAArC,EAAAyB,MAAA0C,EAAA5d,IACAnc,EAAA+5B,EAeA,OAZAA,EAAAtM,EAAAmM,EAAA3B,MAAA4B,GAAAC,EAAA,EAAA,GACAG,EAAAA,EAAA3F,KAAAyF,EAAA1C,MAAA6C,IACAL,EAAAA,EAAAvF,KAAAyF,EAAA1C,MAAAyC,IACAG,EAAAl6B,EAAAm6B,EAAAn6B,EAAAtF,EAAAsF,EAIAub,EAAAmS,EAAAyM,EAAAJ,EAHAtK,GAAA,EAGAmB,GAAAsH,MAAAx9B,GAAAg8B,MAAAC,WACAjJ,EAAAwM,EAAAJ,EAAArK,EAAAmB,GAAAsH,MAAAx9B,GAAAg8B,OAAA,EAAA,CAAAyD,EAAAJ,GAAA,CAAAG,EAAAJ,GAEA9I,EAAAiJ,EAEA1e,GAOAgL,EAAAuH,SAAA,WACA,OAAA2C,EAAA14B,OAeAwuB,EAAA6T,YAAA,SAAAxH,EAAAP,GAEA,OADA,MAAAO,GAAAlD,EAAAkD,EAAA,EAAA3D,GACA1P,EAAAxnB,KAAA66B,EAAAP,EAAA,IAeA9L,EAAAvrB,SAAA,SAAAyG,GACA,IAAAomB,EACA5nB,EAAAlI,KACAiI,EAAAC,EAAAD,EACAyvB,EAAAxvB,EAAAwvB,EA0BA,OAvBA,OAAAA,EACAzvB,GACA6nB,EAAA,WACA7nB,EAAA,IAAA6nB,EAAA,IAAAA,IAEAA,EAAA,OAGA,MAAApmB,EACAomB,EAAA4H,GAAAoB,GAAApB,GAAAqB,EACAnB,EAAAR,EAAAlvB,EAAAc,GAAA0uB,GACAG,EAAAT,EAAAlvB,EAAAc,GAAA0uB,EAAA,KACA,KAAAhuB,EAEAomB,EAAA+H,EAAAT,GADAlvB,EAAAiyB,EAAA,IAAA5D,EAAAruB,GAAA0wB,EAAAlB,EAAA,EAAAmB,IACA7vB,GAAAd,EAAAwvB,EAAA,MAEAC,EAAAjuB,EAAA,EAAAmwB,EAAAt3B,OAAA,QACAutB,EAAAmI,EAAAJ,EAAAT,EAAAlvB,EAAAc,GAAA0uB,EAAA,KAAA,GAAAhuB,EAAAzB,GAAA,IAGAA,EAAA,GAAAC,EAAAc,EAAA,KAAA8mB,EAAA,IAAAA,IAGAA,GAQAtB,EAAAkK,QAAAlK,EAAAzC,OAAA,WACA,OAAA2M,EAAA14B,OAIAwuB,EAAAyL,cAAA,EAEA,MAAAjC,GAAAzB,EAAAphB,IAAA6iB,GAEAzB,EAsIAwB,GACAxB,EAAA,QAAAA,EAAAA,UAAAA,EAGA,mBAAArP,QAAAA,OAAAC,IACAD,QAAA,WAAA,OAAAqP,UAGA,IAAA7oB,GAAAA,EAAApN,QACAoN,EAAApN,QAAAi2B,GAIAD,IACAA,EAAA,oBAAAxhB,MAAAA,KAAAA,KAAAwtB,QAGAhM,EAAAC,UAAAA,GAn1FA,CAq1FAv2B,8OCr1FA,IAAA0C,EAAAqG,EAAArG,EAAA1C,KAAA+I,EAAA,SAAArG,GAAA,IAAAqG,EAAAvC,KAAA+7B,MAAAlM,EAAA7vB,KAAAm4B,IAAAjH,EAAAlxB,KAAAmD,IAAA6a,EAAAhe,KAAAokB,MAAA,MAAAkK,UAAAryB,MAAAuB,YAAAtB,EAAAqG,GAAA,GAAA5B,MAAAzE,GAAA1C,KAAA+8B,KAAAh0B,EAAArG,EAAAoyB,EAAA0N,aAAA,MAAA,IAAAC,WAAA,gCAAA59B,cAAAnC,GAAA,IAAAqG,EAAA25B,OAAA9R,SAAA,GAAA,iBAAAluB,EAAA,CAAA,GAAA,IAAAA,EAAA,OAAAoyB,EAAA6N,SAAA,GAAA7N,EAAA8N,gBAAAlgC,GAAA,OAAA,EAAAA,EAAAoyB,EAAA+N,YAAAngC,GAAA,GAAAoyB,EAAA+N,WAAAngC,GAAA,GAAA,IAAAqG,EAAArG,IAAA8hB,EAAA9hB,KAAAA,EAAA,MAAA,IAAA+/B,WAAA,cAAA//B,EAAA,+DAAA,OAAAoyB,EAAAgO,aAAApgC,GAAA,GAAA,iBAAAA,EAAA,CAAA,MAAAqG,EAAA+rB,EAAAiO,aAAArgC,GAAA,GAAA,OAAAqG,EAAA,MAAA,IAAAi6B,YAAA,kBAAAtgC,EAAA,gBAAA,OAAAqG,EAAA,GAAA,kBAAArG,EAAA,OAAA,IAAAA,EAAAoyB,EAAA+N,WAAA,GAAA,GAAA/N,EAAA6N,SAAA,GAAA,iBAAAjgC,EAAA,CAAA,GAAAA,EAAAsB,cAAA8wB,EAAA,OAAApyB,EAAA,MAAAqG,EAAA+rB,EAAAmO,cAAAvgC,GAAA,OAAAoyB,EAAAS,OAAAxsB,GAAA,MAAA,IAAA8kB,UAAA,kBAAAnrB,EAAA,gBAAAwgC,gBAAA,MAAAxgC,EAAA,CAAA,WAAA,IAAA,MAAAqG,KAAA/I,KAAA0C,EAAAmE,MAAAkC,GAAAA,IAAA,GAAA9F,SAAA,IAAA8F,GAAA,MAAA,OAAArG,EAAAmE,KAAA,KAAAnE,EAAAd,KAAA,IAAAqB,SAAAP,EAAA,IAAA,GAAA,EAAAA,GAAA,GAAAA,EAAA,MAAA,IAAA+/B,WAAA,sDAAA,OAAA,IAAAziC,KAAAuC,OAAA,IAAA,IAAAG,EAAAA,EAAA,GAAAoyB,EAAAqO,yBAAAnjC,KAAA0C,GAAAoyB,EAAAsO,kBAAApjC,KAAA0C,GAAA,GAAAmC,gBAAAnC,GAAA,MAAAqG,EAAArG,EAAAH,OAAA,GAAA,IAAAwG,EAAA,OAAA,EAAA,GAAA,IAAAA,EAAA,CAAA,MAAAA,EAAArG,EAAA2gC,gBAAA,GAAA,OAAA3gC,EAAAq6B,MAAAh0B,EAAAA,EAAA,MAAAstB,EAAA3zB,EAAA4gC,QAAAv6B,EAAA,GAAA2uB,EAAA5C,EAAAyO,QAAAlN,GAAAnuB,EAAA,GAAAa,EAAA2uB,EAAA,GAAA,KAAAxvB,EAAA,OAAAxF,EAAAq6B,MAAA9S,SAAA,EAAA,EAAA,IAAAzF,EAAAtc,EAAA,EAAAD,EAAAouB,EAAA1b,EAAA5R,EAAA,EAAA,MAAAya,EAAAkU,EAAA,EAAA,IAAAjuB,EAAA,KAAA+Z,EAAA,EAAAvb,GAAAub,EAAA/Z,KAAA,GAAA,MAAA+5B,EAAAhgB,EAAA,GAAA,IAAAa,EAAA,IAAAb,EAAA,EAAAvb,GAAA,GAAAub,EAAAigB,EAAA,GAAAjgB,EAAA,IAAA,EAAAggB,GAAA,EAAA7oB,IAAAA,IAAA1S,EAAAvF,EAAA4gC,QAAA3oB,GAAAlR,GAAAxB,IAAA,GAAAu7B,EAAAnf,EAAApc,GAAAu7B,EAAA,EAAAC,EAAAD,EAAA,GAAA,EAAAC,GAAA,EAAA9oB,GAAAA,IAAA1S,EAAAvF,EAAA4gC,QAAA3oB,GAAA0J,GAAA,IAAAof,EAAAx7B,GAAAw7B,EAAA,GAAAx7B,IAAA,GAAAw7B,EAAAA,GAAA,GAAA,MAAA9I,EAAA7F,EAAA4O,iBAAAhhC,EAAA+gC,EAAA9oB,EAAA1S,GAAA,IAAA,IAAA0yB,GAAA,IAAAA,GAAA,IAAA,EAAAtW,MAAAA,EAAAA,EAAA,IAAA,EAAA,IAAAA,IAAA5a,IAAA,GAAAA,IAAA,KAAAA,EAAA,EAAA+a,IAAA,KAAAA,KAAA,OAAA9hB,EAAAq6B,MAAA9S,SAAA,EAAA,EAAA,MAAAvgB,EAAAhH,EAAAq6B,MAAA,WAAA,EAAA,OAAAvY,EAAAA,EAAA,MAAA,GAAAsQ,EAAA6O,qBAAA,GAAAj6B,EAAA8a,EAAA/a,EAAAqrB,EAAA6O,qBAAA,GAAAtf,EAAAyQ,EAAA8O,uBAAA,GAAA/+B,kBAAAnC,GAAA,GAAA,IAAAA,EAAAH,OAAA,OAAAG,EAAA,MAAAqG,EAAArG,EAAAmhC,SAAA,OAAA96B,EAAAg0B,MAAAr6B,EAAAq6B,KAAAh0B,EAAAlE,kBAAAnC,GAAA,OAAAA,EAAAq6B,KAAAjI,EAAAgP,iBAAAphC,GAAAqhC,SAAAjP,EAAAkP,iBAAAthC,GAAA,GAAAmC,oBAAAnC,EAAAqG,GAAA,GAAAA,EAAAg0B,KAAA,MAAA,IAAA0F,WAAA,6BAAA,GAAA,IAAA15B,EAAAxG,OAAA,OAAAuyB,EAAA+N,WAAA,GAAA,GAAA,GAAA,IAAAngC,EAAAH,OAAA,OAAAG,EAAA,GAAA,IAAAA,EAAAH,QAAA,IAAAG,EAAA4gC,QAAA,GAAA,OAAA5gC,EAAAq6B,MAAA,IAAA,EAAAh0B,EAAAu6B,QAAA,IAAAxO,EAAAmP,WAAAvhC,GAAAA,EAAA,GAAA,EAAAqG,EAAAxG,OAAA,MAAA,IAAAkgC,WAAA,kBAAA,IAAApM,EAAAttB,EAAAs6B,gBAAA,GAAA,GAAA,IAAAhN,EAAA,OAAA3zB,EAAA,GAAA2zB,GAAAvB,EAAAoP,iBAAA,MAAA,IAAAzB,WAAA,kBAAA,GAAA,IAAA//B,EAAAH,QAAA,IAAAG,EAAA4gC,QAAA,GAAA,CAAA,MAAAv6B,EAAA,GAAA,EAAAstB,EAAA,IAAAqB,EAAAh1B,EAAAq6B,MAAA,IAAA,EAAA1G,GAAAnuB,EAAA,IAAA4sB,EAAA/rB,EAAA2uB,GAAAxvB,EAAAi8B,qBAAA,MAAA3f,EAAA,GAAA6R,EAAA,GAAA,OAAAnuB,EAAAk8B,WAAAr7B,EAAA,EAAAyb,GAAAtc,EAAA,IAAAwvB,EAAA,KAAAxvB,EAAAxF,EAAA,IAAA,IAAA,EAAA2zB,KAAAqB,EAAAh1B,GAAA2zB,IAAA,EAAA,IAAAA,EAAAA,IAAA,EAAAnuB,EAAA4sB,EAAAsB,SAAAluB,EAAAA,GAAA,IAAA,EAAAmuB,KAAAqB,EAAA,OAAAA,EAAAxvB,EAAA4sB,EAAAsB,SAAAsB,EAAAxvB,IAAA,OAAAwvB,EAAA7yB,gBAAAkE,EAAAstB,GAAA,GAAA,IAAAttB,EAAAxG,OAAA,OAAAwG,EAAA,GAAA,IAAAstB,EAAA9zB,OAAA,OAAA8zB,EAAA,IAAA3zB,EAAAqG,EAAAxG,OAAA8zB,EAAA9zB,OAAA,IAAAwG,EAAAs7B,WAAAhO,EAAAgO,YAAA3hC,IAAA,MAAAg1B,EAAA,IAAA5C,EAAApyB,EAAAqG,EAAAg0B,OAAA1G,EAAA0G,MAAArF,EAAAyM,qBAAA,IAAA,IAAAj8B,EAAA,EAAAA,EAAAa,EAAAxG,OAAA2F,IAAA4sB,EAAAwP,qBAAAjO,EAAAttB,EAAAu6B,QAAAp7B,GAAAwvB,EAAAxvB,GAAA,OAAAwvB,EAAAqM,SAAAl/B,cAAAnC,EAAAqG,GAAA,GAAA,IAAAA,EAAAxG,OAAA,MAAA,IAAAkgC,WAAA,oBAAA,GAAA,EAAA3N,EAAAyP,kBAAA7hC,EAAAqG,GAAA,OAAA+rB,EAAA6N,SAAA,MAAAtM,EAAA3zB,EAAAq6B,OAAAh0B,EAAAg0B,KAAArF,EAAA3uB,EAAAs6B,gBAAA,GAAA,IAAAn7B,EAAA,GAAA,IAAAa,EAAAxG,QAAA,OAAAm1B,EAAA,CAAA,GAAA,IAAAA,EAAA,OAAArB,IAAA3zB,EAAAq6B,KAAAr6B,EAAAoyB,EAAAmP,WAAAvhC,GAAAwF,EAAA4sB,EAAA0P,mBAAA9hC,EAAAg1B,EAAA,WAAAxvB,EAAA4sB,EAAA2P,mBAAA/hC,EAAAqG,GAAA,GAAA,GAAA,OAAAb,EAAA60B,KAAA1G,EAAAnuB,EAAA67B,SAAAl/B,iBAAAnC,EAAAqG,GAAA,GAAA,IAAAA,EAAAxG,OAAA,MAAA,IAAAkgC,WAAA,oBAAA,GAAA,EAAA3N,EAAAyP,kBAAA7hC,EAAAqG,GAAA,OAAArG,EAAA,MAAA2zB,EAAAttB,EAAAs6B,gBAAA,GAAA,GAAA,IAAAt6B,EAAAxG,QAAA,OAAA8zB,EAAA,CAAA,GAAA,IAAAA,EAAA,OAAAvB,EAAA6N,SAAA,MAAA55B,EAAA+rB,EAAA4P,mBAAAhiC,EAAA2zB,GAAA,OAAA,IAAAttB,EAAA+rB,EAAA6N,SAAA7N,EAAA+N,WAAA95B,EAAArG,EAAAq6B,MAAA,MAAArF,EAAA5C,EAAA2P,mBAAA/hC,EAAAqG,GAAA,GAAA,GAAA,OAAA2uB,EAAAqF,KAAAr6B,EAAAq6B,KAAArF,EAAAqM,SAAAl/B,WAAAnC,EAAAqG,GAAA,MAAAstB,EAAA3zB,EAAAq6B,KAAA,OAAA1G,IAAAttB,EAAAg0B,KAAAjI,EAAA6P,cAAAjiC,EAAAqG,EAAAstB,GAAA,GAAAvB,EAAAyP,kBAAA7hC,EAAAqG,GAAA+rB,EAAA8P,cAAAliC,EAAAqG,EAAAstB,GAAAvB,EAAA8P,cAAA77B,EAAArG,GAAA2zB,GAAAxxB,gBAAAnC,EAAAqG,GAAA,MAAAstB,EAAA3zB,EAAAq6B,KAAA,OAAA1G,IAAAttB,EAAAg0B,KAAA,GAAAjI,EAAAyP,kBAAA7hC,EAAAqG,GAAA+rB,EAAA8P,cAAAliC,EAAAqG,EAAAstB,GAAAvB,EAAA8P,cAAA77B,EAAArG,GAAA2zB,GAAAvB,EAAA6P,cAAAjiC,EAAAqG,EAAAstB,GAAAxxB,iBAAAnC,EAAAqG,GAAA,OAAA,IAAAA,EAAAxG,QAAA,IAAAG,EAAAH,OAAAG,EAAAqG,EAAAg0B,KAAAjI,EAAA+P,uBAAAniC,EAAAqG,GAAA+rB,EAAAgQ,sBAAApiC,EAAAqG,GAAAlE,wBAAAnC,EAAAqG,GAAA,OAAA,IAAAA,EAAAxG,QAAA,IAAAG,EAAAH,OAAAG,EAAAqG,EAAAg0B,KAAAjI,EAAAgQ,sBAAApiC,EAAAqG,GAAA+rB,EAAA+P,uBAAAniC,EAAAqG,GAAAlE,4BAAA,MAAA,IAAAgpB,UAAA,wDAAAhpB,gBAAAnC,EAAAqG,GAAA,OAAA,EAAA+rB,EAAAiQ,kBAAAriC,EAAAqG,GAAAlE,uBAAAnC,EAAAqG,GAAA,OAAA,GAAA+rB,EAAAiQ,kBAAAriC,EAAAqG,GAAAlE,mBAAAnC,EAAAqG,GAAA,OAAA,EAAA+rB,EAAAiQ,kBAAAriC,EAAAqG,GAAAlE,0BAAAnC,EAAAqG,GAAA,OAAA,GAAA+rB,EAAAiQ,kBAAAriC,EAAAqG,GAAAlE,aAAAkE,EAAAstB,GAAA,GAAAttB,EAAAg0B,OAAA1G,EAAA0G,KAAA,OAAA,EAAA,GAAAh0B,EAAAxG,SAAA8zB,EAAA9zB,OAAA,OAAA,EAAA,IAAA,IAAAm1B,EAAA,EAAAA,EAAA3uB,EAAAxG,OAAAm1B,IAAA,GAAA3uB,EAAAu6B,QAAA5L,KAAArB,EAAAiN,QAAA5L,GAAA,OAAA,EAAA,OAAA,EAAA7yB,gBAAAnC,EAAAqG,GAAA,OAAA+rB,EAAAkQ,MAAAtiC,EAAAqG,GAAAlE,kBAAAnC,EAAAqG,GAAA,IAAArG,EAAAq6B,OAAAh0B,EAAAg0B,KAAA,OAAAjI,EAAAmQ,cAAAviC,EAAAqG,GAAAg7B,SAAA,GAAArhC,EAAAq6B,MAAAh0B,EAAAg0B,KAAA,CAAA,MAAA1G,EAAAqB,EAAAh1B,EAAAH,OAAAwG,EAAAxG,QAAA,EAAA,IAAA2F,EAAA4sB,EAAAgP,iBAAAphC,EAAA2zB,GAAA,MAAA7R,EAAAsQ,EAAAgP,iBAAA/6B,GAAA,OAAAb,EAAA4sB,EAAAoQ,aAAAh9B,EAAAsc,EAAAtc,GAAA4sB,EAAAkP,iBAAA97B,GAAA,EAAAA,GAAA67B,SAAA,OAAArhC,EAAAq6B,QAAAr6B,EAAAqG,GAAA,CAAAA,EAAArG,IAAAoyB,EAAAqQ,iBAAAziC,EAAAoyB,EAAAgP,iBAAA/6B,IAAAg7B,SAAAl/B,kBAAAnC,EAAAqG,GAAA,IAAArG,EAAAq6B,OAAAh0B,EAAAg0B,KAAA,OAAAjI,EAAAsQ,cAAA1iC,EAAAqG,GAAAg7B,SAAA,GAAArhC,EAAAq6B,MAAAh0B,EAAAg0B,KAAA,CAAA,MAAA1G,EAAAqB,EAAAh1B,EAAAH,OAAAwG,EAAAxG,QAAA2F,EAAA4sB,EAAAgP,iBAAAphC,EAAA2zB,GAAA7R,EAAAsQ,EAAAgP,iBAAA/6B,GAAA,OAAA+rB,EAAAsQ,cAAAl9B,EAAAsc,EAAAtc,GAAA67B,SAAA,MAAA1N,EAAAqB,EAAAh1B,EAAAH,OAAAwG,EAAAxG,QAAA,EAAAG,EAAAq6B,QAAAr6B,EAAAqG,GAAA,CAAAA,EAAArG,IAAA,IAAAwF,EAAA4sB,EAAAgP,iBAAA/6B,EAAAstB,GAAA,OAAAnuB,EAAA4sB,EAAAsQ,cAAAl9B,EAAAxF,EAAAwF,GAAA4sB,EAAAkP,iBAAA97B,GAAA,EAAAA,GAAA67B,SAAAl/B,iBAAAnC,EAAAqG,GAAA,MAAAstB,EAAAqB,EAAAh1B,EAAAH,OAAAwG,EAAAxG,QAAA,IAAAG,EAAAq6B,OAAAh0B,EAAAg0B,KAAA,OAAAjI,EAAAoQ,aAAAxiC,EAAAqG,GAAAg7B,SAAA,GAAArhC,EAAAq6B,MAAAh0B,EAAAg0B,KAAA,CAAA,IAAArF,EAAA5C,EAAAgP,iBAAAphC,EAAA2zB,GAAA,MAAAnuB,EAAA4sB,EAAAgP,iBAAA/6B,GAAA,OAAA2uB,EAAA5C,EAAAmQ,cAAAvN,EAAAxvB,EAAAwvB,GAAA5C,EAAAkP,iBAAAtM,GAAA,EAAAA,GAAAqM,SAAArhC,EAAAq6B,QAAAr6B,EAAAqG,GAAA,CAAAA,EAAArG,IAAA,IAAAwF,EAAA4sB,EAAAgP,iBAAA/6B,EAAAstB,GAAA,OAAAnuB,EAAA4sB,EAAAqQ,iBAAAj9B,EAAAxF,EAAAwF,GAAA4sB,EAAAkP,iBAAA97B,GAAA,EAAAA,GAAA67B,SAAAl/B,cAAAkE,EAAAstB,GAAA,GAAA,IAAAA,EAAA9zB,OAAA,OAAA8zB,EAAA,GAAA,GAAAttB,EAAAyb,EAAAzb,IAAA,MAAA,IAAA05B,WAAA,sDAAA,GAAA,IAAA15B,EAAA,OAAA+rB,EAAA6N,SAAA,GAAA55B,GAAA+rB,EAAAoP,iBAAA,OAAA7N,EAAA,MAAAqB,EAAA,GAAA3uB,EAAA,IAAA,GAAA,GAAAstB,EAAA9zB,OAAAm1B,EAAA,OAAArB,EAAA,MAAApuB,EAAAouB,EAAAgN,gBAAA3L,EAAA,GAAA/c,EAAA,IAAA5R,EAAA,GAAA,GAAA,GAAAstB,EAAA9zB,SAAAm1B,GAAAzvB,EAAA0S,EAAA,OAAA0b,EAAA,IAAApuB,EAAA0S,KAAAA,EAAA,OAAAma,EAAAuQ,kBAAAt8B,EAAAstB,GAAA,IAAAA,EAAA0G,KAAA,OAAAjI,EAAAwQ,+BAAAv8B,EAAAstB,GAAA,GAAA,GAAA,IAAApuB,EAAA0S,EAAA,GAAA,CAAA,IAAA,IAAAzS,EAAAwvB,EAAA,EAAA,GAAAxvB,EAAAA,IAAA,GAAA,IAAAmuB,EAAAiN,QAAAp7B,GAAA,OAAA4sB,EAAAwQ,+BAAAv8B,EAAAstB,GAAA,GAAA,OAAAA,EAAA9zB,SAAAm1B,GAAAzvB,IAAA0S,EAAA0b,EAAAvB,EAAAuQ,kBAAAt8B,EAAAstB,GAAA,OAAAvB,EAAAwQ,+BAAAv8B,EAAAstB,GAAA,GAAAxxB,eAAAnC,EAAAqG,GAAA,GAAA,IAAAA,EAAAxG,OAAA,OAAAwG,EAAA,GAAA,GAAArG,EAAA8hB,EAAA9hB,IAAA,MAAA,IAAA+/B,WAAA,sDAAA,GAAA,IAAA//B,EAAA,OAAAoyB,EAAA6N,SAAA,GAAA55B,EAAAg0B,KAAA,CAAA,GAAAr6B,EAAAoyB,EAAAoP,iBAAA,MAAA,IAAAzB,WAAA,kBAAA,OAAA3N,EAAAwQ,+BAAA5iC,EAAAqG,GAAA,GAAA,GAAArG,GAAAoyB,EAAAoP,iBAAA,OAAAn7B,EAAA,MAAAstB,EAAA,GAAA3zB,EAAA,IAAA,GAAA,GAAAqG,EAAAxG,OAAA8zB,EAAA,OAAAttB,EAAA,MAAA2uB,EAAAh1B,EAAA,GAAA,GAAAqG,EAAAxG,QAAA8zB,EAAA,CAAA,GAAA,IAAAqB,EAAA,OAAA3uB,EAAA,GAAA,GAAAA,EAAAu6B,QAAAjN,EAAA,KAAAqB,EAAA,OAAA3uB,EAAA,OAAA+rB,EAAAuQ,kBAAA3iC,EAAAqG,GAAAlE,WAAAnC,EAAAqG,GAAA,GAAArG,EAAAoyB,EAAAmO,cAAAvgC,GAAAqG,EAAA+rB,EAAAmO,cAAAl6B,GAAA,iBAAArG,EAAA,MAAA,iBAAAqG,IAAAA,EAAAA,EAAA9F,YAAAP,EAAAqG,EAAA,GAAA,iBAAAA,EAAA,OAAArG,EAAAO,WAAA8F,EAAA,GAAArG,EAAAoyB,EAAAyQ,YAAA7iC,GAAAqG,EAAA+rB,EAAAyQ,YAAAx8B,GAAA+rB,EAAA0Q,WAAA9iC,IAAAoyB,EAAA0Q,WAAAz8B,GAAA,OAAA+rB,EAAA2Q,IAAA/iC,EAAAqG,GAAA,GAAA,iBAAArG,GAAA,iBAAAqG,EAAA,OAAArG,EAAAqG,EAAA,MAAA,IAAA8kB,UAAA,+DAAAhpB,UAAAnC,EAAAqG,GAAA,OAAA+rB,EAAA4Q,UAAAhjC,EAAAqG,EAAA,GAAAlE,UAAAnC,EAAAqG,GAAA,OAAA+rB,EAAA4Q,UAAAhjC,EAAAqG,EAAA,GAAAlE,UAAAnC,EAAAqG,GAAA,OAAA+rB,EAAA4Q,UAAAhjC,EAAAqG,EAAA,GAAAlE,UAAAnC,EAAAqG,GAAA,OAAA+rB,EAAA4Q,UAAAhjC,EAAAqG,EAAA,GAAAlE,UAAAnC,EAAAqG,GAAA,OAAA,CAAA,GAAA+rB,EAAA0Q,WAAA9iC,GAAA,OAAAoyB,EAAA0Q,WAAAz8B,GAAA+rB,EAAAkQ,MAAAtiC,EAAAqG,GAAA+rB,EAAA6Q,GAAA58B,EAAArG,GAAA,GAAA,iBAAAA,EAAA,CAAA,GAAAoyB,EAAA0Q,WAAAz8B,GAAA,OAAA+rB,EAAA8Q,gBAAA78B,EAAArG,GAAA,GAAA,iBAAAqG,EAAA,OAAArG,GAAAqG,EAAAA,EAAA+rB,EAAAmO,cAAAl6B,QAAA,GAAA,iBAAArG,EAAA,CAAA,GAAAoyB,EAAA0Q,WAAAz8B,GAAA,OAAA,QAAArG,EAAAoyB,EAAAiO,aAAArgC,KAAAoyB,EAAAkQ,MAAAtiC,EAAAqG,GAAA,GAAA,iBAAAA,EAAA,OAAArG,GAAAqG,EAAAA,EAAA+rB,EAAAmO,cAAAl6B,QAAA,GAAA,kBAAArG,EAAA,CAAA,GAAAoyB,EAAA0Q,WAAAz8B,GAAA,OAAA+rB,EAAA8Q,gBAAA78B,GAAArG,GAAA,GAAA,iBAAAqG,EAAA,OAAArG,GAAAqG,EAAAA,EAAA+rB,EAAAmO,cAAAl6B,QAAA,GAAA,iBAAArG,EAAA,CAAA,GAAAoyB,EAAA0Q,WAAAz8B,GAAA,OAAA,EAAA,GAAA,iBAAAA,EAAA,OAAArG,GAAAqG,EAAAA,EAAA+rB,EAAAmO,cAAAl6B,OAAA,CAAA,GAAA,iBAAArG,EAAA,OAAAA,GAAAqG,EAAA,GAAA,iBAAAA,GAAAA,EAAA/E,cAAA8wB,EAAA,OAAApyB,GAAAqG,EAAArG,EAAAoyB,EAAAmO,cAAAvgC,KAAAmC,UAAAnC,EAAAqG,GAAA,OAAA+rB,EAAA6Q,GAAAjjC,EAAAqG,GAAAlE,gBAAA,OAAA,IAAAiwB,EAAA,GAAA,GAAAjwB,kBAAAnC,EAAAqG,GAAA,MAAAstB,EAAA,IAAAvB,EAAA,EAAA/rB,GAAA,OAAAstB,EAAA+N,WAAA,EAAA1hC,GAAA2zB,EAAAwN,SAAA,MAAA96B,EAAA,IAAA+rB,EAAA90B,KAAAuC,OAAAvC,KAAA+8B,MAAA,IAAA,IAAA1G,EAAA,EAAAA,EAAAr2B,KAAAuC,OAAA8zB,IAAAttB,EAAAstB,GAAAr2B,KAAAq2B,GAAA,OAAAttB,EAAAg7B,SAAA,IAAArhC,EAAA1C,KAAAuC,OAAAwG,EAAA/I,KAAA0C,EAAA,GAAA,KAAA,IAAAqG,GAAArG,IAAAqG,EAAA/I,KAAA0C,EAAA,GAAA1C,KAAAyT,MAAA,OAAA,IAAA/Q,IAAA1C,KAAA+8B,MAAA,GAAA/8B,KAAAmkC,qBAAA,IAAA,IAAAp7B,EAAA,EAAAA,EAAA/I,KAAAuC,OAAAwG,IAAA/I,KAAA+I,GAAA,EAAAlE,wBAAAnC,EAAAqG,EAAAstB,EAAAqB,GAAA,GAAA,EAAA3uB,EAAA,OAAA,EAAA,IAAAb,EAAA,GAAA,EAAAa,EAAAb,GAAAa,EAAA,MAAA,CAAA,GAAA,IAAAstB,EAAA,OAAA,EAAAA,IAAAqB,EAAAh1B,EAAA4gC,QAAAjN,GAAAnuB,EAAA,GAAA,IAAAsc,EAAA,GAAAtc,EAAA,GAAA,IAAAwvB,EAAAlT,GAAA,OAAA,EAAA,GAAAA,GAAA,EAAA,IAAAkT,EAAAlT,GAAA,OAAA,EAAA,KAAA,EAAA6R,GAAA,GAAAA,IAAA,IAAA3zB,EAAA4gC,QAAAjN,GAAA,OAAA,EAAA,OAAA,EAAAxxB,oBAAAnC,GAAAoyB,EAAA8O,uBAAA,GAAAlhC,EAAA,MAAA2zB,GAAA,KAAAvB,EAAA6O,qBAAA,KAAA,IAAA,KAAAjM,EAAA,GAAA,EAAArB,EAAA,IAAAnuB,EAAA,IAAA4sB,EAAA4C,EAAA,EAAAh1B,GAAA,IAAA8hB,EAAA,QAAAsQ,EAAA6O,qBAAA,GAAA,QAAA17B,EAAA6sB,EAAA6O,qBAAA,GAAA,MAAAngB,EAAA6S,EAAA,GAAA,IAAA5sB,EAAA+5B,EAAA,EAAA,GAAAhgB,EAAA,GAAA,CAAA,MAAA9gB,EAAA,GAAA8gB,EAAAggB,EAAA9gC,EAAA,GAAA+G,EAAA+a,IAAA9hB,EAAA8hB,EAAAA,GAAA,GAAA9hB,EAAAuF,IAAAvF,EAAAuF,IAAA,GAAAvF,OAAA,GAAA,KAAA8gB,EAAAggB,EAAA,GAAA/5B,EAAA+a,EAAAA,EAAAvc,EAAAA,EAAA,MAAA,CAAA,MAAAvF,EAAA8gB,EAAA,GAAAggB,EAAA,GAAA9gC,EAAA+G,EAAA+a,GAAA9hB,EAAAuF,IAAA,GAAAvF,EAAA8hB,EAAAvc,GAAAvF,EAAAuF,EAAA,EAAAC,EAAAk8B,WAAA1M,EAAA,EAAAjuB,GAAA,IAAA,IAAAV,EAAA2uB,EAAA,EAAA,GAAA3uB,EAAAA,IAAA,EAAAy6B,GAAAA,GAAA,GAAA/5B,EAAA+a,IAAA,EAAAA,EAAAA,GAAA,GAAAvc,IAAA,EAAAA,IAAA,IAAAwB,EAAA,EAAAvB,EAAAk8B,WAAAr7B,EAAAU,GAAA,OAAAvB,EAAA67B,SAAAl/B,sBAAAnC,GAAA,SAAA,IAAAA,GAAA,GAAAA,KAAA,KAAAA,EAAA,IAAAA,EAAA,QAAAA,EAAA,KAAAA,GAAA,MAAAA,EAAA,QAAAA,EAAA,KAAAA,GAAA,SAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,GAAA,IAAAA,GAAA,MAAAA,EAAA,OAAAA,GAAAmC,oBAAAnC,EAAAqG,EAAA,GAAA,IAAAstB,EAAA,EAAA,MAAAqB,EAAAh1B,EAAAH,OAAA,IAAA2F,EAAA,EAAA,GAAAA,IAAAwvB,EAAA,OAAA5C,EAAA6N,SAAA,IAAAne,EAAA9hB,EAAAE,WAAAsF,GAAA,KAAA4sB,EAAA+Q,eAAArhB,IAAA,CAAA,KAAAtc,IAAAwvB,EAAA,OAAA5C,EAAA6N,SAAAne,EAAA9hB,EAAAE,WAAAsF,GAAA,GAAA,KAAAsc,EAAA,CAAA,KAAAtc,IAAAwvB,EAAA,OAAA,KAAAlT,EAAA9hB,EAAAE,WAAAsF,GAAAmuB,EAAA,OAAA,GAAA,KAAA7R,EAAA,CAAA,KAAAtc,IAAAwvB,EAAA,OAAA,KAAAlT,EAAA9hB,EAAAE,WAAAsF,GAAAmuB,GAAA,EAAA,GAAA,IAAAttB,GAAA,GAAAA,EAAA,GAAA,KAAAyb,EAAA,CAAA,KAAAtc,IAAAwvB,EAAA,OAAA5C,EAAA6N,SAAA,GAAAne,EAAA9hB,EAAAE,WAAAsF,GAAA,KAAAsc,GAAA,MAAAA,EAAA,CAAA,GAAAzb,EAAA,KAAAb,IAAAwvB,EAAA,OAAA,KAAAlT,EAAA9hB,EAAAE,WAAAsF,QAAA,GAAA,KAAAsc,GAAA,MAAAA,EAAA,CAAA,GAAAzb,EAAA,IAAAb,IAAAwvB,EAAA,OAAA,KAAAlT,EAAA9hB,EAAAE,WAAAsF,QAAA,GAAA,KAAAsc,GAAA,KAAAA,EAAA,CAAA,GAAAzb,EAAA,IAAAb,IAAAwvB,EAAA,OAAA,KAAAlT,EAAA9hB,EAAAE,WAAAsF,UAAA,GAAA,KAAAa,GAAA,KAAAyb,EAAA,CAAA,KAAAtc,IAAAwvB,EAAA,OAAA5C,EAAA6N,SAAA,GAAAne,EAAA9hB,EAAAE,WAAAsF,GAAA,KAAAsc,GAAA,MAAAA,EAAA,CAAA,KAAAtc,IAAAwvB,EAAA,OAAA,KAAAlT,EAAA9hB,EAAAE,WAAAsF,IAAA,GAAA,GAAAmuB,GAAA,KAAAttB,EAAA,OAAA,KAAA,KAAA,KAAAyb,GAAA,CAAA,KAAAtc,IAAAwvB,EAAA,OAAA5C,EAAA6N,SAAAne,EAAA9hB,EAAAE,WAAAsF,GAAA,MAAAD,EAAAyvB,EAAAxvB,EAAA,IAAAyS,EAAAma,EAAAgR,kBAAA/8B,GAAAya,EAAAsR,EAAAiR,8BAAA,EAAA,GAAA99B,EAAA,WAAA0S,EAAA,OAAA,KAAA,MAAAlR,EAAAkR,EAAA1S,EAAAub,IAAAsR,EAAAkR,yBAAAxC,EAAA,IAAA1O,EAAA,GAAArrB,EAAA,IAAA,IAAA,GAAAg6B,EAAA,GAAA16B,EAAAA,EAAA,GAAAW,EAAA,GAAAX,EAAAA,EAAA,GAAA,EAAA,GAAA,IAAAA,EAAAA,EAAA,GAAA,CAAA4R,IAAAma,EAAAkR,yBAAA,MAAAj9B,EAAA,GAAAstB,EAAA,GAAA,IAAApuB,GAAA,EAAA,EAAA,CAAA,IAAA6sB,EAAA,EAAAtR,EAAA,EAAA,OAAA,CAAA,IAAAza,EAAA,GAAAyb,EAAA,KAAA,EAAAif,EAAA16B,EAAAyb,EAAA,OAAA,CAAA,MAAA,GAAAA,GAAA,KAAA,EAAA9a,GAAA,CAAAzB,GAAA,EAAA,MAAAc,GAAA,GAAAyb,GAAA,GAAA,GAAAhB,GAAA7I,EAAAma,EAAAA,GAAAna,EAAA5R,IAAAb,IAAAwvB,EAAA,CAAAzvB,GAAA,EAAA,MAAA,GAAAuc,EAAA9hB,EAAAE,WAAAsF,GAAA,GAAAsb,EAAA7I,EAAA,MAAA5R,EAAAlC,KAAAiuB,GAAAuB,EAAAxvB,KAAA2c,UAAAvb,GAAA6sB,EAAAmR,gBAAAzC,EAAAz6B,EAAAstB,OAAA,CAAAmN,EAAAW,qBAAA,IAAA9N,GAAA,EAAApuB,EAAA,EAAA,EAAA,CAAA,IAAAwB,EAAA,EAAAy8B,EAAA,EAAA,OAAA,CAAA,IAAApR,EAAA,GAAAtQ,EAAA,KAAA,EAAAif,EAAA3O,EAAAtQ,EAAA,OAAA,CAAA,MAAA,GAAAA,GAAA,KAAA,EAAA9a,GAAA,CAAA2sB,GAAA,EAAA,MAAAvB,GAAA,GAAAtQ,GAAA,GAAA,MAAA7J,EAAAurB,EAAAn9B,EAAA,GAAA,WAAA4R,EAAA,MAAA,GAAAurB,EAAAvrB,EAAAlR,EAAAA,EAAAV,EAAA+rB,EAAA7sB,MAAAC,IAAAwvB,EAAA,CAAArB,GAAA,EAAA,MAAA7R,EAAA9hB,EAAAE,WAAAsF,GAAAsb,EAAA,GAAAsR,EAAAiR,8BAAA,EAAA,MAAA/8B,EAAA,GAAA2R,EAAA1S,EAAAub,IAAAsR,EAAAkR,0BAAA,GAAAxC,EAAA2C,qBAAAD,EAAAz8B,EAAAT,UAAAqtB,GAAA,GAAAnuB,IAAAwvB,EAAA,CAAA,IAAA5C,EAAA+Q,eAAArhB,GAAA,OAAA,KAAA,IAAAtc,IAAAA,EAAAwvB,EAAAxvB,IAAA,GAAAsc,EAAA9hB,EAAAE,WAAAsF,IAAA4sB,EAAA+Q,eAAArhB,GAAA,OAAA,KAAA,OAAAgf,EAAAzG,MAAA,GAAA1G,EAAAmN,EAAAO,SAAAl/B,uBAAAkE,EAAAstB,EAAAqB,GAAA,IAAAxvB,EAAA,EAAAsc,EAAA,EAAAsQ,EAAA,EAAA,IAAA,IAAA7sB,EAAAouB,EAAA9zB,OAAA,EAAA,GAAA0F,EAAAA,IAAA,CAAA,MAAAvF,EAAA2zB,EAAApuB,GAAA0S,EAAA+c,EAAAzvB,GAAAuc,GAAA9hB,GAAAoyB,EAAAA,GAAAna,EAAA,KAAAma,GAAA/rB,EAAAq7B,WAAAl8B,IAAAsc,GAAAsQ,EAAA,EAAAtQ,EAAA,GAAA,GAAAsQ,IAAA/rB,EAAAq7B,WAAAl8B,IAAA,WAAAsc,GAAAsQ,GAAA,GAAAtQ,EAAA9hB,IAAAiY,EAAAma,GAAA,GAAA,IAAAtQ,EAAA,CAAA,GAAAtc,GAAAa,EAAAxG,OAAA,MAAA,IAAAoB,MAAA,sBAAAoF,EAAAq7B,WAAAl8B,IAAAsc,GAAA,KAAAtc,EAAAa,EAAAxG,OAAA2F,IAAAa,EAAAq7B,WAAAl8B,EAAA,GAAArD,gCAAAkE,EAAArG,GAAA,MAAA2zB,EAAAttB,EAAAxG,OAAA,IAAAm1B,EAAAh1B,EAAA,EAAAg1B,GAAA,GAAAA,IAAA,IAAA,GAAAA,GAAAA,GAAA,GAAAA,IAAA,IAAA,GAAAA,GAAAA,GAAA,GAAAA,IAAA,IAAA,GAAAA,GAAA,MAAAxvB,EAAAwvB,EAAAlT,EAAA9hB,EAAA,EAAAuF,EAAAc,EAAAu6B,QAAAjN,EAAA,GAAA,IAAA7S,EAAA,GAAA,GAAA6S,EAAAvB,EAAAyO,QAAAt7B,GAAAC,EAAA,GAAAA,EAAA,GAAAa,EAAAg0B,MAAAvZ,IAAA,UAAAA,EAAA,MAAA,IAAA7f,MAAA,mBAAA,MAAA8F,EAAAhH,MAAA+gB,GAAA,IAAAggB,EAAAhgB,EAAA,EAAAa,EAAA,EAAAof,EAAA,EAAA,IAAA,IAAA/L,EAAA,EAAAA,EAAArB,EAAA,EAAAqB,IAAA,CAAA,MAAAh1B,EAAAqG,EAAAu6B,QAAA5L,GAAArB,GAAAhS,EAAA3hB,GAAA+gC,GAAAjf,EAAA/a,EAAA+5B,KAAA1O,EAAAsR,mBAAA/P,GAAA,MAAApuB,EAAAC,EAAAu7B,EAAA,IAAApf,EAAA3hB,IAAAuF,EAAAw7B,EAAA,GAAAx7B,EAAAw7B,GAAAv7B,GAAAuB,EAAA+5B,KAAA1O,EAAAsR,mBAAA/hB,EAAAG,GAAAH,KAAAnc,EAAAu7B,GAAAv7B,EAAA,MAAAyyB,GAAAtW,EAAApc,GAAAw7B,GAAAjf,EAAA,IAAA/a,EAAA+5B,KAAA1O,EAAAsR,mBAAAzL,GAAAtW,EAAApc,IAAAC,EAAAu7B,EAAA,IAAApf,GAAA5a,EAAA+5B,KAAA1O,EAAAsR,mBAAA/hB,EAAAG,GAAAH,KAAAnc,EAAA,GAAAa,EAAAg0B,OAAAtzB,EAAA+5B,KAAA,MAAA,GAAAA,EAAA,MAAA,IAAA7/B,MAAA,sBAAA,OAAA8F,EAAA7H,KAAA,IAAAiD,yBAAAkE,EAAArG,EAAA2zB,GAAA,MAAAqB,EAAA3uB,EAAAxG,OAAA,GAAA,IAAAm1B,EAAA,MAAA,GAAA,GAAA,IAAAA,EAAA,CAAA,IAAAA,EAAA3uB,EAAAs6B,gBAAA,GAAApgC,SAAAP,GAAA,OAAA,IAAA2zB,GAAAttB,EAAAg0B,OAAArF,EAAA,IAAAA,GAAAA,EAAA,MAAAxvB,EAAA,GAAAwvB,EAAA5C,EAAAyO,QAAAx6B,EAAAu6B,QAAA5L,EAAA,IAAAzvB,EAAA6sB,EAAAgR,kBAAApjC,GAAA,EAAA,IAAAiY,EAAAzS,EAAA4sB,EAAAiR,8BAAAprB,GAAA1S,EAAA,EAAA0S,EAAA,EAAAA,EAAA1S,EAAA,MAAAub,EAAA7I,EAAA,GAAA,EAAAlR,EAAAqrB,EAAAuR,aAAAvR,EAAA+N,WAAAngC,GAAA,GAAAoyB,EAAA+N,WAAArf,GAAA,IAAA,IAAAggB,EAAAnf,EAAA,MAAAof,EAAAh6B,EAAA45B,gBAAA,GAAA,GAAA,IAAA55B,EAAAlH,QAAA,OAAAkhC,EAAA,CAAAD,EAAA,IAAA1O,EAAA/rB,EAAAxG,QAAA,GAAAihC,EAAAW,qBAAA,IAAA9N,EAAA,EAAA,IAAA,IAAAqB,EAAA,EAAA3uB,EAAAxG,OAAA,EAAA,GAAAm1B,EAAAA,IAAA,CAAA,MAAAh1B,EAAA2zB,GAAA,GAAAttB,EAAAu9B,YAAA5O,GAAA8L,EAAA+C,eAAA7O,EAAA,EAAAh1B,EAAA+gC,GAAApN,EAAA,EAAA3zB,EAAA+gC,EAAApf,EAAAgS,EAAApzB,SAAAP,OAAA,CAAA,MAAA2zB,EAAAvB,EAAA2P,mBAAA17B,EAAAU,GAAA,GAAA,GAAA+5B,EAAAnN,EAAAmQ,SAAA,MAAA9O,EAAArB,EAAAoQ,UAAA1C,SAAA1f,EAAAyQ,EAAAsO,kBAAA1L,EAAAh1B,GAAA,GAAA8gC,EAAAO,SAAA,IAAApJ,EAAA7F,EAAAsO,kBAAAI,EAAA9gC,GAAA,GAAA,KAAA2hB,EAAA9hB,OAAAihB,GAAAa,EAAA,IAAAA,EAAA,OAAA,IAAAgS,GAAAttB,EAAAg0B,OAAApC,EAAA,IAAAA,GAAAA,EAAAtW,EAAAxf,qBAAAnC,GAAA,OAAAA,GAAA,EAAA,EAAAmC,yBAAAnC,GAAA,OAAAA,GAAA,EAAA,EAAAmC,sBAAAnC,GAAA,OAAAA,EAAA,GAAA,EAAAmC,yBAAAnC,EAAAqG,GAAA,MAAAstB,EAAA3zB,EAAAq6B,KAAA,GAAA1G,IAAAttB,EAAAg0B,KAAA,OAAAjI,EAAA4R,cAAArQ,GAAA,MAAAqB,EAAA5C,EAAAyP,kBAAA7hC,EAAAqG,GAAA,OAAA,EAAA2uB,EAAA5C,EAAA6R,kBAAAtQ,GAAA,EAAAqB,EAAA5C,EAAA8R,eAAAvQ,GAAA,EAAAxxB,yBAAAnC,EAAAqG,GAAA,GAAA+rB,EAAA8N,gBAAA75B,GAAA,CAAA,MAAA2uB,EAAAh1B,EAAAq6B,KAAA70B,EAAA,EAAAa,EAAA,GAAA2uB,IAAAxvB,EAAA,OAAA4sB,EAAA4R,cAAAhP,GAAA,GAAA,IAAAh1B,EAAAH,OAAA,CAAA,GAAA2F,EAAA,MAAA,IAAAvE,MAAA,sBAAA,OAAA,IAAAoF,EAAA,GAAA,EAAA,GAAA,EAAArG,EAAAH,OAAA,OAAAuyB,EAAA6R,kBAAAjP,GAAA,MAAAlT,EAAA6R,EAAAttB,GAAAd,EAAAvF,EAAA2gC,gBAAA,GAAA,OAAAp7B,EAAAuc,EAAAsQ,EAAA6R,kBAAAjP,GAAAzvB,EAAAuc,EAAAsQ,EAAA8R,eAAAlP,GAAA,EAAA,OAAA5C,EAAA+R,kBAAAnkC,EAAAqG,GAAAlE,yBAAAnC,EAAAqG,GAAA,GAAAA,GAAAA,EAAA,OAAAA,EAAA,GAAAA,IAAA,EAAA,EAAA,OAAA,EAAA,GAAAA,KAAAkhB,SAAA,OAAA,EAAA,MAAAoM,EAAA3zB,EAAAq6B,KAAA,GAAA1G,IAAA,EAAAttB,EAAA,OAAA+rB,EAAA4R,cAAArQ,GAAA,GAAA,IAAAttB,EAAA,MAAA,IAAApF,MAAA,mDAAA,GAAA,IAAAjB,EAAAH,OAAA,OAAA,EAAAuyB,EAAA8O,uBAAA,GAAA76B,EAAA,MAAA2uB,EAAA,KAAA5C,EAAA6O,qBAAA,KAAA,GAAA,GAAA,MAAAjM,EAAA,MAAA,IAAA/zB,MAAA,yCAAA,MAAAuE,EAAAwvB,EAAA,KAAA,GAAA,EAAAxvB,EAAA,OAAA4sB,EAAA6R,kBAAAtQ,GAAA,MAAA7R,EAAA9hB,EAAAH,OAAA,IAAA0F,EAAAvF,EAAA4gC,QAAA9e,EAAA,GAAA,MAAA7J,EAAAma,EAAAyO,QAAAt7B,GAAAub,EAAA,GAAAgB,EAAA7J,EAAAlR,EAAAvB,EAAA,EAAA,GAAAsb,EAAA/Z,EAAA,OAAAqrB,EAAA8R,eAAAvQ,GAAA,GAAA7S,EAAA/Z,EAAA,OAAAqrB,EAAA6R,kBAAAtQ,GAAA,IAAAmN,EAAA,QAAA,QAAA1O,EAAA6O,qBAAA,GAAAtf,EAAAyQ,EAAA6O,qBAAA,GAAA,MAAAhJ,EAAA,GAAAhgB,EAAA,GAAAggB,KAAA,GAAAnX,EAAA,GAAA,IAAA,MAAA,IAAA7f,MAAA,sBAAA,IAAA+F,EAAAw8B,EAAA,EAAA,GAAA,GAAAvL,EAAA,CAAA,MAAAj4B,EAAA,GAAAi4B,EAAAuL,EAAAxjC,EAAA,GAAAgH,EAAA85B,IAAA9gC,EAAA8gC,EAAAA,GAAA,GAAA9gC,EAAA2hB,IAAA3hB,EAAA2hB,IAAA,GAAA3hB,OAAA,GAAA,KAAAi4B,EAAAuL,EAAA,GAAAx8B,EAAA85B,EAAAA,EAAAnf,MAAA,CAAA,MAAA3hB,EAAAi4B,EAAA,GAAAuL,EAAA,GAAAxjC,EAAAgH,EAAA85B,GAAA9gC,EAAA2hB,IAAA,GAAA3hB,EAAA8gC,EAAAnf,GAAA3hB,EAAA,GAAAuF,KAAA,EAAAyB,KAAA,EAAAzB,EAAAyB,EAAA,OAAAorB,EAAA6R,kBAAAtQ,GAAA,GAAApuB,EAAAyB,EAAA,OAAAorB,EAAA8R,eAAAvQ,GAAA,IAAA,IAAAqB,EAAAlT,EAAA,EAAA,GAAAkT,EAAAA,IAAA,CAAA,EAAAwO,GAAAA,GAAA,GAAAx8B,EAAA85B,IAAA,EAAAA,EAAAA,GAAA,GAAAnf,IAAA,EAAAA,IAAA,IAAA3a,EAAA,EAAA,MAAAX,EAAArG,EAAA2gC,gBAAA3L,GAAA,GAAA3uB,EAAAW,EAAA,OAAAorB,EAAA6R,kBAAAtQ,GAAA,GAAAttB,EAAAW,EAAA,OAAAorB,EAAA8R,eAAAvQ,GAAA,GAAA,IAAAmN,GAAA,IAAAnf,EAAA,CAAA,GAAA,IAAA6hB,EAAA,MAAA,IAAAviC,MAAA,sBAAA,OAAAmxB,EAAA8R,eAAAvQ,GAAA,OAAA,EAAAxxB,uBAAAnC,EAAAqG,GAAA,OAAA+rB,EAAA8N,gBAAA75B,GAAA,IAAAA,EAAA,IAAArG,EAAAH,OAAA,IAAAG,EAAAH,QAAAG,EAAAq6B,OAAA,EAAAh0B,GAAArG,EAAA2gC,gBAAA,KAAAhN,EAAAttB,GAAA,IAAA+rB,EAAA+R,kBAAAnkC,EAAAqG,GAAAlE,gCAAAnC,EAAAqG,GAAA,OAAA,IAAAA,EAAA,EAAArG,EAAA,IAAAqG,EAAA,GAAArG,EAAA,IAAAqG,EAAA,EAAArG,EAAA,IAAAqG,EAAA,GAAArG,OAAA,EAAAmC,iBAAAnC,EAAAqG,EAAAstB,GAAA,GAAA3zB,EAAAoyB,EAAAmO,cAAAvgC,GAAAqG,EAAA+rB,EAAAmO,cAAAl6B,GAAA,iBAAArG,GAAA,iBAAAqG,EAAA,OAAAstB,GAAA,KAAA,EAAA,OAAA3zB,EAAAqG,EAAA,KAAA,EAAA,OAAArG,GAAAqG,EAAA,KAAA,EAAA,OAAArG,EAAAqG,EAAA,KAAA,EAAA,OAAArG,GAAAqG,EAAA,GAAA+rB,EAAA0Q,WAAA9iC,IAAA,iBAAAqG,EAAA,OAAA,QAAAA,EAAA+rB,EAAAiO,aAAAh6B,KAAA+rB,EAAAgS,yBAAAhS,EAAAiQ,kBAAAriC,EAAAqG,GAAAstB,GAAA,GAAA,iBAAA3zB,GAAAoyB,EAAA0Q,WAAAz8B,GAAA,OAAA,QAAArG,EAAAoyB,EAAAiO,aAAArgC,KAAAoyB,EAAAgS,yBAAAhS,EAAAiQ,kBAAAriC,EAAAqG,GAAAstB,GAAA,GAAA3zB,EAAAoyB,EAAAyQ,YAAA7iC,GAAAqG,EAAA+rB,EAAAyQ,YAAAx8B,GAAA+rB,EAAA0Q,WAAA9iC,GAAA,CAAA,GAAAoyB,EAAA0Q,WAAAz8B,GAAA,OAAA+rB,EAAAgS,yBAAAhS,EAAAiQ,kBAAAriC,EAAAqG,GAAAstB,GAAA,GAAA,iBAAAttB,EAAA,MAAA,IAAApF,MAAA,sBAAA,OAAAmxB,EAAAgS,yBAAAhS,EAAAiS,kBAAArkC,EAAAqG,GAAAstB,GAAA,GAAA,iBAAA3zB,EAAA,MAAA,IAAAiB,MAAA,sBAAA,GAAAmxB,EAAA0Q,WAAAz8B,GAAA,OAAA+rB,EAAAgS,yBAAAhS,EAAAiS,kBAAAh+B,EAAArG,GAAA,EAAA2zB,GAAA,GAAA,iBAAAttB,EAAA,MAAA,IAAApF,MAAA,sBAAA,OAAA,IAAA0yB,EAAA3zB,EAAAqG,EAAA,IAAAstB,EAAA3zB,GAAAqG,EAAA,IAAAstB,EAAA3zB,EAAAqG,EAAA,IAAAstB,EAAA3zB,GAAAqG,OAAA,EAAAs7B,WAAA,OAAAvP,EAAAyO,QAAAvjC,KAAAsjC,QAAAtjC,KAAAuC,OAAA,IAAAsC,qBAAAkE,EAAAstB,EAAAqB,GAAA,GAAA3uB,EAAAxG,OAAA8zB,EAAA9zB,OAAA,OAAAuyB,EAAA6P,cAAAtO,EAAAttB,EAAA2uB,GAAA,GAAA,IAAA3uB,EAAAxG,OAAA,OAAAwG,EAAA,GAAA,IAAAstB,EAAA9zB,OAAA,OAAAwG,EAAAg0B,OAAArF,EAAA3uB,EAAA+rB,EAAAmP,WAAAl7B,GAAA,IAAAb,EAAAa,EAAAxG,QAAA,IAAAwG,EAAAs7B,YAAAhO,EAAA9zB,SAAAwG,EAAAxG,QAAA,IAAA8zB,EAAAgO,aAAAn8B,IAAA,MAAAsc,EAAA,IAAAsQ,EAAA5sB,EAAAwvB,GAAA,IAAAzvB,EAAA,EAAA0S,EAAA,EAAA,KAAAA,EAAA0b,EAAA9zB,OAAAoY,IAAA,CAAA,MAAAjY,EAAAqG,EAAAu6B,QAAA3oB,GAAA0b,EAAAiN,QAAA3oB,GAAA1S,EAAAA,EAAAvF,IAAA,GAAA8hB,EAAA4f,WAAAzpB,EAAA,WAAAjY,GAAA,KAAAiY,EAAA5R,EAAAxG,OAAAoY,IAAA,CAAA,MAAAjY,EAAAqG,EAAAu6B,QAAA3oB,GAAA1S,EAAAA,EAAAvF,IAAA,GAAA8hB,EAAA4f,WAAAzpB,EAAA,WAAAjY,GAAA,OAAAiY,EAAA6J,EAAAjiB,QAAAiiB,EAAA4f,WAAAzpB,EAAA1S,GAAAuc,EAAAuf,SAAAl/B,qBAAAkE,EAAAstB,EAAAqB,GAAA,GAAA,IAAA3uB,EAAAxG,OAAA,OAAAwG,EAAA,GAAA,IAAAstB,EAAA9zB,OAAA,OAAAwG,EAAAg0B,OAAArF,EAAA3uB,EAAA+rB,EAAAmP,WAAAl7B,GAAA,MAAAb,EAAA,IAAA4sB,EAAA/rB,EAAAxG,OAAAm1B,GAAA,IAAAlT,EAAA,EAAAvc,EAAA,EAAA,KAAAA,EAAAouB,EAAA9zB,OAAA0F,IAAA,CAAA,MAAAvF,EAAAqG,EAAAu6B,QAAAr7B,GAAAouB,EAAAiN,QAAAr7B,GAAAuc,EAAAA,EAAA,EAAA9hB,IAAA,GAAAwF,EAAAk8B,WAAAn8B,EAAA,WAAAvF,GAAA,KAAAuF,EAAAc,EAAAxG,OAAA0F,IAAA,CAAA,MAAAvF,EAAAqG,EAAAu6B,QAAAr7B,GAAAuc,EAAAA,EAAA,EAAA9hB,IAAA,GAAAwF,EAAAk8B,WAAAn8B,EAAA,WAAAvF,GAAA,OAAAwF,EAAA67B,SAAAl/B,wBAAAkE,EAAArG,EAAA2zB,EAAA,MAAA,MAAAqB,EAAA3uB,EAAAxG,OAAA,OAAA8zB,EAAAA,EAAA,IAAAvB,EAAA4C,EAAAh1B,GAAA2zB,EAAA0G,KAAAr6B,EAAA,IAAAwF,EAAA,EAAA,IAAA,IAAAsc,EAAA,EAAAA,EAAAkT,EAAAlT,IAAA,CAAA,MAAA9hB,EAAAqG,EAAAu6B,QAAA9e,GAAAtc,EAAAA,EAAAxF,IAAA,GAAA2zB,EAAA+N,WAAA5f,EAAA,WAAA9hB,GAAA,OAAA,GAAAwF,GAAAmuB,EAAA2Q,eAAAtP,EAAA,GAAArB,EAAAxxB,wBAAAkE,EAAAstB,GAAA,MAAAqB,EAAA3uB,EAAAxG,OAAA2F,EAAA,IAAA4sB,EAAAuB,EAAAA,GAAAqB,GAAA,GAAA,IAAAlT,EAAA,EAAA,IAAA,IAAAsQ,EAAA,EAAAA,EAAA4C,EAAA5C,IAAA,CAAA,MAAApyB,EAAAqG,EAAAu6B,QAAAxO,GAAAtQ,EAAAA,EAAA,EAAA9hB,IAAA,GAAAwF,EAAAk8B,WAAAtP,EAAA,WAAApyB,GAAA,GAAA,GAAA8hB,EAAA,MAAA,IAAA7gB,MAAA,sBAAA,IAAA,IAAA6gB,EAAAkT,EAAAlT,EAAA6R,EAAA7R,IAAAtc,EAAAk8B,WAAA5f,EAAA,GAAA,OAAAtc,EAAArD,qBAAAkE,EAAAstB,EAAAqB,EAAA,MAAA,IAAAxvB,EAAAa,EAAAxG,OAAAiiB,EAAA6R,EAAA9zB,OAAA0F,EAAAuc,EAAA,GAAAtc,EAAAsc,EAAA,CAAAvc,EAAAC,EAAA,MAAAxF,EAAAqG,EAAA2uB,EAAAxvB,EAAAa,EAAAstB,EAAAnuB,EAAAsc,EAAA6R,EAAA3zB,EAAA8hB,EAAAkT,EAAA,IAAA/c,EAAA1S,EAAA,OAAAyvB,EAAAA,EAAA,IAAA5C,EAAAna,GAAA,GAAAA,EAAA+c,EAAAn1B,OAAA,IAAAihB,EAAA,EAAA,KAAAA,EAAAvb,EAAAub,IAAAkU,EAAA0M,WAAA5gB,EAAAza,EAAAu6B,QAAA9f,GAAA6S,EAAAiN,QAAA9f,IAAA,KAAAA,EAAA7I,EAAA6I,IAAAkU,EAAA0M,WAAA5gB,EAAA,GAAA,OAAAkU,EAAA7yB,wBAAAkE,EAAAstB,EAAAqB,EAAA,MAAA,MAAAxvB,EAAAa,EAAAxG,OAAAiiB,EAAA6R,EAAA9zB,OAAA,IAAA0F,EAAAuc,EAAAtc,EAAAsc,IAAAvc,EAAAC,GAAA,IAAAyS,EAAAzS,EAAA,OAAAwvB,EAAAA,EAAA,IAAA5C,EAAAna,GAAA,GAAAA,EAAA+c,EAAAn1B,OAAA,IAAAihB,EAAA,EAAA,KAAAA,EAAAvb,EAAAub,IAAAkU,EAAA0M,WAAA5gB,EAAAza,EAAAu6B,QAAA9f,IAAA6S,EAAAiN,QAAA9f,IAAA,KAAAA,EAAAtb,EAAAsb,IAAAkU,EAAA0M,WAAA5gB,EAAAza,EAAAu6B,QAAA9f,IAAA,KAAAA,EAAA7I,EAAA6I,IAAAkU,EAAA0M,WAAA5gB,EAAA,GAAA,OAAAkU,EAAA7yB,oBAAAkE,EAAAstB,EAAAqB,EAAA,MAAA,IAAAxvB,EAAAa,EAAAxG,OAAAiiB,EAAA6R,EAAA9zB,OAAA0F,EAAAuc,EAAA,GAAAtc,EAAAsc,EAAA,CAAAvc,EAAAC,EAAA,MAAAxF,EAAAqG,EAAA2uB,EAAAxvB,EAAAa,EAAAstB,EAAAnuB,EAAAsc,EAAA6R,EAAA3zB,EAAA8hB,EAAAkT,EAAA,IAAA/c,EAAAzS,EAAA,OAAAwvB,EAAAA,EAAA,IAAA5C,EAAAna,GAAA,GAAAA,EAAA+c,EAAAn1B,OAAA,IAAAihB,EAAA,EAAA,KAAAA,EAAAvb,EAAAub,IAAAkU,EAAA0M,WAAA5gB,EAAAza,EAAAu6B,QAAA9f,GAAA6S,EAAAiN,QAAA9f,IAAA,KAAAA,EAAAtb,EAAAsb,IAAAkU,EAAA0M,WAAA5gB,EAAAza,EAAAu6B,QAAA9f,IAAA,KAAAA,EAAA7I,EAAA6I,IAAAkU,EAAA0M,WAAA5gB,EAAA,GAAA,OAAAkU,EAAA7yB,qBAAAkE,EAAAstB,EAAAqB,EAAA,MAAA,IAAAxvB,EAAAa,EAAAxG,OAAAiiB,EAAA6R,EAAA9zB,OAAA0F,EAAAuc,EAAA,GAAAtc,EAAAsc,EAAA,CAAAvc,EAAAC,EAAA,MAAAxF,EAAAqG,EAAA2uB,EAAAxvB,EAAAa,EAAAstB,EAAAnuB,EAAAsc,EAAA6R,EAAA3zB,EAAA8hB,EAAAkT,EAAA,IAAA/c,EAAAzS,EAAA,OAAAwvB,EAAAA,EAAA,IAAA5C,EAAAna,GAAA,GAAAA,EAAA+c,EAAAn1B,OAAA,IAAAihB,EAAA,EAAA,KAAAA,EAAAvb,EAAAub,IAAAkU,EAAA0M,WAAA5gB,EAAAza,EAAAu6B,QAAA9f,GAAA6S,EAAAiN,QAAA9f,IAAA,KAAAA,EAAAtb,EAAAsb,IAAAkU,EAAA0M,WAAA5gB,EAAAza,EAAAu6B,QAAA9f,IAAA,KAAAA,EAAA7I,EAAA6I,IAAAkU,EAAA0M,WAAA5gB,EAAA,GAAA,OAAAkU,EAAA7yB,yBAAAkE,EAAAstB,GAAA,MAAAqB,EAAA3uB,EAAAxG,OAAA8zB,EAAA9zB,OAAA,GAAA,GAAAm1B,EAAA,OAAAA,EAAA,IAAAxvB,EAAAa,EAAAxG,OAAA,EAAA,KAAA,GAAA2F,GAAAa,EAAAu6B,QAAAp7B,KAAAmuB,EAAAiN,QAAAp7B,IAAAA,IAAA,OAAA,EAAAA,EAAA,EAAAa,EAAAs6B,gBAAAn7B,GAAAmuB,EAAAgN,gBAAAn7B,GAAA,GAAA,EAAArD,4BAAAkE,EAAAstB,EAAAqB,EAAAxvB,GAAA,GAAA,IAAAmuB,EAAA,OAAA,MAAA7R,EAAA,MAAA6R,EAAApuB,EAAAouB,IAAA,GAAA,IAAA1b,EAAA,EAAA6I,EAAA,EAAA,IAAA,IAAA/Z,EAAA+5B,EAAA,EAAAA,EAAAz6B,EAAAxG,OAAAihC,IAAAt7B,IAAA,CAAAuB,EAAAiuB,EAAA4L,QAAAp7B,GAAA,MAAAxF,EAAAqG,EAAAu6B,QAAAE,GAAAnN,EAAA,MAAA3zB,EAAA2hB,EAAA3hB,IAAA,GAAA+gC,EAAA3O,EAAAmS,OAAA5Q,EAAA7R,GAAAmW,EAAA7F,EAAAmS,OAAA5Q,EAAApuB,GAAAyB,EAAAorB,EAAAmS,OAAA5iB,EAAAG,GAAA0hB,EAAApR,EAAAmS,OAAA5iB,EAAApc,GAAAwB,GAAA+Z,EAAAigB,EAAA9oB,EAAAA,EAAAlR,IAAA,GAAAA,GAAA,WAAAA,KAAA,MAAAkxB,IAAA,MAAA,MAAAjxB,IAAA,IAAAiR,GAAAlR,IAAA,GAAA+Z,EAAA0iB,GAAAvL,IAAA,KAAAjxB,IAAA,IAAAguB,EAAA0M,WAAAl8B,EAAA,WAAAuB,GAAA,KAAA,GAAAkR,GAAA,IAAA6I,EAAAtb,IAAA,CAAA,IAAAxF,EAAAg1B,EAAA4L,QAAAp7B,GAAAxF,GAAAiY,EAAA6I,EAAAA,EAAA,EAAA7I,EAAAjY,IAAA,GAAAg1B,EAAA0M,WAAAl8B,EAAA,WAAAxF,IAAAmC,6BAAAkE,EAAAstB,EAAAqB,EAAAlT,EAAAvc,GAAA,IAAA0S,EAAA+c,EAAAjuB,EAAA,EAAA,IAAA,IAAAvB,EAAA,EAAAA,EAAAsc,EAAAtc,IAAA,CAAA,MAAAxF,EAAAqG,EAAAu6B,QAAAp7B,GAAAwvB,EAAA5C,EAAAmS,OAAA,MAAAvkC,EAAA2zB,GAAA7R,EAAAsQ,EAAAmS,OAAAvkC,IAAA,GAAA2zB,GAAAmN,EAAA9L,IAAA,MAAAlT,IAAA,IAAA/a,EAAAkR,EAAAA,EAAA6oB,IAAA,GAAA/5B,EAAA+a,IAAA,GAAAvc,EAAAm8B,WAAAl8B,EAAA,WAAAs7B,GAAA,GAAAv7B,EAAA1F,OAAAiiB,EAAA,IAAAvc,EAAAm8B,WAAA5f,IAAA7J,EAAAlR,GAAA+a,EAAAvc,EAAA1F,QAAA0F,EAAAm8B,WAAA5f,IAAA,QAAA,GAAA,IAAA7J,EAAAlR,EAAA,MAAA,IAAA9F,MAAA,sBAAAwiC,qBAAAzjC,EAAAqG,EAAAstB,GAAAA,EAAAr2B,KAAAuC,SAAA8zB,EAAAr2B,KAAAuC,QAAA,MAAAm1B,EAAA,MAAAh1B,EAAAwF,EAAAxF,IAAA,GAAA,IAAA8hB,EAAA,EAAAvc,EAAAc,EAAA,IAAA,IAAA4R,EAAA,EAAAA,EAAA0b,EAAA1b,IAAA,CAAA,MAAAjY,EAAA1C,KAAAsjC,QAAA3oB,GAAA5R,EAAA,MAAArG,EAAA2zB,EAAA3zB,IAAA,GAAA8gB,EAAAsR,EAAAmS,OAAAl+B,EAAA2uB,GAAAjuB,EAAAqrB,EAAAmS,OAAAl+B,EAAAb,GAAAs7B,EAAA1O,EAAAmS,OAAA5Q,EAAAqB,GAAArT,EAAAyQ,EAAAmS,OAAA5Q,EAAAnuB,GAAA,IAAAu7B,EAAAx7B,EAAAub,EAAAgB,EAAAA,EAAAif,IAAA,GAAAA,GAAA,WAAAA,KAAA,MAAAh6B,IAAA,MAAA,MAAA+5B,IAAA,IAAAhf,GAAAif,IAAA,GAAAx7B,EAAAoc,GAAA5a,IAAA,KAAA+5B,IAAA,IAAAxjC,KAAAokC,WAAAzpB,EAAA,WAAA8oB,GAAA,GAAA,GAAAjf,GAAA,IAAAvc,EAAA,MAAA,IAAAtE,MAAA,sBAAAkB,0BAAAkE,EAAAstB,EAAAqB,EAAA,MAAA,OAAAA,IAAAA,EAAA,IAAA5C,EAAA/rB,EAAAxG,QAAA,IAAA,IAAA2F,EAAA,EAAA,IAAA,IAAAsc,EAAAsQ,EAAA,EAAA/rB,EAAAxG,OAAA,EAAA,GAAAuyB,EAAAA,GAAA,EAAA,CAAAtQ,GAAAtc,GAAA,GAAAa,EAAAu9B,YAAAxR,MAAA,EAAA,MAAApyB,EAAA,EAAA8hB,EAAA6R,EAAAnuB,EAAA,EAAAsc,EAAA6R,EAAA7R,GAAAtc,GAAA,GAAAa,EAAAu9B,YAAAxR,EAAA,MAAA,EAAA,MAAA7sB,EAAA,EAAAuc,EAAA6R,EAAAnuB,EAAA,EAAAsc,EAAA6R,EAAAqB,EAAA0M,WAAAtP,IAAA,EAAApyB,GAAA,GAAAuF,GAAA,OAAAyvB,EAAA7yB,0BAAAkE,EAAAstB,GAAA,IAAAqB,EAAA,EAAA,IAAA,IAAAxvB,EAAA,EAAAa,EAAAxG,OAAA,EAAA,GAAA2F,EAAAA,IAAAwvB,EAAA,IAAAA,GAAA,GAAA3uB,EAAAu9B,YAAAp+B,MAAA,GAAAmuB,EAAA,OAAAqB,EAAA7yB,0BAAAnC,EAAAqG,EAAAstB,EAAAqB,GAAA,MAAAlT,EAAAzb,EAAAm+B,oBAAAh/B,EAAAa,EAAAxG,OAAA0F,EAAAvF,EAAAwkC,oBAAA1iB,EAAA,IAAA7J,EAAA,KAAA0b,IAAA1b,EAAA,IAAAma,EAAA7sB,EAAA,IAAA,GAAA,GAAA0S,EAAAwpB,sBAAA,MAAA3gB,EAAA,IAAAsR,EAAAtQ,EAAA,IAAA,GAAA,GAAAhB,EAAA2gB,qBAAA,MAAA16B,EAAAqrB,EAAAqS,QAAAp+B,EAAAu9B,YAAA9hB,EAAA,IAAA,EAAA/a,IAAAV,EAAA+rB,EAAAsS,mBAAAr+B,EAAAU,EAAA,IAAA,MAAA4a,EAAAyQ,EAAAsS,mBAAA1kC,EAAA+G,EAAA,GAAA+5B,EAAAz6B,EAAAu9B,YAAA9hB,EAAA,GAAA,IAAAif,EAAA,EAAA,IAAA,IAAAh6B,EAAAkxB,EAAA1yB,EAAA,GAAA0yB,EAAAA,IAAA,CAAAlxB,EAAA,MAAA,MAAA/G,EAAA2hB,EAAAiiB,YAAA3L,EAAAnW,GAAA,GAAA9hB,IAAA8gC,EAAA,CAAA,MAAAnN,GAAA3zB,GAAA,GAAA2hB,EAAAiiB,YAAA3L,EAAAnW,EAAA,MAAA,EAAA/a,EAAA,EAAA4sB,EAAAmN,EAAA,IAAA9L,EAAA,EAAArB,EAAAmN,EAAA,MAAAt7B,EAAAa,EAAAu9B,YAAA9hB,EAAA,GAAAvc,EAAAoc,EAAAiiB,YAAA3L,EAAAnW,EAAA,GAAA,KAAAsQ,EAAAmS,OAAAx9B,EAAAvB,KAAA,GAAAwvB,GAAA,GAAAzvB,KAAA,IAAAwB,IAAAiuB,GAAA8L,IAAA,MAAA9L,OAAA5C,EAAAuS,sBAAAt+B,EAAAU,EAAA,EAAAvB,EAAAsb,GAAA,IAAAkU,EAAArT,EAAAijB,aAAA9jB,EAAAmX,EAAAnW,EAAA,GAAA,IAAAkT,IAAAA,EAAArT,EAAAkjB,aAAAx+B,EAAA4xB,EAAAnW,GAAAH,EAAAkiB,eAAA5L,EAAAnW,EAAA,MAAAH,EAAAiiB,YAAA3L,EAAAnW,GAAAkT,GAAAjuB,KAAA4sB,IAAA,EAAAsE,EAAA8I,EAAAh6B,GAAA,GAAAkR,EAAAypB,WAAAzJ,IAAA,EAAA8I,EAAAh6B,IAAA,GAAAiuB,EAAA,OAAArT,EAAAmjB,oBAAA/9B,GAAA4sB,EAAA,CAAAmQ,SAAA7rB,EAAA8rB,UAAApiB,GAAAA,EAAA,GAAAgS,EAAA,OAAA1b,EAAA,MAAA,IAAAhX,MAAA,eAAAkB,eAAAnC,GAAA,OAAAoyB,EAAAyO,QAAA7gC,GAAA,GAAA6kC,aAAAx+B,EAAAstB,EAAAqB,GAAA,IAAAxvB,EAAA,EAAA,IAAA,IAAAsc,EAAA,EAAAA,EAAAkT,EAAAlT,IAAA,CAAA,MAAA9hB,EAAA1C,KAAAsmC,YAAAjQ,EAAA7R,GAAAzb,EAAAu9B,YAAA9hB,GAAAtc,EAAAA,EAAAxF,IAAA,GAAA1C,KAAAumC,eAAAlQ,EAAA7R,EAAA,MAAA9hB,GAAA,OAAAwF,EAAAo/B,aAAAv+B,EAAAstB,EAAAqB,GAAA,IAAAxvB,EAAA,EAAA,GAAA,EAAAmuB,EAAA,CAAAA,IAAA,EAAA,IAAA7R,EAAAxkB,KAAAsjC,QAAAjN,GAAAvB,EAAA,MAAAtQ,EAAAvc,EAAA,EAAA,KAAAA,EAAAyvB,EAAA,IAAA,EAAAzvB,IAAA,CAAA,MAAAvF,EAAAqG,EAAAu6B,QAAAr7B,GAAAyvB,GAAAlT,IAAA,KAAA,MAAA9hB,GAAAwF,EAAAA,EAAA,EAAAwvB,IAAA,GAAA13B,KAAAokC,WAAA/N,EAAApuB,GAAA,MAAAyvB,IAAA,GAAA,MAAA5C,GAAAtQ,EAAAxkB,KAAAsjC,QAAAjN,EAAApuB,EAAA,GAAA6sB,GAAA,MAAAtQ,IAAA9hB,IAAA,IAAAwF,EAAAA,EAAA,EAAA4sB,IAAA,GAAA,MAAApyB,EAAAqG,EAAAu6B,QAAAr7B,GAAA0S,GAAA6J,IAAA,KAAA,MAAA9hB,GAAAwF,EAAA,GAAAA,EAAA,EAAAyS,IAAA,GAAA3a,KAAAokC,WAAA/N,EAAApuB,GAAA,MAAA0S,IAAA,GAAA,MAAAma,GAAAuB,EAAApuB,EAAA,GAAAjI,KAAAuC,OAAA,MAAA,IAAAkgC,WAAA,iBAAA,IAAA,EAAA/K,KAAAlT,EAAAxkB,KAAAsjC,QAAAjN,EAAApuB,EAAA,GAAA6sB,GAAA,MAAAtQ,IAAA9hB,IAAA,IAAAwF,EAAAA,EAAA,EAAA4sB,IAAA,GAAA90B,KAAAokC,WAAA/N,EAAAttB,EAAAxG,OAAA,WAAAiiB,EAAA,MAAAsQ,QAAA,CAAAuB,IAAA,EAAA,IAAA7R,EAAA,EAAA,KAAAA,EAAAzb,EAAAxG,OAAA,EAAAiiB,IAAA,CAAA,MAAA9hB,EAAA1C,KAAAsjC,QAAAjN,EAAA7R,GAAAkT,EAAA3uB,EAAAu6B,QAAA9e,GAAAsQ,GAAA,MAAApyB,IAAA,MAAAg1B,GAAAxvB,EAAAA,EAAA,EAAA4sB,IAAA,GAAA,MAAA7sB,GAAAvF,IAAA,KAAAg1B,IAAA,IAAAxvB,EAAAA,EAAA,EAAAD,IAAA,GAAAjI,KAAAokC,WAAA/N,EAAA7R,GAAA,MAAAvc,IAAA,GAAA,MAAA6sB,GAAA,MAAApyB,EAAA1C,KAAAsjC,QAAAjN,EAAA7R,GAAAsQ,EAAA/rB,EAAAu6B,QAAA9e,GAAAvc,GAAA,MAAAvF,IAAA,MAAAoyB,GAAA5sB,EAAAA,EAAA,EAAAD,IAAA,GAAA,IAAA0S,EAAA,EAAA,IAAA,EAAA+c,KAAA/c,GAAAjY,IAAA,KAAAoyB,IAAA,IAAA5sB,EAAAA,EAAA,EAAAyS,IAAA,IAAA3a,KAAAokC,WAAA/N,EAAA7R,GAAA,MAAA7J,IAAA,GAAA,MAAA1S,GAAA,OAAAC,EAAAs/B,oBAAAz+B,GAAA,GAAA,IAAAA,EAAA,OAAA,IAAAstB,EAAAr2B,KAAAsjC,QAAA,KAAAv6B,EAAA,MAAA2uB,EAAA13B,KAAAuC,OAAA,EAAA,IAAA,IAAA2F,EAAA,EAAAA,EAAAwvB,EAAAxvB,IAAA,CAAA,MAAAxF,EAAA1C,KAAAsjC,QAAAp7B,EAAA,GAAAlI,KAAAokC,WAAAl8B,EAAA,WAAAxF,GAAA,GAAAqG,EAAAstB,GAAAA,EAAA3zB,IAAAqG,EAAA/I,KAAAokC,WAAA1M,EAAArB,GAAAxxB,0BAAAkE,EAAAstB,EAAAqB,GAAA,MAAAlT,EAAAzb,EAAAxG,OAAA2F,EAAA,IAAA4sB,EAAAtQ,EAAAkT,GAAA,GAAA,GAAA,IAAArB,EAAA,CAAA,IAAA,IAAAA,EAAA,EAAAA,EAAA7R,EAAA6R,IAAAnuB,EAAAk8B,WAAA/N,EAAAttB,EAAAu6B,QAAAjN,IAAA,OAAA,EAAAqB,GAAAxvB,EAAAk8B,WAAA5f,EAAA,GAAAtc,EAAA,IAAAD,EAAA,EAAA,IAAA,IAAA6sB,EAAA,EAAAA,EAAAtQ,EAAAsQ,IAAA,CAAA,MAAApyB,EAAAqG,EAAAu6B,QAAAxO,GAAA5sB,EAAAk8B,WAAAtP,EAAA,WAAApyB,GAAA2zB,EAAApuB,GAAAA,EAAAvF,IAAA,GAAA2zB,EAAA,OAAA,EAAAqB,GAAAxvB,EAAAk8B,WAAA5f,EAAAvc,GAAAC,EAAArD,6BAAAkE,EAAArG,GAAA,MAAA2zB,EAAAvB,EAAA2S,gBAAA/kC,GAAA,GAAA,EAAA2zB,EAAA,MAAA,IAAAoM,WAAA,kBAAA,MAAA/K,EAAA,EAAArB,EAAA,GAAAnuB,EAAAmuB,EAAA,GAAA7R,EAAAzb,EAAAxG,OAAA0F,EAAA,IAAAC,GAAA,GAAAa,EAAAu6B,QAAA9e,EAAA,KAAA,GAAAtc,EAAAyS,EAAA6J,EAAAkT,GAAAzvB,EAAA,EAAA,GAAAub,EAAA,IAAAsR,EAAAna,EAAA5R,EAAAg0B,MAAA,GAAA,IAAA70B,EAAA,CAAA,IAAAmuB,EAAA,EAAA,KAAAA,EAAAqB,EAAArB,IAAA7S,EAAA4gB,WAAA/N,EAAA,GAAA,KAAAA,EAAA1b,EAAA0b,IAAA7S,EAAA4gB,WAAA/N,EAAAttB,EAAAu6B,QAAAjN,EAAAqB,QAAA,CAAA,IAAArB,EAAA,EAAA,IAAA,IAAAttB,EAAA,EAAAA,EAAA2uB,EAAA3uB,IAAAya,EAAA4gB,WAAAr7B,EAAA,GAAA,IAAA,IAAA+rB,EAAA,EAAAA,EAAAtQ,EAAAsQ,IAAA,CAAA,MAAApyB,EAAAqG,EAAAu6B,QAAAxO,GAAAtR,EAAA4gB,WAAAtP,EAAA4C,EAAA,WAAAh1B,GAAAwF,EAAAmuB,GAAAA,EAAA3zB,IAAA,GAAAwF,EAAA,GAAAD,EAAAub,EAAA4gB,WAAA5f,EAAAkT,EAAArB,QAAA,GAAA,IAAAA,EAAA,MAAA,IAAA1yB,MAAA,sBAAA,OAAA6f,EAAAugB,SAAAl/B,8BAAAkE,EAAArG,GAAA,MAAA2zB,EAAAttB,EAAAxG,OAAAm1B,EAAA3uB,EAAAg0B,KAAA70B,EAAA4sB,EAAA2S,gBAAA/kC,GAAA,GAAA,EAAAwF,EAAA,OAAA4sB,EAAA4S,sBAAAhQ,GAAA,MAAAlT,EAAA,EAAAtc,EAAA,GAAAD,EAAAC,EAAA,GAAA,IAAAyS,EAAA0b,EAAA7R,EAAA,GAAA,GAAA7J,EAAA,OAAAma,EAAA4S,sBAAAhQ,GAAA,IAAAlU,GAAA,EAAA,GAAAkU,EAAA,GAAA,IAAA3uB,EAAAu6B,QAAA9e,IAAA,GAAAvc,GAAA,GAAAub,GAAA,OAAA,IAAA,IAAA6S,EAAA,EAAAA,EAAA7R,EAAA6R,IAAA,GAAA,IAAAttB,EAAAu6B,QAAAjN,GAAA,CAAA7S,GAAA,EAAA,MAAAA,GAAA,IAAAvb,GAAA,IAAAc,EAAAu6B,QAAAjN,EAAA,IAAA1b,IAAA,IAAAlR,EAAA,IAAAqrB,EAAAna,EAAA+c,GAAA,GAAA,IAAAzvB,EAAA,CAAAwB,EAAA26B,WAAAzpB,EAAA,EAAA,GAAA,IAAA,IAAA+c,EAAAlT,EAAAkT,EAAArB,EAAAqB,IAAAjuB,EAAA26B,WAAA1M,EAAAlT,EAAAzb,EAAAu6B,QAAA5L,QAAA,CAAA,IAAAA,EAAA3uB,EAAAu6B,QAAA9e,KAAAvc,EAAA,MAAAC,EAAAmuB,EAAA7R,EAAA,EAAA,IAAA,IAAA6R,EAAA,EAAAA,EAAAnuB,EAAAmuB,IAAA,CAAA,MAAA3zB,EAAAqG,EAAAu6B,QAAAjN,EAAA7R,EAAA,GAAA/a,EAAA26B,WAAA/N,EAAA,WAAA3zB,GAAA,GAAAuF,EAAAyvB,GAAAA,EAAAh1B,IAAAuF,EAAAwB,EAAA26B,WAAAl8B,EAAAwvB,GAAA,OAAAlU,IAAA/Z,EAAAqrB,EAAAkP,iBAAAv6B,GAAA,EAAAA,IAAAA,EAAAs6B,SAAAl/B,6BAAAnC,GAAA,OAAAA,EAAAoyB,EAAA+N,WAAA,GAAA,GAAA/N,EAAA6N,SAAA99B,uBAAAnC,GAAA,GAAA,EAAAA,EAAAH,OAAA,OAAA,EAAA,MAAAwG,EAAArG,EAAA2gC,gBAAA,GAAA,OAAAt6B,EAAA+rB,EAAAoP,kBAAA,EAAAn7B,EAAAlE,qBAAAnC,EAAAqG,EAAA,WAAA,GAAA,iBAAArG,EAAA,OAAAA,EAAA,GAAAA,EAAAsB,cAAA8wB,EAAA,OAAApyB,EAAA,MAAA2zB,EAAA3zB,EAAA2Y,OAAAssB,aAAA,GAAAtR,EAAA,CAAA,MAAA3zB,EAAA2zB,EAAAttB,GAAA,GAAA,iBAAArG,EAAA,OAAAA,EAAA,MAAA,IAAAmrB,UAAA,4CAAA,MAAA6J,EAAAh1B,EAAAg2B,QAAA,GAAAhB,EAAA,CAAA,MAAA3uB,EAAA2uB,EAAA/lB,KAAAjP,GAAA,GAAA,iBAAAqG,EAAA,OAAAA,EAAA,MAAAb,EAAAxF,EAAAO,SAAA,GAAAiF,EAAA,CAAA,MAAAa,EAAAb,EAAAyJ,KAAAjP,GAAA,GAAA,iBAAAqG,EAAA,OAAAA,EAAA,MAAA,IAAA8kB,UAAA,4CAAAhpB,mBAAAnC,GAAA,OAAAoyB,EAAA0Q,WAAA9iC,GAAAA,GAAAA,EAAAmC,kBAAAnC,GAAA,MAAA,iBAAAA,GAAA,OAAAA,GAAAA,EAAAsB,cAAA8wB,EAAAjwB,yBAAAnC,EAAAqG,GAAA,MAAAstB,EAAA,GAAA3zB,EAAA,IAAA,GAAAg1B,EAAA,IAAA5C,EAAAuB,EAAAttB,EAAAg0B,MAAA70B,EAAAmuB,EAAA,EAAA,IAAA,IAAAA,EAAA,EAAAA,EAAAnuB,EAAAmuB,IAAAqB,EAAA0M,WAAA/N,EAAAttB,EAAAu6B,QAAAjN,IAAA,IAAA7R,EAAAzb,EAAAu6B,QAAAp7B,GAAA,GAAA,GAAAxF,EAAA,GAAA,CAAA,MAAAqG,EAAA,GAAArG,EAAA,GAAA8hB,EAAAA,GAAAzb,IAAAA,EAAA,OAAA2uB,EAAA0M,WAAAl8B,EAAAsc,GAAAkT,EAAAqM,SAAAl/B,sCAAAkE,EAAAstB,EAAAqB,GAAA,IAAAxvB,EAAA1B,KAAA4G,IAAA,MAAAoX,EAAA,GAAAzb,EAAA,IAAA,GAAAd,EAAA,IAAA6sB,EAAAtQ,EAAAkT,GAAA,IAAA/c,EAAA,EAAA,MAAA6I,EAAAgB,EAAA,EAAA,IAAA/a,EAAA,EAAA,IAAA,MAAA/G,EAAAwF,EAAAsb,EAAA6S,EAAA9zB,QAAAoY,EAAAjY,EAAAiY,IAAA,CAAA,MAAAjY,EAAA,EAAA2zB,EAAAiN,QAAA3oB,GAAAlR,EAAAA,EAAA,EAAA/G,IAAA,GAAAuF,EAAAm8B,WAAAzpB,EAAA,WAAAjY,GAAA,KAAAiY,EAAA6I,EAAA7I,IAAA1S,EAAAm8B,WAAAzpB,EAAA,EAAA,YAAAlR,GAAA,IAAA+5B,EAAAhgB,EAAA6S,EAAA9zB,OAAA8zB,EAAAiN,QAAA9f,GAAA,EAAA,MAAAa,EAAAtb,EAAA,GAAA,IAAA06B,EAAA,GAAA,GAAApf,EAAAof,EAAA,EAAAD,EAAA/5B,EAAAg6B,GAAA,eAAA,CAAA,MAAA/gC,EAAA,GAAA2hB,EAAAmf,EAAAA,GAAA9gC,IAAAA,EAAA,MAAAqG,EAAA,GAAA,GAAArG,EAAA+gC,EAAA16B,EAAAy6B,EAAA/5B,EAAAg6B,GAAA16B,EAAA,EAAA,OAAAd,EAAAm8B,WAAA5gB,EAAAigB,GAAAx7B,EAAA87B,SAAAT,QAAAv6B,GAAA,OAAA/I,KAAA+I,GAAAs6B,gBAAAt6B,GAAA,OAAA/I,KAAA+I,KAAA,EAAAq7B,WAAAr7B,EAAArG,GAAA1C,KAAA+I,GAAA,EAAArG,EAAAskC,eAAAj+B,EAAArG,GAAA1C,KAAA+I,GAAA,EAAArG,EAAAwkC,oBAAA,MAAAxkC,EAAA1C,KAAAuC,OAAA,OAAA,OAAAvC,KAAAqjC,gBAAA3gC,EAAA,GAAA,EAAAA,EAAA,EAAA,EAAAA,EAAA4jC,YAAAv9B,GAAA,OAAA,MAAA/I,KAAA+I,IAAA,KAAA,IAAA,EAAAA,GAAAw9B,eAAAx9B,EAAArG,GAAA,MAAA2zB,EAAAttB,IAAA,EAAA2uB,EAAA13B,KAAAsjC,QAAAjN,GAAAnuB,EAAA,EAAAa,EAAA,MAAA2uB,EAAAh1B,GAAA,GAAA,WAAAg1B,EAAA,MAAAh1B,EAAA1C,KAAAokC,WAAA/N,EAAAnuB,GAAArD,kBAAAnC,EAAAqG,GAAA,IAAAstB,EAAA,EAAA,KAAA,EAAAttB,GAAA,EAAAA,IAAAstB,GAAA3zB,GAAAqG,KAAA,EAAArG,GAAAA,EAAA,OAAA2zB,EAAAxxB,uBAAAnC,GAAA,OAAA,WAAAA,KAAAA,GAAAoyB,EAAA0N,aAAA,SAAA1N,EAAAoP,iBAAApP,EAAA0N,cAAA,EAAA1N,EAAAgR,kBAAA,CAAA,EAAA,EAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,GAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAAhR,EAAAkR,yBAAA,EAAAlR,EAAAiR,8BAAA,GAAAjR,EAAAkR,yBAAAlR,EAAAsR,mBAAA,CAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,IAAA,KAAAtR,EAAA8S,uBAAA,IAAAl/B,YAAA,GAAAosB,EAAA8O,uBAAA,IAAAiE,aAAA/S,EAAA8S,wBAAA9S,EAAA6O,qBAAA,IAAAmE,WAAAhT,EAAA8S,wBAAA9S,EAAAyO,QAAAx6B,EAAA,SAAArG,GAAA,OAAAqG,EAAArG,GAAA,GAAA,SAAAA,GAAA,OAAA,IAAAA,EAAA,GAAA,EAAA,IAAA,EAAA8D,KAAAuhC,IAAArlC,IAAA,GAAA8D,KAAAwhC,MAAAlT,EAAAmS,OAAAzgC,KAAAyhC,MAAA,SAAAvlC,EAAAqG,GAAA,OAAA,EAAArG,EAAAqG,GAAArG,EAAAvC,QAAA20B,EAAA10B,OAAAC,eAAAqC,EAAA,aAAA,CAAAnC,OAAA,KAAA,iBAAAD,QAAA,IAAAoN,EAAA3E,EAAAzI,GAAA,mBAAA4mB,QAAAA,OAAAC,IAAAD,OAAA,CAAA,WAAAne,GAAAA,GAAArG,EAAAA,GAAAoS,MAAAozB,KAAA,wPCEA9nC,OAAAC,eAAAC,EAAA,aAAA,CACAC,OAAA,IAGA,IAAA4nC,EAAA1nC,EAAA,UAIA2nC,EAAAC,EAFA5nC,EAAA,oBAMA6nC,EAAAD,EAFA5nC,EAAA,iBAIA,SAAA4nC,EAAAh0B,GAAA,OAAAA,GAAAA,EAAAnU,WAAAmU,EAAA,CAAAlU,QAAAkU,GAIA,IAAAk0B,EAAA,CAAA,EAAA,MAAA,MAAA,IAAA,MAAA,IAAA,IAAA,MAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,KAAA,MAAA,MAAA,KAAA,MAAA,KAAA,KAAA,MAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,KAAA,MAAA,MAAA,IAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,MAAA,KAAA,KAAA,MAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,KAAA,MAAA,MAAA,KAAA,MAAA,KAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OAEA,oBAAAT,aAAAS,EAAA,IAAAT,WAAAS,IAEA,IAAA7hB,GAAA,EAAA4hB,EAAAnoC,SAAA,UAAA,SAAA2xB,EAAA0W,GACAL,EAAAhnC,OAAA6D,SAAA8sB,KAAAA,GAAA,EAAAsW,EAAAjoC,SAAA2xB,IAIA,IAFA,IAAA2W,IAAAD,EAEA1nC,EAAA,EAAAA,EAAAgxB,EAAAvvB,OAAAzB,IAAA,CACA,IAAA4nC,EAAA5W,EAAAhxB,GACA2nC,EAAA,OAAAF,EAAA,KAAAE,EAAAC,IAAAD,GAAA,GAGA,OAAAA,KAGAnoC,EAAAH,QAAAumB,qPCnCAtmB,OAAAC,eAAAC,EAAA,aAAA,CACAC,OAAA,IAGA,IAAA4nC,EAAA1nC,EAAA,UAIA2nC,EAAAC,EAFA5nC,EAAA,oBAMA6nC,EAAAD,EAFA5nC,EAAA,iBAIA,SAAA4nC,EAAAh0B,GAAA,OAAAA,GAAAA,EAAAnU,WAAAmU,EAAA,CAAAlU,QAAAkU,GAIA,IAAAkoBAAAT,aAAAS,EAAA,IAAAT,WAAAS,IAEA,IAAA/hB,GAAA,EAAA8hB,EAAAnoC,SAAA,SAAA,SAAA2xB,EAAA0W,GACAL,EAAAhnC,OAAA6D,SAAA8sB,KAAAA,GAAA,EAAAsW,EAAAjoC,SAAA2xB,IAIA,IAFA,IAAA2W,IAAAD,EAEA1nC,EAAA,EAAAA,EAAAgxB,EAAAvvB,OAAAzB,IAAA,CACA,IAAA4nC,EAAA5W,EAAAhxB,GACA2nC,EAAA,IAAAF,EAAA,KAAAE,EAAAC,IAGA,OAAAD,KAGAnoC,EAAAH,QAAAqmB,oPCnCApmB,OAAAC,eAAAC,EAAA,aAAA,CACAC,OAAA,IAGA,IAAA4nC,EAAA1nC,EAAA,UAIA2nC,EAAAC,EAFA5nC,EAAA,oBAMA6nC,EAAAD,EAFA5nC,EAAA,iBAIA,SAAA4nC,EAAAh0B,GAAA,OAAAA,GAAAA,EAAAnU,WAAAmU,EAAA,CAAAlU,QAAAkU,GAIA,IAAAk0B,EAAA,CAAA,EAAA,MAAA,MAAA,IAAA,MAAA,IAAA,IAAA,MAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,KAAA,MAAA,MAAA,KAAA,MAAA,KAAA,KAAA,MAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,KAAA,MAAA,MAAA,IAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,MAAA,KAAA,KAAA,MAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,KAAA,KAAA,MAAA,KAAA,MAAA,MAAA,KAAA,KAAA,MAAA,MAAA,KAAA,MAAA,KAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,KAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,OAEA,oBAAAT,aAAAS,EAAA,IAAAT,WAAAS,IAEA,IAAA3hB,GAAA,EAAA0hB,EAAAnoC,SAAA,iBAAA,SAAA2xB,EAAA0W,GACAL,EAAAhnC,OAAA6D,SAAA8sB,KAAAA,GAAA,EAAAsW,EAAAjoC,SAAA2xB,IAIA,IAFA,IAAA2W,OAAA,IAAAD,IAAAA,EAAA,MAEA1nC,EAAA,EAAAA,EAAAgxB,EAAAvvB,OAAAzB,IAAA,CACA,IAAA4nC,EAAA5W,EAAAhxB,GACA2nC,EAAA,OAAAF,EAAA,KAAAE,EAAAC,IAAAD,GAAA,GAGA,OAAAA,KAGAnoC,EAAAH,QAAAymB,2PCnCAxmB,OAAAC,eAAAC,EAAA,aAAA,CACAC,OAAA,IAGA,IAAA4nC,EAAA1nC,EAAA,UAIA2nC,EAAAC,EAFA5nC,EAAA,oBAMA6nC,EAAAD,EAFA5nC,EAAA,iBAIA,SAAA4nC,EAAAh0B,GAAA,OAAAA,GAAAA,EAAAnU,WAAAmU,EAAA,CAAAlU,QAAAkU,GAIA,IAAAkoBAAAT,aAAAS,EAAA,IAAAT,WAAAS,IAEA,IAAA5hB,GAAA,EAAA2hB,EAAAnoC,SAAA,SAAA,SAAA2xB,EAAA0W,GACAL,EAAAhnC,OAAA6D,SAAA8sB,KAAAA,GAAA,EAAAsW,EAAAjoC,SAAA2xB,IAIA,IAFA,IAAA2W,OAAA,IAAAD,IAAAA,EAAA,MAEA1nC,EAAA,EAAAA,EAAAgxB,EAAAvvB,OAAAzB,IAAA,CACA,IAAA4nC,EAAA5W,EAAAhxB,GACA2nC,EAAA,OAAAF,EAAA,KAAAE,GAAA,EAAAC,IAAAD,GAAA,GAGA,OAAAA,KAGAnoC,EAAAH,QAAAwmB,0PCnCAvmB,OAAAC,eAAAC,EAAA,aAAA,CACAC,OAAA,IAGA,IAAA4nC,EAAA1nC,EAAA,UAIA2nC,EAAAC,EAFA5nC,EAAA,oBAMA6nC,EAAAD,EAFA5nC,EAAA,iBAIA,SAAA4nC,EAAAh0B,GAAA,OAAAA,GAAAA,EAAAnU,WAAAmU,EAAA,CAAAlU,QAAAkU,GAIA,IAAAk0B,EAAA,CAAA,EAAA,QAAA,QAAA,OAAA,QAAA,QAAA,QAAA,SAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,OAAA,QAAA,QAAA,MAAA,SAAA,QAAA,QAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,QAAA,QAAA,QAAA,OAAA,MAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,QAAA,MAAA,OAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,QAAA,QAAA,SAAA,MAAA,QAAA,QAAA,OAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,SAAA,QAAA,QAAA,QAAA,OAAA,QAAA,QAAA,MAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,OAAA,OAAA,QAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,OAAA,OAAA,QAAA,QAAA,QAAA,SAAA,QAAA,SAAA,QAAA,QAAA,SAAA,QAAA,SAAA,SAAA,QAAA,QAAA,SAAA,SAAA,QAAA,SAAA,QAAA,QAAA,UAE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","file":"../PintNFTWalletExtension/common-6.js","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst assert_1 = __importDefault(require(\"assert\"));\nconst utils_1 = require(\"./utils\");\nconst bytewords = 'ableacidalsoapexaquaarchatomauntawayaxisbackbaldbarnbeltbetabiasbluebodybragbrewbulbbuzzcalmcashcatschefcityclawcodecolacookcostcruxcurlcuspcyandarkdatadaysdelidicedietdoordowndrawdropdrumdulldutyeacheasyechoedgeepicevenexamexiteyesfactfairfernfigsfilmfishfizzflapflewfluxfoxyfreefrogfuelfundgalagamegeargemsgiftgirlglowgoodgraygrimgurugushgyrohalfhanghardhawkheathelphighhillholyhopehornhutsicedideaidleinchinkyintoirisironitemjadejazzjoinjoltjowljudojugsjumpjunkjurykeepkenokeptkeyskickkilnkingkitekiwiknoblamblavalazyleaflegsliarlimplionlistlogoloudloveluaulucklungmainmanymathmazememomenumeowmildmintmissmonknailnavyneednewsnextnoonnotenumbobeyoboeomitonyxopenovalowlspaidpartpeckplaypluspoempoolposepuffpumapurrquadquizraceramprealredorichroadrockroofrubyruinrunsrustsafesagascarsetssilkskewslotsoapsolosongstubsurfswantacotasktaxitenttiedtimetinytoiltombtoystriptunatwinuglyundouniturgeuservastveryvetovialvibeviewvisavoidvowswallwandwarmwaspwavewaxywebswhatwhenwhizwolfworkyankyawnyellyogayurtzapszerozestzinczonezoom';\nlet bytewordsLookUpTable = [];\nconst BYTEWORDS_NUM = 256;\nconst BYTEWORD_LENGTH = 4;\nconst MINIMAL_BYTEWORD_LENGTH = 2;\nvar STYLES;\n(function (STYLES) {\n    STYLES[\"STANDARD\"] = \"standard\";\n    STYLES[\"URI\"] = \"uri\";\n    STYLES[\"MINIMAL\"] = \"minimal\";\n})(STYLES || (STYLES = {}));\nconst getWord = (index) => {\n    return bytewords.slice(index * BYTEWORD_LENGTH, (index * BYTEWORD_LENGTH) + BYTEWORD_LENGTH);\n};\nconst getMinimalWord = (index) => {\n    const byteword = getWord(index);\n    return `${byteword[0]}${byteword[BYTEWORD_LENGTH - 1]}`;\n};\nconst addCRC = (string) => {\n    const crc = utils_1.getCRCHex(Buffer.from(string, 'hex'));\n    return `${string}${crc}`;\n};\nconst encodeWithSeparator = (word, separator) => {\n    const crcAppendedWord = addCRC(word);\n    const crcWordBuff = Buffer.from(crcAppendedWord, 'hex');\n    const result = crcWordBuff.reduce((result, w) => ([...result, getWord(w)]), []);\n    return result.join(separator);\n};\nconst encodeMinimal = (word) => {\n    const crcAppendedWord = addCRC(word);\n    const crcWordBuff = Buffer.from(crcAppendedWord, 'hex');\n    const result = crcWordBuff.reduce((result, w) => result + getMinimalWord(w), '');\n    return result;\n};\nconst decodeWord = (word, wordLength) => {\n    assert_1.default(word.length === wordLength, 'Invalid Bytewords: word.length does not match wordLength provided');\n    const dim = 26;\n    // Since the first and last letters of each Byteword are unique,\n    // we can use them as indexes into a two-dimensional lookup table.\n    // This table is generated lazily.\n    if (bytewordsLookUpTable.length === 0) {\n        const array_len = dim * dim;\n        bytewordsLookUpTable = [...new Array(array_len)].map(() => -1);\n        for (let i = 0; i < BYTEWORDS_NUM; i++) {\n            const byteword = getWord(i);\n            let x = byteword[0].charCodeAt(0) - 'a'.charCodeAt(0);\n            let y = byteword[3].charCodeAt(0) - 'a'.charCodeAt(0);\n            let offset = y * dim + x;\n            bytewordsLookUpTable[offset] = i;\n        }\n    }\n    // If the coordinates generated by the first and last letters are out of bounds,\n    // or the lookup table contains -1 at the coordinates, then the word is not valid.\n    let x = (word[0]).toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0);\n    let y = (word[wordLength == 4 ? 3 : 1]).toLowerCase().charCodeAt(0) - 'a'.charCodeAt(0);\n    assert_1.default(0 <= x && x < dim && 0 <= y && y < dim, 'Invalid Bytewords: invalid word');\n    let offset = y * dim + x;\n    let value = bytewordsLookUpTable[offset];\n    assert_1.default(value !== -1, 'Invalid Bytewords: value not in lookup table');\n    // If we're decoding a full four-letter word, verify that the two middle letters are correct.\n    if (wordLength == BYTEWORD_LENGTH) {\n        const byteword = getWord(value);\n        let c1 = word[1].toLowerCase();\n        let c2 = word[2].toLowerCase();\n        assert_1.default(c1 === byteword[1] && c2 === byteword[2], 'Invalid Bytewords: invalid middle letters of word');\n    }\n    // Successful decode.\n    return Buffer.from([value]).toString('hex');\n};\nconst _decode = (string, separator, wordLength) => {\n    const words = wordLength == BYTEWORD_LENGTH ? string.split(separator) : utils_1.partition(string, 2);\n    const decodedString = words.map((word) => decodeWord(word, wordLength)).join('');\n    assert_1.default(decodedString.length >= 5, 'Invalid Bytewords: invalid decoded string length');\n    const [body, bodyChecksum] = utils_1.split(Buffer.from(decodedString, 'hex'), 4);\n    const checksum = utils_1.getCRCHex(body); // convert to hex\n    assert_1.default(checksum === bodyChecksum.toString('hex'), 'Invalid Checksum');\n    return body.toString('hex');\n};\nconst decode = (string, style = STYLES.MINIMAL) => {\n    switch (style) {\n        case STYLES.STANDARD:\n            return _decode(string, ' ', BYTEWORD_LENGTH);\n        case STYLES.URI:\n            return _decode(string, '-', BYTEWORD_LENGTH);\n        case STYLES.MINIMAL:\n            return _decode(string, '', MINIMAL_BYTEWORD_LENGTH);\n        default:\n            throw new Error(`Invalid style ${style}`);\n    }\n};\nconst encode = (string, style = STYLES.MINIMAL) => {\n    switch (style) {\n        case STYLES.STANDARD:\n            return encodeWithSeparator(string, ' ');\n        case STYLES.URI:\n            return encodeWithSeparator(string, '-');\n        case STYLES.MINIMAL:\n            return encodeMinimal(string);\n        default:\n            throw new Error(`Invalid style ${style}`);\n    }\n};\nexports.default = {\n    decode,\n    encode,\n    STYLES\n};\n//# sourceMappingURL=bytewords.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FountainEncoderPart = void 0;\nconst assert_1 = __importDefault(require(\"assert\"));\nconst utils_1 = require(\"./utils\");\nconst fountainUtils_1 = require(\"./fountainUtils\");\nconst cbor_1 = require(\"./cbor\");\nclass FountainEncoderPart {\n    constructor(_seqNum, _seqLength, _messageLength, _checksum, _fragment) {\n        this._seqNum = _seqNum;\n        this._seqLength = _seqLength;\n        this._messageLength = _messageLength;\n        this._checksum = _checksum;\n        this._fragment = _fragment;\n    }\n    get messageLength() { return this._messageLength; }\n    get fragment() { return this._fragment; }\n    get seqNum() { return this._seqNum; }\n    get seqLength() { return this._seqLength; }\n    get checksum() { return this._checksum; }\n    cbor() {\n        const result = cbor_1.cborEncode([\n            this._seqNum,\n            this._seqLength,\n            this._messageLength,\n            this._checksum,\n            this._fragment\n        ]);\n        return Buffer.from(result);\n    }\n    description() {\n        return `seqNum:${this._seqNum}, seqLen:${this._seqLength}, messageLen:${this._messageLength}, checksum:${this._checksum}, data:${this._fragment.toString('hex')}`;\n    }\n    static fromCBOR(cborPayload) {\n        const [seqNum, seqLength, messageLength, checksum, fragment,] = cbor_1.cborDecode(cborPayload);\n        assert_1.default(typeof seqNum === 'number');\n        assert_1.default(typeof seqLength === 'number');\n        assert_1.default(typeof messageLength === 'number');\n        assert_1.default(typeof checksum === 'number');\n        assert_1.default(Buffer.isBuffer(fragment) && fragment.length > 0);\n        return new FountainEncoderPart(seqNum, seqLength, messageLength, checksum, Buffer.from(fragment));\n    }\n}\nexports.FountainEncoderPart = FountainEncoderPart;\nclass FountainEncoder {\n    constructor(message, maxFragmentLength = 100, firstSeqNum = 0, minFragmentLength = 10) {\n        const fragmentLength = FountainEncoder.findNominalFragmentLength(message.length, minFragmentLength, maxFragmentLength);\n        this._messageLength = message.length;\n        this._fragments = FountainEncoder.partitionMessage(message, fragmentLength);\n        this.fragmentLength = fragmentLength;\n        this.seqNum = utils_1.toUint32(firstSeqNum);\n        this.checksum = utils_1.getCRC(message);\n    }\n    get fragmentsLength() { return this._fragments.length; }\n    get fragments() { return this._fragments; }\n    get messageLength() { return this._messageLength; }\n    isComplete() {\n        return this.seqNum >= this._fragments.length;\n    }\n    isSinglePart() {\n        return this._fragments.length === 1;\n    }\n    seqLength() {\n        return this._fragments.length;\n    }\n    mix(indexes) {\n        return indexes.reduce((result, index) => utils_1.bufferXOR(this._fragments[index], result), Buffer.alloc(this.fragmentLength, 0));\n    }\n    nextPart() {\n        this.seqNum = utils_1.toUint32(this.seqNum + 1);\n        const indexes = fountainUtils_1.chooseFragments(this.seqNum, this._fragments.length, this.checksum);\n        const mixed = this.mix(indexes);\n        return new FountainEncoderPart(this.seqNum, this._fragments.length, this._messageLength, this.checksum, mixed);\n    }\n    static findNominalFragmentLength(messageLength, minFragmentLength, maxFragmentLength) {\n        assert_1.default(messageLength > 0);\n        assert_1.default(minFragmentLength > 0);\n        assert_1.default(maxFragmentLength >= minFragmentLength);\n        const maxFragmentCount = Math.ceil(messageLength / minFragmentLength);\n        let fragmentLength = 0;\n        for (let fragmentCount = 1; fragmentCount <= maxFragmentCount; fragmentCount++) {\n            fragmentLength = Math.ceil(messageLength / fragmentCount);\n            if (fragmentLength <= maxFragmentLength) {\n                break;\n            }\n        }\n        return fragmentLength;\n    }\n    static partitionMessage(message, fragmentLength) {\n        let remaining = Buffer.from(message);\n        let fragment;\n        let _fragments = [];\n        while (remaining.length > 0) {\n            [fragment, remaining] = utils_1.split(remaining, -fragmentLength);\n            fragment = Buffer\n                .alloc(fragmentLength, 0) // initialize with 0's to achieve the padding\n                .fill(fragment, 0, fragment.length);\n            _fragments.push(fragment);\n        }\n        return _fragments;\n    }\n}\nexports.default = FountainEncoder;\n//# sourceMappingURL=fountainEncoder.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InvalidChecksumError = exports.InvalidSequenceComponentError = exports.InvalidTypeError = exports.InvalidPathLengthError = exports.InvalidSchemeError = void 0;\nclass InvalidSchemeError extends Error {\n    constructor() {\n        super('Invalid Scheme');\n        this.name = 'InvalidSchemeError';\n    }\n}\nexports.InvalidSchemeError = InvalidSchemeError;\nclass InvalidPathLengthError extends Error {\n    constructor() {\n        super('Invalid Path');\n        this.name = 'InvalidPathLengthError';\n    }\n}\nexports.InvalidPathLengthError = InvalidPathLengthError;\nclass InvalidTypeError extends Error {\n    constructor() {\n        super('Invalid Type');\n        this.name = 'InvalidTypeError';\n    }\n}\nexports.InvalidTypeError = InvalidTypeError;\nclass InvalidSequenceComponentError extends Error {\n    constructor() {\n        super('Invalid Sequence Component');\n        this.name = 'InvalidSequenceComponentError';\n    }\n}\nexports.InvalidSequenceComponentError = InvalidSequenceComponentError;\nclass InvalidChecksumError extends Error {\n    constructor() {\n        super('Invalid Checksum');\n        this.name = 'InvalidChecksumError';\n    }\n}\nexports.InvalidChecksumError = InvalidChecksumError;\n//# sourceMappingURL=errors.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bufferXOR = exports.setDifference = exports.arrayContains = exports.arraysEqual = exports.hasPrefix = exports.isURType = exports.intToBytes = exports.toUint32 = exports.getCRCHex = exports.getCRC = exports.split = exports.partition = exports.sha256Hash = void 0;\nconst sha_js_1 = __importDefault(require(\"sha.js\"));\nconst crc_1 = require(\"crc\");\nconst sha256Hash = (data) => sha_js_1.default('sha256').update(data).digest();\nexports.sha256Hash = sha256Hash;\nconst partition = (s, n) => s.match(new RegExp('.{1,' + n + '}', 'g')) || [s];\nexports.partition = partition;\nconst split = (s, length) => [s.slice(0, -length), s.slice(-length)];\nexports.split = split;\nconst getCRC = (message) => crc_1.crc32(message);\nexports.getCRC = getCRC;\nconst getCRCHex = (message) => crc_1.crc32(message).toString(16).padStart(8, '0');\nexports.getCRCHex = getCRCHex;\nconst toUint32 = (number) => number >>> 0;\nexports.toUint32 = toUint32;\nconst intToBytes = (num) => {\n    const arr = new ArrayBuffer(4); // an Int32 takes 4 bytes\n    const view = new DataView(arr);\n    view.setUint32(0, num, false); // byteOffset = 0; litteEndian = false\n    return Buffer.from(arr);\n};\nexports.intToBytes = intToBytes;\nconst isURType = (type) => {\n    return type.split('').every((_, index) => {\n        let c = type.charCodeAt(index);\n        if ('a'.charCodeAt(0) <= c && c <= 'z'.charCodeAt(0))\n            return true;\n        if ('0'.charCodeAt(0) <= c && c <= '9'.charCodeAt(0))\n            return true;\n        if (c === '-'.charCodeAt(0))\n            return true;\n        return false;\n    });\n};\nexports.isURType = isURType;\nconst hasPrefix = (s, prefix) => s.indexOf(prefix) === 0;\nexports.hasPrefix = hasPrefix;\nconst arraysEqual = (ar1, ar2) => {\n    if (ar1.length !== ar2.length) {\n        return false;\n    }\n    return ar1.every(el => ar2.includes(el));\n};\nexports.arraysEqual = arraysEqual;\n/**\n * Checks if ar1 contains all elements of ar2\n * @param ar1 the outer array\n * @param ar2 the array to be contained in ar1\n */\nconst arrayContains = (ar1, ar2) => {\n    return ar2.every(v => ar1.includes(v));\n};\nexports.arrayContains = arrayContains;\n/**\n * Returns the difference array of  `ar1` - `ar2`\n */\nconst setDifference = (ar1, ar2) => {\n    return ar1.filter(x => ar2.indexOf(x) < 0);\n};\nexports.setDifference = setDifference;\nconst bufferXOR = (a, b) => {\n    const length = Math.max(a.length, b.length);\n    const buffer = Buffer.allocUnsafe(length);\n    for (let i = 0; i < length; ++i) {\n        buffer[i] = a[i] ^ b[i];\n    }\n    return buffer;\n};\nexports.bufferXOR = bufferXOR;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FountainDecoderPart = void 0;\nconst utils_1 = require(\"./utils\");\nconst fountainUtils_1 = require(\"./fountainUtils\");\nconst errors_1 = require(\"./errors\");\nclass FountainDecoderPart {\n    constructor(_indexes, _fragment) {\n        this._indexes = _indexes;\n        this._fragment = _fragment;\n    }\n    get indexes() { return this._indexes; }\n    get fragment() { return this._fragment; }\n    static fromEncoderPart(encoderPart) {\n        const indexes = fountainUtils_1.chooseFragments(encoderPart.seqNum, encoderPart.seqLength, encoderPart.checksum);\n        const fragment = encoderPart.fragment;\n        return new FountainDecoderPart(indexes, fragment);\n    }\n    isSimple() {\n        return this.indexes.length === 1;\n    }\n}\nexports.FountainDecoderPart = FountainDecoderPart;\nclass FountainDecoder {\n    constructor() {\n        this.result = undefined;\n        this.expectedMessageLength = 0;\n        this.expectedChecksum = 0;\n        this.expectedFragmentLength = 0;\n        this.processedPartsCount = 0;\n        this.expectedPartIndexes = [];\n        this.lastPartIndexes = [];\n        this.queuedParts = [];\n        this.receivedPartIndexes = [];\n        this.mixedParts = [];\n        this.simpleParts = [];\n    }\n    validatePart(part) {\n        // If this is the first part we've seen\n        if (this.expectedPartIndexes.length === 0) {\n            // Record the things that all the other parts we see will have to match to be valid.\n            [...new Array(part.seqLength)]\n                .forEach((_, index) => this.expectedPartIndexes.push(index));\n            this.expectedMessageLength = part.messageLength;\n            this.expectedChecksum = part.checksum;\n            this.expectedFragmentLength = part.fragment.length;\n        }\n        else {\n            // If this part's values don't match the first part's values, throw away the part\n            if (this.expectedPartIndexes.length !== part.seqLength) {\n                return false;\n            }\n            if (this.expectedMessageLength !== part.messageLength) {\n                return false;\n            }\n            if (this.expectedChecksum !== part.checksum) {\n                return false;\n            }\n            if (this.expectedFragmentLength !== part.fragment.length) {\n                return false;\n            }\n        }\n        // This part should be processed\n        return true;\n    }\n    reducePartByPart(a, b) {\n        // If the fragments mixed into `b` are a strict (proper) subset of those in `a`...\n        if (utils_1.arrayContains(a.indexes, b.indexes)) {\n            const newIndexes = utils_1.setDifference(a.indexes, b.indexes);\n            const newFragment = utils_1.bufferXOR(a.fragment, b.fragment);\n            return new FountainDecoderPart(newIndexes, newFragment);\n        }\n        else {\n            // `a` is not reducable by `b`, so return a\n            return a;\n        }\n    }\n    reduceMixedBy(part) {\n        const newMixed = [];\n        this.mixedParts\n            .map(({ value: mixedPart }) => this.reducePartByPart(mixedPart, part))\n            .forEach(reducedPart => {\n            if (reducedPart.isSimple()) {\n                this.queuedParts.push(reducedPart);\n            }\n            else {\n                newMixed.push({ key: reducedPart.indexes, value: reducedPart });\n            }\n        });\n        this.mixedParts = newMixed;\n    }\n    processSimplePart(part) {\n        // Don't process duplicate parts\n        const fragmentIndex = part.indexes[0];\n        if (this.receivedPartIndexes.includes(fragmentIndex)) {\n            return;\n        }\n        this.simpleParts.push({ key: part.indexes, value: part });\n        this.receivedPartIndexes.push(fragmentIndex);\n        // If we've received all the parts\n        if (utils_1.arraysEqual(this.receivedPartIndexes, this.expectedPartIndexes)) {\n            // Reassemble the message from its fragments\n            const sortedParts = this.simpleParts\n                .map(({ value }) => value)\n                .sort((a, b) => (a.indexes[0] - b.indexes[0]));\n            const message = FountainDecoder.joinFragments(sortedParts.map(part => part.fragment), this.expectedMessageLength);\n            const checksum = utils_1.getCRC(message);\n            if (checksum === this.expectedChecksum) {\n                this.result = message;\n            }\n            else {\n                this.error = new errors_1.InvalidChecksumError();\n            }\n        }\n        else {\n            this.reduceMixedBy(part);\n        }\n    }\n    processMixedPart(part) {\n        // Don't process duplicate parts\n        if (this.mixedParts.some(({ key: indexes }) => utils_1.arraysEqual(indexes, part.indexes))) {\n            return;\n        }\n        // Reduce this part by all the others\n        let p2 = this.simpleParts.reduce((acc, { value: p }) => this.reducePartByPart(acc, p), part);\n        p2 = this.mixedParts.reduce((acc, { value: p }) => this.reducePartByPart(acc, p), p2);\n        // If the part is now simple\n        if (p2.isSimple()) {\n            // Add it to the queue\n            this.queuedParts.push(p2);\n        }\n        else {\n            this.reduceMixedBy(p2);\n            this.mixedParts.push({ key: p2.indexes, value: p2 });\n        }\n    }\n    processQueuedItem() {\n        if (this.queuedParts.length === 0) {\n            return;\n        }\n        const part = this.queuedParts.shift();\n        if (part.isSimple()) {\n            this.processSimplePart(part);\n        }\n        else {\n            this.processMixedPart(part);\n        }\n    }\n    receivePart(encoderPart) {\n        if (this.isComplete()) {\n            return false;\n        }\n        if (!this.validatePart(encoderPart)) {\n            return false;\n        }\n        const decoderPart = FountainDecoderPart.fromEncoderPart(encoderPart);\n        this.lastPartIndexes = decoderPart.indexes;\n        this.queuedParts.push(decoderPart);\n        while (!this.isComplete() && this.queuedParts.length > 0) {\n            this.processQueuedItem();\n        }\n        ;\n        this.processedPartsCount += 1;\n        return true;\n    }\n    isComplete() {\n        return Boolean(this.result !== undefined && this.result.length > 0);\n    }\n    isSuccess() {\n        return Boolean(this.error === undefined && this.isComplete());\n    }\n    resultMessage() {\n        return this.isSuccess() ? this.result : Buffer.from([]);\n    }\n    isFailure() {\n        return this.error !== undefined;\n    }\n    resultError() {\n        return this.error ? this.error.message : '';\n    }\n    expectedPartCount() {\n        return this.expectedPartIndexes.length;\n    }\n    getExpectedPartIndexes() {\n        return [...this.expectedPartIndexes];\n    }\n    getReceivedPartIndexes() {\n        return [...this.receivedPartIndexes];\n    }\n    getLastPartIndexes() {\n        return [...this.lastPartIndexes];\n    }\n    estimatedPercentComplete() {\n        if (this.isComplete()) {\n            return 1;\n        }\n        const expectedPartCount = this.expectedPartCount();\n        if (expectedPartCount === 0) {\n            return 0;\n        }\n        // We multiply the expectedPartCount by `1.75` as a way to compensate for the facet\n        // that `this.processedPartsCount` also tracks the duplicate parts that have been\n        // processeed.\n        return Math.min(0.99, this.processedPartsCount / (expectedPartCount * 1.75));\n    }\n    getProgress() {\n        if (this.isComplete()) {\n            return 1;\n        }\n        const expectedPartCount = this.expectedPartCount();\n        if (expectedPartCount === 0) {\n            return 0;\n        }\n        return this.receivedPartIndexes.length / expectedPartCount;\n    }\n}\nexports.default = FountainDecoder;\nFountainDecoder.joinFragments = (fragments, messageLength) => {\n    return Buffer.concat(fragments).slice(0, messageLength);\n};\n//# sourceMappingURL=fountainDecoder.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cborDecode = exports.cborEncode = void 0;\nconst cbor = require('cbor-sync');\nconst cborEncode = (data) => {\n    return cbor.encode(data);\n};\nexports.cborEncode = cborEncode;\nconst cborDecode = (data) => {\n    return cbor.decode(Buffer.isBuffer(data) ? data : Buffer.from(data, 'hex'));\n};\nexports.cborDecode = cborDecode;\n//# sourceMappingURL=cbor.js.map","var baseFindIndex = require('./_baseFindIndex'),\n    baseIsNaN = require('./_baseIsNaN'),\n    strictIndexOf = require('./_strictIndexOf');\n\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseIndexOf(array, value, fromIndex) {\n  return value === value\n    ? strictIndexOf(array, value, fromIndex)\n    : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nmodule.exports = baseIndexOf;\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar printWarning = function() {};\n\nif (\"production\" !== 'production') {\n  var ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n  var loggedTypeFailures = {};\n  var has = Function.call.bind(Object.prototype.hasOwnProperty);\n\n  printWarning = function(text) {\n    var message = 'Warning: ' + text;\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  };\n}\n\n/**\n * Assert that the values match with the type specs.\n * Error messages are memorized and will only be shown once.\n *\n * @param {object} typeSpecs Map of name to a ReactPropType\n * @param {object} values Runtime values that need to be type-checked\n * @param {string} location e.g. \"prop\", \"context\", \"child context\"\n * @param {string} componentName Name of the component for error messages.\n * @param {?Function} getStack Returns the component stack.\n * @private\n */\nfunction checkPropTypes(typeSpecs, values, location, componentName, getStack) {\n  if (\"production\" !== 'production') {\n    for (var typeSpecName in typeSpecs) {\n      if (has(typeSpecs, typeSpecName)) {\n        var error;\n        // Prop type validation may throw. In case they do, we don't want to\n        // fail the render phase where it didn't fail before. So we log it.\n        // After these have been cleaned up, we'll let them throw.\n        try {\n          // This is intentionally an invariant that gets caught. It's the same\n          // behavior as without this statement except with a better message.\n          if (typeof typeSpecs[typeSpecName] !== 'function') {\n            var err = Error(\n              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +\n              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'\n            );\n            err.name = 'Invariant Violation';\n            throw err;\n          }\n          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);\n        } catch (ex) {\n          error = ex;\n        }\n        if (error && !(error instanceof Error)) {\n          printWarning(\n            (componentName || 'React class') + ': type specification of ' +\n            location + ' `' + typeSpecName + '` is invalid; the type checker ' +\n            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +\n            'You may have forgotten to pass an argument to the type checker ' +\n            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +\n            'shape all require an argument).'\n          );\n        }\n        if (error instanceof Error && !(error.message in loggedTypeFailures)) {\n          // Only monitor this failure once because there tends to be a lot of the\n          // same error.\n          loggedTypeFailures[error.message] = true;\n\n          var stack = getStack ? getStack() : '';\n\n          printWarning(\n            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')\n          );\n        }\n      }\n    }\n  }\n}\n\n/**\n * Resets warning cache when testing.\n *\n * @private\n */\ncheckPropTypes.resetWarningCache = function() {\n  if (\"production\" !== 'production') {\n    loggedTypeFailures = {};\n  }\n}\n\nmodule.exports = checkPropTypes;\n","var defineProperty = require(\"./defineProperty.js\");\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nmodule.exports = _objectSpread2;\nmodule.exports[\"default\"] = module.exports, module.exports.__esModule = true;","// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    callback.apply(this, args);\n  };\n}\n\nfunction noop() {}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction eos(stream, opts, callback) {\n  if (typeof opts === 'function') return eos(stream, null, opts);\n  if (!opts) opts = {};\n  callback = once(callback || noop);\n  var readable = opts.readable || opts.readable !== false && stream.readable;\n  var writable = opts.writable || opts.writable !== false && stream.writable;\n\n  var onlegacyfinish = function onlegacyfinish() {\n    if (!stream.writable) onfinish();\n  };\n\n  var writableEnded = stream._writableState && stream._writableState.finished;\n\n  var onfinish = function onfinish() {\n    writable = false;\n    writableEnded = true;\n    if (!readable) callback.call(stream);\n  };\n\n  var readableEnded = stream._readableState && stream._readableState.endEmitted;\n\n  var onend = function onend() {\n    readable = false;\n    readableEnded = true;\n    if (!writable) callback.call(stream);\n  };\n\n  var onerror = function onerror(err) {\n    callback.call(stream, err);\n  };\n\n  var onclose = function onclose() {\n    var err;\n\n    if (readable && !readableEnded) {\n      if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n\n    if (writable && !writableEnded) {\n      if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();\n      return callback.call(stream, err);\n    }\n  };\n\n  var onrequest = function onrequest() {\n    stream.req.on('finish', onfinish);\n  };\n\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish);\n    stream.on('abort', onclose);\n    if (stream.req) onrequest();else stream.on('request', onrequest);\n  } else if (writable && !stream._writableState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish);\n    stream.on('close', onlegacyfinish);\n  }\n\n  stream.on('end', onend);\n  stream.on('finish', onfinish);\n  if (opts.error !== false) stream.on('error', onerror);\n  stream.on('close', onclose);\n  return function () {\n    stream.removeListener('complete', onfinish);\n    stream.removeListener('abort', onclose);\n    stream.removeListener('request', onrequest);\n    if (stream.req) stream.req.removeListener('finish', onfinish);\n    stream.removeListener('end', onlegacyfinish);\n    stream.removeListener('close', onlegacyfinish);\n    stream.removeListener('finish', onfinish);\n    stream.removeListener('end', onend);\n    stream.removeListener('error', onerror);\n    stream.removeListener('close', onclose);\n  };\n}\n\nmodule.exports = eos;","// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n'use strict';\n\nvar eos;\n\nfunction once(callback) {\n  var called = false;\n  return function () {\n    if (called) return;\n    called = true;\n    callback.apply(void 0, arguments);\n  };\n}\n\nvar _require$codes = require('../../../errors').codes,\n    ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;\n\nfunction noop(err) {\n  // Rethrow the error if it exists to avoid swallowing it\n  if (err) throw err;\n}\n\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function';\n}\n\nfunction destroyer(stream, reading, writing, callback) {\n  callback = once(callback);\n  var closed = false;\n  stream.on('close', function () {\n    closed = true;\n  });\n  if (eos === undefined) eos = require('./end-of-stream');\n  eos(stream, {\n    readable: reading,\n    writable: writing\n  }, function (err) {\n    if (err) return callback(err);\n    closed = true;\n    callback();\n  });\n  var destroyed = false;\n  return function (err) {\n    if (closed) return;\n    if (destroyed) return;\n    destroyed = true; // request.destroy just do .end - .abort is what we want\n\n    if (isRequest(stream)) return stream.abort();\n    if (typeof stream.destroy === 'function') return stream.destroy();\n    callback(err || new ERR_STREAM_DESTROYED('pipe'));\n  };\n}\n\nfunction call(fn) {\n  fn();\n}\n\nfunction pipe(from, to) {\n  return from.pipe(to);\n}\n\nfunction popCallback(streams) {\n  if (!streams.length) return noop;\n  if (typeof streams[streams.length - 1] !== 'function') return noop;\n  return streams.pop();\n}\n\nfunction pipeline() {\n  for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {\n    streams[_key] = arguments[_key];\n  }\n\n  var callback = popCallback(streams);\n  if (Array.isArray(streams[0])) streams = streams[0];\n\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams');\n  }\n\n  var error;\n  var destroys = streams.map(function (stream, i) {\n    var reading = i < streams.length - 1;\n    var writing = i > 0;\n    return destroyer(stream, reading, writing, function (err) {\n      if (!error) error = err;\n      if (err) destroys.forEach(call);\n      if (reading) return;\n      destroys.forEach(call);\n      callback(error);\n    });\n  });\n  return streams.reduce(pipe);\n}\n\nmodule.exports = pipeline;","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\nrequire('inherits')(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n'use strict';\n/*<replacement>*/\n\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n\n  for (var key in obj) {\n    keys.push(key);\n  }\n\n  return keys;\n};\n/*</replacement>*/\n\n\nmodule.exports = Duplex;\n\nvar Readable = require('./_stream_readable');\n\nvar Writable = require('./_stream_writable');\n\nrequire('inherits')(Duplex, Readable);\n\n{\n  // Allow the keys array to be GC'ed.\n  var keys = objectKeys(Writable.prototype);\n\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n  Readable.call(this, options);\n  Writable.call(this, options);\n  this.allowHalfOpen = true;\n\n  if (options) {\n    if (options.readable === false) this.readable = false;\n    if (options.writable === false) this.writable = false;\n\n    if (options.allowHalfOpen === false) {\n      this.allowHalfOpen = false;\n      this.once('end', onend);\n    }\n  }\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\nObject.defineProperty(Duplex.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n}); // the no-half-open enforcer\n\nfunction onend() {\n  // If the writable side ended, then we're ok.\n  if (this._writableState.ended) return; // no more data can be written.\n  // But allow more writes to happen in this tick.\n\n  process.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n'use strict';\n\nmodule.exports = Transform;\n\nvar _require$codes = require('../errors').codes,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING,\n    ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;\n\nvar Duplex = require('./_stream_duplex');\n\nrequire('inherits')(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n  var cb = ts.writecb;\n\n  if (cb === null) {\n    return this.emit('error', new ERR_MULTIPLE_CALLBACK());\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n  cb(er);\n  var rs = this._readableState;\n  rs.reading = false;\n\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n  Duplex.call(this, options);\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  }; // start out asking for a readable event once data is transformed.\n\n  this._readableState.needReadable = true; // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  } // When the writable side finishes, then flush out anything remaining.\n\n\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function' && !this._readableState.destroyed) {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n}; // This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\n\n\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n}; // Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\n\n\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && !ts.transforming) {\n    ts.transforming = true;\n\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data); // TODO(BridgeAR): Write a test for these two error cases\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n\n  if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();\n  if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n'use strict';\n\nmodule.exports = Writable;\n/* <replacement> */\n\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n} // It seems a linked list but it is not\n// there will be only 2 of these for each stream\n\n\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\n\n\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n/*<replacement>*/\n\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK,\n    ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE,\n    ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED,\n    ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES,\n    ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END,\n    ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\n\nrequire('inherits')(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n\n  this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called\n\n  this.finalCalled = false; // drain event flag.\n\n  this.needDrain = false; // at the start of calling end()\n\n  this.ending = false; // when end() has been called, and returned\n\n  this.ended = false; // when 'finish' is emitted\n\n  this.finished = false; // has it been destroyed\n\n  this.destroyed = false; // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n\n  this.length = 0; // a flag to see when we're in the middle of a write.\n\n  this.writing = false; // when true all writes will be buffered until .uncork() call\n\n  this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n\n  this.sync = true; // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n\n  this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)\n\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  }; // the callback that the user supplies to write(chunk,encoding,cb)\n\n\n  this.writecb = null; // the amount that is being written when _write is called.\n\n  this.writelen = 0;\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null; // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n\n  this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n\n  this.prefinished = false; // True if the error was already emitted and should not be thrown again\n\n  this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')\n\n  this.autoDestroy = !!options.autoDestroy; // count buffered requests\n\n  this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function writableStateBufferGetter() {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})(); // Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\n\n\nvar realHasInstance;\n\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function value(object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function realHasInstance(object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);\n  this._writableState = new WritableState(options, this, isDuplex); // legacy.\n\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n    if (typeof options.writev === 'function') this._writev = options.writev;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n} // Otherwise people can pipe Writable streams, which is just wrong.\n\n\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb\n\n  errorOrDestroy(stream, er);\n  process.nextTick(cb, er);\n} // Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\n\n\nfunction validChunk(stream, state, chunk, cb) {\n  var er;\n\n  if (chunk === null) {\n    er = new ERR_STREAM_NULL_VALUES();\n  } else if (typeof chunk !== 'string' && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer'], chunk);\n  }\n\n  if (er) {\n    errorOrDestroy(stream, er);\n    process.nextTick(cb, er);\n    return false;\n  }\n\n  return true;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n  if (typeof cb !== 'function') cb = nop;\n  if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  this._writableState.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n    if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState && this._writableState.getBuffer();\n  }\n});\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.highWaterMark;\n  }\n}); // if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\n\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n\n  var len = state.objectMode ? 1 : chunk.length;\n  state.length += len;\n  var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.\n\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    process.nextTick(cb, er); // this can emit finish, and it will always happen\n    // after error\n\n    process.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    errorOrDestroy(stream, er); // this can emit finish, but finish must\n    // always follow error\n\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n  if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();\n  onwriteStateUpdate(state);\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state) || stream.destroyed;\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      process.nextTick(afterWrite, stream, state, finished, cb);\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n} // Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\n\n\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n} // if there's something in the buffer waiting, then process it\n\n\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n    var count = 0;\n    var allBuffers = true;\n\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n\n    buffer.allBuffers = allBuffers;\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks\n\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  } // ignore unnecessary end() calls.\n\n\n  if (!state.ending) endWritable(this, state, cb);\n  return this;\n};\n\nObject.defineProperty(Writable.prototype, 'writableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._writableState.length;\n  }\n});\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\n\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n\n    if (err) {\n      errorOrDestroy(stream, err);\n    }\n\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\n\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.pendingcb++;\n      state.finalCalled = true;\n      process.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n\n  if (need) {\n    prefinish(stream, state);\n\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n\n      if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well\n        var rState = stream._readableState;\n\n        if (!rState || rState.autoDestroy && rState.endEmitted) {\n          stream.destroy();\n        }\n      }\n    }\n  }\n\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n\n  if (cb) {\n    if (state.finished) process.nextTick(cb);else stream.once('finish', cb);\n  }\n\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  } // reuse the free corkReq.\n\n\n  state.corkedRequestsFree.next = corkReq;\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._writableState === undefined) {\n      return false;\n    }\n\n    return this._writableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._writableState.destroyed = value;\n  }\n});\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\n\nWritable.prototype._destroy = function (err, cb) {\n  cb(err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n'use strict';\n\nmodule.exports = Readable;\n/*<replacement>*/\n\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n/*<replacement>*/\n\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function EElistenerCount(emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\n\n\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n\nvar Buffer = require('buffer').Buffer;\n\nvar OurUint8Array = global.Uint8Array || function () {};\n\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\n\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n/*<replacement>*/\n\n\nvar debugUtil = require('util');\n\nvar debug;\n\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function debug() {};\n}\n/*</replacement>*/\n\n\nvar BufferList = require('./internal/streams/buffer_list');\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nvar _require = require('./internal/streams/state'),\n    getHighWaterMark = _require.getHighWaterMark;\n\nvar _require$codes = require('../errors').codes,\n    ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE,\n    ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.\n\n\nvar StringDecoder;\nvar createReadableStreamAsyncIterator;\nvar from;\n\nrequire('inherits')(Readable, Stream);\n\nvar errorOrDestroy = destroyImpl.errorOrDestroy;\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream, isDuplex) {\n  Duplex = Duplex || require('./_stream_duplex');\n  options = options || {}; // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n\n  this.objectMode = !!options.objectMode;\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n\n  this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n\n  this.sync = true; // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n  this.paused = true; // Should close be emitted on destroy. Defaults to true.\n\n  this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')\n\n  this.autoDestroy = !!options.autoDestroy; // has it been destroyed\n\n  this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n\n  this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s\n\n  this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled\n\n  this.readingMore = false;\n  this.decoder = null;\n  this.encoding = null;\n\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n  if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5\n\n  var isDuplex = this instanceof Duplex;\n  this._readableState = new ReadableState(options, this, isDuplex); // legacy\n\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    if (this._readableState === undefined) {\n      return false;\n    }\n\n    return this._readableState.destroyed;\n  },\n  set: function set(value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    } // backward compatibility, the user is explicitly\n    // managing destroyed\n\n\n    this._readableState.destroyed = value;\n  }\n});\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\n\nReadable.prototype._destroy = function (err, cb) {\n  cb(err);\n}; // Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\n\n\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n}; // Unshift should *always* be something directly out of read()\n\n\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  debug('readableAddChunk', chunk);\n  var state = stream._readableState;\n\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n\n    if (er) {\n      errorOrDestroy(stream, er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n      } else if (state.destroyed) {\n        return false;\n      } else {\n        state.reading = false;\n\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n      maybeReadMore(stream, state);\n    }\n  } // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n\n\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    state.awaitDrain = 0;\n    stream.emit('data', chunk);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n    if (state.needReadable) emitReadable(stream);\n  }\n\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);\n  }\n\n  return er;\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n}; // backwards compatibility.\n\n\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  var decoder = new StringDecoder(enc);\n  this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8\n\n  this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:\n\n  var p = this._readableState.buffer.head;\n  var content = '';\n\n  while (p !== null) {\n    content += decoder.write(p.data);\n    p = p.next;\n  }\n\n  this._readableState.buffer.clear();\n\n  if (content !== '') this._readableState.buffer.push(content);\n  this._readableState.length = content.length;\n  return this;\n}; // Don't raise the hwm > 1GB\n\n\nvar MAX_HWM = 0x40000000;\n\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n\n  return n;\n} // This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\n\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  } // If we're asking for more than the current hwm, then raise the hwm.\n\n\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n; // Don't have enough\n\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n\n  return state.length;\n} // you can override either this method, or the async _read(n) below.\n\n\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n  if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n\n  if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.\n\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  } // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n  // if we need a readable event, then we need to do some reading.\n\n\n  var doRead = state.needReadable;\n  debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some\n\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  } // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n\n\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true; // if the length is currently zero, then we *need* a readable event.\n\n    if (state.length === 0) state.needReadable = true; // call internal read method\n\n    this._read(state.highWaterMark);\n\n    state.sync = false; // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark;\n    n = 0;\n  } else {\n    state.length -= n;\n    state.awaitDrain = 0;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.\n\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk');\n  if (state.ended) return;\n\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n\n  state.ended = true;\n\n  if (state.sync) {\n    // if we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call\n    emitReadable(stream);\n  } else {\n    // emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false;\n\n    if (!state.emittedReadable) {\n      state.emittedReadable = true;\n      emitReadable_(stream);\n    }\n  }\n} // Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\n\n\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  debug('emitReadable', state.needReadable, state.emittedReadable);\n  state.needReadable = false;\n\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    process.nextTick(emitReadable_, stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  var state = stream._readableState;\n  debug('emitReadable_', state.destroyed, state.length, state.ended);\n\n  if (!state.destroyed && (state.length || state.ended)) {\n    stream.emit('readable');\n    state.emittedReadable = false;\n  } // The stream needs another readable event if\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n\n\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n  flow(stream);\n} // at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\n\n\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    process.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {\n    var len = state.length;\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length) // didn't get any data, stop spinning.\n      break;\n  }\n\n  state.readingMore = false;\n} // abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\n\n\nReadable.prototype._read = function (n) {\n  errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);\n  dest.on('unpipe', onunpipe);\n\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  } // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n\n\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n  var cleanedUp = false;\n\n  function cleanup() {\n    debug('cleanup'); // cleanup event handlers once the pipe is broken\n\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n    cleanedUp = true; // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  src.on('data', ondata);\n\n  function ondata(chunk) {\n    debug('ondata');\n    var ret = dest.write(chunk);\n    debug('dest.write', ret);\n\n    if (ret === false) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', state.awaitDrain);\n        state.awaitDrain++;\n      }\n\n      src.pause();\n    }\n  } // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n\n\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);\n  } // Make sure our error handler is attached before userland ones.\n\n\n  prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.\n\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n\n  dest.once('close', onclose);\n\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  } // tell the dest that it's being piped to\n\n\n  dest.emit('pipe', src); // start the flow if it hasn't been started already.\n\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function pipeOnDrainFunctionResult() {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = {\n    hasUnpiped: false\n  }; // if we're not piping anywhere, then do nothing.\n\n  if (state.pipesCount === 0) return this; // just one destination.  most common case.\n\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n    if (!dest) dest = state.pipes; // got a match.\n\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  } // slow case. multiple pipe destinations.\n\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      });\n    }\n\n    return this;\n  } // try to find the right one.\n\n\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n  dest.emit('unpipe', this, unpipeInfo);\n  return this;\n}; // set up data events if they are asked for\n// Ensure readable listeners eventually get something\n\n\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n  var state = this._readableState;\n\n  if (ev === 'data') {\n    // update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused\n\n    if (state.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.flowing = false;\n      state.emittedReadable = false;\n      debug('on readable', state.length, state.reading);\n\n      if (state.length) {\n        emitReadable(this);\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this);\n      }\n    }\n  }\n\n  return res;\n};\n\nReadable.prototype.addListener = Readable.prototype.on;\n\nReadable.prototype.removeListener = function (ev, fn) {\n  var res = Stream.prototype.removeListener.call(this, ev, fn);\n\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nReadable.prototype.removeAllListeners = function (ev) {\n  var res = Stream.prototype.removeAllListeners.apply(this, arguments);\n\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this);\n  }\n\n  return res;\n};\n\nfunction updateReadableListening(self) {\n  var state = self._readableState;\n  state.readableListening = self.listenerCount('readable') > 0;\n\n  if (state.resumeScheduled && !state.paused) {\n    // flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true; // crude way to check if we should resume\n  } else if (self.listenerCount('data') > 0) {\n    self.resume();\n  }\n}\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n} // pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\n\n\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n\n  if (!state.flowing) {\n    debug('resume'); // we flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume()\n\n    state.flowing = !state.readableListening;\n    resume(this, state);\n  }\n\n  state.paused = false;\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    process.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  debug('resume', state.reading);\n\n  if (!state.reading) {\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n\n  if (this._readableState.flowing !== false) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n\n  this._readableState.paused = true;\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n\n  while (state.flowing && stream.read() !== null) {\n    ;\n  }\n} // wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\n\n\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n  stream.on('end', function () {\n    debug('wrapped end');\n\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode\n\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  }); // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function methodWrap(method) {\n        return function methodWrapReturnFunction() {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  } // proxy certain important events.\n\n\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  } // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n\n\n  this._read = function (n) {\n    debug('wrapped _read', n);\n\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nif (typeof Symbol === 'function') {\n  Readable.prototype[Symbol.asyncIterator] = function () {\n    if (createReadableStreamAsyncIterator === undefined) {\n      createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');\n    }\n\n    return createReadableStreamAsyncIterator(this);\n  };\n}\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.highWaterMark;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableBuffer', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState && this._readableState.buffer;\n  }\n});\nObject.defineProperty(Readable.prototype, 'readableFlowing', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.flowing;\n  },\n  set: function set(state) {\n    if (this._readableState) {\n      this._readableState.flowing = state;\n    }\n  }\n}); // exposed for testing purposes only.\n\nReadable._fromList = fromList;\nObject.defineProperty(Readable.prototype, 'readableLength', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function get() {\n    return this._readableState.length;\n  }\n}); // Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\n\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = state.buffer.consume(n, state.decoder);\n  }\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n  debug('endReadable', state.endEmitted);\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    process.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.\n\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n\n    if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well\n      var wState = stream._writableState;\n\n      if (!wState || wState.autoDestroy && wState.finished) {\n        stream.destroy();\n      }\n    }\n  }\n}\n\nif (typeof Symbol === 'function') {\n  Readable.from = function (iterable, opts) {\n    if (from === undefined) {\n      from = require('./internal/streams/from');\n    }\n\n    return from(Readable, iterable, opts);\n  };\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n\n  return -1;\n}","/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n","/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n","var nativeCreate = require('./_nativeCreate');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n","var nativeCreate = require('./_nativeCreate');\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n","var Symbol = require('./_Symbol'),\n    arrayMap = require('./_arrayMap'),\n    isArray = require('./isArray'),\n    isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n","var memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n","/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\nfunction setCacheHas(value) {\n  return this.__data__.has(value);\n}\n\nmodule.exports = setCacheHas;\n","/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\nfunction setCacheAdd(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n  return this;\n}\n\nmodule.exports = setCacheAdd;\n","\"use strict\";\n// This file is imported from secp256k1 v3\n// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([\n    // begin\n    0x30,\n    0x81,\n    0xd3,\n    0x02,\n    0x01,\n    0x01,\n    0x04,\n    0x20,\n    // private key\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    // middle\n    0xa0,\n    0x81,\n    0x85,\n    0x30,\n    0x81,\n    0x82,\n    0x02,\n    0x01,\n    0x01,\n    0x30,\n    0x2c,\n    0x06,\n    0x07,\n    0x2a,\n    0x86,\n    0x48,\n    0xce,\n    0x3d,\n    0x01,\n    0x01,\n    0x02,\n    0x21,\n    0x00,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xfe,\n    0xff,\n    0xff,\n    0xfc,\n    0x2f,\n    0x30,\n    0x06,\n    0x04,\n    0x01,\n    0x00,\n    0x04,\n    0x01,\n    0x07,\n    0x04,\n    0x21,\n    0x02,\n    0x79,\n    0xbe,\n    0x66,\n    0x7e,\n    0xf9,\n    0xdc,\n    0xbb,\n    0xac,\n    0x55,\n    0xa0,\n    0x62,\n    0x95,\n    0xce,\n    0x87,\n    0x0b,\n    0x07,\n    0x02,\n    0x9b,\n    0xfc,\n    0xdb,\n    0x2d,\n    0xce,\n    0x28,\n    0xd9,\n    0x59,\n    0xf2,\n    0x81,\n    0x5b,\n    0x16,\n    0xf8,\n    0x17,\n    0x98,\n    0x02,\n    0x21,\n    0x00,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xfe,\n    0xba,\n    0xae,\n    0xdc,\n    0xe6,\n    0xaf,\n    0x48,\n    0xa0,\n    0x3b,\n    0xbf,\n    0xd2,\n    0x5e,\n    0x8c,\n    0xd0,\n    0x36,\n    0x41,\n    0x41,\n    0x02,\n    0x01,\n    0x01,\n    0xa1,\n    0x24,\n    0x03,\n    0x22,\n    0x00,\n    // public key\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n]);\nvar EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([\n    // begin\n    0x30,\n    0x82,\n    0x01,\n    0x13,\n    0x02,\n    0x01,\n    0x01,\n    0x04,\n    0x20,\n    // private key\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    // middle\n    0xa0,\n    0x81,\n    0xa5,\n    0x30,\n    0x81,\n    0xa2,\n    0x02,\n    0x01,\n    0x01,\n    0x30,\n    0x2c,\n    0x06,\n    0x07,\n    0x2a,\n    0x86,\n    0x48,\n    0xce,\n    0x3d,\n    0x01,\n    0x01,\n    0x02,\n    0x21,\n    0x00,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xfe,\n    0xff,\n    0xff,\n    0xfc,\n    0x2f,\n    0x30,\n    0x06,\n    0x04,\n    0x01,\n    0x00,\n    0x04,\n    0x01,\n    0x07,\n    0x04,\n    0x41,\n    0x04,\n    0x79,\n    0xbe,\n    0x66,\n    0x7e,\n    0xf9,\n    0xdc,\n    0xbb,\n    0xac,\n    0x55,\n    0xa0,\n    0x62,\n    0x95,\n    0xce,\n    0x87,\n    0x0b,\n    0x07,\n    0x02,\n    0x9b,\n    0xfc,\n    0xdb,\n    0x2d,\n    0xce,\n    0x28,\n    0xd9,\n    0x59,\n    0xf2,\n    0x81,\n    0x5b,\n    0x16,\n    0xf8,\n    0x17,\n    0x98,\n    0x48,\n    0x3a,\n    0xda,\n    0x77,\n    0x26,\n    0xa3,\n    0xc4,\n    0x65,\n    0x5d,\n    0xa4,\n    0xfb,\n    0xfc,\n    0x0e,\n    0x11,\n    0x08,\n    0xa8,\n    0xfd,\n    0x17,\n    0xb4,\n    0x48,\n    0xa6,\n    0x85,\n    0x54,\n    0x19,\n    0x9c,\n    0x47,\n    0xd0,\n    0x8f,\n    0xfb,\n    0x10,\n    0xd4,\n    0xb8,\n    0x02,\n    0x21,\n    0x00,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xff,\n    0xfe,\n    0xba,\n    0xae,\n    0xdc,\n    0xe6,\n    0xaf,\n    0x48,\n    0xa0,\n    0x3b,\n    0xbf,\n    0xd2,\n    0x5e,\n    0x8c,\n    0xd0,\n    0x36,\n    0x41,\n    0x41,\n    0x02,\n    0x01,\n    0x01,\n    0xa1,\n    0x44,\n    0x03,\n    0x42,\n    0x00,\n    // public key\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n]);\nexports.privateKeyExport = function (privateKey, publicKey, compressed) {\n    if (compressed === void 0) { compressed = true; }\n    var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);\n    privateKey.copy(result, compressed ? 8 : 9);\n    publicKey.copy(result, compressed ? 181 : 214);\n    return result;\n};\nexports.privateKeyImport = function (privateKey) {\n    var length = privateKey.length;\n    // sequence header\n    var index = 0;\n    if (length < index + 1 || privateKey[index] !== 0x30)\n        return null;\n    index += 1;\n    // sequence length constructor\n    if (length < index + 1 || !(privateKey[index] & 0x80))\n        return null;\n    var lenb = privateKey[index] & 0x7f;\n    index += 1;\n    if (lenb < 1 || lenb > 2)\n        return null;\n    if (length < index + lenb)\n        return null;\n    // sequence length\n    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);\n    index += lenb;\n    if (length < index + len)\n        return null;\n    // sequence element 0: version number (=1)\n    if (length < index + 3 ||\n        privateKey[index] !== 0x02 ||\n        privateKey[index + 1] !== 0x01 ||\n        privateKey[index + 2] !== 0x01) {\n        return null;\n    }\n    index += 3;\n    // sequence element 1: octet string, up to 32 bytes\n    if (length < index + 2 ||\n        privateKey[index] !== 0x04 ||\n        privateKey[index + 1] > 0x20 ||\n        length < index + 2 + privateKey[index + 1]) {\n        return null;\n    }\n    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);\n};\nexports.signatureImportLax = function (signature) {\n    var r = Buffer.alloc(32, 0);\n    var s = Buffer.alloc(32, 0);\n    var length = signature.length;\n    var index = 0;\n    // sequence tag byte\n    if (signature[index++] !== 0x30) {\n        return null;\n    }\n    // sequence length byte\n    var lenbyte = signature[index++];\n    if (lenbyte & 0x80) {\n        index += lenbyte - 0x80;\n        if (index > length) {\n            return null;\n        }\n    }\n    // sequence tag byte for r\n    if (signature[index++] !== 0x02) {\n        return null;\n    }\n    // length for r\n    var rlen = signature[index++];\n    if (rlen & 0x80) {\n        lenbyte = rlen - 0x80;\n        if (index + lenbyte > length) {\n            return null;\n        }\n        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)\n            ;\n        for (rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)\n            rlen = (rlen << 8) + signature[index];\n    }\n    if (rlen > length - index) {\n        return null;\n    }\n    var rindex = index;\n    index += rlen;\n    // sequence tag byte for s\n    if (signature[index++] !== 0x02) {\n        return null;\n    }\n    // length for s\n    var slen = signature[index++];\n    if (slen & 0x80) {\n        lenbyte = slen - 0x80;\n        if (index + lenbyte > length) {\n            return null;\n        }\n        for (; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1)\n            ;\n        for (slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)\n            slen = (slen << 8) + signature[index];\n    }\n    if (slen > length - index) {\n        return null;\n    }\n    var sindex = index;\n    index += slen;\n    // ignore leading zeros in r\n    for (; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1)\n        ;\n    // copy r value\n    if (rlen > 32) {\n        return null;\n    }\n    var rvalue = signature.slice(rindex, rindex + rlen);\n    rvalue.copy(r, 32 - rvalue.length);\n    // ignore leading zeros in s\n    for (; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1)\n        ;\n    // copy s value\n    if (slen > 32) {\n        return null;\n    }\n    var svalue = signature.slice(sindex, sindex + slen);\n    svalue.copy(s, 32 - svalue.length);\n    return { r: r, s: s };\n};\n//# sourceMappingURL=der.js.map","\"use strict\";\n// This file is imported from secp256k1 v3\n// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar BN = require(\"bn.js\");\nvar EC = require('elliptic').ec;\nvar ec = new EC('secp256k1');\nvar ecparams = ec.curve;\nexports.privateKeyExport = function (privateKey, compressed) {\n    if (compressed === void 0) { compressed = true; }\n    var d = new BN(privateKey);\n    if (d.ucmp(ecparams.n) >= 0) {\n        throw new Error(\"couldn't export to DER format\");\n    }\n    var point = ec.g.mul(d);\n    return toPublicKey(point.getX(), point.getY(), compressed);\n};\nexports.privateKeyModInverse = function (privateKey) {\n    var bn = new BN(privateKey);\n    if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) {\n        throw new Error('private key range is invalid');\n    }\n    return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);\n};\nexports.signatureImport = function (sigObj) {\n    var r = new BN(sigObj.r);\n    if (r.ucmp(ecparams.n) >= 0) {\n        r = new BN(0);\n    }\n    var s = new BN(sigObj.s);\n    if (s.ucmp(ecparams.n) >= 0) {\n        s = new BN(0);\n    }\n    return Buffer.concat([r.toArrayLike(Buffer, 'be', 32), s.toArrayLike(Buffer, 'be', 32)]);\n};\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n    if (compressed === void 0) { compressed = true; }\n    var point = ec.keyFromPublic(publicKey);\n    var scalar = new BN(privateKey);\n    if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) {\n        throw new Error('scalar was invalid (zero or overflow)');\n    }\n    var shared = point.pub.mul(scalar);\n    return toPublicKey(shared.getX(), shared.getY(), compressed);\n};\nvar toPublicKey = function (x, y, compressed) {\n    var publicKey;\n    if (compressed) {\n        publicKey = Buffer.alloc(33);\n        publicKey[0] = y.isOdd() ? 0x03 : 0x02;\n        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);\n    }\n    else {\n        publicKey = Buffer.alloc(65);\n        publicKey[0] = 0x04;\n        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);\n        y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);\n    }\n    return publicKey;\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.chooseFragments = exports.shuffle = exports.chooseDegree = void 0;\nconst utils_1 = require(\"./utils\");\nconst xoshiro_1 = __importDefault(require(\"./xoshiro\"));\nconst randomSampler = require('@apocentre/alias-sampling');\nconst chooseDegree = (seqLenth, rng) => {\n    const degreeProbabilities = [...new Array(seqLenth)].map((_, index) => 1 / (index + 1));\n    const degreeChooser = randomSampler(degreeProbabilities, null, rng.nextDouble);\n    return degreeChooser.next() + 1;\n};\nexports.chooseDegree = chooseDegree;\nconst shuffle = (items, rng) => {\n    let remaining = [...items];\n    let result = [];\n    while (remaining.length > 0) {\n        let index = rng.nextInt(0, remaining.length - 1);\n        let item = remaining[index];\n        // remaining.erase(remaining.begin() + index);\n        remaining.splice(index, 1);\n        result.push(item);\n    }\n    return result;\n};\nexports.shuffle = shuffle;\nconst chooseFragments = (seqNum, seqLength, checksum) => {\n    // The first `seqLenth` parts are the \"pure\" fragments, not mixed with any\n    // others. This means that if you only generate the first `seqLenth` parts,\n    // then you have all the parts you need to decode the message.\n    if (seqNum <= seqLength) {\n        return [seqNum - 1];\n    }\n    else {\n        const seed = Buffer.concat([utils_1.intToBytes(seqNum), utils_1.intToBytes(checksum)]);\n        const rng = new xoshiro_1.default(seed);\n        const degree = exports.chooseDegree(seqLength, rng);\n        const indexes = [...new Array(seqLength)].map((_, index) => index);\n        const shuffledIndexes = exports.shuffle(indexes, rng);\n        return shuffledIndexes.slice(0, degree);\n    }\n};\nexports.chooseFragments = chooseFragments;\n//# sourceMappingURL=fountainUtils.js.map","'use strict';\n\nmodule.exports = {\n  crc1: require('./crc1'),\n  crc8: require('./crc8'),\n  crc81wire: require('./crc8_1wire'),\n  crc16: require('./crc16'),\n  crc16ccitt: require('./crc16_ccitt'),\n  crc16modbus: require('./crc16_modbus'),\n  crc16xmodem: require('./crc16_xmodem'),\n  crc16kermit: require('./crc16_kermit'),\n  crc24: require('./crc24'),\n  crc32: require('./crc32'),\n  crcjam: require('./crcjam')\n};\n","(function (global, factory) {\n\tif (typeof define === 'function' && define.amd) {\n\t\tdefine([], factory);\n\t} else if (typeof module !== 'undefined' && module.exports){\n\t\tmodule.exports = factory();\n\t} else {\n\t\tglobal.CBOR = factory();\n\t}\n})(this, function () {\n\tvar CBOR = (function () {\n\t\tfunction BinaryHex(hex) {\n\t\t\tthis.$hex = hex;\n\t\t}\n\t\tBinaryHex.prototype = {\n\t\t\tlength: function () {\n\t\t\t\treturn this.$hex.length/2;\n\t\t\t},\n\t\t\ttoString: function (format) {\n\t\t\t\tif (!format || format === 'hex' || format === 16) return this.$hex;\n\t\t\t\tif (format === 'utf-8') {\n\t\t\t\t\tvar encoded = '';\n\t\t\t\t\tfor (var i = 0; i < this.$hex.length; i += 2) {\n\t\t\t\t\t\tencoded += '%' + this.$hex.substring(i, i + 2);\n\t\t\t\t\t}\n\t\t\t\t\treturn decodeURIComponent(encoded);\n\t\t\t\t}\n\t\t\t\tif (format === 'latin') {\n\t\t\t\t\tvar encoded = [];\n\t\t\t\t\tfor (var i = 0; i < this.$hex.length; i += 2) {\n\t\t\t\t\t\tencoded.push(parseInt(this.$hex.substring(i, i + 2), 16));\n\t\t\t\t\t}\n\t\t\t\t\treturn String.fromCharCode.apply(String, encoded);\n\t\t\t\t}\n\t\t\t\tthrow new Error('Unrecognised format: ' + format);\n\t\t\t}\n\t\t};\n\t\tBinaryHex.fromLatinString = function (latinString) {\n\t\t\tvar hex = '';\n\t\t\tfor (var i = 0; i < latinString.length; i++) {\n\t\t\t\tvar pair = latinString.charCodeAt(i).toString(16);\n\t\t\t\tif (pair.length === 1) pair = \"0\" + pair;\n\t\t\t\thex += pair;\n\t\t\t}\n\t\t\treturn new BinaryHex(hex);\n\t\t};\n\t\tBinaryHex.fromUtf8String = function (utf8String) {\n\t\t\tvar encoded = encodeURIComponent(utf8String);\n\t\t\tvar hex = '';\n\t\t\tfor (var i = 0; i < encoded.length; i++) {\n\t\t\t\tif (encoded.charAt(i) === '%') {\n\t\t\t\t\thex += encoded.substring(i + 1, i + 3);\n\t\t\t\t\ti += 2;\n\t\t\t\t} else {\n\t\t\t\t\tvar hexPair = encoded.charCodeAt(i).toString(16);\n\t\t\t\t\tif (hexPair.length < 2) hexPair = \"0\" + hexPair;\n\t\t\t\t\thex += hexPair;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new BinaryHex(hex);\n\t\t};\n\n\t\tvar semanticEncoders = [];\n\t\tvar semanticDecoders = {};\n\t\n\t\tvar notImplemented = function (label) {\n\t\t\treturn function () {\n\t\t\t\tthrow new Error(label + ' not implemented');\n\t\t\t};\n\t\t};\n\t\n\t\tfunction Reader() {\n\t\t}\n\t\tReader.prototype = {\n\t\t\tpeekByte: notImplemented('peekByte'),\n\t\t\treadByte: notImplemented('readByte'),\n\t\t\treadChunk: notImplemented('readChunk'),\n\t\t\treadFloat16: function () {\n\t\t\t\tvar half = this.readUint16();\n\t\t\t\tvar exponent = (half&0x7fff) >> 10;\n\t\t\t\tvar mantissa = half&0x3ff;\n\t\t\t\tvar negative = half&0x8000;\n\t\t\t\tif (exponent === 0x1f) {\n\t\t\t\t\tif (mantissa === 0) {\n\t\t\t\t\t\treturn negative ? -Infinity : Infinity;\n\t\t\t\t\t}\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tvar magnitude = exponent ? Math.pow(2, exponent - 25)*(1024 + mantissa) : Math.pow(2, -24)*mantissa;\n\t\t\t\treturn negative ? -magnitude : magnitude;\n\t\t\t},\n\t\t\treadFloat32: function () {\n\t\t\t\tvar intValue = this.readUint32();\n\t\t\t\tvar exponent = (intValue&0x7fffffff) >> 23;\n\t\t\t\tvar mantissa = intValue&0x7fffff;\n\t\t\t\tvar negative = intValue&0x80000000;\n\t\t\t\tif (exponent === 0xff) {\n\t\t\t\t\tif (mantissa === 0) {\n\t\t\t\t\t\treturn negative ? -Infinity : Infinity;\n\t\t\t\t\t}\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tvar magnitude = exponent ? Math.pow(2, exponent - 23 - 127)*(8388608 + mantissa) : Math.pow(2, -23 - 126)*mantissa;\n\t\t\t\treturn negative ? -magnitude : magnitude;\n\t\t\t},\n\t\t\treadFloat64: function () {\n\t\t\t\tvar int1 = this.readUint32(), int2 = this.readUint32();\n\t\t\t\tvar exponent = (int1 >> 20)&0x7ff;\n\t\t\t\tvar mantissa = (int1&0xfffff)*4294967296 + int2;\n\t\t\t\tvar negative = int1&0x80000000;\n\t\t\t\tif (exponent === 0x7ff) {\n\t\t\t\t\tif (mantissa === 0) {\n\t\t\t\t\t\treturn negative ? -Infinity : Infinity;\n\t\t\t\t\t}\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tvar magnitude = exponent ? Math.pow(2, exponent - 52 - 1023)*(4503599627370496 + mantissa) : Math.pow(2, -52 - 1022)*mantissa;\n\t\t\t\treturn negative ? -magnitude : magnitude;\n\t\t\t},\n\t\t\treadUint16: function () {\n\t\t\t\treturn this.readByte()*256 + this.readByte();\n\t\t\t},\n\t\t\treadUint32: function () {\n\t\t\t\treturn this.readUint16()*65536 + this.readUint16();\n\t\t\t},\n\t\t\treadUint64: function () {\n\t\t\t\treturn this.readUint32()*4294967296 + this.readUint32();\n\t\t\t}\n\t\t};\n\t\tfunction Writer() {\n\t\t}\n\t\tWriter.prototype = {\n\t\t\twriteByte: notImplemented('writeByte'),\n\t\t\tresult: notImplemented('result'),\n\t\t\twriteFloat16: notImplemented('writeFloat16'),\n\t\t\twriteFloat32: notImplemented('writeFloat32'),\n\t\t\twriteFloat64: notImplemented('writeFloat64'),\n\t\t\twriteUint16: function (value) {\n\t\t\t\tthis.writeByte((value >> 8)&0xff);\n\t\t\t\tthis.writeByte(value&0xff);\n\t\t\t},\n\t\t\twriteUint32: function (value) {\n\t\t\t\tthis.writeUint16((value>>16)&0xffff);\n\t\t\t\tthis.writeUint16(value&0xffff);\n\t\t\t},\n\t\t\twriteUint64: function (value) {\n\t\t\t\tif (value >= 9007199254740992 || value <= -9007199254740992) {\n\t\t\t\t\tthrow new Error('Cannot encode Uint64 of: ' + value + ' magnitude to big (floating point errors)');\n\t\t\t\t}\n\t\t\t\tthis.writeUint32(Math.floor(value/4294967296));\n\t\t\t\tthis.writeUint32(value%4294967296);\n\t\t\t},\n\t\t\twriteString: notImplemented('writeString'),\n\t\t\tcanWriteBinary: function (chunk) {\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\twriteBinary: notImplemented('writeChunk')\n\t\t};\n\n\t\tfunction readHeaderRaw(reader) {\n\t\t\tvar firstByte = reader.readByte();\n\t\t\tvar majorType = firstByte >> 5, value = firstByte&0x1f;\n\t\t\treturn {type: majorType, value: value};\n\t\t}\n\t\n\t\tfunction valueFromHeader(header, reader) {\n\t\t\tvar value = header.value;\n\t\t\tif (value < 24) {\n\t\t\t\treturn value;\n\t\t\t} else if (value == 24) {\n\t\t\t\treturn reader.readByte();\n\t\t\t} else if (value == 25) {\n\t\t\t\treturn reader.readUint16();\n\t\t\t} else if (value == 26) {\n\t\t\t\treturn reader.readUint32();\n\t\t\t} else if (value == 27) {\n\t\t\t\treturn reader.readUint64();\n\t\t\t} else if (value == 31) {\n\t\t\t\t// special value for non-terminating arrays/objects\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tnotImplemented('Additional info: ' + value)();\n\t\t}\n\t\n\t\tfunction writeHeaderRaw(type, value, writer) {\n\t\t\twriter.writeByte((type<<5)|value);\n\t\t}\n\t\n\t\tfunction writeHeader(type, value, writer) {\n\t\t\tvar firstByte = type<<5;\n\t\t\tif (value < 24) {\n\t\t\t\twriter.writeByte(firstByte|value);\n\t\t\t} else if (value < 256) {\n\t\t\t\twriter.writeByte(firstByte|24);\n\t\t\t\twriter.writeByte(value);\n\t\t\t} else if (value < 65536) {\n\t\t\t\twriter.writeByte(firstByte|25);\n\t\t\t\twriter.writeUint16(value);\n\t\t\t} else if (value < 4294967296) {\n\t\t\t\twriter.writeByte(firstByte|26);\n\t\t\t\twriter.writeUint32(value);\n\t\t\t} else {\n\t\t\t\twriter.writeByte(firstByte|27);\n\t\t\t\twriter.writeUint64(value);\n\t\t\t}\n\t\t}\n\t\n\t\tvar stopCode = new Error(); // Just a unique object, that won't compare strictly equal to anything else\n\t\n\t\tfunction decodeReader(reader) {\n\t\t\tvar header = readHeaderRaw(reader);\n\t\t\tswitch (header.type) {\n\t\t\t\tcase 0:\n\t\t\t\t\treturn valueFromHeader(header, reader);\n\t\t\t\tcase 1:\n\t\t\t\t\treturn -1 -valueFromHeader(header, reader);\n\t\t\t\tcase 2:\n\t\t\t\t\treturn reader.readChunk(valueFromHeader(header, reader));\n\t\t\t\tcase 3:\n\t\t\t\t\tvar buffer = reader.readChunk(valueFromHeader(header, reader));\n\t\t\t\t\treturn buffer.toString('utf-8');\n\t\t\t\tcase 4:\n\t\t\t\tcase 5:\n\t\t\t\t\tvar arrayLength = valueFromHeader(header, reader);\n\t\t\t\t\tvar result = [];\n\t\t\t\t\tif (arrayLength !== null) {\n\t\t\t\t\t\tif (header.type === 5) {\n\t\t\t\t\t\t\tarrayLength *= 2;\n\t\t\t\t\t\t} \n\t\t\t\t\t\tfor (var i = 0; i < arrayLength; i++) {\n\t\t\t\t\t\t\tresult[i] = decodeReader(reader);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tvar item;\n\t\t\t\t\t\twhile ((item = decodeReader(reader)) !== stopCode) {\n\t\t\t\t\t\t\tresult.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (header.type === 5) {\n\t\t\t\t\t\tvar objResult = {};\n\t\t\t\t\t\tfor (var i = 0; i < result.length; i += 2) {\n\t\t\t\t\t\t\tobjResult[result[i]] = result[i + 1];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn objResult;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\tcase 6:\n\t\t\t\t\tvar tag = valueFromHeader(header, reader);\n\t\t\t\t\tvar decoder = semanticDecoders[tag];\n\t\t\t\t\tvar result = decodeReader(reader);\n\t\t\t\t\treturn decoder ? decoder(result) : result;\n\t\t\t\tcase 7:\n\t\t\t\t\tif (header.value === 25) {\n\t\t\t\t\t\treturn reader.readFloat16();\n\t\t\t\t\t} else if (header.value === 26) {\n\t\t\t\t\t\treturn reader.readFloat32();\n\t\t\t\t\t} else if (header.value === 27) {\n\t\t\t\t\t\treturn reader.readFloat64();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (valueFromHeader(header, reader)) {\n\t\t\t\t\t\tcase 20:\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\tcase 21:\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\tcase 22:\n\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\tcase 23:\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\tcase null:\n\t\t\t\t\t\t\treturn stopCode;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tthrow new Error('Unknown fixed value: ' + header.value);\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error('Unsupported header: ' + JSON.stringify(header));\n\t\t\t}\n\t\t\tthrow new Error('not implemented yet');\n\t\t}\n\t\n\t\tfunction encodeWriter(data, writer) {\n\t\t\tfor (var i = 0; i < semanticEncoders.length; i++) {\n\t\t\t\tvar replacement = semanticEncoders[i].fn(data);\n\t\t\t\tif (replacement !== undefined) {\n\t\t\t\t\twriteHeader(6, semanticEncoders[i].tag, writer);\n\t\t\t\t\treturn encodeWriter(replacement, writer);\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tif (data && typeof data.toCBOR === 'function') {\n\t\t\t\tdata = data.toCBOR();\n\t\t\t}\n\t\t\n\t\t\tif (data === false) {\n\t\t\t\twriteHeader(7, 20, writer);\n\t\t\t} else if (data === true) {\n\t\t\t\twriteHeader(7, 21, writer);\n\t\t\t} else if (data === null) {\n\t\t\t\twriteHeader(7, 22, writer);\n\t\t\t} else if (data === undefined) {\n\t\t\t\twriteHeader(7, 23, writer);\n\t\t\t} else if (typeof data === 'number') {\n\t\t\t\tif (Math.floor(data) === data && data < 9007199254740992 && data > -9007199254740992) {\n\t\t\t\t\t// Integer\n\t\t\t\t\tif (data < 0) {\n\t\t\t\t\t\twriteHeader(1, -1 - data, writer);\n\t\t\t\t\t} else {\n\t\t\t\t\t\twriteHeader(0, data, writer);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\twriteHeaderRaw(7, 27, writer);\n\t\t\t\t\twriter.writeFloat64(data);\n\t\t\t\t}\n\t\t\t} else if (typeof data === 'string') {\n\t\t\t\twriter.writeString(data, function (length) {\n\t\t\t\t\twriteHeader(3, length, writer);\n\t\t\t\t});\n\t\t\t} else if (writer.canWriteBinary(data)) {\n\t\t\t\twriter.writeBinary(data, function (length) {\n\t\t\t\t\twriteHeader(2, length, writer);\n\t\t\t\t});\n\t\t\t} else if (typeof data === 'object') {\n\t\t\t\tif (api.config.useToJSON && typeof data.toJSON === 'function') {\n\t\t\t   \t\tdata = data.toJSON();\n\t\t\t   \t}\n\t\t\t\tif (Array.isArray(data)) {\n\t\t\t\t\twriteHeader(4, data.length, writer);\n\t\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\t\tencodeWriter(data[i], writer);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar keys = Object.keys(data);\n\t\t\t\t\twriteHeader(5, keys.length, writer);\n\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\tencodeWriter(keys[i], writer);\n\t\t\t\t\t\tencodeWriter(data[keys[i]], writer);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new Error('CBOR encoding not supported: ' + data);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar readerFunctions = [];\n\t\tvar writerFunctions = [];\n\t\n\t\tvar api = {\n\t\t\tconfig: {\n\t\t\t\tuseToJSON: true\n\t\t\t},\n\t\t\taddWriter: function (format, writerFunction) {\n\t\t\t\tif (typeof format === 'string') {\n\t\t\t\t\twriterFunctions.push(function (f) {\n\t\t\t\t\t\tif (format === f) return writerFunction(f);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\twriterFunctions.push(format);\n\t\t\t\t}\n\t\t\t},\n\t\t\taddReader: function (format, readerFunction) {\n\t\t\t\tif (typeof format === 'string') {\n\t\t\t\t\treaderFunctions.push(function (data, f) {\n\t\t\t\t\t\tif (format === f) return readerFunction(data, f);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treaderFunctions.push(format);\n\t\t\t\t}\n\t\t\t},\n\t\t\tencode: function (data, format) {\n\t\t\t\tfor (var i = 0; i < writerFunctions.length; i++) {\n\t\t\t\t\tvar func = writerFunctions[i];\n\t\t\t\t\tvar writer = func(format);\n\t\t\t\t\tif (writer) {\n\t\t\t\t\t\tencodeWriter(data, writer);\n\t\t\t\t\t\treturn writer.result();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow new Error('Unsupported output format: ' + format);\n\t\t\t},\n\t\t\tdecode: function (data, format) {\n\t\t\t\tfor (var i = 0; i < readerFunctions.length; i++) {\n\t\t\t\t\tvar func = readerFunctions[i];\n\t\t\t\t\tvar reader = func(data, format);\n\t\t\t\t\tif (reader) {\n\t\t\t\t\t\treturn decodeReader(reader);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow new Error('Unsupported input format: ' + format);\n\t\t\t},\n\t\t\taddSemanticEncode: function (tag, fn) {\n\t\t\t\tif (typeof tag !== 'number' || tag%1 !== 0 || tag < 0) {\n\t\t\t\t\tthrow new Error('Tag must be a positive integer');\n\t\t\t\t}\n\t\t\t\tsemanticEncoders.push({tag: tag, fn: fn});\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\taddSemanticDecode: function (tag, fn) {\n\t\t\t\tif (typeof tag !== 'number' || tag%1 !== 0 || tag < 0) {\n\t\t\t\t\tthrow new Error('Tag must be a positive integer');\n\t\t\t\t}\n\t\t\t\tsemanticDecoders[tag] = fn;\n\t\t\t\treturn this;\n\t\t\t},\n\t\t\tReader: Reader,\n\t\t\tWriter: Writer\n\t\t};\n\t\t\n\t\t/** Node.js Buffers **/\n\t\tfunction BufferReader(buffer) {\n\t\t\tthis.buffer = buffer;\n\t\t\tthis.pos = 0;\n\t\t}\n\t\tBufferReader.prototype = Object.create(Reader.prototype);\n\t\tBufferReader.prototype.peekByte = function () {\n\t\t\treturn this.buffer[this.pos];\n\t\t};\n\t\tBufferReader.prototype.readByte = function () {\n\t\t\treturn this.buffer[this.pos++];\n\t\t};\n\t\tBufferReader.prototype.readUint16 = function () {\n\t\t\tvar result = this.buffer.readUInt16BE(this.pos);\n\t\t\tthis.pos += 2;\n\t\t\treturn result;\n\t\t};\n\t\tBufferReader.prototype.readUint32 = function () {\n\t\t\tvar result = this.buffer.readUInt32BE(this.pos);\n\t\t\tthis.pos += 4;\n\t\t\treturn result;\n\t\t};\n\t\tBufferReader.prototype.readFloat32 = function () {\n\t\t\tvar result = this.buffer.readFloatBE(this.pos);\n\t\t\tthis.pos += 4;\n\t\t\treturn result;\n\t\t};\n\t\tBufferReader.prototype.readFloat64 = function () {\n\t\t\tvar result = this.buffer.readDoubleBE(this.pos);\n\t\t\tthis.pos += 8;\n\t\t\treturn result;\n\t\t};\n\t\tBufferReader.prototype.readChunk = function (length) {\n\t\t\tvar result = Buffer.alloc(length);\n\t\t\tthis.buffer.copy(result, 0, this.pos, this.pos += length);\n\t\t\treturn result;\n\t\t};\n\t\n\t\tfunction BufferWriter(stringFormat) {\n\t\t\tthis.byteLength = 0;\n\t\t\tthis.defaultBufferLength = 16384; // 16k\n\t\t\tthis.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n\t\t\tthis.latestBufferOffset = 0;\n\t\t\tthis.completeBuffers = [];\n\t\t\tthis.stringFormat = stringFormat;\n\t\t}\n\t\tBufferWriter.prototype = Object.create(Writer.prototype);\n\t\tBufferWriter.prototype.writeByte = function (value) {\n\t\t\tthis.latestBuffer[this.latestBufferOffset++] = value;\n\t\t\tif (this.latestBufferOffset >= this.latestBuffer.length) {\n\t\t\t\tthis.completeBuffers.push(this.latestBuffer);\n\t\t\t\tthis.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n\t\t\t\tthis.latestBufferOffset = 0;\n\t\t\t}\n\t\t\tthis.byteLength++;\n\t\t}\n\t\tBufferWriter.prototype.writeFloat32 = function (value) {\n\t\t\tvar buffer = Buffer.alloc(4);\n\t\t\tbuffer.writeFloatBE(value, 0);\n\t\t\tthis.writeBuffer(buffer);\n\t\t};\n\t\tBufferWriter.prototype.writeFloat64 = function (value) {\n\t\t\tvar buffer = Buffer.alloc(8);\n\t\t\tbuffer.writeDoubleBE(value, 0);\n\t\t\tthis.writeBuffer(buffer);\n\t\t};\n\t\tBufferWriter.prototype.writeString = function (string, lengthFunc) {\n\t\t\tvar buffer = Buffer.from(string, 'utf-8');\n\t\t\tlengthFunc(buffer.length);\n\t\t\tthis.writeBuffer(buffer);\n\t\t};\n\t\tBufferWriter.prototype.canWriteBinary = function (data) {\n\t\t\treturn data instanceof Buffer;\n\t\t};\n\t\tBufferWriter.prototype.writeBinary = function (buffer, lengthFunc) {\n\t\t\tlengthFunc(buffer.length);\n\t\t\tthis.writeBuffer(buffer);\n\t\t};\n\t\tBufferWriter.prototype.writeBuffer = function (chunk) {\n\t\t\tif (!(chunk instanceof Buffer)) throw new TypeError('BufferWriter only accepts Buffers');\n\t\t\tif (!this.latestBufferOffset) {\n\t\t\t\tthis.completeBuffers.push(chunk);\n\t\t\t} else if (this.latestBuffer.length - this.latestBufferOffset >= chunk.length) {\n\t\t\t\tchunk.copy(this.latestBuffer, this.latestBufferOffset);\n\t\t\t\tthis.latestBufferOffset += chunk.length;\n\t\t\t\tif (this.latestBufferOffset >= this.latestBuffer.length) {\n\t\t\t\t\tthis.completeBuffers.push(this.latestBuffer);\n\t\t\t\t\tthis.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n\t\t\t\t\tthis.latestBufferOffset = 0;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.completeBuffers.push(this.latestBuffer.slice(0, this.latestBufferOffset));\n\t\t\t\tthis.completeBuffers.push(chunk);\n\t\t\t\tthis.latestBuffer = Buffer.alloc(this.defaultBufferLength);\n\t\t\t\tthis.latestBufferOffset = 0;\n\t\t\t}\n\t\t\tthis.byteLength += chunk.length;\n\t\t}\n\t\tBufferWriter.prototype.result = function () {\n\t\t\t// Copies them all into a single Buffer\n\t\t\tvar result = Buffer.alloc(this.byteLength);\n\t\t\tvar offset = 0;\n\t\t\tfor (var i = 0; i < this.completeBuffers.length; i++) {\n\t\t\t\tvar buffer = this.completeBuffers[i];\n\t\t\t\tbuffer.copy(result, offset, 0, buffer.length);\n\t\t\t\toffset += buffer.length;\n\t\t\t}\n\t\t\tif (this.latestBufferOffset) {\n\t\t\t\tthis.latestBuffer.copy(result, offset, 0, this.latestBufferOffset);\n\t\t\t}\n\t\t\t\n\t\t\tif (this.stringFormat) return result.toString(this.stringFormat);\n\t\t\treturn result;\n\t\t}\n\t\t\n\t\tif (typeof Buffer === 'function') {\n\t\t\tapi.addReader(function (data, format) {\n\t\t\t\tif (data instanceof Buffer) {\n\t\t\t\t\treturn new BufferReader(data);\n\t\t\t\t}\n\t\t\t\tif (format === 'hex' || format === 'base64') {\n\t\t\t\t\tvar buffer = Buffer.from(data, format);\n\t\t\t\t\treturn new BufferReader(buffer);\n\t\t\t\t}\n\t\t\t});\n\t\t\tapi.addWriter(function (format) {\n\t\t\t\tif (!format || format === 'buffer') {\n\t\t\t\t\treturn new BufferWriter();\n\t\t\t\t} else if (format === 'hex' || format === 'base64') {\n\t\t\t\t\treturn new BufferWriter(format);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\t\n\t\t/** Hex-encoding (and Latin1) for browser **/\n\t\tfunction HexReader(hex) {\n\t\t\tthis.hex = hex;\n\t\t\tthis.pos = 0;\n\t\t}\n\t\tHexReader.prototype = Object.create(Reader.prototype);\n\t\tHexReader.prototype.peekByte = function () {\n\t\t\tvar pair = this.hex.substring(this.pos, 2);\n\t\t\treturn parseInt(pair, 16);\n\t\t};\n\t\tHexReader.prototype.readByte = function () {\n\t\t\tvar pair = this.hex.substring(this.pos, this.pos + 2);\n\t\t\tthis.pos += 2;\n\t\t\treturn parseInt(pair, 16);\n\t\t};\n\t\tHexReader.prototype.readChunk = function (length) {\n\t\t\tvar hex = this.hex.substring(this.pos, this.pos + length*2);\n\t\t\tthis.pos += length*2;\n\t\t\tif (typeof Buffer === 'function') return Buffer.from(hex, 'hex');\n\t\t\treturn new BinaryHex(hex);\n\t\t};\n\t\n\t\tfunction HexWriter(finalFormat) {\n\t\t\tthis.$hex = '';\n\t\t\tthis.finalFormat = finalFormat || 'hex'\n\t\t}\n\t\tHexWriter.prototype = Object.create(Writer.prototype);\n\t\tHexWriter.prototype.writeByte = function (value) {\n\t\t\tif (value < 0 || value > 255) throw new Error('Byte value out of range: ' + value);\n\t\t\tvar hex = value.toString(16);\n\t\t\tif (hex.length == 1) {\n\t\t\t\thex = '0' + hex;\n\t\t\t}\n\t\t\tthis.$hex += hex;\n\t\t}\n\t\tHexWriter.prototype.canWriteBinary = function (chunk) {\n\t\t\treturn chunk instanceof BinaryHex || (typeof Buffer === 'function' && chunk instanceof Buffer);\n\t\t}\n\t\tHexWriter.prototype.writeBinary = function (chunk, lengthFunction) {\n\t\t\tif (chunk instanceof BinaryHex) {\n\t\t\t\tlengthFunction(chunk.length());\n\t\t\t\tthis.$hex += chunk.$hex;\n\t\t\t} else if (typeof Buffer === 'function' && chunk instanceof Buffer) {\n\t\t\t\tlengthFunction(chunk.length);\n\t\t\t\tthis.$hex += chunk.toString('hex');\n\t\t\t} else {\n\t\t\t\tthrow new TypeError('HexWriter only accepts BinaryHex or Buffers');\n\t\t\t}\n\t\t}\n\t\tHexWriter.prototype.result = function () {\n\t\t\tif (this.finalFormat === 'buffer' && typeof Buffer === 'function') {\n\t\t\t\treturn Buffer.from(this.$hex, 'hex');\n\t\t\t}\n\t\t\treturn new BinaryHex(this.$hex).toString(this.finalFormat);\n\t\t}\n\t\tHexWriter.prototype.writeString = function (string, lengthFunction) {\n\t\t\tvar buffer = BinaryHex.fromUtf8String(string);\n\t\t\tlengthFunction(buffer.length());\n\t\t\tthis.$hex += buffer.$hex;\n\t\t}\n\n\t\tapi.addReader(function (data, format) {\n\t\t\tif (data instanceof BinaryHex || data.$hex) {\n\t\t\t\treturn new HexReader(data.$hex);\n\t\t\t}\n\t\t\tif (format === 'hex') {\n\t\t\t\treturn new HexReader(data)\n\t\t\t}\n\t\t});\n\t\tapi.addWriter(function (format) {\n\t\t\tif (format === 'hex') {\n\t\t\t\treturn new HexWriter();\n\t\t\t}\n\t\t});\n\n\t\treturn api;\n\t})();\n\n\tCBOR.addSemanticEncode(0, function (data) {\n\t\tif (data instanceof Date) {\n\t\t\treturn data.toISOString();\n\t\t}\n\t}).addSemanticDecode(0, function (isoString) {\n\t\treturn new Date(isoString);\n\t}).addSemanticDecode(1, function (isoString) {\n\t\treturn new Date(isoString);\n\t});\n\n\treturn CBOR;\n});","/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction strictIndexOf(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = strictIndexOf;\n","/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\nfunction baseIsNaN(value) {\n  return value !== value;\n}\n\nmodule.exports = baseIsNaN;\n","/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction baseFindIndex(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while ((fromRight ? index-- : ++index < length)) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = baseFindIndex;\n","/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","'use strict';\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }\n\nvar codes = {};\n\nfunction createErrorType(code, message, Base) {\n  if (!Base) {\n    Base = Error;\n  }\n\n  function getMessage(arg1, arg2, arg3) {\n    if (typeof message === 'string') {\n      return message;\n    } else {\n      return message(arg1, arg2, arg3);\n    }\n  }\n\n  var NodeError =\n  /*#__PURE__*/\n  function (_Base) {\n    _inheritsLoose(NodeError, _Base);\n\n    function NodeError(arg1, arg2, arg3) {\n      return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;\n    }\n\n    return NodeError;\n  }(Base);\n\n  NodeError.prototype.name = Base.name;\n  NodeError.prototype.code = code;\n  codes[code] = NodeError;\n} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js\n\n\nfunction oneOf(expected, thing) {\n  if (Array.isArray(expected)) {\n    var len = expected.length;\n    expected = expected.map(function (i) {\n      return String(i);\n    });\n\n    if (len > 2) {\n      return \"one of \".concat(thing, \" \").concat(expected.slice(0, len - 1).join(', '), \", or \") + expected[len - 1];\n    } else if (len === 2) {\n      return \"one of \".concat(thing, \" \").concat(expected[0], \" or \").concat(expected[1]);\n    } else {\n      return \"of \".concat(thing, \" \").concat(expected[0]);\n    }\n  } else {\n    return \"of \".concat(thing, \" \").concat(String(expected));\n  }\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\n\n\nfunction startsWith(str, search, pos) {\n  return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\n\n\nfunction endsWith(str, search, this_len) {\n  if (this_len === undefined || this_len > str.length) {\n    this_len = str.length;\n  }\n\n  return str.substring(this_len - search.length, this_len) === search;\n} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes\n\n\nfunction includes(str, search, start) {\n  if (typeof start !== 'number') {\n    start = 0;\n  }\n\n  if (start + search.length > str.length) {\n    return false;\n  } else {\n    return str.indexOf(search, start) !== -1;\n  }\n}\n\ncreateErrorType('ERR_INVALID_OPT_VALUE', function (name, value) {\n  return 'The value \"' + value + '\" is invalid for option \"' + name + '\"';\n}, TypeError);\ncreateErrorType('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {\n  // determiner: 'must be' or 'must not be'\n  var determiner;\n\n  if (typeof expected === 'string' && startsWith(expected, 'not ')) {\n    determiner = 'must not be';\n    expected = expected.replace(/^not /, '');\n  } else {\n    determiner = 'must be';\n  }\n\n  var msg;\n\n  if (endsWith(name, ' argument')) {\n    // For cases like 'first argument'\n    msg = \"The \".concat(name, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  } else {\n    var type = includes(name, '.') ? 'property' : 'argument';\n    msg = \"The \\\"\".concat(name, \"\\\" \").concat(type, \" \").concat(determiner, \" \").concat(oneOf(expected, 'type'));\n  }\n\n  msg += \". Received type \".concat(typeof actual);\n  return msg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');\ncreateErrorType('ERR_METHOD_NOT_IMPLEMENTED', function (name) {\n  return 'The ' + name + ' method is not implemented';\n});\ncreateErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');\ncreateErrorType('ERR_STREAM_DESTROYED', function (name) {\n  return 'Cannot call ' + name + ' after a stream was destroyed';\n});\ncreateErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');\ncreateErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');\ncreateErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');\ncreateErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);\ncreateErrorType('ERR_UNKNOWN_ENCODING', function (arg) {\n  return 'Unknown encoding: ' + arg;\n}, TypeError);\ncreateErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');\nmodule.exports.codes = codes;\n","'use strict'; // undocumented cb() API, needed for core, not for public API\n\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err) {\n      if (!this._writableState) {\n        process.nextTick(emitErrorNT, this, err);\n      } else if (!this._writableState.errorEmitted) {\n        this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorNT, this, err);\n      }\n    }\n\n    return this;\n  } // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  } // if this is a duplex stream mark the writable part as destroyed as well\n\n\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      if (!_this._writableState) {\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else if (!_this._writableState.errorEmitted) {\n        _this._writableState.errorEmitted = true;\n        process.nextTick(emitErrorAndCloseNT, _this, err);\n      } else {\n        process.nextTick(emitCloseNT, _this);\n      }\n    } else if (cb) {\n      process.nextTick(emitCloseNT, _this);\n      cb(err);\n    } else {\n      process.nextTick(emitCloseNT, _this);\n    }\n  });\n\n  return this;\n}\n\nfunction emitErrorAndCloseNT(self, err) {\n  emitErrorNT(self, err);\n  emitCloseNT(self);\n}\n\nfunction emitCloseNT(self) {\n  if (self._writableState && !self._writableState.emitClose) return;\n  if (self._readableState && !self._readableState.emitClose) return;\n  self.emit('close');\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finalCalled = false;\n    this._writableState.prefinished = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nfunction errorOrDestroy(stream, err) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n  var rState = stream._readableState;\n  var wState = stream._writableState;\n  if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy,\n  errorOrDestroy: errorOrDestroy\n};","module.exports = require('events').EventEmitter;\n","'use strict';\n\nvar ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;\n\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\n\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n\n  if (hwm != null) {\n    if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {\n      var name = isDuplex ? duplexKey : 'highWaterMark';\n      throw new ERR_INVALID_OPT_VALUE(name, hwm);\n    }\n\n    return Math.floor(hwm);\n  } // Default value\n\n\n  return state.objectMode ? 16 : 16 * 1024;\n}\n\nmodule.exports = {\n  getHighWaterMark: getHighWaterMark\n};","module.exports = function () {\n  throw new Error('Readable.from is not available in the browser')\n};\n","'use strict';\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar _require = require('buffer'),\n    Buffer = _require.Buffer;\n\nvar _require2 = require('util'),\n    inspect = _require2.inspect;\n\nvar custom = inspect && inspect.custom || 'inspect';\n\nfunction copyBuffer(src, target, offset) {\n  Buffer.prototype.copy.call(src, target, offset);\n}\n\nmodule.exports =\n/*#__PURE__*/\nfunction () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  _createClass(BufferList, [{\n    key: \"push\",\n    value: function push(v) {\n      var entry = {\n        data: v,\n        next: null\n      };\n      if (this.length > 0) this.tail.next = entry;else this.head = entry;\n      this.tail = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"unshift\",\n    value: function unshift(v) {\n      var entry = {\n        data: v,\n        next: this.head\n      };\n      if (this.length === 0) this.tail = entry;\n      this.head = entry;\n      ++this.length;\n    }\n  }, {\n    key: \"shift\",\n    value: function shift() {\n      if (this.length === 0) return;\n      var ret = this.head.data;\n      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n      --this.length;\n      return ret;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.head = this.tail = null;\n      this.length = 0;\n    }\n  }, {\n    key: \"join\",\n    value: function join(s) {\n      if (this.length === 0) return '';\n      var p = this.head;\n      var ret = '' + p.data;\n\n      while (p = p.next) {\n        ret += s + p.data;\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"concat\",\n    value: function concat(n) {\n      if (this.length === 0) return Buffer.alloc(0);\n      var ret = Buffer.allocUnsafe(n >>> 0);\n      var p = this.head;\n      var i = 0;\n\n      while (p) {\n        copyBuffer(p.data, ret, i);\n        i += p.data.length;\n        p = p.next;\n      }\n\n      return ret;\n    } // Consumes a specified amount of bytes or characters from the buffered data.\n\n  }, {\n    key: \"consume\",\n    value: function consume(n, hasStrings) {\n      var ret;\n\n      if (n < this.head.data.length) {\n        // `slice` is the same for buffers and strings.\n        ret = this.head.data.slice(0, n);\n        this.head.data = this.head.data.slice(n);\n      } else if (n === this.head.data.length) {\n        // First chunk is a perfect match.\n        ret = this.shift();\n      } else {\n        // Result spans more than one buffer.\n        ret = hasStrings ? this._getString(n) : this._getBuffer(n);\n      }\n\n      return ret;\n    }\n  }, {\n    key: \"first\",\n    value: function first() {\n      return this.head.data;\n    } // Consumes a specified amount of characters from the buffered data.\n\n  }, {\n    key: \"_getString\",\n    value: function _getString(n) {\n      var p = this.head;\n      var c = 1;\n      var ret = p.data;\n      n -= ret.length;\n\n      while (p = p.next) {\n        var str = p.data;\n        var nb = n > str.length ? str.length : n;\n        if (nb === str.length) ret += str;else ret += str.slice(0, n);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === str.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = str.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Consumes a specified amount of bytes from the buffered data.\n\n  }, {\n    key: \"_getBuffer\",\n    value: function _getBuffer(n) {\n      var ret = Buffer.allocUnsafe(n);\n      var p = this.head;\n      var c = 1;\n      p.data.copy(ret);\n      n -= p.data.length;\n\n      while (p = p.next) {\n        var buf = p.data;\n        var nb = n > buf.length ? buf.length : n;\n        buf.copy(ret, ret.length - n, 0, nb);\n        n -= nb;\n\n        if (n === 0) {\n          if (nb === buf.length) {\n            ++c;\n            if (p.next) this.head = p.next;else this.head = this.tail = null;\n          } else {\n            this.head = p;\n            p.data = buf.slice(nb);\n          }\n\n          break;\n        }\n\n        ++c;\n      }\n\n      this.length -= c;\n      return ret;\n    } // Make sure the linked list only shows the minimal necessary information.\n\n  }, {\n    key: custom,\n    value: function value(_, options) {\n      return inspect(this, _objectSpread({}, options, {\n        // Only inspect one level.\n        depth: 0,\n        // It should not recurse.\n        customInspect: false\n      }));\n    }\n  }]);\n\n  return BufferList;\n}();","'use strict';\n\nvar _Object$setPrototypeO;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nvar finished = require('./end-of-stream');\n\nvar kLastResolve = Symbol('lastResolve');\nvar kLastReject = Symbol('lastReject');\nvar kError = Symbol('error');\nvar kEnded = Symbol('ended');\nvar kLastPromise = Symbol('lastPromise');\nvar kHandlePromise = Symbol('handlePromise');\nvar kStream = Symbol('stream');\n\nfunction createIterResult(value, done) {\n  return {\n    value: value,\n    done: done\n  };\n}\n\nfunction readAndResolve(iter) {\n  var resolve = iter[kLastResolve];\n\n  if (resolve !== null) {\n    var data = iter[kStream].read(); // we defer if data is null\n    // we can be expecting either 'end' or\n    // 'error'\n\n    if (data !== null) {\n      iter[kLastPromise] = null;\n      iter[kLastResolve] = null;\n      iter[kLastReject] = null;\n      resolve(createIterResult(data, false));\n    }\n  }\n}\n\nfunction onReadable(iter) {\n  // we wait for the next tick, because it might\n  // emit an error with process.nextTick\n  process.nextTick(readAndResolve, iter);\n}\n\nfunction wrapForNext(lastPromise, iter) {\n  return function (resolve, reject) {\n    lastPromise.then(function () {\n      if (iter[kEnded]) {\n        resolve(createIterResult(undefined, true));\n        return;\n      }\n\n      iter[kHandlePromise](resolve, reject);\n    }, reject);\n  };\n}\n\nvar AsyncIteratorPrototype = Object.getPrototypeOf(function () {});\nvar ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {\n  get stream() {\n    return this[kStream];\n  },\n\n  next: function next() {\n    var _this = this;\n\n    // if we have detected an error in the meanwhile\n    // reject straight away\n    var error = this[kError];\n\n    if (error !== null) {\n      return Promise.reject(error);\n    }\n\n    if (this[kEnded]) {\n      return Promise.resolve(createIterResult(undefined, true));\n    }\n\n    if (this[kStream].destroyed) {\n      // We need to defer via nextTick because if .destroy(err) is\n      // called, the error will be emitted via nextTick, and\n      // we cannot guarantee that there is no error lingering around\n      // waiting to be emitted.\n      return new Promise(function (resolve, reject) {\n        process.nextTick(function () {\n          if (_this[kError]) {\n            reject(_this[kError]);\n          } else {\n            resolve(createIterResult(undefined, true));\n          }\n        });\n      });\n    } // if we have multiple next() calls\n    // we will wait for the previous Promise to finish\n    // this logic is optimized to support for await loops,\n    // where next() is only called once at a time\n\n\n    var lastPromise = this[kLastPromise];\n    var promise;\n\n    if (lastPromise) {\n      promise = new Promise(wrapForNext(lastPromise, this));\n    } else {\n      // fast path needed to support multiple this.push()\n      // without triggering the next() queue\n      var data = this[kStream].read();\n\n      if (data !== null) {\n        return Promise.resolve(createIterResult(data, false));\n      }\n\n      promise = new Promise(this[kHandlePromise]);\n    }\n\n    this[kLastPromise] = promise;\n    return promise;\n  }\n}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function () {\n  return this;\n}), _defineProperty(_Object$setPrototypeO, \"return\", function _return() {\n  var _this2 = this;\n\n  // destroy(err, cb) is a private API\n  // we can guarantee we have that here, because we control the\n  // Readable class this is attached to\n  return new Promise(function (resolve, reject) {\n    _this2[kStream].destroy(null, function (err) {\n      if (err) {\n        reject(err);\n        return;\n      }\n\n      resolve(createIterResult(undefined, true));\n    });\n  });\n}), _Object$setPrototypeO), AsyncIteratorPrototype);\n\nvar createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {\n  var _Object$create;\n\n  var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty(_Object$create, kStream, {\n    value: stream,\n    writable: true\n  }), _defineProperty(_Object$create, kLastResolve, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kLastReject, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kError, {\n    value: null,\n    writable: true\n  }), _defineProperty(_Object$create, kEnded, {\n    value: stream._readableState.endEmitted,\n    writable: true\n  }), _defineProperty(_Object$create, kHandlePromise, {\n    value: function value(resolve, reject) {\n      var data = iterator[kStream].read();\n\n      if (data) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        resolve(createIterResult(data, false));\n      } else {\n        iterator[kLastResolve] = resolve;\n        iterator[kLastReject] = reject;\n      }\n    },\n    writable: true\n  }), _Object$create));\n  iterator[kLastPromise] = null;\n  finished(stream, function (err) {\n    if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n      var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise\n      // returned by next() and store the error\n\n      if (reject !== null) {\n        iterator[kLastPromise] = null;\n        iterator[kLastResolve] = null;\n        iterator[kLastReject] = null;\n        reject(err);\n      }\n\n      iterator[kError] = err;\n      return;\n    }\n\n    var resolve = iterator[kLastResolve];\n\n    if (resolve !== null) {\n      iterator[kLastPromise] = null;\n      iterator[kLastResolve] = null;\n      iterator[kLastReject] = null;\n      resolve(createIterResult(undefined, true));\n    }\n\n    iterator[kEnded] = true;\n  });\n  stream.on('readable', onReadable.bind(null, iterator));\n  return iterator;\n};\n\nmodule.exports = createReadableStreamAsyncIterator;","var getNative = require('./_getNative');\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n","var MapCache = require('./_MapCache');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n","/* global module */\n\n/**\n * Library for sampling of random values from a discrete probability distribution, \n * using the Walker-Vose alias method.\n *\n * Creates a new Sample instance for the given probabilities and outcomes.\n *\n * @param {Array} the probabilities.\n * @param {Array} the outcomes. Index is assumed as outcome if not provided.\n */\nfunction Sample(probabilities, outcomes, rng) {\n  'use strict';\n\n  this.alias = [];\n  this.prob  = [];\n  this.outcomes = outcomes || this.indexedOutcomes(probabilities.length);\n  this.rng = rng || Math.random\n  this.precomputeAlias(probabilities);\n}\n\n/**\n * Samples outcomes from the underlying probability distribution.\n *\n * @param {int} the number of samples. Optional parameter, defaults to 1.\n * @return {Object} a random outcome according to the underlying probability distribution \n *                  and the requested number of samples. If the requested number of samples \n *                  is greater than 1 this method returns an array.\n */\nSample.prototype.next = function (numOfSamples) {\n  'use strict';\n\n  var n   = numOfSamples || 1,\n      out = [],\n      i   = 0;\n\n  do {\n    var c = Math.floor(this.rng() * this.prob.length);\n    out[i] = this.outcomes[(this.rng() < this.prob[c]) ? c : this.alias[c]];\n  } while (++i < n);\n\n  return (n > 1) ? out : out[0];\n};\n\n/**\n * Ported from ransampl.c\n * Scientific Computing Group of JCNS at MLZ Garching.\n * http://apps.jcns.fz-juelich.de/doku/sc/ransampl\n */\nSample.prototype.precomputeAlias = function (p) {\n  'use strict';\n\n  var n   = p.length,\n      sum = 0,\n      nS  = 0,\n      nL  = 0,\n      P   = [],\n      S   = [],\n      L   = [],\n      g, i, a;\n\n  // Normalize probabilities\n  for (i = 0; i < n; ++i) {\n    if (p[i] < 0) {\n      throw 'Probability must be a positive: p[' + i + ']=' + p[i];\n    }\n    sum += p[i];\n  }\n\n  if (sum === 0) {\n    throw 'Probability cannot be zero.';\n  }\n\n  for (i = 0; i < n; ++i) {\n    P[i] = p[i] * n / sum;\n  }\n\n  // Set separate index lists for small and large probabilities:\n  for (i = n - 1; i >= 0; --i) {\n    // at variance from Schwarz, we revert the index order\n    if (P[i] < 1)\n      S[nS++] = i;\n    else\n      L[nL++] = i;\n  }\n\n  // Work through index lists\n  while (nS && nL) {\n    a = S[--nS]; // Schwarz's l\n    g = L[--nL]; // Schwarz's g\n\n    this.prob[a] = P[a];\n    this.alias[a] = g;\n\n    P[g] = P[g] + P[a] - 1;\n    if (P[g] < 1)\n      S[nS++] = g;\n    else\n      L[nL++] = g;\n  }\n\n  while (nL)\n    this.prob[L[--nL]] = 1;\n\n  while (nS)\n    // can only happen through numeric instability\n    this.prob[S[--nS]] = 1;\n};\n\nSample.prototype.indexedOutcomes = function (n) {\n  'use strict';\n\n  var o = [];\n  for (var i = 0; i < n; i++) o[i] = i;\n  return o;\n};\n\nSample.prototype.randomInt = function (min, max) {\n  'use strict';\n\n  return Math.floor(this.rng() * (max - min)) + min;\n};\n\nmodule.exports = function (probabilities, outcomes, rng) {\n  'use strict';\n\n  return new Sample(probabilities, outcomes, rng);\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\nconst bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nconst jsbi_1 = __importDefault(require(\"jsbi\"));\nconst MAX_UINT64 = 0xFFFFFFFFFFFFFFFF;\nconst rotl = (x, k) => jsbi_1.default.bitwiseXor(jsbi_1.default.asUintN(64, jsbi_1.default.leftShift(x, jsbi_1.default.BigInt(k))), jsbi_1.default.BigInt(jsbi_1.default.asUintN(64, jsbi_1.default.signedRightShift(x, (jsbi_1.default.subtract(jsbi_1.default.BigInt(64), jsbi_1.default.BigInt(k)))))));\nclass Xoshiro {\n    constructor(seed) {\n        this.next = () => {\n            return new bignumber_js_1.default(this.roll().toString());\n        };\n        this.nextDouble = () => {\n            return new bignumber_js_1.default(this.roll().toString()).div(MAX_UINT64 + 1);\n        };\n        this.nextInt = (low, high) => {\n            return Math.floor((this.nextDouble().toNumber() * (high - low + 1)) + low);\n        };\n        this.nextByte = () => this.nextInt(0, 255);\n        this.nextData = (count) => ([...new Array(count)].map(() => this.nextByte()));\n        const digest = utils_1.sha256Hash(seed);\n        this.s = [jsbi_1.default.BigInt(0), jsbi_1.default.BigInt(0), jsbi_1.default.BigInt(0), jsbi_1.default.BigInt(0)];\n        this.setS(digest);\n    }\n    setS(digest) {\n        for (let i = 0; i < 4; i++) {\n            let o = i * 8;\n            let v = jsbi_1.default.BigInt(0);\n            for (let n = 0; n < 8; n++) {\n                v = jsbi_1.default.asUintN(64, jsbi_1.default.leftShift(v, jsbi_1.default.BigInt(8)));\n                v = jsbi_1.default.asUintN(64, jsbi_1.default.bitwiseOr(v, jsbi_1.default.BigInt(digest[o + n])));\n            }\n            this.s[i] = jsbi_1.default.asUintN(64, v);\n        }\n    }\n    roll() {\n        const result = jsbi_1.default.asUintN(64, jsbi_1.default.multiply(rotl(jsbi_1.default.asUintN(64, jsbi_1.default.multiply(this.s[1], jsbi_1.default.BigInt(5))), 7), jsbi_1.default.BigInt(9)));\n        const t = jsbi_1.default.asUintN(64, jsbi_1.default.leftShift(this.s[1], jsbi_1.default.BigInt(17)));\n        this.s[2] = jsbi_1.default.asUintN(64, jsbi_1.default.bitwiseXor(this.s[2], jsbi_1.default.BigInt(this.s[0])));\n        this.s[3] = jsbi_1.default.asUintN(64, jsbi_1.default.bitwiseXor(this.s[3], jsbi_1.default.BigInt(this.s[1])));\n        this.s[1] = jsbi_1.default.asUintN(64, jsbi_1.default.bitwiseXor(this.s[1], jsbi_1.default.BigInt(this.s[2])));\n        this.s[0] = jsbi_1.default.asUintN(64, jsbi_1.default.bitwiseXor(this.s[0], jsbi_1.default.BigInt(this.s[3])));\n        this.s[2] = jsbi_1.default.asUintN(64, jsbi_1.default.bitwiseXor(this.s[2], jsbi_1.default.BigInt(t)));\n        this.s[3] = jsbi_1.default.asUintN(64, rotl(this.s[3], 45));\n        return result;\n    }\n}\nexports.default = Xoshiro;\n//# sourceMappingURL=xoshiro.js.map","'use strict';\n\nmodule.exports = require('./es6/crc16').default;\n","'use strict';\n\nmodule.exports = require('./es6/crc8').default;\n","'use strict';\n\nmodule.exports = require('./es6/crc16modbus').default;\n","'use strict';\n\nmodule.exports = require('./es6/crc16ccitt').default;\n","'use strict';\n\nmodule.exports = require('./es6/crc24').default;\n","'use strict';\n\nmodule.exports = require('./es6/crcjam').default;\n","'use strict';\n\nmodule.exports = require('./es6/crc32').default;\n","'use strict';\n\nmodule.exports = require('./es6/crc81wire').default;\n","'use strict';\n\nmodule.exports = require('./es6/crc16xmodem').default;\n","'use strict';\n\nmodule.exports = require('./es6/crc1').default;\n","'use strict';\n\nmodule.exports = require('./es6/crc16kermit').default;\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) -- > 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","(function(i,_){\"object\"==typeof exports&&\"undefined\"!=typeof module?_(exports):\"function\"==typeof define&&define.amd?define([\"exports\"],_):(i=i||self,_(i.JSBI={}))})(this,function(i){'use strict';var _=Math.clz32,t=Math.abs,e=Math.max,g=Math.floor;class o extends Array{constructor(i,_){if(super(i),this.sign=_,i>o.__kMaxLength)throw new RangeError(\"Maximum BigInt size exceeded\")}static BigInt(i){var _=Number.isFinite;if(\"number\"==typeof i){if(0===i)return o.__zero();if(o.__isOneDigitInt(i))return 0>i?o.__oneDigit(-i,!0):o.__oneDigit(i,!1);if(!_(i)||g(i)!==i)throw new RangeError(\"The number \"+i+\" cannot be converted to BigInt because it is not an integer\");return o.__fromDouble(i)}if(\"string\"==typeof i){const _=o.__fromString(i);if(null===_)throw new SyntaxError(\"Cannot convert \"+i+\" to a BigInt\");return _}if(\"boolean\"==typeof i)return!0===i?o.__oneDigit(1,!1):o.__zero();if(\"object\"==typeof i){if(i.constructor===o)return i;const _=o.__toPrimitive(i);return o.BigInt(_)}throw new TypeError(\"Cannot convert \"+i+\" to a BigInt\")}toDebugString(){const i=[\"BigInt[\"];for(const _ of this)i.push((_?(_>>>0).toString(16):_)+\", \");return i.push(\"]\"),i.join(\"\")}toString(i=10){if(2>i||36<i)throw new RangeError(\"toString() radix argument must be between 2 and 36\");return 0===this.length?\"0\":0==(i&i-1)?o.__toStringBasePowerOfTwo(this,i):o.__toStringGeneric(this,i,!1)}static toNumber(i){const _=i.length;if(0===_)return 0;if(1===_){const _=i.__unsignedDigit(0);return i.sign?-_:_}const t=i.__digit(_-1),e=o.__clz30(t),n=30*_-e;if(1024<n)return i.sign?-Infinity:1/0;let g=n-1,s=t,l=_-1;const r=e+3;let a=32===r?0:s<<r;a>>>=12;const u=r-12;let d=12<=r?0:s<<20+r,h=20+r;for(0<u&&0<l&&(l--,s=i.__digit(l),a|=s>>>30-u,d=s<<u+2,h=u+2);0<h&&0<l;)l--,s=i.__digit(l),d|=30<=h?s<<h-30:s>>>30-h,h-=30;const m=o.__decideRounding(i,h,l,s);if((1===m||0===m&&1==(1&d))&&(d=d+1>>>0,0===d&&(a++,0!=a>>>20&&(a=0,g++,1023<g))))return i.sign?-Infinity:1/0;const b=i.sign?-2147483648:0;return g=g+1023<<20,o.__kBitConversionInts[1]=b|g|a,o.__kBitConversionInts[0]=d,o.__kBitConversionDouble[0]}static unaryMinus(i){if(0===i.length)return i;const _=i.__copy();return _.sign=!i.sign,_}static bitwiseNot(i){return i.sign?o.__absoluteSubOne(i).__trim():o.__absoluteAddOne(i,!0)}static exponentiate(i,_){if(_.sign)throw new RangeError(\"Exponent must be positive\");if(0===_.length)return o.__oneDigit(1,!1);if(0===i.length)return i;if(1===i.length&&1===i.__digit(0))return i.sign&&0==(1&_.__digit(0))?o.unaryMinus(i):i;if(1<_.length)throw new RangeError(\"BigInt too big\");let t=_.__unsignedDigit(0);if(1===t)return i;if(t>=o.__kMaxLengthBits)throw new RangeError(\"BigInt too big\");if(1===i.length&&2===i.__digit(0)){const _=1+(0|t/30),e=i.sign&&0!=(1&t),n=new o(_,e);n.__initializeDigits();const g=1<<t%30;return n.__setDigit(_-1,g),n}let e=null,n=i;for(0!=(1&t)&&(e=i),t>>=1;0!==t;t>>=1)n=o.multiply(n,n),0!=(1&t)&&(null===e?e=n:e=o.multiply(e,n));return e}static multiply(_,t){if(0===_.length)return _;if(0===t.length)return t;let i=_.length+t.length;30<=_.__clzmsd()+t.__clzmsd()&&i--;const e=new o(i,_.sign!==t.sign);e.__initializeDigits();for(let n=0;n<_.length;n++)o.__multiplyAccumulate(t,_.__digit(n),e,n);return e.__trim()}static divide(i,_){if(0===_.length)throw new RangeError(\"Division by zero\");if(0>o.__absoluteCompare(i,_))return o.__zero();const t=i.sign!==_.sign,e=_.__unsignedDigit(0);let n;if(1===_.length&&32767>=e){if(1===e)return t===i.sign?i:o.unaryMinus(i);n=o.__absoluteDivSmall(i,e,null)}else n=o.__absoluteDivLarge(i,_,!0,!1);return n.sign=t,n.__trim()}static remainder(i,_){if(0===_.length)throw new RangeError(\"Division by zero\");if(0>o.__absoluteCompare(i,_))return i;const t=_.__unsignedDigit(0);if(1===_.length&&32767>=t){if(1===t)return o.__zero();const _=o.__absoluteModSmall(i,t);return 0===_?o.__zero():o.__oneDigit(_,i.sign)}const e=o.__absoluteDivLarge(i,_,!1,!0);return e.sign=i.sign,e.__trim()}static add(i,_){const t=i.sign;return t===_.sign?o.__absoluteAdd(i,_,t):0<=o.__absoluteCompare(i,_)?o.__absoluteSub(i,_,t):o.__absoluteSub(_,i,!t)}static subtract(i,_){const t=i.sign;return t===_.sign?0<=o.__absoluteCompare(i,_)?o.__absoluteSub(i,_,t):o.__absoluteSub(_,i,!t):o.__absoluteAdd(i,_,t)}static leftShift(i,_){return 0===_.length||0===i.length?i:_.sign?o.__rightShiftByAbsolute(i,_):o.__leftShiftByAbsolute(i,_)}static signedRightShift(i,_){return 0===_.length||0===i.length?i:_.sign?o.__leftShiftByAbsolute(i,_):o.__rightShiftByAbsolute(i,_)}static unsignedRightShift(){throw new TypeError(\"BigInts have no unsigned right shift; use >> instead\")}static lessThan(i,_){return 0>o.__compareToBigInt(i,_)}static lessThanOrEqual(i,_){return 0>=o.__compareToBigInt(i,_)}static greaterThan(i,_){return 0<o.__compareToBigInt(i,_)}static greaterThanOrEqual(i,_){return 0<=o.__compareToBigInt(i,_)}static equal(_,t){if(_.sign!==t.sign)return!1;if(_.length!==t.length)return!1;for(let e=0;e<_.length;e++)if(_.__digit(e)!==t.__digit(e))return!1;return!0}static notEqual(i,_){return!o.equal(i,_)}static bitwiseAnd(i,_){if(!i.sign&&!_.sign)return o.__absoluteAnd(i,_).__trim();if(i.sign&&_.sign){const t=e(i.length,_.length)+1;let n=o.__absoluteSubOne(i,t);const g=o.__absoluteSubOne(_);return n=o.__absoluteOr(n,g,n),o.__absoluteAddOne(n,!0,n).__trim()}return i.sign&&([i,_]=[_,i]),o.__absoluteAndNot(i,o.__absoluteSubOne(_)).__trim()}static bitwiseXor(i,_){if(!i.sign&&!_.sign)return o.__absoluteXor(i,_).__trim();if(i.sign&&_.sign){const t=e(i.length,_.length),n=o.__absoluteSubOne(i,t),g=o.__absoluteSubOne(_);return o.__absoluteXor(n,g,n).__trim()}const t=e(i.length,_.length)+1;i.sign&&([i,_]=[_,i]);let n=o.__absoluteSubOne(_,t);return n=o.__absoluteXor(n,i,n),o.__absoluteAddOne(n,!0,n).__trim()}static bitwiseOr(i,_){const t=e(i.length,_.length);if(!i.sign&&!_.sign)return o.__absoluteOr(i,_).__trim();if(i.sign&&_.sign){let e=o.__absoluteSubOne(i,t);const n=o.__absoluteSubOne(_);return e=o.__absoluteAnd(e,n,e),o.__absoluteAddOne(e,!0,e).__trim()}i.sign&&([i,_]=[_,i]);let n=o.__absoluteSubOne(_,t);return n=o.__absoluteAndNot(n,i,n),o.__absoluteAddOne(n,!0,n).__trim()}static asIntN(_,t){if(0===t.length)return t;if(_=g(_),0>_)throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");if(0===_)return o.__zero();if(_>=o.__kMaxLengthBits)return t;const e=0|(_+29)/30;if(t.length<e)return t;const s=t.__unsignedDigit(e-1),l=1<<(_-1)%30;if(t.length===e&&s<l)return t;if(!((s&l)===l))return o.__truncateToNBits(_,t);if(!t.sign)return o.__truncateAndSubFromPowerOfTwo(_,t,!0);if(0==(s&l-1)){for(let n=e-2;0<=n;n--)if(0!==t.__digit(n))return o.__truncateAndSubFromPowerOfTwo(_,t,!1);return t.length===e&&s===l?t:o.__truncateToNBits(_,t)}return o.__truncateAndSubFromPowerOfTwo(_,t,!1)}static asUintN(i,_){if(0===_.length)return _;if(i=g(i),0>i)throw new RangeError(\"Invalid value: not (convertible to) a safe integer\");if(0===i)return o.__zero();if(_.sign){if(i>o.__kMaxLengthBits)throw new RangeError(\"BigInt too big\");return o.__truncateAndSubFromPowerOfTwo(i,_,!1)}if(i>=o.__kMaxLengthBits)return _;const t=0|(i+29)/30;if(_.length<t)return _;const e=i%30;if(_.length==t){if(0===e)return _;const i=_.__digit(t-1);if(0==i>>>e)return _}return o.__truncateToNBits(i,_)}static ADD(i,_){if(i=o.__toPrimitive(i),_=o.__toPrimitive(_),\"string\"==typeof i)return\"string\"!=typeof _&&(_=_.toString()),i+_;if(\"string\"==typeof _)return i.toString()+_;if(i=o.__toNumeric(i),_=o.__toNumeric(_),o.__isBigInt(i)&&o.__isBigInt(_))return o.add(i,_);if(\"number\"==typeof i&&\"number\"==typeof _)return i+_;throw new TypeError(\"Cannot mix BigInt and other types, use explicit conversions\")}static LT(i,_){return o.__compare(i,_,0)}static LE(i,_){return o.__compare(i,_,1)}static GT(i,_){return o.__compare(i,_,2)}static GE(i,_){return o.__compare(i,_,3)}static EQ(i,_){for(;;){if(o.__isBigInt(i))return o.__isBigInt(_)?o.equal(i,_):o.EQ(_,i);if(\"number\"==typeof i){if(o.__isBigInt(_))return o.__equalToNumber(_,i);if(\"object\"!=typeof _)return i==_;_=o.__toPrimitive(_)}else if(\"string\"==typeof i){if(o.__isBigInt(_))return i=o.__fromString(i),null!==i&&o.equal(i,_);if(\"object\"!=typeof _)return i==_;_=o.__toPrimitive(_)}else if(\"boolean\"==typeof i){if(o.__isBigInt(_))return o.__equalToNumber(_,+i);if(\"object\"!=typeof _)return i==_;_=o.__toPrimitive(_)}else if(\"symbol\"==typeof i){if(o.__isBigInt(_))return!1;if(\"object\"!=typeof _)return i==_;_=o.__toPrimitive(_)}else if(\"object\"==typeof i){if(\"object\"==typeof _&&_.constructor!==o)return i==_;i=o.__toPrimitive(i)}else return i==_}}static NE(i,_){return!o.EQ(i,_)}static __zero(){return new o(0,!1)}static __oneDigit(i,_){const t=new o(1,_);return t.__setDigit(0,i),t}__copy(){const _=new o(this.length,this.sign);for(let t=0;t<this.length;t++)_[t]=this[t];return _}__trim(){let i=this.length,_=this[i-1];for(;0===_;)i--,_=this[i-1],this.pop();return 0===i&&(this.sign=!1),this}__initializeDigits(){for(let _=0;_<this.length;_++)this[_]=0}static __decideRounding(i,_,t,e){if(0<_)return-1;let n;if(0>_)n=-_-1;else{if(0===t)return-1;t--,e=i.__digit(t),n=29}let g=1<<n;if(0==(e&g))return-1;if(g-=1,0!=(e&g))return 1;for(;0<t;)if(t--,0!==i.__digit(t))return 1;return 0}static __fromDouble(i){o.__kBitConversionDouble[0]=i;const _=2047&o.__kBitConversionInts[1]>>>20,t=_-1023,e=(0|t/30)+1,n=new o(e,0>i);let g=1048575&o.__kBitConversionInts[1]|1048576,s=o.__kBitConversionInts[0];const l=20,r=t%30;let a,u=0;if(r<20){const i=l-r;u=i+32,a=g>>>i,g=g<<32-i|s>>>i,s<<=32-i}else if(r===20)u=32,a=g,g=s,s=0;else{const i=r-l;u=32-i,a=g<<i|s>>>32-i,g=s<<i,s=0}n.__setDigit(e-1,a);for(let _=e-2;0<=_;_--)0<u?(u-=30,a=g>>>2,g=g<<30|s>>>2,s<<=30):a=0,n.__setDigit(_,a);return n.__trim()}static __isWhitespace(i){return!!(13>=i&&9<=i)||(159>=i?32==i:131071>=i?160==i||5760==i:196607>=i?(i&=131071,10>=i||40==i||41==i||47==i||95==i||4096==i):65279==i)}static __fromString(i,_=0){let t=0;const e=i.length;let n=0;if(n===e)return o.__zero();let g=i.charCodeAt(n);for(;o.__isWhitespace(g);){if(++n===e)return o.__zero();g=i.charCodeAt(n)}if(43===g){if(++n===e)return null;g=i.charCodeAt(n),t=1}else if(45===g){if(++n===e)return null;g=i.charCodeAt(n),t=-1}if(0===_){if(_=10,48===g){if(++n===e)return o.__zero();if(g=i.charCodeAt(n),88===g||120===g){if(_=16,++n===e)return null;g=i.charCodeAt(n)}else if(79===g||111===g){if(_=8,++n===e)return null;g=i.charCodeAt(n)}else if(66===g||98===g){if(_=2,++n===e)return null;g=i.charCodeAt(n)}}}else if(16===_&&48===g){if(++n===e)return o.__zero();if(g=i.charCodeAt(n),88===g||120===g){if(++n===e)return null;g=i.charCodeAt(n)}}if(0!=t&&10!==_)return null;for(;48===g;){if(++n===e)return o.__zero();g=i.charCodeAt(n)}const s=e-n;let l=o.__kMaxBitsPerChar[_],r=o.__kBitsPerCharTableMultiplier-1;if(s>1073741824/l)return null;const a=l*s+r>>>o.__kBitsPerCharTableShift,u=new o(0|(a+29)/30,!1),h=10>_?_:10,b=10<_?_-10:0;if(0==(_&_-1)){l>>=o.__kBitsPerCharTableShift;const _=[],t=[];let s=!1;do{let o=0,r=0;for(;;){let _;if(g-48>>>0<h)_=g-48;else if((32|g)-97>>>0<b)_=(32|g)-87;else{s=!0;break}if(r+=l,o=o<<l|_,++n===e){s=!0;break}if(g=i.charCodeAt(n),30<r+l)break}_.push(o),t.push(r)}while(!s);o.__fillFromParts(u,_,t)}else{u.__initializeDigits();let t=!1,s=0;do{let a=0,D=1;for(;;){let o;if(g-48>>>0<h)o=g-48;else if((32|g)-97>>>0<b)o=(32|g)-87;else{t=!0;break}const l=D*_;if(1073741823<l)break;if(D=l,a=a*_+o,s++,++n===e){t=!0;break}g=i.charCodeAt(n)}r=30*o.__kBitsPerCharTableMultiplier-1;const c=0|(l*s+r>>>o.__kBitsPerCharTableShift)/30;u.__inplaceMultiplyAdd(D,a,c)}while(!t)}if(n!==e){if(!o.__isWhitespace(g))return null;for(n++;n<e;n++)if(g=i.charCodeAt(n),!o.__isWhitespace(g))return null}return u.sign=-1==t,u.__trim()}static __fillFromParts(_,t,e){let n=0,g=0,o=0;for(let s=t.length-1;0<=s;s--){const i=t[s],l=e[s];g|=i<<o,o+=l,30===o?(_.__setDigit(n++,g),o=0,g=0):30<o&&(_.__setDigit(n++,1073741823&g),o-=30,g=i>>>l-o)}if(0!==g){if(n>=_.length)throw new Error(\"implementation bug\");_.__setDigit(n++,g)}for(;n<_.length;n++)_.__setDigit(n,0)}static __toStringBasePowerOfTwo(_,i){const t=_.length;let e=i-1;e=(85&e>>>1)+(85&e),e=(51&e>>>2)+(51&e),e=(15&e>>>4)+(15&e);const n=e,g=i-1,s=_.__digit(t-1),l=o.__clz30(s);let r=0|(30*t-l+n-1)/n;if(_.sign&&r++,268435456<r)throw new Error(\"string too long\");const a=Array(r);let u=r-1,d=0,h=0;for(let e=0;e<t-1;e++){const i=_.__digit(e),t=(d|i<<h)&g;a[u--]=o.__kConversionChars[t];const s=n-h;for(d=i>>>s,h=30-s;h>=n;)a[u--]=o.__kConversionChars[d&g],d>>>=n,h-=n}const m=(d|s<<h)&g;for(a[u--]=o.__kConversionChars[m],d=s>>>n-h;0!==d;)a[u--]=o.__kConversionChars[d&g],d>>>=n;if(_.sign&&(a[u--]=\"-\"),-1!=u)throw new Error(\"implementation bug\");return a.join(\"\")}static __toStringGeneric(_,i,t){const e=_.length;if(0===e)return\"\";if(1===e){let e=_.__unsignedDigit(0).toString(i);return!1===t&&_.sign&&(e=\"-\"+e),e}const n=30*e-o.__clz30(_.__digit(e-1)),g=o.__kMaxBitsPerChar[i],s=g-1;let l=n*o.__kBitsPerCharTableMultiplier;l+=s-1,l=0|l/s;const r=l+1>>1,a=o.exponentiate(o.__oneDigit(i,!1),o.__oneDigit(r,!1));let u,d;const h=a.__unsignedDigit(0);if(1===a.length&&32767>=h){u=new o(_.length,!1),u.__initializeDigits();let t=0;for(let e=2*_.length-1;0<=e;e--){const i=t<<15|_.__halfDigit(e);u.__setHalfDigit(e,0|i/h),t=0|i%h}d=t.toString(i)}else{const t=o.__absoluteDivLarge(_,a,!0,!0);u=t.quotient;const e=t.remainder.__trim();d=o.__toStringGeneric(e,i,!0)}u.__trim();let m=o.__toStringGeneric(u,i,!0);for(;d.length<r;)d=\"0\"+d;return!1===t&&_.sign&&(m=\"-\"+m),m+d}static __unequalSign(i){return i?-1:1}static __absoluteGreater(i){return i?-1:1}static __absoluteLess(i){return i?1:-1}static __compareToBigInt(i,_){const t=i.sign;if(t!==_.sign)return o.__unequalSign(t);const e=o.__absoluteCompare(i,_);return 0<e?o.__absoluteGreater(t):0>e?o.__absoluteLess(t):0}static __compareToNumber(i,_){if(o.__isOneDigitInt(_)){const e=i.sign,n=0>_;if(e!==n)return o.__unequalSign(e);if(0===i.length){if(n)throw new Error(\"implementation bug\");return 0===_?0:-1}if(1<i.length)return o.__absoluteGreater(e);const g=t(_),s=i.__unsignedDigit(0);return s>g?o.__absoluteGreater(e):s<g?o.__absoluteLess(e):0}return o.__compareToDouble(i,_)}static __compareToDouble(i,_){if(_!==_)return _;if(_===1/0)return-1;if(_===-Infinity)return 1;const t=i.sign;if(t!==0>_)return o.__unequalSign(t);if(0===_)throw new Error(\"implementation bug: should be handled elsewhere\");if(0===i.length)return-1;o.__kBitConversionDouble[0]=_;const e=2047&o.__kBitConversionInts[1]>>>20;if(2047==e)throw new Error(\"implementation bug: handled elsewhere\");const n=e-1023;if(0>n)return o.__absoluteGreater(t);const g=i.length;let s=i.__digit(g-1);const l=o.__clz30(s),r=30*g-l,a=n+1;if(r<a)return o.__absoluteLess(t);if(r>a)return o.__absoluteGreater(t);let u=1048576|1048575&o.__kBitConversionInts[1],d=o.__kBitConversionInts[0];const h=20,m=29-l;if(m!==(0|(r-1)%30))throw new Error(\"implementation bug\");let b,D=0;if(20>m){const i=h-m;D=i+32,b=u>>>i,u=u<<32-i|d>>>i,d<<=32-i}else if(20===m)D=32,b=u,u=d;else{const i=m-h;D=32-i,b=u<<i|d>>>32-i,u=d<<i}if(s>>>=0,b>>>=0,s>b)return o.__absoluteGreater(t);if(s<b)return o.__absoluteLess(t);for(let e=g-2;0<=e;e--){0<D?(D-=30,b=u>>>2,u=u<<30|d>>>2,d<<=30):b=0;const _=i.__unsignedDigit(e);if(_>b)return o.__absoluteGreater(t);if(_<b)return o.__absoluteLess(t)}if(0!==u||0!==d){if(0===D)throw new Error(\"implementation bug\");return o.__absoluteLess(t)}return 0}static __equalToNumber(i,_){return o.__isOneDigitInt(_)?0===_?0===i.length:1===i.length&&i.sign===0>_&&i.__unsignedDigit(0)===t(_):0===o.__compareToDouble(i,_)}static __comparisonResultToBool(i,_){return 0===_?0>i:1===_?0>=i:2===_?0<i:3===_?0<=i:void 0}static __compare(i,_,t){if(i=o.__toPrimitive(i),_=o.__toPrimitive(_),\"string\"==typeof i&&\"string\"==typeof _)switch(t){case 0:return i<_;case 1:return i<=_;case 2:return i>_;case 3:return i>=_;}if(o.__isBigInt(i)&&\"string\"==typeof _)return _=o.__fromString(_),null!==_&&o.__comparisonResultToBool(o.__compareToBigInt(i,_),t);if(\"string\"==typeof i&&o.__isBigInt(_))return i=o.__fromString(i),null!==i&&o.__comparisonResultToBool(o.__compareToBigInt(i,_),t);if(i=o.__toNumeric(i),_=o.__toNumeric(_),o.__isBigInt(i)){if(o.__isBigInt(_))return o.__comparisonResultToBool(o.__compareToBigInt(i,_),t);if(\"number\"!=typeof _)throw new Error(\"implementation bug\");return o.__comparisonResultToBool(o.__compareToNumber(i,_),t)}if(\"number\"!=typeof i)throw new Error(\"implementation bug\");if(o.__isBigInt(_))return o.__comparisonResultToBool(o.__compareToNumber(_,i),2^t);if(\"number\"!=typeof _)throw new Error(\"implementation bug\");return 0===t?i<_:1===t?i<=_:2===t?i>_:3===t?i>=_:void 0}__clzmsd(){return o.__clz30(this.__digit(this.length-1))}static __absoluteAdd(_,t,e){if(_.length<t.length)return o.__absoluteAdd(t,_,e);if(0===_.length)return _;if(0===t.length)return _.sign===e?_:o.unaryMinus(_);let n=_.length;(0===_.__clzmsd()||t.length===_.length&&0===t.__clzmsd())&&n++;const g=new o(n,e);let s=0,l=0;for(;l<t.length;l++){const i=_.__digit(l)+t.__digit(l)+s;s=i>>>30,g.__setDigit(l,1073741823&i)}for(;l<_.length;l++){const i=_.__digit(l)+s;s=i>>>30,g.__setDigit(l,1073741823&i)}return l<g.length&&g.__setDigit(l,s),g.__trim()}static __absoluteSub(_,t,e){if(0===_.length)return _;if(0===t.length)return _.sign===e?_:o.unaryMinus(_);const n=new o(_.length,e);let g=0,s=0;for(;s<t.length;s++){const i=_.__digit(s)-t.__digit(s)-g;g=1&i>>>30,n.__setDigit(s,1073741823&i)}for(;s<_.length;s++){const i=_.__digit(s)-g;g=1&i>>>30,n.__setDigit(s,1073741823&i)}return n.__trim()}static __absoluteAddOne(_,i,t=null){const e=_.length;null===t?t=new o(e,i):t.sign=i;let n=1;for(let g=0;g<e;g++){const i=_.__digit(g)+n;n=i>>>30,t.__setDigit(g,1073741823&i)}return 0!=n&&t.__setDigitGrow(e,1),t}static __absoluteSubOne(_,t){const e=_.length;t=t||e;const n=new o(t,!1);let g=1;for(let o=0;o<e;o++){const i=_.__digit(o)-g;g=1&i>>>30,n.__setDigit(o,1073741823&i)}if(0!=g)throw new Error(\"implementation bug\");for(let g=e;g<t;g++)n.__setDigit(g,0);return n}static __absoluteAnd(_,t,e=null){let n=_.length,g=t.length,s=g;if(n<g){s=n;const i=_,e=n;_=t,n=g,t=i,g=e}let l=s;null===e?e=new o(l,!1):l=e.length;let r=0;for(;r<s;r++)e.__setDigit(r,_.__digit(r)&t.__digit(r));for(;r<l;r++)e.__setDigit(r,0);return e}static __absoluteAndNot(_,t,e=null){const n=_.length,g=t.length;let s=g;n<g&&(s=n);let l=n;null===e?e=new o(l,!1):l=e.length;let r=0;for(;r<s;r++)e.__setDigit(r,_.__digit(r)&~t.__digit(r));for(;r<n;r++)e.__setDigit(r,_.__digit(r));for(;r<l;r++)e.__setDigit(r,0);return e}static __absoluteOr(_,t,e=null){let n=_.length,g=t.length,s=g;if(n<g){s=n;const i=_,e=n;_=t,n=g,t=i,g=e}let l=n;null===e?e=new o(l,!1):l=e.length;let r=0;for(;r<s;r++)e.__setDigit(r,_.__digit(r)|t.__digit(r));for(;r<n;r++)e.__setDigit(r,_.__digit(r));for(;r<l;r++)e.__setDigit(r,0);return e}static __absoluteXor(_,t,e=null){let n=_.length,g=t.length,s=g;if(n<g){s=n;const i=_,e=n;_=t,n=g,t=i,g=e}let l=n;null===e?e=new o(l,!1):l=e.length;let r=0;for(;r<s;r++)e.__setDigit(r,_.__digit(r)^t.__digit(r));for(;r<n;r++)e.__setDigit(r,_.__digit(r));for(;r<l;r++)e.__setDigit(r,0);return e}static __absoluteCompare(_,t){const e=_.length-t.length;if(0!=e)return e;let n=_.length-1;for(;0<=n&&_.__digit(n)===t.__digit(n);)n--;return 0>n?0:_.__unsignedDigit(n)>t.__unsignedDigit(n)?1:-1}static __multiplyAccumulate(_,t,e,n){if(0===t)return;const g=32767&t,s=t>>>15;let l=0,r=0;for(let a,u=0;u<_.length;u++,n++){a=e.__digit(n);const i=_.__digit(u),t=32767&i,d=i>>>15,h=o.__imul(t,g),m=o.__imul(t,s),b=o.__imul(d,g),D=o.__imul(d,s);a+=r+h+l,l=a>>>30,a&=1073741823,a+=((32767&m)<<15)+((32767&b)<<15),l+=a>>>30,r=D+(m>>>15)+(b>>>15),e.__setDigit(n,1073741823&a)}for(;0!=l||0!==r;n++){let i=e.__digit(n);i+=l+r,r=0,l=i>>>30,e.__setDigit(n,1073741823&i)}}static __internalMultiplyAdd(_,t,e,g,s){let l=e,a=0;for(let n=0;n<g;n++){const i=_.__digit(n),e=o.__imul(32767&i,t),g=o.__imul(i>>>15,t),u=e+((32767&g)<<15)+a+l;l=u>>>30,a=g>>>15,s.__setDigit(n,1073741823&u)}if(s.length>g)for(s.__setDigit(g++,l+a);g<s.length;)s.__setDigit(g++,0);else if(0!==l+a)throw new Error(\"implementation bug\")}__inplaceMultiplyAdd(i,_,t){t>this.length&&(t=this.length);const e=32767&i,n=i>>>15;let g=0,s=_;for(let l=0;l<t;l++){const i=this.__digit(l),_=32767&i,t=i>>>15,r=o.__imul(_,e),a=o.__imul(_,n),u=o.__imul(t,e),d=o.__imul(t,n);let h=s+r+g;g=h>>>30,h&=1073741823,h+=((32767&a)<<15)+((32767&u)<<15),g+=h>>>30,s=d+(a>>>15)+(u>>>15),this.__setDigit(l,1073741823&h)}if(0!=g||0!==s)throw new Error(\"implementation bug\")}static __absoluteDivSmall(_,t,e=null){null===e&&(e=new o(_.length,!1));let n=0;for(let g,o=2*_.length-1;0<=o;o-=2){g=(n<<15|_.__halfDigit(o))>>>0;const i=0|g/t;n=0|g%t,g=(n<<15|_.__halfDigit(o-1))>>>0;const s=0|g/t;n=0|g%t,e.__setDigit(o>>>1,i<<15|s)}return e}static __absoluteModSmall(_,t){let e=0;for(let n=2*_.length-1;0<=n;n--){const i=(e<<15|_.__halfDigit(n))>>>0;e=0|i%t}return e}static __absoluteDivLarge(i,_,t,e){const g=_.__halfDigitLength(),n=_.length,s=i.__halfDigitLength()-g;let l=null;t&&(l=new o(s+2>>>1,!1),l.__initializeDigits());const r=new o(g+2>>>1,!1);r.__initializeDigits();const a=o.__clz15(_.__halfDigit(g-1));0<a&&(_=o.__specialLeftShift(_,a,0));const d=o.__specialLeftShift(i,a,1),u=_.__halfDigit(g-1);let h=0;for(let a,m=s;0<=m;m--){a=32767;const i=d.__halfDigit(m+g);if(i!==u){const t=(i<<15|d.__halfDigit(m+g-1))>>>0;a=0|t/u;let e=0|t%u;const n=_.__halfDigit(g-2),s=d.__halfDigit(m+g-2);for(;o.__imul(a,n)>>>0>(e<<16|s)>>>0&&(a--,e+=u,!(32767<e)););}o.__internalMultiplyAdd(_,a,0,n,r);let e=d.__inplaceSub(r,m,g+1);0!==e&&(e=d.__inplaceAdd(_,m,g),d.__setHalfDigit(m+g,32767&d.__halfDigit(m+g)+e),a--),t&&(1&m?h=a<<15:l.__setDigit(m>>>1,h|a))}if(e)return d.__inplaceRightShift(a),t?{quotient:l,remainder:d}:d;if(t)return l;throw new Error(\"unreachable\")}static __clz15(i){return o.__clz30(i)-15}__inplaceAdd(_,t,e){let n=0;for(let g=0;g<e;g++){const i=this.__halfDigit(t+g)+_.__halfDigit(g)+n;n=i>>>15,this.__setHalfDigit(t+g,32767&i)}return n}__inplaceSub(_,t,e){let n=0;if(1&t){t>>=1;let g=this.__digit(t),o=32767&g,s=0;for(;s<e-1>>>1;s++){const i=_.__digit(s),e=(g>>>15)-(32767&i)-n;n=1&e>>>15,this.__setDigit(t+s,(32767&e)<<15|32767&o),g=this.__digit(t+s+1),o=(32767&g)-(i>>>15)-n,n=1&o>>>15}const i=_.__digit(s),l=(g>>>15)-(32767&i)-n;n=1&l>>>15,this.__setDigit(t+s,(32767&l)<<15|32767&o);if(t+s+1>=this.length)throw new RangeError(\"out of bounds\");0==(1&e)&&(g=this.__digit(t+s+1),o=(32767&g)-(i>>>15)-n,n=1&o>>>15,this.__setDigit(t+_.length,1073709056&g|32767&o))}else{t>>=1;let g=0;for(;g<_.length-1;g++){const i=this.__digit(t+g),e=_.__digit(g),o=(32767&i)-(32767&e)-n;n=1&o>>>15;const s=(i>>>15)-(e>>>15)-n;n=1&s>>>15,this.__setDigit(t+g,(32767&s)<<15|32767&o)}const i=this.__digit(t+g),o=_.__digit(g),s=(32767&i)-(32767&o)-n;n=1&s>>>15;let l=0;0==(1&e)&&(l=(i>>>15)-(o>>>15)-n,n=1&l>>>15),this.__setDigit(t+g,(32767&l)<<15|32767&s)}return n}__inplaceRightShift(_){if(0===_)return;let t=this.__digit(0)>>>_;const e=this.length-1;for(let n=0;n<e;n++){const i=this.__digit(n+1);this.__setDigit(n,1073741823&i<<30-_|t),t=i>>>_}this.__setDigit(e,t)}static __specialLeftShift(_,t,e){const g=_.length,n=new o(g+e,!1);if(0===t){for(let t=0;t<g;t++)n.__setDigit(t,_.__digit(t));return 0<e&&n.__setDigit(g,0),n}let s=0;for(let o=0;o<g;o++){const i=_.__digit(o);n.__setDigit(o,1073741823&i<<t|s),s=i>>>30-t}return 0<e&&n.__setDigit(g,s),n}static __leftShiftByAbsolute(_,i){const t=o.__toShiftAmount(i);if(0>t)throw new RangeError(\"BigInt too big\");const e=0|t/30,n=t%30,g=_.length,s=0!==n&&0!=_.__digit(g-1)>>>30-n,l=g+e+(s?1:0),r=new o(l,_.sign);if(0===n){let t=0;for(;t<e;t++)r.__setDigit(t,0);for(;t<l;t++)r.__setDigit(t,_.__digit(t-e))}else{let t=0;for(let _=0;_<e;_++)r.__setDigit(_,0);for(let o=0;o<g;o++){const i=_.__digit(o);r.__setDigit(o+e,1073741823&i<<n|t),t=i>>>30-n}if(s)r.__setDigit(g+e,t);else if(0!==t)throw new Error(\"implementation bug\")}return r.__trim()}static __rightShiftByAbsolute(_,i){const t=_.length,e=_.sign,n=o.__toShiftAmount(i);if(0>n)return o.__rightShiftByMaximum(e);const g=0|n/30,s=n%30;let l=t-g;if(0>=l)return o.__rightShiftByMaximum(e);let r=!1;if(e){if(0!=(_.__digit(g)&(1<<s)-1))r=!0;else for(let t=0;t<g;t++)if(0!==_.__digit(t)){r=!0;break}}if(r&&0===s){const i=_.__digit(t-1);0==~i&&l++}let a=new o(l,e);if(0===s){a.__setDigit(l-1,0);for(let e=g;e<t;e++)a.__setDigit(e-g,_.__digit(e))}else{let e=_.__digit(g)>>>s;const n=t-g-1;for(let t=0;t<n;t++){const i=_.__digit(t+g+1);a.__setDigit(t,1073741823&i<<30-s|e),e=i>>>s}a.__setDigit(n,e)}return r&&(a=o.__absoluteAddOne(a,!0,a)),a.__trim()}static __rightShiftByMaximum(i){return i?o.__oneDigit(1,!0):o.__zero()}static __toShiftAmount(i){if(1<i.length)return-1;const _=i.__unsignedDigit(0);return _>o.__kMaxLengthBits?-1:_}static __toPrimitive(i,_=\"default\"){if(\"object\"!=typeof i)return i;if(i.constructor===o)return i;const t=i[Symbol.toPrimitive];if(t){const i=t(_);if(\"object\"!=typeof i)return i;throw new TypeError(\"Cannot convert object to primitive value\")}const e=i.valueOf;if(e){const _=e.call(i);if(\"object\"!=typeof _)return _}const n=i.toString;if(n){const _=n.call(i);if(\"object\"!=typeof _)return _}throw new TypeError(\"Cannot convert object to primitive value\")}static __toNumeric(i){return o.__isBigInt(i)?i:+i}static __isBigInt(i){return\"object\"==typeof i&&null!==i&&i.constructor===o}static __truncateToNBits(i,_){const t=0|(i+29)/30,e=new o(t,_.sign),n=t-1;for(let t=0;t<n;t++)e.__setDigit(t,_.__digit(t));let g=_.__digit(n);if(0!=i%30){const _=32-i%30;g=g<<_>>>_}return e.__setDigit(n,g),e.__trim()}static __truncateAndSubFromPowerOfTwo(_,t,e){var n=Math.min;const g=0|(_+29)/30,s=new o(g,e);let l=0;const r=g-1;let a=0;for(const i=n(r,t.length);l<i;l++){const i=0-t.__digit(l)-a;a=1&i>>>30,s.__setDigit(l,1073741823&i)}for(;l<r;l++)s.__setDigit(l,0|1073741823&-a);let u=r<t.length?t.__digit(r):0;const d=_%30;let h;if(0==d)h=0-u-a,h&=1073741823;else{const i=32-d;u=u<<i>>>i;const _=1<<32-i;h=_-u-a,h&=_-1}return s.__setDigit(r,h),s.__trim()}__digit(_){return this[_]}__unsignedDigit(_){return this[_]>>>0}__setDigit(_,i){this[_]=0|i}__setDigitGrow(_,i){this[_]=0|i}__halfDigitLength(){const i=this.length;return 32767>=this.__unsignedDigit(i-1)?2*i-1:2*i}__halfDigit(_){return 32767&this[_>>>1]>>>15*(1&_)}__setHalfDigit(_,i){const t=_>>>1,e=this.__digit(t),n=1&_?32767&e|i<<15:1073709056&e|32767&i;this.__setDigit(t,n)}static __digitPow(i,_){let t=1;for(;0<_;)1&_&&(t*=i),_>>>=1,i*=i;return t}static __isOneDigitInt(i){return(1073741823&i)===i}}o.__kMaxLength=33554432,o.__kMaxLengthBits=o.__kMaxLength<<5,o.__kMaxBitsPerChar=[0,0,32,51,64,75,83,90,96,102,107,111,115,119,122,126,128,131,134,136,139,141,143,145,147,149,151,153,154,156,158,159,160,162,163,165,166],o.__kBitsPerCharTableShift=5,o.__kBitsPerCharTableMultiplier=1<<o.__kBitsPerCharTableShift,o.__kConversionChars=[\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\",\"h\",\"i\",\"j\",\"k\",\"l\",\"m\",\"n\",\"o\",\"p\",\"q\",\"r\",\"s\",\"t\",\"u\",\"v\",\"w\",\"x\",\"y\",\"z\"],o.__kBitConversionBuffer=new ArrayBuffer(8),o.__kBitConversionDouble=new Float64Array(o.__kBitConversionBuffer),o.__kBitConversionInts=new Int32Array(o.__kBitConversionBuffer),o.__clz30=_?function(i){return _(i)-2}:function(i){return 0===i?30:0|29-(0|Math.log(i>>>0)/Math.LN2)},o.__imul=Math.imul||function(i,_){return 0|i*_},i.default=o,Object.defineProperty(i,\"__esModule\",{value:!0})});\n//# sourceMappingURL=jsbi-umd.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16 --generate=c`\n// prettier-ignore\nvar TABLE = [0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40, 0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41, 0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240, 0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840, 0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640, 0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441, 0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41, 0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041, 0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40, 0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41, 0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040];\n\nif (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);\n\nvar crc16 = (0, _define_crc2.default)('crc-16', function (buf, previous) {\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = ~~previous;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;\n  }\n\n  return crc;\n});\n\nexports.default = crc16;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Generated by `./pycrc.py --algorithm=table-driven --model=crc-8 --generate=c`\n// prettier-ignore\nvar TABLE = [0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15, 0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d, 0x70, 0x77, 0x7e, 0x79, 0x6c, 0x6b, 0x62, 0x65, 0x48, 0x4f, 0x46, 0x41, 0x54, 0x53, 0x5a, 0x5d, 0xe0, 0xe7, 0xee, 0xe9, 0xfc, 0xfb, 0xf2, 0xf5, 0xd8, 0xdf, 0xd6, 0xd1, 0xc4, 0xc3, 0xca, 0xcd, 0x90, 0x97, 0x9e, 0x99, 0x8c, 0x8b, 0x82, 0x85, 0xa8, 0xaf, 0xa6, 0xa1, 0xb4, 0xb3, 0xba, 0xbd, 0xc7, 0xc0, 0xc9, 0xce, 0xdb, 0xdc, 0xd5, 0xd2, 0xff, 0xf8, 0xf1, 0xf6, 0xe3, 0xe4, 0xed, 0xea, 0xb7, 0xb0, 0xb9, 0xbe, 0xab, 0xac, 0xa5, 0xa2, 0x8f, 0x88, 0x81, 0x86, 0x93, 0x94, 0x9d, 0x9a, 0x27, 0x20, 0x29, 0x2e, 0x3b, 0x3c, 0x35, 0x32, 0x1f, 0x18, 0x11, 0x16, 0x03, 0x04, 0x0d, 0x0a, 0x57, 0x50, 0x59, 0x5e, 0x4b, 0x4c, 0x45, 0x42, 0x6f, 0x68, 0x61, 0x66, 0x73, 0x74, 0x7d, 0x7a, 0x89, 0x8e, 0x87, 0x80, 0x95, 0x92, 0x9b, 0x9c, 0xb1, 0xb6, 0xbf, 0xb8, 0xad, 0xaa, 0xa3, 0xa4, 0xf9, 0xfe, 0xf7, 0xf0, 0xe5, 0xe2, 0xeb, 0xec, 0xc1, 0xc6, 0xcf, 0xc8, 0xdd, 0xda, 0xd3, 0xd4, 0x69, 0x6e, 0x67, 0x60, 0x75, 0x72, 0x7b, 0x7c, 0x51, 0x56, 0x5f, 0x58, 0x4d, 0x4a, 0x43, 0x44, 0x19, 0x1e, 0x17, 0x10, 0x05, 0x02, 0x0b, 0x0c, 0x21, 0x26, 0x2f, 0x28, 0x3d, 0x3a, 0x33, 0x34, 0x4e, 0x49, 0x40, 0x47, 0x52, 0x55, 0x5c, 0x5b, 0x76, 0x71, 0x78, 0x7f, 0x6a, 0x6d, 0x64, 0x63, 0x3e, 0x39, 0x30, 0x37, 0x22, 0x25, 0x2c, 0x2b, 0x06, 0x01, 0x08, 0x0f, 0x1a, 0x1d, 0x14, 0x13, 0xae, 0xa9, 0xa0, 0xa7, 0xb2, 0xb5, 0xbc, 0xbb, 0x96, 0x91, 0x98, 0x9f, 0x8a, 0x8d, 0x84, 0x83, 0xde, 0xd9, 0xd0, 0xd7, 0xc2, 0xc5, 0xcc, 0xcb, 0xe6, 0xe1, 0xe8, 0xef, 0xfa, 0xfd, 0xf4, 0xf3];\n\nif (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);\n\nvar crc8 = (0, _define_crc2.default)('crc-8', function (buf, previous) {\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = ~~previous;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    crc = TABLE[(crc ^ byte) & 0xff] & 0xff;\n  }\n\n  return crc;\n});\n\nexports.default = crc8;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Generated by `./pycrc.py --algorithm=table-driven --model=crc-16-modbus --generate=c`\n// prettier-ignore\nvar TABLE = [0x0000, 0xc0c1, 0xc181, 0x0140, 0xc301, 0x03c0, 0x0280, 0xc241, 0xc601, 0x06c0, 0x0780, 0xc741, 0x0500, 0xc5c1, 0xc481, 0x0440, 0xcc01, 0x0cc0, 0x0d80, 0xcd41, 0x0f00, 0xcfc1, 0xce81, 0x0e40, 0x0a00, 0xcac1, 0xcb81, 0x0b40, 0xc901, 0x09c0, 0x0880, 0xc841, 0xd801, 0x18c0, 0x1980, 0xd941, 0x1b00, 0xdbc1, 0xda81, 0x1a40, 0x1e00, 0xdec1, 0xdf81, 0x1f40, 0xdd01, 0x1dc0, 0x1c80, 0xdc41, 0x1400, 0xd4c1, 0xd581, 0x1540, 0xd701, 0x17c0, 0x1680, 0xd641, 0xd201, 0x12c0, 0x1380, 0xd341, 0x1100, 0xd1c1, 0xd081, 0x1040, 0xf001, 0x30c0, 0x3180, 0xf141, 0x3300, 0xf3c1, 0xf281, 0x3240, 0x3600, 0xf6c1, 0xf781, 0x3740, 0xf501, 0x35c0, 0x3480, 0xf441, 0x3c00, 0xfcc1, 0xfd81, 0x3d40, 0xff01, 0x3fc0, 0x3e80, 0xfe41, 0xfa01, 0x3ac0, 0x3b80, 0xfb41, 0x3900, 0xf9c1, 0xf881, 0x3840, 0x2800, 0xe8c1, 0xe981, 0x2940, 0xeb01, 0x2bc0, 0x2a80, 0xea41, 0xee01, 0x2ec0, 0x2f80, 0xef41, 0x2d00, 0xedc1, 0xec81, 0x2c40, 0xe401, 0x24c0, 0x2580, 0xe541, 0x2700, 0xe7c1, 0xe681, 0x2640, 0x2200, 0xe2c1, 0xe381, 0x2340, 0xe101, 0x21c0, 0x2080, 0xe041, 0xa001, 0x60c0, 0x6180, 0xa141, 0x6300, 0xa3c1, 0xa281, 0x6240, 0x6600, 0xa6c1, 0xa781, 0x6740, 0xa501, 0x65c0, 0x6480, 0xa441, 0x6c00, 0xacc1, 0xad81, 0x6d40, 0xaf01, 0x6fc0, 0x6e80, 0xae41, 0xaa01, 0x6ac0, 0x6b80, 0xab41, 0x6900, 0xa9c1, 0xa881, 0x6840, 0x7800, 0xb8c1, 0xb981, 0x7940, 0xbb01, 0x7bc0, 0x7a80, 0xba41, 0xbe01, 0x7ec0, 0x7f80, 0xbf41, 0x7d00, 0xbdc1, 0xbc81, 0x7c40, 0xb401, 0x74c0, 0x7580, 0xb541, 0x7700, 0xb7c1, 0xb681, 0x7640, 0x7200, 0xb2c1, 0xb381, 0x7340, 0xb101, 0x71c0, 0x7080, 0xb041, 0x5000, 0x90c1, 0x9181, 0x5140, 0x9301, 0x53c0, 0x5280, 0x9241, 0x9601, 0x56c0, 0x5780, 0x9741, 0x5500, 0x95c1, 0x9481, 0x5440, 0x9c01, 0x5cc0, 0x5d80, 0x9d41, 0x5f00, 0x9fc1, 0x9e81, 0x5e40, 0x5a00, 0x9ac1, 0x9b81, 0x5b40, 0x9901, 0x59c0, 0x5880, 0x9841, 0x8801, 0x48c0, 0x4980, 0x8941, 0x4b00, 0x8bc1, 0x8a81, 0x4a40, 0x4e00, 0x8ec1, 0x8f81, 0x4f40, 0x8d01, 0x4dc0, 0x4c80, 0x8c41, 0x4400, 0x84c1, 0x8581, 0x4540, 0x8701, 0x47c0, 0x4680, 0x8641, 0x8201, 0x42c0, 0x4380, 0x8341, 0x4100, 0x81c1, 0x8081, 0x4040];\n\nif (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);\n\nvar crc16modbus = (0, _define_crc2.default)('crc-16-modbus', function (buf, previous) {\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = typeof previous !== 'undefined' ? ~~previous : 0xffff;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;\n  }\n\n  return crc;\n});\n\nexports.default = crc16modbus;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Generated by `./pycrc.py --algorithm=table-driven --model=ccitt --generate=c`\n// prettier-ignore\nvar TABLE = [0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7, 0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef, 0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6, 0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de, 0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485, 0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d, 0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4, 0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc, 0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823, 0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b, 0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12, 0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a, 0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41, 0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49, 0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70, 0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78, 0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f, 0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067, 0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e, 0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256, 0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d, 0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405, 0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c, 0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634, 0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab, 0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3, 0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a, 0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92, 0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9, 0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1, 0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8, 0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0];\n\nif (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);\n\nvar crc16ccitt = (0, _define_crc2.default)('ccitt', function (buf, previous) {\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = typeof previous !== 'undefined' ? ~~previous : 0xffff;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    crc = (TABLE[(crc >> 8 ^ byte) & 0xff] ^ crc << 8) & 0xffff;\n  }\n\n  return crc;\n});\n\nexports.default = crc16ccitt;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Generated by `./pycrc.py --algorithm=table-drive --model=crc-24 --generate=c`\n// prettier-ignore\nvar TABLE = [0x000000, 0x864cfb, 0x8ad50d, 0x0c99f6, 0x93e6e1, 0x15aa1a, 0x1933ec, 0x9f7f17, 0xa18139, 0x27cdc2, 0x2b5434, 0xad18cf, 0x3267d8, 0xb42b23, 0xb8b2d5, 0x3efe2e, 0xc54e89, 0x430272, 0x4f9b84, 0xc9d77f, 0x56a868, 0xd0e493, 0xdc7d65, 0x5a319e, 0x64cfb0, 0xe2834b, 0xee1abd, 0x685646, 0xf72951, 0x7165aa, 0x7dfc5c, 0xfbb0a7, 0x0cd1e9, 0x8a9d12, 0x8604e4, 0x00481f, 0x9f3708, 0x197bf3, 0x15e205, 0x93aefe, 0xad50d0, 0x2b1c2b, 0x2785dd, 0xa1c926, 0x3eb631, 0xb8faca, 0xb4633c, 0x322fc7, 0xc99f60, 0x4fd39b, 0x434a6d, 0xc50696, 0x5a7981, 0xdc357a, 0xd0ac8c, 0x56e077, 0x681e59, 0xee52a2, 0xe2cb54, 0x6487af, 0xfbf8b8, 0x7db443, 0x712db5, 0xf7614e, 0x19a3d2, 0x9fef29, 0x9376df, 0x153a24, 0x8a4533, 0x0c09c8, 0x00903e, 0x86dcc5, 0xb822eb, 0x3e6e10, 0x32f7e6, 0xb4bb1d, 0x2bc40a, 0xad88f1, 0xa11107, 0x275dfc, 0xdced5b, 0x5aa1a0, 0x563856, 0xd074ad, 0x4f0bba, 0xc94741, 0xc5deb7, 0x43924c, 0x7d6c62, 0xfb2099, 0xf7b96f, 0x71f594, 0xee8a83, 0x68c678, 0x645f8e, 0xe21375, 0x15723b, 0x933ec0, 0x9fa736, 0x19ebcd, 0x8694da, 0x00d821, 0x0c41d7, 0x8a0d2c, 0xb4f302, 0x32bff9, 0x3e260f, 0xb86af4, 0x2715e3, 0xa15918, 0xadc0ee, 0x2b8c15, 0xd03cb2, 0x567049, 0x5ae9bf, 0xdca544, 0x43da53, 0xc596a8, 0xc90f5e, 0x4f43a5, 0x71bd8b, 0xf7f170, 0xfb6886, 0x7d247d, 0xe25b6a, 0x641791, 0x688e67, 0xeec29c, 0x3347a4, 0xb50b5f, 0xb992a9, 0x3fde52, 0xa0a145, 0x26edbe, 0x2a7448, 0xac38b3, 0x92c69d, 0x148a66, 0x181390, 0x9e5f6b, 0x01207c, 0x876c87, 0x8bf571, 0x0db98a, 0xf6092d, 0x7045d6, 0x7cdc20, 0xfa90db, 0x65efcc, 0xe3a337, 0xef3ac1, 0x69763a, 0x578814, 0xd1c4ef, 0xdd5d19, 0x5b11e2, 0xc46ef5, 0x42220e, 0x4ebbf8, 0xc8f703, 0x3f964d, 0xb9dab6, 0xb54340, 0x330fbb, 0xac70ac, 0x2a3c57, 0x26a5a1, 0xa0e95a, 0x9e1774, 0x185b8f, 0x14c279, 0x928e82, 0x0df195, 0x8bbd6e, 0x872498, 0x016863, 0xfad8c4, 0x7c943f, 0x700dc9, 0xf64132, 0x693e25, 0xef72de, 0xe3eb28, 0x65a7d3, 0x5b59fd, 0xdd1506, 0xd18cf0, 0x57c00b, 0xc8bf1c, 0x4ef3e7, 0x426a11, 0xc426ea, 0x2ae476, 0xaca88d, 0xa0317b, 0x267d80, 0xb90297, 0x3f4e6c, 0x33d79a, 0xb59b61, 0x8b654f, 0x0d29b4, 0x01b042, 0x87fcb9, 0x1883ae, 0x9ecf55, 0x9256a3, 0x141a58, 0xefaaff, 0x69e604, 0x657ff2, 0xe33309, 0x7c4c1e, 0xfa00e5, 0xf69913, 0x70d5e8, 0x4e2bc6, 0xc8673d, 0xc4fecb, 0x42b230, 0xddcd27, 0x5b81dc, 0x57182a, 0xd154d1, 0x26359f, 0xa07964, 0xace092, 0x2aac69, 0xb5d37e, 0x339f85, 0x3f0673, 0xb94a88, 0x87b4a6, 0x01f85d, 0x0d61ab, 0x8b2d50, 0x145247, 0x921ebc, 0x9e874a, 0x18cbb1, 0xe37b16, 0x6537ed, 0x69ae1b, 0xefe2e0, 0x709df7, 0xf6d10c, 0xfa48fa, 0x7c0401, 0x42fa2f, 0xc4b6d4, 0xc82f22, 0x4e63d9, 0xd11cce, 0x575035, 0x5bc9c3, 0xdd8538];\n\nif (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);\n\nvar crc24 = (0, _define_crc2.default)('crc-24', function (buf, previous) {\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = typeof previous !== 'undefined' ? ~~previous : 0xb704ce;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    crc = (TABLE[(crc >> 16 ^ byte) & 0xff] ^ crc << 8) & 0xffffff;\n  }\n\n  return crc;\n});\n\nexports.default = crc24;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Generated by `./pycrc.py --algorithm=table-driven --model=jam --generate=c`\n// prettier-ignore\nvar TABLE = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];\n\nif (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);\n\nvar crcjam = (0, _define_crc2.default)('jam', function (buf) {\n  var previous = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = previous === 0 ? 0 : ~~previous;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    crc = TABLE[(crc ^ byte) & 0xff] ^ crc >>> 8;\n  }\n\n  return crc;\n});\n\nexports.default = crcjam;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Generated by `./pycrc.py --algorithm=table-driven --model=crc-32 --generate=c`\n// prettier-ignore\nvar TABLE = [0x00000000, 0x77073096, 0xee0e612c, 0x990951ba, 0x076dc419, 0x706af48f, 0xe963a535, 0x9e6495a3, 0x0edb8832, 0x79dcb8a4, 0xe0d5e91e, 0x97d2d988, 0x09b64c2b, 0x7eb17cbd, 0xe7b82d07, 0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de, 0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856, 0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9, 0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4, 0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b, 0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3, 0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a, 0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599, 0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924, 0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190, 0x01db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x06b6b51f, 0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0x0f00f934, 0x9609a88e, 0xe10e9818, 0x7f6a0dbb, 0x086d3d2d, 0x91646c97, 0xe6635c01, 0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed, 0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950, 0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3, 0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2, 0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a, 0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5, 0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010, 0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f, 0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17, 0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6, 0x03b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x04db2615, 0x73dc1683, 0xe3630b12, 0x94643b84, 0x0d6d6a3e, 0x7a6a5aa8, 0xe40ecf0b, 0x9309ff9d, 0x0a00ae27, 0x7d079eb1, 0xf00f9344, 0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb, 0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a, 0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5, 0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1, 0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c, 0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef, 0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236, 0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe, 0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31, 0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c, 0x026d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x05005713, 0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0x0cb61b38, 0x92d28e9b, 0xe5d5be0d, 0x7cdcefb7, 0x0bdbdf21, 0x86d3d2d4, 0xf1d4e242, 0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1, 0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c, 0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278, 0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7, 0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66, 0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9, 0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605, 0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8, 0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b, 0x2d02ef8d];\n\nif (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);\n\nvar crc32 = (0, _define_crc2.default)('crc-32', function (buf, previous) {\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = previous === 0 ? 0 : ~~previous ^ -1;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    crc = TABLE[(crc ^ byte) & 0xff] ^ crc >>> 8;\n  }\n\n  return crc ^ -1;\n});\n\nexports.default = crc32;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Generated by `./pycrc.py --algorithm=table-driven --model=dallas-1-wire --generate=c`\n// prettier-ignore\nvar TABLE = [0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20, 0xa3, 0xfd, 0x1f, 0x41, 0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e, 0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc, 0x23, 0x7d, 0x9f, 0xc1, 0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62, 0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e, 0x1d, 0x43, 0xa1, 0xff, 0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5, 0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07, 0xdb, 0x85, 0x67, 0x39, 0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a, 0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45, 0xc6, 0x98, 0x7a, 0x24, 0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b, 0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9, 0x8c, 0xd2, 0x30, 0x6e, 0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd, 0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31, 0xb2, 0xec, 0x0e, 0x50, 0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c, 0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee, 0x32, 0x6c, 0x8e, 0xd0, 0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73, 0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea, 0x69, 0x37, 0xd5, 0x8b, 0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4, 0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16, 0xe9, 0xb7, 0x55, 0x0b, 0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8, 0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54, 0xd7, 0x89, 0x6b, 0x35];\n\nif (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);\n\nvar crc81wire = (0, _define_crc2.default)('dallas-1-wire', function (buf, previous) {\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = ~~previous;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    crc = TABLE[(crc ^ byte) & 0xff] & 0xff;\n  }\n\n  return crc;\n});\n\nexports.default = crc81wire;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar crc16xmodem = (0, _define_crc2.default)('xmodem', function (buf, previous) {\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = typeof previous !== 'undefined' ? ~~previous : 0x0;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    var code = crc >>> 8 & 0xff;\n\n    code ^= byte & 0xff;\n    code ^= code >>> 4;\n    crc = crc << 8 & 0xffff;\n    crc ^= code;\n    code = code << 5 & 0xffff;\n    crc ^= code;\n    code = code << 7 & 0xffff;\n    crc ^= code;\n  }\n\n  return crc;\n});\n\nexports.default = crc16xmodem;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar crc1 = (0, _define_crc2.default)('crc1', function (buf, previous) {\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = ~~previous;\n  var accum = 0;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    accum += byte;\n  }\n\n  crc += accum % 256;\n  return crc % 256;\n});\n\nexports.default = crc1;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar _create_buffer = require('./create_buffer');\n\nvar _create_buffer2 = _interopRequireDefault(_create_buffer);\n\nvar _define_crc = require('./define_crc');\n\nvar _define_crc2 = _interopRequireDefault(_define_crc);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// Generated by `./pycrc.py --algorithm=table-driven --model=kermit --generate=c`\n// prettier-ignore\nvar TABLE = [0x0000, 0x1189, 0x2312, 0x329b, 0x4624, 0x57ad, 0x6536, 0x74bf, 0x8c48, 0x9dc1, 0xaf5a, 0xbed3, 0xca6c, 0xdbe5, 0xe97e, 0xf8f7, 0x1081, 0x0108, 0x3393, 0x221a, 0x56a5, 0x472c, 0x75b7, 0x643e, 0x9cc9, 0x8d40, 0xbfdb, 0xae52, 0xdaed, 0xcb64, 0xf9ff, 0xe876, 0x2102, 0x308b, 0x0210, 0x1399, 0x6726, 0x76af, 0x4434, 0x55bd, 0xad4a, 0xbcc3, 0x8e58, 0x9fd1, 0xeb6e, 0xfae7, 0xc87c, 0xd9f5, 0x3183, 0x200a, 0x1291, 0x0318, 0x77a7, 0x662e, 0x54b5, 0x453c, 0xbdcb, 0xac42, 0x9ed9, 0x8f50, 0xfbef, 0xea66, 0xd8fd, 0xc974, 0x4204, 0x538d, 0x6116, 0x709f, 0x0420, 0x15a9, 0x2732, 0x36bb, 0xce4c, 0xdfc5, 0xed5e, 0xfcd7, 0x8868, 0x99e1, 0xab7a, 0xbaf3, 0x5285, 0x430c, 0x7197, 0x601e, 0x14a1, 0x0528, 0x37b3, 0x263a, 0xdecd, 0xcf44, 0xfddf, 0xec56, 0x98e9, 0x8960, 0xbbfb, 0xaa72, 0x6306, 0x728f, 0x4014, 0x519d, 0x2522, 0x34ab, 0x0630, 0x17b9, 0xef4e, 0xfec7, 0xcc5c, 0xddd5, 0xa96a, 0xb8e3, 0x8a78, 0x9bf1, 0x7387, 0x620e, 0x5095, 0x411c, 0x35a3, 0x242a, 0x16b1, 0x0738, 0xffcf, 0xee46, 0xdcdd, 0xcd54, 0xb9eb, 0xa862, 0x9af9, 0x8b70, 0x8408, 0x9581, 0xa71a, 0xb693, 0xc22c, 0xd3a5, 0xe13e, 0xf0b7, 0x0840, 0x19c9, 0x2b52, 0x3adb, 0x4e64, 0x5fed, 0x6d76, 0x7cff, 0x9489, 0x8500, 0xb79b, 0xa612, 0xd2ad, 0xc324, 0xf1bf, 0xe036, 0x18c1, 0x0948, 0x3bd3, 0x2a5a, 0x5ee5, 0x4f6c, 0x7df7, 0x6c7e, 0xa50a, 0xb483, 0x8618, 0x9791, 0xe32e, 0xf2a7, 0xc03c, 0xd1b5, 0x2942, 0x38cb, 0x0a50, 0x1bd9, 0x6f66, 0x7eef, 0x4c74, 0x5dfd, 0xb58b, 0xa402, 0x9699, 0x8710, 0xf3af, 0xe226, 0xd0bd, 0xc134, 0x39c3, 0x284a, 0x1ad1, 0x0b58, 0x7fe7, 0x6e6e, 0x5cf5, 0x4d7c, 0xc60c, 0xd785, 0xe51e, 0xf497, 0x8028, 0x91a1, 0xa33a, 0xb2b3, 0x4a44, 0x5bcd, 0x6956, 0x78df, 0x0c60, 0x1de9, 0x2f72, 0x3efb, 0xd68d, 0xc704, 0xf59f, 0xe416, 0x90a9, 0x8120, 0xb3bb, 0xa232, 0x5ac5, 0x4b4c, 0x79d7, 0x685e, 0x1ce1, 0x0d68, 0x3ff3, 0x2e7a, 0xe70e, 0xf687, 0xc41c, 0xd595, 0xa12a, 0xb0a3, 0x8238, 0x93b1, 0x6b46, 0x7acf, 0x4854, 0x59dd, 0x2d62, 0x3ceb, 0x0e70, 0x1ff9, 0xf78f, 0xe606, 0xd49d, 0xc514, 0xb1ab, 0xa022, 0x92b9, 0x8330, 0x7bc7, 0x6a4e, 0x58d5, 0x495c, 0x3de3, 0x2c6a, 0x1ef1, 0x0f78];\n\nif (typeof Int32Array !== 'undefined') TABLE = new Int32Array(TABLE);\n\nvar crc16kermit = (0, _define_crc2.default)('kermit', function (buf, previous) {\n  if (!_buffer.Buffer.isBuffer(buf)) buf = (0, _create_buffer2.default)(buf);\n\n  var crc = typeof previous !== 'undefined' ? ~~previous : 0x0000;\n\n  for (var index = 0; index < buf.length; index++) {\n    var byte = buf[index];\n    crc = (TABLE[(crc ^ byte) & 0xff] ^ crc >> 8) & 0xffff;\n  }\n\n  return crc;\n});\n\nexports.default = crc16kermit;\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _buffer = require('buffer');\n\nvar createBuffer = _buffer.Buffer.from && _buffer.Buffer.alloc && _buffer.Buffer.allocUnsafe && _buffer.Buffer.allocUnsafeSlow ? _buffer.Buffer.from : // support for Node < 5.10\nfunction (val) {\n  return new _buffer.Buffer(val);\n};\n\nexports.default = createBuffer;\n","\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = function (model, calc) {\n  var fn = function fn(buf, previous) {\n    return calc(buf, previous) >>> 0;\n  };\n  fn.signed = calc;\n  fn.unsigned = fn;\n  fn.model = model;\n\n  return fn;\n};\n"]}