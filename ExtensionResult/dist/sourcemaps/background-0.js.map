{"version":3,"sources":["app/scripts/first-time-state.js","shared/constants/metametrics.js","app/scripts/lib/getObjStructure.js","node_modules/debounce-stream/index.js","app/scripts/lib/notification-manager.js","app/scripts/lib/network-store.js","app/scripts/lib/get-first-preferred-lang-code.js","app/scripts/lib/createStreamSink.js","app/scripts/lib/local-store.js","node_modules/@metamask/obs-store/dist/index.js","app/scripts/lib/migrator/index.js","app/scripts/migrations/index.js","app/scripts/lib/ens-ipfs/setup.js","app/scripts/metamask-controller.js","node_modules/debounce/index.js","node_modules/through/index.js","node_modules/duplexer/index.js","node_modules/@metamask/obs-store/dist/asStream.js","node_modules/@metamask/obs-store/dist/LocalStorageStore.js","node_modules/@metamask/obs-store/dist/ComposedStore.js","node_modules/@metamask/obs-store/dist/MergedStore.js","node_modules/@metamask/obs-store/dist/ObservableStore.js","node_modules/@metamask/obs-store/dist/transform.js","app/scripts/migrations/003.js","app/scripts/migrations/013.js","app/scripts/migrations/009.js","app/scripts/migrations/002.js","app/scripts/migrations/025.js","app/scripts/migrations/016.js","app/scripts/migrations/004.js","app/scripts/migrations/019.js","app/scripts/migrations/023.js","app/scripts/migrations/011.js","app/scripts/migrations/045.js","app/scripts/migrations/017.js","app/scripts/migrations/014.js","app/scripts/migrations/031.js","app/scripts/migrations/033.js","app/scripts/migrations/034.js","app/scripts/migrations/042.js","app/scripts/migrations/015.js","app/scripts/migrations/040.js","app/scripts/migrations/012.js","app/scripts/migrations/027.js","app/scripts/migrations/032.js","app/scripts/migrations/041.js","app/scripts/migrations/039.js","app/scripts/migrations/051.js","app/scripts/migrations/024.js","app/scripts/migrations/056.js","app/scripts/migrations/062.js","app/scripts/migrations/046.js","app/scripts/migrations/061.js","app/scripts/migrations/035.js","app/scripts/migrations/047.js","app/scripts/migrations/058.js","app/scripts/migrations/065.js","app/scripts/migrations/021.js","app/scripts/migrations/026.js","app/scripts/migrations/022.js","app/scripts/migrations/064.js","app/scripts/migrations/010.js","app/scripts/migrations/020.js","app/scripts/migrations/036.js","app/scripts/migrations/055.js","app/scripts/migrations/059.js","app/scripts/migrations/069.js","app/scripts/migrations/044.js","app/scripts/migrations/030.js","app/scripts/migrations/028.js","app/scripts/migrations/043.js","app/scripts/migrations/050.js","app/scripts/migrations/049.js","app/scripts/migrations/052.js","app/scripts/migrations/054.js","app/scripts/migrations/060.js","app/scripts/migrations/037.js","app/scripts/migrations/008.js","app/scripts/migrations/006.js","app/scripts/migrations/038.js","app/scripts/migrations/005.js","app/scripts/migrations/029.js","app/scripts/migrations/007.js","app/scripts/migrations/053.js","app/scripts/migrations/048.js","app/scripts/migrations/068.js","app/scripts/migrations/063.js","app/scripts/migrations/067.js","app/scripts/migrations/057.js","app/scripts/migrations/066.js","app/scripts/migrations/018.js","node_modules/base32-encode/index.js","app/scripts/lib/ens-ipfs/resolver.js","app/scripts/lib/createTabIdMiddleware.js","app/scripts/lib/createOriginMiddleware.js","node_modules/nanoid/index.browser.js","app/scripts/lib/createMetaRPCHandler.js","node_modules/json-rpc-middleware-stream/engineStream.js","app/scripts/lib/ComposableObservableStore.js","app/scripts/lib/createLoggerMiddleware.js","app/scripts/controllers/cached-balances.js","app/scripts/lib/decrypt-message-manager.js","app/scripts/controllers/incoming-transactions.js","app/scripts/controllers/alert.js","app/scripts/lib/personal-message-manager.js","app/scripts/lib/createOnboardingMiddleware.js","app/scripts/lib/encryption-public-key-manager.js","app/scripts/controllers/preferences.js","app/scripts/controllers/detect-tokens.js","app/scripts/controllers/app-state.js","app/scripts/lib/message-manager.js","app/scripts/controllers/metametrics.js","app/scripts/lib/seed-phrase-verifier.js","app/scripts/controllers/onboarding.js","node_modules/json-rpc-engine/dist/index.js","app/scripts/lib/typed-message-manager.js","app/scripts/controllers/permissions/index.js","app/scripts/controllers/ens/index.js","app/scripts/controllers/transactions/index.js","app/scripts/lib/segment.js","app/scripts/account-import-strategies/index.js","app/scripts/controllers/network/index.js","app/scripts/controllers/swaps.js","node_modules/@metamask/eth-ledger-bridge-keyring/index.js","node_modules/eth-json-rpc-middleware/dist/index.js","node_modules/eth-lattice-keyring/index.js","node_modules/@metamask/smart-transactions-controller/dist/index.js","app/scripts/lib/account-tracker.js","node_modules/eth-trezor-keyring/index.js","node_modules/@metamask/snap-controllers/dist/index.js","app/scripts/lib/rpc-method-middleware/index.js","node_modules/@keystonehq/metamask-airgapped-keyring/dist/index.js","app/scripts/controllers/threebox.js","node_modules/@metamask/safe-event-emitter/index.js","node_modules/@metamask/obs-store/node_modules/through2/through2.js","app/scripts/migrations/fail-tx.js","app/scripts/controllers/transactions/lib/tx-state-history-helpers.js","node_modules/to-data-view/index.js","app/scripts/lib/ens-ipfs/contracts/registry.js"],"names":["config","PreferencesController","frequentRpcListDetail","rpcUrl","chainId","ticker","nickname","rpcPrefs","path","title","url","obj","deepMap","_lodash","cloneDeep","value","require","target","visit","Object","entries","forEach","key","through","duplexer","debounce","module","exports","_ms","immediate","input","data","output","queue","_safeEventEmitter","_interopRequireDefault","_extension","NOTIFICATION_MANAGER_EVENTS","POPUP_CLOSED","NotificationManager","default","constructor","super","this","platform","addOnRemovedListener","_onWindowClosed","bind","markAsAutomaticallyClosed","_popupAutomaticallyClosed","async","popup","_getPopup","focusWindow","id","left","top","lastFocused","getLastFocusedWindow","width","_","screenX","screenY","outerWidth","window","Math","max","popupWindow","openWindow","type","height","state","updateWindowPosition","_popupId","windowId","undefined","emit","automaticallyClosed","windows","getAllWindows","_getPopupIn","find","win","_loglevel","_time","fetchWithTimeout","SECOND","_defineProperty2","_initialized","_initializing","_init","_state","response","ok","json","error","debug","message","userPreferredLocaleCodes","getPreferredLocales","e","firstPreferredLangCode","map","code","toLowerCase","replace","existingLocaleCodes","split","_extensionizer","_pify","_index","i18n","getAcceptLanguages","errorFirst","locale","asyncWriteFn","_opts","AsyncWritableStream","_readableStream","_promiseToCallback","Writable","opts","_objectSpread","objectMode","_asyncWriteFn","_write","chunk","encoding","callback","_util","isSupported","Boolean","storage","local","result","_get","keys","length","_set","Promise","resolve","reject","get","err","checkForError","set","__createBinding","create","o","m","k","k2","defineProperty","enumerable","__exportStar","p","prototype","hasOwnProperty","call","_events","Migrator","migrations","sort","a","b","version","lastMigration","slice","defaultVersion","versionedData","generateInitialState","pendingMigrations","filter","migration","meta","migratedData","migrate","Error","originalErrorMessage","_2","_3","_4","_5","_6","_7","_8","_9","_10","_11","_12","_13","_14","_15","_16","_17","_18","_19","_20","_21","_22","_23","_24","_25","_26","_27","_28","_29","_30","_31","_32","_33","_34","_35","_36","_37","_38","_39","_40","_41","_42","_43","_44","_45","_46","_47","_48","_49","_50","_51","_52","_53","_54","_55","_56","_57","_58","_59","_60","_61","_62","_63","_64","_65","_66","_67","_68","provider","urlPatterns","supportedTopLevelDomains","tld","webRequest","onErrorOccurred","addListener","webRequestDidFail","urls","types","remove","removeListener","details","tabId","getCurrentChainId","URL","domainParts","name","topLevelDomain","includes","ipfsGateway","getIpfsGateway","tabs","update","_resolver","resolvedUrl","hash","pathname","search","fragment","method","status","console","warn","padded","padEnd","decoded","_base64Js","toByteArray","options","padding","_base32Encode","attemptResolve","_fetchWithTimeout","_pump","_obsStore","_asStream","_jsonRpcEngine","_engineStream","_ethJsonRpcFilters","_subscriptionManager","_ethJsonRpcMiddleware","_ethKeyringController","_ethRpcErrors","_awaitSemaphore","_ethereumjsUtil","_ethTrezorKeyring","_ethLedgerBridgeKeyring","_ethLatticeKeyring","_metamaskAirgappedKeyring","_ethQuery","_nanoid","_browser","_controllers","_smartTransactionsController","_snapControllers","_transaction","_swaps","_network","_hardwareWallets","_permissions","_notifications","_hexstringUtils","_app","_conversions","_tokenUtil","_transactions","_ComposableObservableStore","_accountTracker","_createLoggerMiddleware","_rpcMethodMiddleware","_createOriginMiddleware","_createTabIdMiddleware","_createOnboardingMiddleware","_streamUtils","_ens","_network2","_interopRequireWildcard","_preferences","_appState","_cachedBalances","_alert","_onboarding","_threebox","_incomingTransactions","_messageManager","_decryptMessageManager","_encryptionPublicKeyManager","_personalMessageManager","_typedMessageManager","_transactions2","_detectTokens","_swaps2","_accountImportStrategies","_seedPhraseVerifier","_metametrics","_segment","_createMetaRPCHandler","_permissions2","UPDATE_BADGE","APPROVAL_STATE_CHANGE","MetamaskController","_process$env$CONF","defaultMaxListeners","sendUpdate","privateSendUpdate","MILLISECOND","extension","notificationManager","initState","getVersion","recordFirstTimeInfo","activeControllerConnections","getRequestAccountTabIds","getOpenMetamaskTabsIds","controllerMessenger","ControllerMessenger","store","persist","connections","createVaultMutex","Mutex","runtime","onInstalled","reason","openExtensionInBrowser","approvalController","ApprovalController","messenger","getRestricted","showApprovalRequest","showUserConfirmation","networkController","NetworkController","setInfuraProjectId","infuraProjectId","initializeProvider","getProviderAndBlockTracker","blockTracker","preferencesController","initLangCode","openPopup","network","migrateAddressBookState","tokensController","TokensController","onPreferencesStateChange","subscribe","onNetworkStateChange","assetsContractController","AssetsContractController","collectiblesController","CollectiblesController","getERC721AssetName","getERC721AssetSymbol","getERC721TokenURI","getERC721OwnerOf","getERC1155BalanceOf","getERC1155TokenURI","setApiKey","process","env","OPENSEA_KEY","collectibleDetectionController","CollectibleDetectionController","onCollectiblesStateChange","listener","getOpenSeaApiKey","openSeaApiKey","getBalancesInSingleCall","addCollectible","getCollectiblesState","metaMetricsController","segment","preferencesStore","onNetworkDidChange","on","NETWORK_EVENTS","NETWORK_DID_CHANGE","getNetworkIdentifier","environment","MetaMetricsController","captureException","gasFeeMessenger","gasApiBaseUrl","GAS_API_BASE_URL","gasFeeController","GasFeeController","interval","clientId","SWAPS_CLIENT_ID","getProvider","getCurrentNetworkEIP1559Compatibility","getEIP1559Compatibility","getCurrentAccountEIP1559Compatibility","legacyAPIEndpoint","EIP1559APIEndpoint","getCurrentNetworkLegacyGasAPICompatibility","IN_TEST","MAINNET_CHAIN_ID","getChainId","qrHardwareKeyring","MetaMaskKeyring","appStateController","addUnlockListener","isUnlocked","AppStateController","onInactiveTimeout","setLocked","showUnlockRequest","qrHardwareStore","getMemStore","currencyRateMessenger","currencyRateController","CurrencyRateController","includeUSDRate","CurrencyController","tokenListMessenger","tokenListController","TokenListController","hexToDecimal","useStaticTokenList","getState","useTokenDetection","cb","networkState","modifiedNetworkState","preferencesState","modifiedPreferencesState","phishingController","PhishingController","notificationController","NotificationController","allNotifications","UI_NOTIFICATIONS","tokenRatesController","TokenRatesController","onTokensStateChange","onCurrencyRateStateChange","ensController","incomingTransactionsController","IncomingTransactionsController","accountTracker","start","stop","cachedBalancesController","CachedBalancesController","onboardingController","OnboardingController","hub","additionalKeyrings","keyringController","keyringTypes","KeyringController","encryptor","memStore","_onKeyringControllerUpdate","_onUnlock","_onLock","getIdentities","identities","permissionController","PermissionController","allowedActions","caveatSpecifications","getCaveatSpecifications","permissionSpecifications","getPermissionSpecifications","getAllAccounts","getAccounts","captureKeyringTypesWithMissingIdentities","accounts","keyringTypesWithMissingIdentities","address","_this$keyringControll","getKeyringForAccount","identitiesCount","accountTrackerCount","unrestrictedMethods","permissionLogController","PermissionLogController","restrictedMethods","Set","RestrictedMethods","subjectMetadataController","SubjectMetadataController","subjectCacheLimit","detectTokensController","preferences","keyringMemStore","tokenList","addressBookController","AddressBookController","alertController","AlertController","threeBoxController","ThreeBoxController","getKeyringControllerState","trackMetaMetricsEvent","trackEvent","txController","TransactionController","TransactionManager","getPermittedAccounts","getProviderConfig","networkStore","txHistoryLimit","signTransaction","createEventFragment","updateEventFragment","finalizeEventFragment","getEventFragmentById","getParticipateInMetrics","participateInMetaMetrics","getEIP1559GasFeeEstimates","fetchGasFeeEstimates","getExternalPendingTransactions","txId","TRANSACTION_STATUSES","CONFIRMED","FAILED","txMeta","txStateManager","getTransaction","getFrequentRpcListDetail","_rpcSettings$rpcPrefs","rpcSettings","rpc","showTransactionNotification","txReceipt","TRANSACTION_TYPES","TOKEN_METHOD_TRANSFER_FROM","txParams","_allCollectibles$user","transactionData","getTransactionData","tokenAmountOrTokenId","getTokenValueParam","allCollectibles","knownCollectible","userAddress","isEqualCaseInsensitive","contractAddress","tokenId","checkAndUpdateSingleCollectibleOwnershipStatus","metamaskState","_txMeta$simulationFai","event","category","properties","action","errorMessage","simulationFails","numberOfTokens","tokens","numberOfAccounts","matomoEvent","setNativeCurrency","lookupNetwork","messageManager","metricsEvent","personalMessageManager","decryptMessageManager","encryptionPublicKeyManager","typedMessageManager","swapsController","getBufferedGasLimit","txGasUtil","getTokenRatesState","smartTransactionsController","getNetwork","getNetworkState","getNonceLock","nonceTracker","confirmExternalTransaction","SmartTransactionsController","_updateAccounts","NETWORK_WILL_CHANGE","clearUnapprovedTxs","clearUnapproved","memState","_onStateUpdate","updateStructure","AccountTracker","TxController","MessageManager","PersonalMessageManager","DecryptMessageManager","EncryptionPublicKeyManager","TypesMessageManager","SwapsController","EnsController","password","PASSWORD","completedOnboarding","submitPassword","getPlatformInfo","setBrowserEnvironment","os","getBrowserInfo","setupControllerEventSubscriptions","publicConfigStore","createPublicConfigStore","handleAccountsChange","origin","newAccounts","notifyConnections","NOTIFICATION_NAMES","accountsChanged","params","updateAccountsHistory","lastSelectedAddress","selectedAddress","permittedAccountsMap","getPermittedAccountsByOrigin","currentValue","previousValue","changedAccounts","getChangedAccounts","providerOpts","static","eth_syncing","web3_clientVersion","getSelectedAddress","processTransaction","newUnapprovedTransaction","processEthSignMessage","newUnsignedMessage","processTypedMessage","newUnsignedTypedMessage","processTypedMessageV3","processTypedMessageV4","processPersonalMessage","newUnsignedPersonalMessage","processDecryptMessage","newRequestDecryptMessage","processEncryptionPublicKey","newRequestEncryptionPublicKey","getPendingNonce","getPendingTransactionByHash","getTransactions","searchCriteria","SUBMITTED","ObservableStore","updatePublicConfigStore","putState","networkVersion","selectPublicState","getProviderNetworkState","vault","isInitialized","getFlatState","getApi","setCurrentCurrency","setUseBlockie","setUseNonceField","setUsePhishDetect","setUseTokenDetection","setUseCollectibleDetection","setOpenSeaEnabled","setIpfsGateway","setParticipateInMetaMetrics","setCurrentLocale","markPasswordForgotten","unMarkPasswordForgotten","safelistPhishingDomain","markNotificationPopupAsAutomaticallyClosed","addNewAccount","verifySeedPhrase","resetAccount","removeAccount","importAccountWithStrategy","connectHardware","forgetDevice","checkHardwareStatus","unlockHardwareWalletAccount","setLedgerTransportPreference","attemptLedgerTransportCreation","establishLedgerTransportPreference","submitQRHardwareCryptoHDKey","submitCryptoHDKey","submitQRHardwareCryptoAccount","submitCryptoAccount","cancelSyncQRHardware","cancelSync","submitQRHardwareSignature","submitSignature","cancelQRHardwareSignRequest","cancelSignRequest","fetchInfoToSync","verifyPassword","setProviderType","rollbackToPreviousProvider","setCustomRpc","updateAndSetCustomRpc","delCustomRpc","setSelectedAddress","addToken","rejectWatchAsset","acceptWatchAsset","updateTokenType","removeToken","removeAndIgnoreToken","setAccountLabel","setFeatureFlag","setPreference","addKnownMethodData","setDismissSeedBackUpReminder","setAdvancedGasFee","setEIP1559V2Enabled","getTokenStandardAndDetails","addCollectibleVerifyOwnership","removeAndIgnoreCollectible","removeCollectible","checkAndUpdateAllCollectiblesOwnershipStatus","isCollectibleOwner","setAddressBook","removeFromAddressBook","delete","setLastActiveTime","setDefaultHomeActiveTabName","setConnectedStatusPopoverHasBeenShown","setRecoveryPhraseReminderHasBeenShown","setRecoveryPhraseReminderLastShown","setShowTestnetMessageInDropdown","setCollectiblesDetectionNoticeDismissed","setEnableEIP1559V2NoticeDismissed","updateCollectibleDropDownState","tryReverseResolveAddress","reverseResolveAddress","createNewVaultAndKeychain","createNewVaultAndRestore","exportAccount","cancelTransaction","updateTransaction","updateAndApproveTransaction","approveTransactionsWithSameNonce","createCancelTransaction","createSpeedUpTransaction","estimateGas","getNextNonce","addUnapprovedTransaction","createTransactionEventFragment","signMessage","cancelMessage","signPersonalMessage","cancelPersonalMessage","signTypedMessage","cancelTypedMessage","decryptMessage","decryptMessageInline","cancelDecryptMessage","encryptionPublicKey","cancelEncryptionPublicKey","setSeedPhraseBackedUp","completeOnboarding","setFirstTimeFlowType","setAlertEnabledness","setUnconnectedAccountAlertShown","setWeb3ShimUsageAlertDismissed","setThreeBoxSyncingPermission","restoreFromThreeBox","setShowRestorePromptToFalse","getThreeBoxLastUpdated","getLastUpdated","turnThreeBoxSyncingOn","initializeThreeBox","removePermissionsFor","revokePermissions","approvePermissionsRequest","acceptPermissionsRequest","rejectPermissionsRequest","getPermissionBackgroundApiMethods","fetchAndSetQuotes","setSelectedQuoteAggId","resetSwapsState","setSwapsTokens","clearSwapsQuotes","setApproveTxId","setTradeTxId","setSwapsTxGasPrice","setSwapsTxGasLimit","setSwapsTxMaxFeePerGas","setSwapsTxMaxFeePriorityPerGas","safeRefetchQuotes","stopPollingForQuotes","setBackgroundSwapRouteState","resetPostFetchState","setSwapsErrorKey","setInitialGasEstimate","setCustomApproveTxData","setSwapsLiveness","setSwapsFeatureFlags","setSwapsUserFeeLevel","setSwapsQuotesPollingLimitEnabled","setSmartTransactionsOptInStatus","setOptInState","fetchSmartTransactionFees","getFees","estimateSmartTransactionsGas","submitSignedTransactions","cancelSmartTransaction","fetchSmartTransactionsLiveness","fetchLiveness","updateSmartTransaction","setStatusRefreshInterval","trackMetaMetricsPage","trackPage","resolvePendingApproval","accept","rejectPendingApproval","updateViewedNotifications","updateViewed","getGasFeeEstimatesAndStartPolling","disconnectGasFeeEstimatePoller","disconnectPoller","getGasFeeTimeEstimate","getTimeEstimate","addPollingTokenToAppState","addPollingToken","removePollingTokenFromAppState","removePollingToken","detectNewTokens","detectCollectibles","releaseLock","acquire","fullUpdate","addresses","setAddresses","selectFirstIdentity","encodedSeedPhrase","lastBalance","seedPhraseAsBuffer","Buffer","from","clearState","clearAccounts","clearCachedBalances","ethQuery","getBalance","primaryKeyring","getKeyringsByType","transportPreference","getLedgerTransportPreference","cached","balance","currentLocale","frequentRpcList","allTokens","allERC20Tokens","accountAddress","checksummedAccountAddress","toChecksumHexAddress","asset","isERC721","hdKeyring","simpleKeyPairKeyrings","hdAccounts","simpleKeyPairAccounts","all","keyring","reduce","acc","hd","item","pos","indexOf","simpleKeyPair","ledger","trezor","lattice","transactions","values","tx","checksummedTxFrom","allIgnoredTokens","checkForLatestBlock","threeBoxSyncingAllowed","getThreeBoxSyncingState","box","init","getPrimaryKeyringMnemonic","mnemonic","deviceName","hdPath","keyringName","DEVICE_NAMES","TREZOR","LEDGER","QR","LATTICE","addNewKeyring","setHdPath","appName","model","getModel","setTrezorModel","getKeyringForDevice","attemptMakeApp","page","getPreviousPage","getNextPage","getFirstPage","oldAccounts","accountsToTrack","concat","syncWithAddresses","getAccountLabel","index","hdPathDescription","toUpperCase","parseInt","trim","setAccountToUnlock","keyState","label","getName","serialized","serialize","verifyAccounts","Array","wipeTransactions","resetConnection","executeRestrictedMethod","eth_accounts","errorCodes","unauthorized","removeAllAccountPermissions","targetAccount","updatePermissionsByCaveat","CaveatTypes","restrictReturnedAccounts","existingAccounts","CaveatMutatorFactories","removeAddress","strategy","args","privateKey","importAccount","allAccounts","req","msgParams","normalizeMsgData","promise","ethErrors","invalidParams","addUnapprovedMessageAsync","info","msgId","metamaskId","cleanMsgParams","approveMessage","rawSig","setMsgStatusSigned","rejectMsg","msg","getMsg","stripped","stripHexPrefix","buff","JSON","parse","toString","rawData","_updateMsg","rawMess","setMsgStatusDecrypted","KEYRING_TYPES","publicKey","getEncryptionPublicKey","setMsgStatusReceived","signature","originalTxId","customGasSettings","newTxMetaProps","estimateGasParams","query","res","setPasswordForgotten","setupUntrustedCommunication","connectionStream","usePhishDetect","_subjectType","subjectType","sender","SUBJECT_TYPES","EXTENSION","WEBSITE","hostname","test","sendPhishingWarning","mux","setupMultiplex","setupProviderConnection","createStream","setupPublicConfig","setupTrustedCommunication","setupControllerConnection","INTERNAL","write","outStream","api","handleUpdate","_writableState","ended","jsonrpc","addSubjectMetadata","extensionId","tab","engine","setupProviderEngine","providerStream","connectionId","addConnection","_middleware","mid","destroy","removeConnection","JsonRpcEngine","filterMiddleware","subscriptionManager","events","push","createMiddleware","location","registerOnboarding","createMethodMiddleware","getProviderState","getUnlockPromise","handleWatchAssetRequest","watchAsset","requestUserApproval","addAndShowApprovalRequest","sendMetrics","getPermissionsForOrigin","getPermissions","hasPermission","requestAccountsPermission","requestPermissions","requestPermissionsForOrigin","addCustomRpc","addToFrequentRpcList","chainName","blockExplorerUrl","findCustomRpcBy","updateRpcTarget","setRpcTarget","getWeb3ShimUsageState","setWeb3ShimUsageRecorded","middleware","createPermissionMiddleware","providerAsMiddleware","configStream","storeAsStream","removeAllConnections","payload","conn","notifyAllConnections","getPayload","keyrings","syncAddresses","unlockStateChanged","newState","isClientOpenAndUnlocked","_isClientOpen","chainChanged","addressFrom","nonceDetails","pendingNonce","highestSuggested","nonceLock","nextNonce","oldChainId","newChainId","duplicate","addressBook","entry","memo","updateRpc","removeFromFrequentRpcList","rpcInfo","existingRpcInfo","transportType","newValue","updateTransportMethod","catch","firstTimeInfo","date","Date","now","isClientOpen","open","isOpen","onClientClosed","stopPolling","clearPollingTokens","onEnvironmentTypeClosed","environmentType","appStatePollingTokenType","POLLING_TOKEN_ENVIRONMENT_TYPES","pollingToken","bypass","trezorKeyring","dispose","func","wait","timeout","context","timestamp","later","last","setTimeout","apply","debounced","arguments","callNow","clear","clearTimeout","flush","Stream","end","destroyed","buffer","_ended","stream","drain","paused","shift","_end","writable","readable","autoDestroy","nextTick","pause","resume","writeMethods","readMethods","readEvents","arr","fn","i","writer","reader","methodName","reemit","unshift","stream_1","ObservableStoreStream","Duplex","obsStore","handler","pipe","dest","_encoding","_read","_size","_destroy","unsubscribe","LocalStorageStore","ObservableStore_1","global","localStorage","storageKey","_storageKey","_getState","getItem","_putState","stringify","setItem","ComposedStore","children","_children","childKey","child","_addChild","updateFromChild","childValue","MergedStore","_updateWholeState","childStates","assign","__importDefault","mod","__esModule","safe_event_emitter_1","updateState","partialState","storeTransformStream","through2_1","syncTransformFn","originalVersionedData","rpcTarget","transformState","stack","merge","currentCurrency","currentFiat","fiatCurrency","conversionRate","conversionDate","UNAPPROVED","whiteList","addHexPrefix","to","nonce","gas","gasPrice","normalizedTxParams","normalizeTxParams","safeVersionedData","txList","highestConfirmedNonce","nonces","getHighestNonce","metamaskNetworkId","highestContinuousNonce","startPoint","highest","getHighestContinuousFrom","maxNonce","note","reverseTxList","reverse","stripping","txIndex","findIndex","REJECTED","DROPPED","splice","TOSHash","isDisclaimerConfirmed","_state$PreferencesCon","outdatedGateways","retryCount","NoticeController","featureFlags","privacyMode","migratedPrivacyMode","connectedStatusPopoverHasBeenShown","ProviderApprovalController","noticesList","notice","read","body","betaUI","completedUiMigration","autoLockTimeLimit","autoLogoutTimeLimit","SAI_TOKEN_SYMBOL","isOldDai","token","symbol","isArray","accountTokens","networkTokens","tokensOnNetwork","_state$NetworkControl","_NETWORK_TYPE_TO_ID_M","enumChainId","NETWORK_TYPE_TO_ID_MAP","account","chain","assetImages","metaMetricsSendCount","ABTestController","currentTime","getTime","recoveryPhraseReminderHasBeenShown","recoveryPhraseReminderLastShown","seedWords","_state$TransactionCon","transaction","_state$AppStateContro","swapsWelcomeMessageHasBeenShown","_state$OnboardingCont","firstTimeFlowType","BlacklistController","RecentBlocks","walletNicknames","submittedTime","SENT_ETHER","isPlainObject","SIMPLE_SEND","history","txEvent","ShapeShiftController","shapeShiftTxList","metamask","_state$IncomingTransa","incomingTxLastFetchedBlocksByNetwork","incomingTxLastFetchedBlockByChainId","mapKeys","_NETWORK_TYPE_TO_ID_M2","UNKNOWN_CHAIN_ID_KEY","nonceNetworkGroupedObject","groupBy","_tx$txParams","_tx$chainId","withoutOrphans","pickBy","group","some","CANCEL","RETRY","keyBy","_state$SubjectMetadat","subjectMetadata","metadata","mkrMigrationReminderTimestamp","Number","isNaN","identity","mainnet","currentAccountTab","LEGACY_LOCAL_STORAGE_KEYS","_window$localStorage","removeItem","_state$MetaMetricsCon","metaMetricsId","accountHiddenTokens","newAccountTokens","newAccountHiddenTokens","NETWORK_TYPE_RPC","detail","providerType","MAINNET","ROPSTEN","ROPSTEN_CHAIN_ID","RINKEBY","RINKEBY_CHAIN_ID","GOERLI","GOERLI_CHAIN_ID","KOVAN","KOVAN_CHAIN_ID","isValidDecimals","decimals","match","validTokens","validTokensOnNetwork","SUPPORT_NOTIFICATION_DATE","_state$NotificationCo","notifications","_notifications$SUPPOR","ab","chainIds","newAddressBook","v","add","isEns","util","normalizeEnsName","keyringSubstate","selectedAccount","migrateState","ABTestControllerState","abTests","fullScreenVsPopup","selectSubstateForKeyringController","_failTx","isApproved","APPROVED","createdTime","gasMultiplier","incomingTransactions","transactionCategory","INCOMING","_state$NetworkControl2","_state$NetworkControl3","_state$CachedBalances","_state$AddressBookCon","_state$IncomingTransa2","settings","chainIdRegEx","_state$NetworkControl4","_state$NetworkControl5","cachedBalances","hexRegEx","networkKey","networkEntries","updateChainIds","chainIdKey","networkKeyEntries","newEntries","mergedEntry","_networkKeyEntries$ad","mergeAddressBookKeys","localhost","_accountTokens$accoun","_accountTokens$accoun2","localhostTokens","rpcTokens","localhostTokensMap","tokenArrayToMap","rpcTokensMap","mergedTokens","tokenAddress","array","mergeTokenArrays","PermissionsController","PermissionsMetadata","remainingState","_objectWithoutProperties2","_excluded","domainMetadata","permissionsHistory","permissionsLog","getPermissionControllerState","permissionActivityLog","permissionHistory","getSubjectMetadataControllerState","domains","subjects","transformed","domainEntry","permissions","ethAccountsPermission","oldCaveat","caveats","caveat","newPermission","icon","other","_excluded2","lastUpdated","host","iconUrl","_state$PreferencesCon2","_state$PreferencesCon3","_state$PreferencesCon4","_state$PreferencesCon5","_state$PreferencesCon6","_state$PreferencesCon7","_state$PreferencesCon8","newAllTokens","tokensArray","newAllIgnoredTokens","ignoredTokensArray","hiddenTokens","suggestedTokens","_bignumber","hexNumberIsGreaterThanZero","hexNumber","gt","showTestNetworks","userIsCurrentlyOnATestNet","TEST_CHAINS","userHasMadeATestNetTransaction","userHasACachedBalanceOnATestnet","userHasUsedATestnet","_randomId","defaultTransportType","navigator","hid","LEDGER_TRANSPORT_TYPES","WEBHID","U2F","useLedgerLive","ledgerTransportType","LIVE","_txStateHistoryHelpers","snapshot","snapshotFromTxMeta","newHistory","migrateFromSnapshotsToDiffs","toDataView","variant","alphabet","defaultPadding","view","bits","byteLength","getUint8","eth","_ethjsQuery","_ethEnsNamehash","contract","_ethjsContract","net_version","registryAddress","getRegistryForChainId","Registry","_registry","at","resolverAddress","resolver","hexValueIsEmpty","Resolver","isEIP1577Compliant","supportsInterface","isLegacyResolver","rawContentHash","contenthash","decodedContentHash","_contentHash","decode","getCodec","helpers","cidV0ToV1Base32","content","next","crypto","self","msCrypto","size","bytes","getRandomValues","Uint8Array","methodNotFound","serializeError","shouldIncludeStack","DuplexStream","handle","ComposableObservableStore","removeAllListeners","updatedState","getPersistentState","flatState","controller","isMetamaskInternal","_registerUpdates","balancesToCache","_generateBalancesToCache","currentChainBalancesToCache","accountID","updateCachedBalances","_metamaskController","hexRe","unapprovedDecryptMsgs","unapprovedDecryptMsgCount","messages","getUnapprovedMsgs","addUnapprovedMessage","once","userRejectedRequest","time","msgData","MESSAGE_TYPE","ETH_DECRYPT","addMsg","_saveMsgList","setMsgStatusApproved","prepMsgForDecryption","_setMsgStatus","METAMASK_CONTROLLER_EVENTS","bufferToHex","_bn","etherscanSupportedNetworks","previousValueComparator","comparator","initialValue","cache","first","_onLatestBlock","newBlockNumberDec","newBlockNumberHex","_update","prevState","currState","showIncomingTransactions","prevShowIncomingTransactions","currShowIncomingTransactions","prevSelectedAddress","currSelectedAddress","_ref","currentState","currentBlock","getCurrentBlock","mostRecentlyFetchedBlock","blockToFetchFrom","newIncomingTxs","_getNewIncomingTransactions","newMostRecentlyFetchedBlock","blockNumber","fromBlock","CHAIN_ID_TO_TYPE_MAP","remoteTxList","remoteTxs","_normalizeTxFromEtherscan","_tx$txParams$to","etherscanTransaction","timeStamp","isError","bnToHex","maxFeePerGas","maxPriorityFeePerGas","CHAIN_ID_TO_NETWORK_ID_MAP","_alerts","defaultState","alertEnabledness","TOGGLEABLE_ALERT_TYPES","alertType","unconnectedAccountAlertShownOrigins","web3ShimUsageOrigins","alertId","enabledness","_setWeb3ShimUsageState","WEB3_SHIM_USAGE_ALERT_STATES","RECORDED","DISMISSED","unapprovedPersonalMsgs","unapprovedPersonalMsgCount","PERSONAL_SIGN","prepMsgForSigning","TAB_ID_NONE","unapprovedEncryptionPublicKeyMsgs","unapprovedEncryptionPublicKeyMsgCount","ETH_GET_ENCRYPTION_PUBLIC_KEY","prepMsgForEncryptionPublicKey","_assert","_ethSigUtil","_ethers","_network3","useBlockie","useNonceField","dismissSeedBackUpReminder","useCollectibleDetection","openSeaEnabled","advancedGasFee","knownMethodData","lostIdentities","forgottenPassword","showFiatInTestnets","useNativeCurrencyAsPrimaryCurrency","hideZeroBalanceTokens","IPFS_DEFAULT_GATEWAY_URL","infuraBlocked","ethersProvider","ethers","providers","Web3Provider","setMaxListeners","_subscribeToInfuraAvailability","val","eip1559V2Enabled","fourBytePrefix","methodData","textDirection","oldIdentities","ids","oldId","selected","addAddresses","identityCount","newlyLost","_address","normalize","selectedIdentity","lastSelected","String","newRpcDetails","rpcList","element","rpcDetail","updatedRpc","addressBookKey","send","strict","builtInProviderNetworkIds","networkId","otherRpcEntries","isPrefixedFormattedHexString","feature","activated","updatedFeatureFlags","preference","updatedPreferences","getPreferences","domain","INFURA_IS_BLOCKED","_setInfuraBlocked","INFURA_IS_UNBLOCKED","isBlocked","_web","_singleCallBalanceCheckerAbi","_contracts","DEFAULT_INTERVAL","MINUTE","_this$preferences","_this$tokensControlle","_this$tokensControlle2","tokenAddresses","ignoredTokens","restartTokenDetection","ethContract","web3","SINGLE_CALL_BALANCES_ADDRESS","balances","isActive","_tokenList","tokensToDetect","setProvider","_provider","sliceOfTokensToDetect","tokensSlice","_getTokenBalances","tokensWithBalance","isZero","_handle","clearInterval","setInterval","_keyringMemStore","timeoutMinutes","defaultHomeActiveTabName","browserEnvironment","popupGasPollTokens","notificationGasPollTokens","fullScreenGasPollTokens","collectiblesDetectionNoticeDismissed","enableEIP1559V2NoticeDismissed","showTestnetMessageInDropdown","trezorModel","qrHardware","collectiblesDropdownState","timer","waitingForUnlock","handleUnlock","_showUnlockRequest","_setInactiveTimeout","shouldShowUnlockRequest","waitForUnlock","lastShown","_resetTimer","browser","pollingTokenType","unapprovedMsgs","unapprovedMsgCount","ETH_SIGN","_pubnub","defaultCaptureException","exceptionsToFilter","_captureException","prefState","abandonedFragments","omitBy","fragments","abandoned","generateMetaMetricsId","keccak","round","random","MAX_SAFE_INTEGER","_options$uniqueIdenti","successEvent","uniqueIdentifier","generateUUID","initialEvent","sensitiveProperties","referrer","revenue","currency","_fragment$referrer","eventName","failureEvent","_buildContext","METAMETRICS_BACKGROUND_PAGE_OBJECT","app","userAgent","_buildEventPayload","rawPayload","_properties$network","_properties$chain_id","ENVIRONMENT_TYPE_BACKGROUND","omit","chain_id","environment_type","_track","_options$excludeMetaM","isOptIn","metaMetricsIdOverride","flushImmediately","idType","idValue","excludeMetaMetricsId","METAMETRICS_ANONYMOUS_ID","legacy_event","track","safeError","isOptInPath","idTrait","validatePayload","submitEvent","combinedProperties","createdAccounts","seedPhrase","getKeyringClassForType","restoredAccounts","onboardingTabs","seedPhraseBackedUp","newSeedPhraseBackUpState","_jsonschema","TypedMessageManager","_getCurrentChainId","unapprovedTypedMessages","unapprovedTypedMessagesCount","validateParams","ETH_SIGN_TYPED_DATA","isValidHexAddress","allowNonPrefixed","doesNotThrow","typedSignatureHash","equal","validation","validate","TYPED_MESSAGE_SCHEMA","primaryType","errors","activeChainId","startsWith","fail","_caveatMutators","_backgroundApi","_enums","_permissionLog","_specifications","_selectors","_punycode","ens","ensResolutionsByAddress","getNetworkEnsSupport","_reverseResolveAddress","registeredAddress","lookup","_updateResolutionsByAddress","toASCII","oldState","_humanStandardTokenAbi","_common","_tx","_nonceTracker","_cleanErrorStack","_errorKeys","_gas","_conversion","_transaction2","_contractUtils","_util2","_txStateManager","_txGasUtils","_pendingTxTracker","txUtils","hstInterface","utils","Interface","SWAP_TRANSACTION_TYPES","SWAP","SWAP_APPROVAL","METRICS_STATUS_FAILED","_getCurrentNetworkEIP1559Compatibility","_getCurrentAccountEIP1559Compatibility","signEthTx","inProcessOfSigning","_trackMetaMetricsEvent","_getParticipateInMetrics","_getEIP1559GasFeeEstimates","_mapMethods","_onBootCleanUp","getPendingTransactions","getConfirmedTransactions","pendingTxTracker","publishTransaction","rawTx","sendRawTransaction","getApprovedTransactions","approveTransaction","getCompletedTransactions","_setupListeners","_updateMemstore","_updatePendingTxsAfterFirstBlock","integerChainId","fromAddress","currentNetworkIsCompatible","fromAccountIsCompatible","hardfork","HARDFORKS","LONDON","BERLIN","customChainParams","forCustomChain","addTransaction","_trackTransactionMetricsEvent","TRANSACTION_EVENTS","ADDED","initialTxMeta","finishedTxMeta","internal","transactionType","eip1559Compatibility","validateTxParams","generateTxMeta","getCodeResponse","_determineTransactionType","addTxGasDefaults","loadingDefaults","TRANSACTION_ENVELOPE_TYPES","LEGACY","defaultGasPrice","defaultMaxFeePerGas","defaultMaxPriorityFeePerGas","_getDefaultGasFees","gasLimit","defaultGasLimit","_getDefaultGasLimit","advancedGasFeeDefaultValues","getAdvancedGasFee","userFeeLevel","CUSTOM_GAS_ESTIMATE","decGWEIToHexWEI","maxBaseFee","priorityFee","GAS_RECOMMENDATIONS","MEDIUM","PRIORITY_LEVELS","DAPP_SUGGESTED","originalGasEstimate","defaultGasEstimates","estimateType","gasFeeEstimates","gasEstimateType","GAS_ESTIMATE_TYPES","FEE_MARKET","medium","suggestedMaxPriorityFeePerGas","suggestedMaxFeePerGas","ETH_GASPRICE","customNetworkGasBuffer","CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP","chainType","getChainType","errorKey","TRANSACTION_NO_CONTRACT_ERROR_KEY","GAS_LIMITS","SIMPLE","blockGasLimit","estimatedGasHex","analyzeGasUsage","addGasBuffer","generateNewGasParams","originalTxMeta","incrementNumerator","previousGasParams","newGasParams","_customGasSettings$ga","estimateSuggested","estimateUsed","isEIP1559Transaction","BnMultiplyByFraction","hexToBn","estimatedBaseFee","newTxMeta","has","setTxStatusApproved","customNonceValue","customOrNonce","_failTransaction","err2","listOfTxParams","initialTx","common","getCommonConfiguration","initialTxAsEthTx","TransactionFactory","fromTxData","initialTxAsSerializedHex","rawTxes","signExternalTransaction","_txParams","decimalToHex","unsignedEthTx","signedEthTx","r","s","setTxStatusSigned","preTxBalance","txHash","toBuffer","setTxHash","setTxStatusSubmitted","baseFeePerGas","blockTimestamp","gasUsed","normalizeTxReceiptGasUsed","setTxStatusConfirmed","_markNonceDuplicatesDropped","metricsParams","gas_used","completion_time","_getTransactionCompletionTime","FINALIZED","postTxBalance","latestTxMeta","approvalTxMeta","approvalTxId","_trackSwapsMetrics","addExternalTransaction","setTxStatusRejected","transactionId","_buildEventFragmentProperties","_createTransactionEventFragment","getUnapprovedTxCount","getUnapprovedTxList","getPendingTxCount","getLatestBlock","updatePendingTxs","then","txSignError","_setupBlockTrackerListener","transactionReceipt","confirmTransaction","_dropTransaction","latestBlockNumber","firstRetryBlockNumber","parseTransaction","tokenMethodName","TOKEN_METHOD_APPROVE","TOKEN_METHOD_TRANSFER","contractCode","DEPLOY_CONTRACT","resultCode","isContractAddress","readAddressAsContract","CONTRACT_INTERACTION","sameNonceTxs","otherTxMeta","replacedBy","listenersAreActive","latestBlockHandler","updateSubscription","pendingTxs","resubmitPendingTxs","unapprovedTxs","currentNetworkTxList","limit","swapMetaData","tokensReceived","getSwapsTokensReceivedFromTxMeta","destinationTokenSymbol","destinationTokenAddress","destinationTokenDecimals","quoteVsExecutionRatio","div","token_to_amount","times","estimatedVsUsedGasRatio","estimated_gas","token_to_amount_received","quote_vs_executionRatio","estimated_vs_used_gasRatio","extraParams","source","gasParams","max_fee_per_gas","max_priority_fee_per_gas","gas_price","default_estimate","LOW","HIGH","_gasFeeEstimates$esti","_gasFeeEstimates$esti3","_gasFeeEstimates$esti2","_gasFeeEstimates$esti4","default_max_fee_per_gas","default_max_priority_fee_per_gas","default_gas","default_gas_price","estimate_suggested","estimate_used","gasParamsInGwei","_getGasValuesInGWEI","eip1559Version","eip_1559_version","gas_edit_type","gas_edit_attempted","transaction_envelope_type","TRANSACTION_ENVELOPE_TYPE_NAMES","first_seen","gas_limit","gasValuesInGwei","param","isHexString","hexWEIToDecGWEI","setTxStatusFailed","setTxStatusDropped","_analyticsNode","isDevOrTestEnvironment","METAMASK_DEBUG","SEGMENT_WRITE_KEY","SEGMENT_HOST","_process$env$SEGMENT_2","SEGMENT_FLUSH_INTERVAL","createSegmentMock","flushAt","segmentMock","identify","flushInterval","_ethereumjsWallet","_thirdparty","privateKeyHex","importer","strategies","prefixed","isValidPrivate","wallet","fromEtherWallet","fromV3","privateKeyBuffer","getPrivateKey","walletToPrivateKey","_send","_swaps3","_fetchWithCache","MAX_GAS_LIMIT","FALLBACK_QUOTE_REFRESH_TIME","FALLBACK_SMART_TRANSACTION_REFRESH_TIME","calculateGasEstimateWithRefund","maxGas","estimatedRefund","estimatedGas","maxGasMinusRefund","minus","lt","initialState","swapsState","quotes","quotesPollingLimitEnabled","fetchParams","tradeTxId","approveTxId","quotesLastFetched","customMaxGas","customGasPrice","customMaxFeePerGas","customMaxPriorityFeePerGas","swapsUserFeeLevel","selectedAggId","customApproveTxData","topAggId","routeState","swapsFeatureIsLive","saveFetchedQuotes","swapsQuoteRefreshTime","swapsQuotePrefetchingRefreshTime","swapsStxBatchStatusRefreshTime","swapsStxGetTransactionsRefreshTime","swapsFeatureFlags","getMedianEthValueQuote","_quotes","quoteA","quoteB","overallValueOfQuoteA","overallValueOfQuote","overallValueOfQuoteB","equals","lessThan","medianOverallValue","meansOfQuotesFeesAndValue","quote","upperIndex","lowerIndex","overallValueAtUpperIndex","overallValueAtLowerIndex","quotesMatchingUpperIndexValue","quotesMatchingLowerIndexValue","feesAndValueAtUpperIndex","feesAndValueAtLowerIndex","ethFee","plus","dividedBy","metaMaskFeeInEth","ethValueOfTokens","feeAndValueSumsAsBigNumbers","feeAndValueSums","fetchTradesInfo","_fetchTradesInfo","pollCount","indexOfNewestCallInFlight","_currentNetwork","getBaseApi","cacheRefreshTime","refreshRates","quotesPrefetching","stxGetTransactions","stxBatchStatus","stxStatusDeadline","_swapsRefreshRates","_swapsRefreshRates2","_swapsRefreshRates3","_swapsRefreshRates4","_swapsRefreshRates5","swapsRefreshRates","fetchSwapsRefreshRates","latestSwapsState","swapsStxStatusDeadline","pollForNewQuotes","quotesRefreshRateInMs","pollingTimeout","_swapsState$fetchPara","metaData","fetchParamsMetaData","isPolledRequest","indexOfCurrentCall","setSaveFetchedQuotes","newQuotes","_setSwapsRefreshRates","saveFetchedQuotesAfterResponse","mapValues","sourceTokenInfo","destinationTokenInfo","approvalRequired","isSwapsDefaultTokenAddress","sourceToken","allowance","_getERC20Allowance","firstQuote","approvalNeeded","eq","aggregator","approvalGas","timedoutGasReturn","DEFAULT_ERC20_APPROVE_GAS","balanceError","getAllQuotesWithGasEstimates","QUOTES_NOT_AVAILABLE_ERROR","_topAggId","quotesWithSavingsAndFeeData","_findTopQuoteAndCalculateSavings","SWAPS_FETCH_ORDER_CONFLICT","POLL_COUNT_LIMIT","QUOTES_EXPIRED_ERROR","quoteGasData","trade","aggId","gasEstimateWithRefund","gasEstimate","tradeTxParams","gasTimedOut","gasTimeout","tradeTxParamsForGasEstimate","initialAggId","quoteToUpdate","newGasEstimate","setQuotesLastFetched","swapsLiveness","contractExchangeRates","tokenConversionRates","usedGasPrice","high","addCurrencies","aBase","bBase","toNumericBase","numberOfDecimals","overallValueOfBestQuoteForSorting","averageGas","destinationAmount","destinationToken","sourceAmount","fee","metaMaskFee","totalGasLimitForCalculation","gasTotalInWeiHex","calcGasTotal","totalWeiCost","totalEthCost","conversionUtil","fromCurrency","fromDenomination","toDenomination","fromNumericBase","decimalAdjustedDestinationAmount","calcTokenAmount","tokenPercentageOfPreFeeDestAmount","metaMaskFeeInTokens","tokenConversionRate","conversionRateForSorting","conversionRateForCalculations","overallValueOfQuoteForSorting","savings","_newQuotes$topAggId","bestQuote","medianEthFee","medianMetaMaskFee","medianEthValueOfTokens","performance","total","isBestQuote","walletAddress","Contract","SWAPS_CHAINID_CONTRACT_ADDRESS_MAP","EventEmitter","HDKey","ethUtil","sigUtil","pathBase","NETWORK_API_URLS","ropsten","kovan","rinkeby","LedgerBridgeKeyring","accountDetails","bridgeUrl","perPage","unlockedAccount","hdk","paths","iframe","implementFullBIP44","deserialize","iframeLoaded","_setupIframe","_migrateAccountDetails","toChecksumAddress","_isLedgerLiveHdPath","accountIndexes","bip44","_getPathForIndex","_pathFromAddress","log","unlock","_toLedgerPath","_sendMessage","success","chainCode","addAccounts","n","_addressFromIndex","__getPage","delayedPromise","rawTxHex","_signTransaction","messageToSign","getMessageToSign","isBuffer","rlp","encode","txData","toJSON","freeze","isFrozen","handleSigning","unlockAccountByAddress","newOrMutatedTx","verifySignature","withAccount","addressSignedWith","recoverPersonalSignature","sig","checksummedAddress","isV4","TypedDataUtils","sanitizeData","domainSeparatorHex","hashStruct","hashStructMessageHex","recoverTypedSignature_v4","document","createElement","src","allow","onload","head","appendChild","_getOrigin","tmp","join","contentWindow","postMessage","eventListener","removeEventListener","addEventListener","increment","_getAccountsBIP44","_getAccountsLegacy","valid","_hasPreviousTransactions","_padLeftEven","hex","_normalize","buf","dkey","derive","publicToAddress","_toAscii","str","l","substring","substr","fromCharCode","apiUrl","_getApiUrl","fetch","parsedResponse","BN","SDK","EthTx","Common","Util","keyringType","SDK_TIMEOUT","LatticeKeyring","_resetDefaults","creds","accountIndices","accountOpts","walletUID","sdkState","sdkSession","getStateData","_getCurrentWalletUID","bypassOnStateData","forceReconnect","_getCreds","deviceID","endpoint","_initSession","includedStateData","_connect","_fetchAddresses","addrs","addr","alreadySaved","j","_findSignerIdx","accountIdx","addressIdx","addressParentPath","_getEthereumJsChainId","signerPath","_getHDPathIndices","_type","accessList","forceLegacyTx","fwVersion","revertToLegacy","_signTxData","signedTx","txToReturn","validatingTx","_chainId","toNumber","customNetwork","protocol","signTypedData","sign","_syncCurrentWalletUID","_getPage","_ensureCurrentWalletUID","insertIdx","indices","usedX","_idx","isHardened","idx","isLocked","_openConnectorTab","browserTab","chromium","firefox","_findTabById","_hasCreds","base","listenInterval","receiveMessage","closed","loginUrlParam","paramLoc","dataLoc","_creds","connect","setupData","stateData","baseUrl","privKey","_genSessionKey","Client","recursedAddrs","__fetchAddresses","shouldRecurse","_hdPathHasInternalVarIdx","addrData","startPath","skipCache","getAddresses","createHash","digest","chainIdBN","activeWallet","getActiveWallet","uid","newUID","SmartTransactionsController_1","currentBlockGasLimit","_query","_blockTracker","_currentBlockNumber","_updateForBlock","locals","accountsToAdd","upstream","accountsToRemove","getBlockByNumber","_updateAccountsViaBalanceChecker","SINGLE_CALL_BALANCES_ADDRESS_RINKEBY","SINGLE_CALL_BALANCES_ADDRESS_ROPSTEN","SINGLE_CALL_BALANCES_ADDRESS_KOVAN","_updateAccount","deployedContractAddress","TrezorConnect","transformTypedData","hdPathString","ALLOWED_HD_PATHS","DELAY_BETWEEN_POPUPS","TREZOR_CONNECT_MANIFEST","email","appUrl","ms","isOldStyleEthereumjsTx","TrezorKeyring","features","manifest","getPublicKey","coin","ethereumSignTransaction","getSenderAddress","ethereumSignMessage","dataWithHashes","EIP712Domain","otherTypes","domain_separator_hash","message_hash","ethereumSignTypedData","metamask_v4_compat","_createMethodMiddleware","_migrator","_migrations","_createMetamaskMiddleware","Box","_createProvider","getAppKeyAddress","withAppKeyOrigin","showRestorePrompt","threeBoxLastUpdated","threeBoxAddress","threeBoxSynced","threeBoxDisabled","registeringUpdates","new3Box","space","private","metamaskMiddleware","providerFromEngine","_waitForOnSyncDone","onSyncDone","backupExists","threeBoxConfig","getConfig","spaces","timedOut","syncTimeout","openBox","openSpace","stateUpdate","backedUpState","migrator","formattedStateBackup","initialMigrationState","migratedState","migrateData","migrateBackedUpState","turnThreeBoxSyncingOff","logout","newThreeboxSyncingState","updatePreferences","_update3Box","updateAddressBook","events_1","safeApply","Reflect","SafeEventEmitter","doError","er","len","listeners","copy","arrayClone","Transform","inherits","xtend","DestroyableTransform","_destroyed","noop","enc","through2","construct","transform","t2","_transform","_flush","ctor","Through2","override","highWaterMark","condition","longHistory","generateHistoryEntry","_shortHistory","_fastJsonPatch","applyPatch","newDocument","shallow","previousState","compare","Int8Array","Uint8ClampedArray","DataView","byteOffset","ArrayBuffer","TypeError","constant","inputs","outputs","payable","anonymous","indexed"],"mappings":"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","file":"../ExtensionSource/background-0.js","sourcesContent":["/**\n * @typedef {Object} FirstTimeState\n * @property {Object} config Initial configuration parameters\n * @property {Object} NetworkController Network controller state\n */\n\n/**\n * @type {FirstTimeState}\n */\nconst initialState = {\n  config: {},\n  PreferencesController: {\n    frequentRpcListDetail: [\n      {\n        rpcUrl: 'http://localhost:8545',\n        chainId: '0x539',\n        ticker: 'ETH',\n        nickname: 'Localhost 8545',\n        rpcPrefs: {},\n      },\n    ],\n  },\n};\n\nexport default initialState;\n","// Type Imports\n/**\n * @typedef {import('../../shared/constants/app').EnvironmentType} EnvironmentType\n */\n\n// Type Declarations\n/**\n * Used to attach context of where the user was at in the application when the\n * event was triggered. Also included as full details of the current page in\n * page events.\n *\n * @typedef {Object} MetaMetricsPageObject\n * @property {string} [path] - the path of the current page (e.g /home)\n * @property {string} [title] - the title of the current page (e.g 'home')\n * @property {string} [url] - the fully qualified url of the current page\n */\n\n/**\n * For metamask, this is the dapp that triggered an interaction\n *\n * @typedef {Object} MetaMetricsReferrerObject\n * @property {string} [url] - the origin of the dapp issuing the\n *  notification\n */\n\n/**\n * We attach context to every meta metrics event that help to qualify our\n * analytics. This type has all optional values because it represents a\n * returned object from a method call. Ideally app and userAgent are\n * defined on every event. This is confirmed in the getTrackMetaMetricsEvent\n * function, but still provides the consumer a way to override these values if\n * necessary.\n *\n * @typedef {Object} MetaMetricsContext\n * @property {Object} app - Application metadata.\n * @property {string} app.name - the name of the application tracking the event\n * @property {string} app.version - the version of the application\n * @property {string} userAgent - the useragent string of the user\n * @property {MetaMetricsPageObject} [page] - an object representing details of\n *  the current page\n * @property {MetaMetricsReferrerObject} [referrer] - for metamask, this is the\n *  dapp that triggered an interaction\n */\n\n/**\n * @typedef {Object} MetaMetricsEventPayload\n * @property {string} event - event name to track\n * @property {string} category - category to associate event to\n * @property {string} [environmentType] - The type of environment this event\n *  occurred in. Defaults to the background process type\n * @property {object} [properties] - object of custom values to track, keys\n *  in this object must be in snake_case\n * @property {object} [sensitiveProperties] - Object of sensitive values to\n *  track. Keys in this object must be in snake_case. These properties will be\n *  sent in an additional event that excludes the user's metaMetricsId\n * @property {number} [revenue] - amount of currency that event creates in\n *  revenue for MetaMask\n * @property {string} [currency] - ISO 4127 format currency for events with\n *  revenue, defaults to US dollars\n * @property {number} [value] - Abstract business \"value\" attributable to\n *  customers who trigger this event\n * @property {MetaMetricsPageObject} [page] - the page/route that the event\n *  occurred on\n * @property {MetaMetricsReferrerObject} [referrer] - the origin of the dapp\n *  that triggered the event\n */\n\n/**\n * @typedef {Object} MetaMetricsEventOptions\n * @property {boolean} [isOptIn] - happened during opt in/out workflow\n * @property {boolean} [flushImmediately] - When true will automatically flush\n *  the segment queue after tracking the event. Recommended if the result of\n *  tracking the event must be known before UI transition or update\n * @property {boolean} [excludeMetaMetricsId] - whether to exclude the user's\n *  metametrics id for anonymity\n * @property {string} [metaMetricsId] - an override for the metaMetricsId in\n *  the event one is created as part of an asynchronous workflow, such as\n *  awaiting the result of the metametrics opt-in function that generates the\n *  user's metametrics id\n * @property {boolean} [matomoEvent] - is this event a holdover from matomo\n *  that needs further migration? when true, sends the data to a special\n *  segment source that marks the event data as not conforming to our schema\n */\n\n/**\n * @typedef {Object} MetaMetricsEventFragment\n * @property {string} successEvent - The event name to fire when the fragment\n *  is closed in an affirmative action.\n * @property {string} [failureEvent] - The event name to fire when the fragment\n *  is closed with a rejection.\n * @property {string} [initialEvent] - An event name to fire immediately upon\n *  fragment creation. This is useful for building funnels in mixpanel and for\n *  reduction of code duplication.\n * @property {string} category - the event category to use for both the success\n *  and failure events\n * @property {boolean} [persist] - Should this fragment be persisted in\n *  state and progressed after the extension is locked and unlocked.\n * @property {number} [timeout] - Time in seconds the event should be persisted\n *  for. After the timeout the fragment will be closed as abandoned. if not\n *  supplied the fragment is stored indefinitely.\n * @property {number} [lastUpdated] - Date.now() when the fragment was last\n *  updated. Used to determine if the timeout has expired and the fragment\n *  should be closed.\n * @property {object} [properties] - Object of custom values to track, keys in\n *  this object must be in snake_case.\n * @property {object} [sensitiveProperties] - Object of sensitive values to\n *  track. Keys in this object must be in snake_case. These properties will be\n *  sent in an additional event that excludes the user's metaMetricsId\n * @property {number} [revenue] - amount of currency that event creates in\n *  revenue for MetaMask if fragment is successful.\n * @property {string} [currency] - ISO 4127 format currency for events with\n *  revenue, defaults to US dollars\n * @property {number} [value] - Abstract business \"value\" attributable to\n *  customers who successfully complete this fragment\n * @property {MetaMetricsPageObject} [page] - the page/route that the event\n *  occurred on\n * @property {MetaMetricsReferrerObject} [referrer] - the origin of the dapp\n *  that initiated the event fragment.\n * @property {string} [uniqueIdentifier] - optional argument to override the\n *  automatic generation of UUID for the event fragment. This is useful when\n *  tracking events for subsystems that already generate UUIDs so to avoid\n *  unnecessary lookups and reduce accidental duplication.\n */\n\n/**\n * Represents the shape of data sent to the segment.track method.\n *\n * @typedef {Object} SegmentEventPayload\n * @property {string} [userId] - The metametrics id for the user\n * @property {string} [anonymousId] - An anonymousId that is used to track\n *  sensitive data while preserving anonymity.\n * @property {string} event - name of the event to track\n * @property {Object} properties - properties to attach to the event\n * @property {MetaMetricsContext} context - the context the event occurred in\n */\n\n/**\n * @typedef {Object} MetaMetricsPagePayload\n * @property {string} name - The name of the page that was viewed\n * @property {Object} [params] - The variadic parts of the page url\n *  example (route: `/asset/:asset`, path: `/asset/ETH`)\n *  params: { asset: 'ETH' }\n * @property {EnvironmentType} environmentType - the environment type that the\n *  page was viewed in\n * @property {MetaMetricsPageObject} [page] - the details of the page\n * @property {MetaMetricsReferrerObject} [referrer] - dapp that triggered the page\n *  view\n */\n\n/**\n * @typedef {Object} MetaMetricsPageOptions\n * @property {boolean} [isOptInPath] - is the current path one of the pages in\n *  the onboarding workflow? If true and participateInMetaMetrics is null track\n *  the page view\n */\n\n// Mixpanel converts the zero address value to a truly anonymous event, which\n// speeds up reporting\nexport const METAMETRICS_ANONYMOUS_ID = '0x0000000000000000';\n\n/**\n * This object is used to identify events that are triggered by the background\n * process.\n *\n * @type {MetaMetricsPageObject}\n */\nexport const METAMETRICS_BACKGROUND_PAGE_OBJECT = {\n  path: '/background-process',\n  title: 'Background Process',\n  url: '/background-process',\n};\n\n/**\n * @typedef {Object} SegmentInterface\n * @property {SegmentEventPayload[]} queue - A queue of events to be sent when\n *  the flushAt limit has been reached, or flushInterval occurs\n * @property {() => void} flush - Immediately flush the queue, resetting it to\n *  an empty array and sending the pending events to Segment\n * @property {(\n *  payload: SegmentEventPayload,\n *  callback: (err?: Error) => void\n * ) => void} track - Track an event with Segment, using the internal batching\n *  mechanism to optimize network requests\n * @property {(payload: Object) => void} page - Track a page view with Segment\n * @property {() => void} identify - Identify an anonymous user. We do not\n *  currently use this method.\n */\n\nexport const REJECT_NOTFICIATION_CLOSE = 'Cancel Via Notification Close';\nexport const REJECT_NOTFICIATION_CLOSE_SIG =\n  'Cancel Sig Request Via Notification Close';\n","import { cloneDeep } from 'lodash';\n\n// This will create an object that represents the structure of the given object\n// it replaces all values with the result of their type\n\n// {\n//   \"data\": {\n//     \"CurrencyController\": {\n//       \"conversionDate\": \"number\",\n//       \"conversionRate\": \"number\",\n//       \"currentCurrency\": \"string\"\n//     }\n// }\n\n/**\n * Creates an object that represents the structure of the given object. It replaces all values with the result of their\n * type.\n *\n * @param {Object} obj - The object for which a 'structure' will be returned. Usually a plain object and not a class.\n * @returns {Object} The \"mapped\" version of a deep clone of the passed object, with each non-object property value\n * replaced with the javascript type of that value.\n */\nexport default function getObjStructure(obj) {\n  const structure = cloneDeep(obj);\n  return deepMap(structure, (value) => {\n    return value === null ? 'null' : typeof value;\n  });\n}\n\n/**\n * Modifies all the properties and deeply nested of a passed object. Iterates recursively over all nested objects and\n * their properties, and covers the entire depth of the object. At each property value which is not an object is modified.\n *\n * @param {Object} target - The object to modify\n * @param {Function} visit - The modifier to apply to each non-object property value\n * @returns {Object} The modified object\n */\nfunction deepMap(target = {}, visit) {\n  Object.entries(target).forEach(([key, value]) => {\n    if (typeof value === 'object' && value !== null) {\n      target[key] = deepMap(value, visit);\n    } else {\n      target[key] = visit(value);\n    }\n  });\n  return target;\n}\n","var through = require('through')\n  , duplexer = require('duplexer')\n  , debounce = require('debounce')\n\nmodule.exports = debounceStream\n\nfunction debounceStream(_ms, immediate) {\n  var ms = _ms || 100\n    , input = through(debounce(write, ms, immediate))\n    , output = through()\n\n  return duplexer(input, output)\n\n  function write(data) {\n    output.queue(data)\n  }\n}\n","import EventEmitter from 'safe-event-emitter';\nimport ExtensionPlatform from '../platforms/extension';\n\nconst NOTIFICATION_HEIGHT = 620;\nconst NOTIFICATION_WIDTH = 360;\n\nexport const NOTIFICATION_MANAGER_EVENTS = {\n  POPUP_CLOSED: 'onPopupClosed',\n};\n\n/**\n * A collection of methods for controlling the showing and hiding of the notification popup.\n */\nexport default class NotificationManager extends EventEmitter {\n  constructor() {\n    super();\n    this.platform = new ExtensionPlatform();\n    this.platform.addOnRemovedListener(this._onWindowClosed.bind(this));\n  }\n\n  /**\n   * Mark the notification popup as having been automatically closed.\n   *\n   * This lets us differentiate between the cases where we close the\n   * notification popup v.s. when the user closes the popup window directly.\n   */\n  markAsAutomaticallyClosed() {\n    this._popupAutomaticallyClosed = true;\n  }\n\n  /**\n   * Either brings an existing MetaMask notification window into focus, or creates a new notification window. New\n   * notification windows are given a 'popup' type.\n   *\n   */\n  async showPopup() {\n    const popup = await this._getPopup();\n\n    // Bring focus to chrome popup\n    if (popup) {\n      // bring focus to existing chrome popup\n      await this.platform.focusWindow(popup.id);\n    } else {\n      let left = 0;\n      let top = 0;\n      try {\n        const lastFocused = await this.platform.getLastFocusedWindow();\n        // Position window in top right corner of lastFocused window.\n        top = lastFocused.top;\n        left = lastFocused.left + (lastFocused.width - NOTIFICATION_WIDTH);\n      } catch (_) {\n        // The following properties are more than likely 0, due to being\n        // opened from the background chrome process for the extension that\n        // has no physical dimensions\n        const { screenX, screenY, outerWidth } = window;\n        top = Math.max(screenY, 0);\n        left = Math.max(screenX + (outerWidth - NOTIFICATION_WIDTH), 0);\n      }\n\n      // create new notification popup\n      const popupWindow = await this.platform.openWindow({\n        url: 'notification.html',\n        type: 'popup',\n        width: NOTIFICATION_WIDTH,\n        height: NOTIFICATION_HEIGHT,\n        left,\n        top,\n      });\n\n      // Firefox currently ignores left/top for create, but it works for update\n      if (popupWindow.left !== left && popupWindow.state !== 'fullscreen') {\n        await this.platform.updateWindowPosition(popupWindow.id, left, top);\n      }\n      this._popupId = popupWindow.id;\n    }\n  }\n\n  _onWindowClosed(windowId) {\n    if (windowId === this._popupId) {\n      this._popupId = undefined;\n      this.emit(NOTIFICATION_MANAGER_EVENTS.POPUP_CLOSED, {\n        automaticallyClosed: this._popupAutomaticallyClosed,\n      });\n      this._popupAutomaticallyClosed = undefined;\n    }\n  }\n\n  /**\n   * Checks all open MetaMask windows, and returns the first one it finds that is a notification window (i.e. has the\n   * type 'popup')\n   *\n   * @private\n   */\n  async _getPopup() {\n    const windows = await this.platform.getAllWindows();\n    return this._getPopupIn(windows);\n  }\n\n  /**\n   * Given an array of windows, returns the 'popup' that has been opened by MetaMask, or null if no such window exists.\n   *\n   * @private\n   * @param {Array} windows - An array of objects containing data about the open MetaMask extension windows.\n   */\n  _getPopupIn(windows) {\n    return windows\n      ? windows.find((win) => {\n          // Returns notification popup\n          return win && win.type === 'popup' && win.id === this._popupId;\n        })\n      : null;\n  }\n}\n","import log from 'loglevel';\nimport { SECOND } from '../../../shared/constants/time';\nimport getFetchWithTimeout from '../../../shared/modules/fetch-with-timeout';\n\nconst fetchWithTimeout = getFetchWithTimeout(SECOND * 30);\n\nconst FIXTURE_SERVER_HOST = 'localhost';\nconst FIXTURE_SERVER_PORT = 12345;\nconst FIXTURE_SERVER_URL = `http://${FIXTURE_SERVER_HOST}:${FIXTURE_SERVER_PORT}/state.json`;\n\n/**\n * A read-only network-based storage wrapper\n */\nexport default class ReadOnlyNetworkStore {\n  constructor() {\n    this._initialized = false;\n    this._initializing = this._init();\n    this._state = undefined;\n  }\n\n  /**\n   * Declares this store as compatible with the current browser\n   */\n  isSupported = true;\n\n  /**\n   * Initializes by loading state from the network\n   */\n  async _init() {\n    try {\n      const response = await fetchWithTimeout(FIXTURE_SERVER_URL);\n      if (response.ok) {\n        this._state = await response.json();\n      }\n    } catch (error) {\n      log.debug(`Error loading network state: '${error.message}'`);\n    } finally {\n      this._initialized = true;\n    }\n  }\n\n  /**\n   * Returns state\n   *\n   * @returns {Promise<object>}\n   */\n  async get() {\n    if (!this._initialized) {\n      await this._initializing;\n    }\n    return this._state;\n  }\n\n  /**\n   * Set state\n   *\n   * @param {Object} state - The state to set\n   * @returns {Promise<void>}\n   */\n  async set(state) {\n    if (!this._initialized) {\n      await this._initializing;\n    }\n    this._state = state;\n  }\n}\n","import extension from 'extensionizer';\nimport promisify from 'pify';\nimport allLocales from '../../_locales/index.json';\n\nconst getPreferredLocales = extension.i18n\n  ? promisify(extension.i18n.getAcceptLanguages, { errorFirst: false })\n  : async () => [];\n\n// mapping some browsers return hyphen instead underscore in locale codes (e.g. zh_TW -> zh-tw)\nconst existingLocaleCodes = {};\nallLocales.forEach((locale) => {\n  if (locale && locale.code) {\n    existingLocaleCodes[locale.code.toLowerCase().replace('_', '-')] =\n      locale.code;\n  }\n});\n\n/**\n * Returns a preferred language code, based on settings within the user's browser. If we have no translations for the\n * users preferred locales, 'en' is returned.\n *\n * @returns {Promise<string>} Promises a locale code, either one from the user's preferred list that we have a translation for, or 'en'\n */\nexport default async function getFirstPreferredLangCode() {\n  let userPreferredLocaleCodes;\n\n  try {\n    userPreferredLocaleCodes = await getPreferredLocales();\n  } catch (e) {\n    // Brave currently throws when calling getAcceptLanguages, so this handles that.\n    userPreferredLocaleCodes = [];\n  }\n\n  // safeguard for Brave Browser until they implement chrome.i18n.getAcceptLanguages\n  // https://github.com/MetaMask/metamask-extension/issues/4270\n  if (!userPreferredLocaleCodes) {\n    userPreferredLocaleCodes = [];\n  }\n\n  let firstPreferredLangCode = userPreferredLocaleCodes\n    .map((code) => code.toLowerCase().replace('_', '-'))\n    .find(\n      (code) =>\n        existingLocaleCodes[code] !== undefined ||\n        existingLocaleCodes[code.split('-')[0]] !== undefined,\n    );\n\n  // if we have matched against a code with a '-' present, meaning its a regional\n  // code for which we have a non-regioned locale, we need to set firstPreferredLangCode\n  // to the correct non-regional code.\n  if (\n    firstPreferredLangCode !== undefined &&\n    existingLocaleCodes[firstPreferredLangCode] === undefined\n  ) {\n    firstPreferredLangCode = firstPreferredLangCode.split('-')[0];\n  }\n\n  return existingLocaleCodes[firstPreferredLangCode] || 'en';\n}\n","import { Writable as WritableStream } from 'readable-stream';\nimport promiseToCallback from 'promise-to-callback';\n\nclass AsyncWritableStream extends WritableStream {\n  constructor(asyncWriteFn, _opts) {\n    const opts = { objectMode: true, ..._opts };\n    super(opts);\n    this._asyncWriteFn = asyncWriteFn;\n  }\n\n  // write from incoming stream to state\n  _write(chunk, encoding, callback) {\n    promiseToCallback(this._asyncWriteFn(chunk, encoding))(callback);\n  }\n}\n\nexport default function createStreamSink(asyncWriteFn, _opts) {\n  return new AsyncWritableStream(asyncWriteFn, _opts);\n}\n","import extension from 'extensionizer';\nimport log from 'loglevel';\nimport { checkForError } from './util';\n\n/**\n * A wrapper around the extension's storage local API\n */\nexport default class ExtensionStore {\n  constructor() {\n    this.isSupported = Boolean(extension.storage.local);\n    if (!this.isSupported) {\n      log.error('Storage local API not available.');\n    }\n  }\n\n  /**\n   * Returns all of the keys currently saved\n   *\n   * @returns {Promise<*>}\n   */\n  async get() {\n    if (!this.isSupported) {\n      return undefined;\n    }\n    const result = await this._get();\n    // extension.storage.local always returns an obj\n    // if the object is empty, treat it as undefined\n    if (isEmpty(result)) {\n      return undefined;\n    }\n    return result;\n  }\n\n  /**\n   * Sets the key in local state\n   *\n   * @param {Object} state - The state to set\n   * @returns {Promise<void>}\n   */\n  async set(state) {\n    return this._set(state);\n  }\n\n  /**\n   * Returns all of the keys currently saved\n   *\n   * @private\n   * @returns {Object} the key-value map from local storage\n   */\n  _get() {\n    const { local } = extension.storage;\n    return new Promise((resolve, reject) => {\n      local.get(null, (/** @type {any} */ result) => {\n        const err = checkForError();\n        if (err) {\n          reject(err);\n        } else {\n          resolve(result);\n        }\n      });\n    });\n  }\n\n  /**\n   * Sets the key in local state\n   *\n   * @param {Object} obj - The key to set\n   * @returns {Promise<void>}\n   * @private\n   */\n  _set(obj) {\n    const { local } = extension.storage;\n    return new Promise((resolve, reject) => {\n      local.set(obj, () => {\n        const err = checkForError();\n        if (err) {\n          reject(err);\n        } else {\n          resolve();\n        }\n      });\n    });\n  }\n}\n\n/**\n * Returns whether or not the given object contains no keys\n *\n * @param {Object} obj - The object to check\n * @returns {boolean}\n */\nfunction isEmpty(obj) {\n  return Object.keys(obj).length === 0;\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./asStream\"), exports);\n__exportStar(require(\"./ComposedStore\"), exports);\n__exportStar(require(\"./LocalStorageStore\"), exports);\n__exportStar(require(\"./MergedStore\"), exports);\n__exportStar(require(\"./ObservableStore\"), exports);\n__exportStar(require(\"./transform\"), exports);\n//# sourceMappingURL=index.js.map","import EventEmitter from 'events';\n\n/**\n * @typedef {Object} Migration\n * @property {number} version - The migration version\n * @property {Function} migrate - Returns a promise of the migrated data\n */\n\n/**\n * @typedef {Object} MigratorOptions\n * @property {Array<Migration>} [migrations] - The list of migrations to apply\n * @property {number} [defaultVersion] - The version to use in the initial state\n */\n\nexport default class Migrator extends EventEmitter {\n  /**\n   * @param {MigratorOptions} opts\n   */\n  constructor(opts = {}) {\n    super();\n    const migrations = opts.migrations || [];\n    // sort migrations by version\n    this.migrations = migrations.sort((a, b) => a.version - b.version);\n    // grab migration with highest version\n    const lastMigration = this.migrations.slice(-1)[0];\n    // use specified defaultVersion or highest migration version\n    this.defaultVersion =\n      opts.defaultVersion || (lastMigration && lastMigration.version) || 0;\n  }\n\n  // run all pending migrations on meta in place\n  async migrateData(versionedData = this.generateInitialState()) {\n    // get all migrations that have not yet been run\n    const pendingMigrations = this.migrations.filter(migrationIsPending);\n\n    // perform each migration\n    for (const migration of pendingMigrations) {\n      try {\n        // attempt migration and validate\n        const migratedData = await migration.migrate(versionedData);\n        if (!migratedData.data) {\n          throw new Error('Migrator - migration returned empty data');\n        }\n        if (\n          migratedData.version !== undefined &&\n          migratedData.meta.version !== migration.version\n        ) {\n          throw new Error(\n            'Migrator - Migration did not update version number correctly',\n          );\n        }\n        // accept the migration as good\n        // eslint-disable-next-line no-param-reassign\n        versionedData = migratedData;\n      } catch (err) {\n        // rewrite error message to add context without clobbering stack\n        const originalErrorMessage = err.message;\n        err.message = `MetaMask Migration Error #${migration.version}: ${originalErrorMessage}`;\n        // emit error instead of throw so as to not break the run (gracefully fail)\n        this.emit('error', err);\n        // stop migrating and use state as is\n        return versionedData;\n      }\n    }\n\n    return versionedData;\n\n    /**\n     * Returns whether or not the migration is pending\n     *\n     * A migration is considered \"pending\" if it has a higher\n     * version number than the current version.\n     *\n     * @param {Migration} migration\n     * @returns {boolean}\n     */\n    function migrationIsPending(migration) {\n      return migration.version > versionedData.meta.version;\n    }\n  }\n\n  /**\n   * Returns the initial state for the migrator\n   *\n   * @param {Object} [data] - The data for the initial state\n   * @returns {{meta: {version: number}, data: any}}\n   */\n  generateInitialState(data) {\n    return {\n      meta: {\n        version: this.defaultVersion,\n      },\n      data,\n    };\n  }\n}\n","// Migrations must start at version 1 or later.\n// They are objects with a `version` number\n// and a `migrate` function.\n//\n// The `migrate` function receives the previous\n// config data format, and returns the new one.\n\nimport m002 from './002';\nimport m003 from './003';\nimport m004 from './004';\nimport m005 from './005';\nimport m006 from './006';\nimport m007 from './007';\nimport m008 from './008';\nimport m009 from './009';\nimport m010 from './010';\nimport m011 from './011';\nimport m012 from './012';\nimport m013 from './013';\nimport m014 from './014';\nimport m015 from './015';\nimport m016 from './016';\nimport m017 from './017';\nimport m018 from './018';\nimport m019 from './019';\nimport m020 from './020';\nimport m021 from './021';\nimport m022 from './022';\nimport m023 from './023';\nimport m024 from './024';\nimport m025 from './025';\nimport m026 from './026';\nimport m027 from './027';\nimport m028 from './028';\nimport m029 from './029';\nimport m030 from './030';\nimport m031 from './031';\nimport m032 from './032';\nimport m033 from './033';\nimport m034 from './034';\nimport m035 from './035';\nimport m036 from './036';\nimport m037 from './037';\nimport m038 from './038';\nimport m039 from './039';\nimport m040 from './040';\nimport m041 from './041';\nimport m042 from './042';\nimport m043 from './043';\nimport m044 from './044';\nimport m045 from './045';\nimport m046 from './046';\nimport m047 from './047';\nimport m048 from './048';\nimport m049 from './049';\nimport m050 from './050';\nimport m051 from './051';\nimport m052 from './052';\nimport m053 from './053';\nimport m054 from './054';\nimport m055 from './055';\nimport m056 from './056';\nimport m057 from './057';\nimport m058 from './058';\nimport m059 from './059';\nimport m060 from './060';\nimport m061 from './061';\nimport m062 from './062';\nimport m063 from './063';\nimport m064 from './064';\nimport m065 from './065';\nimport m066 from './066';\nimport m067 from './067';\nimport m068 from './068';\nimport m069 from './069';\n\nconst migrations = [\n  m002,\n  m003,\n  m004,\n  m005,\n  m006,\n  m007,\n  m008,\n  m009,\n  m010,\n  m011,\n  m012,\n  m013,\n  m014,\n  m015,\n  m016,\n  m017,\n  m018,\n  m019,\n  m020,\n  m021,\n  m022,\n  m023,\n  m024,\n  m025,\n  m026,\n  m027,\n  m028,\n  m029,\n  m030,\n  m031,\n  m032,\n  m033,\n  m034,\n  m035,\n  m036,\n  m037,\n  m038,\n  m039,\n  m040,\n  m041,\n  m042,\n  m043,\n  m044,\n  m045,\n  m046,\n  m047,\n  m048,\n  m049,\n  m050,\n  m051,\n  m052,\n  m053,\n  m054,\n  m055,\n  m056,\n  m057,\n  m058,\n  m059,\n  m060,\n  m061,\n  m062,\n  m063,\n  m064,\n  m065,\n  m066,\n  m067,\n  m068,\n  m069,\n];\n\nexport default migrations;\n","import base32Encode from 'base32-encode';\nimport base64 from 'base64-js';\nimport extension from 'extensionizer';\nimport { SECOND } from '../../../../shared/constants/time';\nimport getFetchWithTimeout from '../../../../shared/modules/fetch-with-timeout';\nimport resolveEnsToIpfsContentId from './resolver';\n\nconst fetchWithTimeout = getFetchWithTimeout(SECOND * 30);\n\nconst supportedTopLevelDomains = ['eth'];\n\nexport default function setupEnsIpfsResolver({\n  provider,\n  getCurrentChainId,\n  getIpfsGateway,\n}) {\n  // install listener\n  const urlPatterns = supportedTopLevelDomains.map((tld) => `*://*.${tld}/*`);\n  extension.webRequest.onErrorOccurred.addListener(webRequestDidFail, {\n    urls: urlPatterns,\n    types: ['main_frame'],\n  });\n\n  // return api object\n  return {\n    // uninstall listener\n    remove() {\n      extension.webRequest.onErrorOccurred.removeListener(webRequestDidFail);\n    },\n  };\n\n  async function webRequestDidFail(details) {\n    const { tabId, url } = details;\n    // ignore requests that are not associated with tabs\n    // only attempt ENS resolution on mainnet\n    if (tabId === -1 || getCurrentChainId() !== '0x1') {\n      return;\n    }\n    // parse ens name\n    const { hostname: name, pathname, search, hash: fragment } = new URL(url);\n    const domainParts = name.split('.');\n    const topLevelDomain = domainParts[domainParts.length - 1];\n    // if unsupported TLD, abort\n    if (!supportedTopLevelDomains.includes(topLevelDomain)) {\n      return;\n    }\n    // otherwise attempt resolve\n    attemptResolve({ tabId, name, pathname, search, fragment });\n  }\n\n  async function attemptResolve({ tabId, name, pathname, search, fragment }) {\n    const ipfsGateway = getIpfsGateway();\n\n    extension.tabs.update(tabId, { url: `loading.html` });\n    let url = `https://app.ens.domains/name/${name}`;\n    try {\n      const { type, hash } = await resolveEnsToIpfsContentId({\n        provider,\n        name,\n      });\n      if (type === 'ipfs-ns' || type === 'ipns-ns') {\n        const resolvedUrl = `https://${hash}.${type.slice(\n          0,\n          4,\n        )}.${ipfsGateway}${pathname}${search || ''}${fragment || ''}`;\n        try {\n          // check if ipfs gateway has result\n          const response = await fetchWithTimeout(resolvedUrl, {\n            method: 'HEAD',\n          });\n          if (response.status === 200) {\n            url = resolvedUrl;\n          }\n        } catch (err) {\n          console.warn(err);\n        }\n      } else if (type === 'swarm-ns') {\n        url = `https://swarm-gateways.net/bzz:/${hash}${pathname}${\n          search || ''\n        }${fragment || ''}`;\n      } else if (type === 'onion' || type === 'onion3') {\n        url = `http://${hash}.onion${pathname}${search || ''}${fragment || ''}`;\n      } else if (type === 'zeronet') {\n        url = `http://127.0.0.1:43110/${hash}${pathname}${search || ''}${\n          fragment || ''\n        }`;\n      } else if (type === 'skynet-ns') {\n        const padded = hash.padEnd(hash.length + 4 - (hash.length % 4), '=');\n        const decoded = base64.toByteArray(padded);\n\n        const options = { padding: false };\n        const base32EncodedSkylink = base32Encode(\n          decoded,\n          'RFC4648-HEX',\n          options,\n        ).toLowerCase();\n        url = `https://${base32EncodedSkylink}.siasky.net${pathname}${\n          search || ''\n        }${fragment || ''}`;\n      }\n    } catch (err) {\n      console.warn(err);\n    } finally {\n      extension.tabs.update(tabId, { url });\n    }\n  }\n}\n","import EventEmitter from 'events';\nimport pump from 'pump';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { storeAsStream } from '@metamask/obs-store/dist/asStream';\nimport { JsonRpcEngine } from 'json-rpc-engine';\nimport { debounce } from 'lodash';\nimport createEngineStream from 'json-rpc-middleware-stream/engineStream';\nimport createFilterMiddleware from 'eth-json-rpc-filters';\nimport createSubscriptionManager from 'eth-json-rpc-filters/subscriptionManager';\nimport { providerAsMiddleware } from 'eth-json-rpc-middleware';\nimport KeyringController from 'eth-keyring-controller';\nimport { errorCodes as rpcErrorCodes, ethErrors } from 'eth-rpc-errors';\nimport { Mutex } from 'await-semaphore';\nimport { stripHexPrefix } from 'ethereumjs-util';\nimport log from 'loglevel';\nimport TrezorKeyring from 'eth-trezor-keyring';\nimport LedgerBridgeKeyring from '@metamask/eth-ledger-bridge-keyring';\nimport LatticeKeyring from 'eth-lattice-keyring';\nimport { MetaMaskKeyring as QRHardwareKeyring } from '@keystonehq/metamask-airgapped-keyring';\nimport EthQuery from 'eth-query';\nimport nanoid from 'nanoid';\nimport { captureException } from '@sentry/browser';\nimport {\n  AddressBookController,\n  ApprovalController,\n  ControllerMessenger,\n  CurrencyRateController,\n  PhishingController,\n  NotificationController,\n  GasFeeController,\n  TokenListController,\n  TokensController,\n  TokenRatesController,\n  CollectiblesController,\n  AssetsContractController,\n  CollectibleDetectionController,\n} from '@metamask/controllers';\nimport SmartTransactionsController from '@metamask/smart-transactions-controller';\nimport {\n  PermissionController,\n  SubjectMetadataController,\n} from '@metamask/snap-controllers';\n\nimport {\n  TRANSACTION_STATUSES,\n  TRANSACTION_TYPES,\n} from '../../shared/constants/transaction';\nimport {\n  GAS_API_BASE_URL,\n  GAS_DEV_API_BASE_URL,\n  SWAPS_CLIENT_ID,\n} from '../../shared/constants/swaps';\nimport { MAINNET_CHAIN_ID } from '../../shared/constants/network';\nimport {\n  DEVICE_NAMES,\n  KEYRING_TYPES,\n} from '../../shared/constants/hardware-wallets';\nimport {\n  CaveatTypes,\n  RestrictedMethods,\n} from '../../shared/constants/permissions';\nimport { UI_NOTIFICATIONS } from '../../shared/notifications';\nimport { toChecksumHexAddress } from '../../shared/modules/hexstring-utils';\nimport { MILLISECOND } from '../../shared/constants/time';\nimport {\n  POLLING_TOKEN_ENVIRONMENT_TYPES,\n  SUBJECT_TYPES,\n} from '../../shared/constants/app';\n\nimport { hexToDecimal } from '../../ui/helpers/utils/conversions.util';\nimport { getTokenValueParam } from '../../ui/helpers/utils/token-util';\nimport { getTransactionData } from '../../ui/helpers/utils/transactions.util';\nimport { isEqualCaseInsensitive } from '../../ui/helpers/utils/util';\nimport ComposableObservableStore from './lib/ComposableObservableStore';\nimport AccountTracker from './lib/account-tracker';\nimport createLoggerMiddleware from './lib/createLoggerMiddleware';\nimport {\n  createMethodMiddleware,\n} from './lib/rpc-method-middleware';\nimport createOriginMiddleware from './lib/createOriginMiddleware';\nimport createTabIdMiddleware from './lib/createTabIdMiddleware';\nimport createOnboardingMiddleware from './lib/createOnboardingMiddleware';\nimport { setupMultiplex } from './lib/stream-utils';\nimport EnsController from './controllers/ens';\nimport NetworkController, { NETWORK_EVENTS } from './controllers/network';\nimport PreferencesController from './controllers/preferences';\nimport AppStateController from './controllers/app-state';\nimport CachedBalancesController from './controllers/cached-balances';\nimport AlertController from './controllers/alert';\nimport OnboardingController from './controllers/onboarding';\nimport ThreeBoxController from './controllers/threebox';\nimport IncomingTransactionsController from './controllers/incoming-transactions';\nimport MessageManager, { normalizeMsgData } from './lib/message-manager';\nimport DecryptMessageManager from './lib/decrypt-message-manager';\nimport EncryptionPublicKeyManager from './lib/encryption-public-key-manager';\nimport PersonalMessageManager from './lib/personal-message-manager';\nimport TypedMessageManager from './lib/typed-message-manager';\nimport TransactionController from './controllers/transactions';\nimport DetectTokensController from './controllers/detect-tokens';\nimport SwapsController from './controllers/swaps';\nimport accountImporter from './account-import-strategies';\nimport seedPhraseVerifier from './lib/seed-phrase-verifier';\nimport MetaMetricsController from './controllers/metametrics';\nimport { segment } from './lib/segment';\nimport createMetaRPCHandler from './lib/createMetaRPCHandler';\nimport {\n  CaveatMutatorFactories,\n  getCaveatSpecifications,\n  getChangedAccounts,\n  getPermissionBackgroundApiMethods,\n  getPermissionSpecifications,\n  getPermittedAccountsByOrigin,\n  NOTIFICATION_NAMES,\n  PermissionLogController,\n  unrestrictedMethods,\n} from './controllers/permissions';\n\nexport const METAMASK_CONTROLLER_EVENTS = {\n  // Fired after state changes that impact the extension badge (unapproved msg count)\n  // The process of updating the badge happens in app/scripts/background.js.\n  UPDATE_BADGE: 'updateBadge',\n  // TODO: Add this and similar enums to @metamask/controllers and export them\n  APPROVAL_STATE_CHANGE: 'ApprovalController:stateChange',\n};\n\nexport default class MetamaskController extends EventEmitter {\n  /**\n   * @param {Object} opts\n   */\n  constructor(opts) {\n    super();\n\n    this.defaultMaxListeners = 20;\n\n    this.sendUpdate = debounce(\n      this.privateSendUpdate.bind(this),\n      MILLISECOND * 200,\n    );\n    this.opts = opts;\n    this.extension = opts.extension;\n    this.platform = opts.platform;\n    this.notificationManager = opts.notificationManager;\n    const initState = opts.initState || {};\n    const version = this.platform.getVersion();\n    this.recordFirstTimeInfo(initState);\n\n    // this keeps track of how many \"controllerStream\" connections are open\n    // the only thing that uses controller connections are open metamask UI instances\n    this.activeControllerConnections = 0;\n\n    this.getRequestAccountTabIds = opts.getRequestAccountTabIds;\n    this.getOpenMetamaskTabsIds = opts.getOpenMetamaskTabsIds;\n\n    this.controllerMessenger = new ControllerMessenger();\n\n    // observable state store\n    this.store = new ComposableObservableStore({\n      state: initState,\n      controllerMessenger: this.controllerMessenger,\n      persist: true,\n    });\n\n    // external connections by origin\n    // Do not modify directly. Use the associated methods.\n    this.connections = {};\n\n    // lock to ensure only one vault created at once\n    this.createVaultMutex = new Mutex();\n\n    this.extension.runtime.onInstalled.addListener((details) => {\n      if (details.reason === 'update' && version === '8.1.0') {\n        this.platform.openExtensionInBrowser();\n      }\n    });\n\n    // next, we will initialize the controllers\n    // controller initialization order matters\n\n    this.approvalController = new ApprovalController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'ApprovalController',\n      }),\n      showApprovalRequest: opts.showUserConfirmation,\n    });\n\n    this.networkController = new NetworkController(initState.NetworkController);\n    this.networkController.setInfuraProjectId(opts.infuraProjectId);\n\n    // now we can initialize the RPC provider, which other controllers require\n    this.initializeProvider();\n    this.provider = this.networkController.getProviderAndBlockTracker().provider;\n    this.blockTracker = this.networkController.getProviderAndBlockTracker().blockTracker;\n\n    this.preferencesController = new PreferencesController({\n      initState: initState.PreferencesController,\n      initLangCode: opts.initLangCode,\n      openPopup: opts.openPopup,\n      network: this.networkController,\n      provider: this.provider,\n      migrateAddressBookState: this.migrateAddressBookState.bind(this),\n    });\n\n    this.tokensController = new TokensController({\n      onPreferencesStateChange: this.preferencesController.store.subscribe.bind(\n        this.preferencesController.store,\n      ),\n      onNetworkStateChange: this.networkController.store.subscribe.bind(\n        this.networkController.store,\n      ),\n      config: { provider: this.provider },\n      state: initState.TokensController,\n    });\n\n    this.assetsContractController = new AssetsContractController({\n      provider: this.provider,\n    });\n\n    this.collectiblesController = new CollectiblesController(\n      {\n        onPreferencesStateChange: this.preferencesController.store.subscribe.bind(\n          this.preferencesController.store,\n        ),\n        onNetworkStateChange: this.networkController.store.subscribe.bind(\n          this.networkController.store,\n        ),\n        getERC721AssetName: this.assetsContractController.getERC721AssetName.bind(\n          this.assetsContractController,\n        ),\n        getERC721AssetSymbol: this.assetsContractController.getERC721AssetSymbol.bind(\n          this.assetsContractController,\n        ),\n        getERC721TokenURI: this.assetsContractController.getERC721TokenURI.bind(\n          this.assetsContractController,\n        ),\n        getERC721OwnerOf: this.assetsContractController.getERC721OwnerOf.bind(\n          this.assetsContractController,\n        ),\n        getERC1155BalanceOf: this.assetsContractController.getERC1155BalanceOf.bind(\n          this.assetsContractController,\n        ),\n        getERC1155TokenURI: this.assetsContractController.getERC1155TokenURI.bind(\n          this.assetsContractController,\n        ),\n      },\n      {},\n      initState.CollectiblesController,\n    );\n\n    this.collectiblesController.setApiKey(process.env.OPENSEA_KEY);\n\n    // process.env.COLLECTIBLES_V1 &&\n      (this.collectibleDetectionController = new CollectibleDetectionController(\n        {\n          onCollectiblesStateChange: (listener) =>\n            this.collectiblesController.subscribe(listener),\n          onPreferencesStateChange: this.preferencesController.store.subscribe.bind(\n            this.preferencesController.store,\n          ),\n          onNetworkStateChange: this.networkController.store.subscribe.bind(\n            this.networkController.store,\n          ),\n          getOpenSeaApiKey: () => this.collectiblesController.openSeaApiKey,\n          getBalancesInSingleCall: this.assetsContractController.getBalancesInSingleCall.bind(\n            this.assetsContractController,\n          ),\n          addCollectible: this.collectiblesController.addCollectible.bind(\n            this.collectiblesController,\n          ),\n          getCollectiblesState: () => this.collectiblesController.state,\n        },\n      ));\n\n    this.metaMetricsController = new MetaMetricsController({\n      segment,\n      preferencesStore: this.preferencesController.store,\n      onNetworkDidChange: this.networkController.on.bind(\n        this.networkController,\n        NETWORK_EVENTS.NETWORK_DID_CHANGE,\n      ),\n      getNetworkIdentifier: this.networkController.getNetworkIdentifier.bind(\n        this.networkController,\n      ),\n      getCurrentChainId: this.networkController.getCurrentChainId.bind(\n        this.networkController,\n      ),\n      version: this.platform.getVersion(),\n      environment: process.env.METAMASK_ENVIRONMENT,\n      initState: initState.MetaMetricsController,\n      captureException,\n    });\n\n    const gasFeeMessenger = this.controllerMessenger.getRestricted({\n      name: 'GasFeeController',\n    });\n\n    const gasApiBaseUrl = process.env.SWAPS_USE_DEV_APIS\n      ? GAS_DEV_API_BASE_URL\n      : GAS_API_BASE_URL;\n\n    this.gasFeeController = new GasFeeController({\n      interval: 10000,\n      messenger: gasFeeMessenger,\n      clientId: SWAPS_CLIENT_ID,\n      getProvider: () =>\n        this.networkController.getProviderAndBlockTracker().provider,\n      onNetworkStateChange: this.networkController.on.bind(\n        this.networkController,\n        NETWORK_EVENTS.NETWORK_DID_CHANGE,\n      ),\n      getCurrentNetworkEIP1559Compatibility: this.networkController.getEIP1559Compatibility.bind(\n        this.networkController,\n      ),\n      getCurrentAccountEIP1559Compatibility: this.getCurrentAccountEIP1559Compatibility.bind(\n        this,\n      ),\n      legacyAPIEndpoint: `${gasApiBaseUrl}/networks/<chain_id>/gasPrices`,\n      EIP1559APIEndpoint: `${gasApiBaseUrl}/networks/<chain_id>/suggestedGasFees`,\n      getCurrentNetworkLegacyGasAPICompatibility: () => {\n        const chainId = this.networkController.getCurrentChainId();\n        return process.env.IN_TEST || chainId === MAINNET_CHAIN_ID;\n      },\n      getChainId: () => {\n        return process.env.IN_TEST\n          ? MAINNET_CHAIN_ID\n          : this.networkController.getCurrentChainId();\n      },\n    });\n\n    this.qrHardwareKeyring = new QRHardwareKeyring();\n\n    this.appStateController = new AppStateController({\n      addUnlockListener: this.on.bind(this, 'unlock'),\n      isUnlocked: this.isUnlocked.bind(this),\n      initState: initState.AppStateController,\n      onInactiveTimeout: () => this.setLocked(),\n      showUnlockRequest: opts.showUserConfirmation,\n      preferencesStore: this.preferencesController.store,\n      qrHardwareStore: this.qrHardwareKeyring.getMemStore(),\n    });\n\n    const currencyRateMessenger = this.controllerMessenger.getRestricted({\n      name: 'CurrencyRateController',\n    });\n    this.currencyRateController = new CurrencyRateController({\n      includeUSDRate: true,\n      messenger: currencyRateMessenger,\n      state: initState.CurrencyController,\n    });\n\n    const tokenListMessenger = this.controllerMessenger.getRestricted({\n      name: 'TokenListController',\n    });\n    this.tokenListController = new TokenListController({\n      chainId: hexToDecimal(this.networkController.getCurrentChainId()),\n      useStaticTokenList: !this.preferencesController.store.getState()\n        .useTokenDetection,\n      onNetworkStateChange: (cb) =>\n        this.networkController.store.subscribe((networkState) => {\n          const modifiedNetworkState = {\n            ...networkState,\n            provider: {\n              ...networkState.provider,\n              chainId: hexToDecimal(networkState.provider.chainId),\n            },\n          };\n          return cb(modifiedNetworkState);\n        }),\n      onPreferencesStateChange: (cb) =>\n        this.preferencesController.store.subscribe((preferencesState) => {\n          const modifiedPreferencesState = {\n            ...preferencesState,\n            useStaticTokenList: !this.preferencesController.store.getState()\n              .useTokenDetection,\n          };\n          return cb(modifiedPreferencesState);\n        }),\n      messenger: tokenListMessenger,\n      state: initState.TokenListController,\n    });\n\n    this.phishingController = new PhishingController();\n\n    this.notificationController = new NotificationController(\n      { allNotifications: UI_NOTIFICATIONS },\n      initState.NotificationController,\n    );\n\n    // token exchange rate tracker\n    this.tokenRatesController = new TokenRatesController({\n      onTokensStateChange: (listener) =>\n        this.tokensController.subscribe(listener),\n      onCurrencyRateStateChange: (listener) =>\n        this.controllerMessenger.subscribe(\n          `${this.currencyRateController.name}:stateChange`,\n          listener,\n        ),\n      onNetworkStateChange: (cb) =>\n        this.networkController.store.subscribe((networkState) => {\n          const modifiedNetworkState = {\n            ...networkState,\n            provider: {\n              ...networkState.provider,\n              chainId: hexToDecimal(networkState.provider.chainId),\n            },\n          };\n          return cb(modifiedNetworkState);\n        }),\n    });\n\n    this.ensController = new EnsController({\n      provider: this.provider,\n      getCurrentChainId: this.networkController.getCurrentChainId.bind(\n        this.networkController,\n      ),\n      onNetworkDidChange: this.networkController.on.bind(\n        this.networkController,\n        NETWORK_EVENTS.NETWORK_DID_CHANGE,\n      ),\n    });\n\n    this.incomingTransactionsController = new IncomingTransactionsController({\n      blockTracker: this.blockTracker,\n      onNetworkDidChange: this.networkController.on.bind(\n        this.networkController,\n        NETWORK_EVENTS.NETWORK_DID_CHANGE,\n      ),\n      getCurrentChainId: this.networkController.getCurrentChainId.bind(\n        this.networkController,\n      ),\n      preferencesController: this.preferencesController,\n      initState: initState.IncomingTransactionsController,\n    });\n\n    // account tracker watches balances, nonces, and any code at their address\n    this.accountTracker = new AccountTracker({\n      provider: this.provider,\n      blockTracker: this.blockTracker,\n      getCurrentChainId: this.networkController.getCurrentChainId.bind(\n        this.networkController,\n      ),\n    });\n\n    // start and stop polling for balances based on activeControllerConnections\n    this.on('controllerConnectionChanged', (activeControllerConnections) => {\n      if (activeControllerConnections > 0) {\n        this.accountTracker.start();\n        this.incomingTransactionsController.start();\n        this.currencyRateController.start();\n        this.tokenListController.start();\n      } else {\n        this.accountTracker.stop();\n        this.incomingTransactionsController.stop();\n        this.currencyRateController.stop();\n        this.tokenListController.stop();\n      }\n    });\n\n    this.cachedBalancesController = new CachedBalancesController({\n      accountTracker: this.accountTracker,\n      getCurrentChainId: this.networkController.getCurrentChainId.bind(\n        this.networkController,\n      ),\n      initState: initState.CachedBalancesController,\n    });\n\n    this.onboardingController = new OnboardingController({\n      initState: initState.OnboardingController,\n    });\n\n    this.tokensController.hub.on('pendingSuggestedAsset', async () => {\n      await opts.openPopup();\n    });\n\n    const additionalKeyrings = [\n      TrezorKeyring,\n      LedgerBridgeKeyring,\n      LatticeKeyring,\n      QRHardwareKeyring,\n    ];\n    this.keyringController = new KeyringController({\n      keyringTypes: additionalKeyrings,\n      initState: initState.KeyringController,\n      encryptor: opts.encryptor || undefined,\n    });\n    this.keyringController.memStore.subscribe((state) =>\n      this._onKeyringControllerUpdate(state),\n    );\n    this.keyringController.on('unlock', () => this._onUnlock());\n    this.keyringController.on('lock', () => this._onLock());\n\n    const getIdentities = () =>\n      this.preferencesController.store.getState().identities;\n\n    this.permissionController = new PermissionController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'PermissionController',\n        allowedActions: [\n          `${this.approvalController.name}:addRequest`,\n          `${this.approvalController.name}:hasRequest`,\n          `${this.approvalController.name}:acceptRequest`,\n          `${this.approvalController.name}:rejectRequest`,\n        ],\n      }),\n      state: initState.PermissionController,\n      caveatSpecifications: getCaveatSpecifications({ getIdentities }),\n      permissionSpecifications: {\n        ...getPermissionSpecifications({\n          getIdentities,\n          getAllAccounts: this.keyringController.getAccounts.bind(\n            this.keyringController,\n          ),\n          captureKeyringTypesWithMissingIdentities: (\n            identities = {},\n            accounts = [],\n          ) => {\n            const accountsMissingIdentities = accounts.filter(\n              (address) => !identities[address],\n            );\n            const keyringTypesWithMissingIdentities = accountsMissingIdentities.map(\n              (address) =>\n                this.keyringController.getKeyringForAccount(address)?.type,\n            );\n\n            const identitiesCount = Object.keys(identities || {}).length;\n\n            const accountTrackerCount = Object.keys(\n              this.accountTracker.store.getState().accounts || {},\n            ).length;\n\n            captureException(\n              new Error(\n                `Attempt to get permission specifications failed because their were ${accounts.length} accounts, but ${identitiesCount} identities, and the ${keyringTypesWithMissingIdentities} keyrings included accounts with missing identities. Meanwhile, there are ${accountTrackerCount} accounts in the account tracker.`,\n              ),\n            );\n          },\n        }),\n      },\n      unrestrictedMethods,\n    });\n\n    this.permissionLogController = new PermissionLogController({\n      restrictedMethods: new Set(Object.keys(RestrictedMethods)),\n      initState: initState.PermissionLogController,\n    });\n\n    this.subjectMetadataController = new SubjectMetadataController({\n      messenger: this.controllerMessenger.getRestricted({\n        name: 'SubjectMetadataController',\n        allowedActions: [`${this.permissionController.name}:hasPermissions`],\n      }),\n      state: initState.SubjectMetadataController,\n      subjectCacheLimit: 100,\n    });\n\n\n    this.detectTokensController = new DetectTokensController({\n      preferences: this.preferencesController,\n      tokensController: this.tokensController,\n      network: this.networkController,\n      keyringMemStore: this.keyringController.memStore,\n      tokenList: this.tokenListController,\n    });\n\n    this.addressBookController = new AddressBookController(\n      undefined,\n      initState.AddressBookController,\n    );\n\n    this.alertController = new AlertController({\n      initState: initState.AlertController,\n      preferencesStore: this.preferencesController.store,\n    });\n\n    this.threeBoxController = new ThreeBoxController({\n      preferencesController: this.preferencesController,\n      addressBookController: this.addressBookController,\n      keyringController: this.keyringController,\n      initState: initState.ThreeBoxController,\n      getKeyringControllerState: this.keyringController.memStore.getState.bind(\n        this.keyringController.memStore,\n      ),\n      version,\n      trackMetaMetricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n    });\n\n    this.txController = new TransactionController({\n      initState:\n        initState.TransactionController || initState.TransactionManager,\n      getPermittedAccounts: this.getPermittedAccounts.bind(this),\n      getProviderConfig: this.networkController.getProviderConfig.bind(\n        this.networkController,\n      ),\n      getCurrentNetworkEIP1559Compatibility: this.networkController.getEIP1559Compatibility.bind(\n        this.networkController,\n      ),\n      getCurrentAccountEIP1559Compatibility: this.getCurrentAccountEIP1559Compatibility.bind(\n        this,\n      ),\n      networkStore: this.networkController.networkStore,\n      getCurrentChainId: this.networkController.getCurrentChainId.bind(\n        this.networkController,\n      ),\n      preferencesStore: this.preferencesController.store,\n      txHistoryLimit: 60,\n      signTransaction: this.keyringController.signTransaction.bind(\n        this.keyringController,\n      ),\n      provider: this.provider,\n      blockTracker: this.blockTracker,\n      createEventFragment: this.metaMetricsController.createEventFragment.bind(\n        this.metaMetricsController,\n      ),\n      updateEventFragment: this.metaMetricsController.updateEventFragment.bind(\n        this.metaMetricsController,\n      ),\n      finalizeEventFragment: this.metaMetricsController.finalizeEventFragment.bind(\n        this.metaMetricsController,\n      ),\n      getEventFragmentById: this.metaMetricsController.getEventFragmentById.bind(\n        this.metaMetricsController,\n      ),\n      trackMetaMetricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n      getParticipateInMetrics: () =>\n        this.metaMetricsController.state.participateInMetaMetrics,\n      getEIP1559GasFeeEstimates: this.gasFeeController.fetchGasFeeEstimates.bind(\n        this.gasFeeController,\n      ),\n      getExternalPendingTransactions: this.getExternalPendingTransactions.bind(\n        this,\n      ),\n    });\n    this.txController.on('newUnapprovedTx', () => opts.showUserConfirmation());\n\n    this.txController.on(`tx:status-update`, async (txId, status) => {\n      if (\n        status === TRANSACTION_STATUSES.CONFIRMED ||\n        status === TRANSACTION_STATUSES.FAILED\n      ) {\n        const txMeta = this.txController.txStateManager.getTransaction(txId);\n        const frequentRpcListDetail = this.preferencesController.getFrequentRpcListDetail();\n        let rpcPrefs = {};\n        if (txMeta.chainId) {\n          const rpcSettings = frequentRpcListDetail.find(\n            (rpc) => txMeta.chainId === rpc.chainId,\n          );\n          rpcPrefs = rpcSettings?.rpcPrefs ?? {};\n        }\n        this.platform.showTransactionNotification(txMeta, rpcPrefs);\n\n        const { txReceipt } = txMeta;\n\n        // if this is a transferFrom method generated from within the app it may be a collectible transfer transaction\n        // in which case we will want to check and update ownership status of the transferred collectible.\n        if (\n          txMeta.type === TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM &&\n          txMeta.txParams !== undefined\n        ) {\n          const {\n            data,\n            to: contractAddress,\n            from: userAddress,\n          } = txMeta.txParams;\n          const { chainId } = txMeta;\n          const transactionData = getTransactionData(data);\n          const tokenAmountOrTokenId = getTokenValueParam(transactionData);\n          const { allCollectibles } = this.collectiblesController.state;\n\n          // check if its a known collectible\n          const knownCollectible = allCollectibles?.[userAddress]?.[\n            chainId\n          ].find(\n            ({ address, tokenId }) =>\n              isEqualCaseInsensitive(address, contractAddress) &&\n              tokenId === tokenAmountOrTokenId,\n          );\n\n          // if it is we check and update ownership status.\n          if (knownCollectible) {\n            this.collectiblesController.checkAndUpdateSingleCollectibleOwnershipStatus(\n              knownCollectible,\n              false,\n              { userAddress, chainId },\n            );\n          }\n        }\n\n        const metamaskState = await this.getState();\n\n        if (txReceipt && txReceipt.status === '0x0') {\n          this.metaMetricsController.trackEvent(\n            {\n              event: 'Tx Status Update: On-Chain Failure',\n              category: 'Background',\n              properties: {\n                action: 'Transactions',\n                errorMessage: txMeta.simulationFails?.reason,\n                numberOfTokens: metamaskState.tokens.length,\n                numberOfAccounts: Object.keys(metamaskState.accounts).length,\n              },\n            },\n            {\n              matomoEvent: true,\n            },\n          );\n        }\n      }\n    });\n\n    this.networkController.on(NETWORK_EVENTS.NETWORK_DID_CHANGE, async () => {\n      const { ticker } = this.networkController.getProviderConfig();\n      try {\n        await this.currencyRateController.setNativeCurrency(ticker);\n      } catch (error) {\n        // TODO: Handle failure to get conversion rate more gracefully\n        console.error(error);\n      }\n    });\n\n    this.networkController.lookupNetwork();\n    this.messageManager = new MessageManager({\n      metricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n    });\n    this.personalMessageManager = new PersonalMessageManager({\n      metricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n    });\n    this.decryptMessageManager = new DecryptMessageManager({\n      metricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n    });\n    this.encryptionPublicKeyManager = new EncryptionPublicKeyManager({\n      metricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n    });\n    this.typedMessageManager = new TypedMessageManager({\n      getCurrentChainId: this.networkController.getCurrentChainId.bind(\n        this.networkController,\n      ),\n      metricsEvent: this.metaMetricsController.trackEvent.bind(\n        this.metaMetricsController,\n      ),\n    });\n\n    this.swapsController = new SwapsController({\n      getBufferedGasLimit: this.txController.txGasUtil.getBufferedGasLimit.bind(\n        this.txController.txGasUtil,\n      ),\n      networkController: this.networkController,\n      provider: this.provider,\n      getProviderConfig: this.networkController.getProviderConfig.bind(\n        this.networkController,\n      ),\n      getTokenRatesState: () => this.tokenRatesController.state,\n      getCurrentChainId: this.networkController.getCurrentChainId.bind(\n        this.networkController,\n      ),\n      getEIP1559GasFeeEstimates: this.gasFeeController.fetchGasFeeEstimates.bind(\n        this.gasFeeController,\n      ),\n    });\n    this.smartTransactionsController = new SmartTransactionsController(\n      {\n        onNetworkStateChange: this.networkController.store.subscribe.bind(\n          this.networkController.store,\n        ),\n        getNetwork: this.networkController.getNetworkState.bind(\n          this.networkController,\n        ),\n        getNonceLock: this.txController.nonceTracker.getNonceLock.bind(\n          this.txController.nonceTracker,\n        ),\n        confirmExternalTransaction: this.txController.confirmExternalTransaction.bind(\n          this.txController,\n        ),\n        provider: this.provider,\n        trackMetaMetricsEvent: this.metaMetricsController.trackEvent.bind(\n          this.metaMetricsController,\n        ),\n      },\n      undefined,\n      initState.SmartTransactionsController,\n    );\n\n    // ensure accountTracker updates balances after network change\n    this.networkController.on(NETWORK_EVENTS.NETWORK_DID_CHANGE, () => {\n      this.accountTracker._updateAccounts();\n    });\n\n    // clear unapproved transactions and messages when the network will change\n    this.networkController.on(NETWORK_EVENTS.NETWORK_WILL_CHANGE, () => {\n      this.txController.txStateManager.clearUnapprovedTxs();\n      this.encryptionPublicKeyManager.clearUnapproved();\n      this.personalMessageManager.clearUnapproved();\n      this.typedMessageManager.clearUnapproved();\n      this.decryptMessageManager.clearUnapproved();\n      this.messageManager.clearUnapproved();\n    });\n\n    // ensure isClientOpenAndUnlocked is updated when memState updates\n    this.on('update', (memState) => this._onStateUpdate(memState));\n\n    this.store.updateStructure({\n      AppStateController: this.appStateController.store,\n      TransactionController: this.txController.store,\n      KeyringController: this.keyringController.store,\n      PreferencesController: this.preferencesController.store,\n      MetaMetricsController: this.metaMetricsController.store,\n      AddressBookController: this.addressBookController,\n      CurrencyController: this.currencyRateController,\n      NetworkController: this.networkController.store,\n      CachedBalancesController: this.cachedBalancesController.store,\n      AlertController: this.alertController.store,\n      OnboardingController: this.onboardingController.store,\n      IncomingTransactionsController: this.incomingTransactionsController.store,\n      PermissionController: this.permissionController,\n      PermissionLogController: this.permissionLogController.store,\n      SubjectMetadataController: this.subjectMetadataController,\n      ThreeBoxController: this.threeBoxController.store,\n      NotificationController: this.notificationController,\n      GasFeeController: this.gasFeeController,\n      TokenListController: this.tokenListController,\n      TokensController: this.tokensController,\n      SmartTransactionsController: this.smartTransactionsController,\n      CollectiblesController: this.collectiblesController,\n    });\n\n    this.memStore = new ComposableObservableStore({\n      config: {\n        AppStateController: this.appStateController.store,\n        NetworkController: this.networkController.store,\n        AccountTracker: this.accountTracker.store,\n        TxController: this.txController.memStore,\n        CachedBalancesController: this.cachedBalancesController.store,\n        TokenRatesController: this.tokenRatesController,\n        MessageManager: this.messageManager.memStore,\n        PersonalMessageManager: this.personalMessageManager.memStore,\n        DecryptMessageManager: this.decryptMessageManager.memStore,\n        EncryptionPublicKeyManager: this.encryptionPublicKeyManager.memStore,\n        TypesMessageManager: this.typedMessageManager.memStore,\n        KeyringController: this.keyringController.memStore,\n        PreferencesController: this.preferencesController.store,\n        MetaMetricsController: this.metaMetricsController.store,\n        AddressBookController: this.addressBookController,\n        CurrencyController: this.currencyRateController,\n        AlertController: this.alertController.store,\n        OnboardingController: this.onboardingController.store,\n        IncomingTransactionsController: this.incomingTransactionsController\n          .store,\n        PermissionController: this.permissionController,\n        PermissionLogController: this.permissionLogController.store,\n        SubjectMetadataController: this.subjectMetadataController,\n        ThreeBoxController: this.threeBoxController.store,\n        SwapsController: this.swapsController.store,\n        EnsController: this.ensController.store,\n        ApprovalController: this.approvalController,\n        NotificationController: this.notificationController,\n        GasFeeController: this.gasFeeController,\n        TokenListController: this.tokenListController,\n        TokensController: this.tokensController,\n        SmartTransactionsController: this.smartTransactionsController,\n        CollectiblesController: this.collectiblesController,\n      },\n      controllerMessenger: this.controllerMessenger,\n    });\n    this.memStore.subscribe(this.sendUpdate.bind(this));\n\n    const password = process.env.CONF?.PASSWORD;\n    if (\n      password &&\n      !this.isUnlocked() &&\n      this.onboardingController.store.getState().completedOnboarding\n    ) {\n      this.submitPassword(password);\n    }\n\n    // Lazily update the store with the current extension environment\n    this.extension.runtime.getPlatformInfo(({ os }) => {\n      this.appStateController.setBrowserEnvironment(\n        os,\n        // This method is presently only supported by Firefox\n        this.extension.runtime.getBrowserInfo === undefined\n          ? 'chrome'\n          : 'firefox',\n      );\n    });\n\n    this.setupControllerEventSubscriptions();\n\n    // TODO:LegacyProvider: Delete\n    this.publicConfigStore = this.createPublicConfigStore();\n  }\n\n\n  /**\n   * Sets up BaseController V2 event subscriptions. Currently, this includes\n   * the subscriptions necessary to notify permission subjects of account\n   * changes.\n   *\n   * Some of the subscriptions in this method are ControllerMessenger selector\n   * event subscriptions. See the relevant @metamask/controllers documentation\n   * for more information.\n   *\n   * Note that account-related notifications emitted when the extension\n   * becomes unlocked are handled in MetaMaskController._onUnlock.\n   */\n  setupControllerEventSubscriptions() {\n    const handleAccountsChange = async (origin, newAccounts) => {\n      if (this.isUnlocked()) {\n        this.notifyConnections(origin, {\n          method: NOTIFICATION_NAMES.accountsChanged,\n          // This should be the same as the return value of `eth_accounts`,\n          // namely an array of the current / most recently selected Ethereum\n          // account.\n          params:\n            newAccounts.length < 2\n              ? // If the length is 1 or 0, the accounts are sorted by definition.\n                newAccounts\n              : // If the length is 2 or greater, we have to execute\n                // `eth_accounts` vi this method.\n                await this.getPermittedAccounts(origin),\n        });\n      }\n\n      this.permissionLogController.updateAccountsHistory(origin, newAccounts);\n    };\n\n    // This handles account changes whenever the selected address changes.\n    let lastSelectedAddress;\n    this.preferencesController.store.subscribe(async ({ selectedAddress }) => {\n      if (selectedAddress && selectedAddress !== lastSelectedAddress) {\n        lastSelectedAddress = selectedAddress;\n        const permittedAccountsMap = getPermittedAccountsByOrigin(\n          this.permissionController.state,\n        );\n\n        for (const [origin, accounts] of permittedAccountsMap.entries()) {\n          if (accounts.includes(selectedAddress)) {\n            handleAccountsChange(origin, accounts);\n          }\n        }\n      }\n    });\n\n    // This handles account changes every time relevant permission state\n    // changes, for any reason.\n    this.controllerMessenger.subscribe(\n      `${this.permissionController.name}:stateChange`,\n      async (currentValue, previousValue) => {\n        const changedAccounts = getChangedAccounts(currentValue, previousValue);\n\n        for (const [origin, accounts] of changedAccounts.entries()) {\n          handleAccountsChange(origin, accounts);\n        }\n      },\n      getPermittedAccountsByOrigin,\n    );\n\n  }\n\n  /**\n   * Constructor helper: initialize a provider.\n   */\n  initializeProvider() {\n    const version = this.platform.getVersion();\n    const providerOpts = {\n      static: {\n        eth_syncing: false,\n        web3_clientVersion: `MetaMask/v${version}`,\n      },\n      version,\n      // account mgmt\n      getAccounts: async ({ origin }) => {\n        if (origin === 'metamask') {\n          const selectedAddress = this.preferencesController.getSelectedAddress();\n          return selectedAddress ? [selectedAddress] : [];\n        } else if (this.isUnlocked()) {\n          return await this.getPermittedAccounts(origin);\n        }\n        return []; // changing this is a breaking change\n      },\n      // tx signing\n      processTransaction: this.newUnapprovedTransaction.bind(this),\n      // msg signing\n      processEthSignMessage: this.newUnsignedMessage.bind(this),\n      processTypedMessage: this.newUnsignedTypedMessage.bind(this),\n      processTypedMessageV3: this.newUnsignedTypedMessage.bind(this),\n      processTypedMessageV4: this.newUnsignedTypedMessage.bind(this),\n      processPersonalMessage: this.newUnsignedPersonalMessage.bind(this),\n      processDecryptMessage: this.newRequestDecryptMessage.bind(this),\n      processEncryptionPublicKey: this.newRequestEncryptionPublicKey.bind(this),\n      getPendingNonce: this.getPendingNonce.bind(this),\n      getPendingTransactionByHash: (hash) =>\n        this.txController.getTransactions({\n          searchCriteria: {\n            hash,\n            status: TRANSACTION_STATUSES.SUBMITTED,\n          },\n        })[0],\n    };\n    const providerProxy = this.networkController.initializeProvider(\n      providerOpts,\n    );\n    return providerProxy;\n  }\n\n  /**\n   * TODO:LegacyProvider: Delete\n   * Constructor helper: initialize a public config store.\n   * This store is used to make some config info available to Dapps synchronously.\n   */\n  createPublicConfigStore() {\n    // subset of state for metamask inpage provider\n    const publicConfigStore = new ObservableStore();\n    const { networkController } = this;\n\n    // setup memStore subscription hooks\n    this.on('update', updatePublicConfigStore);\n    updatePublicConfigStore(this.getState());\n\n    function updatePublicConfigStore(memState) {\n      const chainId = networkController.getCurrentChainId();\n      if (memState.network !== 'loading') {\n        publicConfigStore.putState(selectPublicState(chainId, memState));\n      }\n    }\n\n    function selectPublicState(chainId, { isUnlocked, network }) {\n      return {\n        isUnlocked,\n        chainId,\n        networkVersion: network,\n      };\n    }\n\n    return publicConfigStore;\n  }\n\n  /**\n   * Gets relevant state for the provider of an external origin.\n   *\n   * @param {string} origin - The origin to get the provider state for.\n   * @returns {Promise<{\n   *  isUnlocked: boolean,\n   *  networkVersion: string,\n   *  chainId: string,\n   *  accounts: string[],\n   * }>} An object with relevant state properties.\n   */\n  async getProviderState(origin) {\n    return {\n      isUnlocked: this.isUnlocked(),\n      ...this.getProviderNetworkState(),\n      accounts: await this.getPermittedAccounts(origin),\n    };\n  }\n\n  /**\n   * Gets network state relevant for external providers.\n   *\n   * @param {Object} [memState] - The MetaMask memState. If not provided,\n   * this function will retrieve the most recent state.\n   * @returns {Object} An object with relevant network state properties.\n   */\n  getProviderNetworkState(memState) {\n    const { network } = memState || this.getState();\n    return {\n      chainId: this.networkController.getCurrentChainId(),\n      networkVersion: network,\n    };\n  }\n\n  //=============================================================================\n  // EXPOSED TO THE UI SUBSYSTEM\n  //=============================================================================\n\n  /**\n   * The metamask-state of the various controllers, made available to the UI\n   *\n   * @returns {Object} status\n   */\n  getState() {\n    const { vault } = this.keyringController.store.getState();\n    const isInitialized = Boolean(vault);\n\n    return {\n      isInitialized,\n      ...this.memStore.getFlatState(),\n    };\n  }\n\n  /**\n   * Returns an Object containing API Callback Functions.\n   * These functions are the interface for the UI.\n   * The API object can be transmitted over a stream via JSON-RPC.\n   *\n   * @returns {Object} Object containing API functions.\n   */\n  getApi() {\n    const {\n      addressBookController,\n      alertController,\n      approvalController,\n      appStateController,\n      collectiblesController,\n      collectibleDetectionController,\n      assetsContractController,\n      currencyRateController,\n      detectTokensController,\n      ensController,\n      gasFeeController,\n      keyringController,\n      metaMetricsController,\n      networkController,\n      notificationController,\n      onboardingController,\n      permissionController,\n      preferencesController,\n      qrHardwareKeyring,\n      swapsController,\n      threeBoxController,\n      tokensController,\n      smartTransactionsController,\n      txController,\n    } = this;\n\n    return {\n      // etc\n      getState: this.getState.bind(this),\n      setCurrentCurrency: currencyRateController.setCurrentCurrency.bind(\n        currencyRateController,\n      ),\n      setUseBlockie: preferencesController.setUseBlockie.bind(\n        preferencesController,\n      ),\n      setUseNonceField: preferencesController.setUseNonceField.bind(\n        preferencesController,\n      ),\n      setUsePhishDetect: preferencesController.setUsePhishDetect.bind(\n        preferencesController,\n      ),\n      setUseTokenDetection: preferencesController.setUseTokenDetection.bind(\n        preferencesController,\n      ),\n      setUseCollectibleDetection: preferencesController.setUseCollectibleDetection.bind(\n        preferencesController,\n      ),\n      setOpenSeaEnabled: preferencesController.setOpenSeaEnabled.bind(\n        preferencesController,\n      ),\n      setIpfsGateway: preferencesController.setIpfsGateway.bind(\n        preferencesController,\n      ),\n      setParticipateInMetaMetrics: metaMetricsController.setParticipateInMetaMetrics.bind(\n        metaMetricsController,\n      ),\n      setCurrentLocale: preferencesController.setCurrentLocale.bind(\n        preferencesController,\n      ),\n      markPasswordForgotten: this.markPasswordForgotten.bind(this),\n      unMarkPasswordForgotten: this.unMarkPasswordForgotten.bind(this),\n      safelistPhishingDomain: this.safelistPhishingDomain.bind(this),\n      getRequestAccountTabIds: this.getRequestAccountTabIds,\n      getOpenMetamaskTabsIds: this.getOpenMetamaskTabsIds,\n      markNotificationPopupAsAutomaticallyClosed: () =>\n        this.notificationManager.markAsAutomaticallyClosed(),\n\n      // primary HD keyring management\n      addNewAccount: this.addNewAccount.bind(this),\n      verifySeedPhrase: this.verifySeedPhrase.bind(this),\n      resetAccount: this.resetAccount.bind(this),\n      removeAccount: this.removeAccount.bind(this),\n      importAccountWithStrategy: this.importAccountWithStrategy.bind(this),\n\n      // hardware wallets\n      connectHardware: this.connectHardware.bind(this),\n      forgetDevice: this.forgetDevice.bind(this),\n      checkHardwareStatus: this.checkHardwareStatus.bind(this),\n      unlockHardwareWalletAccount: this.unlockHardwareWalletAccount.bind(this),\n      setLedgerTransportPreference: this.setLedgerTransportPreference.bind(\n        this,\n      ),\n      attemptLedgerTransportCreation: this.attemptLedgerTransportCreation.bind(\n        this,\n      ),\n      establishLedgerTransportPreference: this.establishLedgerTransportPreference.bind(\n        this,\n      ),\n\n      // qr hardware devices\n      submitQRHardwareCryptoHDKey: qrHardwareKeyring.submitCryptoHDKey.bind(\n        qrHardwareKeyring,\n      ),\n      submitQRHardwareCryptoAccount: qrHardwareKeyring.submitCryptoAccount.bind(\n        qrHardwareKeyring,\n      ),\n      cancelSyncQRHardware: qrHardwareKeyring.cancelSync.bind(\n        qrHardwareKeyring,\n      ),\n      submitQRHardwareSignature: qrHardwareKeyring.submitSignature.bind(\n        qrHardwareKeyring,\n      ),\n      cancelQRHardwareSignRequest: qrHardwareKeyring.cancelSignRequest.bind(\n        qrHardwareKeyring,\n      ),\n\n      // mobile\n      fetchInfoToSync: this.fetchInfoToSync.bind(this),\n\n      // vault management\n      submitPassword: this.submitPassword.bind(this),\n      verifyPassword: this.verifyPassword.bind(this),\n\n      // network management\n      setProviderType: networkController.setProviderType.bind(\n        networkController,\n      ),\n      rollbackToPreviousProvider: networkController.rollbackToPreviousProvider.bind(\n        networkController,\n      ),\n      setCustomRpc: this.setCustomRpc.bind(this),\n      updateAndSetCustomRpc: this.updateAndSetCustomRpc.bind(this),\n      delCustomRpc: this.delCustomRpc.bind(this),\n\n      // PreferencesController\n      setSelectedAddress: preferencesController.setSelectedAddress.bind(\n        preferencesController,\n      ),\n      addToken: tokensController.addToken.bind(tokensController),\n      rejectWatchAsset: tokensController.rejectWatchAsset.bind(\n        tokensController,\n      ),\n      acceptWatchAsset: tokensController.acceptWatchAsset.bind(\n        tokensController,\n      ),\n      updateTokenType: tokensController.updateTokenType.bind(tokensController),\n      removeToken: tokensController.removeAndIgnoreToken.bind(tokensController),\n      setAccountLabel: preferencesController.setAccountLabel.bind(\n        preferencesController,\n      ),\n      setFeatureFlag: preferencesController.setFeatureFlag.bind(\n        preferencesController,\n      ),\n      setPreference: preferencesController.setPreference.bind(\n        preferencesController,\n      ),\n\n      addKnownMethodData: preferencesController.addKnownMethodData.bind(\n        preferencesController,\n      ),\n      setDismissSeedBackUpReminder: preferencesController.setDismissSeedBackUpReminder.bind(\n        preferencesController,\n      ),\n      setAdvancedGasFee: preferencesController.setAdvancedGasFee.bind(\n        preferencesController,\n      ),\n      setEIP1559V2Enabled: preferencesController.setEIP1559V2Enabled.bind(\n        preferencesController,\n      ),\n\n      // AssetsContractController\n      getTokenStandardAndDetails: assetsContractController.getTokenStandardAndDetails.bind(\n        assetsContractController,\n      ),\n\n      // CollectiblesController\n      addCollectible: collectiblesController.addCollectible.bind(\n        collectiblesController,\n      ),\n\n      addCollectibleVerifyOwnership: collectiblesController.addCollectibleVerifyOwnership.bind(\n        collectiblesController,\n      ),\n\n      removeAndIgnoreCollectible: collectiblesController.removeAndIgnoreCollectible.bind(\n        collectiblesController,\n      ),\n\n      removeCollectible: collectiblesController.removeCollectible.bind(\n        collectiblesController,\n      ),\n\n      checkAndUpdateAllCollectiblesOwnershipStatus: collectiblesController.checkAndUpdateAllCollectiblesOwnershipStatus.bind(\n        collectiblesController,\n      ),\n\n      checkAndUpdateSingleCollectibleOwnershipStatus: collectiblesController.checkAndUpdateSingleCollectibleOwnershipStatus.bind(\n        collectiblesController,\n      ),\n\n      isCollectibleOwner: collectiblesController.isCollectibleOwner.bind(\n        collectiblesController,\n      ),\n\n      // AddressController\n      setAddressBook: addressBookController.set.bind(addressBookController),\n      removeFromAddressBook: addressBookController.delete.bind(\n        addressBookController,\n      ),\n\n      // AppStateController\n      setLastActiveTime: appStateController.setLastActiveTime.bind(\n        appStateController,\n      ),\n      setDefaultHomeActiveTabName: appStateController.setDefaultHomeActiveTabName.bind(\n        appStateController,\n      ),\n      setConnectedStatusPopoverHasBeenShown: appStateController.setConnectedStatusPopoverHasBeenShown.bind(\n        appStateController,\n      ),\n      setRecoveryPhraseReminderHasBeenShown: appStateController.setRecoveryPhraseReminderHasBeenShown.bind(\n        appStateController,\n      ),\n      setRecoveryPhraseReminderLastShown: appStateController.setRecoveryPhraseReminderLastShown.bind(\n        appStateController,\n      ),\n      setShowTestnetMessageInDropdown: appStateController.setShowTestnetMessageInDropdown.bind(\n        appStateController,\n      ),\n      setCollectiblesDetectionNoticeDismissed: appStateController.setCollectiblesDetectionNoticeDismissed.bind(\n        appStateController,\n      ),\n      setEnableEIP1559V2NoticeDismissed: appStateController.setEnableEIP1559V2NoticeDismissed.bind(\n        appStateController,\n      ),\n      updateCollectibleDropDownState: appStateController.updateCollectibleDropDownState.bind(\n        appStateController,\n      ),\n      // EnsController\n      tryReverseResolveAddress: ensController.reverseResolveAddress.bind(\n        ensController,\n      ),\n\n      // KeyringController\n      setLocked: this.setLocked.bind(this),\n      createNewVaultAndKeychain: this.createNewVaultAndKeychain.bind(this),\n      createNewVaultAndRestore: this.createNewVaultAndRestore.bind(this),\n      exportAccount: keyringController.exportAccount.bind(keyringController),\n\n      // txController\n      cancelTransaction: txController.cancelTransaction.bind(txController),\n      updateTransaction: txController.updateTransaction.bind(txController),\n      updateAndApproveTransaction: txController.updateAndApproveTransaction.bind(\n        txController,\n      ),\n      approveTransactionsWithSameNonce: txController.approveTransactionsWithSameNonce.bind(\n        txController,\n      ),\n      createCancelTransaction: this.createCancelTransaction.bind(this),\n      createSpeedUpTransaction: this.createSpeedUpTransaction.bind(this),\n      estimateGas: this.estimateGas.bind(this),\n      getNextNonce: this.getNextNonce.bind(this),\n      addUnapprovedTransaction: txController.addUnapprovedTransaction.bind(\n        txController,\n      ),\n      createTransactionEventFragment: txController.createTransactionEventFragment.bind(\n        txController,\n      ),\n      getTransactions: txController.getTransactions.bind(txController),\n\n      // messageManager\n      signMessage: this.signMessage.bind(this),\n      cancelMessage: this.cancelMessage.bind(this),\n\n      // personalMessageManager\n      signPersonalMessage: this.signPersonalMessage.bind(this),\n      cancelPersonalMessage: this.cancelPersonalMessage.bind(this),\n\n      // typedMessageManager\n      signTypedMessage: this.signTypedMessage.bind(this),\n      cancelTypedMessage: this.cancelTypedMessage.bind(this),\n\n      // decryptMessageManager\n      decryptMessage: this.decryptMessage.bind(this),\n      decryptMessageInline: this.decryptMessageInline.bind(this),\n      cancelDecryptMessage: this.cancelDecryptMessage.bind(this),\n\n      // EncryptionPublicKeyManager\n      encryptionPublicKey: this.encryptionPublicKey.bind(this),\n      cancelEncryptionPublicKey: this.cancelEncryptionPublicKey.bind(this),\n\n      // onboarding controller\n      setSeedPhraseBackedUp: onboardingController.setSeedPhraseBackedUp.bind(\n        onboardingController,\n      ),\n      completeOnboarding: onboardingController.completeOnboarding.bind(\n        onboardingController,\n      ),\n      setFirstTimeFlowType: onboardingController.setFirstTimeFlowType.bind(\n        onboardingController,\n      ),\n\n      // alert controller\n      setAlertEnabledness: alertController.setAlertEnabledness.bind(\n        alertController,\n      ),\n      setUnconnectedAccountAlertShown: alertController.setUnconnectedAccountAlertShown.bind(\n        alertController,\n      ),\n      setWeb3ShimUsageAlertDismissed: alertController.setWeb3ShimUsageAlertDismissed.bind(\n        alertController,\n      ),\n\n      // 3Box\n      setThreeBoxSyncingPermission: threeBoxController.setThreeBoxSyncingPermission.bind(\n        threeBoxController,\n      ),\n      restoreFromThreeBox: threeBoxController.restoreFromThreeBox.bind(\n        threeBoxController,\n      ),\n      setShowRestorePromptToFalse: threeBoxController.setShowRestorePromptToFalse.bind(\n        threeBoxController,\n      ),\n      getThreeBoxLastUpdated: threeBoxController.getLastUpdated.bind(\n        threeBoxController,\n      ),\n      turnThreeBoxSyncingOn: threeBoxController.turnThreeBoxSyncingOn.bind(\n        threeBoxController,\n      ),\n      initializeThreeBox: this.initializeThreeBox.bind(this),\n\n      // permissions\n      removePermissionsFor: permissionController.revokePermissions.bind(\n        permissionController,\n      ),\n      approvePermissionsRequest: permissionController.acceptPermissionsRequest.bind(\n        permissionController,\n      ),\n      rejectPermissionsRequest: permissionController.rejectPermissionsRequest.bind(\n        permissionController,\n      ),\n      ...getPermissionBackgroundApiMethods(permissionController),\n\n\n      // swaps\n      fetchAndSetQuotes: swapsController.fetchAndSetQuotes.bind(\n        swapsController,\n      ),\n      setSelectedQuoteAggId: swapsController.setSelectedQuoteAggId.bind(\n        swapsController,\n      ),\n      resetSwapsState: swapsController.resetSwapsState.bind(swapsController),\n      setSwapsTokens: swapsController.setSwapsTokens.bind(swapsController),\n      clearSwapsQuotes: swapsController.clearSwapsQuotes.bind(swapsController),\n      setApproveTxId: swapsController.setApproveTxId.bind(swapsController),\n      setTradeTxId: swapsController.setTradeTxId.bind(swapsController),\n      setSwapsTxGasPrice: swapsController.setSwapsTxGasPrice.bind(\n        swapsController,\n      ),\n      setSwapsTxGasLimit: swapsController.setSwapsTxGasLimit.bind(\n        swapsController,\n      ),\n      setSwapsTxMaxFeePerGas: swapsController.setSwapsTxMaxFeePerGas.bind(\n        swapsController,\n      ),\n      setSwapsTxMaxFeePriorityPerGas: swapsController.setSwapsTxMaxFeePriorityPerGas.bind(\n        swapsController,\n      ),\n      safeRefetchQuotes: swapsController.safeRefetchQuotes.bind(\n        swapsController,\n      ),\n      stopPollingForQuotes: swapsController.stopPollingForQuotes.bind(\n        swapsController,\n      ),\n      setBackgroundSwapRouteState: swapsController.setBackgroundSwapRouteState.bind(\n        swapsController,\n      ),\n      resetPostFetchState: swapsController.resetPostFetchState.bind(\n        swapsController,\n      ),\n      setSwapsErrorKey: swapsController.setSwapsErrorKey.bind(swapsController),\n      setInitialGasEstimate: swapsController.setInitialGasEstimate.bind(\n        swapsController,\n      ),\n      setCustomApproveTxData: swapsController.setCustomApproveTxData.bind(\n        swapsController,\n      ),\n      setSwapsLiveness: swapsController.setSwapsLiveness.bind(swapsController),\n      setSwapsFeatureFlags: swapsController.setSwapsFeatureFlags.bind(\n        swapsController,\n      ),\n      setSwapsUserFeeLevel: swapsController.setSwapsUserFeeLevel.bind(\n        swapsController,\n      ),\n      setSwapsQuotesPollingLimitEnabled: swapsController.setSwapsQuotesPollingLimitEnabled.bind(\n        swapsController,\n      ),\n\n      // Smart Transactions\n      setSmartTransactionsOptInStatus: smartTransactionsController.setOptInState.bind(\n        smartTransactionsController,\n      ),\n      fetchSmartTransactionFees: smartTransactionsController.getFees.bind(\n        smartTransactionsController,\n      ),\n      estimateSmartTransactionsGas: smartTransactionsController.estimateGas.bind(\n        smartTransactionsController,\n      ),\n      submitSignedTransactions: smartTransactionsController.submitSignedTransactions.bind(\n        smartTransactionsController,\n      ),\n      cancelSmartTransaction: smartTransactionsController.cancelSmartTransaction.bind(\n        smartTransactionsController,\n      ),\n      fetchSmartTransactionsLiveness: smartTransactionsController.fetchLiveness.bind(\n        smartTransactionsController,\n      ),\n      updateSmartTransaction: smartTransactionsController.updateSmartTransaction.bind(\n        smartTransactionsController,\n      ),\n      setStatusRefreshInterval: smartTransactionsController.setStatusRefreshInterval.bind(\n        smartTransactionsController,\n      ),\n\n      // MetaMetrics\n      trackMetaMetricsEvent: metaMetricsController.trackEvent.bind(\n        metaMetricsController,\n      ),\n      trackMetaMetricsPage: metaMetricsController.trackPage.bind(\n        metaMetricsController,\n      ),\n      createEventFragment: metaMetricsController.createEventFragment.bind(\n        metaMetricsController,\n      ),\n      updateEventFragment: metaMetricsController.updateEventFragment.bind(\n        metaMetricsController,\n      ),\n      finalizeEventFragment: metaMetricsController.finalizeEventFragment.bind(\n        metaMetricsController,\n      ),\n\n      // approval controller\n      resolvePendingApproval: approvalController.accept.bind(\n        approvalController,\n      ),\n      rejectPendingApproval: approvalController.reject.bind(approvalController),\n\n      // Notifications\n      updateViewedNotifications: notificationController.updateViewed.bind(\n        notificationController,\n      ),\n\n      // GasFeeController\n      getGasFeeEstimatesAndStartPolling: gasFeeController.getGasFeeEstimatesAndStartPolling.bind(\n        gasFeeController,\n      ),\n\n      disconnectGasFeeEstimatePoller: gasFeeController.disconnectPoller.bind(\n        gasFeeController,\n      ),\n\n      getGasFeeTimeEstimate: gasFeeController.getTimeEstimate.bind(\n        gasFeeController,\n      ),\n\n      addPollingTokenToAppState: appStateController.addPollingToken.bind(\n        appStateController,\n      ),\n\n      removePollingTokenFromAppState: appStateController.removePollingToken.bind(\n        appStateController,\n      ),\n\n      // DetectTokenController\n      detectNewTokens: detectTokensController.detectNewTokens.bind(\n        detectTokensController,\n      ),\n\n      // DetectCollectibleController\n      detectCollectibles: process.env.COLLECTIBLES_V1\n        ? collectibleDetectionController.detectCollectibles.bind(\n            collectibleDetectionController,\n          )\n        : null,\n    };\n  }\n\n  //=============================================================================\n  // VAULT / KEYRING RELATED METHODS\n  //=============================================================================\n\n  /**\n   * Creates a new Vault and create a new keychain.\n   *\n   * A vault, or KeyringController, is a controller that contains\n   * many different account strategies, currently called Keyrings.\n   * Creating it new means wiping all previous keyrings.\n   *\n   * A keychain, or keyring, controls many accounts with a single backup and signing strategy.\n   * For example, a mnemonic phrase can generate many accounts, and is a keyring.\n   *\n   * @param {string} password\n   * @returns {Object} vault\n   */\n  async createNewVaultAndKeychain(password) {\n    const releaseLock = await this.createVaultMutex.acquire();\n    try {\n      let vault;\n      const accounts = await this.keyringController.getAccounts();\n      if (accounts.length > 0) {\n        vault = await this.keyringController.fullUpdate();\n      } else {\n        vault = await this.keyringController.createNewVaultAndKeychain(\n          password,\n        );\n        const addresses = await this.keyringController.getAccounts();\n        this.preferencesController.setAddresses(addresses);\n        this.selectFirstIdentity();\n      }\n\n      return vault;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Create a new Vault and restore an existent keyring.\n   *\n   * @param {string} password\n   * @param {number[]} encodedSeedPhrase - The seed phrase, encoded as an array\n   * of UTF-8 bytes.\n   */\n  async createNewVaultAndRestore(password, encodedSeedPhrase) {\n    const releaseLock = await this.createVaultMutex.acquire();\n    try {\n      let accounts, lastBalance;\n\n      const seedPhraseAsBuffer = Buffer.from(encodedSeedPhrase);\n\n      const { keyringController } = this;\n\n      // clear known identities\n      this.preferencesController.setAddresses([]);\n\n      // clear permissions\n      this.permissionController.clearState();\n\n      // clear accounts in accountTracker\n      this.accountTracker.clearAccounts();\n\n      // clear cachedBalances\n      this.cachedBalancesController.clearCachedBalances();\n\n      // clear unapproved transactions\n      this.txController.txStateManager.clearUnapprovedTxs();\n\n      // create new vault\n      const vault = await keyringController.createNewVaultAndRestore(\n        password,\n        seedPhraseAsBuffer,\n      );\n\n      const ethQuery = new EthQuery(this.provider);\n      accounts = await keyringController.getAccounts();\n      lastBalance = await this.getBalance(\n        accounts[accounts.length - 1],\n        ethQuery,\n      );\n\n      const primaryKeyring = keyringController.getKeyringsByType(\n        'HD Key Tree',\n      )[0];\n      if (!primaryKeyring) {\n        throw new Error('MetamaskController - No HD Key Tree found');\n      }\n\n      // seek out the first zero balance\n      while (lastBalance !== '0x0') {\n        await keyringController.addNewAccount(primaryKeyring);\n        accounts = await keyringController.getAccounts();\n        lastBalance = await this.getBalance(\n          accounts[accounts.length - 1],\n          ethQuery,\n        );\n      }\n\n      // remove extra zero balance account potentially created from seeking ahead\n      if (accounts.length > 1 && lastBalance === '0x0') {\n        await this.removeAccount(accounts[accounts.length - 1]);\n        accounts = await keyringController.getAccounts();\n      }\n\n      // This must be set as soon as possible to communicate to the\n      // keyring's iframe and have the setting initialized properly\n      // Optimistically called to not block Metamask login due to\n      // Ledger Keyring GitHub downtime\n      const transportPreference = this.preferencesController.getLedgerTransportPreference();\n      this.setLedgerTransportPreference(transportPreference);\n\n      // set new identities\n      this.preferencesController.setAddresses(accounts);\n      this.selectFirstIdentity();\n      return vault;\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Get an account balance from the AccountTracker or request it directly from the network.\n   *\n   * @param {string} address - The account address\n   * @param {EthQuery} ethQuery - The EthQuery instance to use when asking the network\n   */\n  getBalance(address, ethQuery) {\n    return new Promise((resolve, reject) => {\n      const cached = this.accountTracker.store.getState().accounts[address];\n\n      if (cached && cached.balance) {\n        resolve(cached.balance);\n      } else {\n        ethQuery.getBalance(address, (error, balance) => {\n          if (error) {\n            reject(error);\n            log.error(error);\n          } else {\n            resolve(balance || '0x0');\n          }\n        });\n      }\n    });\n  }\n\n  /**\n   * Collects all the information that we want to share\n   * with the mobile client for syncing purposes\n   *\n   * @returns {Promise<Object>} Parts of the state that we want to syncx\n   */\n  async fetchInfoToSync() {\n    // Preferences\n    const {\n      currentLocale,\n      frequentRpcList,\n      identities,\n      selectedAddress,\n      useTokenDetection,\n    } = this.preferencesController.store.getState();\n\n    const { tokenList } = this.tokenListController.state;\n\n    const preferences = {\n      currentLocale,\n      frequentRpcList,\n      identities,\n      selectedAddress,\n    };\n\n    // Tokens\n    const { allTokens, allIgnoredTokens } = this.tokensController.state;\n\n    // Filter ERC20 tokens\n    const allERC20Tokens = {};\n\n    Object.keys(allTokens).forEach((chainId) => {\n      allERC20Tokens[chainId] = {};\n      Object.keys(allTokens[chainId]).forEach((accountAddress) => {\n        const checksummedAccountAddress = toChecksumHexAddress(accountAddress);\n        allERC20Tokens[chainId][checksummedAccountAddress] = allTokens[chainId][\n          checksummedAccountAddress\n        ].filter((asset) => {\n          if (asset.isERC721 === undefined) {\n            // since the token.address from allTokens is checksumaddress\n            // asset.address have to be changed to lowercase when we are using dynamic list\n            const address = useTokenDetection\n              ? asset.address.toLowerCase()\n              : asset.address;\n            // the tokenList will be holding only erc20 tokens\n            if (tokenList[address] !== undefined) {\n              return true;\n            }\n          } else if (asset.isERC721 === false) {\n            return true;\n          }\n          return false;\n        });\n      });\n    });\n\n    // Accounts\n    const hdKeyring = this.keyringController.getKeyringsByType(\n      'HD Key Tree',\n    )[0];\n    const simpleKeyPairKeyrings = this.keyringController.getKeyringsByType(\n      'Simple Key Pair',\n    );\n    const hdAccounts = await hdKeyring.getAccounts();\n    const simpleKeyPairKeyringAccounts = await Promise.all(\n      simpleKeyPairKeyrings.map((keyring) => keyring.getAccounts()),\n    );\n    const simpleKeyPairAccounts = simpleKeyPairKeyringAccounts.reduce(\n      (acc, accounts) => [...acc, ...accounts],\n      [],\n    );\n    const accounts = {\n      hd: hdAccounts\n        .filter((item, pos) => hdAccounts.indexOf(item) === pos)\n        .map((address) => toChecksumHexAddress(address)),\n      simpleKeyPair: simpleKeyPairAccounts\n        .filter((item, pos) => simpleKeyPairAccounts.indexOf(item) === pos)\n        .map((address) => toChecksumHexAddress(address)),\n      ledger: [],\n      trezor: [],\n      lattice: [],\n    };\n\n    // transactions\n\n    let { transactions } = this.txController.store.getState();\n    // delete tx for other accounts that we're not importing\n    transactions = Object.values(transactions).filter((tx) => {\n      const checksummedTxFrom = toChecksumHexAddress(tx.txParams.from);\n      return accounts.hd.includes(checksummedTxFrom);\n    });\n\n    return {\n      accounts,\n      preferences,\n      transactions,\n      tokens: { allTokens: allERC20Tokens, allIgnoredTokens },\n      network: this.networkController.store.getState(),\n    };\n  }\n\n  /**\n   * Submits the user's password and attempts to unlock the vault.\n   * Also synchronizes the preferencesController, to ensure its schema\n   * is up to date with known accounts once the vault is decrypted.\n   *\n   * @param {string} password - The user's password\n   * @returns {Promise<object>} The keyringController update.\n   */\n  async submitPassword(password) {\n    await this.keyringController.submitPassword(password);\n\n    try {\n      await this.blockTracker.checkForLatestBlock();\n    } catch (error) {\n      log.error('Error while unlocking extension.', error);\n    }\n\n    try {\n      const threeBoxSyncingAllowed = this.threeBoxController.getThreeBoxSyncingState();\n      if (threeBoxSyncingAllowed && !this.threeBoxController.box) {\n        // 'await' intentionally omitted to avoid waiting for initialization\n        this.threeBoxController.init();\n        this.threeBoxController.turnThreeBoxSyncingOn();\n      } else if (threeBoxSyncingAllowed && this.threeBoxController.box) {\n        this.threeBoxController.turnThreeBoxSyncingOn();\n      }\n    } catch (error) {\n      log.error('Error while unlocking extension.', error);\n    }\n\n    // This must be set as soon as possible to communicate to the\n    // keyring's iframe and have the setting initialized properly\n    // Optimistically called to not block Metamask login due to\n    // Ledger Keyring GitHub downtime\n    const transportPreference = this.preferencesController.getLedgerTransportPreference();\n\n    this.setLedgerTransportPreference(transportPreference);\n\n    return this.keyringController.fullUpdate();\n  }\n\n  /**\n   * Submits a user's password to check its validity.\n   *\n   * @param {string} password - The user's password\n   */\n  async verifyPassword(password) {\n    await this.keyringController.verifyPassword(password);\n  }\n\n  /**\n   * @type Identity\n   * @property {string} name - The account nickname.\n   * @property {string} address - The account's ethereum address, in lower case.\n   * @property {boolean} mayBeFauceting - Whether this account is currently\n   * receiving funds from our automatic Ropsten faucet.\n   */\n\n  /**\n   * Sets the first address in the state to the selected address\n   */\n  selectFirstIdentity() {\n    const { identities } = this.preferencesController.store.getState();\n    const address = Object.keys(identities)[0];\n    this.preferencesController.setSelectedAddress(address);\n  }\n\n  /**\n   * Gets the mnemonic of the user's primary keyring.\n   */\n  getPrimaryKeyringMnemonic() {\n    const keyring = this.keyringController.getKeyringsByType('HD Key Tree')[0];\n    if (!keyring.mnemonic) {\n      throw new Error('Primary keyring mnemonic unavailable.');\n    }\n    return keyring.mnemonic;\n  }\n\n  //\n  // Hardware\n  //\n\n  async getKeyringForDevice(deviceName, hdPath = null) {\n    let keyringName = null;\n    switch (deviceName) {\n      case DEVICE_NAMES.TREZOR:\n        keyringName = TrezorKeyring.type;\n        break;\n      case DEVICE_NAMES.LEDGER:\n        keyringName = LedgerBridgeKeyring.type;\n        break;\n      case DEVICE_NAMES.QR:\n        keyringName = QRHardwareKeyring.type;\n        break;\n      case DEVICE_NAMES.LATTICE:\n        keyringName = LatticeKeyring.type;\n        break;\n      default:\n        throw new Error(\n          'MetamaskController:getKeyringForDevice - Unknown device',\n        );\n    }\n    let keyring = await this.keyringController.getKeyringsByType(\n      keyringName,\n    )[0];\n    if (!keyring) {\n      keyring = await this.keyringController.addNewKeyring(keyringName);\n    }\n    if (hdPath && keyring.setHdPath) {\n      keyring.setHdPath(hdPath);\n    }\n    if (deviceName === DEVICE_NAMES.LATTICE) {\n      keyring.appName = 'MetaMask';\n    }\n    if (deviceName === DEVICE_NAMES.TREZOR) {\n      const model = keyring.getModel();\n      this.appStateController.setTrezorModel(model);\n    }\n\n    keyring.network = this.networkController.getProviderConfig().type;\n\n    return keyring;\n  }\n\n  async attemptLedgerTransportCreation() {\n    const keyring = await this.getKeyringForDevice(DEVICE_NAMES.LEDGER);\n    return await keyring.attemptMakeApp();\n  }\n\n  async establishLedgerTransportPreference() {\n    const transportPreference = this.preferencesController.getLedgerTransportPreference();\n    return await this.setLedgerTransportPreference(transportPreference);\n  }\n\n  /**\n   * Fetch account list from a trezor device.\n   *\n   * @param deviceName\n   * @param page\n   * @param hdPath\n   * @returns [] accounts\n   */\n  async connectHardware(deviceName, page, hdPath) {\n    const keyring = await this.getKeyringForDevice(deviceName, hdPath);\n    let accounts = [];\n    switch (page) {\n      case -1:\n        accounts = await keyring.getPreviousPage();\n        break;\n      case 1:\n        accounts = await keyring.getNextPage();\n        break;\n      default:\n        accounts = await keyring.getFirstPage();\n    }\n\n    // Merge with existing accounts\n    // and make sure addresses are not repeated\n    const oldAccounts = await this.keyringController.getAccounts();\n    const accountsToTrack = [\n      ...new Set(\n        oldAccounts.concat(accounts.map((a) => a.address.toLowerCase())),\n      ),\n    ];\n    this.accountTracker.syncWithAddresses(accountsToTrack);\n    return accounts;\n  }\n\n  /**\n   * Check if the device is unlocked\n   *\n   * @param deviceName\n   * @param hdPath\n   * @returns {Promise<boolean>}\n   */\n  async checkHardwareStatus(deviceName, hdPath) {\n    const keyring = await this.getKeyringForDevice(deviceName, hdPath);\n    return keyring.isUnlocked();\n  }\n\n  /**\n   * Clear\n   *\n   * @param deviceName\n   * @returns {Promise<boolean>}\n   */\n  async forgetDevice(deviceName) {\n    const keyring = await this.getKeyringForDevice(deviceName);\n    keyring.forgetDevice();\n    return true;\n  }\n\n  /**\n   * get hardware account label\n   *\n   * @returns string label\n   */\n\n  getAccountLabel(name, index, hdPathDescription) {\n    return `${name[0].toUpperCase()}${name.slice(1)} ${\n      parseInt(index, 10) + 1\n    } ${hdPathDescription || ''}`.trim();\n  }\n\n  /**\n   * Imports an account from a Trezor or Ledger device.\n   *\n   * @param index\n   * @param deviceName\n   * @param hdPath\n   * @param hdPathDescription\n   * @returns {} keyState\n   */\n  async unlockHardwareWalletAccount(\n    index,\n    deviceName,\n    hdPath,\n    hdPathDescription,\n  ) {\n    const keyring = await this.getKeyringForDevice(deviceName, hdPath);\n\n    keyring.setAccountToUnlock(index);\n    const oldAccounts = await this.keyringController.getAccounts();\n    const keyState = await this.keyringController.addNewAccount(keyring);\n    const newAccounts = await this.keyringController.getAccounts();\n    this.preferencesController.setAddresses(newAccounts);\n    newAccounts.forEach((address) => {\n      if (!oldAccounts.includes(address)) {\n        const label = this.getAccountLabel(\n          deviceName === DEVICE_NAMES.QR ? keyring.getName() : deviceName,\n          index,\n          hdPathDescription,\n        );\n        // Set the account label to Trezor 1 /  Ledger 1 / QR Hardware 1, etc\n        this.preferencesController.setAccountLabel(address, label);\n        // Select the account\n        this.preferencesController.setSelectedAddress(address);\n      }\n    });\n\n    const { identities } = this.preferencesController.store.getState();\n    return { ...keyState, identities };\n  }\n\n  //\n  // Account Management\n  //\n\n  /**\n   * Adds a new account to the default (first) HD seed phrase Keyring.\n   *\n   * @returns {} keyState\n   */\n  async addNewAccount() {\n    const primaryKeyring = this.keyringController.getKeyringsByType(\n      'HD Key Tree',\n    )[0];\n    if (!primaryKeyring) {\n      throw new Error('MetamaskController - No HD Key Tree found');\n    }\n    const { keyringController } = this;\n    const oldAccounts = await keyringController.getAccounts();\n    const keyState = await keyringController.addNewAccount(primaryKeyring);\n    const newAccounts = await keyringController.getAccounts();\n\n    await this.verifySeedPhrase();\n\n    this.preferencesController.setAddresses(newAccounts);\n    newAccounts.forEach((address) => {\n      if (!oldAccounts.includes(address)) {\n        this.preferencesController.setSelectedAddress(address);\n      }\n    });\n\n    const { identities } = this.preferencesController.store.getState();\n    return { ...keyState, identities };\n  }\n\n  /**\n   * Verifies the validity of the current vault's seed phrase.\n   *\n   * Validity: seed phrase restores the accounts belonging to the current vault.\n   *\n   * Called when the first account is created and on unlocking the vault.\n   *\n   * @returns {Promise<number[]>} The seed phrase to be confirmed by the user,\n   * encoded as an array of UTF-8 bytes.\n   */\n  async verifySeedPhrase() {\n    const primaryKeyring = this.keyringController.getKeyringsByType(\n      'HD Key Tree',\n    )[0];\n    if (!primaryKeyring) {\n      throw new Error('MetamaskController - No HD Key Tree found');\n    }\n\n    const serialized = await primaryKeyring.serialize();\n    const seedPhraseAsBuffer = Buffer.from(serialized.mnemonic);\n\n    const accounts = await primaryKeyring.getAccounts();\n    if (accounts.length < 1) {\n      throw new Error('MetamaskController - No accounts found');\n    }\n\n    try {\n      await seedPhraseVerifier.verifyAccounts(accounts, seedPhraseAsBuffer);\n      return Array.from(seedPhraseAsBuffer.values());\n    } catch (err) {\n      log.error(err.message);\n      throw err;\n    }\n  }\n\n  /**\n   * Clears the transaction history, to allow users to force-reset their nonces.\n   * Mostly used in development environments, when networks are restarted with\n   * the same network ID.\n   *\n   * @returns {Promise<string>} The current selected address.\n   */\n  async resetAccount() {\n    const selectedAddress = this.preferencesController.getSelectedAddress();\n    this.txController.wipeTransactions(selectedAddress);\n    this.networkController.resetConnection();\n\n    return selectedAddress;\n  }\n\n  /**\n   * Gets the permitted accounts for the specified origin. Returns an empty\n   * array if no accounts are permitted.\n   *\n   * @param {string} origin - The origin whose exposed accounts to retrieve.\n   * @returns {Promise<string[]>} The origin's permitted accounts, or an empty\n   * array.\n   */\n  async getPermittedAccounts(origin) {\n    try {\n      return await this.permissionController.executeRestrictedMethod(\n        origin,\n        RestrictedMethods.eth_accounts,\n      );\n    } catch (error) {\n      if (error.code === rpcErrorCodes.provider.unauthorized) {\n        return [];\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Stops exposing the account with the specified address to all third parties.\n   * Exposed accounts are stored in caveats of the eth_accounts permission. This\n   * method uses `PermissionController.updatePermissionsByCaveat` to\n   * remove the specified address from every eth_accounts permission. If a\n   * permission only included this address, the permission is revoked entirely.\n   *\n   * @param {string} targetAccount - The address of the account to stop exposing\n   * to third parties.\n   */\n  removeAllAccountPermissions(targetAccount) {\n    this.permissionController.updatePermissionsByCaveat(\n      CaveatTypes.restrictReturnedAccounts,\n      (existingAccounts) =>\n        CaveatMutatorFactories[\n          CaveatTypes.restrictReturnedAccounts\n        ].removeAccount(targetAccount, existingAccounts),\n    );\n  }\n\n  /**\n   * Removes an account from state / storage.\n   *\n   * @param {string[]} address - A hex address\n   */\n  async removeAccount(address) {\n    // Remove all associated permissions\n    this.removeAllAccountPermissions(address);\n    // Remove account from the preferences controller\n    this.preferencesController.removeAddress(address);\n    // Remove account from the account tracker controller\n    this.accountTracker.removeAccount([address]);\n\n    // Remove account from the keyring\n    await this.keyringController.removeAccount(address);\n    return address;\n  }\n\n  /**\n   * Imports an account with the specified import strategy.\n   * These are defined in app/scripts/account-import-strategies\n   * Each strategy represents a different way of serializing an Ethereum key pair.\n   *\n   * @param {string} strategy - A unique identifier for an account import strategy.\n   * @param {any} args - The data required by that strategy to import an account.\n   */\n  async importAccountWithStrategy(strategy, args) {\n    const privateKey = await accountImporter.importAccount(strategy, args);\n    const keyring = await this.keyringController.addNewKeyring(\n      'Simple Key Pair',\n      [privateKey],\n    );\n    const accounts = await keyring.getAccounts();\n    // update accounts in preferences controller\n    const allAccounts = await this.keyringController.getAccounts();\n    this.preferencesController.setAddresses(allAccounts);\n    // set new account as selected\n    await this.preferencesController.setSelectedAddress(accounts[0]);\n  }\n\n  // ---------------------------------------------------------------------------\n  // Identity Management (signature operations)\n\n  /**\n   * Called when a Dapp suggests a new tx to be signed.\n   * this wrapper needs to exist so we can provide a reference to\n   *  \"newUnapprovedTransaction\" before \"txController\" is instantiated\n   *\n   * @param {Object} txParams - The transaction parameters.\n   * @param {Object} [req] - The original request, containing the origin.\n   */\n  async newUnapprovedTransaction(txParams, req) {\n    return await this.txController.newUnapprovedTransaction(txParams, req);\n  }\n\n  // eth_sign methods:\n\n  /**\n   * Called when a Dapp uses the eth_sign method, to request user approval.\n   * eth_sign is a pure signature of arbitrary data. It is on a deprecation\n   * path, since this data can be a transaction, or can leak private key\n   * information.\n   *\n   * @param {Object} msgParams - The params passed to eth_sign.\n   * @param {Object} [req] - The original request, containing the origin.\n   */\n  async newUnsignedMessage(msgParams, req) {\n    const data = normalizeMsgData(msgParams.data);\n    let promise;\n    // 64 hex + \"0x\" at the beginning\n    // This is needed because Ethereum's EcSign works only on 32 byte numbers\n    // For 67 length see: https://github.com/MetaMask/metamask-extension/pull/12679/files#r749479607\n    if (data.length === 66 || data.length === 67) {\n      promise = this.messageManager.addUnapprovedMessageAsync(msgParams, req);\n      this.sendUpdate();\n      this.opts.showUserConfirmation();\n    } else {\n      throw ethErrors.rpc.invalidParams(\n        'eth_sign requires 32 byte message hash',\n      );\n    }\n    return await promise;\n  }\n\n\n  /**\n   * Signifies user intent to complete an eth_sign method.\n   *\n   * @param {Object} msgParams - The params passed to eth_call.\n   * @returns {Promise<Object>} Full state update.\n   */\n  async signMessage(msgParams) {\n    log.info('MetaMaskController - signMessage');\n    const msgId = msgParams.metamaskId;\n    try {\n      // sets the status op the message to 'approved'\n      // and removes the metamaskId for signing\n      const cleanMsgParams = await this.messageManager.approveMessage(\n        msgParams,\n      );\n      const rawSig = await this.keyringController.signMessage(cleanMsgParams);\n      this.messageManager.setMsgStatusSigned(msgId, rawSig);\n      return this.getState();\n    } catch (error) {\n      log.info('MetaMaskController - eth_sign failed', error);\n      this.messageManager.errorMessage(msgId, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Used to cancel a message submitted via eth_sign.\n   *\n   * @param {string} msgId - The id of the message to cancel.\n   */\n  cancelMessage(msgId) {\n    const { messageManager } = this;\n    messageManager.rejectMsg(msgId);\n    return this.getState();\n  }\n\n  // personal_sign methods:\n\n  /**\n   * Called when a dapp uses the personal_sign method.\n   * This is identical to the Geth eth_sign method, and may eventually replace\n   * eth_sign.\n   *\n   * We currently define our eth_sign and personal_sign mostly for legacy Dapps.\n   *\n   * @param {Object} msgParams - The params of the message to sign & return to the Dapp.\n   * @param {Object} [req] - The original request, containing the origin.\n   */\n  async newUnsignedPersonalMessage(msgParams, req) {\n    const promise = this.personalMessageManager.addUnapprovedMessageAsync(\n      msgParams,\n      req,\n    );\n    this.sendUpdate();\n    this.opts.showUserConfirmation();\n    return promise;\n  }\n\n  /**\n   * Signifies a user's approval to sign a personal_sign message in queue.\n   * Triggers signing, and the callback function from newUnsignedPersonalMessage.\n   *\n   * @param {Object} msgParams - The params of the message to sign & return to the Dapp.\n   * @returns {Promise<Object>} A full state update.\n   */\n  async signPersonalMessage(msgParams) {\n    log.info('MetaMaskController - signPersonalMessage');\n    const msgId = msgParams.metamaskId;\n    // sets the status op the message to 'approved'\n    // and removes the metamaskId for signing\n    try {\n      const cleanMsgParams = await this.personalMessageManager.approveMessage(\n        msgParams,\n      );\n      const rawSig = await this.keyringController.signPersonalMessage(\n        cleanMsgParams,\n      );\n      // tells the listener that the message has been signed\n      // and can be returned to the dapp\n      this.personalMessageManager.setMsgStatusSigned(msgId, rawSig);\n      return this.getState();\n    } catch (error) {\n      log.info('MetaMaskController - eth_personalSign failed', error);\n      this.personalMessageManager.errorMessage(msgId, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Used to cancel a personal_sign type message.\n   *\n   * @param {string} msgId - The ID of the message to cancel.\n   */\n  cancelPersonalMessage(msgId) {\n    const messageManager = this.personalMessageManager;\n    messageManager.rejectMsg(msgId);\n    return this.getState();\n  }\n\n  // eth_decrypt methods\n\n  /**\n   * Called when a dapp uses the eth_decrypt method.\n   *\n   * @param {Object} msgParams - The params of the message to sign & return to the Dapp.\n   * @param {Object} req - (optional) the original request, containing the origin\n   * Passed back to the requesting Dapp.\n   */\n  async newRequestDecryptMessage(msgParams, req) {\n    const promise = this.decryptMessageManager.addUnapprovedMessageAsync(\n      msgParams,\n      req,\n    );\n    this.sendUpdate();\n    this.opts.showUserConfirmation();\n    return promise;\n  }\n\n  /**\n   * Only decrypt message and don't touch transaction state\n   *\n   * @param {Object} msgParams - The params of the message to decrypt.\n   * @returns {Promise<Object>} A full state update.\n   */\n  async decryptMessageInline(msgParams) {\n    log.info('MetaMaskController - decryptMessageInline');\n    // decrypt the message inline\n    const msgId = msgParams.metamaskId;\n    const msg = this.decryptMessageManager.getMsg(msgId);\n    try {\n      const stripped = stripHexPrefix(msgParams.data);\n      const buff = Buffer.from(stripped, 'hex');\n      msgParams.data = JSON.parse(buff.toString('utf8'));\n\n      msg.rawData = await this.keyringController.decryptMessage(msgParams);\n    } catch (e) {\n      msg.error = e.message;\n    }\n    this.decryptMessageManager._updateMsg(msg);\n\n    return this.getState();\n  }\n\n  /**\n   * Signifies a user's approval to decrypt a message in queue.\n   * Triggers decrypt, and the callback function from newUnsignedDecryptMessage.\n   *\n   * @param {Object} msgParams - The params of the message to decrypt & return to the Dapp.\n   * @returns {Promise<Object>} A full state update.\n   */\n  async decryptMessage(msgParams) {\n    log.info('MetaMaskController - decryptMessage');\n    const msgId = msgParams.metamaskId;\n    // sets the status op the message to 'approved'\n    // and removes the metamaskId for decryption\n    try {\n      const cleanMsgParams = await this.decryptMessageManager.approveMessage(\n        msgParams,\n      );\n\n      const stripped = stripHexPrefix(cleanMsgParams.data);\n      const buff = Buffer.from(stripped, 'hex');\n      cleanMsgParams.data = JSON.parse(buff.toString('utf8'));\n\n      // decrypt the message\n      const rawMess = await this.keyringController.decryptMessage(\n        cleanMsgParams,\n      );\n      // tells the listener that the message has been decrypted and can be returned to the dapp\n      this.decryptMessageManager.setMsgStatusDecrypted(msgId, rawMess);\n    } catch (error) {\n      log.info('MetaMaskController - eth_decrypt failed.', error);\n      this.decryptMessageManager.errorMessage(msgId, error);\n    }\n    return this.getState();\n  }\n\n  /**\n   * Used to cancel a eth_decrypt type message.\n   *\n   * @param {string} msgId - The ID of the message to cancel.\n   */\n  cancelDecryptMessage(msgId) {\n    const messageManager = this.decryptMessageManager;\n    messageManager.rejectMsg(msgId);\n    return this.getState();\n  }\n\n  // eth_getEncryptionPublicKey methods\n\n  /**\n   * Called when a dapp uses the eth_getEncryptionPublicKey method.\n   *\n   * @param {Object} msgParams - The params of the message to sign & return to the Dapp.\n   * @param {Object} req - (optional) the original request, containing the origin\n   * Passed back to the requesting Dapp.\n   */\n  async newRequestEncryptionPublicKey(msgParams, req) {\n    const address = msgParams;\n    const keyring = await this.keyringController.getKeyringForAccount(address);\n\n    switch (keyring.type) {\n      case KEYRING_TYPES.LEDGER: {\n        return new Promise((_, reject) => {\n          reject(\n            new Error('Ledger does not support eth_getEncryptionPublicKey.'),\n          );\n        });\n      }\n\n      case KEYRING_TYPES.TREZOR: {\n        return new Promise((_, reject) => {\n          reject(\n            new Error('Trezor does not support eth_getEncryptionPublicKey.'),\n          );\n        });\n      }\n\n      case KEYRING_TYPES.LATTICE: {\n        return new Promise((_, reject) => {\n          reject(\n            new Error('Lattice does not support eth_getEncryptionPublicKey.'),\n          );\n        });\n      }\n\n      case KEYRING_TYPES.QR: {\n        return Promise.reject(\n          new Error('QR hardware does not support eth_getEncryptionPublicKey.'),\n        );\n      }\n\n      default: {\n        const promise = this.encryptionPublicKeyManager.addUnapprovedMessageAsync(\n          msgParams,\n          req,\n        );\n        this.sendUpdate();\n        this.opts.showUserConfirmation();\n        return promise;\n      }\n    }\n  }\n\n  /**\n   * Signifies a user's approval to receiving encryption public key in queue.\n   * Triggers receiving, and the callback function from newUnsignedEncryptionPublicKey.\n   *\n   * @param {Object} msgParams - The params of the message to receive & return to the Dapp.\n   * @returns {Promise<Object>} A full state update.\n   */\n  async encryptionPublicKey(msgParams) {\n    log.info('MetaMaskController - encryptionPublicKey');\n    const msgId = msgParams.metamaskId;\n    // sets the status op the message to 'approved'\n    // and removes the metamaskId for decryption\n    try {\n      const params = await this.encryptionPublicKeyManager.approveMessage(\n        msgParams,\n      );\n\n      // EncryptionPublicKey message\n      const publicKey = await this.keyringController.getEncryptionPublicKey(\n        params.data,\n      );\n\n      // tells the listener that the message has been processed\n      // and can be returned to the dapp\n      this.encryptionPublicKeyManager.setMsgStatusReceived(msgId, publicKey);\n    } catch (error) {\n      log.info(\n        'MetaMaskController - eth_getEncryptionPublicKey failed.',\n        error,\n      );\n      this.encryptionPublicKeyManager.errorMessage(msgId, error);\n    }\n    return this.getState();\n  }\n\n  /**\n   * Used to cancel a eth_getEncryptionPublicKey type message.\n   *\n   * @param {string} msgId - The ID of the message to cancel.\n   */\n  cancelEncryptionPublicKey(msgId) {\n    const messageManager = this.encryptionPublicKeyManager;\n    messageManager.rejectMsg(msgId);\n    return this.getState();\n  }\n\n  // eth_signTypedData methods\n\n  /**\n   * Called when a dapp uses the eth_signTypedData method, per EIP 712.\n   *\n   * @param {Object} msgParams - The params passed to eth_signTypedData.\n   * @param {Object} [req] - The original request, containing the origin.\n   * @param version\n   */\n  newUnsignedTypedMessage(msgParams, req, version) {\n    const promise = this.typedMessageManager.addUnapprovedMessageAsync(\n      msgParams,\n      req,\n      version,\n    );\n    this.sendUpdate();\n    this.opts.showUserConfirmation();\n    return promise;\n  }\n\n  /**\n   * The method for a user approving a call to eth_signTypedData, per EIP 712.\n   * Triggers the callback in newUnsignedTypedMessage.\n   *\n   * @param {Object} msgParams - The params passed to eth_signTypedData.\n   * @returns {Object} Full state update.\n   */\n  async signTypedMessage(msgParams) {\n    log.info('MetaMaskController - eth_signTypedData');\n    const msgId = msgParams.metamaskId;\n    const { version } = msgParams;\n    try {\n      const cleanMsgParams = await this.typedMessageManager.approveMessage(\n        msgParams,\n      );\n\n      // For some reason every version after V1 used stringified params.\n      if (version !== 'V1') {\n        // But we don't have to require that. We can stop suggesting it now:\n        if (typeof cleanMsgParams.data === 'string') {\n          cleanMsgParams.data = JSON.parse(cleanMsgParams.data);\n        }\n      }\n\n      const signature = await this.keyringController.signTypedMessage(\n        cleanMsgParams,\n        { version },\n      );\n      this.typedMessageManager.setMsgStatusSigned(msgId, signature);\n      return this.getState();\n    } catch (error) {\n      log.info('MetaMaskController - eth_signTypedData failed.', error);\n      this.typedMessageManager.errorMessage(msgId, error);\n      throw error;\n    }\n  }\n\n  /**\n   * Used to cancel a eth_signTypedData type message.\n   *\n   * @param {string} msgId - The ID of the message to cancel.\n   */\n  cancelTypedMessage(msgId) {\n    const messageManager = this.typedMessageManager;\n    messageManager.rejectMsg(msgId);\n    return this.getState();\n  }\n\n  /**\n   * @returns {boolean} true if the keyring type supports EIP-1559\n   */\n  async getCurrentAccountEIP1559Compatibility() {\n    return true;\n  }\n\n  //=============================================================================\n  // END (VAULT / KEYRING RELATED METHODS)\n  //=============================================================================\n\n  /**\n   * Allows a user to attempt to cancel a previously submitted transaction\n   * by creating a new transaction.\n   *\n   * @param {number} originalTxId - the id of the txMeta that you want to\n   *  attempt to cancel\n   * @param {import(\n   *  './controllers/transactions'\n   * ).CustomGasSettings} [customGasSettings] - overrides to use for gas params\n   *  instead of allowing this method to generate them\n   * @param newTxMetaProps\n   * @returns {Object} MetaMask state\n   */\n  async createCancelTransaction(\n    originalTxId,\n    customGasSettings,\n    newTxMetaProps,\n  ) {\n    await this.txController.createCancelTransaction(\n      originalTxId,\n      customGasSettings,\n      newTxMetaProps,\n    );\n    const state = await this.getState();\n    return state;\n  }\n\n  /**\n   * Allows a user to attempt to speed up a previously submitted transaction\n   * by creating a new transaction.\n   *\n   * @param {number} originalTxId - the id of the txMeta that you want to\n   *  attempt to speed up\n   * @param {import(\n   *  './controllers/transactions'\n   * ).CustomGasSettings} [customGasSettings] - overrides to use for gas params\n   *  instead of allowing this method to generate them\n   * @param newTxMetaProps\n   * @returns {Object} MetaMask state\n   */\n  async createSpeedUpTransaction(\n    originalTxId,\n    customGasSettings,\n    newTxMetaProps,\n  ) {\n    await this.txController.createSpeedUpTransaction(\n      originalTxId,\n      customGasSettings,\n      newTxMetaProps,\n    );\n    const state = await this.getState();\n    return state;\n  }\n\n  estimateGas(estimateGasParams) {\n    return new Promise((resolve, reject) => {\n      return this.txController.txGasUtil.query.estimateGas(\n        estimateGasParams,\n        (err, res) => {\n          if (err) {\n            return reject(err);\n          }\n\n          return resolve(res.toString(16));\n        },\n      );\n    });\n  }\n\n  //=============================================================================\n  // PASSWORD MANAGEMENT\n  //=============================================================================\n\n  /**\n   * Allows a user to begin the seed phrase recovery process.\n   */\n  markPasswordForgotten() {\n    this.preferencesController.setPasswordForgotten(true);\n    this.sendUpdate();\n  }\n\n  /**\n   * Allows a user to end the seed phrase recovery process.\n   */\n  unMarkPasswordForgotten() {\n    this.preferencesController.setPasswordForgotten(false);\n    this.sendUpdate();\n  }\n\n  //=============================================================================\n  // SETUP\n  //=============================================================================\n\n  /**\n   * A runtime.MessageSender object, as provided by the browser:\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/runtime/MessageSender\n   * @typedef {Object} MessageSender\n   * @property {string} - The URL of the page or frame hosting the script that sent the message.\n   */\n\n  /**\n   * A Snap sender object.\n   *\n   * @typedef {Object} SnapSender\n   * @property {string} snapId - The ID of the snap.\n   */\n\n  /**\n   * Used to create a multiplexed stream for connecting to an untrusted context\n   * like a Dapp or other extension.\n   *\n   * @param options - Options bag.\n   * @param {ReadableStream} options.connectionStream - The Duplex stream to connect to.\n   * @param {MessageSender | SnapSender} options.sender - The sender of the messages on this stream.\n   * @param {string} [options.subjectType] - The type of the sender, i.e. subject.\n   */\n  setupUntrustedCommunication({ connectionStream, sender, subjectType }) {\n    const { usePhishDetect } = this.preferencesController.store.getState();\n\n    let _subjectType;\n    if (subjectType) {\n      _subjectType = subjectType;\n    } else if (sender.id && sender.id !== this.extension.runtime.id) {\n      _subjectType = SUBJECT_TYPES.EXTENSION;\n    } else {\n      _subjectType = SUBJECT_TYPES.WEBSITE;\n    }\n\n    if (sender.url) {\n      const { hostname } = new URL(sender.url);\n      // Check if new connection is blocked if phishing detection is on\n      if (usePhishDetect && this.phishingController.test(hostname)) {\n        log.debug('MetaMask - sending phishing warning for', hostname);\n        this.sendPhishingWarning(connectionStream, hostname);\n        return;\n      }\n    }\n\n    // setup multiplexing\n    const mux = setupMultiplex(connectionStream);\n\n    // messages between inpage and background\n    this.setupProviderConnection(\n      mux.createStream('metamask-provider'),\n      sender,\n      _subjectType,\n    );\n\n    // TODO:LegacyProvider: Delete\n    if (sender.url) {\n      // legacy streams\n      this.setupPublicConfig(mux.createStream('publicConfig'));\n    }\n  }\n\n  /**\n   * Used to create a multiplexed stream for connecting to a trusted context,\n   * like our own user interfaces, which have the provider APIs, but also\n   * receive the exported API from this controller, which includes trusted\n   * functions, like the ability to approve transactions or sign messages.\n   *\n   * @param {*} connectionStream - The duplex stream to connect to.\n   * @param {MessageSender} sender - The sender of the messages on this stream\n   */\n  setupTrustedCommunication(connectionStream, sender) {\n    // setup multiplexing\n    const mux = setupMultiplex(connectionStream);\n    // connect features\n    this.setupControllerConnection(mux.createStream('controller'));\n    this.setupProviderConnection(\n      mux.createStream('provider'),\n      sender,\n      SUBJECT_TYPES.INTERNAL,\n    );\n  }\n\n  /**\n   * Called when we detect a suspicious domain. Requests the browser redirects\n   * to our anti-phishing page.\n   *\n   * @private\n   * @param {*} connectionStream - The duplex stream to the per-page script,\n   * for sending the reload attempt to.\n   * @param {string} hostname - The hostname that triggered the suspicion.\n   */\n  sendPhishingWarning(connectionStream, hostname) {\n    const mux = setupMultiplex(connectionStream);\n    const phishingStream = mux.createStream('phishing');\n    phishingStream.write({ hostname });\n  }\n\n  /**\n   * A method for providing our API over a stream using JSON-RPC.\n   *\n   * @param {*} outStream - The stream to provide our API over.\n   */\n  setupControllerConnection(outStream) {\n    const api = this.getApi();\n\n    // report new active controller connection\n    this.activeControllerConnections += 1;\n    this.emit('controllerConnectionChanged', this.activeControllerConnections);\n\n    // set up postStream transport\n    outStream.on('data', createMetaRPCHandler(api, outStream));\n    const handleUpdate = (update) => {\n      if (outStream._writableState.ended) {\n        return;\n      }\n      // send notification to client-side\n      outStream.write({\n        jsonrpc: '2.0',\n        method: 'sendUpdate',\n        params: [update],\n      });\n    };\n    this.on('update', handleUpdate);\n    outStream.on('end', () => {\n      this.activeControllerConnections -= 1;\n      this.emit(\n        'controllerConnectionChanged',\n        this.activeControllerConnections,\n      );\n      this.removeListener('update', handleUpdate);\n    });\n  }\n\n  /**\n   * A method for serving our ethereum provider over a given stream.\n   *\n   * @param {*} outStream - The stream to provide over.\n   * @param {MessageSender | SnapSender} sender - The sender of the messages on this stream\n   * @param {string} subjectType - The type of the sender, i.e. subject.\n   */\n  setupProviderConnection(outStream, sender, subjectType) {\n    let origin;\n    if (subjectType === SUBJECT_TYPES.INTERNAL) {\n      origin = 'metamask';\n    }\n    else {\n      origin = new URL(sender.url).origin;\n    }\n\n    if (sender.id && sender.id !== this.extension.runtime.id) {\n      this.subjectMetadataController.addSubjectMetadata({\n        origin,\n        extensionId: sender.id,\n        subjectType: SUBJECT_TYPES.EXTENSION,\n      });\n    }\n\n    let tabId;\n    if (sender.tab && sender.tab.id) {\n      tabId = sender.tab.id;\n    }\n\n    const engine = this.setupProviderEngine({\n      origin,\n      sender,\n      subjectType,\n      tabId,\n    });\n\n    // setup connection\n    const providerStream = createEngineStream({ engine });\n\n    const connectionId = this.addConnection(origin, { engine });\n\n    pump(outStream, providerStream, outStream, (err) => {\n      // handle any middleware cleanup\n      engine._middleware.forEach((mid) => {\n        if (mid.destroy && typeof mid.destroy === 'function') {\n          mid.destroy();\n        }\n      });\n      connectionId && this.removeConnection(origin, connectionId);\n      if (err) {\n        log.error(err);\n      }\n    });\n  }\n\n\n  /**\n   * A method for creating a provider that is safely restricted for the requesting subject.\n   *\n   * @param {Object} options - Provider engine options\n   * @param {string} options.origin - The origin of the sender\n   * @param {MessageSender | SnapSender} options.sender - The sender object.\n   * @param {string} options.subjectType - The type of the sender subject.\n   * @param {tabId} [options.tabId] - The tab ID of the sender - if the sender is within a tab\n   */\n  setupProviderEngine({ origin, subjectType, sender, tabId }) {\n    // setup json rpc engine stack\n    const engine = new JsonRpcEngine();\n    const { blockTracker, provider } = this;\n\n    // create filter polyfill middleware\n    const filterMiddleware = createFilterMiddleware({ provider, blockTracker });\n\n    // create subscription polyfill middleware\n    const subscriptionManager = createSubscriptionManager({\n      provider,\n      blockTracker,\n    });\n    subscriptionManager.events.on('notification', (message) =>\n      engine.emit('notification', message),\n    );\n\n    // append origin to each request\n    engine.push(createOriginMiddleware({ origin }));\n\n    // append tabId to each request if it exists\n    if (tabId) {\n      engine.push(createTabIdMiddleware({ tabId }));\n    }\n\n    // logging\n    engine.push(createLoggerMiddleware({ origin }));\n    engine.push(this.permissionLogController.createMiddleware());\n\n    // onboarding\n    if (subjectType === SUBJECT_TYPES.WEBSITE) {\n      engine.push(\n        createOnboardingMiddleware({\n          location: sender.url,\n          registerOnboarding: this.onboardingController.registerOnboarding,\n        }),\n      );\n    }\n\n    // Unrestricted/permissionless RPC method implementations\n    engine.push(\n      createMethodMiddleware({\n        origin,\n\n        subjectType,\n\n        // Miscellaneous\n        addSubjectMetadata: this.subjectMetadataController.addSubjectMetadata.bind(\n          this.subjectMetadataController,\n        ),\n        getProviderState: this.getProviderState.bind(this),\n        getUnlockPromise: this.appStateController.getUnlockPromise.bind(\n          this.appStateController,\n        ),\n        handleWatchAssetRequest: this.tokensController.watchAsset.bind(\n          this.tokensController,\n        ),\n        requestUserApproval: this.approvalController.addAndShowApprovalRequest.bind(\n          this.approvalController,\n        ),\n        sendMetrics: this.metaMetricsController.trackEvent.bind(\n          this.metaMetricsController,\n        ),\n\n        // Permission-related\n        getAccounts: this.getPermittedAccounts.bind(this, origin),\n        getPermissionsForOrigin: this.permissionController.getPermissions.bind(\n          this.permissionController,\n          origin,\n        ),\n        hasPermission: this.permissionController.hasPermission.bind(\n          this.permissionController,\n          origin,\n        ),\n        requestAccountsPermission: this.permissionController.requestPermissions.bind(\n          this.permissionController,\n          { origin },\n          { eth_accounts: {} },\n        ),\n        requestPermissionsForOrigin: this.permissionController.requestPermissions.bind(\n          this.permissionController,\n          { origin },\n        ),\n\n        // Custom RPC-related\n        addCustomRpc: async ({\n          chainId,\n          blockExplorerUrl,\n          ticker,\n          chainName,\n          rpcUrl,\n        } = {}) => {\n          await this.preferencesController.addToFrequentRpcList(\n            rpcUrl,\n            chainId,\n            ticker,\n            chainName,\n            {\n              blockExplorerUrl,\n            },\n          );\n        },\n        findCustomRpcBy: this.findCustomRpcBy.bind(this),\n        getCurrentChainId: this.networkController.getCurrentChainId.bind(\n          this.networkController,\n        ),\n        setProviderType: this.networkController.setProviderType.bind(\n          this.networkController,\n        ),\n        updateRpcTarget: ({ rpcUrl, chainId, ticker, nickname }) => {\n          this.networkController.setRpcTarget(\n            rpcUrl,\n            chainId,\n            ticker,\n            nickname,\n          );\n        },\n\n        // Web3 shim-related\n        getWeb3ShimUsageState: this.alertController.getWeb3ShimUsageState.bind(\n          this.alertController,\n        ),\n        setWeb3ShimUsageRecorded: this.alertController.setWeb3ShimUsageRecorded.bind(\n          this.alertController,\n        ),\n      }),\n    );\n\n\n    // filter and subscription polyfills\n    engine.push(filterMiddleware);\n    engine.push(subscriptionManager.middleware);\n    if (subjectType !== SUBJECT_TYPES.INTERNAL) {\n      // permissions\n      engine.push(\n        this.permissionController.createPermissionMiddleware({\n          origin,\n        }),\n      );\n    }\n\n    // forward to metamask primary provider\n    engine.push(providerAsMiddleware(provider));\n    return engine;\n  }\n\n  /**\n   * TODO:LegacyProvider: Delete\n   * A method for providing our public config info over a stream.\n   * This includes info we like to be synchronous if possible, like\n   * the current selected account, and network ID.\n   *\n   * Since synchronous methods have been deprecated in web3,\n   * this is a good candidate for deprecation.\n   *\n   * @param {*} outStream - The stream to provide public config over.\n   */\n  setupPublicConfig(outStream) {\n    const configStream = storeAsStream(this.publicConfigStore);\n\n    pump(configStream, outStream, (err) => {\n      configStream.destroy();\n      if (err) {\n        log.error(err);\n      }\n    });\n  }\n\n  /**\n   * Adds a reference to a connection by origin. Ignores the 'metamask' origin.\n   * Caller must ensure that the returned id is stored such that the reference\n   * can be deleted later.\n   *\n   * @param {string} origin - The connection's origin string.\n   * @param {Object} options - Data associated with the connection\n   * @param {Object} options.engine - The connection's JSON Rpc Engine\n   * @returns {string} The connection's id (so that it can be deleted later)\n   */\n  addConnection(origin, { engine }) {\n    if (origin === 'metamask') {\n      return null;\n    }\n\n    if (!this.connections[origin]) {\n      this.connections[origin] = {};\n    }\n\n    const id = nanoid();\n    this.connections[origin][id] = {\n      engine,\n    };\n\n    return id;\n  }\n\n  /**\n   * Deletes a reference to a connection, by origin and id.\n   * Ignores unknown origins.\n   *\n   * @param {string} origin - The connection's origin string.\n   * @param {string} id - The connection's id, as returned from addConnection.\n   */\n  removeConnection(origin, id) {\n    const connections = this.connections[origin];\n    if (!connections) {\n      return;\n    }\n\n    delete connections[id];\n\n    if (Object.keys(connections).length === 0) {\n      delete this.connections[origin];\n    }\n  }\n\n  /**\n   * Closes all connections for the given origin, and removes the references\n   * to them.\n   * Ignores unknown origins.\n   *\n   * @param {string} origin - The origin string.\n   */\n  removeAllConnections(origin) {\n    const connections = this.connections[origin];\n    if (!connections) {\n      return;\n    }\n\n    Object.keys(connections).forEach((id) => {\n      this.removeConnection(origin, id);\n    });\n  }\n\n  /**\n   * Causes the RPC engines associated with the connections to the given origin\n   * to emit a notification event with the given payload.\n   *\n   * The caller is responsible for ensuring that only permitted notifications\n   * are sent.\n   *\n   * Ignores unknown origins.\n   *\n   * @param {string} origin - The connection's origin string.\n   * @param {unknown} payload - The event payload.\n   */\n  notifyConnections(origin, payload) {\n    const connections = this.connections[origin];\n\n    if (connections) {\n      Object.values(connections).forEach((conn) => {\n        if (conn.engine) {\n          conn.engine.emit('notification', payload);\n        }\n      });\n    }\n  }\n\n  /**\n   * Causes the RPC engines associated with all connections to emit a\n   * notification event with the given payload.\n   *\n   * If the \"payload\" parameter is a function, the payload for each connection\n   * will be the return value of that function called with the connection's\n   * origin.\n   *\n   * The caller is responsible for ensuring that only permitted notifications\n   * are sent.\n   *\n   * @param {unknown} payload - The event payload, or payload getter function.\n   */\n  notifyAllConnections(payload) {\n    const getPayload =\n      typeof payload === 'function'\n        ? (origin) => payload(origin)\n        : () => payload;\n\n    Object.keys(this.connections).forEach((origin) => {\n      Object.values(this.connections[origin]).forEach(async (conn) => {\n        if (conn.engine) {\n          conn.engine.emit('notification', await getPayload(origin));\n        }\n      });\n    });\n  }\n\n  // handlers\n\n  /**\n   * Handle a KeyringController update\n   *\n   * @param {Object} state - the KC state\n   * @returns {Promise<void>}\n   * @private\n   */\n  async _onKeyringControllerUpdate(state) {\n    const { keyrings } = state;\n    const addresses = keyrings.reduce(\n      (acc, { accounts }) => acc.concat(accounts),\n      [],\n    );\n\n    if (!addresses.length) {\n      return;\n    }\n\n    // Ensure preferences + identities controller know about all addresses\n    this.preferencesController.syncAddresses(addresses);\n    this.accountTracker.syncWithAddresses(addresses);\n  }\n\n  /**\n   * Handle global application unlock.\n   * Notifies all connections that the extension is unlocked, and which\n   * account(s) are currently accessible, if any.\n   */\n  _onUnlock() {\n    this.notifyAllConnections(async (origin) => {\n      return {\n        method: NOTIFICATION_NAMES.unlockStateChanged,\n        params: {\n          isUnlocked: true,\n          accounts: await this.getPermittedAccounts(origin),\n        },\n      };\n    });\n\n    // In the current implementation, this handler is triggered by a\n    // KeyringController event. Other controllers subscribe to the 'unlock'\n    // event of the MetaMaskController itself.\n    this.emit('unlock');\n  }\n\n  /**\n   * Handle global application lock.\n   * Notifies all connections that the extension is locked.\n   */\n  _onLock() {\n    this.notifyAllConnections({\n      method: NOTIFICATION_NAMES.unlockStateChanged,\n      params: {\n        isUnlocked: false,\n      },\n    });\n\n    // In the current implementation, this handler is triggered by a\n    // KeyringController event. Other controllers subscribe to the 'lock'\n    // event of the MetaMaskController itself.\n    this.emit('lock');\n  }\n\n  /**\n   * Handle memory state updates.\n   * - Ensure isClientOpenAndUnlocked is updated\n   * - Notifies all connections with the new provider network state\n   *   - The external providers handle diffing the state\n   *\n   * @param newState\n   */\n  _onStateUpdate(newState) {\n    this.isClientOpenAndUnlocked = newState.isUnlocked && this._isClientOpen;\n    this.notifyAllConnections({\n      method: NOTIFICATION_NAMES.chainChanged,\n      params: this.getProviderNetworkState(newState),\n    });\n  }\n\n  // misc\n\n  /**\n   * A method for emitting the full MetaMask state to all registered listeners.\n   *\n   * @private\n   */\n  privateSendUpdate() {\n    this.emit('update', this.getState());\n  }\n\n  /**\n   * @returns {boolean} Whether the extension is unlocked.\n   */\n  isUnlocked() {\n    return this.keyringController.memStore.getState().isUnlocked;\n  }\n\n  //=============================================================================\n  // MISCELLANEOUS\n  //=============================================================================\n\n  getExternalPendingTransactions(address) {\n    return this.smartTransactionsController.getTransactions({\n      addressFrom: address,\n      status: 'pending',\n    });\n  }\n\n  /**\n   * Returns the nonce that will be associated with a transaction once approved\n   *\n   * @param {string} address - The hex string address for the transaction\n   * @returns {Promise<number>}\n   */\n  async getPendingNonce(address) {\n    const {\n      nonceDetails,\n      releaseLock,\n    } = await this.txController.nonceTracker.getNonceLock(address);\n    const pendingNonce = nonceDetails.params.highestSuggested;\n\n    releaseLock();\n    return pendingNonce;\n  }\n\n  /**\n   * Returns the next nonce according to the nonce-tracker\n   *\n   * @param {string} address - The hex string address for the transaction\n   * @returns {Promise<number>}\n   */\n  async getNextNonce(address) {\n    const nonceLock = await this.txController.nonceTracker.getNonceLock(\n      address,\n    );\n    nonceLock.releaseLock();\n    return nonceLock.nextNonce;\n  }\n\n  /**\n   * Migrate address book state from old to new chainId.\n   *\n   * Address book state is keyed by the `networkStore` state from the network controller. This value is set to the\n   * `networkId` for our built-in Infura networks, but it's set to the `chainId` for custom networks.\n   * When this `chainId` value is changed for custom RPC endpoints, we need to migrate any contacts stored under the\n   * old key to the new key.\n   *\n   * The `duplicate` parameter is used to specify that the contacts under the old key should not be removed. This is\n   * useful in the case where two RPC endpoints shared the same set of contacts, and we're not sure which one each\n   * contact belongs under. Duplicating the contacts under both keys is the only way to ensure they are not lost.\n   *\n   * @param {string} oldChainId - The old chainId\n   * @param {string} newChainId - The new chainId\n   * @param {boolean} [duplicate] - Whether to duplicate the addresses on both chainIds (default: false)\n   */\n  async migrateAddressBookState(oldChainId, newChainId, duplicate = false) {\n    const { addressBook } = this.addressBookController.state;\n\n    if (!addressBook[oldChainId]) {\n      return;\n    }\n\n    for (const address of Object.keys(addressBook[oldChainId])) {\n      const entry = addressBook[oldChainId][address];\n      this.addressBookController.set(\n        address,\n        entry.name,\n        newChainId,\n        entry.memo,\n      );\n      if (!duplicate) {\n        this.addressBookController.delete(oldChainId, address);\n      }\n    }\n  }\n\n  //=============================================================================\n  // CONFIG\n  //=============================================================================\n\n  // Log blocks\n\n  /**\n   * A method for selecting a custom URL for an ethereum RPC provider and updating it\n   *\n   * @param {string} rpcUrl - A URL for a valid Ethereum RPC API.\n   * @param {string} chainId - The chainId of the selected network.\n   * @param {string} ticker - The ticker symbol of the selected network.\n   * @param {string} [nickname] - Nickname of the selected network.\n   * @param {Object} [rpcPrefs] - RPC preferences.\n   * @param {string} [rpcPrefs.blockExplorerUrl] - URL of block explorer for the chain.\n   * @returns {Promise<string>} The RPC Target URL confirmed.\n   */\n  async updateAndSetCustomRpc(\n    rpcUrl,\n    chainId,\n    ticker = 'ETH',\n    nickname,\n    rpcPrefs,\n  ) {\n    this.networkController.setRpcTarget(\n      rpcUrl,\n      chainId,\n      ticker,\n      nickname,\n      rpcPrefs,\n    );\n    await this.preferencesController.updateRpc({\n      rpcUrl,\n      chainId,\n      ticker,\n      nickname,\n      rpcPrefs,\n    });\n    return rpcUrl;\n  }\n\n  /**\n   * A method for selecting a custom URL for an ethereum RPC provider.\n   *\n   * @param {string} rpcUrl - A URL for a valid Ethereum RPC API.\n   * @param {string} chainId - The chainId of the selected network.\n   * @param {string} ticker - The ticker symbol of the selected network.\n   * @param {string} nickname - Optional nickname of the selected network.\n   * @param rpcPrefs\n   * @returns {Promise<string>} The RPC Target URL confirmed.\n   */\n  async setCustomRpc(\n    rpcUrl,\n    chainId,\n    ticker = 'ETH',\n    nickname = '',\n    rpcPrefs = {},\n  ) {\n    const frequentRpcListDetail = this.preferencesController.getFrequentRpcListDetail();\n    const rpcSettings = frequentRpcListDetail.find(\n      (rpc) => rpcUrl === rpc.rpcUrl,\n    );\n\n    if (rpcSettings) {\n      this.networkController.setRpcTarget(\n        rpcSettings.rpcUrl,\n        rpcSettings.chainId,\n        rpcSettings.ticker,\n        rpcSettings.nickname,\n        rpcPrefs,\n      );\n    } else {\n      this.networkController.setRpcTarget(\n        rpcUrl,\n        chainId,\n        ticker,\n        nickname,\n        rpcPrefs,\n      );\n      await this.preferencesController.addToFrequentRpcList(\n        rpcUrl,\n        chainId,\n        ticker,\n        nickname,\n        rpcPrefs,\n      );\n    }\n    return rpcUrl;\n  }\n\n  /**\n   * A method for deleting a selected custom URL.\n   *\n   * @param {string} rpcUrl - A RPC URL to delete.\n   */\n  async delCustomRpc(rpcUrl) {\n    await this.preferencesController.removeFromFrequentRpcList(rpcUrl);\n  }\n\n  /**\n   * Returns the first RPC info object that matches at least one field of the\n   * provided search criteria. Returns null if no match is found\n   *\n   * @param {Object} rpcInfo - The RPC endpoint properties and values to check.\n   * @returns {Object} rpcInfo found in the frequentRpcList\n   */\n  findCustomRpcBy(rpcInfo) {\n    const frequentRpcListDetail = this.preferencesController.getFrequentRpcListDetail();\n    for (const existingRpcInfo of frequentRpcListDetail) {\n      for (const key of Object.keys(rpcInfo)) {\n        if (existingRpcInfo[key] === rpcInfo[key]) {\n          return existingRpcInfo;\n        }\n      }\n    }\n    return null;\n  }\n\n  async initializeThreeBox() {\n    await this.threeBoxController.init();\n  }\n\n  /**\n   * Sets the Ledger Live preference to use for Ledger hardware wallet support\n   *\n   * @param {string} transportType - The Ledger transport type.\n   */\n  async setLedgerTransportPreference(transportType) {\n    const currentValue = this.preferencesController.getLedgerTransportPreference();\n    const newValue = this.preferencesController.setLedgerTransportPreference(\n      transportType,\n    );\n\n    const keyring = await this.getKeyringForDevice(DEVICE_NAMES.LEDGER);\n    if (keyring?.updateTransportMethod) {\n      return keyring.updateTransportMethod(newValue).catch((e) => {\n        // If there was an error updating the transport, we should\n        // fall back to the original value\n        this.preferencesController.setLedgerTransportPreference(currentValue);\n        throw e;\n      });\n    }\n\n    return undefined;\n  }\n\n  /**\n   * A method for initializing storage the first time.\n   *\n   * @param {Object} initState - The default state to initialize with.\n   * @private\n   */\n  recordFirstTimeInfo(initState) {\n    if (!('firstTimeInfo' in initState)) {\n      const version = this.platform.getVersion();\n      initState.firstTimeInfo = {\n        version,\n        date: Date.now(),\n      };\n    }\n  }\n\n  // TODO: Replace isClientOpen methods with `controllerConnectionChanged` events.\n  /* eslint-disable accessor-pairs */\n  /**\n   * A method for recording whether the MetaMask user interface is open or not.\n   *\n   * @param {boolean} open\n   */\n  set isClientOpen(open) {\n    this._isClientOpen = open;\n    this.detectTokensController.isOpen = open;\n  }\n  /* eslint-enable accessor-pairs */\n\n  /**\n   * A method that is called by the background when all instances of metamask are closed.\n   * Currently used to stop polling in the gasFeeController.\n   */\n  onClientClosed() {\n    try {\n      this.gasFeeController.stopPolling();\n      this.appStateController.clearPollingTokens();\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  /**\n   * A method that is called by the background when a particular environment type is closed (fullscreen, popup, notification).\n   * Currently used to stop polling in the gasFeeController for only that environement type\n   *\n   * @param environmentType\n   */\n  onEnvironmentTypeClosed(environmentType) {\n    const appStatePollingTokenType =\n      POLLING_TOKEN_ENVIRONMENT_TYPES[environmentType];\n    const pollingTokensToDisconnect = this.appStateController.store.getState()[\n      appStatePollingTokenType\n    ];\n    pollingTokensToDisconnect.forEach((pollingToken) => {\n      this.gasFeeController.disconnectPoller(pollingToken);\n      this.appStateController.removePollingToken(\n        pollingToken,\n        appStatePollingTokenType,\n      );\n    });\n  }\n\n  /**\n   * Adds a domain to the PhishingController safelist\n   *\n   * @param {string} hostname - the domain to safelist\n   */\n  safelistPhishingDomain(hostname) {\n    return this.phishingController.bypass(hostname);\n  }\n\n  /**\n   * Locks MetaMask\n   */\n  setLocked() {\n    const [trezorKeyring] = this.keyringController.getKeyringsByType(\n      KEYRING_TYPES.TREZOR,\n    );\n    if (trezorKeyring) {\n      trezorKeyring.dispose();\n    }\n    return this.keyringController.setLocked();\n  }\n\n}\n","/**\n * Returns a function, that, as long as it continues to be invoked, will not\n * be triggered. The function will be called after it stops being called for\n * N milliseconds. If `immediate` is passed, trigger the function on the\n * leading edge, instead of the trailing. The function also has a property 'clear' \n * that is a function which will clear the timer to prevent previously scheduled executions. \n *\n * @source underscore.js\n * @see http://unscriptable.com/2009/03/20/debouncing-javascript-methods/\n * @param {Function} function to wrap\n * @param {Number} timeout in ms (`100`)\n * @param {Boolean} whether to execute at the beginning (`false`)\n * @api public\n */\n\nmodule.exports = function debounce(func, wait, immediate){\n  var timeout, args, context, timestamp, result;\n  if (null == wait) wait = 100;\n\n  function later() {\n    var last = Date.now() - timestamp;\n\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      if (!immediate) {\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    }\n  };\n\n  var debounced = function(){\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    var callNow = immediate && !timeout;\n    if (!timeout) timeout = setTimeout(later, wait);\n    if (callNow) {\n      result = func.apply(context, args);\n      context = args = null;\n    }\n\n    return result;\n  };\n\n  debounced.clear = function() {\n    if (timeout) {\n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n  \n  debounced.flush = function() {\n    if (timeout) {\n      result = func.apply(context, args);\n      context = args = null;\n      \n      clearTimeout(timeout);\n      timeout = null;\n    }\n  };\n\n  return debounced;\n};\n","var Stream = require('stream')\n\n// through\n//\n// a stream that does nothing but re-emit the input.\n// useful for aggregating a series of changing but not ending streams into one stream)\n\nexports = module.exports = through\nthrough.through = through\n\n//create a readable writable stream.\n\nfunction through (write, end, opts) {\n  write = write || function (data) { this.queue(data) }\n  end = end || function () { this.queue(null) }\n\n  var ended = false, destroyed = false, buffer = [], _ended = false\n  var stream = new Stream()\n  stream.readable = stream.writable = true\n  stream.paused = false\n\n//  stream.autoPause   = !(opts && opts.autoPause   === false)\n  stream.autoDestroy = !(opts && opts.autoDestroy === false)\n\n  stream.write = function (data) {\n    write.call(this, data)\n    return !stream.paused\n  }\n\n  function drain() {\n    while(buffer.length && !stream.paused) {\n      var data = buffer.shift()\n      if(null === data)\n        return stream.emit('end')\n      else\n        stream.emit('data', data)\n    }\n  }\n\n  stream.queue = stream.push = function (data) {\n//    console.error(ended)\n    if(_ended) return stream\n    if(data === null) _ended = true\n    buffer.push(data)\n    drain()\n    return stream\n  }\n\n  //this will be registered as the first 'end' listener\n  //must call destroy next tick, to make sure we're after any\n  //stream piped from here.\n  //this is only a problem if end is not emitted synchronously.\n  //a nicer way to do this is to make sure this is the last listener for 'end'\n\n  stream.on('end', function () {\n    stream.readable = false\n    if(!stream.writable && stream.autoDestroy)\n      process.nextTick(function () {\n        stream.destroy()\n      })\n  })\n\n  function _end () {\n    stream.writable = false\n    end.call(stream)\n    if(!stream.readable && stream.autoDestroy)\n      stream.destroy()\n  }\n\n  stream.end = function (data) {\n    if(ended) return\n    ended = true\n    if(arguments.length) stream.write(data)\n    _end() // will emit or queue\n    return stream\n  }\n\n  stream.destroy = function () {\n    if(destroyed) return\n    destroyed = true\n    ended = true\n    buffer.length = 0\n    stream.writable = stream.readable = false\n    stream.emit('close')\n    return stream\n  }\n\n  stream.pause = function () {\n    if(stream.paused) return\n    stream.paused = true\n    return stream\n  }\n\n  stream.resume = function () {\n    if(stream.paused) {\n      stream.paused = false\n      stream.emit('resume')\n    }\n    drain()\n    //may have become paused again,\n    //as drain emits 'data'.\n    if(!stream.paused)\n      stream.emit('drain')\n    return stream\n  }\n  return stream\n}\n\n","var Stream = require(\"stream\")\nvar writeMethods = [\"write\", \"end\", \"destroy\"]\nvar readMethods = [\"resume\", \"pause\"]\nvar readEvents = [\"data\", \"close\"]\nvar slice = Array.prototype.slice\n\nmodule.exports = duplex\n\nfunction forEach (arr, fn) {\n    if (arr.forEach) {\n        return arr.forEach(fn)\n    }\n\n    for (var i = 0; i < arr.length; i++) {\n        fn(arr[i], i)\n    }\n}\n\nfunction duplex(writer, reader) {\n    var stream = new Stream()\n    var ended = false\n\n    forEach(writeMethods, proxyWriter)\n\n    forEach(readMethods, proxyReader)\n\n    forEach(readEvents, proxyStream)\n\n    reader.on(\"end\", handleEnd)\n\n    writer.on(\"drain\", function() {\n      stream.emit(\"drain\")\n    })\n\n    writer.on(\"error\", reemit)\n    reader.on(\"error\", reemit)\n\n    stream.writable = writer.writable\n    stream.readable = reader.readable\n\n    return stream\n\n    function proxyWriter(methodName) {\n        stream[methodName] = method\n\n        function method() {\n            return writer[methodName].apply(writer, arguments)\n        }\n    }\n\n    function proxyReader(methodName) {\n        stream[methodName] = method\n\n        function method() {\n            stream.emit(methodName)\n            var func = reader[methodName]\n            if (func) {\n                return func.apply(reader, arguments)\n            }\n            reader.emit(methodName)\n        }\n    }\n\n    function proxyStream(methodName) {\n        reader.on(methodName, reemit)\n\n        function reemit() {\n            var args = slice.call(arguments)\n            args.unshift(methodName)\n            stream.emit.apply(stream, args)\n        }\n    }\n\n    function handleEnd() {\n        if (ended) {\n            return\n        }\n        ended = true\n        var args = slice.call(arguments)\n        args.unshift(\"end\")\n        stream.emit.apply(stream, args)\n    }\n\n    function reemit(err) {\n        stream.emit(\"error\", err)\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeAsStream = void 0;\nconst stream_1 = require(\"stream\");\nclass ObservableStoreStream extends stream_1.Duplex {\n    constructor(obsStore) {\n        super({\n            // pass values, not serializations\n            objectMode: true,\n        });\n        // dont buffer outgoing updates\n        this.resume();\n        // save handler so we can unsubscribe later\n        this.handler = (state) => this.push(state);\n        // subscribe to obsStore changes\n        this.obsStore = obsStore;\n        this.obsStore.subscribe(this.handler);\n    }\n    // emit current state on new destination\n    pipe(dest, options) {\n        const result = super.pipe(dest, options);\n        dest.write(this.obsStore.getState());\n        return result;\n    }\n    // write from incoming stream to state\n    _write(chunk, _encoding, callback) {\n        this.obsStore.putState(chunk);\n        callback();\n    }\n    // noop - outgoing stream is asking us if we have data we arent giving it\n    _read(_size) {\n        return undefined;\n    }\n    // unsubscribe from event emitter\n    _destroy(err, callback) {\n        this.obsStore.unsubscribe(this.handler);\n        super._destroy(err, callback);\n    }\n}\nfunction storeAsStream(obsStore) {\n    return new ObservableStoreStream(obsStore);\n}\nexports.storeAsStream = storeAsStream;\n//# sourceMappingURL=asStream.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LocalStorageStore = void 0;\nconst ObservableStore_1 = require(\"./ObservableStore\");\nclass LocalStorageStore extends ObservableStore_1.ObservableStore {\n    constructor(opts = {}) {\n        if (!global.localStorage) {\n            throw new Error('LocalStorageStore - can\\'t find localStorage.');\n        }\n        super();\n        if (!opts.storageKey) {\n            throw new Error('LocalStorageStore - no storageKey specified.');\n        }\n        this._storageKey = opts.storageKey;\n    }\n    //\n    // private\n    //\n    // read from persistence\n    _getState() {\n        const serialized = global.localStorage.getItem(this._storageKey);\n        return serialized ? JSON.parse(serialized) : undefined;\n    }\n    // write to persistence\n    _putState(newState) {\n        const serialized = JSON.stringify(newState);\n        return global.localStorage.setItem(this._storageKey, serialized);\n    }\n}\nexports.LocalStorageStore = LocalStorageStore;\n//# sourceMappingURL=LocalStorageStore.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ComposedStore = void 0;\nconst ObservableStore_1 = require(\"./ObservableStore\");\nclass ComposedStore extends ObservableStore_1.ObservableStore {\n    constructor(children) {\n        super();\n        // set default state\n        const state = this.getState();\n        if (!state) {\n            this.putState({});\n        }\n        // subscribe to children\n        this._children = children || {};\n        Object.keys(this._children).forEach((childKey) => {\n            const child = this._children[childKey];\n            this._addChild(childKey, child);\n        });\n    }\n    _addChild(childKey, child) {\n        const updateFromChild = (childValue) => {\n            const state = this.getState();\n            state[childKey] = childValue;\n            this.putState(state);\n        };\n        child.subscribe(updateFromChild);\n        updateFromChild(child.getState());\n    }\n}\nexports.ComposedStore = ComposedStore;\n//# sourceMappingURL=ComposedStore.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MergedStore = void 0;\nconst ObservableStore_1 = require(\"./ObservableStore\");\nclass MergedStore extends ObservableStore_1.ObservableStore {\n    constructor(children = []) {\n        super();\n        // set default state\n        const state = this.getState();\n        if (!state) {\n            this.putState({});\n        }\n        this._children = children;\n        // subscribe to children\n        children.forEach((child) => this._addChild(child));\n        this._updateWholeState();\n    }\n    _addChild(child) {\n        child.subscribe(() => this._updateWholeState());\n    }\n    _updateWholeState() {\n        const childStates = this._children.map((child) => child.getState());\n        // apply shallow merge over states\n        const state = Object.assign({}, ...childStates);\n        this.putState(state);\n    }\n}\nexports.MergedStore = MergedStore;\n//# sourceMappingURL=MergedStore.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ObservableStore = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nclass ObservableStore extends safe_event_emitter_1.default {\n    constructor(initState = {}) {\n        super();\n        // set init state\n        this._state = initState;\n    }\n    // wrapper around internal getState\n    getState() {\n        return this._getState();\n    }\n    // wrapper around internal putState\n    putState(newState) {\n        this._putState(newState);\n        this.emit('update', newState);\n    }\n    updateState(partialState) {\n        // if non-null object, merge\n        if (partialState && typeof partialState === 'object') {\n            const state = this.getState();\n            const newState = Object.assign({}, state, partialState);\n            this.putState(newState);\n            // if not object, use new value\n        }\n        else {\n            this.putState(partialState);\n        }\n    }\n    // subscribe to changes\n    subscribe(handler) {\n        this.on('update', handler);\n    }\n    // unsubscribe to changes\n    unsubscribe(handler) {\n        this.removeListener('update', handler);\n    }\n    //\n    // private\n    //\n    // read from persistence\n    _getState() {\n        return this._state;\n    }\n    // write to persistence\n    _putState(newState) {\n        this._state = newState;\n    }\n}\nexports.ObservableStore = ObservableStore;\n//# sourceMappingURL=ObservableStore.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeTransformStream = void 0;\nconst through2_1 = require(\"through2\");\nfunction storeTransformStream(syncTransformFn) {\n    return through2_1.obj((state, _encoding, cb) => {\n        try {\n            const newState = syncTransformFn(state);\n            cb(null, newState);\n            return undefined;\n        }\n        catch (err) {\n            cb(err);\n            return undefined;\n        }\n    });\n}\nexports.storeTransformStream = storeTransformStream;\n//# sourceMappingURL=transform.js.map","import { cloneDeep } from 'lodash';\n\nconst version = 3;\nconst oldTestRpc = 'https://rawtestrpc.metamask.io/';\nconst newTestRpc = 'https://testrpc.metamask.io/';\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      if (versionedData.data.config.provider.rpcTarget === oldTestRpc) {\n        versionedData.data.config.provider.rpcTarget = newTestRpc;\n      }\n    } catch (_) {\n      // empty\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n","/*\n\nThis migration modifies the network config from ambiguous 'testnet' to explicit 'ropsten'\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 13;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { config } = newState;\n  if (config && config.provider) {\n    if (config.provider.type === 'testnet') {\n      newState.config.provider.type = 'ropsten';\n    }\n  }\n  return newState;\n}\n","/*\n\nThis migration breaks out the CurrencyController substate\n\n*/\n\nimport { cloneDeep, merge } from 'lodash';\n\nconst version = 9;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = merge({}, state, {\n    CurrencyController: {\n      currentCurrency: state.currentFiat || state.fiatCurrency || 'USD',\n      conversionRate: state.conversionRate,\n      conversionDate: state.conversionDate,\n    },\n  });\n  delete newState.currentFiat;\n  delete newState.fiatCurrency;\n  delete newState.conversionRate;\n  delete newState.conversionDate;\n\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 2;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      if (versionedData.data.config.provider.type === 'etherscan') {\n        versionedData.data.config.provider.type = 'rpc';\n        versionedData.data.config.provider.rpcTarget =\n          'https://rpc.metamask.io/';\n      }\n    } catch (_) {\n      // empty\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n","// next version number\n/*\n\nnormalizes txParams on unconfirmed txs\n\n*/\nimport { cloneDeep } from 'lodash';\nimport { addHexPrefix } from '../lib/util';\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\n\nconst version = 25;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n\n  if (newState.TransactionController) {\n    if (newState.TransactionController.transactions) {\n      const { transactions } = newState.TransactionController;\n      newState.TransactionController.transactions = transactions.map(\n        (txMeta) => {\n          if (txMeta.status !== TRANSACTION_STATUSES.UNAPPROVED) {\n            return txMeta;\n          }\n          txMeta.txParams = normalizeTxParams(txMeta.txParams);\n          return txMeta;\n        },\n      );\n    }\n  }\n\n  return newState;\n}\n\nfunction normalizeTxParams(txParams) {\n  // functions that handle normalizing of that key in txParams\n  const whiteList = {\n    from: (from) => addHexPrefix(from).toLowerCase(),\n    to: () => addHexPrefix(txParams.to).toLowerCase(),\n    nonce: (nonce) => addHexPrefix(nonce),\n    value: (value) => addHexPrefix(value),\n    data: (data) => addHexPrefix(data),\n    gas: (gas) => addHexPrefix(gas),\n    gasPrice: (gasPrice) => addHexPrefix(gasPrice),\n  };\n\n  // apply only keys in the whiteList\n  const normalizedTxParams = {};\n  Object.keys(whiteList).forEach((key) => {\n    if (txParams[key]) {\n      normalizedTxParams[key] = whiteList[key](txParams[key]);\n    }\n  });\n\n  return normalizedTxParams;\n}\n","/*\n\nThis migration sets transactions with the 'Gave up submitting tx.' err message\nto a 'failed' stated\n\n*/\n\nimport { cloneDeep } from 'lodash';\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\n\nconst version = 16;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      if (!txMeta.err) {\n        return txMeta;\n      }\n      if (\n        txMeta.err === 'transaction with the same hash was already imported.'\n      ) {\n        txMeta.status = TRANSACTION_STATUSES.SUBMITTED;\n        delete txMeta.err;\n      }\n      return txMeta;\n    });\n  }\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 4;\n\nexport default {\n  version,\n\n  migrate(versionedData) {\n    const safeVersionedData = cloneDeep(versionedData);\n    safeVersionedData.meta.version = version;\n    try {\n      if (safeVersionedData.data.config.provider.type !== 'rpc') {\n        return Promise.resolve(safeVersionedData);\n      }\n      switch (safeVersionedData.data.config.provider.rpcTarget) {\n        case 'https://testrpc.metamask.io/':\n          safeVersionedData.data.config.provider = {\n            type: 'testnet',\n          };\n          break;\n        case 'https://rpc.metamask.io/':\n          safeVersionedData.data.config.provider = {\n            type: 'mainnet',\n          };\n          break;\n        // No default\n      }\n    } catch (_) {\n      // empty\n    }\n    return Promise.resolve(safeVersionedData);\n  },\n};\n","/*\n\nThis migration sets transactions as failed\nwhos nonce is too high\n\n*/\n\nimport { cloneDeep } from 'lodash';\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\n\nconst version = 19;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n\n    newState.TransactionController.transactions = transactions.map(\n      (txMeta, _, txList) => {\n        if (txMeta.status !== TRANSACTION_STATUSES.SUBMITTED) {\n          return txMeta;\n        }\n\n        const confirmedTxs = txList\n          .filter((tx) => tx.status === TRANSACTION_STATUSES.CONFIRMED)\n          .filter((tx) => tx.txParams.from === txMeta.txParams.from)\n          .filter(\n            (tx) => tx.metamaskNetworkId.from === txMeta.metamaskNetworkId.from,\n          );\n        const highestConfirmedNonce = getHighestNonce(confirmedTxs);\n\n        const pendingTxs = txList\n          .filter((tx) => tx.status === TRANSACTION_STATUSES.SUBMITTED)\n          .filter((tx) => tx.txParams.from === txMeta.txParams.from)\n          .filter(\n            (tx) => tx.metamaskNetworkId.from === txMeta.metamaskNetworkId.from,\n          );\n        const highestContinuousNonce = getHighestContinuousFrom(\n          pendingTxs,\n          highestConfirmedNonce,\n        );\n\n        const maxNonce = Math.max(\n          highestContinuousNonce,\n          highestConfirmedNonce,\n        );\n\n        if (parseInt(txMeta.txParams.nonce, 16) > maxNonce + 1) {\n          txMeta.status = TRANSACTION_STATUSES.FAILED;\n          txMeta.err = {\n            message: 'nonce too high',\n            note: 'migration 019 custom error',\n          };\n        }\n        return txMeta;\n      },\n    );\n  }\n  return newState;\n}\n\nfunction getHighestContinuousFrom(txList, startPoint) {\n  const nonces = txList.map((txMeta) => {\n    const { nonce } = txMeta.txParams;\n    return parseInt(nonce, 16);\n  });\n\n  let highest = startPoint;\n  while (nonces.includes(highest)) {\n    highest += 1;\n  }\n\n  return highest;\n}\n\nfunction getHighestNonce(txList) {\n  const nonces = txList.map((txMeta) => {\n    const { nonce } = txMeta.txParams;\n    return parseInt(nonce || '0x0', 16);\n  });\n  const highestNonce = Math.max.apply(null, nonces);\n  return highestNonce;\n}\n","/*\n\nThis migration removes transactions that are no longer usefull down to 40 total\n\n*/\n\nimport { cloneDeep } from 'lodash';\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\n\nconst version = 23;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n\n    if (transactions.length <= 40) {\n      return newState;\n    }\n\n    const reverseTxList = transactions.reverse();\n    let stripping = true;\n    while (reverseTxList.length > 40 && stripping) {\n      const txIndex = reverseTxList.findIndex((txMeta) => {\n        return (\n          txMeta.status === TRANSACTION_STATUSES.FAILED ||\n          txMeta.status === TRANSACTION_STATUSES.REJECTED ||\n          txMeta.status === TRANSACTION_STATUSES.CONFIRMED ||\n          txMeta.status === TRANSACTION_STATUSES.DROPPED\n        );\n      });\n      if (txIndex < 0) {\n        stripping = false;\n      } else {\n        reverseTxList.splice(txIndex, 1);\n      }\n    }\n\n    newState.TransactionController.transactions = reverseTxList.reverse();\n  }\n  return newState;\n}\n","/*\n\nThis migration removes the discaimer state from our app, which was integrated into our notices.\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 11;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  delete newState.TOSHash;\n  delete newState.isDisclaimerConfirmed;\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 45;\n\n/**\n * Replaces {@code PreferencesController.ipfsGateway} with 'dweb.link' if set\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nconst outdatedGateways = ['ipfs.io', 'ipfs.dweb.link'];\n\nfunction transformState(state) {\n  if (outdatedGateways.includes(state?.PreferencesController?.ipfsGateway)) {\n    state.PreferencesController.ipfsGateway = 'dweb.link';\n  }\n  return state;\n}\n","/*\n\nThis migration sets transactions who were retried and marked as failed to submitted\n\n*/\n\nimport { cloneDeep } from 'lodash';\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\n\nconst version = 17;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      if (!txMeta.status === TRANSACTION_STATUSES.FAILED) {\n        return txMeta;\n      }\n      if (txMeta.retryCount > 0 && txMeta.retryCount < 2) {\n        txMeta.status = TRANSACTION_STATUSES.SUBMITTED;\n        delete txMeta.err;\n      }\n      return txMeta;\n    });\n  }\n  return newState;\n}\n","/*\n\nThis migration removes provider from config and moves it too NetworkController.\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 14;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  newState.NetworkController = {};\n  newState.NetworkController.provider = newState.config.provider;\n  delete newState.config.provider;\n  return newState;\n}\n","// next version number\nimport { cloneDeep } from 'lodash';\n\nconst version = 31;\n\n/*\n * The purpose of this migration is to properly set the completedOnboarding flag based on the state\n * of the KeyringController.\n */\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { KeyringController, PreferencesController } = state;\n\n  if (KeyringController && PreferencesController) {\n    const { vault } = KeyringController;\n    PreferencesController.completedOnboarding = Boolean(vault);\n  }\n\n  return state;\n}\n","// next version number\n/*\n\nCleans up notices and assocated notice controller code\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 33;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  // transform state here\n  if (state.NoticeController) {\n    delete newState.NoticeController;\n  }\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 34;\n\n/**\n * The purpose of this migration is to enable the {@code privacyMode} feature flag and set the user as being migrated\n * if it was {@code false}.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { PreferencesController } = state;\n\n  if (PreferencesController) {\n    const featureFlags = PreferencesController.featureFlags || {};\n\n    if (\n      !featureFlags.privacyMode &&\n      typeof PreferencesController.migratedPrivacyMode === 'undefined'\n    ) {\n      // Mark the state has being migrated and enable Privacy Mode\n      PreferencesController.migratedPrivacyMode = true;\n      featureFlags.privacyMode = true;\n    }\n  }\n\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 42;\n\n/**\n * Initialize `connectedStatusPopoverHasBeenShown` to `false` if it hasn't yet been set,\n * so that existing users are introduced to the new connected status indicator\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.AppStateController) {\n    state.AppStateController.connectedStatusPopoverHasBeenShown = false;\n  } else {\n    state.AppStateController = {\n      connectedStatusPopoverHasBeenShown: false,\n    };\n  }\n  return state;\n}\n","/*\n\nThis migration sets transactions with the 'Gave up submitting tx.' err message\nto a 'failed' stated\n\n*/\n\nimport { cloneDeep } from 'lodash';\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\n\nconst version = 15;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = TransactionController;\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      if (!txMeta.err) {\n        return txMeta;\n      } else if (txMeta.err.message === 'Gave up submitting tx.') {\n        txMeta.status = TRANSACTION_STATUSES.FAILED;\n      }\n      return txMeta;\n    });\n  }\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 40;\n\n/**\n * Site connections are now managed by the PermissionsController, and the\n * ProviderApprovalController is removed. This migration deletes all\n * ProviderApprovalController state.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  delete state.ProviderApprovalController;\n  return state;\n}\n","/*\n\nThis migration modifies our notices to delete their body after being read.\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 12;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  newState.NoticeController.noticesList.forEach((notice) => {\n    if (notice.read) {\n      notice.body = '';\n    }\n  });\n  return newState;\n}\n","// next version number\n/*\n\nnormalizes txParams on unconfirmed txs\n\n*/\nimport { cloneDeep } from 'lodash';\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\n\nconst version = 27;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n\n  if (newState.TransactionController) {\n    if (newState.TransactionController.transactions) {\n      const { transactions } = newState.TransactionController;\n      newState.TransactionController.transactions = transactions.filter(\n        (txMeta) => txMeta.status !== TRANSACTION_STATUSES.REJECTED,\n      );\n    }\n  }\n\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 32;\n\n/**\n * The purpose of this migration is to set the {@code completedUiMigration} flag based on the user's UI preferences\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { PreferencesController } = state;\n\n  if (PreferencesController) {\n    const { betaUI } = PreferencesController.featureFlags || {};\n    // Users who have been using the \"beta\" UI are considered to have completed the migration\n    // as they'll see no difference in this version\n    PreferencesController.completedUiMigration = betaUI;\n  }\n\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 41;\n\n/**\n * PreferencesController.autoLogoutTimeLimit -> autoLockTimeLimit\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.PreferencesController && state.PreferencesController.preferences) {\n    state.PreferencesController.preferences.autoLockTimeLimit =\n      state.PreferencesController.preferences.autoLogoutTimeLimit;\n    delete state.PreferencesController.preferences.autoLogoutTimeLimit;\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { toChecksumHexAddress } from '../../../shared/modules/hexstring-utils';\n\nconst version = 39;\n\nconst DAI_V1_CONTRACT_ADDRESS = '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359';\nconst DAI_V1_TOKEN_SYMBOL = 'DAI';\nconst SAI_TOKEN_SYMBOL = 'SAI';\n\nfunction isOldDai(token = {}) {\n  return (\n    token &&\n    typeof token === 'object' &&\n    token.symbol === DAI_V1_TOKEN_SYMBOL &&\n    toChecksumHexAddress(token.address) === DAI_V1_CONTRACT_ADDRESS\n  );\n}\n\n/**\n * This migration renames the Dai token to Sai.\n *\n * As of 2019-11-18 Dai is now called Sai (refs https://git.io/JeooP) to facilitate\n * Maker's upgrade to Multi-Collateral Dai and this migration renames the token\n * at the old address.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { PreferencesController } = state;\n\n  if (PreferencesController) {\n    const tokens = PreferencesController.tokens || [];\n    if (Array.isArray(tokens)) {\n      for (const token of tokens) {\n        if (isOldDai(token)) {\n          token.symbol = SAI_TOKEN_SYMBOL;\n        }\n      }\n    }\n\n    const accountTokens = PreferencesController.accountTokens || {};\n    if (accountTokens && typeof accountTokens === 'object') {\n      for (const address of Object.keys(accountTokens)) {\n        const networkTokens = accountTokens[address];\n        if (networkTokens && typeof networkTokens === 'object') {\n          for (const network of Object.keys(networkTokens)) {\n            const tokensOnNetwork = networkTokens[network];\n            if (Array.isArray(tokensOnNetwork)) {\n              for (const token of tokensOnNetwork) {\n                if (isOldDai(token)) {\n                  token.symbol = SAI_TOKEN_SYMBOL;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { NETWORK_TYPE_TO_ID_MAP } from '../../../shared/constants/network';\n\nconst version = 51;\n\n/**\n * Set the chainId in the Network Controller provider data for all infura networks\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { chainId, type } = state?.NetworkController?.provider || {};\n  const enumChainId = NETWORK_TYPE_TO_ID_MAP[type]?.chainId;\n\n  if (enumChainId && chainId !== enumChainId) {\n    state.NetworkController.provider.chainId = enumChainId;\n  }\n  return state;\n}\n","/*\n\nThis migration ensures that the from address in txParams is to lower case for\nall unapproved transactions\n\n*/\n\nimport { cloneDeep } from 'lodash';\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\n\nconst version = 24;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  if (!newState.TransactionController) {\n    return newState;\n  }\n  const { transactions } = newState.TransactionController;\n  newState.TransactionController.transactions = transactions.map(\n    (txMeta, _) => {\n      if (\n        txMeta.status === TRANSACTION_STATUSES.UNAPPROVED &&\n        txMeta.txParams &&\n        txMeta.txParams.from\n      ) {\n        txMeta.txParams.from = txMeta.txParams.from.toLowerCase();\n      }\n      return txMeta;\n    },\n  );\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 56;\n\n/**\n * Remove tokens that don't have an address due to\n * lack of previous addToken validation.  Also removes\n * an unwanted, undefined image property\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n\n    const { PreferencesController } = versionedData.data;\n\n    if (Array.isArray(PreferencesController?.tokens)) {\n      PreferencesController.tokens = PreferencesController.tokens.filter(\n        ({ address }) => address,\n      );\n    }\n\n    if (\n      PreferencesController?.accountTokens &&\n      typeof PreferencesController.accountTokens === 'object'\n    ) {\n      Object.keys(PreferencesController.accountTokens).forEach((account) => {\n        const chains = Object.keys(\n          PreferencesController.accountTokens[account],\n        );\n        chains.forEach((chain) => {\n          PreferencesController.accountTokens[account][\n            chain\n          ] = PreferencesController.accountTokens[account][chain].filter(\n            ({ address }) => address,\n          );\n        });\n      });\n    }\n\n    if (\n      PreferencesController?.assetImages &&\n      'undefined' in PreferencesController.assetImages\n    ) {\n      delete PreferencesController.assetImages.undefined;\n    }\n\n    return versionedData;\n  },\n};\n","import { cloneDeep } from 'lodash';\n\nconst version = 62;\n\n/**\n * Removes metaMetricsSendCount from MetaMetrics controller\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.MetaMetricsController) {\n    const { metaMetricsSendCount } = state.MetaMetricsController;\n    if (metaMetricsSendCount !== undefined) {\n      delete state.MetaMetricsController.metaMetricsSendCount;\n    }\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 46;\n\n/**\n * Delete {@code ABTestController} state\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (typeof state?.ABTestController !== 'undefined') {\n    delete state.ABTestController;\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 61;\n\n/**\n * Initialize attributes related to recovery seed phrase reminder\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const currentTime = new Date().getTime();\n  if (state.AppStateController) {\n    state.AppStateController.recoveryPhraseReminderHasBeenShown = false;\n    state.AppStateController.recoveryPhraseReminderLastShown = currentTime;\n  } else {\n    state.AppStateController = {\n      recoveryPhraseReminderHasBeenShown: false,\n      recoveryPhraseReminderLastShown: currentTime,\n    };\n  }\n  return state;\n}\n","// next version number\n/*\n\nRemoves the deprecated 'seedWords' state\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 35;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    versionedData.data = transformState(versionedData.data);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (\n    state.PreferencesController &&\n    state.PreferencesController.seedWords !== undefined\n  ) {\n    delete state.PreferencesController.seedWords;\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 47;\n\n/**\n * Stringify the `metamaskNetworkId` property of all transactions\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const transactions = state?.TransactionController?.transactions;\n  if (Array.isArray(transactions)) {\n    transactions.forEach((transaction) => {\n      if (typeof transaction.metamaskNetworkId === 'number') {\n        transaction.metamaskNetworkId = transaction.metamaskNetworkId.toString();\n      }\n    });\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 58;\n\n/**\n * Deletes the swapsWelcomeMessageHasBeenShown property from state\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  delete state.AppStateController?.swapsWelcomeMessageHasBeenShown;\n\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 65;\n\n/**\n * Removes metaMetricsSendCount from MetaMetrics controller\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.PreferencesController) {\n    const {\n      completedOnboarding,\n      firstTimeFlowType,\n    } = state.PreferencesController;\n    state.OnboardingController = state.OnboardingController ?? {};\n\n    if (completedOnboarding !== undefined) {\n      state.OnboardingController.completedOnboarding = completedOnboarding;\n      delete state.PreferencesController.completedOnboarding;\n    }\n    if (firstTimeFlowType !== undefined) {\n      state.OnboardingController.firstTimeFlowType = firstTimeFlowType;\n      delete state.PreferencesController.firstTimeFlowType;\n    }\n  }\n\n  return state;\n}\n","/*\n\nThis migration removes the BlackListController from disk state\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 21;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  delete newState.BlacklistController;\n  delete newState.RecentBlocks;\n  return newState;\n}\n","/*\n\nThis migration moves the identities stored in the KeyringController\n into the PreferencesController\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 26;\n\nexport default {\n  version,\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      versionedData.data = transformState(state);\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n      return Promise.reject(err);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  if (!state.KeyringController || !state.PreferencesController) {\n    return state;\n  }\n\n  if (!state.KeyringController.walletNicknames) {\n    return state;\n  }\n\n  state.PreferencesController.identities = Object.keys(\n    state.KeyringController.walletNicknames,\n  ).reduce((identities, address) => {\n    identities[address] = {\n      name: state.KeyringController.walletNicknames[address],\n      address,\n    };\n    return identities;\n  }, {});\n  delete state.KeyringController.walletNicknames;\n  return state;\n}\n","/*\n\nThis migration adds submittedTime to the txMeta if it is not their\n\n*/\n\nimport { cloneDeep } from 'lodash';\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\n\nconst version = 22;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      if (\n        txMeta.status !== TRANSACTION_STATUSES.SUBMITTED ||\n        txMeta.submittedTime\n      ) {\n        return txMeta;\n      }\n      txMeta.submittedTime = new Date().getTime();\n      return txMeta;\n    });\n  }\n  return newState;\n}\n","import { cloneDeep, isPlainObject } from 'lodash';\nimport { TRANSACTION_TYPES } from '../../../shared/constants/transaction';\n\nconst version = 64;\n\nconst SENT_ETHER = 'sentEther'; // the legacy transaction type being replaced in this migration with TRANSACTION_TYPES.SIMPLE_SEND\n\n/**\n * Removes metaMetricsSendCount from MetaMetrics controller\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const transactions = state?.TransactionController?.transactions;\n  if (isPlainObject(transactions)) {\n    for (const tx of Object.values(transactions)) {\n      if (tx.type === SENT_ETHER) {\n        tx.type = TRANSACTION_TYPES.SIMPLE_SEND;\n      }\n      if (tx.history) {\n        tx.history.map((txEvent) => {\n          if (txEvent.type && txEvent.type === SENT_ETHER) {\n            txEvent.type = TRANSACTION_TYPES.SIMPLE_SEND;\n          }\n          return txEvent;\n        });\n      }\n    }\n  }\n  return state;\n}\n","/*\n\nThis migration breaks out the ShapeShiftController substate\n\n*/\n\nimport { cloneDeep, merge } from 'lodash';\n\nconst version = 10;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = merge({}, state, {\n    ShapeShiftController: {\n      shapeShiftTxList: state.shapeShiftTxList || [],\n    },\n  });\n  delete newState.shapeShiftTxList;\n\n  return newState;\n}\n","/*\n\nThis migration ensures previous installations\nget a `firstTimeInfo` key on the metamask state,\nso that we can version notices in the future.\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 20;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  if ('metamask' in newState && !('firstTimeInfo' in newState.metamask)) {\n    newState.metamask.firstTimeInfo = {\n      version: '3.12.0',\n      date: Date.now(),\n    };\n  }\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 36;\n\n/**\n * The purpose of this migration is to remove the {@code privacyMode} feature flag.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { PreferencesController } = state;\n\n  if (PreferencesController) {\n    const featureFlags = PreferencesController.featureFlags || {};\n\n    if (typeof featureFlags.privacyMode !== 'undefined') {\n      delete featureFlags.privacyMode;\n    }\n  }\n\n  return state;\n}\n","import { cloneDeep, mapKeys } from 'lodash';\nimport { NETWORK_TYPE_TO_ID_MAP } from '../../../shared/constants/network';\n\nconst version = 55;\n\n/**\n * replace 'incomingTxLastFetchedBlocksByNetwork' with 'incomingTxLastFetchedBlockByChainId'\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nconst UNKNOWN_CHAIN_ID_KEY = 'UNKNOWN';\n\nfunction transformState(state) {\n  if (\n    state?.IncomingTransactionsController?.incomingTxLastFetchedBlocksByNetwork\n  ) {\n    state.IncomingTransactionsController.incomingTxLastFetchedBlockByChainId = mapKeys(\n      state.IncomingTransactionsController.incomingTxLastFetchedBlocksByNetwork,\n      // using optional chaining in case user's state has fetched blocks for\n      // RPC network types (which don't map to a single chainId). This should\n      // not be possible, but it's safer\n      (_, key) => NETWORK_TYPE_TO_ID_MAP[key]?.chainId ?? UNKNOWN_CHAIN_ID_KEY,\n    );\n    // Now that mainnet and test net last fetched blocks are keyed by their\n    // respective chainIds, we can safely delete anything we had for custom\n    // networks. Any custom network that shares a chainId with one of the\n    // aforementioned networks will use the value stored by chainId.\n    delete state.IncomingTransactionsController\n      .incomingTxLastFetchedBlockByChainId[UNKNOWN_CHAIN_ID_KEY];\n    delete state.IncomingTransactionsController\n      .incomingTxLastFetchedBlocksByNetwork;\n  }\n  return state;\n}\n","import {\n  cloneDeep,\n  concat,\n  groupBy,\n  keyBy,\n  pickBy,\n  isPlainObject,\n} from 'lodash';\nimport { TRANSACTION_TYPES } from '../../../shared/constants/transaction';\n\nconst version = 59;\n\n/**\n * Removes orphaned cancel and retry transactions that no longer have the\n * original transaction in state, which results in bugs.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const transactions = state?.TransactionController?.transactions;\n  if (isPlainObject(transactions)) {\n    const nonceNetworkGroupedObject = groupBy(\n      Object.values(transactions),\n      (tx) => {\n        return `${tx.txParams?.nonce}-${tx.chainId ?? tx.metamaskNetworkId}`;\n      },\n    );\n\n    const withoutOrphans = pickBy(nonceNetworkGroupedObject, (group) => {\n      return group.some(\n        (tx) =>\n          tx.type !== TRANSACTION_TYPES.CANCEL &&\n          tx.type !== TRANSACTION_TYPES.RETRY,\n      );\n    });\n    state.TransactionController.transactions = keyBy(\n      concat(...Object.values(withoutOrphans)),\n      (tx) => tx.id,\n    );\n  }\n\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { SUBJECT_TYPES } from '../../../shared/constants/app';\n\nconst version = 69;\n\n/**\n * Adds the `subjectType` property to all subject metadata.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (typeof state?.SubjectMetadataController?.subjectMetadata === 'object') {\n    const {\n      SubjectMetadataController: { subjectMetadata },\n    } = state;\n\n    // mutate SubjectMetadataController.subjectMetadata in place\n    Object.values(subjectMetadata).forEach((metadata) => {\n      if (\n        metadata &&\n        typeof metadata === 'object' &&\n        !Array.isArray(metadata)\n      ) {\n        metadata.subjectType = metadata.extensionId\n          ? SUBJECT_TYPES.EXTENSION\n          : SUBJECT_TYPES.WEBSITE;\n      }\n    });\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 44;\n\n/**\n * Remove unused 'mkrMigrationReminderTimestamp' state from the `AppStateController`\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (\n    typeof state?.AppStateController?.mkrMigrationReminderTimestamp !==\n    'undefined'\n  ) {\n    delete state.AppStateController.mkrMigrationReminderTimestamp;\n  }\n  return state;\n}\n","// next version number\n/*\n\nremoves invalid chaids from preferences and networkController for custom rpcs\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 30;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  if (state.PreferencesController) {\n    const { frequentRpcListDetail } = newState.PreferencesController;\n    if (frequentRpcListDetail) {\n      frequentRpcListDetail.forEach((rpc, index) => {\n        // eslint-disable-next-line radix\n        if (Boolean(rpc.chainId) && Number.isNaN(parseInt(rpc.chainId))) {\n          delete frequentRpcListDetail[index].chainId;\n        }\n      });\n      newState.PreferencesController.frequentRpcListDetail = frequentRpcListDetail;\n    }\n  }\n  if (state.NetworkController) {\n    if (\n      newState.NetworkController.network &&\n      // eslint-disable-next-line radix\n      Number.isNaN(parseInt(newState.NetworkController.network))\n    ) {\n      delete newState.NetworkController.network;\n    }\n\n    if (\n      newState.NetworkController.provider &&\n      newState.NetworkController.provider.chainId &&\n      // eslint-disable-next-line radix\n      Number.isNaN(parseInt(newState.NetworkController.provider.chainId))\n    ) {\n      delete newState.NetworkController.provider.chainId;\n    }\n  }\n\n  return newState;\n}\n","// next version number\n/*\n\nnormalizes txParams on unconfirmed txs\n\n*/\nimport { cloneDeep } from 'lodash';\n\nconst version = 28;\n\nexport default {\n  version,\n\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n\n  if (newState.PreferencesController) {\n    if (\n      newState.PreferencesController.tokens &&\n      newState.PreferencesController.identities\n    ) {\n      const { identities, tokens } = newState.PreferencesController;\n      newState.PreferencesController.accountTokens = {};\n      Object.keys(identities).forEach((identity) => {\n        newState.PreferencesController.accountTokens[identity] = {\n          mainnet: tokens,\n        };\n      });\n      newState.PreferencesController.tokens = [];\n    }\n  }\n\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 43;\n\n/**\n * Remove unused 'currentAccountTab' state\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state?.PreferencesController?.currentAccountTab) {\n    delete state.PreferencesController.currentAccountTab;\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 50;\n\nconst LEGACY_LOCAL_STORAGE_KEYS = [\n  'METASWAP_GAS_PRICE_ESTIMATES_LAST_RETRIEVED',\n  'METASWAP_GAS_PRICE_ESTIMATES',\n  'cachedFetch',\n  'BASIC_PRICE_ESTIMATES_LAST_RETRIEVED',\n  'BASIC_PRICE_ESTIMATES',\n  'BASIC_GAS_AND_TIME_API_ESTIMATES',\n  'BASIC_GAS_AND_TIME_API_ESTIMATES_LAST_RETRIEVED',\n  'GAS_API_ESTIMATES_LAST_RETRIEVED',\n  'GAS_API_ESTIMATES',\n];\n\n/**\n * Migrate metaMetrics state to the new MetaMetrics controller\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n\n    LEGACY_LOCAL_STORAGE_KEYS.forEach((key) =>\n      window.localStorage?.removeItem(key),\n    );\n\n    return versionedData;\n  },\n};\n","import { cloneDeep } from 'lodash';\n\nconst version = 49;\n\n/**\n * Migrate metaMetrics state to the new MetaMetrics controller\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state = {}) {\n  if (state.PreferencesController) {\n    const {\n      metaMetricsId,\n      participateInMetaMetrics,\n      metaMetricsSendCount,\n    } = state.PreferencesController;\n    state.MetaMetricsController = state.MetaMetricsController ?? {};\n\n    if (metaMetricsId !== undefined) {\n      state.MetaMetricsController.metaMetricsId = metaMetricsId;\n      delete state.PreferencesController.metaMetricsId;\n    }\n\n    if (participateInMetaMetrics !== undefined) {\n      state.MetaMetricsController.participateInMetaMetrics = participateInMetaMetrics;\n      delete state.PreferencesController.participateInMetaMetrics;\n    }\n\n    if (metaMetricsSendCount !== undefined) {\n      state.MetaMetricsController.metaMetricsSendCount = metaMetricsSendCount;\n      delete state.PreferencesController.metaMetricsSendCount;\n    }\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport {\n  GOERLI,\n  GOERLI_CHAIN_ID,\n  KOVAN,\n  KOVAN_CHAIN_ID,\n  MAINNET,\n  MAINNET_CHAIN_ID,\n  NETWORK_TYPE_RPC,\n  RINKEBY,\n  RINKEBY_CHAIN_ID,\n  ROPSTEN,\n  ROPSTEN_CHAIN_ID,\n} from '../../../shared/constants/network';\n\nconst version = 52;\n\n/**\n * Migrate tokens in Preferences to be keyed by chainId instead of\n * providerType. To prevent breaking user's MetaMask and selected\n * tokens, this migration copies the RPC entry into *every* custom RPC\n * chainId.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state = {}) {\n  if (state.PreferencesController) {\n    const {\n      accountTokens,\n      accountHiddenTokens,\n      frequentRpcListDetail,\n    } = state.PreferencesController;\n\n    const newAccountTokens = {};\n    const newAccountHiddenTokens = {};\n\n    if (accountTokens && Object.keys(accountTokens).length > 0) {\n      for (const address of Object.keys(accountTokens)) {\n        newAccountTokens[address] = {};\n        if (accountTokens[address][NETWORK_TYPE_RPC]) {\n          frequentRpcListDetail.forEach((detail) => {\n            newAccountTokens[address][detail.chainId] =\n              accountTokens[address][NETWORK_TYPE_RPC];\n          });\n        }\n        for (const providerType of Object.keys(accountTokens[address])) {\n          switch (providerType) {\n            case MAINNET:\n              newAccountTokens[address][MAINNET_CHAIN_ID] =\n                accountTokens[address][MAINNET];\n              break;\n            case ROPSTEN:\n              newAccountTokens[address][ROPSTEN_CHAIN_ID] =\n                accountTokens[address][ROPSTEN];\n              break;\n            case RINKEBY:\n              newAccountTokens[address][RINKEBY_CHAIN_ID] =\n                accountTokens[address][RINKEBY];\n              break;\n            case GOERLI:\n              newAccountTokens[address][GOERLI_CHAIN_ID] =\n                accountTokens[address][GOERLI];\n              break;\n            case KOVAN:\n              newAccountTokens[address][KOVAN_CHAIN_ID] =\n                accountTokens[address][KOVAN];\n              break;\n            default:\n              break;\n          }\n        }\n      }\n      state.PreferencesController.accountTokens = newAccountTokens;\n    }\n\n    if (accountHiddenTokens && Object.keys(accountHiddenTokens).length > 0) {\n      for (const address of Object.keys(accountHiddenTokens)) {\n        newAccountHiddenTokens[address] = {};\n        if (accountHiddenTokens[address][NETWORK_TYPE_RPC]) {\n          frequentRpcListDetail.forEach((detail) => {\n            newAccountHiddenTokens[address][detail.chainId] =\n              accountHiddenTokens[address][NETWORK_TYPE_RPC];\n          });\n        }\n        for (const providerType of Object.keys(accountHiddenTokens[address])) {\n          switch (providerType) {\n            case MAINNET:\n              newAccountHiddenTokens[address][MAINNET_CHAIN_ID] =\n                accountHiddenTokens[address][MAINNET];\n              break;\n            case ROPSTEN:\n              newAccountHiddenTokens[address][ROPSTEN_CHAIN_ID] =\n                accountHiddenTokens[address][ROPSTEN];\n              break;\n            case RINKEBY:\n              newAccountHiddenTokens[address][RINKEBY_CHAIN_ID] =\n                accountHiddenTokens[address][RINKEBY];\n              break;\n            case GOERLI:\n              newAccountHiddenTokens[address][GOERLI_CHAIN_ID] =\n                accountHiddenTokens[address][GOERLI];\n              break;\n            case KOVAN:\n              newAccountHiddenTokens[address][KOVAN_CHAIN_ID] =\n                accountHiddenTokens[address][KOVAN];\n              break;\n            default:\n              break;\n          }\n        }\n      }\n      state.PreferencesController.accountHiddenTokens = newAccountHiddenTokens;\n    }\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 54;\n\nfunction isValidDecimals(decimals) {\n  return (\n    typeof decimals === 'number' ||\n    (typeof decimals === 'string' && decimals.match(/^(0x)?\\d+$/u))\n  );\n}\n\n/**\n * Migrates preference tokens with decimals typed as string to number.\n * It also removes any tokens with corrupted or inconvertible decimal values.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n\n  if (!newState.PreferencesController) {\n    return newState;\n  }\n\n  const tokens = newState.PreferencesController.tokens || [];\n  // Filter out any tokens with corrupted decimal values\n  const validTokens = tokens.filter(({ decimals }) =>\n    isValidDecimals(decimals),\n  );\n  for (const token of validTokens) {\n    // In the case of a decimal value type string, convert to a number.\n    if (typeof token.decimals === 'string') {\n      // eslint-disable-next-line radix\n      token.decimals = parseInt(token.decimals);\n    }\n  }\n  newState.PreferencesController.tokens = validTokens;\n\n  const { accountTokens } = newState.PreferencesController;\n  if (accountTokens && typeof accountTokens === 'object') {\n    for (const address of Object.keys(accountTokens)) {\n      const networkTokens = accountTokens[address];\n      if (networkTokens && typeof networkTokens === 'object') {\n        for (const network of Object.keys(networkTokens)) {\n          const tokensOnNetwork = networkTokens[network] || [];\n          // Filter out any tokens with corrupted decimal values\n          const validTokensOnNetwork = tokensOnNetwork.filter(({ decimals }) =>\n            isValidDecimals(decimals),\n          );\n          // In the case of a decimal value type string, convert to a number.\n          for (const token of validTokensOnNetwork) {\n            if (typeof token.decimals === 'string') {\n              // eslint-disable-next-line radix\n              token.decimals = parseInt(token.decimals);\n            }\n          }\n          networkTokens[network] = validTokensOnNetwork;\n        }\n      }\n    }\n  }\n  newState.PreferencesController.accountTokens = accountTokens;\n\n  return newState;\n}\n","import { cloneDeep, isPlainObject } from 'lodash';\n\nconst version = 60;\nconst SUPPORT_NOTIFICATION_KEY = 2;\nconst SUPPORT_NOTIFICATION_DATE = '2020-08-31';\n\n/**\n * Removes the support survey notification\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const notifications = state?.NotificationController?.notifications;\n  if (isPlainObject(notifications)) {\n    if (\n      notifications[SUPPORT_NOTIFICATION_KEY]?.date ===\n      SUPPORT_NOTIFICATION_DATE\n    ) {\n      delete state.NotificationController.notifications[\n        SUPPORT_NOTIFICATION_KEY\n      ];\n    }\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { util } from '@metamask/controllers';\n\nconst version = 37;\n\n/**\n * The purpose of this migration is to update the address book state\n * to the new schema with chainId as a key.\n * and to add the isEns flag to all entries\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (state.AddressBookController) {\n    const ab = state.AddressBookController.addressBook;\n\n    const chainIds = new Set();\n    const newAddressBook = {};\n\n    // add all of the chainIds to a set\n    Object.values(ab).forEach((v) => {\n      chainIds.add(v.chainId);\n    });\n\n    // fill the chainId object with the entries with the matching chainId\n    for (const id of chainIds.values()) {\n      // make an empty object entry for each chainId\n      newAddressBook[id] = {};\n      for (const address in ab) {\n        if (ab[address].chainId === id) {\n          ab[address].isEns = false;\n          if (util.normalizeEnsName(ab[address].name)) {\n            ab[address].isEns = true;\n          }\n          newAddressBook[id][address] = ab[address];\n        }\n      }\n    }\n\n    state.AddressBookController.addressBook = newAddressBook;\n  }\n\n  return state;\n}\n","/*\n\nThis migration breaks out the NoticeController substate\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 8;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = {\n    ...state,\n    NoticeController: {\n      noticesList: state.noticesList || [],\n    },\n  };\n  delete newState.noticesList;\n\n  return newState;\n}\n","/*\n\nThis migration moves KeyringController.selectedAddress to PreferencesController.selectedAddress\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 6;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = migrateState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction migrateState(state) {\n  const keyringSubstate = state.KeyringController;\n\n  // add new state\n  const newState = {\n    ...state,\n    PreferencesController: {\n      selectedAddress: keyringSubstate.selectedAccount,\n    },\n  };\n\n  // rm old state\n  delete newState.KeyringController.selectedAccount;\n\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 38;\n\n/**\n * The purpose of this migration is to assign all users to a test group for the fullScreenVsPopup a/b test\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const { ABTestController: ABTestControllerState = {} } = state;\n  const { abTests = {} } = ABTestControllerState;\n\n  if (abTests.fullScreenVsPopup) {\n    return state;\n  }\n\n  return {\n    ...state,\n    ABTestController: {\n      ...ABTestControllerState,\n      abTests: {\n        ...abTests,\n        fullScreenVsPopup: 'control',\n      },\n    },\n  };\n}\n","/*\n\nThis migration moves state from the flat state trie into KeyringController substate\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 5;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = selectSubstateForKeyringController(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #5${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction selectSubstateForKeyringController(state) {\n  const { config } = state;\n  const newState = {\n    ...state,\n    KeyringController: {\n      vault: state.vault,\n      selectedAccount: config.selectedAccount,\n      walletNicknames: state.walletNicknames,\n    },\n  };\n  delete newState.vault;\n  delete newState.walletNicknames;\n  delete newState.config.selectedAccount;\n\n  return newState;\n}\n","// next version number\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\nimport failTxsThat from './fail-tx';\n\nconst version = 29;\n\n// time\nconst seconds = 1000;\nconst minutes = 60 * seconds;\nconst hours = 60 * minutes;\nconst unacceptableDelay = 12 * hours;\n\n/*\n\nnormalizes txParams on unconfirmed txs\n\n*/\n\nexport default {\n  version,\n\n  migrate: failTxsThat(\n    version,\n    'Stuck in approved state for too long.',\n    (txMeta) => {\n      const isApproved = txMeta.status === TRANSACTION_STATUSES.APPROVED;\n      const createdTime = txMeta.submittedTime;\n      const now = Date.now();\n      return isApproved && now - createdTime > unacceptableDelay;\n    },\n  ),\n};\n","/*\n\nThis migration breaks out the TransactionManager substate\n\n*/\n\nimport { cloneDeep } from 'lodash';\n\nconst version = 7;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = {\n    ...state,\n    TransactionManager: {\n      transactions: state.transactions || [],\n      gasMultiplier: state.gasMultiplier || 1,\n    },\n  };\n  delete newState.transactions;\n  delete newState.gasMultiplier;\n\n  return newState;\n}\n","import { cloneDeep } from 'lodash';\nimport { TRANSACTION_TYPES } from '../../../shared/constants/transaction';\n\nconst version = 53;\n\n/**\n * Deprecate transactionCategory and consolidate on 'type'\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const transactions = state?.TransactionController?.transactions;\n  const incomingTransactions =\n    state?.IncomingTransactionsController?.incomingTransactions;\n  if (Array.isArray(transactions)) {\n    transactions.forEach((transaction) => {\n      if (transaction) {\n        if (\n          transaction.type !== TRANSACTION_TYPES.RETRY &&\n          transaction.type !== TRANSACTION_TYPES.CANCEL\n        ) {\n          transaction.type = transaction.transactionCategory;\n        }\n        delete transaction.transactionCategory;\n      }\n    });\n  }\n  if (incomingTransactions) {\n    const incomingTransactionsEntries = Object.entries(incomingTransactions);\n    incomingTransactionsEntries.forEach(([key, transaction]) => {\n      if (transaction) {\n        delete transaction.transactionCategory;\n        state.IncomingTransactionsController.incomingTransactions[key] = {\n          ...transaction,\n          type: TRANSACTION_TYPES.INCOMING,\n        };\n      }\n    });\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 48;\n\n/**\n * 1.  Delete NetworkController.settings\n * 2a. Migrate NetworkController.provider to Rinkeby if set to type 'rpc' or\n *     'localhost'.\n * 2b. Re-key provider.rpcTarget to provider.rpcUrl\n * 3.  Add localhost network to frequentRpcListDetail.\n * 4.  Delete CachedBalancesController.cachedBalances\n * 5.  Convert transactions metamaskNetworkId to decimal if they are hex\n * 6.  Convert address book keys from decimal to hex\n * 7.  Delete localhost key in IncomingTransactionsController\n * 8.  Merge 'localhost' tokens into 'rpc' tokens\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nconst hexRegEx = /^0x[0-9a-f]+$/iu;\nconst chainIdRegEx = /^0x[1-9a-f]+[0-9a-f]*$/iu;\n\nfunction transformState(state = {}) {\n  // 1. Delete NetworkController.settings\n  delete state.NetworkController?.settings;\n\n  // 2. Migrate NetworkController.provider to Rinkeby or rename rpcTarget key\n  const provider = state.NetworkController?.provider || {};\n  const isCustomRpcWithInvalidChainId =\n    provider.type === 'rpc' &&\n    (typeof provider.chainId !== 'string' ||\n      !chainIdRegEx.test(provider.chainId));\n  if (isCustomRpcWithInvalidChainId || provider.type === 'localhost') {\n    state.NetworkController.provider = {\n      type: 'rinkeby',\n      rpcUrl: '',\n      chainId: '0x4',\n      nickname: '',\n      rpcPrefs: {},\n      ticker: 'ETH',\n    };\n  } else if (state.NetworkController?.provider) {\n    if ('rpcTarget' in state.NetworkController.provider) {\n      const rpcUrl = state.NetworkController.provider.rpcTarget;\n      state.NetworkController.provider.rpcUrl = rpcUrl;\n    }\n    delete state.NetworkController?.provider?.rpcTarget;\n  }\n\n  // 3.  Add localhost network to frequentRpcListDetail.\n  if (!state.PreferencesController) {\n    state.PreferencesController = {};\n  }\n  if (!state.PreferencesController.frequentRpcListDetail) {\n    state.PreferencesController.frequentRpcListDetail = [];\n  }\n  state.PreferencesController.frequentRpcListDetail.unshift({\n    rpcUrl: 'http://localhost:8545',\n    chainId: '0x539',\n    ticker: 'ETH',\n    nickname: 'Localhost 8545',\n    rpcPrefs: {},\n  });\n\n  // 4.  Delete CachedBalancesController.cachedBalances\n  delete state.CachedBalancesController?.cachedBalances;\n\n  // 5.  Convert transactions metamaskNetworkId to decimal if they are hex\n  const transactions = state.TransactionController?.transactions;\n  if (Array.isArray(transactions)) {\n    transactions.forEach((transaction) => {\n      const metamaskNetworkId = transaction?.metamaskNetworkId;\n      if (\n        typeof metamaskNetworkId === 'string' &&\n        hexRegEx.test(metamaskNetworkId)\n      ) {\n        transaction.metamaskNetworkId = parseInt(\n          metamaskNetworkId,\n          16,\n        ).toString(10);\n      }\n    });\n  }\n\n  // 6.  Convert address book keys from decimal to hex\n  const addressBook = state.AddressBookController?.addressBook || {};\n  Object.keys(addressBook).forEach((networkKey) => {\n    if (/^\\d+$/iu.test(networkKey)) {\n      const chainId = `0x${parseInt(networkKey, 10).toString(16)}`;\n      updateChainIds(addressBook[networkKey], chainId);\n\n      if (addressBook[chainId]) {\n        mergeAddressBookKeys(addressBook, networkKey, chainId);\n      } else {\n        addressBook[chainId] = addressBook[networkKey];\n      }\n      delete addressBook[networkKey];\n    }\n  });\n\n  // 7.  Delete localhost key in IncomingTransactionsController\n  delete state.IncomingTransactionsController\n    ?.incomingTxLastFetchedBlocksByNetwork?.localhost;\n\n  // 8.  Merge 'localhost' tokens into 'rpc' tokens\n  const accountTokens = state.PreferencesController?.accountTokens;\n  if (accountTokens) {\n    Object.keys(accountTokens).forEach((account) => {\n      const localhostTokens = accountTokens[account]?.localhost || [];\n\n      if (localhostTokens.length > 0) {\n        const rpcTokens = accountTokens[account].rpc || [];\n\n        if (rpcTokens.length > 0) {\n          accountTokens[account].rpc = mergeTokenArrays(\n            localhostTokens,\n            rpcTokens,\n          );\n        } else {\n          accountTokens[account].rpc = localhostTokens;\n        }\n      }\n      delete accountTokens[account]?.localhost;\n    });\n  }\n\n  return state;\n}\n\n/**\n * Merges the two given keys for the given address book in place.\n *\n * @param addressBook\n * @param networkKey\n * @param chainIdKey\n */\nfunction mergeAddressBookKeys(addressBook, networkKey, chainIdKey) {\n  const networkKeyEntries = addressBook[networkKey] || {};\n  // For the new entries, start by copying the existing entries for the chainId\n  const newEntries = { ...addressBook[chainIdKey] };\n\n  // For each address of the old/networkId key entries\n  Object.keys(networkKeyEntries).forEach((address) => {\n    if (newEntries[address] && typeof newEntries[address] === 'object') {\n      const mergedEntry = {};\n\n      // Collect all keys from both entries and merge the corresponding chainId\n      // entry with the networkId entry\n      new Set([\n        ...Object.keys(newEntries[address]),\n        ...Object.keys(networkKeyEntries[address] || {}),\n      ]).forEach((key) => {\n        // Use non-empty value for the current key, if any\n        mergedEntry[key] =\n          newEntries[address][key] || networkKeyEntries[address]?.[key] || '';\n      });\n\n      newEntries[address] = mergedEntry;\n    } else if (\n      networkKeyEntries[address] &&\n      typeof networkKeyEntries[address] === 'object'\n    ) {\n      // If there is no corresponding chainId entry, just use the networkId entry\n      // directly\n      newEntries[address] = networkKeyEntries[address];\n    }\n  });\n\n  addressBook[chainIdKey] = newEntries;\n}\n\n/**\n * Updates the chainId key values to the given chainId in place for all values\n * of the given networkEntries object.\n *\n * @param networkEntries\n * @param chainId\n */\nfunction updateChainIds(networkEntries, chainId) {\n  Object.values(networkEntries).forEach((entry) => {\n    if (entry && typeof entry === 'object') {\n      entry.chainId = chainId;\n    }\n  });\n}\n\n/**\n * Merges the two given, non-empty arrays of token objects and returns a new\n * array.\n *\n * @param localhostTokens\n * @param rpcTokens\n * @returns {Array<Object>}\n */\nfunction mergeTokenArrays(localhostTokens, rpcTokens) {\n  const localhostTokensMap = tokenArrayToMap(localhostTokens);\n  const rpcTokensMap = tokenArrayToMap(rpcTokens);\n\n  const mergedTokens = [];\n  new Set([\n    ...Object.keys(localhostTokensMap),\n    ...Object.keys(rpcTokensMap),\n  ]).forEach((tokenAddress) => {\n    mergedTokens.push({\n      ...localhostTokensMap[tokenAddress],\n      ...rpcTokensMap[tokenAddress],\n    });\n  });\n\n  return mergedTokens;\n\n  function tokenArrayToMap(array) {\n    return array.reduce((map, token) => {\n      if (token?.address && typeof token?.address === 'string') {\n        map[token.address] = token;\n      }\n      return map;\n    }, {});\n  }\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 68;\n\n/**\n * Transforms the PermissionsController and PermissionsMetadata substates\n * to match the new permission system.\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const {\n    PermissionsController = {},\n    PermissionsMetadata = {},\n    ...remainingState\n  } = state;\n\n  const {\n    domainMetadata = {},\n    permissionsHistory = {},\n    permissionsLog = [],\n  } = PermissionsMetadata;\n\n  return {\n    ...remainingState,\n    PermissionController: getPermissionControllerState(PermissionsController),\n    PermissionLogController: {\n      permissionActivityLog: permissionsLog,\n      permissionHistory: permissionsHistory,\n    },\n    SubjectMetadataController: getSubjectMetadataControllerState(\n      domainMetadata,\n    ),\n  };\n}\n\nfunction getPermissionControllerState(PermissionsController) {\n  const { domains = {} } = PermissionsController;\n\n  /**\n   * Example existing domain entry. Every existing domain will have a single\n   * eth_accounts permission, which simplifies the transform.\n   *\n   * 'https://metamask.github.io': {\n   *   permissions: [\n   *     {\n   *       '@context': ['https://github.com/MetaMask/rpc-cap'],\n   *       'caveats': [\n   *         {\n   *           name: 'primaryAccountOnly',\n   *           type: 'limitResponseLength',\n   *           value: 1,\n   *         },\n   *         {\n   *           name: 'exposedAccounts',\n   *           type: 'filterResponse',\n   *           value: ['0x0c97a5c81e50a02ff8be73cc3f0a0569e61f4ed8'],\n   *         },\n   *       ],\n   *       'date': 1616006369498,\n   *       'id': '3d0bdc27-e8e4-4fb0-a24b-340d61f6a3fa',\n   *       'invoker': 'https://metamask.github.io',\n   *       'parentCapability': 'eth_accounts',\n   *     },\n   *   ],\n   * },\n   */\n\n  const ETH_ACCOUNTS = 'eth_accounts';\n  const NEW_CAVEAT_TYPE = 'restrictReturnedAccounts';\n  const OLD_CAVEAT_NAME = 'exposedAccounts';\n\n  const subjects = Object.entries(domains).reduce(\n    (transformed, [origin, domainEntry]) => {\n      const {\n        permissions: [ethAccountsPermission],\n      } = domainEntry;\n\n      // There are two caveats for each eth_accounts permission, but we only\n      // need the value of one of them in the new permission system.\n      const oldCaveat = ethAccountsPermission.caveats.find(\n        (caveat) => caveat.name === OLD_CAVEAT_NAME,\n      );\n\n      const newPermission = {\n        ...ethAccountsPermission,\n        caveats: [{ type: NEW_CAVEAT_TYPE, value: oldCaveat.value }],\n      };\n\n      // We never used this, and just omit it in the new system.\n      delete newPermission['@context'];\n\n      transformed[origin] = {\n        origin,\n        permissions: {\n          [ETH_ACCOUNTS]: newPermission,\n        },\n      };\n      return transformed;\n    },\n    {},\n  );\n\n  return {\n    subjects,\n  };\n}\n\nfunction getSubjectMetadataControllerState(domainMetadata) {\n  /**\n   * Example existing domainMetadata entry.\n   *\n   * \"https://www.youtube.com\": {\n   *   \"host\": \"www.youtube.com\",\n   *   \"icon\": null,\n   *   \"lastUpdated\": 1637697914908,\n   *   \"name\": \"YouTube\"\n   * }\n   */\n\n  const subjectMetadata = Object.entries(domainMetadata).reduce(\n    (transformed, [origin, metadata]) => {\n      const {\n        name = null,\n        icon = null,\n        extensionId = null,\n        ...other\n      } = metadata;\n\n      // We're getting rid of these.\n      delete other.lastUpdated;\n      delete other.host;\n\n      if (origin) {\n        transformed[origin] = {\n          name,\n          iconUrl: icon,\n          extensionId,\n          ...other,\n          origin,\n        };\n      }\n      return transformed;\n    },\n    {},\n  );\n\n  return {\n    subjectMetadata,\n  };\n}\n","import { cloneDeep } from 'lodash';\n\nconst version = 63;\n\n/**\n * Moves token state from preferences controller to TokensController\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const accountTokens = state?.PreferencesController?.accountTokens;\n  const accountHiddenTokens = state?.PreferencesController?.accountHiddenTokens;\n\n  const newAllTokens = {};\n  if (accountTokens) {\n    Object.keys(accountTokens).forEach((accountAddress) => {\n      Object.keys(accountTokens[accountAddress]).forEach((chainId) => {\n        const tokensArray = accountTokens[accountAddress][chainId];\n        if (newAllTokens[chainId] === undefined) {\n          newAllTokens[chainId] = { [accountAddress]: tokensArray };\n        } else {\n          newAllTokens[chainId] = {\n            ...newAllTokens[chainId],\n            [accountAddress]: tokensArray,\n          };\n        }\n      });\n    });\n  }\n\n  const newAllIgnoredTokens = {};\n  if (accountHiddenTokens) {\n    Object.keys(accountHiddenTokens).forEach((accountAddress) => {\n      Object.keys(accountHiddenTokens[accountAddress]).forEach((chainId) => {\n        const ignoredTokensArray = accountHiddenTokens[accountAddress][chainId];\n        if (newAllIgnoredTokens[chainId] === undefined) {\n          newAllIgnoredTokens[chainId] = {\n            [accountAddress]: ignoredTokensArray,\n          };\n        } else {\n          newAllIgnoredTokens[chainId] = {\n            ...newAllIgnoredTokens[chainId],\n            [accountAddress]: ignoredTokensArray,\n          };\n        }\n      });\n    });\n  }\n\n  if (state.TokensController) {\n    state.TokensController.allTokens = newAllTokens;\n    state.TokensController.allIgnoredTokens = newAllIgnoredTokens;\n  } else {\n    state.TokensController = {\n      allTokens: newAllTokens,\n      allIgnoredTokens: newAllIgnoredTokens,\n    };\n  }\n\n  delete state?.PreferencesController?.accountHiddenTokens;\n  delete state?.PreferencesController?.accountTokens;\n  delete state?.PreferencesController?.assetImages;\n  delete state?.PreferencesController?.hiddenTokens;\n  delete state?.PreferencesController?.tokens;\n  delete state?.PreferencesController?.suggestedTokens;\n\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport BigNumber from 'bignumber.js';\nimport { TEST_CHAINS } from '../../../shared/constants/network';\n\nconst hexNumberIsGreaterThanZero = (hexNumber) =>\n  new BigNumber(hexNumber || '0x0', 16).gt(0);\n\nconst version = 67;\n\n/**\n * Sets the showTestNetworks property to true if it was false or undefined, and there is evidence\n * that the user has used a test net\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const PreferencesController = state?.PreferencesController || {};\n  const preferences = PreferencesController.preferences || {};\n\n  if (preferences.showTestNetworks) {\n    return state;\n  }\n\n  const transactions = state?.TransactionController?.transactions || {};\n  const provider = state.NetworkController?.provider || {};\n  const cachedBalances = state.CachedBalancesController?.cachedBalances || {};\n\n  const userIsCurrentlyOnATestNet = TEST_CHAINS.includes(provider?.chainId);\n  const userHasMadeATestNetTransaction = Object.values(\n    transactions,\n  ).some(({ chainId }) => TEST_CHAINS.includes(chainId));\n  const userHasACachedBalanceOnATestnet = TEST_CHAINS.some((chainId) => {\n    const cachedBalancesForChain = Object.values(cachedBalances[chainId] || {});\n    const userHasABalanceGreaterThanZeroOnThisChain = cachedBalancesForChain.some(\n      hexNumberIsGreaterThanZero,\n    );\n    return userHasABalanceGreaterThanZeroOnThisChain;\n  });\n  const userHasUsedATestnet =\n    userIsCurrentlyOnATestNet ||\n    userHasMadeATestNetTransaction ||\n    userHasACachedBalanceOnATestnet;\n\n  const newState = {\n    ...state,\n    PreferencesController: {\n      ...PreferencesController,\n      preferences: {\n        ...preferences,\n        showTestNetworks: userHasUsedATestnet,\n      },\n    },\n  };\n\n  return newState;\n}\n","import { cloneDeep, keyBy } from 'lodash';\nimport createId from '../../../shared/modules/random-id';\n\nconst version = 57;\n\n/**\n * replace 'incomingTxLastFetchedBlocksByNetwork' with 'incomingTxLastFetchedBlockByChainId'\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    versionedData.data = transformState(state);\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  if (\n    state?.TransactionController?.transactions &&\n    Array.isArray(state.TransactionController.transactions) &&\n    !state.TransactionController.transactions.some(\n      (item) =>\n        typeof item !== 'object' || typeof item.txParams === 'undefined',\n    )\n  ) {\n    state.TransactionController.transactions = keyBy(\n      state.TransactionController.transactions,\n      // In case for some reason any of a user's transactions do not have an id\n      // generate a new one for the transaction.\n      (tx) => {\n        if (typeof tx.id === 'undefined' || tx.id === null) {\n          // This mutates the item in the array, so will result in a change to\n          // the state.\n          tx.id = createId();\n        }\n        return tx.id;\n      },\n    );\n  }\n  return state;\n}\n","import { cloneDeep } from 'lodash';\nimport { LEDGER_TRANSPORT_TYPES } from '../../../shared/constants/hardware-wallets';\n\nconst version = 66;\n\n/**\n * Changes the useLedgerLive boolean property to the ledgerTransportType enum\n */\nexport default {\n  version,\n  async migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    const state = versionedData.data;\n    const newState = transformState(state);\n    versionedData.data = newState;\n    return versionedData;\n  },\n};\n\nfunction transformState(state) {\n  const defaultTransportType = window.navigator.hid\n    ? LEDGER_TRANSPORT_TYPES.WEBHID\n    : LEDGER_TRANSPORT_TYPES.U2F;\n  const useLedgerLive = Boolean(state.PreferencesController?.useLedgerLive);\n  const newState = {\n    ...state,\n    PreferencesController: {\n      ...state?.PreferencesController,\n      ledgerTransportType: useLedgerLive\n        ? LEDGER_TRANSPORT_TYPES.LIVE\n        : defaultTransportType,\n    },\n  };\n  delete newState.PreferencesController.useLedgerLive;\n  return newState;\n}\n","/*\n\nThis migration updates \"transaction state history\" to diffs style\n\n*/\n\nimport { cloneDeep } from 'lodash';\nimport {\n  snapshotFromTxMeta,\n  migrateFromSnapshotsToDiffs,\n} from '../controllers/transactions/lib/tx-state-history-helpers';\n\nconst version = 18;\n\nexport default {\n  version,\n\n  migrate(originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  },\n};\n\nfunction transformState(state) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = newState.TransactionController;\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      // no history: initialize\n      if (!txMeta.history || txMeta.history.length === 0) {\n        const snapshot = snapshotFromTxMeta(txMeta);\n        txMeta.history = [snapshot];\n        return txMeta;\n      }\n      // has history: migrate\n      const newHistory = migrateFromSnapshotsToDiffs(txMeta.history)\n        // remove empty diffs\n        .filter((entry) => {\n          return !Array.isArray(entry) || entry.length > 0;\n        });\n      txMeta.history = newHistory;\n      return txMeta;\n    });\n  }\n  return newState;\n}\n","var toDataView = require('to-data-view')\n\nvar RFC4648 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'\nvar RFC4648_HEX = '0123456789ABCDEFGHIJKLMNOPQRSTUV'\nvar CROCKFORD = '0123456789ABCDEFGHJKMNPQRSTVWXYZ'\n\nmodule.exports = function base32Encode (data, variant, options) {\n  options = options || {}\n  var alphabet, defaultPadding\n\n  switch (variant) {\n    case 'RFC3548':\n    case 'RFC4648':\n      alphabet = RFC4648\n      defaultPadding = true\n      break\n    case 'RFC4648-HEX':\n      alphabet = RFC4648_HEX\n      defaultPadding = true\n      break\n    case 'Crockford':\n      alphabet = CROCKFORD\n      defaultPadding = false\n      break\n    default:\n      throw new Error('Unknown base32 variant: ' + variant)\n  }\n\n  var padding = (options.padding !== undefined ? options.padding : defaultPadding)\n  var view = toDataView(data)\n\n  var bits = 0\n  var value = 0\n  var output = ''\n\n  for (var i = 0; i < view.byteLength; i++) {\n    value = (value << 8) | view.getUint8(i)\n    bits += 8\n\n    while (bits >= 5) {\n      output += alphabet[(value >>> (bits - 5)) & 31]\n      bits -= 5\n    }\n  }\n\n  if (bits > 0) {\n    output += alphabet[(value << (5 - bits)) & 31]\n  }\n\n  if (padding) {\n    while ((output.length % 8) !== 0) {\n      output += '='\n    }\n  }\n\n  return output\n}\n","import namehash from 'eth-ens-namehash';\nimport Eth from 'ethjs-query';\nimport EthContract from 'ethjs-contract';\nimport contentHash from '@ensdomains/content-hash';\nimport registryAbi from './contracts/registry';\nimport resolverAbi from './contracts/resolver';\n\nexport default async function resolveEnsToIpfsContentId({ provider, name }) {\n  const eth = new Eth(provider);\n  const hash = namehash.hash(name);\n  const contract = new EthContract(eth);\n  // lookup registry\n  const chainId = Number.parseInt(await eth.net_version(), 10);\n  const registryAddress = getRegistryForChainId(chainId);\n  if (!registryAddress) {\n    throw new Error(\n      `EnsIpfsResolver - no known ens-ipfs registry for chainId \"${chainId}\"`,\n    );\n  }\n  const Registry = contract(registryAbi).at(registryAddress);\n  // lookup resolver\n  const resolverLookupResult = await Registry.resolver(hash);\n  const resolverAddress = resolverLookupResult[0];\n  if (hexValueIsEmpty(resolverAddress)) {\n    throw new Error(`EnsIpfsResolver - no resolver found for name \"${name}\"`);\n  }\n  const Resolver = contract(resolverAbi).at(resolverAddress);\n\n  const isEIP1577Compliant = await Resolver.supportsInterface('0xbc1c58d1');\n  const isLegacyResolver = await Resolver.supportsInterface('0xd8389dc5');\n  if (isEIP1577Compliant[0]) {\n    const contentLookupResult = await Resolver.contenthash(hash);\n    const rawContentHash = contentLookupResult[0];\n    let decodedContentHash = contentHash.decode(rawContentHash);\n    const type = contentHash.getCodec(rawContentHash);\n\n    if (type === 'ipfs-ns' || type === 'ipns-ns') {\n      decodedContentHash = contentHash.helpers.cidV0ToV1Base32(\n        decodedContentHash,\n      );\n    }\n\n    return { type, hash: decodedContentHash };\n  }\n  if (isLegacyResolver[0]) {\n    // lookup content id\n    const contentLookupResult = await Resolver.content(hash);\n    const content = contentLookupResult[0];\n    if (hexValueIsEmpty(content)) {\n      throw new Error(\n        `EnsIpfsResolver - no content ID found for name \"${name}\"`,\n      );\n    }\n    return { type: 'swarm-ns', hash: content.slice(2) };\n  }\n  throw new Error(\n    `EnsIpfsResolver - the resolver for name \"${name}\" is not standard, it should either supports contenthash() or content()`,\n  );\n}\n\nfunction hexValueIsEmpty(value) {\n  return [\n    undefined,\n    null,\n    '0x',\n    '0x0',\n    '0x0000000000000000000000000000000000000000000000000000000000000000',\n  ].includes(value);\n}\n\n/**\n * Returns the registry address for the given chain ID\n *\n * @param {number} chainId - the chain ID\n * @returns {string|null} the registry address if known, null otherwise\n */\nfunction getRegistryForChainId(chainId) {\n  switch (chainId) {\n    case 1:\n    case 3:\n    case 4:\n    case 5:\n      // Mainnet, Ropsten, Rinkeby, and Goerli, respectively, use the same address\n      return '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e';\n    default:\n      return null;\n  }\n}\n","/**\n * Returns a middleware that appends the DApp TabId to the request\n *\n * @param {{ tabId: number }} opts - The middleware options\n * @returns {Function}\n */\nexport default function createTabIdMiddleware(opts) {\n  return function tabIdMiddleware(\n    /** @type {any} */ req,\n    /** @type {any} */ _,\n    /** @type {Function} */ next,\n  ) {\n    req.tabId = opts.tabId;\n    next();\n  };\n}\n","/**\n * Returns a middleware that appends the DApp origin to request\n *\n * @param {{ origin: string }} opts - The middleware options\n * @returns {Function}\n */\nexport default function createOriginMiddleware(opts) {\n  return function originMiddleware(\n    /** @type {any} */ req,\n    /** @type {any} */ _,\n    /** @type {Function} */ next,\n  ) {\n    req.origin = opts.origin;\n    next();\n  };\n}\n","// This file replaces `index.js` in bundlers like webpack or Rollup,\n// according to `browser` config in `package.json`.\n\nif (\"production\" !== 'production') {\n  // All bundlers will remove this block in production bundle\n  if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n      'If you don’t need unpredictable IDs, you can use `nanoid/non-secure`. ' +\n      'For secure ID install `expo-random` locally and use `nanoid/async`.'\n    )\n  }\n  if (typeof self === 'undefined' || (!self.crypto && !self.msCrypto)) {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n      'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\n\nvar crypto = self.crypto || self.msCrypto\n\n// This alphabet uses a-z A-Z 0-9 _- symbols.\n// Symbols are generated for smaller size.\n// -_zyxwvutsrqponmlkjihgfedcba9876543210ZYXWVUTSRQPONMLKJIHGFEDCBA\nvar url = '-_'\n// Loop from 36 to 0 (from z to a and 9 to 0 in Base36).\nvar i = 36\nwhile (i--) {\n  // 36 is radix. Number.prototype.toString(36) returns number\n  // in Base36 representation. Base36 is like hex, but it uses 0–9 and a-z.\n  url += i.toString(36)\n}\n// Loop from 36 to 10 (from Z to A in Base36).\ni = 36\nwhile (i-- - 10) {\n  url += i.toString(36).toUpperCase()\n}\n\nmodule.exports = function (size) {\n  var id = ''\n  var bytes = crypto.getRandomValues(new Uint8Array(size || 21))\n  i = size || 21\n\n  // Compact alternative for `for (var i = 0; i < size; i++)`\n  while (i--) {\n    // We can’t use bytes bigger than the alphabet. 63 is 00111111 bitmask.\n    // This mask reduces random byte 0-255 to 0-63 values.\n    // There is no need in `|| ''` and `* 1.6` hacks in here,\n    // because bitmask trim bytes exact to alphabet size.\n    id += url[bytes[i] & 63]\n  }\n  return id\n}\n","import { ethErrors, serializeError } from 'eth-rpc-errors';\n\nconst createMetaRPCHandler = (api, outStream) => {\n  return async (data) => {\n    if (outStream._writableState.ended) {\n      return;\n    }\n    if (!api[data.method]) {\n      outStream.write({\n        jsonrpc: '2.0',\n        error: ethErrors.rpc.methodNotFound({\n          message: `${data.method} not found`,\n        }),\n        id: data.id,\n      });\n      return;\n    }\n\n    let result;\n    let error;\n    try {\n      result = await api[data.method](...data.params);\n    } catch (err) {\n      error = err;\n    }\n\n    if (outStream._writableState.ended) {\n      if (error) {\n        console.error(error);\n      }\n      return;\n    }\n\n    if (error) {\n      outStream.write({\n        jsonrpc: '2.0',\n        error: serializeError(error, { shouldIncludeStack: true }),\n        id: data.id,\n      });\n    } else {\n      outStream.write({\n        jsonrpc: '2.0',\n        result,\n        id: data.id,\n      });\n    }\n  };\n};\n\nexport default createMetaRPCHandler;\n","const DuplexStream = require('readable-stream').Duplex\n\nmodule.exports = createEngineStream\n\nfunction createEngineStream({ engine }) {\n  if (!engine) throw new Error('Missing engine parameter!')\n  const stream = new DuplexStream({ objectMode: true, read, write })\n  // forward notifications\n  if (engine.on) {\n    engine.on('notification', (message) => {\n      stream.push(message)\n    })\n  }\n  return stream\n\n  function read () {\n    return false\n  }\n  function write (req, encoding, cb) {\n    engine.handle(req, (err, res) => {\n      this.push(res)\n    })\n    cb()\n  }\n}\n","import { ObservableStore } from '@metamask/obs-store';\nimport { getPersistentState } from '@metamask/controllers';\n\n/**\n * @typedef {import('@metamask/controllers').ControllerMessenger} ControllerMessenger\n */\n\n/**\n * An ObservableStore that can composes a flat\n * structure of child stores based on configuration\n */\nexport default class ComposableObservableStore extends ObservableStore {\n  /**\n   * Describes which stores are being composed. The key is the name of the\n   * store, and the value is either an ObserableStore, or a controller that\n   * extends one of the two base controllers in the `@metamask/controllers`\n   * package.\n   *\n   * @type {Record<string, Object>}\n   */\n  config = {};\n\n  /**\n   * Create a new store\n   *\n   * @param {Object} options\n   * @param {Object} [options.config] - Map of internal state keys to child stores\n   * @param {ControllerMessenger} options.controllerMessenger - The controller\n   *   messenger, used for subscribing to events from BaseControllerV2-based\n   *   controllers.\n   * @param {Object} [options.state] - The initial store state\n   * @param {boolean} [options.persist] - Whether or not to apply the persistence for v2 controllers\n   */\n  constructor({ config, controllerMessenger, state, persist }) {\n    super(state);\n    this.persist = persist;\n    this.controllerMessenger = controllerMessenger;\n    if (config) {\n      this.updateStructure(config);\n    }\n  }\n\n  /**\n   * Composes a new internal store subscription structure\n   *\n   * @param {Record<string, Object>} config - Describes which stores are being\n   *   composed. The key is the name of the store, and the value is either an\n   *   ObserableStore, or a controller that extends one of the two base\n   *   controllers in the `@metamask/controllers` package.\n   */\n  updateStructure(config) {\n    this.config = config;\n    this.removeAllListeners();\n    for (const key of Object.keys(config)) {\n      if (!config[key]) {\n        throw new Error(`Undefined '${key}'`);\n      }\n      const store = config[key];\n      if (store.subscribe) {\n        config[key].subscribe((state) => {\n          this.updateState({ [key]: state });\n        });\n      } else {\n        this.controllerMessenger.subscribe(\n          `${store.name}:stateChange`,\n          (state) => {\n            let updatedState = state;\n            if (this.persist) {\n              updatedState = getPersistentState(state, config[key].metadata);\n            }\n            this.updateState({ [key]: updatedState });\n          },\n        );\n      }\n    }\n  }\n\n  /**\n   * Merges all child store state into a single object rather than\n   * returning an object keyed by child store class name\n   *\n   * @returns {Object} Object containing merged child store state\n   */\n  getFlatState() {\n    if (!this.config) {\n      return {};\n    }\n    let flatState = {};\n    for (const key of Object.keys(this.config)) {\n      const controller = this.config[key];\n      const state = controller.getState\n        ? controller.getState()\n        : controller.state;\n      flatState = { ...flatState, ...state };\n    }\n    return flatState;\n  }\n}\n","import log from 'loglevel';\n\n/**\n * Returns a middleware that logs RPC activity\n *\n * @param {{ origin: string }} opts - The middleware options\n * @returns {Function}\n */\nexport default function createLoggerMiddleware(opts) {\n  return function loggerMiddleware(\n    /** @type {any} */ req,\n    /** @type {any} */ res,\n    /** @type {Function} */ next,\n  ) {\n    next((/** @type {Function} */ cb) => {\n      if (res.error) {\n        log.error('Error in RPC response:\\n', res);\n      }\n      if (req.isMetamaskInternal) {\n        return;\n      }\n      log.info(`RPC (${opts.origin}):`, req, '->', res);\n      cb();\n    });\n  };\n}\n","import { ObservableStore } from '@metamask/obs-store';\n\n/**\n * @typedef {Object} CachedBalancesOptions\n * @property {Object} accountTracker An {@code AccountTracker} reference\n * @property {Function} getCurrentChainId A function to get the current chain id\n * @property {Object} initState The initial controller state\n */\n\n/**\n * Background controller responsible for maintaining\n * a cache of account balances in local storage\n */\nexport default class CachedBalancesController {\n  /**\n   * Creates a new controller instance\n   *\n   * @param {CachedBalancesOptions} [opts] - Controller configuration parameters\n   */\n  constructor(opts = {}) {\n    const { accountTracker, getCurrentChainId } = opts;\n\n    this.accountTracker = accountTracker;\n    this.getCurrentChainId = getCurrentChainId;\n\n    const initState = { cachedBalances: {}, ...opts.initState };\n    this.store = new ObservableStore(initState);\n\n    this._registerUpdates();\n  }\n\n  /**\n   * Updates the cachedBalances property for the current chain. Cached balances will be updated to those in the passed accounts\n   * if balances in the passed accounts are truthy.\n   *\n   * @param {Object} obj - The the recently updated accounts object for the current chain\n   * @param obj.accounts\n   * @returns {Promise<void>}\n   */\n  async updateCachedBalances({ accounts }) {\n    const chainId = this.getCurrentChainId();\n    const balancesToCache = await this._generateBalancesToCache(\n      accounts,\n      chainId,\n    );\n    this.store.updateState({\n      cachedBalances: balancesToCache,\n    });\n  }\n\n  _generateBalancesToCache(newAccounts, chainId) {\n    const { cachedBalances } = this.store.getState();\n    const currentChainBalancesToCache = { ...cachedBalances[chainId] };\n\n    Object.keys(newAccounts).forEach((accountID) => {\n      const account = newAccounts[accountID];\n\n      if (account.balance) {\n        currentChainBalancesToCache[accountID] = account.balance;\n      }\n    });\n    const balancesToCache = {\n      ...cachedBalances,\n      [chainId]: currentChainBalancesToCache,\n    };\n\n    return balancesToCache;\n  }\n\n  /**\n   * Removes cachedBalances\n   */\n\n  clearCachedBalances() {\n    this.store.updateState({ cachedBalances: {} });\n  }\n\n  /**\n   * Sets up listeners and subscriptions which should trigger an update of cached balances. These updates will\n   * happen when the current account changes. Which happens on block updates, as well as on network and account\n   * selections.\n   *\n   * @private\n   */\n  _registerUpdates() {\n    const update = this.updateCachedBalances.bind(this);\n    this.accountTracker.store.subscribe(update);\n  }\n}\n","import EventEmitter from 'events';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { bufferToHex, stripHexPrefix } from 'ethereumjs-util';\nimport { ethErrors } from 'eth-rpc-errors';\nimport log from 'loglevel';\nimport { MESSAGE_TYPE } from '../../../shared/constants/app';\nimport { METAMASK_CONTROLLER_EVENTS } from '../metamask-controller';\nimport createId from '../../../shared/modules/random-id';\nimport { addHexPrefix } from './util';\n\nconst hexRe = /^[0-9A-Fa-f]+$/gu;\n\n/**\n * Represents, and contains data about, an 'eth_decrypt' type decryption request. These are created when a\n * decryption for an eth_decrypt call is requested.\n *\n * @typedef {Object} DecryptMessage\n * @property {number} id An id to track and identify the message object\n * @property {Object} msgParams The parameters to pass to the decryptMessage method once the decryption request is\n * approved.\n * @property {Object} msgParams.metamaskId Added to msgParams for tracking and identification within MetaMask.\n * @property {string} msgParams.data A hex string conversion of the raw buffer data of the decryption request\n * @property {number} time The epoch time at which the this message was created\n * @property {string} status Indicates whether the decryption request is 'unapproved', 'approved', 'decrypted' or 'rejected'\n * @property {string} type The json-prc decryption method for which a decryption request has been made. A 'Message' will\n * always have a 'eth_decrypt' type.\n */\n\nexport default class DecryptMessageManager extends EventEmitter {\n  /**\n   * Controller in charge of managing - storing, adding, removing, updating - DecryptMessage.\n   *\n   * @param {object} opts - Controller options\n   * @param {Function} opts.metricEvent - A function for emitting a metric event.\n   */\n  constructor(opts) {\n    super();\n    this.memStore = new ObservableStore({\n      unapprovedDecryptMsgs: {},\n      unapprovedDecryptMsgCount: 0,\n    });\n    this.messages = [];\n    this.metricsEvent = opts.metricsEvent;\n  }\n\n  /**\n   * A getter for the number of 'unapproved' DecryptMessages in this.messages\n   *\n   * @returns {number} The number of 'unapproved' DecryptMessages in this.messages\n   */\n  get unapprovedDecryptMsgCount() {\n    return Object.keys(this.getUnapprovedMsgs()).length;\n  }\n\n  /**\n   * A getter for the 'unapproved' DecryptMessages in this.messages\n   *\n   * @returns {Object} An index of DecryptMessage ids to DecryptMessages, for all 'unapproved' DecryptMessages in\n   * this.messages\n   */\n  getUnapprovedMsgs() {\n    return this.messages\n      .filter((msg) => msg.status === 'unapproved')\n      .reduce((result, msg) => {\n        result[msg.id] = msg;\n        return result;\n      }, {});\n  }\n\n  /**\n   * Creates a new DecryptMessage with an 'unapproved' status using the passed msgParams. this.addMsg is called to add\n   * the new DecryptMessage to this.messages, and to save the unapproved DecryptMessages from that list to\n   * this.memStore.\n   *\n   * @param {Object} msgParams - The params for the eth_decrypt call to be made after the message is approved.\n   * @param {Object} [req] - The original request object possibly containing the origin\n   * @returns {Promise<Buffer>} The raw decrypted message contents\n   */\n  addUnapprovedMessageAsync(msgParams, req) {\n    return new Promise((resolve, reject) => {\n      if (!msgParams.from) {\n        reject(new Error('MetaMask Decryption: from field is required.'));\n        return;\n      }\n      const msgId = this.addUnapprovedMessage(msgParams, req);\n      this.once(`${msgId}:finished`, (data) => {\n        switch (data.status) {\n          case 'decrypted':\n            resolve(data.rawData);\n            return;\n          case 'rejected':\n            reject(\n              ethErrors.provider.userRejectedRequest(\n                'MetaMask Decryption: User denied message decryption.',\n              ),\n            );\n            return;\n          case 'errored':\n            reject(new Error('This message cannot be decrypted'));\n            return;\n          default:\n            reject(\n              new Error(\n                `MetaMask Decryption: Unknown problem: ${JSON.stringify(\n                  msgParams,\n                )}`,\n              ),\n            );\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a new DecryptMessage with an 'unapproved' status using the passed msgParams. this.addMsg is called to add\n   * the new DecryptMessage to this.messages, and to save the unapproved DecryptMessages from that list to\n   * this.memStore.\n   *\n   * @param {Object} msgParams - The params for the eth_decryptMsg call to be made after the message is approved.\n   * @param {Object} [req] - The original request object possibly containing the origin\n   * @returns {number} The id of the newly created DecryptMessage.\n   */\n  addUnapprovedMessage(msgParams, req) {\n    log.debug(\n      `DecryptMessageManager addUnapprovedMessage: ${JSON.stringify(\n        msgParams,\n      )}`,\n    );\n    // add origin from request\n    if (req) {\n      msgParams.origin = req.origin;\n    }\n    msgParams.data = this.normalizeMsgData(msgParams.data);\n    // create txData obj with parameters and meta data\n    const time = new Date().getTime();\n    const msgId = createId();\n    const msgData = {\n      id: msgId,\n      msgParams,\n      time,\n      status: 'unapproved',\n      type: MESSAGE_TYPE.ETH_DECRYPT,\n    };\n    this.addMsg(msgData);\n\n    // signal update\n    this.emit('update');\n    return msgId;\n  }\n\n  /**\n   * Adds a passed DecryptMessage to this.messages, and calls this._saveMsgList() to save the unapproved DecryptMessages from that\n   * list to this.memStore.\n   *\n   * @param {Message} msg - The DecryptMessage to add to this.messages\n   */\n  addMsg(msg) {\n    this.messages.push(msg);\n    this._saveMsgList();\n  }\n\n  /**\n   * Returns a specified DecryptMessage.\n   *\n   * @param {number} msgId - The id of the DecryptMessage to get\n   * @returns {DecryptMessage|undefined} The DecryptMessage with the id that matches the passed msgId, or undefined\n   * if no DecryptMessage has that id.\n   */\n  getMsg(msgId) {\n    return this.messages.find((msg) => msg.id === msgId);\n  }\n\n  /**\n   * Approves a DecryptMessage. Sets the message status via a call to this.setMsgStatusApproved, and returns a promise\n   * with the message params modified for proper decryption.\n   *\n   * @param {Object} msgParams - The msgParams to be used when eth_decryptMsg is called, plus data added by MetaMask.\n   * @param {Object} msgParams.metamaskId - Added to msgParams for tracking and identification within MetaMask.\n   * @returns {Promise<object>} Promises the msgParams object with metamaskId removed.\n   */\n  approveMessage(msgParams) {\n    this.setMsgStatusApproved(msgParams.metamaskId);\n    return this.prepMsgForDecryption(msgParams);\n  }\n\n  /**\n   * Sets a DecryptMessage status to 'approved' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the DecryptMessage to approve.\n   */\n  setMsgStatusApproved(msgId) {\n    this._setMsgStatus(msgId, 'approved');\n  }\n\n  /**\n   * Sets a DecryptMessage status to 'decrypted' via a call to this._setMsgStatus and updates that DecryptMessage in\n   * this.messages by adding the raw decryption data of the decryption request to the DecryptMessage\n   *\n   * @param {number} msgId - The id of the DecryptMessage to decrypt.\n   * @param {buffer} rawData - The raw data of the message request\n   */\n  setMsgStatusDecrypted(msgId, rawData) {\n    const msg = this.getMsg(msgId);\n    msg.rawData = rawData;\n    this._updateMsg(msg);\n    this._setMsgStatus(msgId, 'decrypted');\n  }\n\n  /**\n   * Removes the metamaskId property from passed msgParams and returns a promise which resolves the updated msgParams\n   *\n   * @param {Object} msgParams - The msgParams to modify\n   * @returns {Promise<object>} Promises the msgParams with the metamaskId property removed\n   */\n  prepMsgForDecryption(msgParams) {\n    delete msgParams.metamaskId;\n    return Promise.resolve(msgParams);\n  }\n\n  /**\n   * Sets a DecryptMessage status to 'rejected' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the DecryptMessage to reject.\n   * @param reason\n   */\n  rejectMsg(msgId, reason = undefined) {\n    if (reason) {\n      this.metricsEvent({\n        event: reason,\n        category: 'Messages',\n        properties: {\n          action: 'Decrypt Message Request',\n        },\n      });\n    }\n    this._setMsgStatus(msgId, 'rejected');\n  }\n\n  /**\n   * Sets a TypedMessage status to 'errored' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the TypedMessage to error\n   * @param error\n   */\n  errorMessage(msgId, error) {\n    const msg = this.getMsg(msgId);\n    msg.error = error;\n    this._updateMsg(msg);\n    this._setMsgStatus(msgId, 'errored');\n  }\n\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    this.messages = this.messages.filter((msg) => msg.status !== 'unapproved');\n    this._saveMsgList();\n  }\n\n  /**\n   * Updates the status of a DecryptMessage in this.messages via a call to this._updateMsg\n   *\n   * @private\n   * @param {number} msgId - The id of the DecryptMessage to update.\n   * @param {string} status - The new status of the DecryptMessage.\n   * @throws A 'DecryptMessageManager - DecryptMessage not found for id: \"${msgId}\".' if there is no DecryptMessage\n   * in this.messages with an id equal to the passed msgId\n   * @fires An event with a name equal to `${msgId}:${status}`. The DecryptMessage is also fired.\n   * @fires If status is 'rejected' or 'decrypted', an event with a name equal to `${msgId}:finished` is fired along\n   * with the DecryptMessage\n   */\n  _setMsgStatus(msgId, status) {\n    const msg = this.getMsg(msgId);\n    if (!msg) {\n      throw new Error(\n        `DecryptMessageManager - Message not found for id: \"${msgId}\".`,\n      );\n    }\n    msg.status = status;\n    this._updateMsg(msg);\n    this.emit(`${msgId}:${status}`, msg);\n    if (\n      status === 'rejected' ||\n      status === 'decrypted' ||\n      status === 'errored'\n    ) {\n      this.emit(`${msgId}:finished`, msg);\n    }\n  }\n\n  /**\n   * Sets a DecryptMessage in this.messages to the passed DecryptMessage if the ids are equal. Then saves the\n   * unapprovedDecryptMsgs index to storage via this._saveMsgList\n   *\n   * @private\n   * @param {DecryptMessage} msg - A DecryptMessage that will replace an existing DecryptMessage (with the same\n   * id) in this.messages\n   */\n  _updateMsg(msg) {\n    const index = this.messages.findIndex((message) => message.id === msg.id);\n    if (index !== -1) {\n      this.messages[index] = msg;\n    }\n    this._saveMsgList();\n  }\n\n  /**\n   * Saves the unapproved DecryptMessages, and their count, to this.memStore\n   *\n   * @private\n   * @fires 'updateBadge'\n   */\n  _saveMsgList() {\n    const unapprovedDecryptMsgs = this.getUnapprovedMsgs();\n    const unapprovedDecryptMsgCount = Object.keys(unapprovedDecryptMsgs).length;\n    this.memStore.updateState({\n      unapprovedDecryptMsgs,\n      unapprovedDecryptMsgCount,\n    });\n    this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);\n  }\n\n  /**\n   * A helper function that converts raw buffer data to a hex, or just returns the data if it is already formatted as a hex.\n   *\n   * @param {any} data - The buffer data to convert to a hex\n   * @returns {string} A hex string conversion of the buffer data\n   */\n  normalizeMsgData(data) {\n    try {\n      const stripped = stripHexPrefix(data);\n      if (stripped.match(hexRe)) {\n        return addHexPrefix(stripped);\n      }\n    } catch (e) {\n      log.debug(`Message was not hex encoded, interpreting as utf8.`);\n    }\n\n    return bufferToHex(Buffer.from(data, 'utf8'));\n  }\n}\n","import { ObservableStore } from '@metamask/obs-store';\nimport log from 'loglevel';\nimport BN from 'bn.js';\nimport createId from '../../../shared/modules/random-id';\nimport { bnToHex } from '../lib/util';\nimport getFetchWithTimeout from '../../../shared/modules/fetch-with-timeout';\n\nimport {\n  TRANSACTION_TYPES,\n  TRANSACTION_STATUSES,\n} from '../../../shared/constants/transaction';\nimport {\n  CHAIN_ID_TO_NETWORK_ID_MAP,\n  CHAIN_ID_TO_TYPE_MAP,\n  GOERLI_CHAIN_ID,\n  KOVAN_CHAIN_ID,\n  MAINNET_CHAIN_ID,\n  RINKEBY_CHAIN_ID,\n  ROPSTEN_CHAIN_ID,\n} from '../../../shared/constants/network';\nimport { SECOND } from '../../../shared/constants/time';\n\nconst fetchWithTimeout = getFetchWithTimeout(SECOND * 30);\n\n/**\n * @typedef {import('../../../shared/constants/transaction').TransactionMeta} TransactionMeta\n */\n\n/**\n * A transaction object in the format returned by the Etherscan API.\n *\n * Note that this is not an exhaustive type definiton; only the properties we use are defined\n *\n * @typedef {Object} EtherscanTransaction\n * @property {string} blockNumber - The number of the block this transaction was found in, in decimal\n * @property {string} from - The hex-prefixed address of the sender\n * @property {string} gas - The gas limit, in decimal GWEI\n * @property {string} [gasPrice] - The gas price, in decimal WEI\n * @property {string} [maxFeePerGas] - The maximum fee per gas, inclusive of tip, in decimal WEI\n * @property {string} [maxPriorityFeePerGas] - The maximum tip per gas in decimal WEI\n * @property {string} hash - The hex-prefixed transaction hash\n * @property {string} isError - Whether the transaction was confirmed or failed (0 for confirmed, 1 for failed)\n * @property {string} nonce - The transaction nonce, in decimal\n * @property {string} timeStamp - The timestamp for the transaction, in seconds\n * @property {string} to - The hex-prefixed address of the recipient\n * @property {string} value - The amount of ETH sent in this transaction, in decimal WEI\n */\n\n/**\n * This controller is responsible for retrieving incoming transactions. Etherscan is polled once every block to check\n * for new incoming transactions for the current selected account on the current network\n *\n * Note that only the built-in Infura networks are supported (i.e. anything in `INFURA_PROVIDER_TYPES`). We will not\n * attempt to retrieve incoming transactions on any custom RPC endpoints.\n */\nconst etherscanSupportedNetworks = [\n  GOERLI_CHAIN_ID,\n  KOVAN_CHAIN_ID,\n  MAINNET_CHAIN_ID,\n  RINKEBY_CHAIN_ID,\n  ROPSTEN_CHAIN_ID,\n];\n\nexport default class IncomingTransactionsController {\n  constructor(opts = {}) {\n    const {\n      blockTracker,\n      onNetworkDidChange,\n      getCurrentChainId,\n      preferencesController,\n    } = opts;\n    this.blockTracker = blockTracker;\n    this.getCurrentChainId = getCurrentChainId;\n    this.preferencesController = preferencesController;\n\n    this._onLatestBlock = async (newBlockNumberHex) => {\n      const selectedAddress = this.preferencesController.getSelectedAddress();\n      const newBlockNumberDec = parseInt(newBlockNumberHex, 16);\n      await this._update(selectedAddress, newBlockNumberDec);\n    };\n\n    const initState = {\n      incomingTransactions: {},\n      incomingTxLastFetchedBlockByChainId: {\n        [GOERLI_CHAIN_ID]: null,\n        [KOVAN_CHAIN_ID]: null,\n        [MAINNET_CHAIN_ID]: null,\n        [RINKEBY_CHAIN_ID]: null,\n        [ROPSTEN_CHAIN_ID]: null,\n      },\n      ...opts.initState,\n    };\n    this.store = new ObservableStore(initState);\n\n    this.preferencesController.store.subscribe(\n      previousValueComparator((prevState, currState) => {\n        const {\n          featureFlags: {\n            showIncomingTransactions: prevShowIncomingTransactions,\n          } = {},\n        } = prevState;\n        const {\n          featureFlags: {\n            showIncomingTransactions: currShowIncomingTransactions,\n          } = {},\n        } = currState;\n\n        if (currShowIncomingTransactions === prevShowIncomingTransactions) {\n          return;\n        }\n\n        if (prevShowIncomingTransactions && !currShowIncomingTransactions) {\n          this.stop();\n          return;\n        }\n\n        this.start();\n      }, this.preferencesController.store.getState()),\n    );\n\n    this.preferencesController.store.subscribe(\n      previousValueComparator(async (prevState, currState) => {\n        const { selectedAddress: prevSelectedAddress } = prevState;\n        const { selectedAddress: currSelectedAddress } = currState;\n\n        if (currSelectedAddress === prevSelectedAddress) {\n          return;\n        }\n        await this._update(currSelectedAddress);\n      }, this.preferencesController.store.getState()),\n    );\n\n    onNetworkDidChange(async () => {\n      const address = this.preferencesController.getSelectedAddress();\n      await this._update(address);\n    });\n  }\n\n  start() {\n    const { featureFlags = {} } = this.preferencesController.store.getState();\n    const { showIncomingTransactions } = featureFlags;\n\n    if (!showIncomingTransactions) {\n      return;\n    }\n\n    this.blockTracker.removeListener('latest', this._onLatestBlock);\n    this.blockTracker.addListener('latest', this._onLatestBlock);\n  }\n\n  stop() {\n    this.blockTracker.removeListener('latest', this._onLatestBlock);\n  }\n\n  /**\n   * Determines the correct block number to begin looking for new transactions\n   * from, fetches the transactions and then saves them and the next block\n   * number to begin fetching from in state. Block numbers and transactions are\n   * stored per chainId.\n   *\n   * @private\n   * @param {string} address - address to lookup transactions for\n   * @param {number} [newBlockNumberDec] - block number to begin fetching from\n   */\n  async _update(address, newBlockNumberDec) {\n    const chainId = this.getCurrentChainId();\n    if (!etherscanSupportedNetworks.includes(chainId) || !address) {\n      return;\n    }\n    try {\n      const currentState = this.store.getState();\n      const currentBlock = parseInt(this.blockTracker.getCurrentBlock(), 16);\n\n      const mostRecentlyFetchedBlock =\n        currentState.incomingTxLastFetchedBlockByChainId[chainId];\n      const blockToFetchFrom =\n        mostRecentlyFetchedBlock ?? newBlockNumberDec ?? currentBlock;\n\n      const newIncomingTxs = await this._getNewIncomingTransactions(\n        address,\n        blockToFetchFrom,\n        chainId,\n      );\n\n      let newMostRecentlyFetchedBlock = blockToFetchFrom;\n\n      newIncomingTxs.forEach((tx) => {\n        if (\n          tx.blockNumber &&\n          parseInt(newMostRecentlyFetchedBlock, 10) <\n            parseInt(tx.blockNumber, 10)\n        ) {\n          newMostRecentlyFetchedBlock = parseInt(tx.blockNumber, 10);\n        }\n      });\n\n      this.store.updateState({\n        incomingTxLastFetchedBlockByChainId: {\n          ...currentState.incomingTxLastFetchedBlockByChainId,\n          [chainId]: newMostRecentlyFetchedBlock + 1,\n        },\n        incomingTransactions: newIncomingTxs.reduce(\n          (transactions, tx) => {\n            transactions[tx.hash] = tx;\n            return transactions;\n          },\n          {\n            ...currentState.incomingTransactions,\n          },\n        ),\n      });\n    } catch (err) {\n      log.error(err);\n    }\n  }\n\n  /**\n   * fetches transactions for the given address and chain, via etherscan, then\n   * processes the data into the necessary shape for usage in this controller.\n   *\n   * @private\n   * @param {string} [address] - Address to fetch transactions for\n   * @param {number} [fromBlock] - Block to look for transactions at\n   * @param {string} [chainId] - The chainId for the current network\n   * @returns {TransactionMeta[]}\n   */\n  async _getNewIncomingTransactions(address, fromBlock, chainId) {\n    const etherscanSubdomain =\n      chainId === MAINNET_CHAIN_ID\n        ? 'api'\n        : `api-${CHAIN_ID_TO_TYPE_MAP[chainId]}`;\n\n    const apiUrl = `https://${etherscanSubdomain}.etherscan.io`;\n    let url = `${apiUrl}/api?module=account&action=txlist&address=${address}&tag=latest&page=1`;\n\n    if (fromBlock) {\n      url += `&startBlock=${parseInt(fromBlock, 10)}`;\n    }\n    const response = await fetchWithTimeout(url);\n    const { status, result } = await response.json();\n    let newIncomingTxs = [];\n    if (status === '1' && Array.isArray(result) && result.length > 0) {\n      const remoteTxList = {};\n      const remoteTxs = [];\n      result.forEach((tx) => {\n        if (!remoteTxList[tx.hash]) {\n          remoteTxs.push(this._normalizeTxFromEtherscan(tx, chainId));\n          remoteTxList[tx.hash] = 1;\n        }\n      });\n\n      newIncomingTxs = remoteTxs.filter(\n        (tx) => tx.txParams?.to?.toLowerCase() === address.toLowerCase(),\n      );\n      newIncomingTxs.sort((a, b) => (a.time < b.time ? -1 : 1));\n    }\n    return newIncomingTxs;\n  }\n\n  /**\n   * Transmutes a EtherscanTransaction into a TransactionMeta\n   *\n   * @param {EtherscanTransaction} etherscanTransaction - the transaction to normalize\n   * @param {string} chainId - The chainId of the current network\n   * @returns {TransactionMeta}\n   */\n  _normalizeTxFromEtherscan(etherscanTransaction, chainId) {\n    const time = parseInt(etherscanTransaction.timeStamp, 10) * 1000;\n    const status =\n      etherscanTransaction.isError === '0'\n        ? TRANSACTION_STATUSES.CONFIRMED\n        : TRANSACTION_STATUSES.FAILED;\n    const txParams = {\n      from: etherscanTransaction.from,\n      gas: bnToHex(new BN(etherscanTransaction.gas)),\n      nonce: bnToHex(new BN(etherscanTransaction.nonce)),\n      to: etherscanTransaction.to,\n      value: bnToHex(new BN(etherscanTransaction.value)),\n    };\n\n    if (etherscanTransaction.gasPrice) {\n      txParams.gasPrice = bnToHex(new BN(etherscanTransaction.gasPrice));\n    } else if (etherscanTransaction.maxFeePerGas) {\n      txParams.maxFeePerGas = bnToHex(\n        new BN(etherscanTransaction.maxFeePerGas),\n      );\n      txParams.maxPriorityFeePerGas = bnToHex(\n        new BN(etherscanTransaction.maxPriorityFeePerGas),\n      );\n    }\n\n    return {\n      blockNumber: etherscanTransaction.blockNumber,\n      id: createId(),\n      chainId,\n      metamaskNetworkId: CHAIN_ID_TO_NETWORK_ID_MAP[chainId],\n      status,\n      time,\n      txParams,\n      hash: etherscanTransaction.hash,\n      type: TRANSACTION_TYPES.INCOMING,\n    };\n  }\n}\n\n/**\n * Returns a function with arity 1 that caches the argument that the function\n * is called with and invokes the comparator with both the cached, previous,\n * value and the current value. If specified, the initialValue will be passed\n * in as the previous value on the first invocation of the returned method.\n *\n * @template A - The type of the compared value.\n * @param {(prevValue: A, nextValue: A) => void} comparator - A method to compare\n * the previous and next values.\n * @param {A} [initialValue] - The initial value to supply to prevValue\n * on first call of the method.\n */\nfunction previousValueComparator(comparator, initialValue) {\n  let first = true;\n  let cache;\n  return (value) => {\n    try {\n      if (first) {\n        first = false;\n        return comparator(initialValue ?? value, value);\n      }\n      return comparator(cache, value);\n    } finally {\n      cache = value;\n    }\n  };\n}\n","import { ObservableStore } from '@metamask/obs-store';\nimport {\n  TOGGLEABLE_ALERT_TYPES,\n  WEB3_SHIM_USAGE_ALERT_STATES,\n} from '../../../shared/constants/alerts';\n\n/**\n * @typedef {Object} AlertControllerInitState\n * @property {Object} alertEnabledness - A map of alerts IDs to booleans, where\n * `true` indicates that the alert is enabled and shown, and `false` the opposite.\n * @property {Object} unconnectedAccountAlertShownOrigins - A map of origin\n * strings to booleans indicating whether the \"switch to connected\" alert has\n * been shown (`true`) or otherwise (`false`).\n */\n\n/**\n * @typedef {Object} AlertControllerOptions\n * @property {AlertControllerInitState} initState - The initial controller state\n */\n\nconst defaultState = {\n  alertEnabledness: TOGGLEABLE_ALERT_TYPES.reduce(\n    (alertEnabledness, alertType) => {\n      alertEnabledness[alertType] = true;\n      return alertEnabledness;\n    },\n    {},\n  ),\n  unconnectedAccountAlertShownOrigins: {},\n  web3ShimUsageOrigins: {},\n};\n\n/**\n * Controller responsible for maintaining alert-related state.\n */\nexport default class AlertController {\n  /**\n   * @param {AlertControllerOptions} [opts] - Controller configuration parameters\n   */\n  constructor(opts = {}) {\n    const { initState = {}, preferencesStore } = opts;\n    const state = {\n      ...defaultState,\n      alertEnabledness: {\n        ...defaultState.alertEnabledness,\n        ...initState.alertEnabledness,\n      },\n    };\n\n    this.store = new ObservableStore(state);\n\n    this.selectedAddress = preferencesStore.getState().selectedAddress;\n\n    preferencesStore.subscribe(({ selectedAddress }) => {\n      const currentState = this.store.getState();\n      if (\n        currentState.unconnectedAccountAlertShownOrigins &&\n        this.selectedAddress !== selectedAddress\n      ) {\n        this.selectedAddress = selectedAddress;\n        this.store.updateState({ unconnectedAccountAlertShownOrigins: {} });\n      }\n    });\n  }\n\n  setAlertEnabledness(alertId, enabledness) {\n    let { alertEnabledness } = this.store.getState();\n    alertEnabledness = { ...alertEnabledness };\n    alertEnabledness[alertId] = enabledness;\n    this.store.updateState({ alertEnabledness });\n  }\n\n  /**\n   * Sets the \"switch to connected\" alert as shown for the given origin\n   *\n   * @param {string} origin - The origin the alert has been shown for\n   */\n  setUnconnectedAccountAlertShown(origin) {\n    let { unconnectedAccountAlertShownOrigins } = this.store.getState();\n    unconnectedAccountAlertShownOrigins = {\n      ...unconnectedAccountAlertShownOrigins,\n    };\n    unconnectedAccountAlertShownOrigins[origin] = true;\n    this.store.updateState({ unconnectedAccountAlertShownOrigins });\n  }\n\n  /**\n   * Gets the web3 shim usage state for the given origin.\n   *\n   * @param {string} origin - The origin to get the web3 shim usage state for.\n   * @returns {undefined | 1 | 2} The web3 shim usage state for the given\n   * origin, or undefined.\n   */\n  getWeb3ShimUsageState(origin) {\n    return this.store.getState().web3ShimUsageOrigins[origin];\n  }\n\n  /**\n   * Sets the web3 shim usage state for the given origin to RECORDED.\n   *\n   * @param {string} origin - The origin the that used the web3 shim.\n   */\n  setWeb3ShimUsageRecorded(origin) {\n    this._setWeb3ShimUsageState(origin, WEB3_SHIM_USAGE_ALERT_STATES.RECORDED);\n  }\n\n  /**\n   * Sets the web3 shim usage state for the given origin to DISMISSED.\n   *\n   * @param {string} origin - The origin that the web3 shim notification was\n   * dismissed for.\n   */\n  setWeb3ShimUsageAlertDismissed(origin) {\n    this._setWeb3ShimUsageState(origin, WEB3_SHIM_USAGE_ALERT_STATES.DISMISSED);\n  }\n\n  /**\n   * @private\n   * @param {string} origin - The origin to set the state for.\n   * @param {number} value - The state value to set.\n   */\n  _setWeb3ShimUsageState(origin, value) {\n    let { web3ShimUsageOrigins } = this.store.getState();\n    web3ShimUsageOrigins = {\n      ...web3ShimUsageOrigins,\n    };\n    web3ShimUsageOrigins[origin] = value;\n    this.store.updateState({ web3ShimUsageOrigins });\n  }\n}\n","import EventEmitter from 'events';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { bufferToHex, stripHexPrefix } from 'ethereumjs-util';\nimport { ethErrors } from 'eth-rpc-errors';\nimport log from 'loglevel';\nimport { MESSAGE_TYPE } from '../../../shared/constants/app';\nimport { METAMASK_CONTROLLER_EVENTS } from '../metamask-controller';\nimport createId from '../../../shared/modules/random-id';\nimport { addHexPrefix } from './util';\n\nconst hexRe = /^[0-9A-Fa-f]+$/gu;\n\n/**\n * Represents, and contains data about, an 'personal_sign' type signature request. These are created when a\n * signature for an personal_sign call is requested.\n *\n * @see {@link https://web3js.readthedocs.io/en/1.0/web3-eth-personal.html#sign}\n * @typedef {Object} PersonalMessage\n * @property {number} id An id to track and identify the message object\n * @property {Object} msgParams The parameters to pass to the personal_sign method once the signature request is\n * approved.\n * @property {Object} msgParams.metamaskId Added to msgParams for tracking and identification within MetaMask.\n * @property {string} msgParams.data A hex string conversion of the raw buffer data of the signature request\n * @property {number} time The epoch time at which the this message was created\n * @property {string} status Indicates whether the signature request is 'unapproved', 'approved', 'signed' or 'rejected'\n * @property {string} type The json-prc signing method for which a signature request has been made. A 'Message' will\n * always have a 'personal_sign' type.\n */\n\nexport default class PersonalMessageManager extends EventEmitter {\n  /**\n   * Controller in charge of managing - storing, adding, removing, updating - PersonalMessage.\n   *\n   * @param options\n   * @param options.metricsEvent\n   */\n  constructor({ metricsEvent }) {\n    super();\n    this.memStore = new ObservableStore({\n      unapprovedPersonalMsgs: {},\n      unapprovedPersonalMsgCount: 0,\n    });\n    this.messages = [];\n    this.metricsEvent = metricsEvent;\n  }\n\n  /**\n   * A getter for the number of 'unapproved' PersonalMessages in this.messages\n   *\n   * @returns {number} The number of 'unapproved' PersonalMessages in this.messages\n   */\n  get unapprovedPersonalMsgCount() {\n    return Object.keys(this.getUnapprovedMsgs()).length;\n  }\n\n  /**\n   * A getter for the 'unapproved' PersonalMessages in this.messages\n   *\n   * @returns {Object} An index of PersonalMessage ids to PersonalMessages, for all 'unapproved' PersonalMessages in\n   * this.messages\n   */\n  getUnapprovedMsgs() {\n    return this.messages\n      .filter((msg) => msg.status === 'unapproved')\n      .reduce((result, msg) => {\n        result[msg.id] = msg;\n        return result;\n      }, {});\n  }\n\n  /**\n   * Creates a new PersonalMessage with an 'unapproved' status using the passed msgParams. this.addMsg is called to add\n   * the new PersonalMessage to this.messages, and to save the unapproved PersonalMessages from that list to\n   * this.memStore.\n   *\n   * @param {Object} msgParams - The params for the eth_sign call to be made after the message is approved.\n   * @param {Object} [req] - The original request object possibly containing the origin\n   * @returns {promise} When the message has been signed or rejected\n   */\n  addUnapprovedMessageAsync(msgParams, req) {\n    return new Promise((resolve, reject) => {\n      if (!msgParams.from) {\n        reject(\n          new Error('MetaMask Message Signature: from field is required.'),\n        );\n        return;\n      }\n      const msgId = this.addUnapprovedMessage(msgParams, req);\n      this.once(`${msgId}:finished`, (data) => {\n        switch (data.status) {\n          case 'signed':\n            resolve(data.rawSig);\n            return;\n          case 'rejected':\n            reject(\n              ethErrors.provider.userRejectedRequest(\n                'MetaMask Message Signature: User denied message signature.',\n              ),\n            );\n            return;\n          case 'errored':\n            reject(new Error(`MetaMask Message Signature: ${data.error}`));\n            return;\n          default:\n            reject(\n              new Error(\n                `MetaMask Message Signature: Unknown problem: ${JSON.stringify(\n                  msgParams,\n                )}`,\n              ),\n            );\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a new PersonalMessage with an 'unapproved' status using the passed msgParams. this.addMsg is called to add\n   * the new PersonalMessage to this.messages, and to save the unapproved PersonalMessages from that list to\n   * this.memStore.\n   *\n   * @param {Object} msgParams - The params for the eth_sign call to be made after the message is approved.\n   * @param {Object} [req] - The original request object possibly containing the origin\n   * @returns {number} The id of the newly created PersonalMessage.\n   */\n  addUnapprovedMessage(msgParams, req) {\n    log.debug(\n      `PersonalMessageManager addUnapprovedMessage: ${JSON.stringify(\n        msgParams,\n      )}`,\n    );\n    // add origin from request\n    if (req) {\n      msgParams.origin = req.origin;\n    }\n    msgParams.data = this.normalizeMsgData(msgParams.data);\n    // create txData obj with parameters and meta data\n    const time = new Date().getTime();\n    const msgId = createId();\n    const msgData = {\n      id: msgId,\n      msgParams,\n      time,\n      status: 'unapproved',\n      type: MESSAGE_TYPE.PERSONAL_SIGN,\n    };\n    this.addMsg(msgData);\n\n    // signal update\n    this.emit('update');\n    return msgId;\n  }\n\n  /**\n   * Adds a passed PersonalMessage to this.messages, and calls this._saveMsgList() to save the unapproved PersonalMessages from that\n   * list to this.memStore.\n   *\n   * @param {Message} msg - The PersonalMessage to add to this.messages\n   */\n  addMsg(msg) {\n    this.messages.push(msg);\n    this._saveMsgList();\n  }\n\n  /**\n   * Returns a specified PersonalMessage.\n   *\n   * @param {number} msgId - The id of the PersonalMessage to get\n   * @returns {PersonalMessage|undefined} The PersonalMessage with the id that matches the passed msgId, or undefined\n   * if no PersonalMessage has that id.\n   */\n  getMsg(msgId) {\n    return this.messages.find((msg) => msg.id === msgId);\n  }\n\n  /**\n   * Approves a PersonalMessage. Sets the message status via a call to this.setMsgStatusApproved, and returns a promise\n   * with any the message params modified for proper signing.\n   *\n   * @param {Object} msgParams - The msgParams to be used when eth_sign is called, plus data added by MetaMask.\n   * @param {Object} msgParams.metamaskId - Added to msgParams for tracking and identification within MetaMask.\n   * @returns {Promise<object>} Promises the msgParams object with metamaskId removed.\n   */\n  approveMessage(msgParams) {\n    this.setMsgStatusApproved(msgParams.metamaskId);\n    return this.prepMsgForSigning(msgParams);\n  }\n\n  /**\n   * Sets a PersonalMessage status to 'approved' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the PersonalMessage to approve.\n   */\n  setMsgStatusApproved(msgId) {\n    this._setMsgStatus(msgId, 'approved');\n  }\n\n  /**\n   * Sets a PersonalMessage status to 'signed' via a call to this._setMsgStatus and updates that PersonalMessage in\n   * this.messages by adding the raw signature data of the signature request to the PersonalMessage\n   *\n   * @param {number} msgId - The id of the PersonalMessage to sign.\n   * @param {buffer} rawSig - The raw data of the signature request\n   */\n  setMsgStatusSigned(msgId, rawSig) {\n    const msg = this.getMsg(msgId);\n    msg.rawSig = rawSig;\n    this._updateMsg(msg);\n    this._setMsgStatus(msgId, 'signed');\n  }\n\n  /**\n   * Removes the metamaskId property from passed msgParams and returns a promise which resolves the updated msgParams\n   *\n   * @param {Object} msgParams - The msgParams to modify\n   * @returns {Promise<object>} Promises the msgParams with the metamaskId property removed\n   */\n  prepMsgForSigning(msgParams) {\n    delete msgParams.metamaskId;\n    return Promise.resolve(msgParams);\n  }\n\n  /**\n   * Sets a PersonalMessage status to 'rejected' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the PersonalMessage to reject.\n   * @param reason\n   */\n  rejectMsg(msgId, reason = undefined) {\n    if (reason) {\n      const msg = this.getMsg(msgId);\n      this.metricsEvent({\n        event: reason,\n        category: 'Transactions',\n        properties: {\n          action: 'Sign Request',\n          type: msg.type,\n        },\n      });\n    }\n    this._setMsgStatus(msgId, 'rejected');\n  }\n\n  /**\n   * Sets a Message status to 'errored' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the Message to error\n   * @param error\n   */\n  errorMessage(msgId, error) {\n    const msg = this.getMsg(msgId);\n    msg.error = error;\n    this._updateMsg(msg);\n    this._setMsgStatus(msgId, 'errored');\n  }\n\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    this.messages = this.messages.filter((msg) => msg.status !== 'unapproved');\n    this._saveMsgList();\n  }\n\n  /**\n   * Updates the status of a PersonalMessage in this.messages via a call to this._updateMsg\n   *\n   * @private\n   * @param {number} msgId - The id of the PersonalMessage to update.\n   * @param {string} status - The new status of the PersonalMessage.\n   * @throws A 'PersonalMessageManager - PersonalMessage not found for id: \"${msgId}\".' if there is no PersonalMessage\n   * in this.messages with an id equal to the passed msgId\n   * @fires An event with a name equal to `${msgId}:${status}`. The PersonalMessage is also fired.\n   * @fires If status is 'rejected' or 'signed', an event with a name equal to `${msgId}:finished` is fired along\n   * with the PersonalMessage\n   */\n  _setMsgStatus(msgId, status) {\n    const msg = this.getMsg(msgId);\n    if (!msg) {\n      throw new Error(\n        `PersonalMessageManager - Message not found for id: \"${msgId}\".`,\n      );\n    }\n    msg.status = status;\n    this._updateMsg(msg);\n    this.emit(`${msgId}:${status}`, msg);\n    if (status === 'rejected' || status === 'signed') {\n      this.emit(`${msgId}:finished`, msg);\n    }\n  }\n\n  /**\n   * Sets a PersonalMessage in this.messages to the passed PersonalMessage if the ids are equal. Then saves the\n   * unapprovedPersonalMsgs index to storage via this._saveMsgList\n   *\n   * @private\n   * @param {PersonalMessage} msg - A PersonalMessage that will replace an existing PersonalMessage (with the same\n   * id) in this.messages\n   */\n  _updateMsg(msg) {\n    const index = this.messages.findIndex((message) => message.id === msg.id);\n    if (index !== -1) {\n      this.messages[index] = msg;\n    }\n    this._saveMsgList();\n  }\n\n  /**\n   * Saves the unapproved PersonalMessages, and their count, to this.memStore\n   *\n   * @private\n   * @fires 'updateBadge'\n   */\n  _saveMsgList() {\n    const unapprovedPersonalMsgs = this.getUnapprovedMsgs();\n    const unapprovedPersonalMsgCount = Object.keys(unapprovedPersonalMsgs)\n      .length;\n    this.memStore.updateState({\n      unapprovedPersonalMsgs,\n      unapprovedPersonalMsgCount,\n    });\n    this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);\n  }\n\n  /**\n   * A helper function that converts raw buffer data to a hex, or just returns the data if it is already formatted as a hex.\n   *\n   * @param {any} data - The buffer data to convert to a hex\n   * @returns {string} A hex string conversion of the buffer data\n   */\n  normalizeMsgData(data) {\n    try {\n      const stripped = stripHexPrefix(data);\n      if (stripped.match(hexRe)) {\n        return addHexPrefix(stripped);\n      }\n    } catch (e) {\n      log.debug(`Message was not hex encoded, interpreting as utf8.`);\n    }\n\n    return bufferToHex(Buffer.from(data, 'utf8'));\n  }\n}\n","import log from 'loglevel';\nimport extension from 'extensionizer';\n\n/**\n * Returns a middleware that intercepts `wallet_registerOnboarding` messages\n *\n * @param {{ location: string, registerOnboarding: Function }} opts - The middleware options\n * @returns {(req: any, res: any, next: Function, end: Function) => void}\n */\nexport default function createOnboardingMiddleware({\n  location,\n  registerOnboarding,\n}) {\n  return async function originMiddleware(req, res, next, end) {\n    try {\n      if (req.method !== 'wallet_registerOnboarding') {\n        next();\n        return;\n      }\n      if (req.tabId && req.tabId !== extension.tabs.TAB_ID_NONE) {\n        await registerOnboarding(location, req.tabId);\n      } else {\n        log.debug(\n          `'wallet_registerOnboarding' message from ${location} ignored due to missing tabId`,\n        );\n      }\n      res.result = true;\n      end();\n    } catch (error) {\n      end(error);\n    }\n  };\n}\n","import EventEmitter from 'events';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { ethErrors } from 'eth-rpc-errors';\nimport log from 'loglevel';\nimport { MESSAGE_TYPE } from '../../../shared/constants/app';\nimport { METAMASK_CONTROLLER_EVENTS } from '../metamask-controller';\nimport createId from '../../../shared/modules/random-id';\n\n/**\n * Represents, and contains data about, an 'eth_getEncryptionPublicKey' type request. These are created when\n * an eth_getEncryptionPublicKey call is requested.\n *\n * @typedef {Object} EncryptionPublicKey\n * @property {number} id An id to track and identify the message object\n * @property {Object} msgParams The parameters to pass to the encryptionPublicKey method once the request is\n * approved.\n * @property {Object} msgParams.metamaskId Added to msgParams for tracking and identification within MetaMask.\n * @property {string} msgParams.data A hex string conversion of the raw buffer data of the request\n * @property {number} time The epoch time at which the this message was created\n * @property {string} status Indicates whether the request is 'unapproved', 'approved', 'received' or 'rejected'\n * @property {string} type The json-prc method for which a request has been made. A 'Message' will\n * always have a 'eth_getEncryptionPublicKey' type.\n */\n\nexport default class EncryptionPublicKeyManager extends EventEmitter {\n  /**\n   * Controller in charge of managing - storing, adding, removing, updating - EncryptionPublicKey.\n   *\n   * @param {object} opts - Controller options\n   * @param {Function} opts.metricEvent - A function for emitting a metric event.\n   */\n  constructor(opts) {\n    super();\n    this.memStore = new ObservableStore({\n      unapprovedEncryptionPublicKeyMsgs: {},\n      unapprovedEncryptionPublicKeyMsgCount: 0,\n    });\n    this.messages = [];\n    this.metricsEvent = opts.metricsEvent;\n  }\n\n  /**\n   * A getter for the number of 'unapproved' EncryptionPublicKeys in this.messages\n   *\n   * @returns {number} The number of 'unapproved' EncryptionPublicKeys in this.messages\n   */\n  get unapprovedEncryptionPublicKeyMsgCount() {\n    return Object.keys(this.getUnapprovedMsgs()).length;\n  }\n\n  /**\n   * A getter for the 'unapproved' EncryptionPublicKeys in this.messages\n   *\n   * @returns {Object} An index of EncryptionPublicKey ids to EncryptionPublicKeys, for all 'unapproved' EncryptionPublicKeys in\n   * this.messages\n   */\n  getUnapprovedMsgs() {\n    return this.messages\n      .filter((msg) => msg.status === 'unapproved')\n      .reduce((result, msg) => {\n        result[msg.id] = msg;\n        return result;\n      }, {});\n  }\n\n  /**\n   * Creates a new EncryptionPublicKey with an 'unapproved' status using the passed msgParams. this.addMsg is called to add\n   * the new EncryptionPublicKey to this.messages, and to save the unapproved EncryptionPublicKeys from that list to\n   * this.memStore.\n   *\n   * @param {Object} address - The param for the eth_getEncryptionPublicKey call to be made after the message is approved.\n   * @param {Object} [req] - The original request object possibly containing the origin\n   * @returns {Promise<Buffer>} The raw public key contents\n   */\n  addUnapprovedMessageAsync(address, req) {\n    return new Promise((resolve, reject) => {\n      if (!address) {\n        reject(new Error('MetaMask Message: address field is required.'));\n        return;\n      }\n      const msgId = this.addUnapprovedMessage(address, req);\n      this.once(`${msgId}:finished`, (data) => {\n        switch (data.status) {\n          case 'received':\n            resolve(data.rawData);\n            return;\n          case 'rejected':\n            reject(\n              ethErrors.provider.userRejectedRequest(\n                'MetaMask EncryptionPublicKey: User denied message EncryptionPublicKey.',\n              ),\n            );\n            return;\n          default:\n            reject(\n              new Error(\n                `MetaMask EncryptionPublicKey: Unknown problem: ${JSON.stringify(\n                  address,\n                )}`,\n              ),\n            );\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a new EncryptionPublicKey with an 'unapproved' status using the passed msgParams. this.addMsg is called to add\n   * the new EncryptionPublicKey to this.messages, and to save the unapproved EncryptionPublicKeys from that list to\n   * this.memStore.\n   *\n   * @param {Object} address - The param for the eth_getEncryptionPublicKey call to be made after the message is approved.\n   * @param {Object} [req] - The original request object possibly containing the origin\n   * @returns {number} The id of the newly created EncryptionPublicKey.\n   */\n  addUnapprovedMessage(address, req) {\n    log.debug(`EncryptionPublicKeyManager addUnapprovedMessage: address`);\n    // create txData obj with parameters and meta data\n    const time = new Date().getTime();\n    const msgId = createId();\n    const msgData = {\n      id: msgId,\n      msgParams: address,\n      time,\n      status: 'unapproved',\n      type: MESSAGE_TYPE.ETH_GET_ENCRYPTION_PUBLIC_KEY,\n    };\n\n    if (req) {\n      msgData.origin = req.origin;\n    }\n\n    this.addMsg(msgData);\n\n    // signal update\n    this.emit('update');\n    return msgId;\n  }\n\n  /**\n   * Adds a passed EncryptionPublicKey to this.messages, and calls this._saveMsgList() to save the unapproved EncryptionPublicKeys from that\n   * list to this.memStore.\n   *\n   * @param {Message} msg - The EncryptionPublicKey to add to this.messages\n   */\n  addMsg(msg) {\n    this.messages.push(msg);\n    this._saveMsgList();\n  }\n\n  /**\n   * Returns a specified EncryptionPublicKey.\n   *\n   * @param {number} msgId - The id of the EncryptionPublicKey to get\n   * @returns {EncryptionPublicKey|undefined} The EncryptionPublicKey with the id that matches the passed msgId, or undefined\n   * if no EncryptionPublicKey has that id.\n   */\n  getMsg(msgId) {\n    return this.messages.find((msg) => msg.id === msgId);\n  }\n\n  /**\n   * Approves a EncryptionPublicKey. Sets the message status via a call to this.setMsgStatusApproved, and returns a promise\n   * with any the message params modified for proper providing.\n   *\n   * @param {Object} msgParams - The msgParams to be used when eth_getEncryptionPublicKey is called, plus data added by MetaMask.\n   * @param {Object} msgParams.metamaskId - Added to msgParams for tracking and identification within MetaMask.\n   * @returns {Promise<object>} Promises the msgParams object with metamaskId removed.\n   */\n  approveMessage(msgParams) {\n    this.setMsgStatusApproved(msgParams.metamaskId);\n    return this.prepMsgForEncryptionPublicKey(msgParams);\n  }\n\n  /**\n   * Sets a EncryptionPublicKey status to 'approved' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the EncryptionPublicKey to approve.\n   */\n  setMsgStatusApproved(msgId) {\n    this._setMsgStatus(msgId, 'approved');\n  }\n\n  /**\n   * Sets a EncryptionPublicKey status to 'received' via a call to this._setMsgStatus and updates that EncryptionPublicKey in\n   * this.messages by adding the raw data of request to the EncryptionPublicKey\n   *\n   * @param {number} msgId - The id of the EncryptionPublicKey.\n   * @param {buffer} rawData - The raw data of the message request\n   */\n  setMsgStatusReceived(msgId, rawData) {\n    const msg = this.getMsg(msgId);\n    msg.rawData = rawData;\n    this._updateMsg(msg);\n    this._setMsgStatus(msgId, 'received');\n  }\n\n  /**\n   * Removes the metamaskId property from passed msgParams and returns a promise which resolves the updated msgParams\n   *\n   * @param {Object} msgParams - The msgParams to modify\n   * @returns {Promise<object>} Promises the msgParams with the metamaskId property removed\n   */\n  prepMsgForEncryptionPublicKey(msgParams) {\n    delete msgParams.metamaskId;\n    return Promise.resolve(msgParams);\n  }\n\n  /**\n   * Sets a EncryptionPublicKey status to 'rejected' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the EncryptionPublicKey to reject.\n   * @param reason\n   */\n  rejectMsg(msgId, reason = undefined) {\n    if (reason) {\n      this.metricsEvent({\n        event: reason,\n        category: 'Messages',\n        properties: {\n          action: 'Encryption public key Request',\n        },\n      });\n    }\n    this._setMsgStatus(msgId, 'rejected');\n  }\n\n  /**\n   * Sets a TypedMessage status to 'errored' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the TypedMessage to error\n   * @param error\n   */\n  errorMessage(msgId, error) {\n    const msg = this.getMsg(msgId);\n    msg.error = error;\n    this._updateMsg(msg);\n    this._setMsgStatus(msgId, 'errored');\n  }\n\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    this.messages = this.messages.filter((msg) => msg.status !== 'unapproved');\n    this._saveMsgList();\n  }\n\n  /**\n   * Updates the status of a EncryptionPublicKey in this.messages via a call to this._updateMsg\n   *\n   * @private\n   * @param {number} msgId - The id of the EncryptionPublicKey to update.\n   * @param {string} status - The new status of the EncryptionPublicKey.\n   * @throws A 'EncryptionPublicKeyManager - EncryptionPublicKey not found for id: \"${msgId}\".' if there is no EncryptionPublicKey\n   * in this.messages with an id equal to the passed msgId\n   * @fires An event with a name equal to `${msgId}:${status}`. The EncryptionPublicKey is also fired.\n   * @fires If status is 'rejected' or 'received', an event with a name equal to `${msgId}:finished` is fired along\n   * with the EncryptionPublicKey\n   */\n  _setMsgStatus(msgId, status) {\n    const msg = this.getMsg(msgId);\n    if (!msg) {\n      throw new Error(\n        `EncryptionPublicKeyManager - Message not found for id: \"${msgId}\".`,\n      );\n    }\n    msg.status = status;\n    this._updateMsg(msg);\n    this.emit(`${msgId}:${status}`, msg);\n    if (status === 'rejected' || status === 'received') {\n      this.emit(`${msgId}:finished`, msg);\n    }\n  }\n\n  /**\n   * Sets a EncryptionPublicKey in this.messages to the passed EncryptionPublicKey if the ids are equal. Then saves the\n   * unapprovedEncryptionPublicKeyMsgs index to storage via this._saveMsgList\n   *\n   * @private\n   * @param {EncryptionPublicKey} msg - A EncryptionPublicKey that will replace an existing EncryptionPublicKey (with the same\n   * id) in this.messages\n   */\n  _updateMsg(msg) {\n    const index = this.messages.findIndex((message) => message.id === msg.id);\n    if (index !== -1) {\n      this.messages[index] = msg;\n    }\n    this._saveMsgList();\n  }\n\n  /**\n   * Saves the unapproved EncryptionPublicKeys, and their count, to this.memStore\n   *\n   * @private\n   * @fires 'updateBadge'\n   */\n  _saveMsgList() {\n    const unapprovedEncryptionPublicKeyMsgs = this.getUnapprovedMsgs();\n    const unapprovedEncryptionPublicKeyMsgCount = Object.keys(\n      unapprovedEncryptionPublicKeyMsgs,\n    ).length;\n    this.memStore.updateState({\n      unapprovedEncryptionPublicKeyMsgs,\n      unapprovedEncryptionPublicKeyMsgCount,\n    });\n    this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);\n  }\n}\n","import { strict as assert } from 'assert';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { normalize as normalizeAddress } from 'eth-sig-util';\nimport { ethers } from 'ethers';\nimport log from 'loglevel';\nimport {\n  IPFS_DEFAULT_GATEWAY_URL,\n  NETWORK_TYPE_TO_ID_MAP,\n} from '../../../shared/constants/network';\nimport { isPrefixedFormattedHexString } from '../../../shared/modules/network.utils';\nimport { LEDGER_TRANSPORT_TYPES } from '../../../shared/constants/hardware-wallets';\nimport { NETWORK_EVENTS } from './network';\n\nexport default class PreferencesController {\n  /**\n   *\n   * @typedef {Object} PreferencesController\n   * @param {Object} opts - Overrides the defaults for the initial state of this.store\n   * @property {Object} store The stored object containing a users preferences, stored in local storage\n   * @property {Array} store.frequentRpcList A list of custom rpcs to provide the user\n   * @property {boolean} store.useBlockie The users preference for blockie identicons within the UI\n   * @property {boolean} store.useNonceField The users preference for nonce field within the UI\n   * @property {Object} store.featureFlags A key-boolean map, where keys refer to features and booleans to whether the\n   * user wishes to see that feature.\n   *\n   * Feature flags can be set by the global function `setPreference(feature, enabled)`, and so should not expose any sensitive behavior.\n   * @property {Object} store.knownMethodData Contains all data methods known by the user\n   * @property {string} store.currentLocale The preferred language locale key\n   * @property {string} store.selectedAddress A hex string that matches the currently selected address in the app\n   */\n  constructor(opts = {}) {\n    const initState = {\n      frequentRpcListDetail: [],\n      useBlockie: false,\n      useNonceField: false,\n      usePhishDetect: true,\n      dismissSeedBackUpReminder: false,\n\n      // set to true means the dynamic list from the API is being used\n      // set to false will be using the static list from contract-metadata\n      useTokenDetection: false,\n      useCollectibleDetection: false,\n      openSeaEnabled: false,\n      advancedGasFee: null,\n\n      // WARNING: Do not use feature flags for security-sensitive things.\n      // Feature flag toggling is available in the global namespace\n      // for convenient testing of pre-release features, and should never\n      // perform sensitive operations.\n      featureFlags: {\n        showIncomingTransactions: true,\n      },\n      knownMethodData: {},\n      currentLocale: opts.initLangCode,\n      identities: {},\n      lostIdentities: {},\n      forgottenPassword: false,\n      preferences: {\n        autoLockTimeLimit: undefined,\n        showFiatInTestnets: false,\n        showTestNetworks: false,\n        useNativeCurrencyAsPrimaryCurrency: true,\n        hideZeroBalanceTokens: false,\n      },\n      // ENS decentralized website resolution\n      ipfsGateway: IPFS_DEFAULT_GATEWAY_URL,\n      infuraBlocked: null,\n      ledgerTransportType: window.navigator.hid\n        ? LEDGER_TRANSPORT_TYPES.WEBHID\n        : LEDGER_TRANSPORT_TYPES.U2F,\n      ...opts.initState,\n    };\n\n    this.network = opts.network;\n    this.ethersProvider = new ethers.providers.Web3Provider(opts.provider);\n    this.store = new ObservableStore(initState);\n    this.store.setMaxListeners(12);\n    this.openPopup = opts.openPopup;\n    this.migrateAddressBookState = opts.migrateAddressBookState;\n\n    this._subscribeToInfuraAvailability();\n\n    global.setPreference = (key, value) => {\n      return this.setFeatureFlag(key, value);\n    };\n  }\n  // PUBLIC METHODS\n\n  /**\n   * Sets the {@code forgottenPassword} state property\n   *\n   * @param {boolean} forgottenPassword - whether or not the user has forgotten their password\n   */\n  setPasswordForgotten(forgottenPassword) {\n    this.store.updateState({ forgottenPassword });\n  }\n\n  /**\n   * Setter for the `useBlockie` property\n   *\n   * @param {boolean} val - Whether or not the user prefers blockie indicators\n   */\n  setUseBlockie(val) {\n    this.store.updateState({ useBlockie: val });\n  }\n\n  /**\n   * Setter for the `useNonceField` property\n   *\n   * @param {boolean} val - Whether or not the user prefers to set nonce\n   */\n  setUseNonceField(val) {\n    this.store.updateState({ useNonceField: val });\n  }\n\n  /**\n   * Setter for the `usePhishDetect` property\n   *\n   * @param {boolean} val - Whether or not the user prefers phishing domain protection\n   */\n  setUsePhishDetect(val) {\n    this.store.updateState({ usePhishDetect: val });\n  }\n\n  /**\n   * Setter for the `useTokenDetection` property\n   *\n   * @param {boolean} val - Whether or not the user prefers to use the static token list or dynamic token list from the API\n   */\n  setUseTokenDetection(val) {\n    this.store.updateState({ useTokenDetection: val });\n  }\n\n  /**\n   * Setter for the `useCollectibleDetection` property\n   *\n   * @param {boolean} useCollectibleDetection - Whether or not the user prefers to autodetect collectibles.\n   */\n  setUseCollectibleDetection(useCollectibleDetection) {\n    this.store.updateState({ useCollectibleDetection });\n  }\n\n  /**\n   * Setter for the `openSeaEnabled` property\n   *\n   * @param {boolean} openSeaEnabled - Whether or not the user prefers to use the OpenSea API for collectibles data.\n   */\n  setOpenSeaEnabled(openSeaEnabled) {\n    this.store.updateState({\n      openSeaEnabled,\n    });\n  }\n\n  /**\n   * Setter for the `advancedGasFee` property\n   *\n   * @param {object} val - holds the maxBaseFee and PriorityFee that the user set as default advanced settings.\n   */\n  setAdvancedGasFee(val) {\n    this.store.updateState({ advancedGasFee: val });\n  }\n\n  /**\n   * Setter for the `eip1559V2Enabled` property\n   *\n   * @param {object} val - holds the eip1559V2Enabled that the user set as experimental settings.\n   */\n  setEIP1559V2Enabled(val) {\n    this.store.updateState({ eip1559V2Enabled: val });\n  }\n\n  /**\n   * Add new methodData to state, to avoid requesting this information again through Infura\n   *\n   * @param {string} fourBytePrefix - Four-byte method signature\n   * @param {string} methodData - Corresponding data method\n   */\n  addKnownMethodData(fourBytePrefix, methodData) {\n    const { knownMethodData } = this.store.getState();\n    knownMethodData[fourBytePrefix] = methodData;\n    this.store.updateState({ knownMethodData });\n  }\n\n  /**\n   * Setter for the `currentLocale` property\n   *\n   * @param {string} key - he preferred language locale key\n   */\n  setCurrentLocale(key) {\n    const textDirection = ['ar', 'dv', 'fa', 'he', 'ku'].includes(key)\n      ? 'rtl'\n      : 'auto';\n    this.store.updateState({\n      currentLocale: key,\n      textDirection,\n    });\n    return textDirection;\n  }\n\n  /**\n   * Updates identities to only include specified addresses. Removes identities\n   * not included in addresses array\n   *\n   * @param {string[]} addresses - An array of hex addresses\n   */\n  setAddresses(addresses) {\n    const oldIdentities = this.store.getState().identities;\n\n    const identities = addresses.reduce((ids, address, index) => {\n      const oldId = oldIdentities[address] || {};\n      ids[address] = { name: `Account ${index + 1}`, address, ...oldId };\n      return ids;\n    }, {});\n\n    this.store.updateState({ identities });\n  }\n\n  /**\n   * Removes an address from state\n   *\n   * @param {string} address - A hex address\n   * @returns {string} the address that was removed\n   */\n  removeAddress(address) {\n    const { identities } = this.store.getState();\n\n    if (!identities[address]) {\n      throw new Error(`${address} can't be deleted cause it was not found`);\n    }\n    delete identities[address];\n    this.store.updateState({ identities });\n\n    // If the selected account is no longer valid,\n    // select an arbitrary other account:\n    if (address === this.getSelectedAddress()) {\n      const selected = Object.keys(identities)[0];\n      this.setSelectedAddress(selected);\n    }\n    return address;\n  }\n\n  /**\n   * Adds addresses to the identities object without removing identities\n   *\n   * @param {string[]} addresses - An array of hex addresses\n   */\n  addAddresses(addresses) {\n    const { identities } = this.store.getState();\n    addresses.forEach((address) => {\n      // skip if already exists\n      if (identities[address]) {\n        return;\n      }\n      // add missing identity\n      const identityCount = Object.keys(identities).length;\n\n      identities[address] = { name: `Account ${identityCount + 1}`, address };\n    });\n    this.store.updateState({ identities });\n  }\n\n  /**\n   * Synchronizes identity entries with known accounts.\n   * Removes any unknown identities, and returns the resulting selected address.\n   *\n   * @param {Array<string>} addresses - known to the vault.\n   * @returns {Promise<string>} selectedAddress the selected address.\n   */\n  syncAddresses(addresses) {\n    if (!Array.isArray(addresses) || addresses.length === 0) {\n      throw new Error('Expected non-empty array of addresses. Error #11201');\n    }\n\n    const { identities, lostIdentities } = this.store.getState();\n\n    const newlyLost = {};\n    Object.keys(identities).forEach((identity) => {\n      if (!addresses.includes(identity)) {\n        newlyLost[identity] = identities[identity];\n        delete identities[identity];\n      }\n    });\n\n    // Identities are no longer present.\n    if (Object.keys(newlyLost).length > 0) {\n      // store lost accounts\n      Object.keys(newlyLost).forEach((key) => {\n        lostIdentities[key] = newlyLost[key];\n      });\n    }\n\n    this.store.updateState({ identities, lostIdentities });\n    this.addAddresses(addresses);\n\n    // If the selected account is no longer valid,\n    // select an arbitrary other account:\n    let selected = this.getSelectedAddress();\n    if (!addresses.includes(selected)) {\n      selected = addresses[0];\n      this.setSelectedAddress(selected);\n    }\n\n    return selected;\n  }\n\n  /**\n   * Setter for the `selectedAddress` property\n   *\n   * @param {string} _address - A new hex address for an account\n   */\n  setSelectedAddress(_address) {\n    const address = normalizeAddress(_address);\n\n    const { identities } = this.store.getState();\n    const selectedIdentity = identities[address];\n    if (!selectedIdentity) {\n      throw new Error(`Identity for '${address} not found`);\n    }\n\n    selectedIdentity.lastSelected = Date.now();\n    this.store.updateState({ identities, selectedAddress: address });\n  }\n\n  /**\n   * Getter for the `selectedAddress` property\n   *\n   * @returns {string} The hex address for the currently selected account\n   */\n  getSelectedAddress() {\n    return this.store.getState().selectedAddress;\n  }\n\n  /**\n   * Sets a custom label for an account\n   *\n   * @param {string} account - the account to set a label for\n   * @param {string} label - the custom label for the account\n   * @returns {Promise<string>}\n   */\n  setAccountLabel(account, label) {\n    if (!account) {\n      throw new Error(\n        `setAccountLabel requires a valid address, got ${String(account)}`,\n      );\n    }\n    const address = normalizeAddress(account);\n    const { identities } = this.store.getState();\n    identities[address] = identities[address] || {};\n    identities[address].name = label;\n    this.store.updateState({ identities });\n    return Promise.resolve(label);\n  }\n\n  /**\n   * updates custom RPC details\n   *\n   * @param {Object} newRpcDetails - Options bag.\n   * @param {string} newRpcDetails.rpcUrl - The RPC url to add to frequentRpcList.\n   * @param {string} newRpcDetails.chainId - The chainId of the selected network.\n   * @param {string} [newRpcDetails.ticker] - Optional ticker symbol of the selected network.\n   * @param {string} [newRpcDetails.nickname] - Optional nickname of the selected network.\n   * @param {Object} [newRpcDetails.rpcPrefs] - Optional RPC preferences, such as the block explorer URL\n   */\n  async updateRpc(newRpcDetails) {\n    const rpcList = this.getFrequentRpcListDetail();\n    const index = rpcList.findIndex((element) => {\n      return element.rpcUrl === newRpcDetails.rpcUrl;\n    });\n    if (index > -1) {\n      const rpcDetail = rpcList[index];\n      const updatedRpc = { ...rpcDetail, ...newRpcDetails };\n      if (rpcDetail.chainId !== updatedRpc.chainId) {\n        // When the chainId is changed, associated address book entries should\n        // also be migrated. The address book entries are keyed by the `network` state,\n        // which for custom networks is the chainId with a fallback to the networkId\n        // if the chainId is not set.\n\n        let addressBookKey = rpcDetail.chainId;\n        if (!addressBookKey) {\n          // We need to find the networkId to determine what these addresses were keyed by\n          try {\n            addressBookKey = await this.ethersProvider.send('net_version');\n            assert(typeof addressBookKey === 'string');\n          } catch (error) {\n            log.debug(error);\n            log.warn(\n              `Failed to get networkId from ${rpcDetail.rpcUrl}; skipping address book migration`,\n            );\n          }\n        }\n\n        // There is an edge case where two separate RPC endpoints are keyed by the same\n        // value. In this case, the contact book entries are duplicated so that they remain\n        // on both networks, since we don't know which network each contact is intended for.\n\n        let duplicate = false;\n        const builtInProviderNetworkIds = Object.values(\n          NETWORK_TYPE_TO_ID_MAP,\n        ).map((ids) => ids.networkId);\n        const otherRpcEntries = rpcList.filter(\n          (entry) => entry.rpcUrl !== newRpcDetails.rpcUrl,\n        );\n        if (\n          builtInProviderNetworkIds.includes(addressBookKey) ||\n          otherRpcEntries.some((entry) => entry.chainId === addressBookKey)\n        ) {\n          duplicate = true;\n        }\n\n        this.migrateAddressBookState(\n          addressBookKey,\n          updatedRpc.chainId,\n          duplicate,\n        );\n      }\n      rpcList[index] = updatedRpc;\n      this.store.updateState({ frequentRpcListDetail: rpcList });\n    } else {\n      const {\n        rpcUrl,\n        chainId,\n        ticker,\n        nickname,\n        rpcPrefs = {},\n      } = newRpcDetails;\n      this.addToFrequentRpcList(rpcUrl, chainId, ticker, nickname, rpcPrefs);\n    }\n  }\n\n  /**\n   * Adds custom RPC url to state.\n   *\n   * @param {string} rpcUrl - The RPC url to add to frequentRpcList.\n   * @param {string} chainId - The chainId of the selected network.\n   * @param {string} [ticker] - Ticker symbol of the selected network.\n   * @param {string} [nickname] - Nickname of the selected network.\n   * @param {Object} [rpcPrefs] - Optional RPC preferences, such as the block explorer URL\n   */\n  addToFrequentRpcList(\n    rpcUrl,\n    chainId,\n    ticker = 'ETH',\n    nickname = '',\n    rpcPrefs = {},\n  ) {\n    const rpcList = this.getFrequentRpcListDetail();\n\n    const index = rpcList.findIndex((element) => {\n      return element.rpcUrl === rpcUrl;\n    });\n    if (index !== -1) {\n      rpcList.splice(index, 1);\n    }\n\n    if (!isPrefixedFormattedHexString(chainId)) {\n      throw new Error(`Invalid chainId: \"${chainId}\"`);\n    }\n\n    rpcList.push({ rpcUrl, chainId, ticker, nickname, rpcPrefs });\n    this.store.updateState({ frequentRpcListDetail: rpcList });\n  }\n\n  /**\n   * Removes custom RPC url from state.\n   *\n   * @param {string} url - The RPC url to remove from frequentRpcList.\n   * @returns {Promise<Array>} Promise resolving to updated frequentRpcList.\n   */\n  removeFromFrequentRpcList(url) {\n    const rpcList = this.getFrequentRpcListDetail();\n    const index = rpcList.findIndex((element) => {\n      return element.rpcUrl === url;\n    });\n    if (index !== -1) {\n      rpcList.splice(index, 1);\n    }\n    this.store.updateState({ frequentRpcListDetail: rpcList });\n    return Promise.resolve(rpcList);\n  }\n\n  /**\n   * Getter for the `frequentRpcListDetail` property.\n   *\n   * @returns {Array<Array>} An array of rpc urls.\n   */\n  getFrequentRpcListDetail() {\n    return this.store.getState().frequentRpcListDetail;\n  }\n\n  /**\n   * Updates the `featureFlags` property, which is an object. One property within that object will be set to a boolean.\n   *\n   * @param {string} feature - A key that corresponds to a UI feature.\n   * @param {boolean} activated - Indicates whether or not the UI feature should be displayed\n   * @returns {Promise<object>} Promises a new object; the updated featureFlags object.\n   */\n  setFeatureFlag(feature, activated) {\n    const currentFeatureFlags = this.store.getState().featureFlags;\n    const updatedFeatureFlags = {\n      ...currentFeatureFlags,\n      [feature]: activated,\n    };\n\n    this.store.updateState({ featureFlags: updatedFeatureFlags });\n\n    return Promise.resolve(updatedFeatureFlags);\n  }\n\n  /**\n   * Updates the `preferences` property, which is an object. These are user-controlled features\n   * found in the settings page.\n   *\n   * @param {string} preference - The preference to enable or disable.\n   * @param {boolean} value - Indicates whether or not the preference should be enabled or disabled.\n   * @returns {Promise<object>} Promises a new object; the updated preferences object.\n   */\n  setPreference(preference, value) {\n    const currentPreferences = this.getPreferences();\n    const updatedPreferences = {\n      ...currentPreferences,\n      [preference]: value,\n    };\n\n    this.store.updateState({ preferences: updatedPreferences });\n    return Promise.resolve(updatedPreferences);\n  }\n\n  /**\n   * A getter for the `preferences` property\n   *\n   * @returns {Object} A key-boolean map of user-selected preferences.\n   */\n  getPreferences() {\n    return this.store.getState().preferences;\n  }\n\n  /**\n   * A getter for the `ipfsGateway` property\n   *\n   * @returns {string} The current IPFS gateway domain\n   */\n  getIpfsGateway() {\n    return this.store.getState().ipfsGateway;\n  }\n\n  /**\n   * A setter for the `ipfsGateway` property\n   *\n   * @param {string} domain - The new IPFS gateway domain\n   * @returns {Promise<string>} A promise of the update IPFS gateway domain\n   */\n  setIpfsGateway(domain) {\n    this.store.updateState({ ipfsGateway: domain });\n    return Promise.resolve(domain);\n  }\n\n  /**\n   * A setter for the `ledgerTransportType` property.\n   *\n   * @param {string} ledgerTransportType - Either 'ledgerLive', 'webhid' or 'u2f'\n   * @returns {string} The transport type that was set.\n   */\n  setLedgerTransportPreference(ledgerTransportType) {\n    this.store.updateState({ ledgerTransportType });\n    return ledgerTransportType;\n  }\n\n  /**\n   * A getter for the `ledgerTransportType` property.\n   *\n   * @returns {string} The current preferred Ledger transport type.\n   */\n  getLedgerTransportPreference() {\n    return this.store.getState().ledgerTransportType;\n  }\n\n  /**\n   * A setter for the user preference to dismiss the seed phrase backup reminder\n   *\n   * @param {bool} dismissSeedBackUpReminder - User preference for dismissing the back up reminder.\n   */\n  async setDismissSeedBackUpReminder(dismissSeedBackUpReminder) {\n    await this.store.updateState({\n      dismissSeedBackUpReminder,\n    });\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  _subscribeToInfuraAvailability() {\n    this.network.on(NETWORK_EVENTS.INFURA_IS_BLOCKED, () => {\n      this._setInfuraBlocked(true);\n    });\n    this.network.on(NETWORK_EVENTS.INFURA_IS_UNBLOCKED, () => {\n      this._setInfuraBlocked(false);\n    });\n  }\n\n  /**\n   *\n   * A setter for the `infuraBlocked` property\n   *\n   * @param {boolean} isBlocked - Bool indicating whether Infura is blocked\n   */\n  _setInfuraBlocked(isBlocked) {\n    const { infuraBlocked } = this.store.getState();\n\n    if (infuraBlocked === isBlocked) {\n      return;\n    }\n\n    this.store.updateState({ infuraBlocked: isBlocked });\n  }\n}\n","import Web3 from 'web3';\nimport { warn } from 'loglevel';\nimport SINGLE_CALL_BALANCES_ABI from 'single-call-balance-checker-abi';\nimport { SINGLE_CALL_BALANCES_ADDRESS } from '../constants/contracts';\nimport { MINUTE } from '../../../shared/constants/time';\nimport { isEqualCaseInsensitive } from '../../../ui/helpers/utils/util';\nimport { MAINNET_CHAIN_ID } from '../../../shared/constants/network';\n\n// By default, poll every 3 minutes\nconst DEFAULT_INTERVAL = MINUTE * 3;\n\n/**\n * A controller that polls for token exchange\n * rates based on a user's current token list\n */\nexport default class DetectTokensController {\n  /**\n   * Creates a DetectTokensController\n   *\n   * @param {Object} [config] - Options to configure controller\n   * @param config.interval\n   * @param config.preferences\n   * @param config.network\n   * @param config.keyringMemStore\n   * @param config.tokenList\n   * @param config.tokensController\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    preferences,\n    network,\n    keyringMemStore,\n    tokenList,\n    tokensController,\n  } = {}) {\n    this.tokensController = tokensController;\n    this.preferences = preferences;\n    this.interval = interval;\n    this.network = network;\n    this.keyringMemStore = keyringMemStore;\n    this.tokenList = tokenList;\n    this.selectedAddress = this.preferences?.store.getState().selectedAddress;\n    this.tokenAddresses = this.tokensController?.state.tokens.map((token) => {\n      return token.address;\n    });\n    this.hiddenTokens = this.tokensController?.state.ignoredTokens;\n\n    preferences?.store.subscribe(({ selectedAddress, useTokenDetection }) => {\n      if (\n        this.selectedAddress !== selectedAddress ||\n        this.useTokenDetection !== useTokenDetection\n      ) {\n        this.selectedAddress = selectedAddress;\n        this.useTokenDetection = useTokenDetection;\n        this.restartTokenDetection();\n      }\n    });\n    tokensController?.subscribe(({ tokens = [], ignoredTokens = [] }) => {\n      this.tokenAddresses = tokens.map((token) => {\n        return token.address;\n      });\n      this.hiddenTokens = ignoredTokens;\n    });\n  }\n\n  async _getTokenBalances(tokens) {\n    const ethContract = this.web3.eth\n      .contract(SINGLE_CALL_BALANCES_ABI)\n      .at(SINGLE_CALL_BALANCES_ADDRESS);\n    return new Promise((resolve, reject) => {\n      ethContract.balances([this.selectedAddress], tokens, (error, result) => {\n        if (error) {\n          return reject(error);\n        }\n        return resolve(result);\n      });\n    });\n  }\n\n  /**\n   * For each token in the tokenlist provided by the TokenListController, check selectedAddress balance.\n   */\n  async detectNewTokens() {\n    if (!this.isActive) {\n      return;\n    }\n\n    const { tokenList } = this._tokenList.state;\n    // since the token detection is currently enabled only on Mainnet\n    // we can use the chainId check to ensure token detection is not triggered for any other network\n    // but once the balance check contract for other networks are deploayed and ready to use, we need to update this check.\n    if (\n      this._network.store.getState().provider.chainId !== MAINNET_CHAIN_ID ||\n      Object.keys(tokenList).length === 0\n    ) {\n      return;\n    }\n\n    const tokensToDetect = [];\n    this.web3.setProvider(this._network._provider);\n    for (const tokenAddress in tokenList) {\n      if (\n        !this.tokenAddresses.find((address) =>\n          isEqualCaseInsensitive(address, tokenAddress),\n        ) &&\n        !this.hiddenTokens.find((address) =>\n          isEqualCaseInsensitive(address, tokenAddress),\n        )\n      ) {\n        tokensToDetect.push(tokenAddress);\n      }\n    }\n    const sliceOfTokensToDetect = [\n      tokensToDetect.slice(0, 1000),\n      tokensToDetect.slice(1000, tokensToDetect.length - 1),\n    ];\n    for (const tokensSlice of sliceOfTokensToDetect) {\n      let result;\n      try {\n        result = await this._getTokenBalances(tokensSlice);\n      } catch (error) {\n        warn(\n          `MetaMask - DetectTokensController single call balance fetch failed`,\n          error,\n        );\n        return;\n      }\n\n      const tokensWithBalance = tokensSlice.filter((_, index) => {\n        const balance = result[index];\n        return balance && !balance.isZero();\n      });\n\n      await Promise.all(\n        tokensWithBalance.map((tokenAddress) => {\n          return this.tokensController.addToken(\n            tokenAddress,\n            tokenList[tokenAddress].symbol,\n            tokenList[tokenAddress].decimals,\n          );\n        }),\n      );\n    }\n  }\n\n  /**\n   * Restart token detection polling period and call detectNewTokens\n   * in case of address change or user session initialization.\n   *\n   */\n  restartTokenDetection() {\n    if (!(this.isActive && this.selectedAddress)) {\n      return;\n    }\n    this.detectNewTokens();\n    this.interval = DEFAULT_INTERVAL;\n  }\n\n  /* eslint-disable accessor-pairs */\n  /**\n   * @type {number}\n   */\n  set interval(interval) {\n    this._handle && clearInterval(this._handle);\n    if (!interval) {\n      return;\n    }\n    this._handle = setInterval(() => {\n      this.detectNewTokens();\n    }, interval);\n  }\n\n  /**\n   * @type {Object}\n   */\n  set network(network) {\n    if (!network) {\n      return;\n    }\n    this._network = network;\n    this.web3 = new Web3(network._provider);\n  }\n\n  /**\n   * In setter when isUnlocked is updated to true, detectNewTokens and restart polling\n   *\n   * @type {Object}\n   */\n  set keyringMemStore(keyringMemStore) {\n    if (!keyringMemStore) {\n      return;\n    }\n    this._keyringMemStore = keyringMemStore;\n    this._keyringMemStore.subscribe(({ isUnlocked }) => {\n      if (this.isUnlocked !== isUnlocked) {\n        this.isUnlocked = isUnlocked;\n        if (isUnlocked) {\n          this.restartTokenDetection();\n        }\n      }\n    });\n  }\n\n  /**\n   * @type {Object}\n   */\n  set tokenList(tokenList) {\n    if (!tokenList) {\n      return;\n    }\n    this._tokenList = tokenList;\n  }\n\n  /**\n   * Internal isActive state\n   *\n   * @type {Object}\n   */\n  get isActive() {\n    return this.isOpen && this.isUnlocked;\n  }\n  /* eslint-enable accessor-pairs */\n}\n","import EventEmitter from 'events';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { METAMASK_CONTROLLER_EVENTS } from '../metamask-controller';\nimport { MINUTE } from '../../../shared/constants/time';\n\nexport default class AppStateController extends EventEmitter {\n  /**\n   * @param {Object} opts\n   */\n  constructor(opts = {}) {\n    const {\n      addUnlockListener,\n      isUnlocked,\n      initState,\n      onInactiveTimeout,\n      showUnlockRequest,\n      preferencesStore,\n      qrHardwareStore,\n    } = opts;\n    super();\n\n    this.onInactiveTimeout = onInactiveTimeout || (() => undefined);\n    this.store = new ObservableStore({\n      timeoutMinutes: 0,\n      connectedStatusPopoverHasBeenShown: true,\n      defaultHomeActiveTabName: null,\n      browserEnvironment: {},\n      popupGasPollTokens: [],\n      notificationGasPollTokens: [],\n      fullScreenGasPollTokens: [],\n      recoveryPhraseReminderHasBeenShown: false,\n      recoveryPhraseReminderLastShown: new Date().getTime(),\n      collectiblesDetectionNoticeDismissed: false,\n      enableEIP1559V2NoticeDismissed: false,\n      showTestnetMessageInDropdown: true,\n      trezorModel: null,\n      ...initState,\n      qrHardware: {},\n      collectiblesDropdownState: {},\n    });\n    this.timer = null;\n\n    this.isUnlocked = isUnlocked;\n    this.waitingForUnlock = [];\n    addUnlockListener(this.handleUnlock.bind(this));\n\n    this._showUnlockRequest = showUnlockRequest;\n\n    preferencesStore.subscribe(({ preferences }) => {\n      const currentState = this.store.getState();\n      if (currentState.timeoutMinutes !== preferences.autoLockTimeLimit) {\n        this._setInactiveTimeout(preferences.autoLockTimeLimit);\n      }\n    });\n\n    qrHardwareStore.subscribe((state) => {\n      this.store.updateState({ qrHardware: state });\n    });\n\n    const { preferences } = preferencesStore.getState();\n    this._setInactiveTimeout(preferences.autoLockTimeLimit);\n  }\n\n  /**\n   * Get a Promise that resolves when the extension is unlocked.\n   * This Promise will never reject.\n   *\n   * @param {boolean} shouldShowUnlockRequest - Whether the extension notification\n   * popup should be opened.\n   * @returns {Promise<void>} A promise that resolves when the extension is\n   * unlocked, or immediately if the extension is already unlocked.\n   */\n  getUnlockPromise(shouldShowUnlockRequest) {\n    return new Promise((resolve) => {\n      if (this.isUnlocked()) {\n        resolve();\n      } else {\n        this.waitForUnlock(resolve, shouldShowUnlockRequest);\n      }\n    });\n  }\n\n  /**\n   * Adds a Promise's resolve function to the waitingForUnlock queue.\n   * Also opens the extension popup if specified.\n   *\n   * @param {Promise.resolve} resolve - A Promise's resolve function that will\n   * be called when the extension is unlocked.\n   * @param {boolean} shouldShowUnlockRequest - Whether the extension notification\n   * popup should be opened.\n   */\n  waitForUnlock(resolve, shouldShowUnlockRequest) {\n    this.waitingForUnlock.push({ resolve });\n    this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);\n    if (shouldShowUnlockRequest) {\n      this._showUnlockRequest();\n    }\n  }\n\n  /**\n   * Drains the waitingForUnlock queue, resolving all the related Promises.\n   */\n  handleUnlock() {\n    if (this.waitingForUnlock.length > 0) {\n      while (this.waitingForUnlock.length > 0) {\n        this.waitingForUnlock.shift().resolve();\n      }\n      this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);\n    }\n  }\n\n  /**\n   * Sets the default home tab\n   *\n   * @param {string} [defaultHomeActiveTabName] - the tab name\n   */\n  setDefaultHomeActiveTabName(defaultHomeActiveTabName) {\n    this.store.updateState({\n      defaultHomeActiveTabName,\n    });\n  }\n\n  /**\n   * Record that the user has seen the connected status info popover\n   */\n  setConnectedStatusPopoverHasBeenShown() {\n    this.store.updateState({\n      connectedStatusPopoverHasBeenShown: true,\n    });\n  }\n\n  /**\n   * Record that the user has been shown the recovery phrase reminder.\n   */\n  setRecoveryPhraseReminderHasBeenShown() {\n    this.store.updateState({\n      recoveryPhraseReminderHasBeenShown: true,\n    });\n  }\n\n  /**\n   * Record the timestamp of the last time the user has seen the recovery phrase reminder\n   *\n   * @param {number} lastShown - timestamp when user was last shown the reminder.\n   */\n  setRecoveryPhraseReminderLastShown(lastShown) {\n    this.store.updateState({\n      recoveryPhraseReminderLastShown: lastShown,\n    });\n  }\n\n  /**\n   * Sets the last active time to the current time.\n   */\n  setLastActiveTime() {\n    this._resetTimer();\n  }\n\n  /**\n   * Sets the inactive timeout for the app\n   *\n   * @private\n   * @param {number} timeoutMinutes - The inactive timeout in minutes.\n   */\n  _setInactiveTimeout(timeoutMinutes) {\n    this.store.updateState({\n      timeoutMinutes,\n    });\n\n    this._resetTimer();\n  }\n\n  /**\n   * Resets the internal inactive timer\n   *\n   * If the {@code timeoutMinutes} state is falsy (i.e., zero) then a new\n   * timer will not be created.\n   *\n   * @private\n   */\n  _resetTimer() {\n    const { timeoutMinutes } = this.store.getState();\n\n    if (this.timer) {\n      clearTimeout(this.timer);\n    }\n\n    if (!timeoutMinutes) {\n      return;\n    }\n\n    this.timer = setTimeout(\n      () => this.onInactiveTimeout(),\n      timeoutMinutes * MINUTE,\n    );\n  }\n\n  /**\n   * Sets the current browser and OS environment\n   *\n   * @param os\n   * @param browser\n   */\n  setBrowserEnvironment(os, browser) {\n    this.store.updateState({ browserEnvironment: { os, browser } });\n  }\n\n  /**\n   * Adds a pollingToken for a given environmentType\n   *\n   * @param pollingToken\n   * @param pollingTokenType\n   */\n  addPollingToken(pollingToken, pollingTokenType) {\n    const prevState = this.store.getState()[pollingTokenType];\n    this.store.updateState({\n      [pollingTokenType]: [...prevState, pollingToken],\n    });\n  }\n\n  /**\n   * removes a pollingToken for a given environmentType\n   *\n   * @param pollingToken\n   * @param pollingTokenType\n   */\n  removePollingToken(pollingToken, pollingTokenType) {\n    const prevState = this.store.getState()[pollingTokenType];\n    this.store.updateState({\n      [pollingTokenType]: prevState.filter((token) => token !== pollingToken),\n    });\n  }\n\n  /**\n   * clears all pollingTokens\n   */\n  clearPollingTokens() {\n    this.store.updateState({\n      popupGasPollTokens: [],\n      notificationGasPollTokens: [],\n      fullScreenGasPollTokens: [],\n    });\n  }\n\n  /**\n   * Sets whether the testnet dismissal link should be shown in the network dropdown\n   *\n   * @param showTestnetMessageInDropdown\n   */\n  setShowTestnetMessageInDropdown(showTestnetMessageInDropdown) {\n    this.store.updateState({ showTestnetMessageInDropdown });\n  }\n\n  /**\n   * Sets a property indicating the model of the user's Trezor hardware wallet\n   *\n   * @param trezorModel - The Trezor model.\n   */\n  setTrezorModel(trezorModel) {\n    this.store.updateState({ trezorModel });\n  }\n\n  /**\n   * A setter for the `collectiblesDetectionNoticeDismissed` property\n   *\n   * @param collectiblesDetectionNoticeDismissed\n   */\n  setCollectiblesDetectionNoticeDismissed(\n    collectiblesDetectionNoticeDismissed,\n  ) {\n    this.store.updateState({\n      collectiblesDetectionNoticeDismissed,\n    });\n  }\n\n  /**\n   * A setter for the `enableEIP1559V2NoticeDismissed` property\n   *\n   * @param enableEIP1559V2NoticeDismissed\n   */\n  setEnableEIP1559V2NoticeDismissed(enableEIP1559V2NoticeDismissed) {\n    this.store.updateState({\n      enableEIP1559V2NoticeDismissed,\n    });\n  }\n\n  /**\n   * A setter for the `collectiblesDropdownState` property\n   *\n   * @param collectiblesDropdownState\n   */\n  updateCollectibleDropDownState(collectiblesDropdownState) {\n    this.store.updateState({\n      collectiblesDropdownState,\n    });\n  }\n}\n","import EventEmitter from 'events';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { bufferToHex } from 'ethereumjs-util';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { MESSAGE_TYPE } from '../../../shared/constants/app';\nimport { METAMASK_CONTROLLER_EVENTS } from '../metamask-controller';\nimport createId from '../../../shared/modules/random-id';\n\n/**\n * Represents, and contains data about, an 'eth_sign' type signature request. These are created when a signature for\n * an eth_sign call is requested.\n *\n * @see {@link https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign}\n * @typedef {Object} Message\n * @property {number} id An id to track and identify the message object\n * @property {Object} msgParams The parameters to pass to the eth_sign method once the signature request is approved.\n * @property {Object} msgParams.metamaskId Added to msgParams for tracking and identification within MetaMask.\n * @property {string} msgParams.data A hex string conversion of the raw buffer data of the signature request\n * @property {number} time The epoch time at which the this message was created\n * @property {string} status Indicates whether the signature request is 'unapproved', 'approved', 'signed' or 'rejected'\n * @property {string} type The json-prc signing method for which a signature request has been made. A 'Message' with\n * always have a 'eth_sign' type.\n */\n\nexport default class MessageManager extends EventEmitter {\n  /**\n   * Controller in charge of managing - storing, adding, removing, updating - Messages.\n   *\n   * @param {object} opts - Controller options\n   * @param {Function} opts.metricsEvent - A function for emitting a metric event.\n   */\n  constructor({ metricsEvent }) {\n    super();\n    this.memStore = new ObservableStore({\n      unapprovedMsgs: {},\n      unapprovedMsgCount: 0,\n    });\n    this.messages = [];\n    this.metricsEvent = metricsEvent;\n  }\n\n  /**\n   * A getter for the number of 'unapproved' Messages in this.messages\n   *\n   * @returns {number} The number of 'unapproved' Messages in this.messages\n   */\n  get unapprovedMsgCount() {\n    return Object.keys(this.getUnapprovedMsgs()).length;\n  }\n\n  /**\n   * A getter for the 'unapproved' Messages in this.messages\n   *\n   * @returns {Object} An index of Message ids to Messages, for all 'unapproved' Messages in this.messages\n   */\n  getUnapprovedMsgs() {\n    return this.messages\n      .filter((msg) => msg.status === 'unapproved')\n      .reduce((result, msg) => {\n        result[msg.id] = msg;\n        return result;\n      }, {});\n  }\n\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed msgParams. this.addMsg is called to add the\n   * new Message to this.messages, and to save the unapproved Messages from that list to this.memStore.\n   *\n   * @param {Object} msgParams - The params for the eth_sign call to be made after the message is approved.\n   * @param {Object} [req] - The original request object possibly containing the origin\n   * @returns {promise} after signature has been\n   */\n  async addUnapprovedMessageAsync(msgParams, req) {\n    const msgId = this.addUnapprovedMessage(msgParams, req);\n    return await new Promise((resolve, reject) => {\n      // await finished\n      this.once(`${msgId}:finished`, (data) => {\n        switch (data.status) {\n          case 'signed':\n            return resolve(data.rawSig);\n          case 'rejected':\n            return reject(\n              ethErrors.provider.userRejectedRequest(\n                'MetaMask Message Signature: User denied message signature.',\n              ),\n            );\n          case 'errored':\n            return reject(\n              new Error(`MetaMask Message Signature: ${data.error}`),\n            );\n          default:\n            return reject(\n              new Error(\n                `MetaMask Message Signature: Unknown problem: ${JSON.stringify(\n                  msgParams,\n                )}`,\n              ),\n            );\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a new Message with an 'unapproved' status using the passed msgParams. this.addMsg is called to add the\n   * new Message to this.messages, and to save the unapproved Messages from that list to this.memStore.\n   *\n   * @param {Object} msgParams - The params for the eth_sign call to be made after the message is approved.\n   * @param {Object} [req] - The original request object where the origin may be specified\n   * @returns {number} The id of the newly created message.\n   */\n  addUnapprovedMessage(msgParams, req) {\n    // add origin from request\n    if (req) {\n      msgParams.origin = req.origin;\n    }\n    msgParams.data = normalizeMsgData(msgParams.data);\n    // create txData obj with parameters and meta data\n    const time = new Date().getTime();\n    const msgId = createId();\n    const msgData = {\n      id: msgId,\n      msgParams,\n      time,\n      status: 'unapproved',\n      type: MESSAGE_TYPE.ETH_SIGN,\n    };\n    this.addMsg(msgData);\n\n    // signal update\n    this.emit('update');\n    return msgId;\n  }\n\n  /**\n   * Adds a passed Message to this.messages, and calls this._saveMsgList() to save the unapproved Messages from that\n   * list to this.memStore.\n   *\n   * @param {Message} msg - The Message to add to this.messages\n   */\n  addMsg(msg) {\n    this.messages.push(msg);\n    this._saveMsgList();\n  }\n\n  /**\n   * Returns a specified Message.\n   *\n   * @param {number} msgId - The id of the Message to get\n   * @returns {Message|undefined} The Message with the id that matches the passed msgId, or undefined if no Message has that id.\n   */\n  getMsg(msgId) {\n    return this.messages.find((msg) => msg.id === msgId);\n  }\n\n  /**\n   * Approves a Message. Sets the message status via a call to this.setMsgStatusApproved, and returns a promise with\n   * any the message params modified for proper signing.\n   *\n   * @param {Object} msgParams - The msgParams to be used when eth_sign is called, plus data added by MetaMask.\n   * @param {Object} msgParams.metamaskId - Added to msgParams for tracking and identification within MetaMask.\n   * @returns {Promise<object>} Promises the msgParams object with metamaskId removed.\n   */\n  approveMessage(msgParams) {\n    this.setMsgStatusApproved(msgParams.metamaskId);\n    return this.prepMsgForSigning(msgParams);\n  }\n\n  /**\n   * Sets a Message status to 'approved' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the Message to approve.\n   */\n  setMsgStatusApproved(msgId) {\n    this._setMsgStatus(msgId, 'approved');\n  }\n\n  /**\n   * Sets a Message status to 'signed' via a call to this._setMsgStatus and updates that Message in this.messages by\n   * adding the raw signature data of the signature request to the Message\n   *\n   * @param {number} msgId - The id of the Message to sign.\n   * @param {buffer} rawSig - The raw data of the signature request\n   */\n  setMsgStatusSigned(msgId, rawSig) {\n    const msg = this.getMsg(msgId);\n    msg.rawSig = rawSig;\n    this._updateMsg(msg);\n    this._setMsgStatus(msgId, 'signed');\n  }\n\n  /**\n   * Removes the metamaskId property from passed msgParams and returns a promise which resolves the updated msgParams\n   *\n   * @param {Object} msgParams - The msgParams to modify\n   * @returns {Promise<object>} Promises the msgParams with the metamaskId property removed\n   */\n  prepMsgForSigning(msgParams) {\n    delete msgParams.metamaskId;\n    return Promise.resolve(msgParams);\n  }\n\n  /**\n   * Sets a Message status to 'rejected' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the Message to reject.\n   * @param reason\n   */\n  rejectMsg(msgId, reason = undefined) {\n    if (reason) {\n      const msg = this.getMsg(msgId);\n      this.metricsEvent({\n        event: reason,\n        category: 'Transactions',\n        properties: {\n          action: 'Sign Request',\n          type: msg.type,\n        },\n      });\n    }\n    this._setMsgStatus(msgId, 'rejected');\n  }\n\n  /**\n   * Sets a Message status to 'errored' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the Message to error\n   * @param error\n   */\n  errorMessage(msgId, error) {\n    const msg = this.getMsg(msgId);\n    msg.error = error;\n    this._updateMsg(msg);\n    this._setMsgStatus(msgId, 'errored');\n  }\n\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    this.messages = this.messages.filter((msg) => msg.status !== 'unapproved');\n    this._saveMsgList();\n  }\n\n  /**\n   * Updates the status of a Message in this.messages via a call to this._updateMsg\n   *\n   * @private\n   * @param {number} msgId - The id of the Message to update.\n   * @param {string} status - The new status of the Message.\n   * @throws A 'MessageManager - Message not found for id: \"${msgId}\".' if there is no Message in this.messages with an\n   * id equal to the passed msgId\n   * @fires An event with a name equal to `${msgId}:${status}`. The Message is also fired.\n   * @fires If status is 'rejected' or 'signed', an event with a name equal to `${msgId}:finished` is fired along with the message\n   */\n  _setMsgStatus(msgId, status) {\n    const msg = this.getMsg(msgId);\n    if (!msg) {\n      throw new Error(`MessageManager - Message not found for id: \"${msgId}\".`);\n    }\n    msg.status = status;\n    this._updateMsg(msg);\n    this.emit(`${msgId}:${status}`, msg);\n    if (status === 'rejected' || status === 'signed') {\n      this.emit(`${msgId}:finished`, msg);\n    }\n  }\n\n  /**\n   * Sets a Message in this.messages to the passed Message if the ids are equal. Then saves the unapprovedMsg list to\n   * storage via this._saveMsgList\n   *\n   * @private\n   * @param {Message} msg - A Message that will replace an existing Message (with the same id) in this.messages\n   */\n  _updateMsg(msg) {\n    const index = this.messages.findIndex((message) => message.id === msg.id);\n    if (index !== -1) {\n      this.messages[index] = msg;\n    }\n    this._saveMsgList();\n  }\n\n  /**\n   * Saves the unapproved messages, and their count, to this.memStore\n   *\n   * @private\n   * @fires 'updateBadge'\n   */\n  _saveMsgList() {\n    const unapprovedMsgs = this.getUnapprovedMsgs();\n    const unapprovedMsgCount = Object.keys(unapprovedMsgs).length;\n    this.memStore.updateState({ unapprovedMsgs, unapprovedMsgCount });\n    this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);\n  }\n}\n\n/**\n * A helper function that converts raw buffer data to a hex, or just returns the data if it is already formatted as a hex.\n *\n * @param {any} data - The buffer data to convert to a hex\n * @returns {string} A hex string conversion of the buffer data\n */\nexport function normalizeMsgData(data) {\n  if (data.slice(0, 2) === '0x') {\n    // data is already hex\n    return data;\n  }\n  // data is unicode, convert to hex\n  return bufferToHex(Buffer.from(data, 'utf8'));\n}\n","import { merge, omit, omitBy } from 'lodash';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { bufferToHex, keccak } from 'ethereumjs-util';\nimport { generateUUID } from 'pubnub';\nimport { ENVIRONMENT_TYPE_BACKGROUND } from '../../../shared/constants/app';\nimport {\n  METAMETRICS_ANONYMOUS_ID,\n  METAMETRICS_BACKGROUND_PAGE_OBJECT,\n} from '../../../shared/constants/metametrics';\nimport { SECOND } from '../../../shared/constants/time';\n\nconst defaultCaptureException = (err) => {\n  // throw error on clean stack so its captured by platform integrations (eg sentry)\n  // but does not interrupt the call stack\n  setTimeout(() => {\n    throw err;\n  });\n};\n\nconst exceptionsToFilter = {\n  [`You must pass either an \"anonymousId\" or a \"userId\".`]: true,\n};\n\n/**\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsContext} MetaMetricsContext\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsEventPayload} MetaMetricsEventPayload\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsEventOptions} MetaMetricsEventOptions\n * @typedef {import('../../../shared/constants/metametrics').SegmentEventPayload} SegmentEventPayload\n * @typedef {import('../../../shared/constants/metametrics').SegmentInterface} SegmentInterface\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsPagePayload} MetaMetricsPagePayload\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsPageOptions} MetaMetricsPageOptions\n * @typedef {import('../../../shared/constants/metametrics').MetaMetricsEventFragment} MetaMetricsEventFragment\n */\n\n/**\n * @typedef {Object} MetaMetricsControllerState\n * @property {string} [metaMetricsId] - The user's metaMetricsId that will be\n *  attached to all non-anonymized event payloads\n * @property {boolean} [participateInMetaMetrics] - The user's preference for\n *  participating in the MetaMetrics analytics program. This setting controls\n *  whether or not events are tracked\n * @property {{[string]: MetaMetricsEventFragment}} [fragments] - Object keyed\n *  by UUID with stored fragments as values.\n */\n\nexport default class MetaMetricsController {\n  /**\n   * @param {object} options\n   * @param {Object} options.segment - an instance of analytics-node for tracking\n   *  events that conform to the new MetaMetrics tracking plan.\n   * @param {Object} options.preferencesStore - The preferences controller store, used\n   *  to access and subscribe to preferences that will be attached to events\n   * @param {Function} options.onNetworkDidChange - Used to attach a listener to the\n   *  networkDidChange event emitted by the networkController\n   * @param {Function} options.getCurrentChainId - Gets the current chain id from the\n   *  network controller\n   * @param {Function} options.getNetworkIdentifier - Gets the current network\n   *  identifier from the network controller\n   * @param {string} options.version - The version of the extension\n   * @param {string} options.environment - The environment the extension is running in\n   * @param {MetaMetricsControllerState} options.initState - State to initialized with\n   * @param options.captureException\n   */\n  constructor({\n    segment,\n    preferencesStore,\n    onNetworkDidChange,\n    getCurrentChainId,\n    getNetworkIdentifier,\n    version,\n    environment,\n    initState,\n    captureException = defaultCaptureException,\n  }) {\n    this._captureException = (err) => {\n      // This is a temporary measure. Currently there are errors flooding sentry due to a problem in how we are tracking anonymousId\n      // We intend on removing this as soon as we understand how to correctly solve that problem.\n      if (!exceptionsToFilter[err.message]) {\n        captureException(err);\n      }\n    };\n    const prefState = preferencesStore.getState();\n    this.chainId = getCurrentChainId();\n    this.network = getNetworkIdentifier();\n    this.locale = prefState.currentLocale.replace('_', '-');\n    this.version =\n      environment === 'production' ? version : `${version}-${environment}`;\n\n    const abandonedFragments = omitBy(initState?.fragments, 'persist');\n\n    this.store = new ObservableStore({\n      participateInMetaMetrics: null,\n      metaMetricsId: null,\n      ...initState,\n      fragments: {\n        ...initState?.fragments,\n      },\n    });\n\n    preferencesStore.subscribe(({ currentLocale }) => {\n      this.locale = currentLocale.replace('_', '-');\n    });\n\n    onNetworkDidChange(() => {\n      this.chainId = getCurrentChainId();\n      this.network = getNetworkIdentifier();\n    });\n    this.segment = segment;\n\n    // Track abandoned fragments that weren't properly cleaned up.\n    // Abandoned fragments are those that were stored in persistent memory\n    // and are available at controller instance creation, but do not have the\n    // 'persist' flag set. This means anytime the extension is unlocked, any\n    // fragments that are not marked as persistent will be purged and the\n    // failure event will be emitted.\n    Object.values(abandonedFragments).forEach((fragment) => {\n      this.finalizeEventFragment(fragment.id, { abandoned: true });\n    });\n\n    // Close out event fragments that were created but not progressed. An\n    // interval is used to routinely check if a fragment has not been updated\n    // within the fragment's timeout window. When creating a new event fragment\n    // a timeout can be specified that will cause an abandoned event to be\n    // tracked if the event isn't progressed within that amount of time.\n    setInterval(() => {\n      Object.values(this.store.getState().fragments).forEach((fragment) => {\n        if (\n          fragment.timeout &&\n          Date.now() - fragment.lastUpdated / 1000 > fragment.timeout\n        ) {\n          this.finalizeEventFragment(fragment.id, { abandoned: true });\n        }\n      });\n    }, SECOND * 30);\n  }\n\n  generateMetaMetricsId() {\n    return bufferToHex(\n      keccak(\n        Buffer.from(\n          String(Date.now()) +\n            String(Math.round(Math.random() * Number.MAX_SAFE_INTEGER)),\n        ),\n      ),\n    );\n  }\n\n  /**\n   * Create an event fragment in state and returns the event fragment object.\n   *\n   * @param {MetaMetricsEventFragment} options - Fragment settings and properties\n   *  to initiate the fragment with.\n   * @returns {MetaMetricsEventFragment}\n   */\n  createEventFragment(options) {\n    if (!options.successEvent || !options.category) {\n      throw new Error(\n        `Must specify success event and category. Success event was: ${\n          options.event\n        }. Category was: ${options.category}. Payload keys were: ${Object.keys(\n          options,\n        )}. ${\n          typeof options.properties === 'object'\n            ? `Payload property keys were: ${Object.keys(options.properties)}`\n            : ''\n        }`,\n      );\n    }\n    const { fragments } = this.store.getState();\n\n    const id = options.uniqueIdentifier ?? generateUUID();\n    const fragment = {\n      id,\n      ...options,\n      lastUpdated: Date.now(),\n    };\n    this.store.updateState({\n      fragments: {\n        ...fragments,\n        [id]: fragment,\n      },\n    });\n\n    if (options.initialEvent) {\n      this.trackEvent({\n        event: fragment.initialEvent,\n        category: fragment.category,\n        properties: fragment.properties,\n        sensitiveProperties: fragment.sensitiveProperties,\n        page: fragment.page,\n        referrer: fragment.referrer,\n        revenue: fragment.revenue,\n        value: fragment.value,\n        currency: fragment.currency,\n        environmentType: fragment.environmentType,\n      });\n    }\n\n    return fragment;\n  }\n\n  /**\n   * Returns the fragment stored in memory with provided id or undefined if it\n   * does not exist.\n   *\n   * @param {string} id - id of fragment to retrieve\n   * @returns {[MetaMetricsEventFragment]}\n   */\n  getEventFragmentById(id) {\n    const { fragments } = this.store.getState();\n\n    const fragment = fragments[id];\n\n    return fragment;\n  }\n\n  /**\n   * Updates an event fragment in state\n   *\n   * @param {string} id - The fragment id to update\n   * @param {MetaMetricsEventFragment} payload - Fragment settings and\n   *  properties to initiate the fragment with.\n   */\n  updateEventFragment(id, payload) {\n    const { fragments } = this.store.getState();\n\n    const fragment = fragments[id];\n\n    if (!fragment) {\n      throw new Error(`Event fragment with id ${id} does not exist.`);\n    }\n\n    this.store.updateState({\n      fragments: {\n        ...fragments,\n        [id]: merge(fragments[id], {\n          ...payload,\n          lastUpdated: Date.now(),\n        }),\n      },\n    });\n  }\n\n  /**\n   * Finalizes a fragment, tracking either a success event or failure Event\n   * and then removes the fragment from state.\n   *\n   * @param {string} id - UUID of the event fragment to be closed\n   * @param {object} options\n   * @param {boolean} [options.abandoned] - if true track the failure\n   *  event instead of the success event\n   * @param {MetaMetricsContext.page} [options.page] - page the final event\n   *  occurred on. This will override whatever is set on the fragment\n   * @param {MetaMetricsContext.referrer} [options.referrer] - Dapp that\n   *  originated the fragment. This is for fallback only, the fragment referrer\n   *  property will take precedence.\n   */\n  finalizeEventFragment(id, { abandoned = false, page, referrer } = {}) {\n    const fragment = this.store.getState().fragments[id];\n    if (!fragment) {\n      throw new Error(`Funnel with id ${id} does not exist.`);\n    }\n\n    const eventName = abandoned ? fragment.failureEvent : fragment.successEvent;\n\n    this.trackEvent({\n      event: eventName,\n      category: fragment.category,\n      properties: fragment.properties,\n      sensitiveProperties: fragment.sensitiveProperties,\n      page: page ?? fragment.page,\n      referrer: fragment.referrer ?? referrer,\n      revenue: fragment.revenue,\n      value: fragment.value,\n      currency: fragment.currency,\n      environmentType: fragment.environmentType,\n    });\n    const { fragments } = this.store.getState();\n    delete fragments[id];\n    this.store.updateState({ fragments });\n  }\n\n  /**\n   * Setter for the `participateInMetaMetrics` property\n   *\n   * @param {boolean} participateInMetaMetrics - Whether or not the user wants\n   *  to participate in MetaMetrics\n   * @returns {string|null} the string of the new metametrics id, or null\n   *  if not set\n   */\n  setParticipateInMetaMetrics(participateInMetaMetrics) {\n    let { metaMetricsId } = this.state;\n    if (participateInMetaMetrics && !metaMetricsId) {\n      metaMetricsId = this.generateMetaMetricsId();\n    } else if (participateInMetaMetrics === false) {\n      metaMetricsId = null;\n    }\n    this.store.updateState({ participateInMetaMetrics, metaMetricsId });\n    return metaMetricsId;\n  }\n\n  get state() {\n    return this.store.getState();\n  }\n\n  /**\n   * Build the context object to attach to page and track events.\n   *\n   * @private\n   * @param {Pick<MetaMetricsContext, 'referrer'>} [referrer] - dapp origin that initialized\n   *  the notification window.\n   * @param {Pick<MetaMetricsContext, 'page'>} [page] - page object describing the current\n   *  view of the extension. Defaults to the background-process object.\n   * @returns {MetaMetricsContext}\n   */\n  _buildContext(referrer, page = METAMETRICS_BACKGROUND_PAGE_OBJECT) {\n    return {\n      app: {\n        name: 'MetaMask Extension',\n        version: this.version,\n      },\n      userAgent: window.navigator.userAgent,\n      page,\n      referrer,\n    };\n  }\n\n  /**\n   * Build's the event payload, processing all fields into a format that can be\n   * fed to Segment's track method\n   *\n   * @private\n   * @param {\n   *  Omit<MetaMetricsEventPayload, 'sensitiveProperties'>\n   * } rawPayload - raw payload provided to trackEvent\n   * @returns {SegmentEventPayload} formatted event payload for segment\n   */\n  _buildEventPayload(rawPayload) {\n    const {\n      event,\n      properties,\n      revenue,\n      value,\n      currency,\n      category,\n      page,\n      referrer,\n      environmentType = ENVIRONMENT_TYPE_BACKGROUND,\n    } = rawPayload;\n    return {\n      event,\n      properties: {\n        // These values are omitted from properties because they have special meaning\n        // in segment. https://segment.com/docs/connections/spec/track/#properties.\n        // to avoid accidentally using these inappropriately, you must add them as top\n        // level properties on the event payload. We also exclude locale to prevent consumers\n        // from overwriting this context level property. We track it as a property\n        // because not all destinations map locale from context.\n        ...omit(properties, ['revenue', 'locale', 'currency', 'value']),\n        revenue,\n        value,\n        currency,\n        category,\n        network: properties?.network ?? this.network,\n        locale: this.locale,\n        chain_id: properties?.chain_id ?? this.chainId,\n        environment_type: environmentType,\n      },\n      context: this._buildContext(referrer, page),\n    };\n  }\n\n  /**\n   * Perform validation on the payload and update the id type to use before\n   * sending to Segment. Also examines the options to route and handle the\n   * event appropriately.\n   *\n   * @private\n   * @param {SegmentEventPayload} payload - properties to attach to event\n   * @param {MetaMetricsEventOptions} [options] - options for routing and\n   *  handling the event\n   * @returns {Promise<void>}\n   */\n  _track(payload, options) {\n    const {\n      isOptIn,\n      metaMetricsId: metaMetricsIdOverride,\n      matomoEvent,\n      flushImmediately,\n    } = options || {};\n    let idType = 'userId';\n    let idValue = this.state.metaMetricsId;\n    let excludeMetaMetricsId = options?.excludeMetaMetricsId ?? false;\n    // This is carried over from the old implementation, and will likely need\n    // to be updated to work with the new tracking plan. I think we should use\n    // a config setting for this instead of trying to match the event name\n    const isSendFlow = Boolean(payload.event.match(/^send|^confirm/iu));\n    if (isSendFlow) {\n      excludeMetaMetricsId = true;\n    }\n    // If we are tracking sensitive data we will always use the anonymousId\n    // property as well as our METAMETRICS_ANONYMOUS_ID. This prevents us from\n    // associating potentially identifiable information with a specific id.\n    // During the opt in flow we will track all events, but do so with the\n    // anonymous id. The one exception to that rule is after the user opts in\n    // to MetaMetrics. When that happens we receive back the user's new\n    // MetaMetrics id before it is fully persisted to state. To avoid a race\n    // condition we explicitly pass the new id to the track method. In that\n    // case we will track the opt in event to the user's id. In all other cases\n    // we use the metaMetricsId from state.\n    if (excludeMetaMetricsId || (isOptIn && !metaMetricsIdOverride)) {\n      idType = 'anonymousId';\n      idValue = METAMETRICS_ANONYMOUS_ID;\n    } else if (isOptIn && metaMetricsIdOverride) {\n      idValue = metaMetricsIdOverride;\n    }\n    payload[idType] = idValue;\n\n    // If this is an event on the old matomo schema, add a key to the payload\n    // to designate it as such\n    if (matomoEvent === true) {\n      payload.properties.legacy_event = true;\n    }\n\n    // Promises will only resolve when the event is sent to segment. For any\n    // event that relies on this promise being fulfilled before performing UI\n    // updates, or otherwise delaying user interaction, supply the\n    // 'flushImmediately' flag to the trackEvent method.\n    return new Promise((resolve, reject) => {\n      const callback = (err) => {\n        if (err) {\n          // The error that segment gives us has some manipulation done to it\n          // that seemingly breaks with lockdown enabled. Creating a new error\n          // here prevents the system from freezing when the network request to\n          // segment fails for any reason.\n          const safeError = new Error(err.message);\n          safeError.stack = err.stack;\n          return reject(safeError);\n        }\n        return resolve();\n      };\n\n      this.segment.track(payload, callback);\n      if (flushImmediately) {\n        this.segment.flush();\n      }\n    });\n  }\n\n  /**\n   * track a page view with Segment\n   *\n   * @param {MetaMetricsPagePayload} payload - details of the page viewed\n   * @param {MetaMetricsPageOptions} [options] - options for handling the page\n   *  view\n   */\n  trackPage({ name, params, environmentType, page, referrer }, options) {\n    try {\n      if (this.state.participateInMetaMetrics === false) {\n        return;\n      }\n\n      if (\n        this.state.participateInMetaMetrics === null &&\n        !options?.isOptInPath\n      ) {\n        return;\n      }\n      const { metaMetricsId } = this.state;\n      const idTrait = metaMetricsId ? 'userId' : 'anonymousId';\n      const idValue = metaMetricsId ?? METAMETRICS_ANONYMOUS_ID;\n      this.segment.page({\n        [idTrait]: idValue,\n        name,\n        properties: {\n          params,\n          locale: this.locale,\n          network: this.network,\n          chain_id: this.chainId,\n          environment_type: environmentType,\n        },\n        context: this._buildContext(referrer, page),\n      });\n    } catch (err) {\n      this._captureException(err);\n    }\n  }\n\n  /**\n   * submits a metametrics event, not waiting for it to complete or allowing its error to bubble up\n   *\n   * @param {MetaMetricsEventPayload} payload - details of the event\n   * @param {MetaMetricsEventOptions} [options] - options for handling/routing the event\n   */\n  trackEvent(payload, options) {\n    // validation is not caught and handled\n    this.validatePayload(payload);\n    this.submitEvent(payload, options).catch((err) =>\n      this._captureException(err),\n    );\n  }\n\n  /**\n   * submits (or queues for submission) a metametrics event, performing necessary payload manipulation and\n   * routing the event to the appropriate segment source. Will split events\n   * with sensitiveProperties into two events, tracking the sensitiveProperties\n   * with the anonymousId only.\n   *\n   * @param {MetaMetricsEventPayload} payload - details of the event\n   * @param {MetaMetricsEventOptions} [options] - options for handling/routing the event\n   * @returns {Promise<void>}\n   */\n  async submitEvent(payload, options) {\n    this.validatePayload(payload);\n\n    if (!this.state.participateInMetaMetrics && !options?.isOptIn) {\n      return;\n    }\n\n    // We might track multiple events if sensitiveProperties is included, this array will hold\n    // the promises returned from this._track.\n    const events = [];\n\n    if (payload.sensitiveProperties) {\n      // sensitiveProperties will only be tracked using the anonymousId property and generic id\n      // If the event options already specify to exclude the metaMetricsId we throw an error as\n      // a signal to the developer that the event was implemented incorrectly\n      if (options?.excludeMetaMetricsId === true) {\n        throw new Error(\n          'sensitiveProperties was specified in an event payload that also set the excludeMetaMetricsId flag',\n        );\n      }\n\n      const combinedProperties = merge(\n        payload.sensitiveProperties,\n        payload.properties,\n      );\n\n      events.push(\n        this._track(\n          this._buildEventPayload({\n            ...payload,\n            properties: combinedProperties,\n          }),\n          { ...options, excludeMetaMetricsId: true },\n        ),\n      );\n    }\n\n    events.push(this._track(this._buildEventPayload(payload), options));\n\n    await Promise.all(events);\n  }\n\n  /**\n   * validates a metametrics event\n   *\n   * @param {MetaMetricsEventPayload} payload - details of the event\n   */\n  validatePayload(payload) {\n    // event and category are required fields for all payloads\n    if (!payload.event || !payload.category) {\n      throw new Error(\n        `Must specify event and category. Event was: ${\n          payload.event\n        }. Category was: ${payload.category}. Payload keys were: ${Object.keys(\n          payload,\n        )}. ${\n          typeof payload.properties === 'object'\n            ? `Payload property keys were: ${Object.keys(payload.properties)}`\n            : ''\n        }`,\n      );\n    }\n  }\n}\n","import KeyringController from 'eth-keyring-controller';\nimport log from 'loglevel';\n\nconst seedPhraseVerifier = {\n  /**\n   * Verifies if the seed words can restore the accounts.\n   *\n   * Key notes:\n   * - The seed words can recreate the primary keyring and the accounts belonging to it.\n   * - The created accounts in the primary keyring are always the same.\n   * - The keyring always creates the accounts in the same sequence.\n   *\n   * @param {Array} createdAccounts - The accounts to restore\n   * @param {Buffer} seedPhrase - The seed words to verify, encoded as a Buffer\n   * @returns {Promise<void>}\n   */\n  async verifyAccounts(createdAccounts, seedPhrase) {\n    if (!createdAccounts || createdAccounts.length < 1) {\n      throw new Error('No created accounts defined.');\n    }\n\n    const keyringController = new KeyringController({});\n    const Keyring = keyringController.getKeyringClassForType('HD Key Tree');\n    const opts = {\n      mnemonic: seedPhrase,\n      numberOfAccounts: createdAccounts.length,\n    };\n\n    const keyring = new Keyring(opts);\n    const restoredAccounts = await keyring.getAccounts();\n    log.debug(`Created accounts: ${JSON.stringify(createdAccounts)}`);\n    log.debug(`Restored accounts: ${JSON.stringify(restoredAccounts)}`);\n\n    if (restoredAccounts.length !== createdAccounts.length) {\n      // this should not happen...\n      throw new Error('Wrong number of accounts');\n    }\n\n    for (let i = 0; i < restoredAccounts.length; i++) {\n      if (\n        restoredAccounts[i].toLowerCase() !== createdAccounts[i].toLowerCase()\n      ) {\n        throw new Error(\n          `Not identical accounts! Original: ${createdAccounts[i]}, Restored: ${restoredAccounts[i]}`,\n        );\n      }\n    }\n  },\n};\n\nexport default seedPhraseVerifier;\n","import { ObservableStore } from '@metamask/obs-store';\nimport log from 'loglevel';\n\n/**\n * @typedef {Object} InitState\n * @property {boolean} seedPhraseBackedUp Indicates whether the user has completed the seed phrase backup challenge\n * @property {boolean} completedOnboarding Indicates whether the user has completed the onboarding flow\n */\n\n/**\n * @typedef {Object} OnboardingOptions\n * @property {InitState} initState The initial controller state\n */\n\n/**\n * Controller responsible for maintaining\n * state related to onboarding\n */\nexport default class OnboardingController {\n  /**\n   * Creates a new controller instance\n   *\n   * @param {OnboardingOptions} [opts] - Controller configuration parameters\n   */\n  constructor(opts = {}) {\n    const initialTransientState = {\n      onboardingTabs: {},\n    };\n    const initState = {\n      seedPhraseBackedUp: null,\n      firstTimeFlowType: null,\n      completedOnboarding: false,\n      ...opts.initState,\n      ...initialTransientState,\n    };\n    this.store = new ObservableStore(initState);\n  }\n\n  setSeedPhraseBackedUp(newSeedPhraseBackUpState) {\n    this.store.updateState({\n      seedPhraseBackedUp: newSeedPhraseBackUpState,\n    });\n  }\n\n  // /**\n  //  * Sets the completedOnboarding state to true, indicating that the user has completed the\n  //  * onboarding process.\n  //  */\n  completeOnboarding() {\n    this.store.updateState({\n      completedOnboarding: true,\n    });\n    return Promise.resolve(true);\n  }\n\n  /**\n   * Setter for the `firstTimeFlowType` property\n   *\n   * @param {string} type - Indicates the type of first time flow - create or import - the user wishes to follow\n   */\n  setFirstTimeFlowType(type) {\n    this.store.updateState({ firstTimeFlowType: type });\n  }\n\n  /**\n   * Registering a site as having initiated onboarding\n   *\n   * @param {string} location - The location of the site registering\n   * @param {string} tabId - The id of the tab registering\n   */\n  registerOnboarding = async (location, tabId) => {\n    if (this.completedOnboarding) {\n      log.debug('Ignoring registerOnboarding; user already onboarded');\n      return;\n    }\n    const onboardingTabs = { ...this.store.getState().onboardingTabs };\n    if (!onboardingTabs[location] || onboardingTabs[location] !== tabId) {\n      log.debug(\n        `Registering onboarding tab at location '${location}' with tabId '${tabId}'`,\n      );\n      onboardingTabs[location] = tabId;\n      this.store.updateState({ onboardingTabs });\n    }\n  };\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./idRemapMiddleware\"), exports);\n__exportStar(require(\"./createAsyncMiddleware\"), exports);\n__exportStar(require(\"./createScaffoldMiddleware\"), exports);\n__exportStar(require(\"./getUniqueId\"), exports);\n__exportStar(require(\"./JsonRpcEngine\"), exports);\n__exportStar(require(\"./mergeMiddleware\"), exports);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsc0RBQW9DO0FBQ3BDLDBEQUF3QztBQUN4Qyw2REFBMkM7QUFDM0MsZ0RBQThCO0FBQzlCLGtEQUFnQztBQUNoQyxvREFBa0MifQ==","import EventEmitter from 'events';\nimport { strict as assert } from 'assert';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { typedSignatureHash, TYPED_MESSAGE_SCHEMA } from 'eth-sig-util';\nimport log from 'loglevel';\nimport jsonschema from 'jsonschema';\nimport { MESSAGE_TYPE } from '../../../shared/constants/app';\nimport { METAMASK_CONTROLLER_EVENTS } from '../metamask-controller';\nimport createId from '../../../shared/modules/random-id';\nimport { isValidHexAddress } from '../../../shared/modules/hexstring-utils';\n\n/**\n * Represents, and contains data about, an 'eth_signTypedData' type signature request. These are created when a\n * signature for an eth_signTypedData call is requested.\n *\n * @typedef {Object} TypedMessage\n * @property {number} id An id to track and identify the message object\n * @property {Object} msgParams The parameters to pass to the eth_signTypedData method once the signature request is\n * approved.\n * @property {Object} msgParams.metamaskId Added to msgParams for tracking and identification within MetaMask.\n * @property {Object} msgParams.from The address that is making the signature request.\n * @property {string} msgParams.data A hex string conversion of the raw buffer data of the signature request\n * @property {number} time The epoch time at which the this message was created\n * @property {string} status Indicates whether the signature request is 'unapproved', 'approved', 'signed', 'rejected', or 'errored'\n * @property {string} type The json-prc signing method for which a signature request has been made. A 'Message' will\n * always have a 'eth_signTypedData' type.\n */\n\nexport default class TypedMessageManager extends EventEmitter {\n  /**\n   * Controller in charge of managing - storing, adding, removing, updating - TypedMessage.\n   *\n   * @param options\n   * @param options.getCurrentChainId\n   * @param options.metricsEvent\n   */\n  constructor({ getCurrentChainId, metricsEvent }) {\n    super();\n    this._getCurrentChainId = getCurrentChainId;\n    this.memStore = new ObservableStore({\n      unapprovedTypedMessages: {},\n      unapprovedTypedMessagesCount: 0,\n    });\n    this.messages = [];\n    this.metricsEvent = metricsEvent;\n  }\n\n  /**\n   * A getter for the number of 'unapproved' TypedMessages in this.messages\n   *\n   * @returns {number} The number of 'unapproved' TypedMessages in this.messages\n   */\n  get unapprovedTypedMessagesCount() {\n    return Object.keys(this.getUnapprovedMsgs()).length;\n  }\n\n  /**\n   * A getter for the 'unapproved' TypedMessages in this.messages\n   *\n   * @returns {Object} An index of TypedMessage ids to TypedMessages, for all 'unapproved' TypedMessages in\n   * this.messages\n   */\n  getUnapprovedMsgs() {\n    return this.messages\n      .filter((msg) => msg.status === 'unapproved')\n      .reduce((result, msg) => {\n        result[msg.id] = msg;\n        return result;\n      }, {});\n  }\n\n  /**\n   * Creates a new TypedMessage with an 'unapproved' status using the passed msgParams. this.addMsg is called to add\n   * the new TypedMessage to this.messages, and to save the unapproved TypedMessages from that list to\n   * this.memStore. Before any of this is done, msgParams are validated\n   *\n   * @param {Object} msgParams - The params for the eth_sign call to be made after the message is approved.\n   * @param {Object} [req] - The original request object possibly containing the origin\n   * @param version\n   * @returns {promise} When the message has been signed or rejected\n   */\n  addUnapprovedMessageAsync(msgParams, req, version) {\n    return new Promise((resolve, reject) => {\n      const msgId = this.addUnapprovedMessage(msgParams, req, version);\n      this.once(`${msgId}:finished`, (data) => {\n        switch (data.status) {\n          case 'signed':\n            return resolve(data.rawSig);\n          case 'rejected':\n            return reject(\n              ethErrors.provider.userRejectedRequest(\n                'MetaMask Message Signature: User denied message signature.',\n              ),\n            );\n          case 'errored':\n            return reject(\n              new Error(`MetaMask Message Signature: ${data.error}`),\n            );\n          default:\n            return reject(\n              new Error(\n                `MetaMask Message Signature: Unknown problem: ${JSON.stringify(\n                  msgParams,\n                )}`,\n              ),\n            );\n        }\n      });\n    });\n  }\n\n  /**\n   * Creates a new TypedMessage with an 'unapproved' status using the passed msgParams. this.addMsg is called to add\n   * the new TypedMessage to this.messages, and to save the unapproved TypedMessages from that list to\n   * this.memStore. Before any of this is done, msgParams are validated\n   *\n   * @param {Object} msgParams - The params for the eth_sign call to be made after the message is approved.\n   * @param {Object} [req] - The original request object possibly containing the origin\n   * @param version\n   * @returns {number} The id of the newly created TypedMessage.\n   */\n  addUnapprovedMessage(msgParams, req, version) {\n    msgParams.version = version;\n    if (req) {\n      msgParams.origin = req.origin;\n    }\n    this.validateParams(msgParams);\n\n    log.debug(\n      `TypedMessageManager addUnapprovedMessage: ${JSON.stringify(msgParams)}`,\n    );\n\n    // create txData obj with parameters and meta data\n    const time = new Date().getTime();\n    const msgId = createId();\n    const msgData = {\n      id: msgId,\n      msgParams,\n      time,\n      status: 'unapproved',\n      type: MESSAGE_TYPE.ETH_SIGN_TYPED_DATA,\n    };\n    this.addMsg(msgData);\n\n    // signal update\n    this.emit('update');\n    return msgId;\n  }\n\n  /**\n   * Helper method for this.addUnapprovedMessage. Validates that the passed params have the required properties.\n   *\n   * @param {Object} params - The params to validate\n   */\n  validateParams(params) {\n    assert.ok(\n      params && typeof params === 'object',\n      'Params must be an object.',\n    );\n    assert.ok('data' in params, 'Params must include a \"data\" field.');\n    assert.ok('from' in params, 'Params must include a \"from\" field.');\n    assert.ok(\n      typeof params.from === 'string' &&\n        isValidHexAddress(params.from, { allowNonPrefixed: false }),\n      '\"from\" field must be a valid, lowercase, hexadecimal Ethereum address string.',\n    );\n\n    switch (params.version) {\n      case 'V1':\n        assert.ok(\n          Array.isArray(params.data),\n          '\"params.data\" must be an array.',\n        );\n        assert.doesNotThrow(() => {\n          typedSignatureHash(params.data);\n        }, 'Signing data must be valid EIP-712 typed data.');\n        break;\n      case 'V3':\n      case 'V4': {\n        assert.equal(\n          typeof params.data,\n          'string',\n          '\"params.data\" must be a string.',\n        );\n        let data;\n        assert.doesNotThrow(() => {\n          data = JSON.parse(params.data);\n        }, '\"data\" must be a valid JSON string.');\n        const validation = jsonschema.validate(data, TYPED_MESSAGE_SCHEMA);\n        assert.ok(\n          data.primaryType in data.types,\n          `Primary type of \"${data.primaryType}\" has no type definition.`,\n        );\n        assert.equal(\n          validation.errors.length,\n          0,\n          'Signing data must conform to EIP-712 schema. See https://git.io/fNtcx.',\n        );\n        let { chainId } = data.domain;\n        if (chainId) {\n          const activeChainId = parseInt(this._getCurrentChainId(), 16);\n          assert.ok(\n            !Number.isNaN(activeChainId),\n            `Cannot sign messages for chainId \"${chainId}\", because MetaMask is switching networks.`,\n          );\n          if (typeof chainId === 'string') {\n            chainId = parseInt(chainId, chainId.startsWith('0x') ? 16 : 10);\n          }\n          assert.equal(\n            chainId,\n            activeChainId,\n            `Provided chainId \"${chainId}\" must match the active chainId \"${activeChainId}\"`,\n          );\n        }\n        break;\n      }\n      default:\n        assert.fail(`Unknown typed data version \"${params.version}\"`);\n    }\n  }\n\n  /**\n   * Adds a passed TypedMessage to this.messages, and calls this._saveMsgList() to save the unapproved TypedMessages from that\n   * list to this.memStore.\n   *\n   * @param {Message} msg - The TypedMessage to add to this.messages\n   */\n  addMsg(msg) {\n    this.messages.push(msg);\n    this._saveMsgList();\n  }\n\n  /**\n   * Returns a specified TypedMessage.\n   *\n   * @param {number} msgId - The id of the TypedMessage to get\n   * @returns {TypedMessage|undefined} The TypedMessage with the id that matches the passed msgId, or undefined\n   * if no TypedMessage has that id.\n   */\n  getMsg(msgId) {\n    return this.messages.find((msg) => msg.id === msgId);\n  }\n\n  /**\n   * Approves a TypedMessage. Sets the message status via a call to this.setMsgStatusApproved, and returns a promise\n   * with any the message params modified for proper signing.\n   *\n   * @param {Object} msgParams - The msgParams to be used when eth_sign is called, plus data added by MetaMask.\n   * @param {Object} msgParams.metamaskId - Added to msgParams for tracking and identification within MetaMask.\n   * @returns {Promise<object>} Promises the msgParams object with metamaskId removed.\n   */\n  approveMessage(msgParams) {\n    this.setMsgStatusApproved(msgParams.metamaskId);\n    return this.prepMsgForSigning(msgParams);\n  }\n\n  /**\n   * Sets a TypedMessage status to 'approved' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the TypedMessage to approve.\n   */\n  setMsgStatusApproved(msgId) {\n    this._setMsgStatus(msgId, 'approved');\n  }\n\n  /**\n   * Sets a TypedMessage status to 'signed' via a call to this._setMsgStatus and updates that TypedMessage in\n   * this.messages by adding the raw signature data of the signature request to the TypedMessage\n   *\n   * @param {number} msgId - The id of the TypedMessage to sign.\n   * @param {buffer} rawSig - The raw data of the signature request\n   */\n  setMsgStatusSigned(msgId, rawSig) {\n    const msg = this.getMsg(msgId);\n    msg.rawSig = rawSig;\n    this._updateMsg(msg);\n    this._setMsgStatus(msgId, 'signed');\n  }\n\n  /**\n   * Removes the metamaskId property from passed msgParams and returns a promise which resolves the updated msgParams\n   *\n   * @param {Object} msgParams - The msgParams to modify\n   * @returns {Promise<object>} Promises the msgParams with the metamaskId property removed\n   */\n  prepMsgForSigning(msgParams) {\n    delete msgParams.metamaskId;\n    delete msgParams.version;\n    return Promise.resolve(msgParams);\n  }\n\n  /**\n   * Sets a TypedMessage status to 'rejected' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the TypedMessage to reject.\n   * @param reason\n   */\n  rejectMsg(msgId, reason = undefined) {\n    if (reason) {\n      const msg = this.getMsg(msgId);\n      this.metricsEvent({\n        event: reason,\n        category: 'Transactions',\n        properties: {\n          action: 'Sign Request',\n          version: msg.msgParams.version,\n          type: msg.type,\n        },\n      });\n    }\n    this._setMsgStatus(msgId, 'rejected');\n  }\n\n  /**\n   * Sets a TypedMessage status to 'errored' via a call to this._setMsgStatus.\n   *\n   * @param {number} msgId - The id of the TypedMessage to error\n   * @param error\n   */\n  errorMessage(msgId, error) {\n    const msg = this.getMsg(msgId);\n    msg.error = error;\n    this._updateMsg(msg);\n    this._setMsgStatus(msgId, 'errored');\n  }\n\n  /**\n   * Clears all unapproved messages from memory.\n   */\n  clearUnapproved() {\n    this.messages = this.messages.filter((msg) => msg.status !== 'unapproved');\n    this._saveMsgList();\n  }\n\n  //\n  // PRIVATE METHODS\n  //\n\n  /**\n   * Updates the status of a TypedMessage in this.messages via a call to this._updateMsg\n   *\n   * @private\n   * @param {number} msgId - The id of the TypedMessage to update.\n   * @param {string} status - The new status of the TypedMessage.\n   * @throws A 'TypedMessageManager - TypedMessage not found for id: \"${msgId}\".' if there is no TypedMessage\n   * in this.messages with an id equal to the passed msgId\n   * @fires An event with a name equal to `${msgId}:${status}`. The TypedMessage is also fired.\n   * @fires If status is 'rejected' or 'signed', an event with a name equal to `${msgId}:finished` is fired along\n   * with the TypedMessage\n   */\n  _setMsgStatus(msgId, status) {\n    const msg = this.getMsg(msgId);\n    if (!msg) {\n      throw new Error(\n        `TypedMessageManager - Message not found for id: \"${msgId}\".`,\n      );\n    }\n    msg.status = status;\n    this._updateMsg(msg);\n    this.emit(`${msgId}:${status}`, msg);\n    if (status === 'rejected' || status === 'signed' || status === 'errored') {\n      this.emit(`${msgId}:finished`, msg);\n    }\n  }\n\n  /**\n   * Sets a TypedMessage in this.messages to the passed TypedMessage if the ids are equal. Then saves the\n   * unapprovedTypedMsgs index to storage via this._saveMsgList\n   *\n   * @private\n   * @param {TypedMessage} msg - A TypedMessage that will replace an existing TypedMessage (with the same\n   * id) in this.messages\n   */\n  _updateMsg(msg) {\n    const index = this.messages.findIndex((message) => message.id === msg.id);\n    if (index !== -1) {\n      this.messages[index] = msg;\n    }\n    this._saveMsgList();\n  }\n\n  /**\n   * Saves the unapproved TypedMessages, and their count, to this.memStore\n   *\n   * @private\n   * @fires 'updateBadge'\n   */\n  _saveMsgList() {\n    const unapprovedTypedMessages = this.getUnapprovedMsgs();\n    const unapprovedTypedMessagesCount = Object.keys(unapprovedTypedMessages)\n      .length;\n    this.memStore.updateState({\n      unapprovedTypedMessages,\n      unapprovedTypedMessagesCount,\n    });\n    this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);\n  }\n}\n","export * from './caveat-mutators';\nexport * from './background-api';\nexport * from './enums';\nexport * from './permission-log';\nexport * from './specifications';\nexport * from './selectors';\n","import punycode from 'punycode/punycode';\nimport { ObservableStore } from '@metamask/obs-store';\nimport log from 'loglevel';\nimport { CHAIN_ID_TO_NETWORK_ID_MAP } from '../../../../shared/constants/network';\nimport { toChecksumHexAddress } from '../../../../shared/modules/hexstring-utils';\nimport Ens from './ens';\n\nconst ZERO_ADDRESS = '0x0000000000000000000000000000000000000000';\nconst ZERO_X_ERROR_ADDRESS = '0x';\n\nexport default class EnsController {\n  constructor({ ens, provider, onNetworkDidChange, getCurrentChainId } = {}) {\n    const initState = {\n      ensResolutionsByAddress: {},\n    };\n\n    this._ens = ens;\n    if (!this._ens) {\n      const chainId = getCurrentChainId();\n      const network = CHAIN_ID_TO_NETWORK_ID_MAP[chainId];\n      if (Ens.getNetworkEnsSupport(network)) {\n        this._ens = new Ens({\n          network,\n          provider,\n        });\n      }\n    }\n\n    this.store = new ObservableStore(initState);\n    onNetworkDidChange(() => {\n      this.store.putState(initState);\n      const chainId = getCurrentChainId();\n      const network = CHAIN_ID_TO_NETWORK_ID_MAP[chainId];\n      if (Ens.getNetworkEnsSupport(network)) {\n        this._ens = new Ens({\n          network,\n          provider,\n        });\n      } else {\n        delete this._ens;\n      }\n    });\n  }\n\n  reverseResolveAddress(address) {\n    return this._reverseResolveAddress(toChecksumHexAddress(address));\n  }\n\n  async _reverseResolveAddress(address) {\n    if (!this._ens) {\n      return undefined;\n    }\n\n    const state = this.store.getState();\n    if (state.ensResolutionsByAddress[address]) {\n      return state.ensResolutionsByAddress[address];\n    }\n\n    let domain;\n    try {\n      domain = await this._ens.reverse(address);\n    } catch (error) {\n      log.debug(error);\n      return undefined;\n    }\n\n    let registeredAddress;\n    try {\n      registeredAddress = await this._ens.lookup(domain);\n    } catch (error) {\n      log.debug(error);\n      return undefined;\n    }\n\n    if (\n      registeredAddress === ZERO_ADDRESS ||\n      registeredAddress === ZERO_X_ERROR_ADDRESS\n    ) {\n      return undefined;\n    }\n\n    if (toChecksumHexAddress(registeredAddress) !== address) {\n      return undefined;\n    }\n\n    this._updateResolutionsByAddress(address, punycode.toASCII(domain));\n    return domain;\n  }\n\n  _updateResolutionsByAddress(address, domain) {\n    const oldState = this.store.getState();\n    this.store.putState({\n      ensResolutionsByAddress: {\n        ...oldState.ensResolutionsByAddress,\n        [address]: domain,\n      },\n    });\n  }\n}\n","import EventEmitter from 'safe-event-emitter';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { bufferToHex, keccak, toBuffer, isHexString } from 'ethereumjs-util';\nimport EthQuery from 'ethjs-query';\nimport { ethErrors } from 'eth-rpc-errors';\nimport abi from 'human-standard-token-abi';\nimport Common from '@ethereumjs/common';\nimport { TransactionFactory } from '@ethereumjs/tx';\nimport { ethers } from 'ethers';\nimport NonceTracker from 'nonce-tracker';\nimport log from 'loglevel';\nimport BigNumber from 'bignumber.js';\nimport cleanErrorStack from '../../lib/cleanErrorStack';\nimport {\n  hexToBn,\n  bnToHex,\n  BnMultiplyByFraction,\n  addHexPrefix,\n  getChainType,\n} from '../../lib/util';\nimport { TRANSACTION_NO_CONTRACT_ERROR_KEY } from '../../../../ui/helpers/constants/error-keys';\nimport { getSwapsTokensReceivedFromTxMeta } from '../../../../ui/pages/swaps/swaps.util';\nimport {\n  hexWEIToDecGWEI,\n  decimalToHex,\n} from '../../../../ui/helpers/utils/conversions.util';\nimport {\n  TRANSACTION_STATUSES,\n  TRANSACTION_TYPES,\n  TRANSACTION_ENVELOPE_TYPES,\n  TRANSACTION_EVENTS,\n} from '../../../../shared/constants/transaction';\nimport { TRANSACTION_ENVELOPE_TYPE_NAMES } from '../../../../ui/helpers/constants/transactions';\nimport { METAMASK_CONTROLLER_EVENTS } from '../../metamask-controller';\nimport {\n  GAS_LIMITS,\n  GAS_ESTIMATE_TYPES,\n  GAS_RECOMMENDATIONS,\n  CUSTOM_GAS_ESTIMATE,\n  PRIORITY_LEVELS,\n} from '../../../../shared/constants/gas';\nimport { decGWEIToHexWEI } from '../../../../shared/modules/conversion.utils';\nimport {\n  HARDFORKS,\n  MAINNET,\n  NETWORK_TYPE_RPC,\n  CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP,\n} from '../../../../shared/constants/network';\nimport { isEIP1559Transaction } from '../../../../shared/modules/transaction.utils';\nimport { readAddressAsContract } from '../../../../shared/modules/contract-utils';\nimport { isEqualCaseInsensitive } from '../../../../ui/helpers/utils/util';\nimport TransactionStateManager from './tx-state-manager';\nimport TxGasUtil from './tx-gas-utils';\nimport PendingTransactionTracker from './pending-tx-tracker';\nimport * as txUtils from './lib/util';\n\nconst hstInterface = new ethers.utils.Interface(abi);\n\nconst MAX_MEMSTORE_TX_LIST_SIZE = 100; // Number of transactions (by unique nonces) to keep in memory\n\nconst SWAP_TRANSACTION_TYPES = [\n  TRANSACTION_TYPES.SWAP,\n  TRANSACTION_TYPES.SWAP_APPROVAL,\n];\n\n/**\n * @typedef {import('../../../../shared/constants/transaction').TransactionMeta} TransactionMeta\n * @typedef {import('../../../../shared/constants/transaction').TransactionMetaMetricsEventString} TransactionMetaMetricsEventString\n */\n\nconst METRICS_STATUS_FAILED = 'failed on-chain';\n\n/**\n * @typedef {Object} CustomGasSettings\n * @property {string} [gas] - The gas limit to use for the transaction\n * @property {string} [gasPrice] - The gasPrice to use for a legacy transaction\n * @property {string} [maxFeePerGas] - The maximum amount to pay per gas on a\n *  EIP-1559 transaction\n * @property {string} [maxPriorityFeePerGas] - The maximum amount of paid fee\n *  to be distributed to miner in an EIP-1559 transaction\n */\n\n/**\n * Transaction Controller is an aggregate of sub-controllers and trackers\n * composing them in a way to be exposed to the metamask controller\n *\n * - `txStateManager\n * responsible for the state of a transaction and\n * storing the transaction\n * - pendingTxTracker\n * watching blocks for transactions to be include\n * and emitting confirmed events\n * - txGasUtil\n * gas calculations and safety buffering\n * - nonceTracker\n * calculating nonces\n *\n * @param {Object} opts\n * @param {Object} opts.initState - initial transaction list default is an empty array\n * @param {Object} opts.networkStore - an observable store for network number\n * @param {Object} opts.blockTracker - An instance of eth-blocktracker\n * @param {Object} opts.provider - A network provider.\n * @param {Function} opts.signTransaction - function the signs an @ethereumjs/tx\n * @param {Object} opts.getPermittedAccounts - get accounts that an origin has permissions for\n * @param {Function} opts.signTransaction - ethTx signer that returns a rawTx\n * @param {number} [opts.txHistoryLimit] - number *optional* for limiting how many transactions are in state\n * @param {Object} opts.preferencesStore\n */\n\nexport default class TransactionController extends EventEmitter {\n  constructor(opts) {\n    super();\n    this.networkStore = opts.networkStore || new ObservableStore({});\n    this._getCurrentChainId = opts.getCurrentChainId;\n    this.getProviderConfig = opts.getProviderConfig;\n    this._getCurrentNetworkEIP1559Compatibility =\n      opts.getCurrentNetworkEIP1559Compatibility;\n    this._getCurrentAccountEIP1559Compatibility =\n      opts.getCurrentAccountEIP1559Compatibility;\n    this.preferencesStore = opts.preferencesStore || new ObservableStore({});\n    this.provider = opts.provider;\n    this.getPermittedAccounts = opts.getPermittedAccounts;\n    this.blockTracker = opts.blockTracker;\n    this.signEthTx = opts.signTransaction;\n    this.inProcessOfSigning = new Set();\n    this._trackMetaMetricsEvent = opts.trackMetaMetricsEvent;\n    this._getParticipateInMetrics = opts.getParticipateInMetrics;\n    this._getEIP1559GasFeeEstimates = opts.getEIP1559GasFeeEstimates;\n    this.createEventFragment = opts.createEventFragment;\n    this.updateEventFragment = opts.updateEventFragment;\n    this.finalizeEventFragment = opts.finalizeEventFragment;\n    this.getEventFragmentById = opts.getEventFragmentById;\n\n    this.memStore = new ObservableStore({});\n    this.query = new EthQuery(this.provider);\n\n    this.txGasUtil = new TxGasUtil(this.provider);\n    this._mapMethods();\n    this.txStateManager = new TransactionStateManager({\n      initState: opts.initState,\n      txHistoryLimit: opts.txHistoryLimit,\n      getNetwork: this.getNetwork.bind(this),\n      getCurrentChainId: opts.getCurrentChainId,\n    });\n    this._onBootCleanUp();\n\n    this.store = this.txStateManager.store;\n    this.nonceTracker = new NonceTracker({\n      provider: this.provider,\n      blockTracker: this.blockTracker,\n      getPendingTransactions: (...args) => {\n        const pendingTransactions = this.txStateManager.getPendingTransactions(\n          ...args,\n        );\n        const externalPendingTransactions = opts.getExternalPendingTransactions(\n          ...args,\n        );\n        return [...pendingTransactions, ...externalPendingTransactions];\n      },\n      getConfirmedTransactions: this.txStateManager.getConfirmedTransactions.bind(\n        this.txStateManager,\n      ),\n    });\n\n    this.pendingTxTracker = new PendingTransactionTracker({\n      provider: this.provider,\n      nonceTracker: this.nonceTracker,\n      publishTransaction: (rawTx) => this.query.sendRawTransaction(rawTx),\n      getPendingTransactions: () => {\n        const pending = this.txStateManager.getPendingTransactions();\n        const approved = this.txStateManager.getApprovedTransactions();\n        return [...pending, ...approved];\n      },\n      approveTransaction: this.approveTransaction.bind(this),\n      getCompletedTransactions: this.txStateManager.getConfirmedTransactions.bind(\n        this.txStateManager,\n      ),\n    });\n\n    this.txStateManager.store.subscribe(() =>\n      this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE),\n    );\n    this._setupListeners();\n    // memstore is computed from a few different stores\n    this._updateMemstore();\n    this.txStateManager.store.subscribe(() => this._updateMemstore());\n    this.networkStore.subscribe(() => {\n      this._onBootCleanUp();\n      this._updateMemstore();\n    });\n\n    // request state update to finalize initialization\n    this._updatePendingTxsAfterFirstBlock();\n  }\n\n  /**\n   * Gets the current chainId in the network store as a number, returning 0 if\n   * the chainId parses to NaN.\n   *\n   * @returns {number} The numerical chainId.\n   */\n  getChainId() {\n    const networkState = this.networkStore.getState();\n    const chainId = this._getCurrentChainId();\n    const integerChainId = parseInt(chainId, 16);\n    if (networkState === 'loading' || Number.isNaN(integerChainId)) {\n      return 0;\n    }\n    return integerChainId;\n  }\n\n  async getEIP1559Compatibility(fromAddress) {\n    const currentNetworkIsCompatible = await this._getCurrentNetworkEIP1559Compatibility();\n    const fromAccountIsCompatible = await this._getCurrentAccountEIP1559Compatibility(\n      fromAddress,\n    );\n    return currentNetworkIsCompatible && fromAccountIsCompatible;\n  }\n\n  /**\n   * `@ethereumjs/tx` uses `@ethereumjs/common` as a configuration tool for\n   * specifying which chain, network, hardfork and EIPs to support for\n   * a transaction. By referencing this configuration, and analyzing the fields\n   * specified in txParams, `@ethereumjs/tx` is able to determine which EIP-2718\n   * transaction type to use.\n   *\n   * @param fromAddress\n   * @returns {Common} common configuration object\n   */\n  async getCommonConfiguration(fromAddress) {\n    const { type, nickname: name } = this.getProviderConfig();\n    const supportsEIP1559 = await this.getEIP1559Compatibility(fromAddress);\n\n    // This logic below will have to be updated each time a hardfork happens\n    // that carries with it a new Transaction type. It is inconsequential for\n    // hardforks that do not include new types.\n    const hardfork = supportsEIP1559 ? HARDFORKS.LONDON : HARDFORKS.BERLIN;\n\n    // type will be one of our default network names or 'rpc'. the default\n    // network names are sufficient configuration, simply pass the name as the\n    // chain argument in the constructor.\n    if (type !== NETWORK_TYPE_RPC) {\n      return new Common({\n        chain: type,\n        hardfork,\n      });\n    }\n\n    // For 'rpc' we need to use the same basic configuration as mainnet,\n    // since we only support EVM compatible chains, and then override the\n    // name, chainId and networkId properties. This is done using the\n    // `forCustomChain` static method on the Common class.\n    const chainId = parseInt(this._getCurrentChainId(), 16);\n    const networkId = this.networkStore.getState();\n\n    const customChainParams = {\n      name,\n      chainId,\n      // It is improbable for a transaction to be signed while the network\n      // is loading for two reasons.\n      // 1. Pending, unconfirmed transactions are wiped on network change\n      // 2. The UI is unusable (loading indicator) when network is loading.\n      // setting the networkId to 0 is for type safety and to explicity lead\n      // the transaction to failing if a user is able to get to this branch\n      // on a custom network that requires valid network id. I have not ran\n      // into this limitation on any network I have attempted, even when\n      // hardcoding networkId to 'loading'.\n      networkId: networkId === 'loading' ? 0 : parseInt(networkId, 10),\n    };\n\n    return Common.forCustomChain(MAINNET, customChainParams, hardfork);\n  }\n\n  /**\n   * Adds a tx to the txlist\n   *\n   * @param txMeta\n   * @fires ${txMeta.id}:unapproved\n   */\n  addTransaction(txMeta) {\n    this.txStateManager.addTransaction(txMeta);\n    this.emit(`${txMeta.id}:unapproved`, txMeta);\n    this._trackTransactionMetricsEvent(txMeta, TRANSACTION_EVENTS.ADDED);\n  }\n\n  /**\n   * Wipes the transactions for a given account\n   *\n   * @param {string} address - hex string of the from address for txs being removed\n   */\n  wipeTransactions(address) {\n    this.txStateManager.wipeTransactions(address);\n  }\n\n  /**\n   * Add a new unapproved transaction to the pipeline\n   *\n   * @returns {Promise<string>} the hash of the transaction after being submitted to the network\n   * @param {Object} txParams - txParams for the transaction\n   * @param {Object} opts - with the key origin to put the origin on the txMeta\n   */\n  async newUnapprovedTransaction(txParams, opts = {}) {\n    log.debug(\n      `MetaMaskController newUnapprovedTransaction ${JSON.stringify(txParams)}`,\n    );\n\n    const initialTxMeta = await this.addUnapprovedTransaction(\n      txParams,\n      opts.origin,\n    );\n\n    // listen for tx completion (success, fail)\n    return new Promise((resolve, reject) => {\n      this.txStateManager.once(\n        `${initialTxMeta.id}:finished`,\n        (finishedTxMeta) => {\n          switch (finishedTxMeta.status) {\n            case TRANSACTION_STATUSES.SUBMITTED:\n              return resolve(finishedTxMeta.hash);\n            case TRANSACTION_STATUSES.REJECTED:\n              return reject(\n                cleanErrorStack(\n                  ethErrors.provider.userRejectedRequest(\n                    'MetaMask Tx Signature: User denied transaction signature.',\n                  ),\n                ),\n              );\n            case TRANSACTION_STATUSES.FAILED:\n              return reject(\n                cleanErrorStack(\n                  ethErrors.rpc.internal(finishedTxMeta.err.message),\n                ),\n              );\n            default:\n              return reject(\n                cleanErrorStack(\n                  ethErrors.rpc.internal(\n                    `MetaMask Tx Signature: Unknown problem: ${JSON.stringify(\n                      finishedTxMeta.txParams,\n                    )}`,\n                  ),\n                ),\n              );\n          }\n        },\n      );\n    });\n  }\n\n  /**\n   * Validates and generates a txMeta with defaults and puts it in txStateManager\n   * store.\n   *\n   * @param txParams\n   * @param origin\n   * @param transactionType\n   * @returns {txMeta}\n   */\n  async addUnapprovedTransaction(txParams, origin, transactionType) {\n    if (\n      transactionType !== undefined &&\n      !SWAP_TRANSACTION_TYPES.includes(transactionType)\n    ) {\n      throw new Error(\n        `TransactionController - invalid transactionType value: ${transactionType}`,\n      );\n    }\n\n    // validate\n    const normalizedTxParams = txUtils.normalizeTxParams(txParams);\n    const eip1559Compatibility = await this.getEIP1559Compatibility();\n\n    txUtils.validateTxParams(normalizedTxParams, eip1559Compatibility);\n\n    /**\n     * `generateTxMeta` adds the default txMeta properties to the passed object.\n     * These include the tx's `id`. As we use the id for determining order of\n     * txes in the tx-state-manager, it is necessary to call the asynchronous\n     * method `this._determineTransactionType` after `generateTxMeta`.\n     */\n    let txMeta = this.txStateManager.generateTxMeta({\n      txParams: normalizedTxParams,\n      origin,\n    });\n\n    if (origin === 'metamask') {\n      // Assert the from address is the selected address\n      if (normalizedTxParams.from !== this.getSelectedAddress()) {\n        throw ethErrors.rpc.internal({\n          message: `Internally initiated transaction is using invalid account.`,\n          data: {\n            origin,\n            fromAddress: normalizedTxParams.from,\n            selectedAddress: this.getSelectedAddress(),\n          },\n        });\n      }\n    } else {\n      // Assert that the origin has permissions to initiate transactions from\n      // the specified address\n      const permittedAddresses = await this.getPermittedAccounts(origin);\n      if (!permittedAddresses.includes(normalizedTxParams.from)) {\n        throw ethErrors.provider.unauthorized({ data: { origin } });\n      }\n    }\n\n    const { type, getCodeResponse } = await this._determineTransactionType(\n      txParams,\n    );\n    txMeta.type = transactionType || type;\n\n    // ensure value\n    txMeta.txParams.value = txMeta.txParams.value\n      ? addHexPrefix(txMeta.txParams.value)\n      : '0x0';\n\n    this.addTransaction(txMeta);\n    this.emit('newUnapprovedTx', txMeta);\n\n    try {\n      txMeta = await this.addTxGasDefaults(txMeta, getCodeResponse);\n    } catch (error) {\n      log.warn(error);\n      txMeta = this.txStateManager.getTransaction(txMeta.id);\n      txMeta.loadingDefaults = false;\n      this.txStateManager.updateTransaction(\n        txMeta,\n        'Failed to calculate gas defaults.',\n      );\n      throw error;\n    }\n\n    txMeta.loadingDefaults = false;\n    // save txMeta\n    this.txStateManager.updateTransaction(\n      txMeta,\n      'Added new unapproved transaction.',\n    );\n\n    return txMeta;\n  }\n\n  /**\n   * Adds the tx gas defaults: gas && gasPrice\n   *\n   * @param {Object} txMeta - the txMeta object\n   * @param getCodeResponse\n   * @returns {Promise<object>} resolves with txMeta\n   */\n  async addTxGasDefaults(txMeta, getCodeResponse) {\n    const eip1559Compatibility =\n      txMeta.txParams.type !== TRANSACTION_ENVELOPE_TYPES.LEGACY &&\n      (await this.getEIP1559Compatibility());\n    const {\n      gasPrice: defaultGasPrice,\n      maxFeePerGas: defaultMaxFeePerGas,\n      maxPriorityFeePerGas: defaultMaxPriorityFeePerGas,\n    } = await this._getDefaultGasFees(txMeta, eip1559Compatibility);\n    const {\n      gasLimit: defaultGasLimit,\n      simulationFails,\n    } = await this._getDefaultGasLimit(txMeta, getCodeResponse);\n\n    // eslint-disable-next-line no-param-reassign\n    txMeta = this.txStateManager.getTransaction(txMeta.id);\n    if (simulationFails) {\n      txMeta.simulationFails = simulationFails;\n    }\n\n    if (eip1559Compatibility) {\n      const { eip1559V2Enabled } = this.preferencesStore.getState();\n      const advancedGasFeeDefaultValues = this.getAdvancedGasFee();\n      if (\n        eip1559V2Enabled &&\n        Boolean(advancedGasFeeDefaultValues) &&\n        !SWAP_TRANSACTION_TYPES.includes(txMeta.type)\n      ) {\n        txMeta.userFeeLevel = CUSTOM_GAS_ESTIMATE;\n        txMeta.txParams.maxFeePerGas = decGWEIToHexWEI(\n          advancedGasFeeDefaultValues.maxBaseFee,\n        );\n        txMeta.txParams.maxPriorityFeePerGas = decGWEIToHexWEI(\n          advancedGasFeeDefaultValues.priorityFee,\n        );\n      } else if (\n        txMeta.txParams.gasPrice &&\n        !txMeta.txParams.maxFeePerGas &&\n        !txMeta.txParams.maxPriorityFeePerGas\n      ) {\n        // If the dapp has suggested a gas price, but no maxFeePerGas or maxPriorityFeePerGas\n        //  then we set maxFeePerGas and maxPriorityFeePerGas to the suggested gasPrice.\n        txMeta.txParams.maxFeePerGas = txMeta.txParams.gasPrice;\n        txMeta.txParams.maxPriorityFeePerGas = txMeta.txParams.gasPrice;\n        if (eip1559V2Enabled && txMeta.origin !== 'metamask') {\n          txMeta.userFeeLevel = PRIORITY_LEVELS.DAPP_SUGGESTED;\n        } else {\n          txMeta.userFeeLevel = CUSTOM_GAS_ESTIMATE;\n        }\n      } else {\n        if (\n          (defaultMaxFeePerGas &&\n            defaultMaxPriorityFeePerGas &&\n            !txMeta.txParams.maxFeePerGas &&\n            !txMeta.txParams.maxPriorityFeePerGas) ||\n          txMeta.origin === 'metamask'\n        ) {\n          txMeta.userFeeLevel = GAS_RECOMMENDATIONS.MEDIUM;\n        } else if (eip1559V2Enabled) {\n          txMeta.userFeeLevel = PRIORITY_LEVELS.DAPP_SUGGESTED;\n        } else {\n          txMeta.userFeeLevel = CUSTOM_GAS_ESTIMATE;\n        }\n\n        if (defaultMaxFeePerGas && !txMeta.txParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, then we set maxFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          txMeta.txParams.maxFeePerGas = defaultMaxFeePerGas;\n        }\n\n        if (\n          defaultMaxPriorityFeePerGas &&\n          !txMeta.txParams.maxPriorityFeePerGas\n        ) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, then we set maxPriorityFeePerGas\n          // with the one returned by the gasFeeController, if that is available.\n          txMeta.txParams.maxPriorityFeePerGas = defaultMaxPriorityFeePerGas;\n        }\n\n        if (defaultGasPrice && !txMeta.txParams.maxFeePerGas) {\n          // If the dapp has not set the gasPrice or the maxFeePerGas, and no maxFeePerGas is available\n          // from the gasFeeController, then we set maxFeePerGas to the defaultGasPrice, assuming it is\n          // available.\n          txMeta.txParams.maxFeePerGas = defaultGasPrice;\n        }\n\n        if (\n          txMeta.txParams.maxFeePerGas &&\n          !txMeta.txParams.maxPriorityFeePerGas\n        ) {\n          // If the dapp has not set the gasPrice or the maxPriorityFeePerGas, and no maxPriorityFeePerGas is\n          // available from the gasFeeController, then we set maxPriorityFeePerGas to\n          // txMeta.txParams.maxFeePerGas, which will either be the gasPrice from the controller, the maxFeePerGas\n          // set by the dapp, or the maxFeePerGas from the controller.\n          txMeta.txParams.maxPriorityFeePerGas = txMeta.txParams.maxFeePerGas;\n        }\n      }\n\n      // We remove the gasPrice param entirely when on an eip1559 compatible network\n\n      delete txMeta.txParams.gasPrice;\n    } else {\n      // We ensure that maxFeePerGas and maxPriorityFeePerGas are not in the transaction params\n      // when not on a EIP1559 compatible network\n\n      delete txMeta.txParams.maxPriorityFeePerGas;\n      delete txMeta.txParams.maxFeePerGas;\n    }\n\n    // If we have gotten to this point, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas are\n    // set on txParams, it means that either we are on a non-EIP1559 network and the dapp didn't suggest\n    // a gas price, or we are on an EIP1559 network, and none of gasPrice, maxPriorityFeePerGas or maxFeePerGas\n    // were available from either the dapp or the network.\n    if (\n      defaultGasPrice &&\n      !txMeta.txParams.gasPrice &&\n      !txMeta.txParams.maxPriorityFeePerGas &&\n      !txMeta.txParams.maxFeePerGas\n    ) {\n      txMeta.txParams.gasPrice = defaultGasPrice;\n    }\n\n    if (defaultGasLimit && !txMeta.txParams.gas) {\n      txMeta.txParams.gas = defaultGasLimit;\n      txMeta.originalGasEstimate = defaultGasLimit;\n    }\n    txMeta.defaultGasEstimates = {\n      estimateType: txMeta.userFeeLevel,\n      gas: txMeta.txParams.gas,\n      gasPrice: txMeta.txParams.gasPrice,\n      maxFeePerGas: txMeta.txParams.maxFeePerGas,\n      maxPriorityFeePerGas: txMeta.txParams.maxPriorityFeePerGas,\n    };\n    return txMeta;\n  }\n\n  /**\n   * Gets default gas fees, or returns `undefined` if gas fees are already set\n   *\n   * @param {Object} txMeta - The txMeta object\n   * @param eip1559Compatibility\n   * @returns {Promise<string|undefined>} The default gas price\n   */\n  async _getDefaultGasFees(txMeta, eip1559Compatibility) {\n    if (\n      (!eip1559Compatibility && txMeta.txParams.gasPrice) ||\n      (eip1559Compatibility &&\n        txMeta.txParams.maxFeePerGas &&\n        txMeta.txParams.maxPriorityFeePerGas)\n    ) {\n      return {};\n    }\n\n    try {\n      const {\n        gasFeeEstimates,\n        gasEstimateType,\n      } = await this._getEIP1559GasFeeEstimates();\n      if (\n        eip1559Compatibility &&\n        gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET\n      ) {\n        const {\n          medium: { suggestedMaxPriorityFeePerGas, suggestedMaxFeePerGas } = {},\n        } = gasFeeEstimates;\n\n        if (suggestedMaxPriorityFeePerGas && suggestedMaxFeePerGas) {\n          return {\n            maxFeePerGas: decGWEIToHexWEI(suggestedMaxFeePerGas),\n            maxPriorityFeePerGas: decGWEIToHexWEI(\n              suggestedMaxPriorityFeePerGas,\n            ),\n          };\n        }\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n        // The LEGACY type includes low, medium and high estimates of\n        // gas price values.\n        return {\n          gasPrice: decGWEIToHexWEI(gasFeeEstimates.medium),\n        };\n      } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n        // The ETH_GASPRICE type just includes a single gas price property,\n        // which we can assume was retrieved from eth_gasPrice\n        return {\n          gasPrice: decGWEIToHexWEI(gasFeeEstimates.gasPrice),\n        };\n      }\n    } catch (e) {\n      console.error(e);\n    }\n\n    const gasPrice = await this.query.gasPrice();\n\n    return { gasPrice: gasPrice && addHexPrefix(gasPrice.toString(16)) };\n  }\n\n  /**\n   * Gets default gas limit, or debug information about why gas estimate failed.\n   *\n   * @param {Object} txMeta - The txMeta object\n   * @param {string} getCodeResponse - The transaction category code response, used for debugging purposes\n   * @returns {Promise<Object>} Object containing the default gas limit, or the simulation failure object\n   */\n  async _getDefaultGasLimit(txMeta, getCodeResponse) {\n    const chainId = this._getCurrentChainId();\n    const customNetworkGasBuffer = CHAIN_ID_TO_GAS_LIMIT_BUFFER_MAP[chainId];\n    const chainType = getChainType(chainId);\n\n    if (txMeta.txParams.gas) {\n      return {};\n    } else if (\n      txMeta.txParams.to &&\n      txMeta.type === TRANSACTION_TYPES.SIMPLE_SEND &&\n      chainType !== 'custom'\n    ) {\n      // if there's data in the params, but there's no contract code, it's not a valid transaction\n      if (txMeta.txParams.data) {\n        const err = new Error(\n          'TxGasUtil - Trying to call a function on a non-contract address',\n        );\n        // set error key so ui can display localized error message\n        err.errorKey = TRANSACTION_NO_CONTRACT_ERROR_KEY;\n\n        // set the response on the error so that we can see in logs what the actual response was\n        err.getCodeResponse = getCodeResponse;\n        throw err;\n      }\n\n      // This is a standard ether simple send, gas requirement is exactly 21k\n      return { gasLimit: GAS_LIMITS.SIMPLE };\n    }\n\n    const {\n      blockGasLimit,\n      estimatedGasHex,\n      simulationFails,\n    } = await this.txGasUtil.analyzeGasUsage(txMeta);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.txGasUtil.addGasBuffer(\n      addHexPrefix(estimatedGasHex),\n      blockGasLimit,\n      customNetworkGasBuffer,\n    );\n    return { gasLimit, simulationFails };\n  }\n\n  /**\n   * Given a TransactionMeta object, generate new gas params such that if the\n   * transaction was an EIP1559 transaction, it only has EIP1559 gas fields,\n   * otherwise it only has gasPrice. Will use whatever custom values are\n   * specified in customGasSettings, or falls back to incrementing by a percent\n   * which is defined by specifying a numerator. 11 is a 10% bump, 12 would be\n   * a 20% bump, and so on.\n   *\n   * @param {TransactionMeta} originalTxMeta - Original transaction to use as\n   *  base\n   * @param {CustomGasSettings} [customGasSettings] - overrides for the gas\n   *  fields to use instead of the multiplier\n   * @param {number} [incrementNumerator] - Numerator from which to generate a\n   *  percentage bump of gas price. E.g 11 would be a 10% bump over base.\n   * @returns {{ newGasParams: CustomGasSettings, previousGasParams: CustomGasSettings }}\n   */\n  generateNewGasParams(\n    originalTxMeta,\n    customGasSettings = {},\n    incrementNumerator = 11,\n  ) {\n    const { txParams } = originalTxMeta;\n    const previousGasParams = {};\n    const newGasParams = {};\n    if (customGasSettings.gasLimit) {\n      newGasParams.gas = customGasSettings?.gas ?? GAS_LIMITS.SIMPLE;\n    }\n\n    if (customGasSettings.estimateSuggested) {\n      newGasParams.estimateSuggested = customGasSettings.estimateSuggested;\n    }\n\n    if (customGasSettings.estimateUsed) {\n      newGasParams.estimateUsed = customGasSettings.estimateUsed;\n    }\n\n    if (isEIP1559Transaction(originalTxMeta)) {\n      previousGasParams.maxFeePerGas = txParams.maxFeePerGas;\n      previousGasParams.maxPriorityFeePerGas = txParams.maxPriorityFeePerGas;\n      newGasParams.maxFeePerGas =\n        customGasSettings?.maxFeePerGas ||\n        bnToHex(\n          BnMultiplyByFraction(\n            hexToBn(txParams.maxFeePerGas),\n            incrementNumerator,\n            10,\n          ),\n        );\n      newGasParams.maxPriorityFeePerGas =\n        customGasSettings?.maxPriorityFeePerGas ||\n        bnToHex(\n          BnMultiplyByFraction(\n            hexToBn(txParams.maxPriorityFeePerGas),\n            incrementNumerator,\n            10,\n          ),\n        );\n    } else {\n      previousGasParams.gasPrice = txParams.gasPrice;\n      newGasParams.gasPrice =\n        customGasSettings?.gasPrice ||\n        bnToHex(\n          BnMultiplyByFraction(\n            hexToBn(txParams.gasPrice),\n            incrementNumerator,\n            10,\n          ),\n        );\n    }\n\n    return { previousGasParams, newGasParams };\n  }\n\n  /**\n   * Creates a new approved transaction to attempt to cancel a previously submitted transaction. The\n   * new transaction contains the same nonce as the previous, is a basic ETH transfer of 0x value to\n   * the sender's address, and has a higher gasPrice than that of the previous transaction.\n   *\n   * @param {number} originalTxId - the id of the txMeta that you want to attempt to cancel\n   * @param {CustomGasSettings} [customGasSettings] - overrides to use for gas\n   *  params instead of allowing this method to generate them\n   * @param options\n   * @param options.estimatedBaseFee\n   * @returns {txMeta}\n   */\n  async createCancelTransaction(\n    originalTxId,\n    customGasSettings,\n    { estimatedBaseFee } = {},\n  ) {\n    const originalTxMeta = this.txStateManager.getTransaction(originalTxId);\n    const { txParams } = originalTxMeta;\n    const { from, nonce } = txParams;\n\n    const { previousGasParams, newGasParams } = this.generateNewGasParams(\n      originalTxMeta,\n      {\n        ...customGasSettings,\n        // We want to override the previous transactions gasLimit because it\n        // will now be a simple send instead of whatever it was before such\n        // as a token transfer or contract call.\n        gasLimit: customGasSettings.gasLimit || GAS_LIMITS.SIMPLE,\n      },\n    );\n\n    const newTxMeta = this.txStateManager.generateTxMeta({\n      txParams: {\n        from,\n        to: from,\n        nonce,\n        value: '0x0',\n        ...newGasParams,\n      },\n      previousGasParams,\n      loadingDefaults: false,\n      status: TRANSACTION_STATUSES.APPROVED,\n      type: TRANSACTION_TYPES.CANCEL,\n    });\n\n    if (estimatedBaseFee) {\n      newTxMeta.estimatedBaseFee = estimatedBaseFee;\n    }\n\n    this.addTransaction(newTxMeta);\n    await this.approveTransaction(newTxMeta.id);\n    return newTxMeta;\n  }\n\n  /**\n   * Creates a new approved transaction to attempt to speed up a previously submitted transaction. The\n   * new transaction contains the same nonce as the previous. By default, the new transaction will use\n   * the same gas limit and a 10% higher gas price, though it is possible to set a custom value for\n   * each instead.\n   *\n   * @param {number} originalTxId - the id of the txMeta that you want to speed up\n   * @param {CustomGasSettings} [customGasSettings] - overrides to use for gas\n   *  params instead of allowing this method to generate them\n   * @param options\n   * @param options.estimatedBaseFee\n   * @returns {txMeta}\n   */\n  async createSpeedUpTransaction(\n    originalTxId,\n    customGasSettings,\n    { estimatedBaseFee } = {},\n  ) {\n    const originalTxMeta = this.txStateManager.getTransaction(originalTxId);\n    const { txParams } = originalTxMeta;\n\n    const { previousGasParams, newGasParams } = this.generateNewGasParams(\n      originalTxMeta,\n      customGasSettings,\n    );\n\n    const newTxMeta = this.txStateManager.generateTxMeta({\n      txParams: {\n        ...txParams,\n        ...newGasParams,\n      },\n      previousGasParams,\n      loadingDefaults: false,\n      status: TRANSACTION_STATUSES.APPROVED,\n      type: TRANSACTION_TYPES.RETRY,\n    });\n\n    if (estimatedBaseFee) {\n      newTxMeta.estimatedBaseFee = estimatedBaseFee;\n    }\n\n    this.addTransaction(newTxMeta);\n    await this.approveTransaction(newTxMeta.id);\n    return newTxMeta;\n  }\n\n  /**\n   * updates the txMeta in the txStateManager\n   *\n   * @param {Object} txMeta - the updated txMeta\n   */\n  async updateTransaction(txMeta) {\n    this.txStateManager.updateTransaction(\n      txMeta,\n      'confTx: user updated transaction',\n    );\n  }\n\n  /**\n   * updates and approves the transaction\n   *\n   * @param {Object} txMeta\n   */\n  async updateAndApproveTransaction(txMeta) {\n    this.txStateManager.updateTransaction(\n      txMeta,\n      'confTx: user approved transaction',\n    );\n    await this.approveTransaction(txMeta.id);\n  }\n\n  /**\n   * sets the tx status to approved\n   * auto fills the nonce\n   * signs the transaction\n   * publishes the transaction\n   * if any of these steps fails the tx status will be set to failed\n   *\n   * @param {number} txId - the tx's Id\n   */\n  async approveTransaction(txId) {\n    // TODO: Move this safety out of this function.\n    // Since this transaction is async,\n    // we need to keep track of what is currently being signed,\n    // So that we do not increment nonce + resubmit something\n    // that is already being incremented & signed.\n    if (this.inProcessOfSigning.has(txId)) {\n      return;\n    }\n    this.inProcessOfSigning.add(txId);\n    let nonceLock;\n    try {\n      // approve\n      this.txStateManager.setTxStatusApproved(txId);\n      // get next nonce\n      const txMeta = this.txStateManager.getTransaction(txId);\n\n      const fromAddress = txMeta.txParams.from;\n      // wait for a nonce\n      let { customNonceValue } = txMeta;\n      customNonceValue = Number(customNonceValue);\n      nonceLock = await this.nonceTracker.getNonceLock(fromAddress);\n      // add nonce to txParams\n      // if txMeta has previousGasParams then it is a retry at same nonce with\n      // higher gas settings and therefor the nonce should not be recalculated\n      const nonce = txMeta.previousGasParams\n        ? txMeta.txParams.nonce\n        : nonceLock.nextNonce;\n      const customOrNonce =\n        customNonceValue === 0 ? customNonceValue : customNonceValue || nonce;\n\n      txMeta.txParams.nonce = addHexPrefix(customOrNonce.toString(16));\n      // add nonce debugging information to txMeta\n      txMeta.nonceDetails = nonceLock.nonceDetails;\n      if (customNonceValue) {\n        txMeta.nonceDetails.customNonceValue = customNonceValue;\n      }\n      this.txStateManager.updateTransaction(\n        txMeta,\n        'transactions#approveTransaction',\n      );\n      // sign transaction\n      const rawTx = await this.signTransaction(txId);\n      await this.publishTransaction(txId, rawTx);\n      this._trackTransactionMetricsEvent(txMeta, TRANSACTION_EVENTS.APPROVED);\n      // must set transaction to submitted/failed before releasing lock\n      nonceLock.releaseLock();\n    } catch (err) {\n      // this is try-catch wrapped so that we can guarantee that the nonceLock is released\n      try {\n        this._failTransaction(txId, err);\n      } catch (err2) {\n        log.error(err2);\n      }\n      // must set transaction to submitted/failed before releasing lock\n      if (nonceLock) {\n        nonceLock.releaseLock();\n      }\n      // continue with error chain\n      throw err;\n    } finally {\n      this.inProcessOfSigning.delete(txId);\n    }\n  }\n\n  async approveTransactionsWithSameNonce(listOfTxParams = []) {\n    if (listOfTxParams.length === 0) {\n      return '';\n    }\n\n    const initialTx = listOfTxParams[0];\n    const common = await this.getCommonConfiguration(initialTx.from);\n    const initialTxAsEthTx = TransactionFactory.fromTxData(initialTx, {\n      common,\n    });\n    const initialTxAsSerializedHex = bufferToHex(initialTxAsEthTx.serialize());\n\n    if (this.inProcessOfSigning.has(initialTxAsSerializedHex)) {\n      return '';\n    }\n    this.inProcessOfSigning.add(initialTxAsSerializedHex);\n    let rawTxes, nonceLock;\n    try {\n      // TODO: we should add a check to verify that all transactions have the same from address\n      const fromAddress = initialTx.from;\n      nonceLock = await this.nonceTracker.getNonceLock(fromAddress);\n      const nonce = nonceLock.nextNonce;\n\n      rawTxes = await Promise.all(\n        listOfTxParams.map((txParams) => {\n          txParams.nonce = addHexPrefix(nonce.toString(16));\n          return this.signExternalTransaction(txParams);\n        }),\n      );\n    } catch (err) {\n      log.error(err);\n      // must set transaction to submitted/failed before releasing lock\n      // continue with error chain\n      throw err;\n    } finally {\n      if (nonceLock) {\n        nonceLock.releaseLock();\n      }\n      this.inProcessOfSigning.delete(initialTxAsSerializedHex);\n    }\n    return rawTxes;\n  }\n\n  async signExternalTransaction(_txParams) {\n    const normalizedTxParams = txUtils.normalizeTxParams(_txParams);\n    // add network/chain id\n    const chainId = this.getChainId();\n    const type = isEIP1559Transaction({ txParams: normalizedTxParams })\n      ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET\n      : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    const txParams = {\n      ...normalizedTxParams,\n      type,\n      gasLimit: normalizedTxParams.gas,\n      chainId: addHexPrefix(decimalToHex(chainId)),\n    };\n    // sign tx\n    const fromAddress = txParams.from;\n    const common = await this.getCommonConfiguration(fromAddress);\n    const unsignedEthTx = TransactionFactory.fromTxData(txParams, { common });\n    const signedEthTx = await this.signEthTx(unsignedEthTx, fromAddress);\n\n    const rawTx = bufferToHex(signedEthTx.serialize());\n    return rawTx;\n  }\n\n  /**\n   * adds the chain id and signs the transaction and set the status to signed\n   *\n   * @param {number} txId - the tx's Id\n   * @returns {string} rawTx\n   */\n  async signTransaction(txId) {\n    const txMeta = this.txStateManager.getTransaction(txId);\n    // add network/chain id\n    const chainId = this.getChainId();\n    const type = isEIP1559Transaction(txMeta)\n      ? TRANSACTION_ENVELOPE_TYPES.FEE_MARKET\n      : TRANSACTION_ENVELOPE_TYPES.LEGACY;\n    const txParams = {\n      ...txMeta.txParams,\n      type,\n      chainId,\n      gasLimit: txMeta.txParams.gas,\n    };\n    // sign tx\n    const fromAddress = txParams.from;\n    const common = await this.getCommonConfiguration(txParams.from);\n    const unsignedEthTx = TransactionFactory.fromTxData(txParams, { common });\n    const signedEthTx = await this.signEthTx(unsignedEthTx, fromAddress);\n\n    // add r,s,v values for provider request purposes see createMetamaskMiddleware\n    // and JSON rpc standard for further explanation\n    txMeta.r = bufferToHex(signedEthTx.r);\n    txMeta.s = bufferToHex(signedEthTx.s);\n    txMeta.v = bufferToHex(signedEthTx.v);\n\n    this.txStateManager.updateTransaction(\n      txMeta,\n      'transactions#signTransaction: add r, s, v values',\n    );\n\n    // set state to signed\n    this.txStateManager.setTxStatusSigned(txMeta.id);\n    const rawTx = bufferToHex(signedEthTx.serialize());\n    return rawTx;\n  }\n\n  /**\n   * publishes the raw tx and sets the txMeta to submitted\n   *\n   * @param {number} txId - the tx's Id\n   * @param {string} rawTx - the hex string of the serialized signed transaction\n   * @returns {Promise<void>}\n   */\n  async publishTransaction(txId, rawTx) {\n    const txMeta = this.txStateManager.getTransaction(txId);\n    txMeta.rawTx = rawTx;\n    if (txMeta.type === TRANSACTION_TYPES.SWAP) {\n      const preTxBalance = await this.query.getBalance(txMeta.txParams.from);\n      txMeta.preTxBalance = preTxBalance.toString(16);\n    }\n    this.txStateManager.updateTransaction(\n      txMeta,\n      'transactions#publishTransaction',\n    );\n    let txHash;\n    try {\n      txHash = await this.query.sendRawTransaction(rawTx);\n    } catch (error) {\n      if (error.message.toLowerCase().includes('known transaction')) {\n        txHash = keccak(toBuffer(addHexPrefix(rawTx), 'hex')).toString('hex');\n        txHash = addHexPrefix(txHash);\n      } else {\n        throw error;\n      }\n    }\n    this.setTxHash(txId, txHash);\n\n    this.txStateManager.setTxStatusSubmitted(txId);\n\n    this._trackTransactionMetricsEvent(txMeta, TRANSACTION_EVENTS.SUBMITTED);\n  }\n\n  /**\n   * Sets the status of the transaction to confirmed and sets the status of nonce duplicates as\n   * dropped if the txParams have data it will fetch the txReceipt\n   *\n   * @param {number} txId - The tx's ID\n   * @param txReceipt\n   * @param baseFeePerGas\n   * @param blockTimestamp\n   * @returns {Promise<void>}\n   */\n  async confirmTransaction(txId, txReceipt, baseFeePerGas, blockTimestamp) {\n    // get the txReceipt before marking the transaction confirmed\n    // to ensure the receipt is gotten before the ui revives the tx\n    const txMeta = this.txStateManager.getTransaction(txId);\n\n    if (!txMeta) {\n      return;\n    }\n\n    try {\n      const gasUsed = txUtils.normalizeTxReceiptGasUsed(txReceipt.gasUsed);\n\n      txMeta.txReceipt = {\n        ...txReceipt,\n        gasUsed,\n      };\n\n      if (baseFeePerGas) {\n        txMeta.baseFeePerGas = baseFeePerGas;\n      }\n      if (blockTimestamp) {\n        txMeta.blockTimestamp = blockTimestamp;\n      }\n\n      this.txStateManager.setTxStatusConfirmed(txId);\n      this._markNonceDuplicatesDropped(txId);\n\n      const { submittedTime } = txMeta;\n      const metricsParams = { gas_used: gasUsed };\n\n      if (submittedTime) {\n        metricsParams.completion_time = this._getTransactionCompletionTime(\n          submittedTime,\n        );\n      }\n\n      if (txReceipt.status === '0x0') {\n        metricsParams.status = METRICS_STATUS_FAILED;\n        // metricsParams.error = TODO: figure out a way to get the on-chain failure reason\n      }\n\n      this._trackTransactionMetricsEvent(\n        txMeta,\n        TRANSACTION_EVENTS.FINALIZED,\n        metricsParams,\n      );\n\n      this.txStateManager.updateTransaction(\n        txMeta,\n        'transactions#confirmTransaction - add txReceipt',\n      );\n\n      if (txMeta.type === TRANSACTION_TYPES.SWAP) {\n        const postTxBalance = await this.query.getBalance(txMeta.txParams.from);\n        const latestTxMeta = this.txStateManager.getTransaction(txId);\n\n        const approvalTxMeta = latestTxMeta.approvalTxId\n          ? this.txStateManager.getTransaction(latestTxMeta.approvalTxId)\n          : null;\n\n        latestTxMeta.postTxBalance = postTxBalance.toString(16);\n\n        this.txStateManager.updateTransaction(\n          latestTxMeta,\n          'transactions#confirmTransaction - add postTxBalance',\n        );\n\n        this._trackSwapsMetrics(latestTxMeta, approvalTxMeta);\n      }\n    } catch (err) {\n      log.error(err);\n    }\n  }\n\n  async confirmExternalTransaction(txMeta, txReceipt, baseFeePerGas) {\n    // add external transaction\n    await this.txStateManager.addExternalTransaction(txMeta);\n\n    if (!txMeta) {\n      return;\n    }\n\n    const txId = txMeta.id;\n\n    try {\n      const gasUsed = txUtils.normalizeTxReceiptGasUsed(txReceipt.gasUsed);\n\n      txMeta.txReceipt = {\n        ...txReceipt,\n        gasUsed,\n      };\n\n      if (baseFeePerGas) {\n        txMeta.baseFeePerGas = baseFeePerGas;\n      }\n\n      this.txStateManager.setTxStatusConfirmed(txId);\n      this._markNonceDuplicatesDropped(txId);\n\n      const { submittedTime } = txMeta;\n      const metricsParams = { gas_used: gasUsed };\n\n      if (submittedTime) {\n        metricsParams.completion_time = this._getTransactionCompletionTime(\n          submittedTime,\n        );\n      }\n\n      if (txReceipt.status === '0x0') {\n        metricsParams.status = METRICS_STATUS_FAILED;\n        // metricsParams.error = TODO: figure out a way to get the on-chain failure reason\n      }\n\n      this._trackTransactionMetricsEvent(\n        txMeta,\n        TRANSACTION_EVENTS.FINALIZED,\n        metricsParams,\n      );\n\n      this.txStateManager.updateTransaction(\n        txMeta,\n        'transactions#confirmTransaction - add txReceipt',\n      );\n\n      if (txMeta.type === TRANSACTION_TYPES.SWAP) {\n        const postTxBalance = await this.query.getBalance(txMeta.txParams.from);\n        const latestTxMeta = this.txStateManager.getTransaction(txId);\n\n        const approvalTxMeta = latestTxMeta.approvalTxId\n          ? this.txStateManager.getTransaction(latestTxMeta.approvalTxId)\n          : null;\n\n        latestTxMeta.postTxBalance = postTxBalance.toString(16);\n\n        this.txStateManager.updateTransaction(\n          latestTxMeta,\n          'transactions#confirmTransaction - add postTxBalance',\n        );\n\n        this._trackSwapsMetrics(latestTxMeta, approvalTxMeta);\n      }\n    } catch (err) {\n      log.error(err);\n    }\n  }\n\n  /**\n   * Convenience method for the ui thats sets the transaction to rejected\n   *\n   * @param {number} txId - the tx's Id\n   * @returns {Promise<void>}\n   */\n  async cancelTransaction(txId) {\n    const txMeta = this.txStateManager.getTransaction(txId);\n    this.txStateManager.setTxStatusRejected(txId);\n    this._trackTransactionMetricsEvent(txMeta, TRANSACTION_EVENTS.REJECTED);\n  }\n\n  /**\n   * Sets the txHas on the txMeta\n   *\n   * @param {number} txId - the tx's Id\n   * @param {string} txHash - the hash for the txMeta\n   */\n  setTxHash(txId, txHash) {\n    // Add the tx hash to the persisted meta-tx object\n    const txMeta = this.txStateManager.getTransaction(txId);\n    txMeta.hash = txHash;\n    this.txStateManager.updateTransaction(txMeta, 'transactions#setTxHash');\n  }\n\n  /**\n   * Convenience method for the UI to easily create event fragments when the\n   * fragment does not exist in state.\n   *\n   * @param {number} transactionId - The transaction id to create the event\n   *  fragment for\n   * @param {valueOf<TRANSACTION_EVENTS>} event - event type to create\n   */\n  async createTransactionEventFragment(transactionId, event) {\n    const txMeta = this.txStateManager.getTransaction(transactionId);\n    const {\n      properties,\n      sensitiveProperties,\n    } = await this._buildEventFragmentProperties(txMeta);\n    this._createTransactionEventFragment(\n      txMeta,\n      event,\n      properties,\n      sensitiveProperties,\n    );\n  }\n\n  //\n  //           PRIVATE METHODS\n  //\n  /** maps methods for convenience*/\n  _mapMethods() {\n    /** @returns {Object} the state in transaction controller */\n    this.getState = () => this.memStore.getState();\n\n    /** @returns {string|number} the network number stored in networkStore */\n    this.getNetwork = () => this.networkStore.getState();\n\n    /** @returns {string} the user selected address */\n    this.getSelectedAddress = () =>\n      this.preferencesStore.getState().selectedAddress;\n\n    /** @returns {Array} transactions whos status is unapproved */\n    this.getUnapprovedTxCount = () =>\n      Object.keys(this.txStateManager.getUnapprovedTxList()).length;\n\n    /**\n     * @returns {number} number of transactions that have the status submitted\n     * @param {string} account - hex prefixed account\n     */\n    this.getPendingTxCount = (account) =>\n      this.txStateManager.getPendingTransactions(account).length;\n\n    /**\n     * see txStateManager\n     *\n     * @param opts\n     */\n    this.getTransactions = (opts) => this.txStateManager.getTransactions(opts);\n\n    /** @returns {object} the saved default values for advancedGasFee */\n    this.getAdvancedGasFee = () =>\n      this.preferencesStore.getState().advancedGasFee;\n  }\n\n  // called once on startup\n  async _updatePendingTxsAfterFirstBlock() {\n    // wait for first block so we know we're ready\n    await this.blockTracker.getLatestBlock();\n    // get status update for all pending transactions (for the current network)\n    await this.pendingTxTracker.updatePendingTxs();\n  }\n\n  /**\n   * If transaction controller was rebooted with transactions that are uncompleted\n   * in steps of the transaction signing or user confirmation process it will either\n   * transition txMetas to a failed state or try to redo those tasks.\n   */\n\n  _onBootCleanUp() {\n    this.txStateManager\n      .getTransactions({\n        searchCriteria: {\n          status: TRANSACTION_STATUSES.UNAPPROVED,\n          loadingDefaults: true,\n        },\n      })\n      .forEach((tx) => {\n        this.addTxGasDefaults(tx)\n          .then((txMeta) => {\n            txMeta.loadingDefaults = false;\n            this.txStateManager.updateTransaction(\n              txMeta,\n              'transactions: gas estimation for tx on boot',\n            );\n          })\n          .catch((error) => {\n            const txMeta = this.txStateManager.getTransaction(tx.id);\n            txMeta.loadingDefaults = false;\n            this.txStateManager.updateTransaction(\n              txMeta,\n              'failed to estimate gas during boot cleanup.',\n            );\n            this._failTransaction(txMeta.id, error);\n          });\n      });\n\n    this.txStateManager\n      .getTransactions({\n        searchCriteria: {\n          status: TRANSACTION_STATUSES.APPROVED,\n        },\n      })\n      .forEach((txMeta) => {\n        const txSignError = new Error(\n          'Transaction found as \"approved\" during boot - possibly stuck during signing',\n        );\n        this._failTransaction(txMeta.id, txSignError);\n      });\n  }\n\n  /**\n   * is called in constructor applies the listeners for pendingTxTracker txStateManager\n   * and blockTracker\n   */\n  _setupListeners() {\n    this.txStateManager.on(\n      'tx:status-update',\n      this.emit.bind(this, 'tx:status-update'),\n    );\n    this._setupBlockTrackerListener();\n    this.pendingTxTracker.on('tx:warning', (txMeta) => {\n      this.txStateManager.updateTransaction(\n        txMeta,\n        'transactions/pending-tx-tracker#event: tx:warning',\n      );\n    });\n    this.pendingTxTracker.on('tx:failed', (txId, error) => {\n      this._failTransaction(txId, error);\n    });\n    this.pendingTxTracker.on(\n      'tx:confirmed',\n      (txId, transactionReceipt, baseFeePerGas, blockTimestamp) =>\n        this.confirmTransaction(\n          txId,\n          transactionReceipt,\n          baseFeePerGas,\n          blockTimestamp,\n        ),\n    );\n    this.pendingTxTracker.on('tx:dropped', (txId) => {\n      this._dropTransaction(txId);\n    });\n    this.pendingTxTracker.on('tx:block-update', (txMeta, latestBlockNumber) => {\n      if (!txMeta.firstRetryBlockNumber) {\n        txMeta.firstRetryBlockNumber = latestBlockNumber;\n        this.txStateManager.updateTransaction(\n          txMeta,\n          'transactions/pending-tx-tracker#event: tx:block-update',\n        );\n      }\n    });\n    this.pendingTxTracker.on('tx:retry', (txMeta) => {\n      if (!('retryCount' in txMeta)) {\n        txMeta.retryCount = 0;\n      }\n      txMeta.retryCount += 1;\n      this.txStateManager.updateTransaction(\n        txMeta,\n        'transactions/pending-tx-tracker#event: tx:retry',\n      );\n    });\n  }\n\n  /**\n   * @typedef { 'transfer' | 'approve' | 'transferfrom' | 'contractInteraction'| 'simpleSend' } InferrableTransactionTypes\n   */\n\n  /**\n   * @typedef {Object} InferTransactionTypeResult\n   * @property {InferrableTransactionTypes} type - The type of transaction\n   * @property {string} getCodeResponse - The contract code, in hex format if\n   *  it exists. '0x0' or '0x' are also indicators of non-existent contract\n   *  code\n   */\n\n  /**\n   * Determines the type of the transaction by analyzing the txParams.\n   * This method will return one of the types defined in shared/constants/transactions\n   * It will never return TRANSACTION_TYPE_CANCEL or TRANSACTION_TYPE_RETRY as these\n   * represent specific events that we control from the extension and are added manually\n   * at transaction creation.\n   *\n   * @param {Object} txParams - Parameters for the transaction\n   * @returns {InferTransactionTypeResult}\n   */\n  async _determineTransactionType(txParams) {\n    const { data, to } = txParams;\n    let name;\n    try {\n      name = data && hstInterface.parseTransaction({ data }).name;\n    } catch (error) {\n      log.debug('Failed to parse transaction data.', error, data);\n    }\n\n    const tokenMethodName = [\n      TRANSACTION_TYPES.TOKEN_METHOD_APPROVE,\n      TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER,\n      TRANSACTION_TYPES.TOKEN_METHOD_TRANSFER_FROM,\n    ].find((methodName) => isEqualCaseInsensitive(methodName, name));\n\n    let result;\n    if (data && tokenMethodName) {\n      result = tokenMethodName;\n    } else if (data && !to) {\n      result = TRANSACTION_TYPES.DEPLOY_CONTRACT;\n    }\n\n    let contractCode;\n\n    if (!result) {\n      const {\n        contractCode: resultCode,\n        isContractAddress,\n      } = await readAddressAsContract(this.query, to);\n\n      contractCode = resultCode;\n      result = isContractAddress\n        ? TRANSACTION_TYPES.CONTRACT_INTERACTION\n        : TRANSACTION_TYPES.SIMPLE_SEND;\n    }\n\n    return { type: result, getCodeResponse: contractCode };\n  }\n\n  /**\n   * Sets other txMeta statuses to dropped if the txMeta that has been confirmed has other transactions\n   * in the list have the same nonce\n   *\n   * @param {number} txId - the txId of the transaction that has been confirmed in a block\n   */\n  _markNonceDuplicatesDropped(txId) {\n    // get the confirmed transactions nonce and from address\n    const txMeta = this.txStateManager.getTransaction(txId);\n    const { nonce, from } = txMeta.txParams;\n    const sameNonceTxs = this.txStateManager.getTransactions({\n      searchCriteria: { nonce, from },\n    });\n    if (!sameNonceTxs.length) {\n      return;\n    }\n    // mark all same nonce transactions as dropped and give i a replacedBy hash\n    sameNonceTxs.forEach((otherTxMeta) => {\n      if (otherTxMeta.id === txId) {\n        return;\n      }\n      otherTxMeta.replacedBy = txMeta.hash;\n      this.txStateManager.updateTransaction(\n        txMeta,\n        'transactions/pending-tx-tracker#event: tx:confirmed reference to confirmed txHash with same nonce',\n      );\n      this._dropTransaction(otherTxMeta.id);\n    });\n  }\n\n  _setupBlockTrackerListener() {\n    let listenersAreActive = false;\n    const latestBlockHandler = this._onLatestBlock.bind(this);\n    const { blockTracker, txStateManager } = this;\n\n    txStateManager.on('tx:status-update', updateSubscription);\n    updateSubscription();\n\n    function updateSubscription() {\n      const pendingTxs = txStateManager.getPendingTransactions();\n      if (!listenersAreActive && pendingTxs.length > 0) {\n        blockTracker.on('latest', latestBlockHandler);\n        listenersAreActive = true;\n      } else if (listenersAreActive && !pendingTxs.length) {\n        blockTracker.removeListener('latest', latestBlockHandler);\n        listenersAreActive = false;\n      }\n    }\n  }\n\n  async _onLatestBlock(blockNumber) {\n    try {\n      await this.pendingTxTracker.updatePendingTxs();\n    } catch (err) {\n      log.error(err);\n    }\n    try {\n      await this.pendingTxTracker.resubmitPendingTxs(blockNumber);\n    } catch (err) {\n      log.error(err);\n    }\n  }\n\n  /**\n   * Updates the memStore in transaction controller\n   */\n  _updateMemstore() {\n    const unapprovedTxs = this.txStateManager.getUnapprovedTxList();\n    const currentNetworkTxList = this.txStateManager.getTransactions({\n      limit: MAX_MEMSTORE_TX_LIST_SIZE,\n    });\n    this.memStore.updateState({ unapprovedTxs, currentNetworkTxList });\n  }\n\n  _trackSwapsMetrics(txMeta, approvalTxMeta) {\n    if (this._getParticipateInMetrics() && txMeta.swapMetaData) {\n      if (txMeta.txReceipt.status === '0x0') {\n        this._trackMetaMetricsEvent({\n          event: 'Swap Failed',\n          sensitiveProperties: { ...txMeta.swapMetaData },\n          category: 'swaps',\n        });\n      } else {\n        const tokensReceived = getSwapsTokensReceivedFromTxMeta(\n          txMeta.destinationTokenSymbol,\n          txMeta,\n          txMeta.destinationTokenAddress,\n          txMeta.txParams.from,\n          txMeta.destinationTokenDecimals,\n          approvalTxMeta,\n          txMeta.chainId,\n        );\n\n        const quoteVsExecutionRatio = tokensReceived\n          ? `${new BigNumber(tokensReceived, 10)\n              .div(txMeta.swapMetaData.token_to_amount, 10)\n              .times(100)\n              .round(2)}%`\n          : null;\n\n        const estimatedVsUsedGasRatio =\n          txMeta.txReceipt.gasUsed && txMeta.swapMetaData.estimated_gas\n            ? `${new BigNumber(txMeta.txReceipt.gasUsed, 16)\n                .div(txMeta.swapMetaData.estimated_gas, 10)\n                .times(100)\n                .round(2)}%`\n            : null;\n\n        this._trackMetaMetricsEvent({\n          event: 'Swap Completed',\n          category: 'swaps',\n          sensitiveProperties: {\n            ...txMeta.swapMetaData,\n            token_to_amount_received: tokensReceived,\n            quote_vs_executionRatio: quoteVsExecutionRatio,\n            estimated_vs_used_gasRatio: estimatedVsUsedGasRatio,\n          },\n        });\n      }\n    }\n  }\n\n  async _buildEventFragmentProperties(txMeta, extraParams) {\n    const {\n      type,\n      time,\n      status,\n      chainId,\n      origin: referrer,\n      txParams: {\n        gasPrice,\n        gas: gasLimit,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        estimateSuggested,\n        estimateUsed,\n      },\n      defaultGasEstimates,\n      metamaskNetworkId: network,\n    } = txMeta;\n    const source = referrer === 'metamask' ? 'user' : 'dapp';\n\n    const gasParams = {};\n\n    if (isEIP1559Transaction(txMeta)) {\n      gasParams.max_fee_per_gas = maxFeePerGas;\n      gasParams.max_priority_fee_per_gas = maxPriorityFeePerGas;\n    } else {\n      gasParams.gas_price = gasPrice;\n    }\n\n    if (defaultGasEstimates) {\n      const { estimateType } = defaultGasEstimates;\n      if (estimateType) {\n        gasParams.default_estimate = estimateType;\n        let defaultMaxFeePerGas = txMeta.defaultGasEstimates.maxFeePerGas;\n        let defaultMaxPriorityFeePerGas =\n          txMeta.defaultGasEstimates.maxPriorityFeePerGas;\n\n        if (\n          [\n            GAS_RECOMMENDATIONS.LOW,\n            GAS_RECOMMENDATIONS.MEDIUM,\n            GAS_RECOMMENDATIONS.MEDIUM.HIGH,\n          ].includes(estimateType)\n        ) {\n          const { gasFeeEstimates } = await this._getEIP1559GasFeeEstimates();\n          if (gasFeeEstimates?.[estimateType]?.suggestedMaxFeePerGas) {\n            defaultMaxFeePerGas =\n              gasFeeEstimates[estimateType]?.suggestedMaxFeePerGas;\n            gasParams.default_max_fee_per_gas = defaultMaxFeePerGas;\n          }\n          if (gasFeeEstimates?.[estimateType]?.suggestedMaxPriorityFeePerGas) {\n            defaultMaxPriorityFeePerGas =\n              gasFeeEstimates[estimateType]?.suggestedMaxPriorityFeePerGas;\n            gasParams.default_max_priority_fee_per_gas = defaultMaxPriorityFeePerGas;\n          }\n        }\n      }\n\n      if (txMeta.defaultGasEstimates.gas) {\n        gasParams.default_gas = txMeta.defaultGasEstimates.gas;\n      }\n      if (txMeta.defaultGasEstimates.gasPrice) {\n        gasParams.default_gas_price = txMeta.defaultGasEstimates.gasPrice;\n      }\n    }\n\n    if (estimateSuggested) {\n      gasParams.estimate_suggested = estimateSuggested;\n    }\n\n    if (estimateUsed) {\n      gasParams.estimate_used = estimateUsed;\n    }\n\n    const gasParamsInGwei = this._getGasValuesInGWEI(gasParams);\n\n    let eip1559Version = '0';\n    if (txMeta.txParams.maxFeePerGas) {\n      const { eip1559V2Enabled } = this.preferencesStore.getState();\n      eip1559Version = eip1559V2Enabled ? '2' : '1';\n    }\n\n    const properties = {\n      chain_id: chainId,\n      referrer,\n      source,\n      network,\n      type,\n      eip_1559_version: eip1559Version,\n      gas_edit_type: 'none',\n      gas_edit_attempted: 'none',\n    };\n\n    const sensitiveProperties = {\n      status,\n      transaction_envelope_type: isEIP1559Transaction(txMeta)\n        ? TRANSACTION_ENVELOPE_TYPE_NAMES.FEE_MARKET\n        : TRANSACTION_ENVELOPE_TYPE_NAMES.LEGACY,\n      first_seen: time,\n      gas_limit: gasLimit,\n      ...gasParamsInGwei,\n      ...extraParams,\n    };\n\n    return { properties, sensitiveProperties };\n  }\n\n  /**\n   * Helper method that checks for the presence of an existing fragment by id\n   * appropriate for the type of event that triggered fragment creation. If the\n   * appropriate fragment exists, then nothing is done. If it does not exist a\n   * new event fragment is created with the appropriate payload.\n   *\n   * @param {TransactionMeta} txMeta - Transaction meta object\n   * @param {TransactionMetaMetricsEventString} event - The event type that\n   *  triggered fragment creation\n   * @param {Object} properties - properties to include in the fragment\n   * @param {Object} [sensitiveProperties] - sensitive properties to include in\n   *  the fragment\n   */\n  _createTransactionEventFragment(\n    txMeta,\n    event,\n    properties,\n    sensitiveProperties,\n  ) {\n    const isSubmitted = [\n      TRANSACTION_EVENTS.FINALIZED,\n      TRANSACTION_EVENTS.SUBMITTED,\n    ].includes(event);\n    const uniqueIdentifier = `transaction-${\n      isSubmitted ? 'submitted' : 'added'\n    }-${txMeta.id}`;\n\n    const fragment = this.getEventFragmentById(uniqueIdentifier);\n    if (typeof fragment !== 'undefined') {\n      return;\n    }\n\n    switch (event) {\n      // When a transaction is added to the controller, we know that the user\n      // will be presented with a confirmation screen. The user will then\n      // either confirm or reject that transaction. Each has an associated\n      // event we want to track. While we don't necessarily need an event\n      // fragment to model this, having one allows us to record additional\n      // properties onto the event from the UI. For example, when the user\n      // edits the transactions gas params we can record that property and\n      // then get analytics on the number of transactions in which gas edits\n      // occur.\n      case TRANSACTION_EVENTS.ADDED:\n        this.createEventFragment({\n          category: 'Transactions',\n          initialEvent: TRANSACTION_EVENTS.ADDED,\n          successEvent: TRANSACTION_EVENTS.APPROVED,\n          failureEvent: TRANSACTION_EVENTS.REJECTED,\n          properties,\n          sensitiveProperties,\n          persist: true,\n          uniqueIdentifier,\n        });\n        break;\n      // If for some reason an approval or rejection occurs without the added\n      // fragment existing in memory, we create the added fragment but without\n      // the initialEvent firing. This is to prevent possible duplication of\n      // events. A good example why this might occur is if the user had\n      // unapproved transactions in memory when updating to the version that\n      // includes this change. A migration would have also helped here but this\n      // implementation hardens against other possible bugs where a fragment\n      // does not exist.\n      case TRANSACTION_EVENTS.APPROVED:\n      case TRANSACTION_EVENTS.REJECTED:\n        this.createEventFragment({\n          category: 'Transactions',\n          successEvent: TRANSACTION_EVENTS.APPROVED,\n          failureEvent: TRANSACTION_EVENTS.REJECTED,\n          properties,\n          sensitiveProperties,\n          persist: true,\n          uniqueIdentifier,\n        });\n        break;\n      // When a transaction is submitted it will always result in updating\n      // to a finalized state (dropped, failed, confirmed) -- eventually.\n      // However having a fragment started at this stage allows augmenting\n      // analytics data with user interactions such as speeding up and\n      // canceling the transactions. From this controllers perspective a new\n      // transaction with a new id is generated for speed up and cancel\n      // transactions, but from the UI we could augment the previous ID with\n      // supplemental data to show user intent. Such as when they open the\n      // cancel UI but don't submit. We can record that this happened and add\n      // properties to the transaction event.\n      case TRANSACTION_EVENTS.SUBMITTED:\n        this.createEventFragment({\n          category: 'Transactions',\n          initialEvent: TRANSACTION_EVENTS.SUBMITTED,\n          successEvent: TRANSACTION_EVENTS.FINALIZED,\n          properties,\n          sensitiveProperties,\n          persist: true,\n          uniqueIdentifier,\n        });\n        break;\n      // If for some reason a transaction is finalized without the submitted\n      // fragment existing in memory, we create the submitted fragment but\n      // without the initialEvent firing. This is to prevent possible\n      // duplication of events. A good example why this might occur is if th\n      // user had pending transactions in memory when updating to the version\n      // that includes this change. A migration would have also helped here but\n      // this implementation hardens against other possible bugs where a\n      // fragment does not exist.\n      case TRANSACTION_EVENTS.FINALIZED:\n        this.createEventFragment({\n          category: 'Transactions',\n          successEvent: TRANSACTION_EVENTS.FINALIZED,\n          properties,\n          sensitiveProperties,\n          persist: true,\n          uniqueIdentifier,\n        });\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Extracts relevant properties from a transaction meta\n   * object and uses them to create and send metrics for various transaction\n   * events.\n   *\n   * @param {Object} txMeta - the txMeta object\n   * @param {TransactionMetaMetricsEventString} event - the name of the transaction event\n   * @param {Object} extraParams - optional props and values to include in sensitiveProperties\n   */\n  async _trackTransactionMetricsEvent(txMeta, event, extraParams = {}) {\n    if (!txMeta) {\n      return;\n    }\n    const {\n      properties,\n      sensitiveProperties,\n    } = await this._buildEventFragmentProperties(txMeta, extraParams);\n\n    // Create event fragments for event types that spawn fragments, and ensure\n    // existence of fragments for event types that act upon them.\n    this._createTransactionEventFragment(\n      txMeta,\n      event,\n      properties,\n      sensitiveProperties,\n    );\n\n    let id;\n\n    switch (event) {\n      // If the user approves a transaction, finalize the transaction added\n      // event fragment.\n      case TRANSACTION_EVENTS.APPROVED:\n        id = `transaction-added-${txMeta.id}`;\n        this.updateEventFragment(id, { properties, sensitiveProperties });\n        this.finalizeEventFragment(id);\n        break;\n      // If the user rejects a transaction, finalize the transaction added\n      // event fragment. with the abandoned flag set.\n      case TRANSACTION_EVENTS.REJECTED:\n        id = `transaction-added-${txMeta.id}`;\n        this.updateEventFragment(id, { properties, sensitiveProperties });\n        this.finalizeEventFragment(id, {\n          abandoned: true,\n        });\n        break;\n      // When a transaction is finalized, also finalize the transaction\n      // submitted event fragment.\n      case TRANSACTION_EVENTS.FINALIZED:\n        id = `transaction-submitted-${txMeta.id}`;\n        this.updateEventFragment(id, { properties, sensitiveProperties });\n        this.finalizeEventFragment(`transaction-submitted-${txMeta.id}`);\n        break;\n      default:\n        break;\n    }\n  }\n\n  _getTransactionCompletionTime(submittedTime) {\n    return Math.round((Date.now() - submittedTime) / 1000).toString();\n  }\n\n  _getGasValuesInGWEI(gasParams) {\n    const gasValuesInGwei = {};\n    for (const param in gasParams) {\n      if (isHexString(gasParams[param])) {\n        gasValuesInGwei[param] = hexWEIToDecGWEI(gasParams[param]);\n      } else {\n        gasValuesInGwei[param] = gasParams[param];\n      }\n    }\n    return gasValuesInGwei;\n  }\n\n  _failTransaction(txId, error) {\n    this.txStateManager.setTxStatusFailed(txId, error);\n    const txMeta = this.txStateManager.getTransaction(txId);\n    this._trackTransactionMetricsEvent(txMeta, TRANSACTION_EVENTS.FINALIZED, {\n      error: error.message,\n    });\n  }\n\n  _dropTransaction(txId) {\n    this.txStateManager.setTxStatusDropped(txId);\n    const txMeta = this.txStateManager.getTransaction(txId);\n    this._trackTransactionMetricsEvent(txMeta, TRANSACTION_EVENTS.FINALIZED);\n  }\n}\n","import Analytics from 'analytics-node';\nimport { SECOND } from '../../../shared/constants/time';\n\nconst isDevOrTestEnvironment = Boolean(\n  process.env.METAMASK_DEBUG || process.env.IN_TEST,\n);\nconst SEGMENT_WRITE_KEY = process.env.SEGMENT_WRITE_KEY ?? null;\nconst SEGMENT_HOST = process.env.SEGMENT_HOST ?? null;\n\n// flushAt controls how many events are sent to segment at once. Segment will\n// hold onto a queue of events until it hits this number, then it sends them as\n// a batch. This setting defaults to 20, but in development we likely want to\n// see events in real time for debugging, so this is set to 1 to disable the\n// queueing mechanism.\nconst SEGMENT_FLUSH_AT =\n  process.env.METAMASK_ENVIRONMENT === 'production' ? undefined : 1;\n\n// flushInterval controls how frequently the queue is flushed to segment.\n// This happens regardless of the size of the queue. The default setting is\n// 10,000ms (10 seconds). This default is rather high, though thankfully\n// using the background process as our event handler means we don't have to\n// deal with short lived sessions that happen faster than the interval\n// e.g confirmations. This is set to 5,000ms (5 seconds) arbitrarily with the\n// intent of having a value less than 10 seconds.\nconst SEGMENT_FLUSH_INTERVAL = SECOND * 5;\n\n/**\n * Creates a mock segment module for usage in test environments. This is used\n * when building the application in test mode to catch event calls and prevent\n * them from being sent to segment. It is also used in unit tests to mock and\n * spy on the methods to ensure proper behavior\n *\n * @param {number} flushAt - number of events to queue before sending to segment\n * @returns {SegmentInterface}\n */\nexport const createSegmentMock = (flushAt = SEGMENT_FLUSH_AT) => {\n  const segmentMock = {\n    // Internal queue to keep track of events and properly mimic segment's\n    // queueing behavior.\n    queue: [],\n\n    /**\n     * Used to immediately send all queued events and reset the queue to zero.\n     * For our purposes this simply triggers the callback method registered with\n     * the event.\n     */\n    flush() {\n      segmentMock.queue.forEach(([_, callback]) => {\n        callback();\n      });\n      segmentMock.queue = [];\n    },\n\n    /**\n     * Track an event and add it to the queue. If the queue size reaches the\n     * flushAt threshold, flush the queue.\n     *\n     * @param payload\n     * @param callback\n     */\n    track(payload, callback = () => undefined) {\n      segmentMock.queue.push([payload, callback]);\n\n      if (segmentMock.queue.length >= flushAt) {\n        segmentMock.flush();\n      }\n    },\n\n    /**\n     * A true NOOP, these methods are either not used or do not await callback\n     * and therefore require no functionality.\n     */\n    page() {\n      // noop\n    },\n    identify() {\n      // noop\n    },\n  };\n\n  return segmentMock;\n};\n\nexport const segment =\n  !SEGMENT_WRITE_KEY || (isDevOrTestEnvironment && !SEGMENT_HOST)\n    ? createSegmentMock(SEGMENT_FLUSH_AT, SEGMENT_FLUSH_INTERVAL)\n    : new Analytics(SEGMENT_WRITE_KEY, {\n        host: SEGMENT_HOST,\n        flushAt: SEGMENT_FLUSH_AT,\n        flushInterval: SEGMENT_FLUSH_INTERVAL,\n      });\n","import log from 'loglevel';\nimport Wallet from 'ethereumjs-wallet';\nimport importers from 'ethereumjs-wallet/thirdparty';\nimport {\n  toBuffer,\n  isValidPrivate,\n  bufferToHex,\n  stripHexPrefix,\n} from 'ethereumjs-util';\nimport { addHexPrefix } from '../lib/util';\n\nconst accountImporter = {\n  importAccount(strategy, args) {\n    try {\n      const importer = this.strategies[strategy];\n      const privateKeyHex = importer(...args);\n      return Promise.resolve(privateKeyHex);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  },\n\n  strategies: {\n    'Private Key': (privateKey) => {\n      if (!privateKey) {\n        throw new Error('Cannot import an empty key.');\n      }\n\n      const prefixed = addHexPrefix(privateKey);\n      const buffer = toBuffer(prefixed);\n\n      if (!isValidPrivate(buffer)) {\n        throw new Error('Cannot import invalid private key.');\n      }\n\n      const stripped = stripHexPrefix(prefixed);\n      return stripped;\n    },\n    'JSON File': (input, password) => {\n      let wallet;\n      try {\n        wallet = importers.fromEtherWallet(input, password);\n      } catch (e) {\n        log.debug('Attempt to import as EtherWallet format failed, trying V3');\n        wallet = Wallet.fromV3(input, password, true);\n      }\n\n      return walletToPrivateKey(wallet);\n    },\n  },\n};\n\nfunction walletToPrivateKey(wallet) {\n  const privateKeyBuffer = wallet.getPrivateKey();\n  return bufferToHex(privateKeyBuffer);\n}\n\nexport default accountImporter;\n","export { default, NETWORK_EVENTS } from './network';\n","import { ethers } from 'ethers';\nimport log from 'loglevel';\nimport BigNumber from 'bignumber.js';\nimport { ObservableStore } from '@metamask/obs-store';\nimport { mapValues, cloneDeep } from 'lodash';\nimport abi from 'human-standard-token-abi';\nimport { calcTokenAmount } from '../../../ui/helpers/utils/token-util';\nimport { calcGasTotal } from '../../../ui/pages/send/send.utils';\nimport {\n  conversionUtil,\n  decGWEIToHexWEI,\n  addCurrencies,\n} from '../../../shared/modules/conversion.utils';\nimport {\n  DEFAULT_ERC20_APPROVE_GAS,\n  QUOTES_EXPIRED_ERROR,\n  QUOTES_NOT_AVAILABLE_ERROR,\n  SWAPS_FETCH_ORDER_CONFLICT,\n  SWAPS_CHAINID_CONTRACT_ADDRESS_MAP,\n} from '../../../shared/constants/swaps';\nimport { GAS_ESTIMATE_TYPES } from '../../../shared/constants/gas';\n\nimport { isSwapsDefaultTokenAddress } from '../../../shared/modules/swaps.utils';\n\nimport {\n  fetchTradesInfo as defaultFetchTradesInfo,\n  getBaseApi,\n} from '../../../ui/pages/swaps/swaps.util';\nimport fetchWithCache from '../../../ui/helpers/utils/fetch-with-cache';\nimport { MINUTE, SECOND } from '../../../shared/constants/time';\nimport { isEqualCaseInsensitive } from '../../../ui/helpers/utils/util';\nimport { NETWORK_EVENTS } from './network';\n\n// The MAX_GAS_LIMIT is a number that is higher than the maximum gas costs we have observed on any aggregator\nconst MAX_GAS_LIMIT = 2500000;\n\n// To ensure that our serves are not spammed if MetaMask is left idle, we limit the number of fetches for quotes that are made on timed intervals.\n// 3 seems to be an appropriate balance of giving users the time they need when MetaMask is not left idle, and turning polling off when it is.\nconst POLL_COUNT_LIMIT = 3;\n\n// If for any reason the MetaSwap API fails to provide a refresh time,\n// provide a reasonable fallback to avoid further errors\nconst FALLBACK_QUOTE_REFRESH_TIME = MINUTE;\nconst FALLBACK_SMART_TRANSACTION_REFRESH_TIME = SECOND * 10;\nconst FALLBACK_SMART_TRANSACTIONS_DEADLINE = 180;\n\nfunction calculateGasEstimateWithRefund(\n  maxGas = MAX_GAS_LIMIT,\n  estimatedRefund = 0,\n  estimatedGas = 0,\n) {\n  const maxGasMinusRefund = new BigNumber(maxGas, 10).minus(\n    estimatedRefund,\n    10,\n  );\n  const isMaxGasMinusRefundNegative = maxGasMinusRefund.lt(0);\n\n  const gasEstimateWithRefund =\n    !isMaxGasMinusRefundNegative && maxGasMinusRefund.lt(estimatedGas, 16)\n      ? `0x${maxGasMinusRefund.toString(16)}`\n      : estimatedGas;\n\n  return gasEstimateWithRefund;\n}\n\nconst initialState = {\n  swapsState: {\n    quotes: {},\n    quotesPollingLimitEnabled: false,\n    fetchParams: null,\n    tokens: null,\n    tradeTxId: null,\n    approveTxId: null,\n    quotesLastFetched: null,\n    customMaxGas: '',\n    customGasPrice: null,\n    customMaxFeePerGas: null,\n    customMaxPriorityFeePerGas: null,\n    swapsUserFeeLevel: '',\n    selectedAggId: null,\n    customApproveTxData: '',\n    errorKey: '',\n    topAggId: null,\n    routeState: '',\n    swapsFeatureIsLive: true,\n    saveFetchedQuotes: false,\n    swapsQuoteRefreshTime: FALLBACK_QUOTE_REFRESH_TIME,\n    swapsQuotePrefetchingRefreshTime: FALLBACK_QUOTE_REFRESH_TIME,\n    swapsStxBatchStatusRefreshTime: FALLBACK_SMART_TRANSACTION_REFRESH_TIME,\n    swapsStxGetTransactionsRefreshTime: FALLBACK_SMART_TRANSACTION_REFRESH_TIME,\n    swapsFeatureFlags: {},\n  },\n};\n\nexport default class SwapsController {\n  constructor({\n    getBufferedGasLimit,\n    networkController,\n    provider,\n    getProviderConfig,\n    getTokenRatesState,\n    fetchTradesInfo = defaultFetchTradesInfo,\n    getCurrentChainId,\n    getEIP1559GasFeeEstimates,\n  }) {\n    this.store = new ObservableStore({\n      swapsState: { ...initialState.swapsState },\n    });\n\n    this._fetchTradesInfo = fetchTradesInfo;\n    this._getCurrentChainId = getCurrentChainId;\n    this._getEIP1559GasFeeEstimates = getEIP1559GasFeeEstimates;\n\n    this.getBufferedGasLimit = getBufferedGasLimit;\n    this.getTokenRatesState = getTokenRatesState;\n\n    this.pollCount = 0;\n    this.getProviderConfig = getProviderConfig;\n\n    this.indexOfNewestCallInFlight = 0;\n\n    this.ethersProvider = new ethers.providers.Web3Provider(provider);\n    this._currentNetwork = networkController.store.getState().network;\n    networkController.on(NETWORK_EVENTS.NETWORK_DID_CHANGE, (network) => {\n      if (network !== 'loading' && network !== this._currentNetwork) {\n        this._currentNetwork = network;\n        this.ethersProvider = new ethers.providers.Web3Provider(provider);\n      }\n    });\n  }\n\n  async fetchSwapsRefreshRates(chainId) {\n    const response = await fetchWithCache(\n      getBaseApi('network', chainId),\n      { method: 'GET' },\n      { cacheRefreshTime: 600000 },\n    );\n    const { refreshRates } = response || {};\n    if (\n      !refreshRates ||\n      typeof refreshRates.quotes !== 'number' ||\n      typeof refreshRates.quotesPrefetching !== 'number' ||\n      typeof refreshRates.stxGetTransactions !== 'number' ||\n      typeof refreshRates.stxBatchStatus !== 'number'\n    ) {\n      throw new Error(\n        `MetaMask - invalid response for refreshRates: ${response}`,\n      );\n    }\n    // We presently use milliseconds in the UI.\n    return {\n      quotes: refreshRates.quotes * 1000,\n      quotesPrefetching: refreshRates.quotesPrefetching * 1000,\n      stxGetTransactions: refreshRates.stxGetTransactions * 1000,\n      stxBatchStatus: refreshRates.stxBatchStatus * 1000,\n      stxStatusDeadline: refreshRates.stxStatusDeadline,\n    };\n  }\n\n  // Sets the refresh rate for quote updates from the MetaSwap API\n  async _setSwapsRefreshRates() {\n    const chainId = this._getCurrentChainId();\n    let swapsRefreshRates;\n    try {\n      swapsRefreshRates = await this.fetchSwapsRefreshRates(chainId);\n    } catch (e) {\n      console.error('Request for swaps quote refresh time failed: ', e);\n    }\n    const { swapsState: latestSwapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: {\n        ...latestSwapsState,\n        swapsQuoteRefreshTime:\n          swapsRefreshRates?.quotes || FALLBACK_QUOTE_REFRESH_TIME,\n        swapsQuotePrefetchingRefreshTime:\n          swapsRefreshRates?.quotesPrefetching || FALLBACK_QUOTE_REFRESH_TIME,\n        swapsStxGetTransactionsRefreshTime:\n          swapsRefreshRates?.stxGetTransactions ||\n          FALLBACK_SMART_TRANSACTION_REFRESH_TIME,\n        swapsStxBatchStatusRefreshTime:\n          swapsRefreshRates?.stxBatchStatus ||\n          FALLBACK_SMART_TRANSACTION_REFRESH_TIME,\n        swapsStxStatusDeadline:\n          swapsRefreshRates?.stxStatusDeadline ||\n          FALLBACK_SMART_TRANSACTIONS_DEADLINE,\n      },\n    });\n  }\n\n  // Once quotes are fetched, we poll for new ones to keep the quotes up to date. Market and aggregator contract conditions can change fast enough\n  // that quotes will no longer be available after 1 or 2 minutes. When fetchAndSetQuotes is first called, it receives fetch parameters that are stored in\n  // state. These stored parameters are used on subsequent calls made during polling.\n  // Note: we stop polling after 3 requests, until new quotes are explicitly asked for. The logic that enforces that maximum is in the body of fetchAndSetQuotes\n  pollForNewQuotes() {\n    const {\n      swapsState: {\n        swapsQuoteRefreshTime,\n        swapsQuotePrefetchingRefreshTime,\n        quotesPollingLimitEnabled,\n      },\n    } = this.store.getState();\n    // swapsQuoteRefreshTime is used on the View Quote page, swapsQuotePrefetchingRefreshTime is used on the Build Quote page.\n    const quotesRefreshRateInMs = quotesPollingLimitEnabled\n      ? swapsQuoteRefreshTime\n      : swapsQuotePrefetchingRefreshTime;\n    this.pollingTimeout = setTimeout(() => {\n      const { swapsState } = this.store.getState();\n      this.fetchAndSetQuotes(\n        swapsState.fetchParams,\n        swapsState.fetchParams?.metaData,\n        true,\n      );\n    }, quotesRefreshRateInMs);\n  }\n\n  stopPollingForQuotes() {\n    if (this.pollingTimeout) {\n      clearTimeout(this.pollingTimeout);\n    }\n  }\n\n  async fetchAndSetQuotes(\n    fetchParams,\n    fetchParamsMetaData = {},\n    isPolledRequest,\n  ) {\n    const { chainId } = fetchParamsMetaData;\n    const {\n      swapsState: { quotesPollingLimitEnabled, saveFetchedQuotes },\n    } = this.store.getState();\n\n    if (!fetchParams) {\n      return null;\n    }\n    // Every time we get a new request that is not from the polling, we reset the poll count so we can poll for up to three more sets of quotes with these new params.\n    if (!isPolledRequest) {\n      this.pollCount = 0;\n    }\n\n    // If there are any pending poll requests, clear them so that they don't get call while this new fetch is in process\n    clearTimeout(this.pollingTimeout);\n\n    if (!isPolledRequest) {\n      this.setSwapsErrorKey('');\n    }\n\n    const indexOfCurrentCall = this.indexOfNewestCallInFlight + 1;\n    this.indexOfNewestCallInFlight = indexOfCurrentCall;\n\n    if (!saveFetchedQuotes) {\n      this.setSaveFetchedQuotes(true);\n    }\n\n    let [newQuotes] = await Promise.all([\n      this._fetchTradesInfo(fetchParams, {\n        ...fetchParamsMetaData,\n      }),\n      this._setSwapsRefreshRates(),\n    ]);\n\n    const {\n      swapsState: { saveFetchedQuotes: saveFetchedQuotesAfterResponse },\n    } = this.store.getState();\n\n    // If saveFetchedQuotesAfterResponse is false, it means a user left Swaps (we cleaned the state)\n    // and we don't want to set any API response with quotes into state.\n    if (!saveFetchedQuotesAfterResponse) {\n      return [\n        {}, // quotes\n        null, // selectedAggId\n      ];\n    }\n\n    newQuotes = mapValues(newQuotes, (quote) => ({\n      ...quote,\n      sourceTokenInfo: fetchParamsMetaData.sourceTokenInfo,\n      destinationTokenInfo: fetchParamsMetaData.destinationTokenInfo,\n    }));\n\n    const quotesLastFetched = Date.now();\n\n    let approvalRequired = false;\n    if (\n      !isSwapsDefaultTokenAddress(fetchParams.sourceToken, chainId) &&\n      Object.values(newQuotes).length\n    ) {\n      const allowance = await this._getERC20Allowance(\n        fetchParams.sourceToken,\n        fetchParams.fromAddress,\n        chainId,\n      );\n      const [firstQuote] = Object.values(newQuotes);\n\n      // For a user to be able to swap a token, they need to have approved the MetaSwap contract to withdraw that token.\n      // _getERC20Allowance() returns the amount of the token they have approved for withdrawal. If that amount is greater\n      // than 0, it means that approval has already occurred and is not needed. Otherwise, for tokens to be swapped, a new\n      // call of the ERC-20 approve method is required.\n      approvalRequired =\n        firstQuote.approvalNeeded &&\n        allowance.eq(0) &&\n        firstQuote.aggregator !== 'wrappedNative';\n      if (!approvalRequired) {\n        newQuotes = mapValues(newQuotes, (quote) => ({\n          ...quote,\n          approvalNeeded: null,\n        }));\n      } else if (!isPolledRequest) {\n        const { gasLimit: approvalGas } = await this.timedoutGasReturn(\n          firstQuote.approvalNeeded,\n        );\n\n        newQuotes = mapValues(newQuotes, (quote) => ({\n          ...quote,\n          approvalNeeded: {\n            ...quote.approvalNeeded,\n            gas: approvalGas || DEFAULT_ERC20_APPROVE_GAS,\n          },\n        }));\n      }\n    }\n\n    let topAggId = null;\n\n    // We can reduce time on the loading screen by only doing this after the\n    // loading screen and best quote have rendered.\n    if (!approvalRequired && !fetchParams?.balanceError) {\n      newQuotes = await this.getAllQuotesWithGasEstimates(newQuotes);\n    }\n\n    if (Object.values(newQuotes).length === 0) {\n      this.setSwapsErrorKey(QUOTES_NOT_AVAILABLE_ERROR);\n    } else {\n      const [\n        _topAggId,\n        quotesWithSavingsAndFeeData,\n      ] = await this._findTopQuoteAndCalculateSavings(newQuotes);\n      topAggId = _topAggId;\n      newQuotes = quotesWithSavingsAndFeeData;\n    }\n\n    // If a newer call has been made, don't update state with old information\n    // Prevents timing conflicts between fetches\n    if (this.indexOfNewestCallInFlight !== indexOfCurrentCall) {\n      throw new Error(SWAPS_FETCH_ORDER_CONFLICT);\n    }\n\n    const { swapsState } = this.store.getState();\n    let { selectedAggId } = swapsState;\n    if (!newQuotes[selectedAggId]) {\n      selectedAggId = null;\n    }\n\n    this.store.updateState({\n      swapsState: {\n        ...swapsState,\n        quotes: newQuotes,\n        fetchParams: { ...fetchParams, metaData: fetchParamsMetaData },\n        quotesLastFetched,\n        selectedAggId,\n        topAggId,\n      },\n    });\n\n    if (quotesPollingLimitEnabled) {\n      // We only want to do up to a maximum of three requests from polling if polling limit is enabled.\n      // Otherwise we won't increase pollCount, so polling will run without a limit.\n      this.pollCount += 1;\n    }\n\n    if (!quotesPollingLimitEnabled || this.pollCount < POLL_COUNT_LIMIT + 1) {\n      this.pollForNewQuotes();\n    } else {\n      this.resetPostFetchState();\n      this.setSwapsErrorKey(QUOTES_EXPIRED_ERROR);\n      return null;\n    }\n\n    return [newQuotes, topAggId];\n  }\n\n  safeRefetchQuotes() {\n    const { swapsState } = this.store.getState();\n    if (!this.pollingTimeout && swapsState.fetchParams) {\n      this.fetchAndSetQuotes(swapsState.fetchParams);\n    }\n  }\n\n  setSelectedQuoteAggId(selectedAggId) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({ swapsState: { ...swapsState, selectedAggId } });\n  }\n\n  setSwapsTokens(tokens) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({ swapsState: { ...swapsState, tokens } });\n  }\n\n  clearSwapsQuotes() {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({ swapsState: { ...swapsState, quotes: {} } });\n  }\n\n  setSwapsErrorKey(errorKey) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({ swapsState: { ...swapsState, errorKey } });\n  }\n\n  async getAllQuotesWithGasEstimates(quotes) {\n    const quoteGasData = await Promise.all(\n      Object.values(quotes).map(async (quote) => {\n        const { gasLimit, simulationFails } = await this.timedoutGasReturn(\n          quote.trade,\n        );\n        return [gasLimit, simulationFails, quote.aggregator];\n      }),\n    );\n\n    const newQuotes = {};\n    quoteGasData.forEach(([gasLimit, simulationFails, aggId]) => {\n      if (gasLimit && !simulationFails) {\n        const gasEstimateWithRefund = calculateGasEstimateWithRefund(\n          quotes[aggId].maxGas,\n          quotes[aggId].estimatedRefund,\n          gasLimit,\n        );\n\n        newQuotes[aggId] = {\n          ...quotes[aggId],\n          gasEstimate: gasLimit,\n          gasEstimateWithRefund,\n        };\n      } else if (quotes[aggId].approvalNeeded) {\n        // If gas estimation fails, but an ERC-20 approve is needed, then we do not add any estimate property to the quote object\n        // Such quotes will rely on the maxGas and averageGas properties from the api\n        newQuotes[aggId] = quotes[aggId];\n      }\n      // If gas estimation fails and no approval is needed, then we filter that quote out, so that it is not shown to the user\n    });\n    return newQuotes;\n  }\n\n  timedoutGasReturn(tradeTxParams) {\n    return new Promise((resolve) => {\n      let gasTimedOut = false;\n\n      const gasTimeout = setTimeout(() => {\n        gasTimedOut = true;\n        resolve({ gasLimit: null, simulationFails: true });\n      }, SECOND * 5);\n\n      // Remove gas from params that will be passed to the `estimateGas` call\n      // Including it can cause the estimate to fail if the actual gas needed\n      // exceeds the passed gas\n      const tradeTxParamsForGasEstimate = {\n        data: tradeTxParams.data,\n        from: tradeTxParams.from,\n        to: tradeTxParams.to,\n        value: tradeTxParams.value,\n      };\n\n      this.getBufferedGasLimit({ txParams: tradeTxParamsForGasEstimate }, 1)\n        .then(({ gasLimit, simulationFails }) => {\n          if (!gasTimedOut) {\n            clearTimeout(gasTimeout);\n            resolve({ gasLimit, simulationFails });\n          }\n        })\n        .catch((e) => {\n          log.error(e);\n          if (!gasTimedOut) {\n            clearTimeout(gasTimeout);\n            resolve({ gasLimit: null, simulationFails: true });\n          }\n        });\n    });\n  }\n\n  async setInitialGasEstimate(initialAggId) {\n    const { swapsState } = this.store.getState();\n\n    const quoteToUpdate = { ...swapsState.quotes[initialAggId] };\n\n    const {\n      gasLimit: newGasEstimate,\n      simulationFails,\n    } = await this.timedoutGasReturn(quoteToUpdate.trade);\n\n    if (newGasEstimate && !simulationFails) {\n      const gasEstimateWithRefund = calculateGasEstimateWithRefund(\n        quoteToUpdate.maxGas,\n        quoteToUpdate.estimatedRefund,\n        newGasEstimate,\n      );\n\n      quoteToUpdate.gasEstimate = newGasEstimate;\n      quoteToUpdate.gasEstimateWithRefund = gasEstimateWithRefund;\n    }\n\n    this.store.updateState({\n      swapsState: {\n        ...swapsState,\n        quotes: { ...swapsState.quotes, [initialAggId]: quoteToUpdate },\n      },\n    });\n  }\n\n  setApproveTxId(approveTxId) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({ swapsState: { ...swapsState, approveTxId } });\n  }\n\n  setTradeTxId(tradeTxId) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({ swapsState: { ...swapsState, tradeTxId } });\n  }\n\n  setQuotesLastFetched(quotesLastFetched) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: { ...swapsState, quotesLastFetched },\n    });\n  }\n\n  setSwapsTxGasPrice(gasPrice) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: { ...swapsState, customGasPrice: gasPrice },\n    });\n  }\n\n  setSwapsTxMaxFeePerGas(maxFeePerGas) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: { ...swapsState, customMaxFeePerGas: maxFeePerGas },\n    });\n  }\n\n  setSwapsUserFeeLevel(swapsUserFeeLevel) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: { ...swapsState, swapsUserFeeLevel },\n    });\n  }\n\n  setSwapsQuotesPollingLimitEnabled(quotesPollingLimitEnabled) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: { ...swapsState, quotesPollingLimitEnabled },\n    });\n  }\n\n  setSwapsTxMaxFeePriorityPerGas(maxPriorityFeePerGas) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: {\n        ...swapsState,\n        customMaxPriorityFeePerGas: maxPriorityFeePerGas,\n      },\n    });\n  }\n\n  setSwapsTxGasLimit(gasLimit) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: { ...swapsState, customMaxGas: gasLimit },\n    });\n  }\n\n  setCustomApproveTxData(data) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: { ...swapsState, customApproveTxData: data },\n    });\n  }\n\n  setBackgroundSwapRouteState(routeState) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({ swapsState: { ...swapsState, routeState } });\n  }\n\n  setSaveFetchedQuotes(status) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: { ...swapsState, saveFetchedQuotes: status },\n    });\n  }\n\n  setSwapsLiveness(swapsLiveness) {\n    const { swapsState } = this.store.getState();\n    const { swapsFeatureIsLive } = swapsLiveness;\n    this.store.updateState({\n      swapsState: { ...swapsState, swapsFeatureIsLive },\n    });\n  }\n\n  setSwapsFeatureFlags(swapsFeatureFlags) {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: { ...swapsState, swapsFeatureFlags },\n    });\n  }\n\n  resetPostFetchState() {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: {\n        ...initialState.swapsState,\n        tokens: swapsState.tokens,\n        fetchParams: swapsState.fetchParams,\n        swapsFeatureIsLive: swapsState.swapsFeatureIsLive,\n        swapsQuoteRefreshTime: swapsState.swapsQuoteRefreshTime,\n        swapsQuotePrefetchingRefreshTime:\n          swapsState.swapsQuotePrefetchingRefreshTime,\n        swapsFeatureFlags: swapsState.swapsFeatureFlags,\n      },\n    });\n    clearTimeout(this.pollingTimeout);\n  }\n\n  resetSwapsState() {\n    const { swapsState } = this.store.getState();\n    this.store.updateState({\n      swapsState: {\n        ...initialState.swapsState,\n        swapsQuoteRefreshTime: swapsState.swapsQuoteRefreshTime,\n        swapsQuotePrefetchingRefreshTime:\n          swapsState.swapsQuotePrefetchingRefreshTime,\n      },\n    });\n    clearTimeout(this.pollingTimeout);\n  }\n\n  async _findTopQuoteAndCalculateSavings(quotes = {}) {\n    const {\n      contractExchangeRates: tokenConversionRates,\n    } = this.getTokenRatesState();\n    const {\n      swapsState: { customGasPrice, customMaxPriorityFeePerGas },\n    } = this.store.getState();\n    const chainId = this._getCurrentChainId();\n\n    const numQuotes = Object.keys(quotes).length;\n    if (!numQuotes) {\n      return {};\n    }\n\n    const newQuotes = cloneDeep(quotes);\n\n    const {\n      gasFeeEstimates,\n      gasEstimateType,\n    } = await this._getEIP1559GasFeeEstimates();\n\n    let usedGasPrice = '0x0';\n\n    if (gasEstimateType === GAS_ESTIMATE_TYPES.FEE_MARKET) {\n      const {\n        high: { suggestedMaxPriorityFeePerGas },\n        estimatedBaseFee,\n      } = gasFeeEstimates;\n\n      usedGasPrice = addCurrencies(\n        customMaxPriorityFeePerGas || // Is already in hex WEI.\n          decGWEIToHexWEI(suggestedMaxPriorityFeePerGas),\n        decGWEIToHexWEI(estimatedBaseFee),\n        {\n          aBase: 16,\n          bBase: 16,\n          toNumericBase: 'hex',\n          numberOfDecimals: 6,\n        },\n      );\n    } else if (gasEstimateType === GAS_ESTIMATE_TYPES.LEGACY) {\n      usedGasPrice = customGasPrice || decGWEIToHexWEI(gasFeeEstimates.high);\n    } else if (gasEstimateType === GAS_ESTIMATE_TYPES.ETH_GASPRICE) {\n      usedGasPrice =\n        customGasPrice || decGWEIToHexWEI(gasFeeEstimates.gasPrice);\n    }\n\n    let topAggId = null;\n    let overallValueOfBestQuoteForSorting = null;\n\n    Object.values(newQuotes).forEach((quote) => {\n      const {\n        aggregator,\n        approvalNeeded,\n        averageGas,\n        destinationAmount = 0,\n        destinationToken,\n        destinationTokenInfo,\n        gasEstimate,\n        sourceAmount,\n        sourceToken,\n        trade,\n        fee: metaMaskFee,\n      } = quote;\n\n      const tradeGasLimitForCalculation = gasEstimate\n        ? new BigNumber(gasEstimate, 16)\n        : new BigNumber(averageGas || MAX_GAS_LIMIT, 10);\n\n      const totalGasLimitForCalculation = tradeGasLimitForCalculation\n        .plus(approvalNeeded?.gas || '0x0', 16)\n        .toString(16);\n\n      const gasTotalInWeiHex = calcGasTotal(\n        totalGasLimitForCalculation,\n        usedGasPrice,\n      );\n\n      // trade.value is a sum of different values depending on the transaction.\n      // It always includes any external fees charged by the quote source. In\n      // addition, if the source asset is the selected chain's default token, trade.value\n      // includes the amount of that token.\n      const totalWeiCost = new BigNumber(gasTotalInWeiHex, 16).plus(\n        trade.value,\n        16,\n      );\n\n      const totalEthCost = conversionUtil(totalWeiCost, {\n        fromCurrency: 'ETH',\n        fromDenomination: 'WEI',\n        toDenomination: 'ETH',\n        fromNumericBase: 'BN',\n        numberOfDecimals: 6,\n      });\n\n      // The total fee is aggregator/exchange fees plus gas fees.\n      // If the swap is from the selected chain's default token, subtract\n      // the sourceAmount from the total cost. Otherwise, the total fee\n      // is simply trade.value plus gas fees.\n      const ethFee = isSwapsDefaultTokenAddress(sourceToken, chainId)\n        ? conversionUtil(\n            totalWeiCost.minus(sourceAmount, 10), // sourceAmount is in wei\n            {\n              fromCurrency: 'ETH',\n              fromDenomination: 'WEI',\n              toDenomination: 'ETH',\n              fromNumericBase: 'BN',\n              numberOfDecimals: 6,\n            },\n          )\n        : totalEthCost;\n\n      const decimalAdjustedDestinationAmount = calcTokenAmount(\n        destinationAmount,\n        destinationTokenInfo.decimals,\n      );\n\n      const tokenPercentageOfPreFeeDestAmount = new BigNumber(100, 10)\n        .minus(metaMaskFee, 10)\n        .div(100);\n      const destinationAmountBeforeMetaMaskFee = decimalAdjustedDestinationAmount.div(\n        tokenPercentageOfPreFeeDestAmount,\n      );\n      const metaMaskFeeInTokens = destinationAmountBeforeMetaMaskFee.minus(\n        decimalAdjustedDestinationAmount,\n      );\n\n      const tokenConversionRate =\n        tokenConversionRates[\n          Object.keys(tokenConversionRates).find((tokenAddress) =>\n            isEqualCaseInsensitive(tokenAddress, destinationToken),\n          )\n        ];\n      const conversionRateForSorting = tokenConversionRate || 1;\n\n      const ethValueOfTokens = decimalAdjustedDestinationAmount.times(\n        conversionRateForSorting.toString(10),\n        10,\n      );\n\n      const conversionRateForCalculations = isSwapsDefaultTokenAddress(\n        destinationToken,\n        chainId,\n      )\n        ? 1\n        : tokenConversionRate;\n\n      const overallValueOfQuoteForSorting =\n        conversionRateForCalculations === undefined\n          ? ethValueOfTokens\n          : ethValueOfTokens.minus(ethFee, 10);\n\n      quote.ethFee = ethFee.toString(10);\n\n      if (conversionRateForCalculations !== undefined) {\n        quote.ethValueOfTokens = ethValueOfTokens.toString(10);\n        quote.overallValueOfQuote = overallValueOfQuoteForSorting.toString(10);\n        quote.metaMaskFeeInEth = metaMaskFeeInTokens\n          .times(conversionRateForCalculations.toString(10))\n          .toString(10);\n      }\n\n      if (\n        overallValueOfBestQuoteForSorting === null ||\n        overallValueOfQuoteForSorting.gt(overallValueOfBestQuoteForSorting)\n      ) {\n        topAggId = aggregator;\n        overallValueOfBestQuoteForSorting = overallValueOfQuoteForSorting;\n      }\n    });\n\n    const isBest =\n      isSwapsDefaultTokenAddress(\n        newQuotes[topAggId].destinationToken,\n        chainId,\n      ) ||\n      Boolean(\n        tokenConversionRates[\n          Object.keys(tokenConversionRates).find((tokenAddress) =>\n            isEqualCaseInsensitive(\n              tokenAddress,\n              newQuotes[topAggId]?.destinationToken,\n            ),\n          )\n        ],\n      );\n\n    let savings = null;\n\n    if (isBest) {\n      const bestQuote = newQuotes[topAggId];\n\n      savings = {};\n\n      const {\n        ethFee: medianEthFee,\n        metaMaskFeeInEth: medianMetaMaskFee,\n        ethValueOfTokens: medianEthValueOfTokens,\n      } = getMedianEthValueQuote(Object.values(newQuotes));\n\n      // Performance savings are calculated as:\n      //   (ethValueOfTokens for the best trade) - (ethValueOfTokens for the media trade)\n      savings.performance = new BigNumber(bestQuote.ethValueOfTokens, 10).minus(\n        medianEthValueOfTokens,\n        10,\n      );\n\n      // Fee savings are calculated as:\n      //   (fee for the median trade) - (fee for the best trade)\n      savings.fee = new BigNumber(medianEthFee).minus(bestQuote.ethFee, 10);\n\n      savings.metaMaskFee = bestQuote.metaMaskFeeInEth;\n\n      // Total savings are calculated as:\n      //   performance savings + fee savings - metamask fee\n      savings.total = savings.performance\n        .plus(savings.fee)\n        .minus(savings.metaMaskFee)\n        .toString(10);\n      savings.performance = savings.performance.toString(10);\n      savings.fee = savings.fee.toString(10);\n      savings.medianMetaMaskFee = medianMetaMaskFee;\n\n      newQuotes[topAggId].isBestQuote = true;\n      newQuotes[topAggId].savings = savings;\n    }\n\n    return [topAggId, newQuotes];\n  }\n\n  async _getERC20Allowance(contractAddress, walletAddress, chainId) {\n    const contract = new ethers.Contract(\n      contractAddress,\n      abi,\n      this.ethersProvider,\n    );\n    return await contract.allowance(\n      walletAddress,\n      SWAPS_CHAINID_CONTRACT_ADDRESS_MAP[chainId],\n    );\n  }\n}\n\n/**\n * Calculates the median overallValueOfQuote of a sample of quotes.\n *\n * @param {Array} _quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth, and ethValueOfTokens properties\n * @returns {Object} An object with the ethValueOfTokens, ethFee, and metaMaskFeeInEth of the quote with the median overallValueOfQuote\n */\nfunction getMedianEthValueQuote(_quotes) {\n  if (!Array.isArray(_quotes) || _quotes.length === 0) {\n    throw new Error('Expected non-empty array param.');\n  }\n\n  const quotes = [..._quotes];\n\n  quotes.sort((quoteA, quoteB) => {\n    const overallValueOfQuoteA = new BigNumber(quoteA.overallValueOfQuote, 10);\n    const overallValueOfQuoteB = new BigNumber(quoteB.overallValueOfQuote, 10);\n    if (overallValueOfQuoteA.equals(overallValueOfQuoteB)) {\n      return 0;\n    }\n    return overallValueOfQuoteA.lessThan(overallValueOfQuoteB) ? -1 : 1;\n  });\n\n  if (quotes.length % 2 === 1) {\n    // return middle values\n    const medianOverallValue =\n      quotes[(quotes.length - 1) / 2].overallValueOfQuote;\n    const quotesMatchingMedianQuoteValue = quotes.filter(\n      (quote) => medianOverallValue === quote.overallValueOfQuote,\n    );\n    return meansOfQuotesFeesAndValue(quotesMatchingMedianQuoteValue);\n  }\n\n  // return mean of middle two values\n  const upperIndex = quotes.length / 2;\n  const lowerIndex = upperIndex - 1;\n\n  const overallValueAtUpperIndex = quotes[upperIndex].overallValueOfQuote;\n  const overallValueAtLowerIndex = quotes[lowerIndex].overallValueOfQuote;\n\n  const quotesMatchingUpperIndexValue = quotes.filter(\n    (quote) => overallValueAtUpperIndex === quote.overallValueOfQuote,\n  );\n  const quotesMatchingLowerIndexValue = quotes.filter(\n    (quote) => overallValueAtLowerIndex === quote.overallValueOfQuote,\n  );\n\n  const feesAndValueAtUpperIndex = meansOfQuotesFeesAndValue(\n    quotesMatchingUpperIndexValue,\n  );\n  const feesAndValueAtLowerIndex = meansOfQuotesFeesAndValue(\n    quotesMatchingLowerIndexValue,\n  );\n\n  return {\n    ethFee: new BigNumber(feesAndValueAtUpperIndex.ethFee, 10)\n      .plus(feesAndValueAtLowerIndex.ethFee, 10)\n      .dividedBy(2)\n      .toString(10),\n    metaMaskFeeInEth: new BigNumber(\n      feesAndValueAtUpperIndex.metaMaskFeeInEth,\n      10,\n    )\n      .plus(feesAndValueAtLowerIndex.metaMaskFeeInEth, 10)\n      .dividedBy(2)\n      .toString(10),\n    ethValueOfTokens: new BigNumber(\n      feesAndValueAtUpperIndex.ethValueOfTokens,\n      10,\n    )\n      .plus(feesAndValueAtLowerIndex.ethValueOfTokens, 10)\n      .dividedBy(2)\n      .toString(10),\n  };\n}\n\n/**\n * Calculates the arithmetic mean for each of three properties - ethFee, metaMaskFeeInEth and ethValueOfTokens - across\n * an array of objects containing those properties.\n *\n * @param {Array} quotes - A sample of quote objects with overallValueOfQuote, ethFee, metaMaskFeeInEth and\n * ethValueOfTokens properties\n * @returns {Object} An object with the arithmetic mean each of the ethFee, metaMaskFeeInEth and ethValueOfTokens of\n * the passed quote objects\n */\nfunction meansOfQuotesFeesAndValue(quotes) {\n  const feeAndValueSumsAsBigNumbers = quotes.reduce(\n    (feeAndValueSums, quote) => ({\n      ethFee: feeAndValueSums.ethFee.plus(quote.ethFee, 10),\n      metaMaskFeeInEth: feeAndValueSums.metaMaskFeeInEth.plus(\n        quote.metaMaskFeeInEth,\n        10,\n      ),\n      ethValueOfTokens: feeAndValueSums.ethValueOfTokens.plus(\n        quote.ethValueOfTokens,\n        10,\n      ),\n    }),\n    {\n      ethFee: new BigNumber(0, 10),\n      metaMaskFeeInEth: new BigNumber(0, 10),\n      ethValueOfTokens: new BigNumber(0, 10),\n    },\n  );\n\n  return {\n    ethFee: feeAndValueSumsAsBigNumbers.ethFee\n      .div(quotes.length, 10)\n      .toString(10),\n    metaMaskFeeInEth: feeAndValueSumsAsBigNumbers.metaMaskFeeInEth\n      .div(quotes.length, 10)\n      .toString(10),\n    ethValueOfTokens: feeAndValueSumsAsBigNumbers.ethValueOfTokens\n      .div(quotes.length, 10)\n      .toString(10),\n  };\n}\n\nexport const utils = {\n  getMedianEthValueQuote,\n  meansOfQuotesFeesAndValue,\n};\n","const { EventEmitter } = require('events')\nconst HDKey = require('hdkey')\nconst ethUtil = require('ethereumjs-util')\nconst sigUtil = require('eth-sig-util')\nconst { TransactionFactory } = require('@ethereumjs/tx')\n\nconst pathBase = 'm'\nconst hdPathString = `${pathBase}/44'/60'/0'`\nconst type = 'Ledger Hardware'\n\nconst BRIDGE_URL = 'https://metamask.github.io/eth-ledger-bridge-keyring'\n\nconst MAX_INDEX = 1000\nconst NETWORK_API_URLS = {\n  ropsten: 'http://api-ropsten.etherscan.io',\n  kovan: 'http://api-kovan.etherscan.io',\n  rinkeby: 'https://api-rinkeby.etherscan.io',\n  mainnet: 'https://api.etherscan.io',\n}\n\nclass LedgerBridgeKeyring extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n    this.accountDetails = {}\n    this.bridgeUrl = null\n    this.type = type\n    this.page = 0\n    this.perPage = 5\n    this.unlockedAccount = 0\n    this.hdk = new HDKey()\n    this.paths = {}\n    this.iframe = null\n    this.network = 'mainnet'\n    this.implementFullBIP44 = false\n    this.deserialize(opts)\n\n    this.iframeLoaded = false\n    this._setupIframe()\n  }\n\n  serialize () {\n    return Promise.resolve({\n      hdPath: this.hdPath,\n      accounts: this.accounts,\n      accountDetails: this.accountDetails,\n      bridgeUrl: this.bridgeUrl,\n      implementFullBIP44: false,\n    })\n  }\n\n  deserialize (opts = {}) {\n    this.hdPath = opts.hdPath || hdPathString\n    this.bridgeUrl = opts.bridgeUrl || BRIDGE_URL\n    this.accounts = opts.accounts || []\n    this.accountDetails = opts.accountDetails || {}\n    if (!opts.accountDetails) {\n      this._migrateAccountDetails(opts)\n    }\n\n    this.implementFullBIP44 = opts.implementFullBIP44 || false\n\n    // Remove accounts that don't have corresponding account details\n    this.accounts = this.accounts\n      .filter((account) => Object.keys(this.accountDetails).includes(ethUtil.toChecksumAddress(account)))\n\n    return Promise.resolve()\n  }\n\n  _migrateAccountDetails (opts) {\n    if (this._isLedgerLiveHdPath() && opts.accountIndexes) {\n      for (const account of Object.keys(opts.accountIndexes)) {\n        this.accountDetails[account] = {\n          bip44: true,\n          hdPath: this._getPathForIndex(opts.accountIndexes[account]),\n        }\n      }\n    }\n\n    // try to migrate non-LedgerLive accounts too\n    if (!this._isLedgerLiveHdPath()) {\n      this.accounts\n        .filter((account) => !Object.keys(this.accountDetails).includes(ethUtil.toChecksumAddress(account)))\n        .forEach((account) => {\n          try {\n            this.accountDetails[ethUtil.toChecksumAddress(account)] = {\n              bip44: false,\n              hdPath: this._pathFromAddress(account),\n            }\n          } catch (e) {\n            console.log(`failed to migrate account ${account}`)\n          }\n        })\n    }\n  }\n\n  isUnlocked () {\n    return Boolean(this.hdk && this.hdk.publicKey)\n  }\n\n  setAccountToUnlock (index) {\n    this.unlockedAccount = parseInt(index, 10)\n  }\n\n  setHdPath (hdPath) {\n    // Reset HDKey if the path changes\n    if (this.hdPath !== hdPath) {\n      this.hdk = new HDKey()\n    }\n    this.hdPath = hdPath\n  }\n\n  unlock (hdPath) {\n    if (this.isUnlocked() && !hdPath) {\n      return Promise.resolve('already unlocked')\n    }\n    const path = hdPath ? this._toLedgerPath(hdPath) : this.hdPath\n    return new Promise((resolve, reject) => {\n      this._sendMessage({\n        action: 'ledger-unlock',\n        params: {\n          hdPath: path,\n        },\n      },\n      ({ success, payload }) => {\n        if (success) {\n          this.hdk.publicKey = Buffer.from(payload.publicKey, 'hex')\n          this.hdk.chainCode = Buffer.from(payload.chainCode, 'hex')\n          resolve(payload.address)\n        } else {\n          reject(payload.error || new Error('Unknown error'))\n        }\n      })\n    })\n  }\n\n  addAccounts (n = 1) {\n\n    return new Promise((resolve, reject) => {\n      this.unlock()\n        .then(async (_) => {\n          const from = this.unlockedAccount\n          const to = from + n\n          for (let i = from; i < to; i++) {\n            const path = this._getPathForIndex(i)\n            let address\n            if (this._isLedgerLiveHdPath()) {\n              address = await this.unlock(path)\n            } else {\n              address = this._addressFromIndex(pathBase, i)\n            }\n            this.accountDetails[ethUtil.toChecksumAddress(address)] = {\n              // TODO: consider renaming this property, as the current name is misleading\n              // It's currently used to represent whether an account uses the Ledger Live path.\n              bip44: this._isLedgerLiveHdPath(),\n              hdPath: path,\n            }\n\n            if (!this.accounts.includes(address)) {\n              this.accounts.push(address)\n            }\n            this.page = 0\n          }\n          resolve(this.accounts)\n        })\n        .catch(reject)\n    })\n  }\n\n  getFirstPage () {\n    this.page = 0\n    return this.__getPage(1)\n  }\n\n  getNextPage () {\n    return this.__getPage(1)\n  }\n\n  getPreviousPage () {\n    return this.__getPage(-1)\n  }\n\n  getAccounts () {\n    return Promise.resolve(this.accounts.slice())\n  }\n\n  removeAccount (address) {\n    if (!this.accounts.map((a) => a.toLowerCase()).includes(address.toLowerCase())) {\n      throw new Error(`Address ${address} not found in this keyring`)\n    }\n    this.accounts = this.accounts.filter((a) => a.toLowerCase() !== address.toLowerCase())\n    delete this.accountDetails[ethUtil.toChecksumAddress(address)]\n  }\n\n  attemptMakeApp () {\n    return new Promise((resolve, reject) => {\n      this._sendMessage({\n        action: 'ledger-make-app',\n      }, ({ success, error }) => {\n        if (success) {\n          resolve(true)\n        } else {\n          reject(error)\n        }\n      })\n    })\n  }\n\n  updateTransportMethod (transportType) {\n    return new Promise((resolve, reject) => {\n      // If the iframe isn't loaded yet, let's store the desired transportType value and\n      // optimistically return a successful promise\n      if (!this.iframeLoaded) {\n        this.delayedPromise = {\n          resolve,\n          reject,\n          transportType,\n        }\n        return\n      }\n\n      this._sendMessage({\n        action: 'ledger-update-transport',\n        params: { transportType },\n      }, ({ success }) => {\n        if (success) {\n          resolve(true)\n        } else {\n          reject(new Error('Ledger transport could not be updated'))\n        }\n      })\n    })\n  }\n\n  // tx is an instance of the ethereumjs-transaction class.\n  signTransaction (address, tx) {\n    let rawTxHex\n    // transactions built with older versions of ethereumjs-tx have a\n    // getChainId method that newer versions do not. Older versions are mutable\n    // while newer versions default to being immutable. Expected shape and type\n    // of data for v, r and s differ (Buffer (old) vs BN (new))\n    if (typeof tx.getChainId === 'function') {\n      // In this version of ethereumjs-tx we must add the chainId in hex format\n      // to the initial v value. The chainId must be included in the serialized\n      // transaction which is only communicated to ethereumjs-tx in this\n      // value. In newer versions the chainId is communicated via the 'Common'\n      // object.\n      tx.v = ethUtil.bufferToHex(tx.getChainId())\n      tx.r = '0x00'\n      tx.s = '0x00'\n\n      rawTxHex = tx.serialize().toString('hex')\n\n      return this._signTransaction(address, rawTxHex, (payload) => {\n        tx.v = Buffer.from(payload.v, 'hex')\n        tx.r = Buffer.from(payload.r, 'hex')\n        tx.s = Buffer.from(payload.s, 'hex')\n        return tx\n      })\n    }\n\n    // The below `encode` call is only necessary for legacy transactions, as `getMessageToSign`\n    // calls `rlp.encode` internally for non-legacy transactions. As per the \"Transaction Execution\"\n    // section of the ethereum yellow paper, transactions need to be \"well-formed RLP, with no additional\n    // trailing bytes\".\n\n    // Note also that `getMessageToSign` will return valid RLP for all transaction types, whereas the\n    // `serialize` method will not for any transaction type except legacy. This is because `serialize` includes\n    // empty r, s and v values in the encoded rlp. This is why we use `getMessageToSign` here instead of `serialize`.\n    const messageToSign = tx.getMessageToSign(false)\n\n    rawTxHex = Buffer.isBuffer(messageToSign)\n      ? messageToSign.toString('hex')\n      : ethUtil.rlp.encode(messageToSign).toString('hex')\n\n    return this._signTransaction(address, rawTxHex, (payload) => {\n      // Because tx will be immutable, first get a plain javascript object that\n      // represents the transaction. Using txData here as it aligns with the\n      // nomenclature of ethereumjs/tx.\n      const txData = tx.toJSON()\n      // The fromTxData utility expects a type to support transactions with a type other than 0\n      txData.type = tx.type\n      // The fromTxData utility expects v,r and s to be hex prefixed\n      txData.v = ethUtil.addHexPrefix(payload.v)\n      txData.r = ethUtil.addHexPrefix(payload.r)\n      txData.s = ethUtil.addHexPrefix(payload.s)\n      // Adopt the 'common' option from the original transaction and set the\n      // returned object to be frozen if the original is frozen.\n      return TransactionFactory.fromTxData(txData, { common: tx.common, freeze: Object.isFrozen(tx) })\n    })\n  }\n\n  _signTransaction (address, rawTxHex, handleSigning) {\n    return new Promise((resolve, reject) => {\n      this.unlockAccountByAddress(address)\n        .then((hdPath) => {\n          this._sendMessage({\n            action: 'ledger-sign-transaction',\n            params: {\n              tx: rawTxHex,\n              hdPath,\n            },\n          },\n          ({ success, payload }) => {\n            if (success) {\n\n              const newOrMutatedTx = handleSigning(payload)\n              const valid = newOrMutatedTx.verifySignature()\n              if (valid) {\n                resolve(newOrMutatedTx)\n              } else {\n                reject(new Error('Ledger: The transaction signature is not valid'))\n              }\n            } else {\n              reject(payload.error || new Error('Ledger: Unknown error while signing transaction'))\n            }\n          })\n        })\n        .catch(reject)\n    })\n  }\n\n  signMessage (withAccount, data) {\n    return this.signPersonalMessage(withAccount, data)\n  }\n\n  // For personal_sign, we need to prefix the message:\n  signPersonalMessage (withAccount, message) {\n    return new Promise((resolve, reject) => {\n      this.unlockAccountByAddress(withAccount)\n        .then((hdPath) => {\n          this._sendMessage({\n            action: 'ledger-sign-personal-message',\n            params: {\n              hdPath,\n              message: ethUtil.stripHexPrefix(message),\n            },\n          },\n          ({ success, payload }) => {\n            if (success) {\n              let v = payload.v - 27\n              v = v.toString(16)\n              if (v.length < 2) {\n                v = `0${v}`\n              }\n              const signature = `0x${payload.r}${payload.s}${v}`\n              const addressSignedWith = sigUtil.recoverPersonalSignature({ data: message, sig: signature })\n              if (ethUtil.toChecksumAddress(addressSignedWith) !== ethUtil.toChecksumAddress(withAccount)) {\n                reject(new Error('Ledger: The signature doesnt match the right address'))\n              }\n              resolve(signature)\n            } else {\n              reject(payload.error || new Error('Ledger: Unknown error while signing message'))\n            }\n          })\n        })\n        .catch(reject)\n    })\n  }\n\n  async unlockAccountByAddress (address) {\n    const checksummedAddress = ethUtil.toChecksumAddress(address)\n    if (!Object.keys(this.accountDetails).includes(checksummedAddress)) {\n      throw new Error(`Ledger: Account for address '${checksummedAddress}' not found`)\n    }\n    const { hdPath } = this.accountDetails[checksummedAddress]\n    const unlockedAddress = await this.unlock(hdPath)\n\n    // unlock resolves to the address for the given hdPath as reported by the ledger device\n    // if that address is not the requested address, then this account belongs to a different device or seed\n    if (unlockedAddress.toLowerCase() !== address.toLowerCase()) {\n      throw new Error(`Ledger: Account ${address} does not belong to the connected device`)\n    }\n    return hdPath\n  }\n\n  async signTypedData (withAccount, data, options = {}) {\n    const isV4 = options.version === 'V4'\n    if (!isV4) {\n      throw new Error('Ledger: Only version 4 of typed data signing is supported')\n    }\n\n    const {\n      domain,\n      types,\n      primaryType,\n      message,\n    } = sigUtil.TypedDataUtils.sanitizeData(data)\n    const domainSeparatorHex = sigUtil.TypedDataUtils.hashStruct('EIP712Domain', domain, types, isV4).toString('hex')\n    const hashStructMessageHex = sigUtil.TypedDataUtils.hashStruct(primaryType, message, types, isV4).toString('hex')\n\n    const hdPath = await this.unlockAccountByAddress(withAccount)\n    const { success, payload } = await new Promise((resolve) => {\n      this._sendMessage({\n        action: 'ledger-sign-typed-data',\n        params: {\n          hdPath,\n          domainSeparatorHex,\n          hashStructMessageHex,\n        },\n      },\n      (result) => resolve(result))\n    })\n\n    if (success) {\n      let v = payload.v - 27\n      v = v.toString(16)\n      if (v.length < 2) {\n        v = `0${v}`\n      }\n      const signature = `0x${payload.r}${payload.s}${v}`\n      const addressSignedWith = sigUtil.recoverTypedSignature_v4({\n        data,\n        sig: signature,\n      })\n      if (ethUtil.toChecksumAddress(addressSignedWith) !== ethUtil.toChecksumAddress(withAccount)) {\n        throw new Error('Ledger: The signature doesnt match the right address')\n      }\n      return signature\n    }\n    throw payload.error || new Error('Ledger: Unknown error while signing message')\n  }\n\n  exportAccount () {\n    throw new Error('Not supported on this device')\n  }\n\n  forgetDevice () {\n    this.accounts = []\n    this.page = 0\n    this.unlockedAccount = 0\n    this.paths = {}\n    this.accountDetails = {}\n    this.hdk = new HDKey()\n  }\n\n  /* PRIVATE METHODS */\n\n  _setupIframe () {\n    this.iframe = document.createElement('iframe')\n    this.iframe.src = this.bridgeUrl\n    this.iframe.allow = `hid 'src'`\n    this.iframe.onload = async () => {\n      // If the ledger live preference was set before the iframe is loaded,\n      // set it after the iframe has loaded\n      this.iframeLoaded = true\n      if (this.delayedPromise) {\n        try {\n          const result = await this.updateTransportMethod(\n            this.delayedPromise.transportType,\n          )\n          this.delayedPromise.resolve(result)\n        } catch (e) {\n          this.delayedPromise.reject(e)\n        } finally {\n          delete this.delayedPromise\n        }\n      }\n    }\n    document.head.appendChild(this.iframe)\n  }\n\n  _getOrigin () {\n    const tmp = this.bridgeUrl.split('/')\n    tmp.splice(-1, 1)\n    return tmp.join('/')\n  }\n\n  _sendMessage (msg, cb) {\n    msg.target = 'LEDGER-IFRAME'\n    this.iframe.contentWindow.postMessage(msg, '*')\n    const eventListener = ({ origin, data }) => {\n      if (origin !== this._getOrigin()) {\n        return false\n      }\n\n      if (data && data.action && data.action === `${msg.action}-reply` && cb) {\n        cb(data)\n        return undefined\n      }\n\n      window.removeEventListener('message', eventListener)\n      return undefined\n    }\n    window.addEventListener('message', eventListener)\n  }\n\n  async __getPage (increment) {\n\n    this.page += increment\n\n    if (this.page <= 0) {\n      this.page = 1\n    }\n    const from = (this.page - 1) * this.perPage\n    const to = from + this.perPage\n\n    await this.unlock()\n    let accounts\n    if (this._isLedgerLiveHdPath()) {\n      accounts = await this._getAccountsBIP44(from, to)\n    } else {\n      accounts = this._getAccountsLegacy(from, to)\n    }\n    return accounts\n  }\n\n  async _getAccountsBIP44 (from, to) {\n    const accounts = []\n\n    for (let i = from; i < to; i++) {\n      const path = this._getPathForIndex(i)\n      const address = await this.unlock(path)\n      const valid = this.implementFullBIP44 ? await this._hasPreviousTransactions(address) : true\n      accounts.push({\n        address,\n        balance: null,\n        index: i,\n      })\n      // PER BIP44\n      // \"Software should prevent a creation of an account if\n      // a previous account does not have a transaction history\n      // (meaning none of its addresses have been used before).\"\n      if (!valid) {\n        break\n      }\n    }\n    return accounts\n  }\n\n  _getAccountsLegacy (from, to) {\n    const accounts = []\n\n    for (let i = from; i < to; i++) {\n      const address = this._addressFromIndex(pathBase, i)\n      accounts.push({\n        address,\n        balance: null,\n        index: i,\n      })\n      this.paths[ethUtil.toChecksumAddress(address)] = i\n    }\n    return accounts\n  }\n\n  _padLeftEven (hex) {\n    return hex.length % 2 === 0 ? hex : `0${hex}`\n  }\n\n  _normalize (buf) {\n    return this._padLeftEven(ethUtil.bufferToHex(buf).toLowerCase())\n  }\n\n  // eslint-disable-next-line no-shadow\n  _addressFromIndex (pathBase, i) {\n    const dkey = this.hdk.derive(`${pathBase}/${i}`)\n    const address = ethUtil\n      .publicToAddress(dkey.publicKey, true)\n      .toString('hex')\n    return ethUtil.toChecksumAddress(`0x${address}`)\n  }\n\n  _pathFromAddress (address) {\n    const checksummedAddress = ethUtil.toChecksumAddress(address)\n    let index = this.paths[checksummedAddress]\n    if (typeof index === 'undefined') {\n      for (let i = 0; i < MAX_INDEX; i++) {\n        if (checksummedAddress === this._addressFromIndex(pathBase, i)) {\n          index = i\n          break\n        }\n      }\n    }\n\n    if (typeof index === 'undefined') {\n      throw new Error('Unknown address')\n    }\n    return this._getPathForIndex(index)\n  }\n\n  _toAscii (hex) {\n    let str = ''\n    let i = 0\n    const l = hex.length\n    if (hex.substring(0, 2) === '0x') {\n      i = 2\n    }\n    for (; i < l; i += 2) {\n      const code = parseInt(hex.substr(i, 2), 16)\n      str += String.fromCharCode(code)\n    }\n\n    return str\n  }\n\n  _getPathForIndex (index) {\n    // Check if the path is BIP 44 (Ledger Live)\n    return this._isLedgerLiveHdPath() ? `m/44'/60'/${index}'/0/0` : `${this.hdPath}/${index}`\n  }\n\n  _isLedgerLiveHdPath () {\n    return this.hdPath === `m/44'/60'/0'/0/0`\n  }\n\n  _toLedgerPath (path) {\n    return path.toString().replace('m/', '')\n  }\n\n  async _hasPreviousTransactions (address) {\n    const apiUrl = this._getApiUrl()\n    const response = await window.fetch(`${apiUrl}/api?module=account&action=txlist&address=${address}&tag=latest&page=1&offset=1`)\n    const parsedResponse = await response.json()\n    if (parsedResponse.status !== '0' && parsedResponse.result.length > 0) {\n      return true\n    }\n    return false\n  }\n\n  _getApiUrl () {\n    return NETWORK_API_URLS[this.network] || NETWORK_API_URLS.mainnet\n  }\n\n}\n\nLedgerBridgeKeyring.type = type\nmodule.exports = LedgerBridgeKeyring\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./block-cache\"), exports);\n__exportStar(require(\"./block-ref-rewrite\"), exports);\n__exportStar(require(\"./block-ref\"), exports);\n__exportStar(require(\"./block-tracker-inspector\"), exports);\n__exportStar(require(\"./fetch\"), exports);\n__exportStar(require(\"./inflight-cache\"), exports);\n__exportStar(require(\"./providerAsMiddleware\"), exports);\n__exportStar(require(\"./providerFromEngine\"), exports);\n__exportStar(require(\"./providerFromMiddleware\"), exports);\n__exportStar(require(\"./retryOnEmpty\"), exports);\n__exportStar(require(\"./wallet\"), exports);\n//# sourceMappingURL=index.js.map","const crypto = require('crypto');\nconst EventEmitter = require('events').EventEmitter;\nconst BN = require('bignumber.js');\nconst SDK = require('gridplus-sdk');\nconst EthTx = require('@ethereumjs/tx');\nconst Common = require('@ethereumjs/common').default;\nconst Util = require('ethereumjs-util');\nconst keyringType = 'Lattice Hardware';\nconst HARDENED_OFFSET = 0x80000000;\nconst PER_PAGE = 5;\nconst CLOSE_CODE = -1000;\nconst STANDARD_HD_PATH = `m/44'/60'/0'/0/x`;\nconst SDK_TIMEOUT = 120000;\nconst CONNECT_TIMEOUT = 20000;\n\nclass LatticeKeyring extends EventEmitter {\n  constructor (opts={}) {\n    super()\n    this.type = keyringType;\n    this._resetDefaults();\n    this.deserialize(opts);\n  }\n\n  //-------------------------------------------------------------------\n  // Keyring API (per `https://github.com/MetaMask/eth-simple-keyring`)\n  //-------------------------------------------------------------------\n  deserialize (opts = {}) {\n    if (opts.hdPath)\n      this.hdPath = opts.hdPath;\n    if (opts.creds)\n      this.creds = opts.creds;\n    if (opts.accounts)\n      this.accounts = opts.accounts;\n    if (opts.accountIndices)\n      this.accountIndices = opts.accountIndices;\n    if (opts.accountOpts)\n      this.accountOpts = opts.accountOpts;\n    if (opts.walletUID)\n      this.walletUID = opts.walletUID;\n    if (opts.name)  // Legacy; use is deprecated and appName is more descriptive\n      this.appName = opts.name;\n    if (opts.appName)\n      this.appName = opts.appName;\n    if (opts.network)\n      this.network = opts.network;\n    if (opts.page)\n      this.page = opts.page;\n    if (opts.sdkState)\n      this.sdkState = opts.sdkState;\n    return Promise.resolve()\n  }\n\n  setHdPath(hdPath) {\n    this.hdPath = hdPath;\n  }\n\n  serialize() {\n    return Promise.resolve({\n      creds: this.creds,\n      accounts: this.accounts,\n      accountIndices: this.accountIndices,\n      accountOpts: this.accountOpts,\n      walletUID: this.walletUID,\n      appName: this.appName,\n      name: this.name,  // Legacy; use is deprecated\n      network: this.network,\n      page: this.page,\n      hdPath: this.hdPath,\n      sdkState: this.sdkSession ? \n                this.sdkSession.getStateData() :\n                null\n    })\n  }\n\n  // Deterimine if we have a connection to the Lattice and an existing wallet UID\n  // against which to make requests.\n  isUnlocked () {\n    return !!this._getCurrentWalletUID() && !!this.sdkSession;\n  }\n\n  // Initialize a session with the Lattice1 device using the GridPlus SDK\n  // NOTE: `bypassOnStateData=true` allows us to rehydrate a new SDK session without\n  // reconnecting to the target Lattice. This is only currently used for signing \n  // because it eliminates the need for 2 connection requests and shaves off ~4-6sec.\n  // We avoid passing `bypassOnStateData=true` for other calls on `unlock` to avoid\n  // possible edge cases related to this new functionality (it's probably fine - just\n  // being cautious). In the future we may remove `bypassOnStateData` entirely.\n  unlock(bypassOnStateData=false) {\n    return new Promise((resolve, reject) => {\n      // Force compatability. `this.accountOpts` were added after other\n      // state params and must be synced in order for this keyring to function.\n      if ((!this.accountOpts) || \n          (this.accounts.length > 0 && this.accountOpts.length != this.accounts.length)) \n      {\n        this.forgetDevice();\n        return reject(new Error(\n          'You can now add multiple Lattice and SafeCard accounts at the same time! ' +\n          'Your accounts have been cleared. Please press Continue to add them back in.'\n        ));\n      }\n\n      if (this.isUnlocked() && !this.forceReconnect) {\n        return resolve('Unlocked');\n      }\n      \n      this._getCreds()\n      .then((creds) => {\n        if (creds) {\n          this.creds.deviceID = creds.deviceID;\n          this.creds.password = creds.password;\n          this.creds.endpoint = creds.endpoint || null;\n        }\n        return this._initSession();\n      })\n      .then((includedStateData) => {\n        // If state data was provided and if we are authorized to \n        // bypass reconnecting, we can exit here.\n        if (includedStateData && bypassOnStateData) {\n          return resolve('Unlocked');\n        }\n        return this._connect();\n      })\n      .then(() => {\n        return resolve('Unlocked');\n      })\n      .catch((err) => {\n        return reject(new Error(err));\n      })\n    })\n  }\n\n  // Add addresses to the local store and return the full result\n  addAccounts(n=1) {\n    return new Promise((resolve, reject) => {\n      if (n === CLOSE_CODE) {\n        // Special case: use a code to forget the device. \n        // (This function is overloaded due to constraints upstream)\n        this.forgetDevice();\n        return resolve([]);\n      } else if (n <= 0) {\n        // Avoid non-positive numbers.\n        return reject('Number of accounts to add must be a positive number.');\n      } else {\n        // Normal behavior: establish the connection and fetch addresses.\n        this.unlock()\n        .then(() => {\n          return this._fetchAddresses(n, this.unlockedAccount)\n        })\n        .then((addrs) => {\n          const walletUID = this._getCurrentWalletUID();\n          // Add these indices\n          addrs.forEach((addr, i) => {\n            let alreadySaved = false;\n            for (let j = 0; j < this.accounts.length; j++) {\n              if ((this.accounts[j] === addr) && \n                  (this.accountOpts[j].walletUID === walletUID) &&\n                  (this.accountOpts[j].hdPath === this.hdPath))\n                alreadySaved = true;\n            }\n            if (!alreadySaved) {\n              this.accounts.push(addr);\n              this.accountIndices.push(this.unlockedAccount+i);\n              this.accountOpts.push({\n                walletUID,\n                hdPath: this.hdPath,\n              })\n            }\n          })\n          return resolve(this.accounts);\n        })\n        .catch((err) => {\n          return reject(new Error(err));\n        })\n      }\n    })\n  }\n\n  // Return the local store of addresses. This gets called when the extension unlocks.\n  getAccounts() {\n    return Promise.resolve(this.accounts ? this.accounts.slice() : [].slice());\n  }\n\n  signTransaction (address, tx) {\n    return new Promise((resolve, reject) => {\n      this._findSignerIdx(address)\n      .then((accountIdx) => {\n        try {\n          // Build the Lattice request data and make request\n          // We expect `tx` to be an `ethereumjs-tx` object, meaning all fields are bufferized\n          // To ensure everything plays nicely with gridplus-sdk, we convert everything to hex strings\n          const addressIdx = this.accountIndices[accountIdx];\n          const addressParentPath = this.accountOpts[accountIdx].hdPath;\n          const txData = {\n            chainId: `0x${this._getEthereumJsChainId(tx).toString('hex')}` || 1,\n            nonce: `0x${tx.nonce.toString('hex')}` || 0,\n            gasLimit: `0x${tx.gasLimit.toString('hex')}`,\n            to: !!tx.to ? tx.to.toString('hex') : null, // null for contract deployments\n            value: `0x${tx.value.toString('hex')}`,\n            data: tx.data.length === 0 ? null : `0x${tx.data.toString('hex')}`,\n            signerPath: this._getHDPathIndices(addressParentPath, addressIdx),\n          }\n          switch (tx._type) {\n            case 2: // eip1559\n              if ((tx.maxPriorityFeePerGas === null || tx.maxFeePerGas === null) ||\n                  (tx.maxPriorityFeePerGas === undefined || tx.maxFeePerGas === undefined))\n                throw new Error('`maxPriorityFeePerGas` and `maxFeePerGas` must be included for EIP1559 transactions.');\n              txData.maxPriorityFeePerGas = `0x${tx.maxPriorityFeePerGas.toString('hex')}`;\n              txData.maxFeePerGas = `0x${tx.maxFeePerGas.toString('hex')}`;\n              txData.accessList = tx.accessList || [];\n              txData.type = 2;\n              break;\n            case 1: // eip2930\n              txData.accessList = tx.accessList || [];\n              txData.gasPrice = `0x${tx.gasPrice.toString('hex')}`;\n              txData.type = 1;\n              break;\n            default: // legacy\n              txData.gasPrice = `0x${tx.gasPrice.toString('hex')}`;\n              txData.type = null;\n              break;\n          }\n          // Lattice firmware v0.11.0 implemented EIP1559 and EIP2930 so for previous verisons\n          // we need to overwrite relevant params and revert to legacy type.\n          // Note: `this.sdkSession.fwVersion is of format [fix, minor, major, reserved]\n          const forceLegacyTx = this.sdkSession.fwVersion[2] < 1 && \n                                this.sdkSession.fwVersion[1] < 11;\n          if (forceLegacyTx && txData.type === 2) {\n            txData.gasPrice = txData.maxFeePerGas;\n            txData.revertToLegacy = true;\n            delete txData.type;\n            delete txData.maxFeePerGas;\n            delete txData.maxPriorityFeePerGas;\n            delete txData.accessList;\n          } else if (forceLegacyTx && txData.type === 1) {\n            txData.revertToLegacy = true;\n            delete txData.type;\n            delete txData.accessList;\n          }\n          // Get the signature\n          return this._signTxData(txData)\n        } catch (err) {\n          throw new Error(`Failed to build transaction.`)\n        }\n      })\n      .then((signedTx) => {\n        // Add the sig params. `signedTx = { sig: { v, r, s }, tx, txHash}`\n        if (!signedTx.sig || !signedTx.sig.v || !signedTx.sig.r || !signedTx.sig.s)\n          return reject(new Error('No signature returned.'));\n        const txToReturn = tx.toJSON();\n        const v = signedTx.sig.v.length === 0 ? '0' : signedTx.sig.v.toString('hex')\n        txToReturn.r = Util.addHexPrefix(signedTx.sig.r.toString('hex'));\n        txToReturn.s = Util.addHexPrefix(signedTx.sig.s.toString('hex'));\n        txToReturn.v = Util.addHexPrefix(v);\n\n        if (signedTx.revertToLegacy === true) {\n          // If firmware does not support an EIP1559/2930 transaction we revert to legacy\n          txToReturn.type = 0;\n          txToReturn.gasPrice = signedTx.gasPrice;\n        } else {\n          // Otherwise relay the tx type\n          txToReturn.type = signedTx.type;\n        }\n\n        // Build the tx for export\n        let validatingTx;\n        const _chainId = `0x${this._getEthereumJsChainId(tx).toString('hex')}`;\n        const chainId = new BN(_chainId).toNumber();\n        const customNetwork = Common.forCustomChain('mainnet', {\n          name: 'notMainnet',\n          networkId: chainId,\n          chainId: chainId,\n        }, 'london')\n\n        validatingTx = EthTx.TransactionFactory.fromTxData(txToReturn, {\n          common: customNetwork, freeze: Object.isFrozen(tx)\n        })\n        return resolve(validatingTx);\n      })\n      .catch((err) => {\n        return reject(new Error(err));\n      })\n    })\n  }\n\n  signPersonalMessage(address, msg) {\n    return this.signMessage(address, { payload: msg, protocol: 'signPersonal' });\n  }\n\n  signTypedData(address, msg, opts) {\n    if (opts.version && (opts.version !== 'V4' && opts.version !== 'V3'))\n      throw new Error(`Only signTypedData V3 and V4 messages (EIP712) are supported. Got version ${opts.version}`);\n    return this.signMessage(address, { payload: msg, protocol: 'eip712' })\n  }\n\n  signMessage(address, msg) {\n    return new Promise((resolve, reject) => {\n      this._findSignerIdx(address)\n      .then((accountIdx) => {\n        let { payload, protocol } = msg;\n        // If the message is not an object we assume it is a legacy signPersonal request\n        if (!payload || !protocol) {\n          payload = msg;\n          protocol = 'signPersonal';\n        }\n        const addressIdx = this.accountIndices[accountIdx];\n        const addressParentPath = this.accountOpts[accountIdx].hdPath;\n        const req = {\n          currency: 'ETH_MSG',\n          data: {\n            protocol,\n            payload,\n            signerPath: this._getHDPathIndices(addressParentPath, addressIdx),\n          }\n        }\n        this.sdkSession.sign(req, (err, res) => {\n          if (err) {\n            return reject(new Error(err));\n          }\n          if (!this._syncCurrentWalletUID()) {\n            return reject('No active wallet.');\n          }\n          if (!res.sig) {\n            return reject(new Error('No signature returned'));\n          }\n          // Convert the `v` to a number. It should convert to 0 or 1\n          try {\n            let v = res.sig.v.toString('hex');\n            if (v.length < 2) {\n              v = `0${v}`;\n            }\n            return resolve(`0x${res.sig.r}${res.sig.s}${v}`);\n          } catch (err) {\n            return reject(new Error('Invalid signature format returned.'))\n          }\n        })\n      })\n      .catch((err) => {\n        return reject(new Error(err));\n      })\n    })\n  }\n\n  exportAccount(address) {\n    return Promise.reject(Error('exportAccount not supported by this device'))\n  }\n\n  removeAccount(address) {\n    this.accounts.forEach((account, i) => {\n      if (account.toLowerCase() === address.toLowerCase()) {\n        this.accounts.splice(i, 1);\n        this.accountIndices.splice(i, 1);\n        this.accountOpts.splice(i, 1);\n        return;\n      }\n    })\n  }\n\n  getFirstPage() {\n    // This function gets called after the user has connected to the Lattice.\n    // Update a state variable to force opening of the Lattice manager window.\n    // If we don't do this, MetaMask will automatically start requesting addresses,\n    // even if the device is not reachable.\n    // This way the user can close the window and connect accounts from other\n    // wallets instead of being forced into selecting Lattice accounts\n    this.forceReconnect = true;\n    this.page = 0;\n    return this._getPage(0);\n  }\n\n  getNextPage () {\n    return this._getPage(1);\n  }\n\n  getPreviousPage () {\n    return this._getPage(-1);\n  }\n\n  setAccountToUnlock (index) {\n    this.unlockedAccount = parseInt(index, 10)\n  }\n\n  forgetDevice () {\n    this._resetDefaults();\n  }\n\n  //-------------------------------------------------------------------\n  // Internal methods and interface to SDK\n  //-------------------------------------------------------------------\n  // Find the account index of the requested address.\n  // Note that this is the BIP39 path index, not the index in the address cache.\n  _findSignerIdx(address) {\n    return new Promise((resolve, reject) => {\n      // Unlock and get the wallet UID. We will bypass the reconnection\n      // step if we are able to rehydrate an SDK session with state data.\n      this.unlock(true)\n      .then(() => {\n        return this._ensureCurrentWalletUID();\n      })\n      .then(() => {\n        return this.getAccounts();\n      })\n      .then((addrs) => {\n        // Find the signer in our current set of accounts\n        // If we can't find it, return an error\n        let accountIdx = null;\n        addrs.forEach((addr, i) => {\n          if (address.toLowerCase() === addr.toLowerCase())\n            accountIdx = i;\n        })\n        if (accountIdx === null) {\n          return reject('Signer not present');\n        }\n        return resolve(accountIdx);\n      })\n      .catch((err) => {\n        return reject(err);\n      })\n    })\n  }\n\n  _getHDPathIndices(hdPath, insertIdx=0) {\n    const path = hdPath.split('/').slice(1);\n    const indices = [];\n    let usedX = false;\n    path.forEach((_idx) => {\n      const isHardened = (_idx[_idx.length - 1] === \"'\");\n      let idx = isHardened ? HARDENED_OFFSET : 0;\n      // If there is an `x` in the path string, we will use it to insert our\n      // index. This is useful for e.g. Ledger Live path. Most paths have the\n      // changing index as the last one, so having an `x` in the path isn't\n      // usually necessary.\n      if (_idx.indexOf('x') > -1) {\n        idx += insertIdx;\n        usedX = true;\n      } else if (isHardened) {\n        idx += Number(_idx.slice(0, _idx.length - 1));\n      } else {\n        idx += Number(_idx);\n      }\n      indices.push(idx);\n    })\n    // If this path string does not include an `x`, we just append the index\n    // to the end of the extracted set\n    if (usedX === false) {\n      indices.push(insertIdx);\n    }\n    // Sanity check -- Lattice firmware will throw an error for large paths\n    if (indices.length > 5)\n      throw new Error('Only HD paths with up to 5 indices are allowed.')\n    return indices;\n  }\n\n  _resetDefaults() {\n    this.accounts = [];\n    this.accountIndices = [];\n    this.accountOpts = [];\n    this.isLocked = true;\n    this.creds = {\n      deviceID: null,\n      password: null,\n      endpoint: null,\n    };\n    this.walletUID = null;\n    this.sdkSession = null;\n    this.page = 0;\n    this.unlockedAccount = 0;\n    this.network = null;\n    this.hdPath = STANDARD_HD_PATH;\n  }\n\n  _openConnectorTab(url) {\n    return new Promise((resolve, reject) => {\n      const browserTab = window.open(url);\n      // Preferred option for Chromium browsers. This extension runs in a window\n      // for Chromium so we can do window-based communication very easily.\n      if (browserTab) {\n        return resolve({ chromium: browserTab });\n      } else if (browser && browser.tabs && browser.tabs.create) {\n        // FireFox extensions do not run in windows, so it will return `null` from\n        // `window.open`. Instead, we need to use the `browser` API to open a tab. \n        // We will surveille this tab to see if its URL parameters change, which \n        // will indicate that the user has logged in.\n        browser.tabs.create({url})\n        .then((tab) => {\n          return resolve({ firefox: tab });\n        })\n        .catch((err) => {\n          return reject(new Error('Failed to open Lattice connector.'))\n        })\n      } else {\n        return reject(new Error('Unknown browser context. Cannot open Lattice connector.'))\n      }\n\n    })\n  }\n\n  _findTabById(id) {\n    return new Promise((resolve, reject) => {\n      browser.tabs.query({})\n      .then((tabs) => {\n        tabs.forEach((tab) => {\n          if (tab.id === id) {\n            return resolve(tab);\n          }\n        })\n        return resolve(null);\n      })\n      .catch((err) => {\n        return reject(err);\n      })\n    })\n  }\n  \n  _getCreds() {\n    return new Promise((resolve, reject) => {\n      // We only need to setup if we don't have a deviceID\n      if (this._hasCreds() && !this.forceReconnect)\n        return resolve();\n      // Cancel the force reconnect, if applicable\n      this.forceReconnect = false;\n      // If we are not aware of what Lattice we should be talking to,\n      // we need to open a window that lets the user go through the\n      // pairing or connection process.\n      const name = this.appName ? this.appName : 'Unknown'\n      const base = 'https://lattice.gridplus.io';\n      const url = `${base}?keyring=${name}&forceLogin=true`;\n      let listenInterval;\n\n      // PostMessage handler\n      function receiveMessage(event) {\n        // Ensure origin\n        if (event.origin !== base)\n          return;\n        try {\n          // Stop the listener\n          clearInterval(listenInterval);\n          // Parse and return creds\n          const creds = JSON.parse(event.data);\n          if (!creds.deviceID || !creds.password)\n            return reject(new Error('Invalid credentials returned from Lattice.'));\n          return resolve(creds);\n        } catch (err) {\n          return reject(err);\n        }\n      }\n\n      // Open the tab\n      this._openConnectorTab(url)\n      .then((conn) => {\n        if (conn.chromium) {\n          // On a Chromium browser we can just listen for a window message\n          window.addEventListener(\"message\", receiveMessage, false);\n          // Watch for the open window closing before creds are sent back\n          listenInterval = setInterval(() => {\n            if (conn.chromium.closed) {\n              clearInterval(listenInterval);\n              return reject(new Error('Lattice connector closed.'));\n            }\n          }, 500);\n        } else if (conn.firefox) {\n          // For Firefox we cannot use `window` in the extension and can't\n          // directly communicate with the tabs very easily so we use a\n          // workaround: listen for changes to the URL, which will contain\n          // the login info.\n          // NOTE: This will only work if have `https://lattice.gridplus.io/*`\n          // host permissions in your manifest file (and also `activeTab` permission)\n          const loginUrlParam = '&loginCache=';\n          listenInterval = setInterval(() => {\n            this._findTabById(conn.firefox.id)\n            .then((tab) => {\n              if (!tab || !tab.url) {\n                return reject(new Error('Lattice connector closed.'));\n              }\n              // If the tab we opened contains a new URL param\n              const paramLoc = tab.url.indexOf(loginUrlParam);\n              if (paramLoc < 0) \n                return;\n              const dataLoc = paramLoc + loginUrlParam.length;\n              // Stop this interval\n              clearInterval(listenInterval);\n              try {\n                // Parse the login data. It is a stringified JSON object \n                // encoded as a base64 string.\n                const _creds = Buffer.from(tab.url.slice(dataLoc), 'base64').toString();\n                // Close the tab and return the credentials\n                browser.tabs.remove(tab.id)\n                .then(() => {\n                  const creds = JSON.parse(_creds);\n                  if (!creds.deviceID || !creds.password)\n                    return reject(new Error('Invalid credentials returned from Lattice.'));\n                  return resolve(creds);\n                })\n              } catch (err) {\n                return reject('Failed to get login data from Lattice. Please try again.')\n              }\n            })\n          }, 500);\n        }\n      })\n    })\n  }\n\n  // [re]connect to the Lattice. This should be done frequently to ensure\n  // the expected wallet UID is still the one active in the Lattice.\n  // This will handle SafeCard insertion/removal events.\n  _connect() {\n    return new Promise((resolve, reject) => {\n      // Attempt to connect with a Lattice using a shorter timeout. If\n      // the device is unplugged it will time out and we don't need to wait\n      // 2 minutes for that to happen.\n      this.sdkSession.timeout = CONNECT_TIMEOUT;\n      this.sdkSession.connect(this.creds.deviceID, (err) => {\n        this.sdkSession.timeout = SDK_TIMEOUT;\n        if (err) {\n          return reject(err);\n        }\n        if (!this._syncCurrentWalletUID()) {\n          return reject('No active wallet.');\n        }\n        return resolve();\n      });\n    })\n  }\n\n  _initSession() {\n    return new Promise((resolve, reject) => {\n      if (this.isUnlocked()) {\n        return resolve();\n      }\n      try {\n        let url = 'https://signing.gridpl.us';\n        if (this.creds.endpoint)\n          url = this.creds.endpoint\n        let setupData;\n        if (this.sdkState) {\n          // If we have state data we can fully rehydrate the session.\n          setupData = {\n            stateData: this.sdkState\n          }\n        } else {\n          // If we have no state data, we need to create a session.\n          // Its state will be saved once the connection is established.\n          setupData = {\n            name: this.appName,\n            baseUrl: url,\n            timeout: SDK_TIMEOUT,\n            privKey: this._genSessionKey(),\n            network: this.network,\n          }\n        }\n        this.sdkSession = new SDK.Client(setupData);\n        // Return a boolean indicating whether we provided state data.\n        // If we have, we can skip `connect`.\n        return resolve(!!setupData.stateData);\n      } catch (err) {\n        return reject(err);\n      }\n    })\n  }\n\n  _fetchAddresses(n=1, i=0, recursedAddrs=[]) {\n    return new Promise((resolve, reject) => {\n      if (!this.isUnlocked()) {\n        return reject('No connection to Lattice. Cannot fetch addresses.')\n      }\n      this.__fetchAddresses(n, i, (err, addrs) => {\n        if (err) {\n          return reject(err);\n        }\n        return resolve(addrs);\n      })\n    })\n  }\n\n  __fetchAddresses(n=1, i=0, cb, recursedAddrs=[]) {\n     // Determine if we need to do a recursive call here. We prefer not to\n      // because they will be much slower, but Ledger paths require it since\n      // they are non-standard.\n      if (n === 0)\n        return cb(null, recursedAddrs);\n      const shouldRecurse = this._hdPathHasInternalVarIdx();\n\n      // Make the request to get the requested address\n      const addrData = { \n        currency: 'ETH', \n        startPath: this._getHDPathIndices(this.hdPath, i), \n        n: shouldRecurse ? 1 : n,\n        skipCache: true,\n      };\n      this.sdkSession.getAddresses(addrData, (err, addrs) => {\n        if (err)\n          return cb(err);\n        if (!this._syncCurrentWalletUID()) {\n          return cb(new Error('No active wallet.'));\n        }\n        // Sanity check -- if this returned 0 addresses, handle the error\n        if (addrs.length < 1) {\n          return cb(new Error('No addresses returned'));\n        }\n        // Return the addresses we fetched *without* updating state\n        if (shouldRecurse) {\n          return this.__fetchAddresses(n-1, i+1, cb, recursedAddrs.concat(addrs));\n        } else {\n          return cb(null, addrs);\n        }\n      })\n  }\n\n  _signTxData(txData) {\n    return new Promise((resolve, reject) => {\n      this.sdkSession.sign({ currency: 'ETH', data: txData }, (err, res) => {\n        if (err) {\n          return reject(err);\n        }\n        if (!this._syncCurrentWalletUID()) {\n          return reject('No active wallet.');\n        }\n        if (!res.tx) {\n          return reject(new Error('No transaction payload returned.'));\n        }\n        // Here we catch an edge case where the requester is asking for an EIP1559\n        // transaction but firmware is not updated to support it. We fallback to legacy.\n        res.type = txData.type;\n        if (txData.revertToLegacy) {\n          res.revertToLegacy = true;\n          res.gasPrice = txData.gasPrice;\n        }\n        // Return the signed tx\n        return resolve(res)\n      })\n    })\n  }\n\n  _getPage(increment=0) {\n    return new Promise((resolve, reject) => {\n      this.page += increment;\n      if (this.page < 0)\n        this.page = 0;\n      const start = PER_PAGE * this.page;\n      // Otherwise unlock the device and fetch more addresses\n      this.unlock()\n      .then(() => {\n        return this._fetchAddresses(PER_PAGE, start)\n      })\n      .then((addrs) => {\n        const accounts = []\n        addrs.forEach((address, i) => {\n          accounts.push({\n            address,\n            balance: null,\n            index: start + i,\n          })\n        })\n        return resolve(accounts)\n      })\n      .catch((err) => {\n        return reject(err);\n      })\n    })\n  }\n\n  _hasCreds() {\n    return this.creds.deviceID !== null && this.creds.password !== null && this.appName;\n  }\n\n  _genSessionKey() {\n    if (this.name && !this.appName) // Migrate from legacy param if needed\n      this.appName = this.name;\n    if (!this._hasCreds())\n      throw new Error('No credentials -- cannot create session key!');\n    const buf = Buffer.concat([\n      Buffer.from(this.creds.password), \n      Buffer.from(this.creds.deviceID), \n      Buffer.from(this.appName)\n    ])\n    return crypto.createHash('sha256').update(buf).digest();\n  }\n\n  // Determine if an HD path has a variable index internal to it.\n  // e.g. m/44'/60'/x'/0/0 -> true, while m/44'/60'/0'/0/x -> false\n  // This is just a hacky helper to avoid having to recursively call for non-ledger\n  // derivation paths. Ledger is SO ANNOYING TO SUPPORT.\n  _hdPathHasInternalVarIdx() {\n    const path = this.hdPath.split('/').slice(1);\n    for (let i = 0; i < path.length -1; i++) {\n      if (path[i].indexOf('x') > -1)\n        return true;\n    }\n    return false;\n  }\n\n  // Get the chainId for whatever object this is.\n  // Returns a hex string without the 0x prefix\n  _getEthereumJsChainId(tx) {\n    if (typeof tx.getChainId === 'function')\n      return tx.getChainId();\n    else if (tx.common && typeof tx.common.chainIdBN === 'function')\n      return tx.common.chainIdBN().toString(16);\n    else if (typeof tx.chainId === 'number')\n      return tx.chainId.toString(16);\n    else if (typeof tx.chainId === 'string')\n      return tx.chainId;\n    return '1';\n  }\n\n  _getCurrentWalletUID() {\n    return this.walletUID || null;\n  }\n\n  // The SDK has an auto-retry mechanism for all requests if a \"wrong wallet\"\n  // error gets thrown. In such a case, the SDK will re-connect to the device to\n  // find the new wallet UID and will then save that UID to memory and will retry\n  // the original request with that new wallet UID.\n  // Therefore, we should sync the walletUID with `this.walletUID` after each\n  // SDK request. This is a synchronous and fast operation.\n  _syncCurrentWalletUID() {\n    if (!this.sdkSession) {\n      return null;\n    }\n    const activeWallet = this.sdkSession.getActiveWallet();\n    if (!activeWallet || !activeWallet.uid) {\n      return null;\n    }\n    const newUID = activeWallet.uid.toString('hex');\n    // If we fetched a walletUID that does not match our current one,\n    // reset accounts and update the known UID\n    if (newUID != this.walletUID) {\n      this.walletUID = newUID;\n    }\n    return this.walletUID;\n  }\n\n  // Make sure we have an SDK connection and, therefore, an active wallet UID.\n  // If we do not, force an unlock, which adds ~5 seconds to the request.\n  _ensureCurrentWalletUID() {\n    return new Promise((resolve, reject) => {\n      if (!!this._getCurrentWalletUID()) {\n        return resolve();\n      }\n      this.unlock()\n      .then(() => {\n        if (!!this._getCurrentWalletUID()) {\n          return resolve()\n        } else {\n          return reject('Could not access Lattice wallet. Please re-connect.')\n        }\n      })\n      .catch((err) => {\n        return reject(err);\n      })\n    })\n  }\n\n}\n\nLatticeKeyring.type = keyringType\nmodule.exports = LatticeKeyring;","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// eslint-disable-next-line import/no-unassigned-import\nrequire(\"isomorphic-fetch\");\nconst SmartTransactionsController_1 = __importDefault(require(\"./SmartTransactionsController\"));\nexports.default = SmartTransactionsController_1.default;\n//# sourceMappingURL=index.js.map","/* Account Tracker\n *\n * This module is responsible for tracking any number of accounts\n * and caching their current balances & transaction counts.\n *\n * It also tracks transaction hashes, and checks their inclusion status\n * on each new block.\n */\n\nimport EthQuery from 'eth-query';\n\nimport { ObservableStore } from '@metamask/obs-store';\nimport log from 'loglevel';\nimport pify from 'pify';\nimport Web3 from 'web3';\nimport SINGLE_CALL_BALANCES_ABI from 'single-call-balance-checker-abi';\nimport {\n  MAINNET_CHAIN_ID,\n  RINKEBY_CHAIN_ID,\n  ROPSTEN_CHAIN_ID,\n  KOVAN_CHAIN_ID,\n} from '../../../shared/constants/network';\n\nimport {\n  SINGLE_CALL_BALANCES_ADDRESS,\n  SINGLE_CALL_BALANCES_ADDRESS_RINKEBY,\n  SINGLE_CALL_BALANCES_ADDRESS_ROPSTEN,\n  SINGLE_CALL_BALANCES_ADDRESS_KOVAN,\n} from '../constants/contracts';\nimport { bnToHex } from './util';\n\n/**\n * This module is responsible for tracking any number of accounts and caching their current balances & transaction\n * counts.\n *\n * It also tracks transaction hashes, and checks their inclusion status on each new block.\n *\n * @typedef {Object} AccountTracker\n * @property {Object} store The stored object containing all accounts to track, as well as the current block's gas limit.\n * @property {Object} store.accounts The accounts currently stored in this AccountTracker\n * @property {string} store.currentBlockGasLimit A hex string indicating the gas limit of the current block\n * @property {Object} _provider A provider needed to create the EthQuery instance used within this AccountTracker.\n * @property {EthQuery} _query An EthQuery instance used to access account information from the blockchain\n * @property {BlockTracker} _blockTracker A BlockTracker instance. Needed to ensure that accounts and their info updates\n * when a new block is created.\n * @property {Object} _currentBlockNumber Reference to a property on the _blockTracker: the number (i.e. an id) of the the current block\n */\nexport default class AccountTracker {\n  /**\n   * @param {Object} opts - Options for initializing the controller\n   * @param {Object} opts.provider - An EIP-1193 provider instance that uses the current global network\n   * @param {Object} opts.blockTracker - A block tracker, which emits events for each new block\n   * @param {Function} opts.getCurrentChainId - A function that returns the `chainId` for the current global network\n   */\n  constructor(opts = {}) {\n    const initState = {\n      accounts: {},\n      currentBlockGasLimit: '',\n    };\n    this.store = new ObservableStore(initState);\n\n    this._provider = opts.provider;\n    this._query = pify(new EthQuery(this._provider));\n    this._blockTracker = opts.blockTracker;\n    // blockTracker.currentBlock may be null\n    this._currentBlockNumber = this._blockTracker.getCurrentBlock();\n    this._blockTracker.once('latest', (blockNumber) => {\n      this._currentBlockNumber = blockNumber;\n    });\n    // bind function for easier listener syntax\n    this._updateForBlock = this._updateForBlock.bind(this);\n    this.getCurrentChainId = opts.getCurrentChainId;\n\n    this.web3 = new Web3(this._provider);\n  }\n\n  start() {\n    // remove first to avoid double add\n    this._blockTracker.removeListener('latest', this._updateForBlock);\n    // add listener\n    this._blockTracker.addListener('latest', this._updateForBlock);\n    // fetch account balances\n    this._updateAccounts();\n  }\n\n  stop() {\n    // remove listener\n    this._blockTracker.removeListener('latest', this._updateForBlock);\n  }\n\n  /**\n   * Ensures that the locally stored accounts are in sync with a set of accounts stored externally to this\n   * AccountTracker.\n   *\n   * Once this AccountTracker's accounts are up to date with those referenced by the passed addresses, each\n   * of these accounts are given an updated balance via EthQuery.\n   *\n   * @param {Array} addresses - The array of hex addresses for accounts with which this AccountTracker's accounts should be\n   * in sync\n   */\n  syncWithAddresses(addresses) {\n    const { accounts } = this.store.getState();\n    const locals = Object.keys(accounts);\n\n    const accountsToAdd = [];\n    addresses.forEach((upstream) => {\n      if (!locals.includes(upstream)) {\n        accountsToAdd.push(upstream);\n      }\n    });\n\n    const accountsToRemove = [];\n    locals.forEach((local) => {\n      if (!addresses.includes(local)) {\n        accountsToRemove.push(local);\n      }\n    });\n\n    this.addAccounts(accountsToAdd);\n    this.removeAccount(accountsToRemove);\n  }\n\n  /**\n   * Adds new addresses to track the balances of\n   * given a balance as long this._currentBlockNumber is defined.\n   *\n   * @param {Array} addresses - An array of hex addresses of new accounts to track\n   */\n  addAccounts(addresses) {\n    const { accounts } = this.store.getState();\n    // add initial state for addresses\n    addresses.forEach((address) => {\n      accounts[address] = {};\n    });\n    // save accounts state\n    this.store.updateState({ accounts });\n    // fetch balances for the accounts if there is block number ready\n    if (!this._currentBlockNumber) {\n      return;\n    }\n    this._updateAccounts();\n  }\n\n  /**\n   * Removes accounts from being tracked\n   *\n   * @param {Array} addresses - An array of hex addresses to stop tracking.\n   */\n  removeAccount(addresses) {\n    const { accounts } = this.store.getState();\n    // remove each state object\n    addresses.forEach((address) => {\n      delete accounts[address];\n    });\n    // save accounts state\n    this.store.updateState({ accounts });\n  }\n\n  /**\n   * Removes all addresses and associated balances\n   */\n\n  clearAccounts() {\n    this.store.updateState({ accounts: {} });\n  }\n\n  /**\n   * Given a block, updates this AccountTracker's currentBlockGasLimit, and then updates each local account's balance\n   * via EthQuery\n   *\n   * @private\n   * @param {number} blockNumber - the block number to update to.\n   * @fires 'block' The updated state, if all account updates are successful\n   */\n  async _updateForBlock(blockNumber) {\n    this._currentBlockNumber = blockNumber;\n\n    // block gasLimit polling shouldn't be in account-tracker shouldn't be here...\n    const currentBlock = await this._query.getBlockByNumber(blockNumber, false);\n    if (!currentBlock) {\n      return;\n    }\n    const currentBlockGasLimit = currentBlock.gasLimit;\n    this.store.updateState({ currentBlockGasLimit });\n\n    try {\n      await this._updateAccounts();\n    } catch (err) {\n      log.error(err);\n    }\n  }\n\n  /**\n   * balanceChecker is deployed on main eth (test)nets and requires a single call\n   * for all other networks, calls this._updateAccount for each account in this.store\n   *\n   * @returns {Promise} after all account balances updated\n   */\n  async _updateAccounts() {\n    const { accounts } = this.store.getState();\n    const addresses = Object.keys(accounts);\n    const chainId = this.getCurrentChainId();\n\n    switch (chainId) {\n      case MAINNET_CHAIN_ID:\n        await this._updateAccountsViaBalanceChecker(\n          addresses,\n          SINGLE_CALL_BALANCES_ADDRESS,\n        );\n        break;\n\n      case RINKEBY_CHAIN_ID:\n        await this._updateAccountsViaBalanceChecker(\n          addresses,\n          SINGLE_CALL_BALANCES_ADDRESS_RINKEBY,\n        );\n        break;\n\n      case ROPSTEN_CHAIN_ID:\n        await this._updateAccountsViaBalanceChecker(\n          addresses,\n          SINGLE_CALL_BALANCES_ADDRESS_ROPSTEN,\n        );\n        break;\n\n      case KOVAN_CHAIN_ID:\n        await this._updateAccountsViaBalanceChecker(\n          addresses,\n          SINGLE_CALL_BALANCES_ADDRESS_KOVAN,\n        );\n        break;\n\n      default:\n        await Promise.all(addresses.map(this._updateAccount.bind(this)));\n    }\n  }\n\n  /**\n   * Updates the current balance of an account.\n   *\n   * @private\n   * @param {string} address - A hex address of a the account to be updated\n   * @returns {Promise} after the account balance is updated\n   */\n  async _updateAccount(address) {\n    // query balance\n    const balance = await this._query.getBalance(address);\n    const result = { address, balance };\n    // update accounts state\n    const { accounts } = this.store.getState();\n    // only populate if the entry is still present\n    if (!accounts[address]) {\n      return;\n    }\n    accounts[address] = result;\n    this.store.updateState({ accounts });\n  }\n\n  /**\n   * Updates current address balances from balanceChecker deployed contract instance\n   *\n   * @param {*} addresses\n   * @param {*} deployedContractAddress\n   */\n  async _updateAccountsViaBalanceChecker(addresses, deployedContractAddress) {\n    const { accounts } = this.store.getState();\n    this.web3.setProvider(this._provider);\n    const ethContract = this.web3.eth\n      .contract(SINGLE_CALL_BALANCES_ABI)\n      .at(deployedContractAddress);\n    const ethBalance = ['0x0'];\n\n    ethContract.balances(addresses, ethBalance, (error, result) => {\n      if (error) {\n        log.warn(\n          `MetaMask - Account Tracker single call balance fetch failed`,\n          error,\n        );\n        Promise.all(addresses.map(this._updateAccount.bind(this)));\n        return;\n      }\n      addresses.forEach((address, index) => {\n        const balance = result[index] ? bnToHex(result[index]) : '0x0';\n        accounts[address] = { address, balance };\n      });\n      this.store.updateState({ accounts });\n    });\n  }\n}\n","const { EventEmitter } = require('events');\nconst ethUtil = require('ethereumjs-util');\nconst HDKey = require('hdkey');\nconst TrezorConnect = require('trezor-connect').default;\nconst { TransactionFactory } = require('@ethereumjs/tx');\nconst transformTypedData = require('trezor-connect/lib/plugins/ethereum/typedData');\n\nconst hdPathString = `m/44'/60'/0'/0`;\nconst SLIP0044TestnetPath = `m/44'/1'/0'/0`;\n\nconst ALLOWED_HD_PATHS = {\n  [hdPathString]: true,\n  [SLIP0044TestnetPath]: true,\n};\n\nconst keyringType = 'Trezor Hardware';\nconst pathBase = 'm';\nconst MAX_INDEX = 1000;\nconst DELAY_BETWEEN_POPUPS = 1000;\nconst TREZOR_CONNECT_MANIFEST = {\n  email: 'support@metamask.io',\n  appUrl: 'https://metamask.io',\n};\n\nfunction wait(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n\n/**\n * @typedef {__import__('@ethereumjs/tx').TypedTransaction} TypedTransaction\n * @typedef {InstanceType<__import__(\"ethereumjs-tx\")>} OldEthJsTransaction\n */\n\n/**\n * Check if the given transaction is made with ethereumjs-tx or @ethereumjs/tx\n *\n * Transactions built with older versions of ethereumjs-tx have a\n * getChainId method that newer versions do not.\n * Older versions are mutable\n * while newer versions default to being immutable.\n * Expected shape and type\n * of data for v, r and s differ (Buffer (old) vs BN (new)).\n *\n * @param {TypedTransaction | OldEthJsTransaction} tx\n * @returns {tx is OldEthJsTransaction} Returns `true` if tx is an old-style ethereumjs-tx transaction.\n */\nfunction isOldStyleEthereumjsTx(tx) {\n  return typeof tx.getChainId === 'function';\n}\n\nclass TrezorKeyring extends EventEmitter {\n  constructor(opts = {}) {\n    super();\n    this.type = keyringType;\n    this.accounts = [];\n    this.hdk = new HDKey();\n    this.page = 0;\n    this.perPage = 5;\n    this.unlockedAccount = 0;\n    this.paths = {};\n    this.deserialize(opts);\n\n    TrezorConnect.on('DEVICE_EVENT', (event) => {\n      if (event && event.payload && event.payload.features) {\n        this.model = event.payload.features.model;\n      }\n    });\n    TrezorConnect.init({ manifest: TREZOR_CONNECT_MANIFEST });\n  }\n\n  /**\n   * Gets the model, if known.\n   * This may be `undefined` if the model hasn't been loaded yet.\n   *\n   * @returns {\"T\" | \"1\" | undefined}\n   */\n  getModel() {\n    return this.model;\n  }\n\n  dispose() {\n    // This removes the Trezor Connect iframe from the DOM\n    // This method is not well documented, but the code it calls can be seen\n    // here: https://github.com/trezor/connect/blob/dec4a56af8a65a6059fb5f63fa3c6690d2c37e00/src/js/iframe/builder.js#L181\n    TrezorConnect.dispose();\n  }\n\n  serialize() {\n    return Promise.resolve({\n      hdPath: this.hdPath,\n      accounts: this.accounts,\n      page: this.page,\n      paths: this.paths,\n      perPage: this.perPage,\n      unlockedAccount: this.unlockedAccount,\n    });\n  }\n\n  deserialize(opts = {}) {\n    this.hdPath = opts.hdPath || hdPathString;\n    this.accounts = opts.accounts || [];\n    this.page = opts.page || 0;\n    this.perPage = opts.perPage || 5;\n    return Promise.resolve();\n  }\n\n  isUnlocked() {\n    return Boolean(this.hdk && this.hdk.publicKey);\n  }\n\n  unlock() {\n    if (this.isUnlocked()) {\n      return Promise.resolve('already unlocked');\n    }\n    return new Promise((resolve, reject) => {\n      TrezorConnect.getPublicKey({\n        path: this.hdPath,\n        coin: 'ETH',\n      })\n        .then((response) => {\n          if (response.success) {\n            this.hdk.publicKey = Buffer.from(response.payload.publicKey, 'hex');\n            this.hdk.chainCode = Buffer.from(response.payload.chainCode, 'hex');\n            resolve('just unlocked');\n          } else {\n            reject(\n              new Error(\n                (response.payload && response.payload.error) || 'Unknown error',\n              ),\n            );\n          }\n        })\n        .catch((e) => {\n          reject(new Error((e && e.toString()) || 'Unknown error'));\n        });\n    });\n  }\n\n  setAccountToUnlock(index) {\n    this.unlockedAccount = parseInt(index, 10);\n  }\n\n  addAccounts(n = 1) {\n    return new Promise((resolve, reject) => {\n      this.unlock()\n        .then((_) => {\n          const from = this.unlockedAccount;\n          const to = from + n;\n\n          for (let i = from; i < to; i++) {\n            const address = this._addressFromIndex(pathBase, i);\n            if (!this.accounts.includes(address)) {\n              this.accounts.push(address);\n            }\n            this.page = 0;\n          }\n          resolve(this.accounts);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  getFirstPage() {\n    this.page = 0;\n    return this.__getPage(1);\n  }\n\n  getNextPage() {\n    return this.__getPage(1);\n  }\n\n  getPreviousPage() {\n    return this.__getPage(-1);\n  }\n\n  __getPage(increment) {\n    this.page += increment;\n\n    if (this.page <= 0) {\n      this.page = 1;\n    }\n\n    return new Promise((resolve, reject) => {\n      this.unlock()\n        .then((_) => {\n          const from = (this.page - 1) * this.perPage;\n          const to = from + this.perPage;\n\n          const accounts = [];\n\n          for (let i = from; i < to; i++) {\n            const address = this._addressFromIndex(pathBase, i);\n            accounts.push({\n              address,\n              balance: null,\n              index: i,\n            });\n            this.paths[ethUtil.toChecksumAddress(address)] = i;\n          }\n          resolve(accounts);\n        })\n        .catch((e) => {\n          reject(e);\n        });\n    });\n  }\n\n  getAccounts() {\n    return Promise.resolve(this.accounts.slice());\n  }\n\n  removeAccount(address) {\n    if (\n      !this.accounts.map((a) => a.toLowerCase()).includes(address.toLowerCase())\n    ) {\n      throw new Error(`Address ${address} not found in this keyring`);\n    }\n\n    this.accounts = this.accounts.filter(\n      (a) => a.toLowerCase() !== address.toLowerCase(),\n    );\n  }\n\n  /**\n   * Signs a transaction using Trezor.\n   *\n   * Accepts either an ethereumjs-tx or @ethereumjs/tx transaction, and returns\n   * the same type.\n   *\n   * @template {TypedTransaction | OldEthJsTransaction} Transaction\n   * @param {string} address - Hex string address.\n   * @param {Transaction} tx - Instance of either new-style or old-style ethereumjs transaction.\n   * @returns {Promise<Transaction>} The signed transaction, an instance of either new-style or old-style\n   * ethereumjs transaction.\n   */\n  signTransaction(address, tx) {\n    if (isOldStyleEthereumjsTx(tx)) {\n      // In this version of ethereumjs-tx we must add the chainId in hex format\n      // to the initial v value. The chainId must be included in the serialized\n      // transaction which is only communicated to ethereumjs-tx in this\n      // value. In newer versions the chainId is communicated via the 'Common'\n      // object.\n      return this._signTransaction(address, tx.getChainId(), tx, (payload) => {\n        tx.v = Buffer.from(payload.v, 'hex');\n        tx.r = Buffer.from(payload.r, 'hex');\n        tx.s = Buffer.from(payload.s, 'hex');\n        return tx;\n      });\n    }\n    return this._signTransaction(\n      address,\n      tx.common.chainIdBN().toNumber(),\n      tx,\n      (payload) => {\n        // Because tx will be immutable, first get a plain javascript object that\n        // represents the transaction. Using txData here as it aligns with the\n        // nomenclature of ethereumjs/tx.\n        const txData = tx.toJSON();\n        // The fromTxData utility expects a type to support transactions with a type other than 0\n        txData.type = tx.type;\n        // The fromTxData utility expects v,r and s to be hex prefixed\n        txData.v = ethUtil.addHexPrefix(payload.v);\n        txData.r = ethUtil.addHexPrefix(payload.r);\n        txData.s = ethUtil.addHexPrefix(payload.s);\n        // Adopt the 'common' option from the original transaction and set the\n        // returned object to be frozen if the original is frozen.\n        return TransactionFactory.fromTxData(txData, {\n          common: tx.common,\n          freeze: Object.isFrozen(tx),\n        });\n      },\n    );\n  }\n\n  /**\n   *\n   * @template {TypedTransaction | OldEthJsTransaction} Transaction\n   * @param {string} address - Hex string address.\n   * @param {number} chainId - Chain ID\n   * @param {Transaction} tx - Instance of either new-style or old-style ethereumjs transaction.\n   * @param {(__import__('trezor-connect').EthereumSignedTx) => Transaction} handleSigning - Converts signed transaction\n   * to the same new-style or old-style ethereumjs-tx.\n   * @returns {Promise<Transaction>} The signed transaction, an instance of either new-style or old-style\n   * ethereumjs transaction.\n   */\n  async _signTransaction(address, chainId, tx, handleSigning) {\n    let transaction;\n    if (isOldStyleEthereumjsTx(tx)) {\n      // legacy transaction from ethereumjs-tx package has no .toJSON() function,\n      // so we need to convert to hex-strings manually manually\n      transaction = {\n        to: this._normalize(tx.to),\n        value: this._normalize(tx.value),\n        data: this._normalize(tx.data),\n        chainId,\n        nonce: this._normalize(tx.nonce),\n        gasLimit: this._normalize(tx.gasLimit),\n        gasPrice: this._normalize(tx.gasPrice),\n      };\n    } else {\n      // new-style transaction from @ethereumjs/tx package\n      // we can just copy tx.toJSON() for everything except chainId, which must be a number\n      transaction = {\n        ...tx.toJSON(),\n        chainId,\n        to: this._normalize(tx.to),\n      };\n    }\n\n    try {\n      const status = await this.unlock();\n      await wait(status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0);\n      const response = await TrezorConnect.ethereumSignTransaction({\n        path: this._pathFromAddress(address),\n        transaction,\n      });\n      if (response.success) {\n        const newOrMutatedTx = handleSigning(response.payload);\n\n        const addressSignedWith = ethUtil.toChecksumAddress(\n          ethUtil.addHexPrefix(\n            newOrMutatedTx.getSenderAddress().toString('hex'),\n          ),\n        );\n        const correctAddress = ethUtil.toChecksumAddress(address);\n        if (addressSignedWith !== correctAddress) {\n          throw new Error(\"signature doesn't match the right address\");\n        }\n\n        return newOrMutatedTx;\n      }\n      throw new Error(\n        (response.payload && response.payload.error) || 'Unknown error',\n      );\n    } catch (e) {\n      throw new Error((e && e.toString()) || 'Unknown error');\n    }\n  }\n\n  signMessage(withAccount, data) {\n    return this.signPersonalMessage(withAccount, data);\n  }\n\n  // For personal_sign, we need to prefix the message:\n  signPersonalMessage(withAccount, message) {\n    return new Promise((resolve, reject) => {\n      this.unlock()\n        .then((status) => {\n          setTimeout(\n            (_) => {\n              TrezorConnect.ethereumSignMessage({\n                path: this._pathFromAddress(withAccount),\n                message: ethUtil.stripHexPrefix(message),\n                hex: true,\n              })\n                .then((response) => {\n                  if (response.success) {\n                    if (\n                      response.payload.address !==\n                      ethUtil.toChecksumAddress(withAccount)\n                    ) {\n                      reject(\n                        new Error('signature doesnt match the right address'),\n                      );\n                    }\n                    const signature = `0x${response.payload.signature}`;\n                    resolve(signature);\n                  } else {\n                    reject(\n                      new Error(\n                        (response.payload && response.payload.error) ||\n                          'Unknown error',\n                      ),\n                    );\n                  }\n                })\n                .catch((e) => {\n                  reject(new Error((e && e.toString()) || 'Unknown error'));\n                });\n              // This is necessary to avoid popup collision\n              // between the unlock & sign trezor popups\n            },\n            status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0,\n          );\n        })\n        .catch((e) => {\n          reject(new Error((e && e.toString()) || 'Unknown error'));\n        });\n    });\n  }\n\n  /**\n   * EIP-712 Sign Typed Data\n   */\n  async signTypedData(address, data, { version }) {\n    const dataWithHashes = transformTypedData(data, version === 'V4');\n\n    // set default values for signTypedData\n    // Trezor is stricter than @metamask/eth-sig-util in what it accepts\n    const {\n      types: { EIP712Domain = [], ...otherTypes } = {},\n      message = {},\n      domain = {},\n      primaryType,\n      // snake_case since Trezor uses Protobuf naming conventions here\n      domain_separator_hash, // eslint-disable-line camelcase\n      message_hash, // eslint-disable-line camelcase\n    } = dataWithHashes;\n\n    // This is necessary to avoid popup collision\n    // between the unlock & sign trezor popups\n    const status = await this.unlock();\n    await wait(status === 'just unlocked' ? DELAY_BETWEEN_POPUPS : 0);\n\n    const response = await TrezorConnect.ethereumSignTypedData({\n      path: this._pathFromAddress(address),\n      data: {\n        types: { EIP712Domain, ...otherTypes },\n        message,\n        domain,\n        primaryType,\n      },\n      metamask_v4_compat: true,\n      // Trezor 1 only supports blindly signing hashes\n      domain_separator_hash,\n      message_hash,\n    });\n\n    if (response.success) {\n      if (ethUtil.toChecksumAddress(address) !== response.payload.address) {\n        throw new Error('signature doesnt match the right address');\n      }\n      return response.payload.signature;\n    }\n\n    throw new Error(\n      (response.payload && response.payload.error) || 'Unknown error',\n    );\n  }\n\n  exportAccount() {\n    return Promise.reject(new Error('Not supported on this device'));\n  }\n\n  forgetDevice() {\n    this.accounts = [];\n    this.hdk = new HDKey();\n    this.page = 0;\n    this.unlockedAccount = 0;\n    this.paths = {};\n  }\n\n  /**\n   * Set the HD path to be used by the keyring. Only known supported HD paths are allowed.\n   *\n   * If the given HD path is already the current HD path, nothing happens. Otherwise the new HD\n   * path is set, and the wallet state is completely reset.\n   *\n   * @throws {Error] Throws if the HD path is not supported.\n   *\n   * @param {string} hdPath - The HD path to set.\n   */\n  setHdPath(hdPath) {\n    if (!ALLOWED_HD_PATHS[hdPath]) {\n      throw new Error(\n        `The setHdPath method does not support setting HD Path to ${hdPath}`,\n      );\n    }\n\n    // Reset HDKey if the path changes\n    if (this.hdPath !== hdPath) {\n      this.hdk = new HDKey();\n      this.accounts = [];\n      this.page = 0;\n      this.perPage = 5;\n      this.unlockedAccount = 0;\n      this.paths = {};\n    }\n    this.hdPath = hdPath;\n  }\n\n  /* PRIVATE METHODS */\n\n  _normalize(buf) {\n    return ethUtil.bufferToHex(buf).toString();\n  }\n\n  // eslint-disable-next-line no-shadow\n  _addressFromIndex(pathBase, i) {\n    const dkey = this.hdk.derive(`${pathBase}/${i}`);\n    const address = ethUtil\n      .publicToAddress(dkey.publicKey, true)\n      .toString('hex');\n    return ethUtil.toChecksumAddress(`0x${address}`);\n  }\n\n  _pathFromAddress(address) {\n    const checksummedAddress = ethUtil.toChecksumAddress(address);\n    let index = this.paths[checksummedAddress];\n    if (typeof index === 'undefined') {\n      for (let i = 0; i < MAX_INDEX; i++) {\n        if (checksummedAddress === this._addressFromIndex(pathBase, i)) {\n          index = i;\n          break;\n        }\n      }\n    }\n\n    if (typeof index === 'undefined') {\n      throw new Error('Unknown address');\n    }\n    return `${this.hdPath}/${index}`;\n  }\n}\n\nTrezorKeyring.type = keyringType;\nmodule.exports = TrezorKeyring;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./permissions\"), exports);\n__exportStar(require(\"./resource\"), exports);\n__exportStar(require(\"./services\"), exports);\n__exportStar(require(\"./snaps\"), exports);\n__exportStar(require(\"./subject-metadata\"), exports);\n//# sourceMappingURL=index.js.map","export * from './createMethodMiddleware';\n","\n'use strict'\n\nif (\"production\" === 'production') {\n  module.exports = require('./metamask-airgapped-keyring.cjs.production.min.js')\n} else {\n  module.exports = require('./metamask-airgapped-keyring.cjs.development.js')\n}\n","import { ObservableStore } from '@metamask/obs-store';\n\n/* eslint-disable import/first,import/order */\nconst Box = process.env.IN_TEST\n  ? require('../../../development/mock-3box')\n  : require('3box');\n/* eslint-enable import/order */\n\nimport log from 'loglevel';\nimport { JsonRpcEngine } from 'json-rpc-engine';\nimport { providerFromEngine } from 'eth-json-rpc-middleware';\nimport Migrator from '../lib/migrator';\nimport migrations from '../migrations';\nimport createOriginMiddleware from '../lib/createOriginMiddleware';\nimport createMetamaskMiddleware from './network/createMetamaskMiddleware';\n/* eslint-enable import/first */\n\nconst SYNC_TIMEOUT = 60 * 1000; // one minute\n\nexport default class ThreeBoxController {\n  constructor(opts = {}) {\n    const {\n      preferencesController,\n      keyringController,\n      addressBookController,\n      version,\n      getKeyringControllerState,\n      trackMetaMetricsEvent,\n    } = opts;\n\n    this.preferencesController = preferencesController;\n    this.addressBookController = addressBookController;\n    this.keyringController = keyringController;\n    this.provider = this._createProvider({\n      version,\n      getAccounts: async ({ origin }) => {\n        if (origin !== '3Box') {\n          return [];\n        }\n        const { isUnlocked } = getKeyringControllerState();\n\n        const accounts = await this.keyringController.getAccounts();\n\n        if (isUnlocked && accounts[0]) {\n          const appKeyAddress = await this.keyringController.getAppKeyAddress(\n            accounts[0],\n            'wallet://3box.metamask.io',\n          );\n          return [appKeyAddress];\n        }\n        return [];\n      },\n      processPersonalMessage: async (msgParams) => {\n        const accounts = await this.keyringController.getAccounts();\n        return keyringController.signPersonalMessage(\n          { ...msgParams, from: accounts[0] },\n          {\n            withAppKeyOrigin: 'wallet://3box.metamask.io',\n          },\n        );\n      },\n    });\n    this._trackMetaMetricsEvent = trackMetaMetricsEvent;\n\n    const initState = {\n      threeBoxSyncingAllowed: false,\n      showRestorePrompt: true,\n      threeBoxLastUpdated: 0,\n      ...opts.initState,\n      threeBoxAddress: null,\n      threeBoxSynced: false,\n      threeBoxDisabled: false,\n    };\n    this.store = new ObservableStore(initState);\n    this.registeringUpdates = false;\n    this.lastMigration = migrations\n      .sort((a, b) => a.version - b.version)\n      .slice(-1)[0];\n\n    if (initState.threeBoxSyncingAllowed) {\n      this.init();\n    }\n  }\n\n  async init() {\n    const accounts = await this.keyringController.getAccounts();\n    this.address = accounts[0];\n\n    this._trackMetaMetricsEvent({\n      event: '3Box Initiated',\n      category: '3Box',\n    });\n\n    if (this.address && !(this.box && this.store.getState().threeBoxSynced)) {\n      await this.new3Box();\n    }\n  }\n\n  async _update3Box() {\n    try {\n      const { threeBoxSyncingAllowed, threeBoxSynced } = this.store.getState();\n      if (threeBoxSyncingAllowed && threeBoxSynced) {\n        const newState = {\n          preferences: this.preferencesController.store.getState(),\n          addressBook: this.addressBookController.state,\n          lastUpdated: Date.now(),\n          lastMigration: this.lastMigration,\n        };\n\n        await this.space.private.set(\n          'metamaskBackup',\n          JSON.stringify(newState),\n        );\n        await this.setShowRestorePromptToFalse();\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  _createProvider(providerOpts) {\n    const metamaskMiddleware = createMetamaskMiddleware(providerOpts);\n    const engine = new JsonRpcEngine();\n    engine.push(createOriginMiddleware({ origin: '3Box' }));\n    engine.push(metamaskMiddleware);\n    const provider = providerFromEngine(engine);\n    return provider;\n  }\n\n  _waitForOnSyncDone() {\n    return new Promise((resolve) => {\n      this.box.onSyncDone(() => {\n        log.debug('3Box box sync done');\n        return resolve();\n      });\n    });\n  }\n\n  async new3Box() {\n    const accounts = await this.keyringController.getAccounts();\n    this.address = await this.keyringController.getAppKeyAddress(\n      accounts[0],\n      'wallet://3box.metamask.io',\n    );\n    let backupExists;\n    try {\n      const threeBoxConfig = await Box.getConfig(this.address);\n      backupExists = threeBoxConfig.spaces && threeBoxConfig.spaces.metamask;\n    } catch (e) {\n      if (e.message.match(/^Error: Invalid response \\(404\\)/u)) {\n        this._trackMetaMetricsEvent({\n          event: '3Box Backup does not exist',\n          category: '3Box',\n        });\n\n        backupExists = false;\n      } else {\n        this._trackMetaMetricsEvent({\n          event: '3Box Config Error',\n          category: '3Box',\n        });\n\n        throw e;\n      }\n    }\n    if (this.getThreeBoxSyncingState() || backupExists) {\n      this.store.updateState({ threeBoxSynced: false });\n\n      let timedOut = false;\n      const syncTimeout = setTimeout(() => {\n        log.error(`3Box sync timed out after ${SYNC_TIMEOUT} ms`);\n        timedOut = true;\n        this.store.updateState({\n          threeBoxDisabled: true,\n          threeBoxSyncingAllowed: false,\n        });\n      }, SYNC_TIMEOUT);\n      try {\n        this.box = await Box.openBox(this.address, this.provider);\n        await this._waitForOnSyncDone();\n        this.space = await this.box.openSpace('metamask', {\n          onSyncDone: async () => {\n            const stateUpdate = {\n              threeBoxSynced: true,\n              threeBoxAddress: this.address,\n            };\n            if (timedOut) {\n              log.info(`3Box sync completed after timeout; no longer disabled`);\n              stateUpdate.threeBoxDisabled = false;\n            }\n\n            clearTimeout(syncTimeout);\n            this.store.updateState(stateUpdate);\n\n            log.debug('3Box space sync done');\n\n            this._trackMetaMetricsEvent({\n              event: '3Box Synced',\n              category: '3Box',\n            });\n          },\n        });\n      } catch (e) {\n        this._trackMetaMetricsEvent({\n          event: '3Box Initiation Error',\n          category: '3Box',\n        });\n\n        console.error(e);\n        throw e;\n      }\n    }\n  }\n\n  async getLastUpdated() {\n    const res = await this.space.private.get('metamaskBackup');\n    const parsedRes = JSON.parse(res || '{}');\n    return parsedRes.lastUpdated;\n  }\n\n  async migrateBackedUpState(backedUpState) {\n    const migrator = new Migrator({ migrations });\n    const { preferences, addressBook } = JSON.parse(backedUpState);\n    const formattedStateBackup = {\n      PreferencesController: preferences,\n      AddressBookController: addressBook,\n    };\n    const initialMigrationState = migrator.generateInitialState(\n      formattedStateBackup,\n    );\n    const migratedState = await migrator.migrateData(initialMigrationState);\n    return {\n      preferences: migratedState.data.PreferencesController,\n      addressBook: migratedState.data.AddressBookController,\n    };\n  }\n\n  async restoreFromThreeBox() {\n    const backedUpState = await this.space.private.get('metamaskBackup');\n    const { preferences, addressBook } = await this.migrateBackedUpState(\n      backedUpState,\n    );\n    this.store.updateState({ threeBoxLastUpdated: backedUpState.lastUpdated });\n    preferences && this.preferencesController.store.updateState(preferences);\n    addressBook && this.addressBookController.update(addressBook, true);\n    this.setShowRestorePromptToFalse();\n\n    this._trackMetaMetricsEvent({\n      event: '3Box Restored Data',\n      category: '3Box',\n    });\n  }\n\n  turnThreeBoxSyncingOn() {\n    this._trackMetaMetricsEvent({\n      event: '3Box Sync Turned On',\n      category: '3Box',\n    });\n\n    this._registerUpdates();\n  }\n\n  turnThreeBoxSyncingOff() {\n    this._trackMetaMetricsEvent({\n      event: '3Box Sync Turned Off',\n      category: '3Box',\n    });\n\n    this.box.logout();\n  }\n\n  setShowRestorePromptToFalse() {\n    this.store.updateState({ showRestorePrompt: false });\n  }\n\n  setThreeBoxSyncingPermission(newThreeboxSyncingState) {\n    if (this.store.getState().threeBoxDisabled) {\n      return;\n    }\n    this.store.updateState({\n      threeBoxSyncingAllowed: newThreeboxSyncingState,\n    });\n\n    if (newThreeboxSyncingState && this.box) {\n      this.turnThreeBoxSyncingOn();\n    }\n\n    if (!newThreeboxSyncingState && this.box) {\n      this.turnThreeBoxSyncingOff();\n    }\n  }\n\n  getThreeBoxSyncingState() {\n    return this.store.getState().threeBoxSyncingAllowed;\n  }\n\n  _registerUpdates() {\n    if (!this.registeringUpdates) {\n      const updatePreferences = this._update3Box.bind(this);\n      this.preferencesController.store.subscribe(updatePreferences);\n      const updateAddressBook = this._update3Box.bind(this);\n      this.addressBookController.subscribe(updateAddressBook);\n      this.registeringUpdates = true;\n    }\n  }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    }\n    catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(() => {\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for (let i = 0; i < n; i += 1) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === 'error';\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        }\n        else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === 'function') {\n            safeApply(handler, this, args);\n        }\n        else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for (let i = 0; i < len; i += 1) {\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports.default = SafeEventEmitter;\n//# sourceMappingURL=index.js.map","var Transform = require('readable-stream').Transform\n  , inherits  = require('util').inherits\n  , xtend     = require('xtend')\n\nfunction DestroyableTransform(opts) {\n  Transform.call(this, opts)\n  this._destroyed = false\n}\n\ninherits(DestroyableTransform, Transform)\n\nDestroyableTransform.prototype.destroy = function(err) {\n  if (this._destroyed) return\n  this._destroyed = true\n  \n  var self = this\n  process.nextTick(function() {\n    if (err)\n      self.emit('error', err)\n    self.emit('close')\n  })\n}\n\n// a noop _transform function\nfunction noop (chunk, enc, callback) {\n  callback(null, chunk)\n}\n\n\n// create a new export function, used by both the main export and\n// the .ctor export, contains common logic for dealing with arguments\nfunction through2 (construct) {\n  return function (options, transform, flush) {\n    if (typeof options == 'function') {\n      flush     = transform\n      transform = options\n      options   = {}\n    }\n\n    if (typeof transform != 'function')\n      transform = noop\n\n    if (typeof flush != 'function')\n      flush = null\n\n    return construct(options, transform, flush)\n  }\n}\n\n\n// main export, just make me a transform stream!\nmodule.exports = through2(function (options, transform, flush) {\n  var t2 = new DestroyableTransform(options)\n\n  t2._transform = transform\n\n  if (flush)\n    t2._flush = flush\n\n  return t2\n})\n\n\n// make me a reusable prototype that I can `new`, or implicitly `new`\n// with a constructor call\nmodule.exports.ctor = through2(function (options, transform, flush) {\n  function Through2 (override) {\n    if (!(this instanceof Through2))\n      return new Through2(override)\n\n    this.options = xtend(options, override)\n\n    DestroyableTransform.call(this, this.options)\n  }\n\n  inherits(Through2, DestroyableTransform)\n\n  Through2.prototype._transform = transform\n\n  if (flush)\n    Through2.prototype._flush = flush\n\n  return Through2\n})\n\n\nmodule.exports.obj = through2(function (options, transform, flush) {\n  var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))\n\n  t2._transform = transform\n\n  if (flush)\n    t2._flush = flush\n\n  return t2\n})\n","import { cloneDeep } from 'lodash';\nimport { TRANSACTION_STATUSES } from '../../../shared/constants/transaction';\n\nexport default function failTxsThat(version, reason, condition) {\n  return function (originalVersionedData) {\n    const versionedData = cloneDeep(originalVersionedData);\n    versionedData.meta.version = version;\n    try {\n      const state = versionedData.data;\n      const newState = transformState(state, condition, reason);\n      versionedData.data = newState;\n    } catch (err) {\n      console.warn(`MetaMask Migration #${version}${err.stack}`);\n    }\n    return Promise.resolve(versionedData);\n  };\n}\n\nfunction transformState(state, condition, reason) {\n  const newState = state;\n  const { TransactionController } = newState;\n  if (TransactionController && TransactionController.transactions) {\n    const { transactions } = TransactionController;\n\n    newState.TransactionController.transactions = transactions.map((txMeta) => {\n      if (!condition(txMeta)) {\n        return txMeta;\n      }\n\n      txMeta.status = TRANSACTION_STATUSES.FAILED;\n      txMeta.err = {\n        message: reason,\n        note: `Tx automatically failed by migration because ${reason}`,\n      };\n\n      return txMeta;\n    });\n  }\n  return newState;\n}\n","import jsonDiffer from 'fast-json-patch';\nimport { cloneDeep } from 'lodash';\n\n/**\n * converts non-initial history entries into diffs\n *\n * @param {Array} longHistory\n * @returns {Array}\n */\nexport function migrateFromSnapshotsToDiffs(longHistory) {\n  return (\n    longHistory\n      // convert non-initial history entries into diffs\n      .map((entry, index) => {\n        if (index === 0) {\n          return entry;\n        }\n        return generateHistoryEntry(longHistory[index - 1], entry);\n      })\n  );\n}\n\n/**\n * Generates an array of history objects sense the previous state.\n * The object has the keys\n * op (the operation performed),\n * path (the key and if a nested object then each key will be separated with a `/`)\n * value\n * with the first entry having the note and a timestamp when the change took place\n *\n * @param {Object} previousState - the previous state of the object\n * @param {Object} newState - the update object\n * @param {string} [note] - a optional note for the state change\n * @returns {Array}\n */\nexport function generateHistoryEntry(previousState, newState, note) {\n  const entry = jsonDiffer.compare(previousState, newState);\n  // Add a note to the first op, since it breaks if we append it to the entry\n  if (entry[0]) {\n    if (note) {\n      entry[0].note = note;\n    }\n    entry[0].timestamp = Date.now();\n  }\n  return entry;\n}\n\n/**\n * Recovers previous txMeta state obj\n *\n * @param _shortHistory\n * @returns {Object}\n */\nexport function replayHistory(_shortHistory) {\n  const shortHistory = cloneDeep(_shortHistory);\n  return shortHistory.reduce(\n    (val, entry) => jsonDiffer.applyPatch(val, entry).newDocument,\n  );\n}\n\n/**\n * Snapshot {@code txMeta}\n *\n * @param {Object} txMeta - the tx metadata object\n * @returns {Object} a deep clone without history\n */\nexport function snapshotFromTxMeta(txMeta) {\n  const shallow = { ...txMeta };\n  delete shallow.history;\n  return cloneDeep(shallow);\n}\n","module.exports = function toDataView (data) {\n  if (data instanceof Int8Array || data instanceof Uint8Array || data instanceof Uint8ClampedArray) {\n    return new DataView(data.buffer, data.byteOffset, data.byteLength)\n  }\n\n  if (data instanceof ArrayBuffer) {\n    return new DataView(data)\n  }\n\n  throw new TypeError('Expected `data` to be an ArrayBuffer, Buffer, Int8Array, Uint8Array or Uint8ClampedArray')\n}\n","const abi = [\n  {\n    constant: true,\n    inputs: [{ name: 'node', type: 'bytes32' }],\n    name: 'resolver',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ name: 'node', type: 'bytes32' }],\n    name: 'owner',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'label', type: 'bytes32' },\n      { name: 'owner', type: 'address' },\n    ],\n    name: 'setSubnodeOwner',\n    outputs: [],\n    payable: false,\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'ttl', type: 'uint64' },\n    ],\n    name: 'setTTL',\n    outputs: [],\n    payable: false,\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ name: 'node', type: 'bytes32' }],\n    name: 'ttl',\n    outputs: [{ name: '', type: 'uint64' }],\n    payable: false,\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'resolver', type: 'address' },\n    ],\n    name: 'setResolver',\n    outputs: [],\n    payable: false,\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'owner', type: 'address' },\n    ],\n    name: 'setOwner',\n    outputs: [],\n    payable: false,\n    type: 'function',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'node', type: 'bytes32' },\n      { indexed: false, name: 'owner', type: 'address' },\n    ],\n    name: 'Transfer',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'node', type: 'bytes32' },\n      { indexed: true, name: 'label', type: 'bytes32' },\n      { indexed: false, name: 'owner', type: 'address' },\n    ],\n    name: 'NewOwner',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'node', type: 'bytes32' },\n      { indexed: false, name: 'resolver', type: 'address' },\n    ],\n    name: 'NewResolver',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'node', type: 'bytes32' },\n      { indexed: false, name: 'ttl', type: 'uint64' },\n    ],\n    name: 'NewTTL',\n    type: 'event',\n  },\n];\nexport default abi;\n"]}