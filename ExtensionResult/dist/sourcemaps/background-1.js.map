{"version":3,"sources":["app/scripts/lib/ens-ipfs/contracts/resolver.js","node_modules/@ensdomains/content-hash/src/index.js","app/scripts/constants/contracts.js","node_modules/json-rpc-engine/dist/createScaffoldMiddleware.js","node_modules/json-rpc-engine/dist/getUniqueId.js","node_modules/json-rpc-engine/dist/createAsyncMiddleware.js","node_modules/json-rpc-engine/dist/mergeMiddleware.js","node_modules/json-rpc-engine/dist/idRemapMiddleware.js","node_modules/json-rpc-engine/dist/JsonRpcEngine.js","app/scripts/controllers/permissions/enums.js","app/scripts/controllers/permissions/selectors.js","app/scripts/controllers/permissions/caveat-mutators.js","app/scripts/controllers/permissions/permission-log.js","app/scripts/controllers/permissions/background-api.js","app/scripts/controllers/permissions/specifications.js","app/scripts/controllers/ens/ens.js","app/scripts/lib/cleanErrorStack.js","node_modules/nonce-tracker/index.js","app/scripts/controllers/transactions/lib/util.js","app/scripts/controllers/transactions/pending-tx-tracker.js","app/scripts/controllers/transactions/tx-state-manager.js","app/scripts/controllers/transactions/tx-gas-utils.js","node_modules/analytics-node/index.js","node_modules/ethereumjs-wallet/thirdparty.js","node_modules/ethereumjs-wallet/index.js","app/scripts/controllers/network/network.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/hdkey/lib/hdkey.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/eth-sig-util/index.js","node_modules/eth-json-rpc-middleware/dist/providerAsMiddleware.js","node_modules/eth-json-rpc-middleware/dist/providerFromMiddleware.js","node_modules/eth-json-rpc-middleware/dist/block-tracker-inspector.js","node_modules/eth-json-rpc-middleware/dist/block-ref.js","node_modules/eth-json-rpc-middleware/dist/fetch.js","node_modules/eth-json-rpc-middleware/dist/block-cache.js","node_modules/eth-json-rpc-middleware/dist/block-ref-rewrite.js","node_modules/eth-json-rpc-middleware/dist/providerFromEngine.js","node_modules/eth-json-rpc-middleware/dist/inflight-cache.js","node_modules/eth-json-rpc-middleware/dist/retryOnEmpty.js","node_modules/eth-json-rpc-middleware/dist/wallet.js","node_modules/eth-lattice-keyring/node_modules/bignumber.js/bignumber.js","node_modules/gridplus-sdk/dist/index.js","node_modules/@metamask/smart-transactions-controller/dist/SmartTransactionsController.js","node_modules/eth-trezor-keyring/node_modules/hdkey/lib/hdkey.js","node_modules/trezor-connect/lib/index.js","node_modules/trezor-connect/lib/plugins/ethereum/typedData.js","node_modules/@metamask/snap-controllers/dist/subject-metadata/index.js","node_modules/@metamask/snap-controllers/dist/permissions/index.js","node_modules/@metamask/snap-controllers/dist/resource/index.js","node_modules/@metamask/snap-controllers/dist/snaps/index.js","node_modules/@metamask/snap-controllers/dist/services/index.js","app/scripts/lib/rpc-method-middleware/createMethodMiddleware.js","node_modules/@keystonehq/metamask-airgapped-keyring/dist/metamask-airgapped-keyring.cjs.production.min.js","node_modules/@keystonehq/metamask-airgapped-keyring/dist/metamask-airgapped-keyring.cjs.development.js","development/mock-3box.js","app/scripts/controllers/network/createMetamaskMiddleware.js","node_modules/3box/lib/3box.js","node_modules/fast-json-patch/lib/duplex.js","node_modules/@ensdomains/content-hash/src/profiles.js","node_modules/@ensdomains/content-hash/node_modules/multihashes/src/index.js","node_modules/@ensdomains/content-hash/src/helpers.js","node_modules/@ensdomains/content-hash/node_modules/multicodec/src/index.js","node_modules/analytics-node/package.json","node_modules/remove-trailing-slash/index.js","node_modules/ms/index.js","node_modules/lodash.isstring/index.js","node_modules/analytics-node/node_modules/uuid/v4.js","node_modules/md5/md5.js","node_modules/@segment/loosely-validate-event/index.js","node_modules/axios-retry/index.js","node_modules/axios/index.js","node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/index.js","node_modules/scryptsy/lib/scrypt.js","node_modules/ethereumjs-wallet/node_modules/uuid/v4.js","node_modules/swappable-obj-proxy/src/index.js","app/scripts/controllers/network/createJsonRpcClient.js","app/scripts/controllers/network/createInfuraClient.js","node_modules/coinstring/lib/coinstring.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/secp256k1/elliptic.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/eth-sig-util/node_modules/ethereumjs-util/dist/index.js","node_modules/eth-json-rpc-middleware/dist/utils/cache.js","node_modules/eth-json-rpc-middleware/node_modules/pify/index.js","node_modules/eth-json-rpc-middleware/node_modules/eth-sig-util/index.js","node_modules/gridplus-sdk/dist/constants.js","node_modules/gridplus-sdk/dist/client.js","node_modules/@metamask/smart-transactions-controller/dist/constants.js","node_modules/@metamask/smart-transactions-controller/dist/types.js","node_modules/@metamask/smart-transactions-controller/node_modules/bignumber.js/bignumber.js","node_modules/@metamask/smart-transactions-controller/dist/utils.js","node_modules/lodash/cloneDeep.js","node_modules/lodash/mapValues.js","node_modules/eth-trezor-keyring/node_modules/secp256k1/elliptic.js","node_modules/trezor-connect/lib/types/index.js","node_modules/trezor-connect/lib/constants/index.js","node_modules/trezor-connect/lib/env/browser/index.js","node_modules/@metamask/eth-sig-util/dist/index.js","node_modules/@metamask/snap-controllers/dist/subject-metadata/SubjectMetadataController.js","node_modules/@metamask/snap-controllers/dist/permissions/utils.js","node_modules/@metamask/snap-controllers/dist/permissions/Permission.js","node_modules/@metamask/snap-controllers/dist/permissions/endowments/index.js","node_modules/@metamask/snap-controllers/dist/permissions/Caveat.js","node_modules/@metamask/snap-controllers/dist/permissions/PermissionController.js","node_modules/@metamask/snap-controllers/dist/permissions/rpc-methods/index.js","node_modules/@metamask/snap-controllers/dist/resource/ExternalResourceController.js","node_modules/@metamask/snap-controllers/dist/snaps/SnapController.js","node_modules/@metamask/snap-controllers/dist/snaps/json-schemas/index.js","node_modules/@metamask/snap-controllers/dist/snaps/utils.js","node_modules/@metamask/snap-controllers/dist/services/ExecutionService.js","node_modules/@metamask/snap-controllers/dist/services/AbstractExecutionService.js","node_modules/@metamask/snap-controllers/dist/services/WebWorkerExecutionService.js","app/scripts/lib/rpc-method-middleware/handlers/index.js","node_modules/@metamask/rpc-methods/dist/index.js","node_modules/@keystonehq/metamask-airgapped-keyring/node_modules/@metamask/obs-store/dist/index.js","node_modules/@keystonehq/metamask-airgapped-keyring/node_modules/@keystonehq/bc-ur-registry-eth/dist/index.js","node_modules/@keystonehq/base-eth-keyring/dist/index.js","app/scripts/controllers/network/middleware/pending.js","node_modules/store/dist/store.legacy.js","node_modules/3box/lib/api.js","node_modules/3box/lib/space.js","node_modules/3box/lib/utils/index.js","node_modules/3box/lib/publicStore.js","node_modules/orbit-db-pubsub/index.js","node_modules/3box/lib/config.js","node_modules/3box/lib/3id/index.js","node_modules/3box/lib/verified.js","node_modules/3box/lib/utils/id.js","node_modules/orbit-db-access-controllers/index.js","node_modules/3box/lib/privateStore.js","node_modules/3box-orbitdb-plugins/src/index.js","node_modules/orbit-db/src/OrbitDB.js","node_modules/ipfs/src/core/index.js","node_modules/fast-json-patch/lib/helpers.js","node_modules/fast-json-patch/lib/core.js","node_modules/@ensdomains/content-hash/node_modules/cids/src/index.js","node_modules/js-base64/base64.js","node_modules/@ensdomains/content-hash/node_modules/multihashes/src/constants.js","node_modules/varint/index.js","node_modules/web-encoding/src/lib.js","node_modules/@ensdomains/content-hash/node_modules/multibase/src/index.js","node_modules/@ensdomains/content-hash/node_modules/multicodec/src/constants.js","node_modules/@ensdomains/content-hash/node_modules/multicodec/src/print.js","node_modules/@ensdomains/content-hash/node_modules/multicodec/src/varint-table.js","node_modules/@ensdomains/content-hash/node_modules/multicodec/src/int-table.js","node_modules/@ensdomains/content-hash/node_modules/uint8arrays/concat.js","node_modules/@ensdomains/content-hash/node_modules/multicodec/node_modules/varint/index.js","node_modules/@ensdomains/content-hash/node_modules/multicodec/src/util.js","node_modules/analytics-node/node_modules/uuid/lib/rng-browser.js","node_modules/analytics-node/node_modules/uuid/lib/bytesToUuid.js","node_modules/charenc/charenc.js","node_modules/crypt/crypt.js","node_modules/component-type/index.js","node_modules/join-component/index.js","node_modules/axios-retry/lib/index.js","node_modules/axios/lib/axios.js","node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/constants.js","node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/signature.js","node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/account.js","node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/bytes.js","node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/object.js","node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/hash.js","node_modules/ethereumjs-wallet/node_modules/ethjs-util/lib/index.js","node_modules/ethereumjs-wallet/node_modules/ethereumjs-util/dist/secp256k1v3-adapter.js","node_modules/ethereumjs-wallet/node_modules/uuid/lib/rng-browser.js","node_modules/ethereumjs-wallet/node_modules/uuid/lib/bytesToUuid.js","node_modules/swappable-obj-proxy/src/createSwappableProxy.js","node_modules/swappable-obj-proxy/src/createEventEmitterProxy.js","node_modules/eth-block-tracker/dist/index.js","node_modules/coinstring/node_modules/bs58/lib/bs58.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/secp256k1/lib/elliptic/index.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/secp256k1/lib/index.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/ethjs-util/lib/index.js","node_modules/@metamask/eth-ledger-bridge-keyring/node_modules/keccak/js.js","node_modules/eth-json-rpc-middleware/node_modules/ethereumjs-util/dist/index.js","node_modules/eth-json-rpc-middleware/node_modules/ethereumjs-abi/index.js","node_modules/gridplus-sdk/dist/util.js","node_modules/gridplus-sdk/dist/ethereumAbi.js","node_modules/buffer/index.js","node_modules/superagent/lib/client.js","node_modules/gridplus-sdk/dist/genericSigning.js","node_modules/bitwise/index.js","node_modules/gridplus-sdk/dist/ethereum.js","node_modules/gridplus-sdk/dist/bitcoin.js","node_modules/@metamask/smart-transactions-controller/node_modules/fast-json-patch/index.js","node_modules/lodash/_baseClone.js","node_modules/lodash/_baseForOwn.js","node_modules/lodash/_baseAssignValue.js","node_modules/lodash/_baseIteratee.js","node_modules/eth-trezor-keyring/node_modules/secp256k1/lib/elliptic/index.js","node_modules/eth-trezor-keyring/node_modules/secp256k1/lib/index.js","node_modules/trezor-connect/lib/types/networks/cardano.js","node_modules/trezor-connect/lib/types/api.js","node_modules/trezor-connect/lib/types/events.js","node_modules/trezor-connect/lib/types/trezor/device.js","node_modules/trezor-connect/lib/types/backend/blockchain.js","node_modules/trezor-connect/lib/constants/blockchain.js","node_modules/trezor-connect/lib/constants/popup.js","node_modules/trezor-connect/lib/constants/network.js","node_modules/trezor-connect/lib/constants/transport.js","node_modules/trezor-connect/lib/constants/iframe.js","node_modules/trezor-connect/lib/constants/cardano.js","node_modules/trezor-connect/lib/constants/device.js","node_modules/trezor-connect/lib/constants/ui.js","node_modules/trezor-connect/lib/constants/errors.js","node_modules/trezor-connect/lib/webusb/button.js","node_modules/trezor-connect/lib/utils/debug.js","node_modules/trezor-connect/lib/message/index.js","node_modules/trezor-connect/lib/data/ConnectSettings.js","node_modules/trezor-connect/lib/message/builder.js","node_modules/trezor-connect/lib/popup/PopupManager.js","node_modules/trezor-connect/lib/iframe/builder.js","node_modules/@metamask/eth-sig-util/dist/encryption.js","node_modules/@metamask/eth-sig-util/dist/sign-typed-data.js","node_modules/@metamask/eth-sig-util/dist/utils.js","node_modules/@metamask/eth-sig-util/dist/personal-sign.js","node_modules/@metamask/snap-controllers/node_modules/nanoid/index.browser.cjs","node_modules/@metamask/snap-controllers/dist/permissions/endowments/network-access.js","node_modules/@metamask/snap-controllers/dist/permissions/errors.js","node_modules/@metamask/snap-controllers/dist/utils.js","node_modules/deep-freeze-strict/index.js"],"names":["constant","inputs","name","type","outputs","payable","stateMutability","anonymous","indexed","multiC","require","multiH","hexStringToBuffer","profiles","cidForWeb","cidV0ToV1Base32","module","exports","helpers","decode","contentHash","buffer","codec","getCodec","value","rmPrefix","profile","fromIpfs","ipfsHash","this","encode","fromSkylink","skylink","fromSwarm","swarmHash","encodedValue","toHexString","addPrefix","hash","Object","defineProperty","createScaffoldMiddleware","handlers","req","res","next","end","handler","method","undefined","result","getUniqueId","MAX","idCounter","Math","floor","random","createAsyncMiddleware","asyncMiddleware","async","resolveNextPromise","nextPromise","Promise","resolve","returnHandlerCallback","nextWasCalled","asyncNext","runReturnHandlersCallback","error","mergeMiddleware","JsonRpcEngine_1","middlewareStack","engine","JsonRpcEngine","forEach","middleware","push","asMiddleware","createIdRemapMiddleware","getUniqueId_1","_end","originalId","id","newId","done","__importDefault","mod","__esModule","default","safe_event_emitter_1","eth_rpc_errors_1","constructor","super","_middleware","handle","cb","Error","Array","isArray","_handleBatch","_handle","_promiseHandle","middlewareError","isComplete","returnHandlers","_runAllMiddleware","_runReturnHandlers","handlerCallback","reqs","responses","all","map","bind","_err","callerReq","EthereumRpcError","errorCodes","rpc","invalidRequest","request","jsonrpc","assign","_processRequest","_error","serializeError","_checkForCompletion","static","_runMiddleware","reverse","err","returnHandler","internal","jsonify","reject","JSON","stringify","accountsChanged","unlockStateChanged","chainChanged","restricted","_reselect","_permissions","getPermittedAccountsByOrigin","createSelector","state","subjects","values","reduce","originToAccountsMap","subject","_subject$permissions","_subject$permissions$","caveat","permissions","eth_accounts","caveats","find","CaveatTypes","restrictReturnedAccounts","set","origin","Map","newAccountsMap","previousAccountsMap","changedAccounts","newOrigins","Set","keys","_newAccountsMap$get","newAccounts","get","delete","_snapControllers","CaveatMutatorFactories","removeAccount","targetAccount","existingAccounts","filter","address","length","operation","CaveatMutatorOperation","noop","updateValue","revokePermission","_obsStore","_fastSafeStringify","_interopRequireDefault","_enums","getAccountToTimeMap","accounts","time","acc","account","_objectSpread","restrictedMethods","initState","store","ObservableStore","permissionHistory","permissionActivityLog","getActivityLog","getState","updateActivityLog","logs","updateState","getHistory","updateHistory","history","updateAccountsHistory","accountToTimeMap","Date","now","commitNewHistory","createMiddleware","activityEntry","requestedMethods","isInternal","startsWith","WALLET_PREFIX","LOG_IGNORE_METHODS","includes","has","logRequest","getRequestedMethods","logResponse","logPermissionsHistory","methodType","LOG_METHOD_TYPES","requestTime","response","responseTime","success","commitNewActivity","entry","LOG_LIMIT","shift","isEthRequestAccounts","newEntries","lastApproved","perm","parentCapability","getAccountsFromPermission","newOriginHistory","existingEthAccountsEntry","newEthAccountsEntry","params","add","permissionController","addPermittedAccount","existing","getCaveat","RestrictedMethods","updateCaveat","removePermittedAccount","remainingAccounts","existingAccount","requestAccountsPermissionWithId","_nanoid","requestPermissions","PermissionKeys","freeze","CaveatFactories","getIdentities","decorator","args","slice","validator","_origin","_target","identities","validateCaveatAccounts","getAllAccounts","captureKeyringTypesWithMissingIdentities","permissionType","PermissionType","RestrictedMethod","targetKey","allowedCaveats","factory","permissionOptions","requestData","approvedAccounts","constructPermission","methodImplementation","sort","firstAddress","secondAddress","lastSelected","permission","unrestrictedMethods","_ethjsEns","_ethereumEnsNetworkMap","network","Boolean","provider","_ethJsEns","lookup","ensName","String","msg","message","stack","EthQuery","assert","Mutex","blockTracker","getPendingTransactions","getConfirmedTransactions","ethQuery","lockMap","globalMutex","_lookupMutex","releaseLock","acquire","_globalMutexFree","_takeMutex","nonceDetails","networkNonceResult","_getNetworkNextNonce","highestLocallyConfirmed","_getHighestLocallyConfirmed","nextNetworkNonce","nonce","highestSuggested","max","pendingTxs","localNonceResult","_getHighestContinuousFrom","local","nextNonce","Number","isInteger","lockId","mutex","blockNumber","getLatestBlock","baseCount","getTransactionCount","toNumber","details","confirmedTransactions","highest","_getHighestNonce","txList","nonces","txMeta","txParams","parseInt","apply","startPoint","_transaction","TRANSACTION_STATUSES","REJECTED","CONFIRMED","FAILED","DROPPED","lowerCase","normalizedTxParams","normalizeTxParams","validateTxParams","gasUsed","toString","_ethRpcErrors","_util","_transaction2","_hexstringUtils","normalizers","from","addHexPrefix","to","toLowerCase","data","gas","gasPrice","maxFeePerGas","maxPriorityFeePerGas","estimateSuggested","estimate","estimateUsed","key","ensureMutuallyExclusiveFieldsNotProvided","fieldBeingValidated","mutuallyExclusiveField","ethErrors","invalidParams","ensureFieldIsString","field","ensureProperTransactionEnvelopeTypeProvided","TRANSACTION_ENVELOPE_TYPES","FEE_MARKET","eip1559Compatibility","isEIP1559Transaction","entries","validateFrom","validateRecipient","match","isValidHexAddress","allowNonPrefixed","pendingTransactions","status","externalTxNonce","el","_el$txParams","_el$txParams2","_safeEventEmitter","_loglevel","_ethjsQuery","PendingTransactionTracker","config","_defineProperty2","query","nonceTracker","getCompletedTransactions","publishTransaction","approveTransaction","confirmTransaction","nonceGlobalLock","getGlobalLock","_checkPendingTx","pending","_resubmitTx","_err$value","_err$value$message","errorMessage","warning","emit","latestBlockNumber","firstRetryBlockNumber","txBlockDistance","retryCount","min","pow","rawTx","txHash","txId","SUBMITTED","noTxHashErr","_checkIfNonceIsTaken","transactionReceipt","getTransactionReceipt","baseFeePerGas","timestamp","blockTimestamp","getBlockByHash","blockHash","_checkIfTxWasDropped","networkNextNonce","droppedBlocksBufferByHash","currentBlockBuffer","DROPPED_BUFFER_COUNT","some","other","_lodash","_randomId","_metamaskController","_txStateHistoryHelpers","TransactionStateManager","txHistoryLimit","getNetwork","getCurrentChainId","transactions","generateTxMeta","opts","_opts$txParams","netId","chainId","dappSuggestedGasFees","getTime","UNAPPROVED","metamaskNetworkId","originalGasEstimate","userEditedGasLimit","loadingDefaults","getUnapprovedTxList","pickBy","transaction","transactionMatchesNetwork","getApprovedTransactions","searchCriteria","APPROVED","getTransactions","addTransaction","normalizeAndValidateTxParams","once","removeAllListeners","snapshot","snapshotFromTxMeta","filterToCurrentNetwork","nonceNetworkSet","txsToDelete","tx","size","getFinalStates","_deleteTransactions","_addTransactionsToState","addExternalTransaction","_txMeta$txParams","fromAddress","validateConfirmedExternalTransaction","getTransaction","updateTransaction","note","currentState","previousState","replayHistory","generateHistoryEntry","initialList","limit","predicateMethods","mapValues","predicate","v","transactionsToFilter","keyBy","filteredTransactions","sortBy","txs","i","unshift","setTxStatusRejected","_setTransactionStatus","_deleteTransaction","setTxStatusUnapproved","setTxStatusApproved","setTxStatusSigned","SIGNED","setTxStatusSubmitted","submittedTime","setTxStatusConfirmed","setTxStatusDropped","setTxStatusFailed","_error$message","wipeTransactions","omitBy","clearUnapprovedTxs","METAMASK_CONTROLLER_EVENTS","UPDATE_BADGE","newTx","targetTransactionId","targetTransactionIds","transactionId","_ethereumjsUtil","block","getBlockByNumber","blockGasLimitBN","hexToBn","gasLimit","saferGasLimitBN","BnMultiplyByFraction","simulationFails","estimatedGasHex","bnToHex","estimateTxGas","warn","reason","errorKey","debug","number","blockGasLimit","cloneDeep","estimateGas","addGasBuffer","initialGasLimitHex","blockGasLimitHex","multiplier","initialGasLimitBn","upperGasLimitBn","muln","bufferedGasLimitBn","gt","lt","analyzeGasUsage","removeSlash","looselyValidate","axios","axiosRetry","ms","uuid","md5","version","isString","setImmediate","global","process","nextTick","writeKey","options","queue","host","timeout","flushAt","flushInterval","flushed","configurable","writable","enumerable","enable","axiosClient","create","retries","retryCondition","_isErrorRetryable","retryDelay","exponentialDelay","_validate","e","console","log","identify","callback","enqueue","group","track","page","screen","alias","context","library","_metadata","nodeVersion","versions","node","messageId","anonymousId","userId","flush","timer","setTimeout","clearTimeout","items","splice","callbacks","item","batch","sentAt","headers","window","url","auth","username","then","catch","statusText","isNetworkError","_typeof","Symbol","iterator","obj","prototype","Wallet","ethUtil","crypto","scryptsy","utf8","aesjs","Buffer","val","Thirdparty","fromEtherWallet","input","password","privKey","json","parse","locked","cipher","encrypted","private","ciphertext","salt","decodeCryptojsSalt","evp","iter","createHash","digest","update","count","keysize","ivsize","ret","concat","alloc","tmp","iv","evp_kdf","final","runCipherBuffer","createDecipheriv","wallet","getAddressString","fromEtherCamp","passphrase","keccak256","fromKryptoKit","entropy","sha256","encryptedSeed","checksum","buf","decodeUtf8Char","str","decodeURIComponent","fromCharCode","kryptoKitBrokenScryptSeed","aesKey","decipher","ModeOfOperation","ecb","decrypt","fromQuorumWallet","userid","seed","pbkdf2Sync","randomBytes","uuidv4","bs58check","priv","pub","isValidPrivate","isValidPublic","_privKey","_pubKey","privateToPublic","generate","icapDirect","BN","privateToAddress","lte","generateVanityAddress","pattern","RegExp","test","getPrivateKey","getPrivateKeyString","bufferToHex","getPublicKey","pubKey","getPublicKeyString","getAddress","publicToAddress","getChecksumAddressString","toChecksumAddress","toV3","derivedKey","kdf","kdfparams","dklen","c","prf","n","r","p","createCipheriv","mac","cipherparams","getV3Filename","toJSON","replace","join","toV3String","fromPublicKey","nonStrict","importPublic","fromExtendedPublicKey","fromPrivateKey","fromExtendedPrivateKey","fromV1","Version","Crypto","KeyHeader","Kdf","KdfParams","Salt","N","R","P","DkLen","CipherText","MAC","IV","fromV3","fromEthSale","encseed","ethaddr","_assert","_events","_jsonRpcEngine","_ethJsonRpcMiddleware","_swappableObjProxy","_ethQuery","_network","_time","_network2","_fetchWithTimeout","_createMetamaskMiddleware","_createInfuraClient","_createJsonRpcClient","env","METAMASK_ENV","fetchWithTimeout","SECOND","defaultProviderConfigOpts","IN_TEST","NETWORK_TYPE_RPC","rpcUrl","nickname","METAMASK_DEBUG","RINKEBY","RINKEBY_CHAIN_ID","MAINNET","MAINNET_CHAIN_ID","defaultProviderConfig","ticker","defaultNetworkDetailsState","EIPS","NETWORK_EVENTS","NETWORK_DID_CHANGE","NETWORK_WILL_CHANGE","INFURA_IS_BLOCKED","INFURA_IS_UNBLOCKED","NetworkController","providerStore","previousProviderStore","networkStore","networkDetails","ComposedStore","_provider","_blockTracker","_providerProxy","_blockTrackerProxy","on","lookupNetwork","setInfuraProjectId","projectId","_infuraProjectId","initializeProvider","providerParams","_baseProviderParams","getProviderConfig","_configureProvider","getProviderAndBlockTracker","sendAsync","latestBlock","supportsEIP1559","setNetworkEIPSupport","verifyNetwork","isNetworkLoading","getNetworkState","setNetworkState","putState","EIPNumber","isSupported","clearNetworkDetails","initialNetwork","INFURA_PROVIDER_TYPES","_checkInfuraAvailability","networkVersion","currentNetwork","getEIP1559Compatibility","_NETWORK_TYPE_TO_ID_M","NETWORK_TYPE_TO_ID_MAP","configChainId","setRpcTarget","rpcPrefs","strict","ok","isPrefixedFormattedHexString","isSafeChainId","setProviderConfig","notStrictEqual","resetConnection","_switchNetwork","rollbackToPreviousProvider","getNetworkIdentifier","networkChanged","body","responseMessage","INFURA_BLOCKED_KEY","_configureInfuraProvider","_configureStandardProvider","info","networkClient","_setNetworkClient","networkMiddleware","metamaskMiddleware","providerFromEngine","_setProviderAndBlockTracker","setTarget","createSwappableProxy","createEventEmitterProxy","eventFilter","cs","secp256k1","MASTER_SECRET","HARDENED_OFFSET","BITCOIN_VERSIONS","public","HDKey","depth","index","_privateKey","_publicKey","chainCode","_fingerprint","parentFingerprint","serialize","hdkey","allocUnsafe","writeUInt32BE","writeUInt8","fingerprint","copy","hash160","sha","_identifier","identifier","equal","privateKeyVerify","publicKeyCreate","publicKey","readUInt32BE","publicKeyVerify","publicKeyConvert","privateKey","derive","path","split","hardened","childIndex","deriveChild","isHardened","indexBuffer","pk","zb","I","createHmac","IL","IR","hd","privateKeyTweakAdd","publicKeyTweakAdd","sign","signature","verify","xpriv","privateExtendedKey","xpub","publicExtendedKey","fromMasterSeed","seedBuffer","fromExtendedKey","base58key","keyBuffer","readUInt8","fromJSON","ethAbi","nacl","util","TYPED_MESSAGE_SCHEMA","properties","types","additionalProperties","required","primaryType","domain","TypedDataUtils","encodeData","useV4","encodedTypes","encodedValues","hashType","encodeField","keccak","lastIndexOf","parsedType","typeValuePairs","rawEncode","_type","_value","encodeType","deps","findTypeDependencies","dep","results","firstWord","hashStruct","sanitizeData","sanitizedData","EIP712Domain","typedData","parts","typedSignatureHash","toBuffer","schema","soliditySHA3","fill","recoverPublicKey","sig","sigParams","fromRpcSig","ecrecover","s","getPublicKeyFor","msgParams","hashPersonalMessage","padWithZeroes","myString","nacl_decodeHex","msgHex","msgBase64","decodeBase64","concatSig","rSig","fromSigned","sSig","vSig","bufferToInt","rStr","toUnsigned","sStr","vStr","stripHexPrefix","intToHex","normalize","personalSign","msgHash","ecsign","recoverPersonalSignature","sender","extractPublicKey","hashBuffer","signTypedDataLegacy","recoverTypedSignatureLegacy","encrypt","receiverPublicKey","ephemeralKeyPair","box","keyPair","pubKeyUInt8Array","msgParamsUInt8Array","decodeUTF8","nonceLength","encryptedMessage","secretKey","encodeBase64","ephemPublicKey","encryptSafely","dataWithPadding","padding","modVal","byteLength","padLength","repeat","paddedMsgParams","encryptedData","receiverPrivateKey","recieverPrivateKeyUint8Array","recieverEncryptionPrivateKey","fromSecretKey","decryptedMessage","open","output","encodeUTF8","decryptSafely","getEncryptionPublicKey","privateKeyUint8Array","encryptionPublicKey","signTypedMessage","signTypedData","signTypedData_v4","recoverTypedMessage","recoverTypedSignature","recoverTypedSignature_v4","ethersProviderAsMiddleware","providerAsMiddleware","_next","providerRes","send","providerFromMiddleware","json_rpc_engine_1","providerFromEngine_1","createBlockTrackerInspectorMiddleware","futureBlockRefRequests","_a","getCurrentBlock","checkForLatestBlock","createBlockRefMiddleware","clone_1","pify_1","cache_1","blockRefIndex","blockTagParamIndex","blockRef","childRequest","childRes","call","createFetchConfigFromReq","createFetchMiddleware","fetch","btoa","RETRIABLE_ERRORS","checkForHttpErrors","fetchRes","methodNotFound","createTimeoutError","parseResponse","originHttpHeaderKey","parsedUrl","URL","fetchUrl","protocol","hostname","port","pathname","search","normalizeUrlFromParsed","payload","originDomain","fetchParams","Accept","authString","encodedAuth","Authorization","duration","attempt","rawBody","text","fetchBody","_","errMsg","phrase","createBlockCacheMiddleware","emptyValues","BlockCacheStrategy","cache","getBlockCacheForPayload","_payload","blockNumberHex","blockCache","newCache","requestedBlockNumber","cacheIdentifierForPayload","canCacheResult","canCacheRequest","canCache","blockTagForPayload","clearBefore","oldBlockHex","oldBlockNumber","num","strategies","perma","fork","skipCache","cacheTypeForPayload","strategy","blockTag","cacheResult","createBlockRefRewriteMiddleware","_res","createInflightCacheMiddleware","inflightRequests","cacheId","activeRequestHandlers","promise","_resolve","deferredPromise","handledRes","createActiveRequestHandler","handleActiveRequest","createRetryOnEmptyMiddleware","blockRefNumber","isNaN","latestBlockNumberHex","childResponse","maxRetries","asyncFn","retry","attemptResponse","__createBinding","o","m","k","k2","__setModuleDefault","__importStar","hasOwnProperty","createWalletMiddleware","sigUtil","resemblesAddress","getAccounts","processDecryptMessage","processEncryptionPublicKey","processEthSignMessage","processPersonalMessage","processTransaction","processSignTransaction","processTypedMessage","processTypedMessageV3","processTypedMessageV4","eth_coinbase","eth_sendTransaction","methodNotSupported","validateAndNormalizeKeyholder","eth_signTransaction","eth_sign","extraParams","eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4","personal_sign","firstParam","secondParam","eth_getEncryptionPublicKey","eth_decrypt","personal_ecRecover","signerAddress","normalizedAccounts","_address","normalizedAddress","globalObject","BigNumber","isNumeric","mathceil","ceil","mathfloor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","bitFloor","coeffToString","a","z","j","charCodeAt","compare","x","y","b","xc","yc","l","intCheck","isOdd","toExponential","charAt","toFixedPoint","len","zs","clone","configObject","div","convertBase","parseNumeric","pow2_53","random53bitInt","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","valueOf","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabet","caseChanged","isNum","_isBigNumber","indexOf","substring","round","DEBUG","toUpperCase","format","rm","c0","ne","maxOrMin","normalise","pop","sd","d","ni","rd","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","getRandomValues","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","arguments","minimum","dp","rand","Uint32Array","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","callerIsToString","multiply","base","temp","xlo","xhi","carry","klo","khi","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","NaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","toFraction","md","d0","d1","d2","exp","n0","n1","toPrecision","define","amd","self","Constants","Client","client_1","constants_1","EXTERNAL","CANCELLABLE_INTERVAL","DEFAULT_INTERVAL","controllers_1","bignumber_js_1","ethers_1","mapValues_1","cloneDeep_1","types_1","utils_1","safelyExecute","SmartTransactionsController","BaseController","onNetworkStateChange","getNonceLock","confirmExternalTransaction","trackMetaMetricsEvent","defaultConfig","interval","CHAIN_IDS","ETHEREUM","clientId","supportedChainIds","defaultState","smartTransactionsState","smartTransactions","userOptIn","fees","liveness","estimatedGas","txData","approvalTxData","ethersProvider","ethers","providers","Web3Provider","initialize","initializeSmartTransactionsForChainId","newProvider","configure","checkPoll","subscribe","fetchOptions","handleFetch","currentSmartTransactions","isSmartTransactionPending","timeoutHandle","poll","stop","clearInterval","updateSmartTransactions","setInterval","setOptInState","trackStxStatusChange","smartTransaction","prevSmartTransaction","_b","updatedSmartTransaction","swapMetaData","sensitiveProperties","stx_status","token_from_address","token_from_symbol","sourceTokenSymbol","token_to_address","token_to_symbol","destinationTokenSymbol","processing_time","getStxProcessingTime","stx_enabled","stx_user_opt_in","event","category","isNewSmartTransaction","smartTransactionUuid","currentIndex","findIndex","stx","updateSmartTransaction","cancelledNonceIndex","_c","historifiedSmartTransaction","nextSmartTransactions","SmartTransactionStatuses","SUCCESS","REVERTED","confirmed","currentSmartTransaction","nextSmartTransaction","confirmSmartTransaction","transactionsToUpdate","fetchSmartTransactionsStatus","statusMetadata","minedHash","blockData","getBlock","txReceipt","updatedTxParams","originalTxMeta","uuids","URLSearchParams","getAPIRequestURL","APIType","BATCH_STATUS","calculateStatus","nonceLock","unsignedTransaction","unsignedTransactionWithNonce","addNonceToTransaction","GET_FEES","approveTxParams","unsignedApprovalTransactionWithNonce","ESTIMATE_GAS","pending_txs","signedTransactions","signedCanceledTransactions","SUBMIT_TRANSACTIONS","rawTxs","rawCancelTxs","preTxBalance","preTxBalanceBN","getBalance","utils","hexlify","PENDING","cancellable","CANCEL","CANCELLED_USER_CANCELLED","LIVENESS","lastBlock","addressFrom","_exportNames","_constants","_node","_types","ownKeys","object","enumerableOnly","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","target","source","getOwnPropertyDescriptors","defineProperties","_default","manifest","init","getSettings","fn","eventEmitter","off","removeListener","uiResponse","blockchainGetAccountBalanceHistory","blockchainGetCurrentFiatRates","blockchainGetFiatRatesForTimestamps","blockchainDisconnect","blockchainEstimateFee","blockchainGetTransactions","blockchainSetCustomBackend","blockchainSubscribe","blockchainSubscribeFiatRates","blockchainUnsubscribe","blockchainUnsubscribeFiatRates","customMessage","requestLogin","cardanoGetAddress","useEventListener","listenerCount","UI","ADDRESS_VALIDATION","cardanoGetNativeScriptHash","cardanoGetPublicKey","cardanoSignTransaction","cipherKeyValue","composeTransaction","ethereumGetAddress","ethereumGetPublicKey","ethereumSignMessage","ethereumSignTransaction","ethereumSignTypedData","ethereumVerifyMessage","getAccountInfo","getDeviceState","getFeatures","liskGetAddress","liskGetPublicKey","liskSignMessage","liskSignTransaction","liskVerifyMessage","nemGetAddress","nemSignTransaction","pushTransaction","rippleGetAddress","rippleSignTransaction","signMessage","signTransaction","stellarGetAddress","stellarSignTransaction","tezosGetAddress","tezosGetPublicKey","tezosSignTransaction","eosGetPublicKey","eosSignTransaction","binanceGetAddress","binanceGetPublicKey","binanceSignTransaction","verifyMessage","resetDevice","wipeDevice","applyFlags","applySettings","backupDevice","changePin","firmwareUpdate","recoveryDevice","getCoinInfo","rebootToBootloader","dispose","cancel","renderWebUSBButton","disableWebUSB","fromEntries","metamask_v4_compat","SignTypedDataVersion","V4","_sigUtil$TypedDataUti","domain_separator_hash","message_hash","__exportStar","endowmentPermissionBuilders","permissionRpcMethods","endowments_1","hooks","missingHookNames","expectedHookNames","hookName","UNSUPPORTED_RPC_METHODS","handlerMap","implementation","hookNames","_rpcMethods","selectHooks","allHandlers","methodName","methodNames","flatten","EventEmitter","readCryptoHDKeyOrCryptoAccount","memStore","sync","reading","CryptoHDKey","fromCBOR","resetState","CryptoAccount","submitCryptoHDKey","submitCryptoAccount","cancelSync","requestSignature","toUR","getRequestId","h","u","requestId","cbor","title","description","ETHSignature","submitSignature","cancelRequestSignature","instance","_version","BaseKeyring","getInteraction","getMemStore","forgetDevice","perPage","currentAccount","initialized","xfp","hdPath","indexes","hdk","paths","cancelSignRequest","deserialize","DataType","typedTransaction","getMessageToSign","_pathFromAddress","common","v4","EthSignRequest","constructETHRequest","g","TransactionFactory","fromTxData","MetaMaskKeyring","ex","baseEthKeyring","events","obsStore","bcUrRegistryEth","rlp","MetamaskInteractionProvider","cryptoHDKey","cryptoAccount","signRequest","requestTitle","requestDescription","ur","requestIdBuffer","signPayload","ethSignature","tx$1","dataType","messageToSign","ethSignRequest","txJson","delay","loadFromMock3Box","onSyncDone","openSpace","spaceName","newDataAtKey","saveToMock3Box","logout","spaces","metamask","getPendingNonce","getPendingTransactionByHash","eth_syncing","web3_clientVersion","_pending","createPendingNonceMiddleware","createPendingTxMiddleware","_slicedToArray2","_regenerator","_asyncToGenerator2","_classCallCheck2","_createClass2","localstorage","IPFS","OrbitDB","Pubsub","AccessControllers","_require","LegacyIPFS3BoxAccessController","ThreadAccessController","ModeratorAccessController","addAccessController","AccessController","globalIPFS","globalOrbitDB","ThreeId","PublicStore","PrivateStore","Verified","Space","idUtils","API","ACCOUNT_TYPES","ADDRESS_SERVER_URL","address_server_url","PINNING_NODE","pinning_node","PINNING_ROOM","pinning_room","IPFS_OPTIONS","ipfs_options","ORBITDB_OPTS","orbitdb_options","Box","threeId","ethereumProvider","ipfs","_3id","_web3provider","_ipfs","_serverUrl","addressServer","_onSyncDoneCB","_boxSynced","verified","spacesPubSubMessages","_openBox","_getVerifiedAccounts","_profileGraphQL","_getProfileOrbit2","_listSpaces","_getConfig","_getThreadByAddress","_getThread","_getSpace","_getProfiles","_getProfile","_logout","_close","_ensurePinningNodeConnected2","_readAddressLink2","_readAddressLinks2","_deleteAddressLink2","_linkCIDExists2","_writeAddressLink2","_linkProfile2","_listAddressLinks","_isAccountLinked","_isAddressLinked","_removeAddressLink","_linkAccount","_linkAddress","_publishRootStore2","_openSpace","_createRootStore2","_load2","mark","_callee3","rootStoreName","rootStoreAddress","onNewPeer","_ref2","_ref3","pubStoreAddress","privStoreAddress","syncPromises","hasResponse","spaceMessageFilterActive","filterTimeSet","onMessageRes","_this","_args3","wrap","_context3","prev","muportFingerprint","pinningNode","swarm","connect","t0","t1","t2","orbitPath","getOdbId","t3","sent","t4","directory","identity","createInstance","_orbitdb","getKeyringBySpaceName","getPublicKeys","signingKey","feed","accessController","write","skipManifest","_rootStore","t5","t6","t7","_pubsub","_ref","_callee","topic","peer","_context","publish","odbAddress","did","DID","_x2","_x3","_linkProfile","_ensurePinningNodeConnected","_load","_ref4","_callee2","promises","_context2","_sync","numEntries","_x4","_x5","_createRootStore","_callee5","privOdbAddress","pubOdbAddress","pinAddressLinks","_this2","_context5","load","collect","_publishRootStore","_ref5","_callee4","_context4","dag","_x6","_x7","_x8","_callee6","_args6","_context6","numEntriesMessages","isAddressLinked","linkAddress","abrupt","_x9","syncDone","_callee7","addressToken","_context7","signJWT","fetchJson","address_token","statusCode","_x10","_callee8","link","_args8","_context8","proof","_writeAddressLink","_callee9","_args9","_context9","_callee10","deleteToken","_context10","expiresIn","delete_token","_deleteAddressLink","_x11","_callee11","links","linksQuery","_args11","_context11","_readAddressLinks","_callee12","_args12","_context12","_callee13","_context13","list","linkId","_callee14","linkData","consent","_context14","managementAddress","_readAddressLink","getLinkConsent","noLink","_callee15","_context15","put","toBaseEncodedString","_linkCIDExists","_x12","_callee16","cid","linkEntries","_context16","_x13","_callee17","_context17","remove","_x14","_callee19","resolveLinks","_this3","_context19","_ref6","_callee18","_context18","recoverPersonalSign","_x15","_callee20","_context20","_x16","_callee21","isThread","_this4","_context21","pubsub","peers","thread","_x17","_x18","_callee22","_context22","disconnect","_callee23","_context23","close","muportDID","_callee24","metadata","_args24","_context24","useCacheService","getProfile","profileServer","_getProfileOrbit","_x19","_callee25","addressArray","_args25","_context25","getProfiles","_x20","_callee26","_args26","_context26","getSpace","_x21","_x22","_callee27","space","firstModerator","members","_args27","_context27","getThread","_x23","_x24","_x25","_x26","_callee28","_args28","_context28","getThreadByAddress","_x27","_callee29","_args29","_context29","getConfig","_x28","_callee30","_args30","_context30","listSpaces","_x29","_callee32","orbitdb","publicStore","rootStore","readyPromise","profileEntry","closeAll","_args32","_context32","isMuportDID","getRootStoreAddress","initIPFS","iframeStore","ipfsOptions","_x","_y","_z","_ref7","_callee31","_context31","_x30","_callee33","_args33","_context33","profileGraphQL","graphqlServer","_x31","_callee34","_context34","getVerifiedAccounts","_x32","_callee35","_args35","_context35","getIdFromEthAddress","_x33","_x34","isLoggedIn","_x35","_x36","_x37","_initIPFS","_callee36","_context36","__assign","helpers_1","core_1","core_2","applyOperation","applyPatch","applyReducer","getValueByPointer","validate","helpers_2","JsonPatchError","PatchError","deepClone","_deepClone","escapePathComponent","unescapePathComponent","beforeDict","WeakMap","Mirror","observers","ObserverInfo","observer","unobserve","root","observe","mirror","getMirror","observerInfo","getObserverFromMirror","dirtyCheck","fastCheck","addEventListener","patches","removeObserverFromMirror","removeEventListener","invertible","_generate","newKeys","_objectKeys","oldKeys","deleted","oldVal","op","newVal","tree1","tree2","core","helpers_3","CID","base64","hex","fromHexString","isCryptographicIPNS","multihash","mh","encodes","skynet","toUint8Array","bytes","toV1","ipns","decodes","hexMultiHash","fromUint8Array","multibase","varint","names","TextDecoder","textDecoder","codes","Uint8Array","isBuffer","byteOffset","toB58String","fromB58String","encoded","code","isValidCode","hashfn","coerceCode","isAppCode","dnsLabel","b36","TypeError","intTable","codecNameToCodeVarint","uint8ArrayConcat","constants","print","multicodecStrOrCode","varintUint8ArrayEncode","prefixedData","codecName","getName","getNumber","getCode","getCodeVarint","getVarint","license","repository","author","email","engines","scripts","dependencies","np","release","files","keywords","devDependencies","ava","codecov","commander","express","husky","nyc","pify","sinon","snyk","standard","expr","w","plural","msAbs","isPlural","exec","parseFloat","long","fmtLong","fmtShort","objectToString","isObjectLike","rng","bytesToUuid","offset","rnds","ii","crypt","bin","encoding","stringToBytes","bytesToWords","FF","_ff","GG","_gg","HH","_hh","II","_ii","aa","bb","cc","dd","endian","_blocksize","_digestsize","digestbytes","wordsToBytes","asBytes","asString","bytesToString","bytesToHex","validateGenericEvent","validateTrackEvent","groupId","validateGroupEvent","validateScreenEvent","previousId","validateAliasEvent","genericValidationRules","integrations","rule","ethjsUtil","MAX_VALUE","arraycopy","src","srcPos","dest","destPos","dkLen","progressCallback","tickCallback","XY","V","B32","Int32Array","_X","B","totalOps","currentOp","current","total","percent","smix","Bi","Yi","blockmix_salsa8","blockxor","readUInt32LE","BY","salsa20_8","bi","S","Si","D","Di","fetchMiddleware","blockProvider","_ethBlockTracker","PollingBlockTracker","blockTrackerOpts","inTest","createChainIdMiddleware","pollingInterval","infuraMiddleware","_ethJsonRpcInfura","maxAttempts","infuraProvider","createNetworkAndChainIdMiddleware","networkId","eth_chainId","net_version","base58","sha256x2","base58str","versionLength","endPos","newChecksum","isValid","createEncoder","createDecoder","createValidator","createKeccakHash","MAX_INTEGER","TWO_POW256","KECCAK256_NULL_S","SHA3_NULL_S","KECCAK256_NULL","SHA3_NULL","KECCAK256_RLP_ARRAY_S","SHA3_RLP_ARRAY_S","KECCAK256_RLP_ARRAY","SHA3_RLP_ARRAY","KECCAK256_RLP_S","SHA3_RLP_S","KECCAK256_RLP","SHA3_RLP","zeros","zeroAddress","setLengthLeft","setLength","right","setLengthRight","unpad","stripZeros","first","isHexString","padToEven","intToBuffer","isBN","toArrayLike","toArray","fromTwos","toTwos","bits","sha3","ripemd160","padded","rlphash","sanitize","pubToAddress","recovery","senderPubKey","recover","toRpcSig","isValidAddress","isZeroAddress","isValidChecksumAddress","generateAddress","isPrecompiled","isHexPrefixed","isValidSignature","homestead","SECP256K1_N_DIV_2","SECP256K1_N","baToJSON","ba","array","fields","raw","_fields","label","getter","setter","allowZero","allowLess","paramsWithoutBlockTag","json_stable_stringify_1","skipBlockRef","simpleParams","processFn","promiseModule","errorFirst","multiArgs","exclude","include","excludeMain","getPrototypeOf","ETH_ABI_LATTICE_FW_TYPE_MAP","MAX_CHAIN_ID_BYTES","HANDLE_LARGER_CHAIN_ID","VERSION_BYTE","REQUEST_TYPE_BYTE","signingSchema","responseMsgs","responseCodes","messageConstants","ethMsgProtocol","encReqCodes","deviceCodes","decResLengths","addressSizes","ENC_MSG_LEN","BASE_URL","BIP_CONSTANTS","AES_IV","ADDR_STR_LEN","getFwVersionConst","ASCII_REGEX","empty","getAddresses","getWallets","addAbiDefs","getKvRecords","getAbiRecords","removeAbiRecords","DES_RES_EXTRADATA_LEN","CONNECT","ENCRYPTED_REQUEST","FINALIZE_PAIRING","GET_ADDRESSES","ADD_PERMISSION","SIGN_TRANSACTION","GET_WALLETS","ADD_PERMISSION_V0","ADD_ABI_DEFS","GET_KV_RECORDS","ADD_KV_RECORDS","REMOVE_KV_RECORDS","GET_ABI_RECORDS","REMOVE_ABI_RECORDS","TEST","NOT_PAIRED","PAIRED","BTC","ETH","RESP_SUCCESS","RESP_ERR_INVALID_MSG","RESP_ERR_UNSUPPORTED_VER","RESP_ERR_DEV_BUSY","RESP_ERR_USER_TIMEOUT","RESP_ERR_USER_DECLINED","RESP_ERR_PAIR_FAIL","RESP_ERR_PAIR_DISABLED","RESP_ERR_PERMISSION_DISABLED","RESP_ERR_INTERNAL","RESP_ERR_GCE_TIMEOUT","RESP_ERR_WRONG_WALLET","RESP_ERR_DEV_LOCKED","RESP_ERR_DISABLED","RESP_ERR_ALREADY","RESP_ERR_INVALID_EPHEM_ID","BTC_TRANSFER","ETH_TRANSFER","ERC20_TRANSFER","ETH_MSG","EXTRA_DATA","GENERAL_SIGNING","PURPOSES","BTC_LEGACY","BTC_WRAPPED_SEGWIT","BTC_SEGWIT","COINS","BTC_TESTNET","EIP712_ABI_LATTICE_FW_TYPE_MAP","bool","uint8","uint16","uint24","uint32","uint40","uint48","uint56","uint64","uint72","uint80","uint88","uint96","uint104","uint112","uint120","uint128","uint136","uint144","uint152","uint160","uint168","uint176","uint184","uint192","uint200","uint208","uint216","uint224","uint232","uint240","uint248","uint256","int8","int16","int24","int32","int40","int48","int56","int64","int72","int80","int88","int96","int104","int112","int120","int128","int136","int144","int152","int160","int168","int176","int184","int192","int200","int208","int216","int224","int232","int240","int248","int256","uint","bytes1","bytes2","bytes3","bytes4","bytes5","bytes6","bytes7","bytes8","bytes9","bytes10","bytes11","bytes12","bytes13","bytes14","bytes15","bytes16","bytes17","bytes18","bytes19","bytes20","bytes21","bytes22","bytes23","bytes24","bytes25","bytes26","bytes27","bytes28","bytes29","bytes30","bytes31","bytes32","string","tuple1","tuple2","tuple3","tuple4","tuple5","tuple6","tuple7","tuple8","tuple9","tuple10","tuple11","tuple12","tuple13","tuple14","tuple15","tuple16","tuple17","SIGN_PERSONAL","enumIdx","TYPED_DATA","rawDataMaxLen","typeCodes","GET_ADDR_FLAGS","SECP256K1_PUB","ED25519_PUB","SIGNING","HASHES","NONE","KECCAK256","SHA256","CURVES","SECP256K1","ED25519","ENCODINGS","ASCII","HEX","SOLANA","extraDataFrameSz","extraDataMaxFrames","legacy","reqMaxDataSz","ethMaxGasPrice","addrFlagsAllowed","ethMaxDataSz","ethMaxMsgSz","eip712MaxTypeParams","abiCategorySz","abiMaxRmv","genericSigning","baseReqSz","baseDataSz","hashTypes","curveTypes","encodingTypes","getAddressFlags","allowBtcLegacyAndSegwitAddrs","contractDeployKey","kvActionsAllowed","kvKeyMaxStrSz","kvValMaxStrSz","kvActionMaxNum","kvRemoveMaxNum","personalSignHeaderSz","allowedEthTxTypesVersion","allowedEthTxTypes","totalExtraEthTxDataSz","ethMsgPreHashAllowed","prehashAllowed","varAddrPathSzAllowed","eip712Supported","bitwise_1","buffer_1","superagent_1","bitcoin_1","sha_1","index_1","ethereum_1","ethereumAbi_1","genericSigning_1","util_1","EMPTY_WALLET_UID","baseUrl","stateData","ephemeralPub","deviceId","isPaired","activeWallets","uid","capabilities","external","_unpackAndApplyStateData","getP256KeyPair","getStateData","_packStateData","_cb","promisifyCb","param","_buildRequest","pubKeyBytes","_request","_handleConnect","_getActiveWallet","pair","pairingSecret","nameBuf","preImage","derSig","toPaddedDER","errStr","_handlePair","hasActiveWallet","TEST_DATA_SZ","testID","writeUInt16BE","decrypted","_handleEncResponse","startPath","flag","fwConstants","fwVersion","isValidAssetPath","sz","getActiveWallet","flagVal","flagBits","nibble","read","countBits","byte","parsedRes","_handleGetAddresses","cachedData","nextCode","currency","reqPayload","extraDataPayloads","buildEthereumTxRequest","buildEthereumMsgRequest","buildBitcoinTxRequest","buildGenericSigningMsgRequest","hasExtraPayloads","_handleSign","defs","abiPayload","defsToAdd","MAX_ABI_DEFS","buildAddAbiPayload","writeUInt16LE","responseCode","fetched","startIdx","numRemaining","numFetched","records","numReturned","packedDef","ABI_DEF_SZ","unpackAbiDef","cbData","numRemoved","numTried","sigs","sigsSlice","sigBuf","ensureHexBuffer","rmv","addPermissionV0","timeWindow","decimals","asset","limitBuf","start","writeUInt32LE","nTotal","nFetched","caseSensitive","keySz","valSz","addKvRecords","removeKvRecords","ids","forceRefresh","_resetActiveWallets","_handleGetWallets","_getSharedSecret","getPublic","_getEphemId","secret","_buildEncRequest","enc_request_code","ephemId","payloadPreCs","payloadBuf","newEncPayload","aes256_encrypt","newPayload","request_code","L","preReq","encReqCode","post","parsed","parseLattice1Response","deviceBusy","wrongWallet","invalidEphemId","canRetry","_replaceWalletUID","isTimeout","errno","pairingStatus","getP256KeyPairFromPub","encRes","encData","aes256_decrypt","toCheck","csCheck","addrData","addrs","arePubkeys","pubBytes","isEmpty","every","addrBytes","walletUID","equals","currencyType","changeRecipient","changeVersion","getAddressFormat","origData","changePath","changePubkeyhash","getBitcoinAddress","pubkeys","sigStart","sigEnd","pubStart","PUBKEY_PREFIX_LEN","pubEnd","preSerializedData","recipient","changeData","prevOuts","pubkey","signerPath","serializedTx","serializeTx","preImageTxHash","txHashPre","parseDER","ethAddr","buildEthRawTx","sigWithV","hashTransaction","signer","validatedSig","validateEthereumMsgResponse","parseGenericSigningResponse","curveType","omitPubkey","unpacked","internalWallet","externalWallet","ephemeralPubBytes","fwVersionBytes","privKeyBytes","LE","pb","parseAbi","skipErrors","abiParsers","API_BASE_URL","BSC","SmartTransactionCancellationReason","cancellationReasonToStatusMap","SmartTransactionMinedTx","WOULD_REVERT","CANCELLED_WOULD_REVERT","TOO_CHEAP","CANCELLED_TOO_CHEAP","DEADLINE_MISSED","CANCELLED_DEADLINE_MISSED","INVALID_NONCE","CANCELLED_INVALID_NONCE","USER_CANCELLED","isSmartTransactionStatusResolved","fast_json_patch_1","lodash_1","apiType","chainIdDec","RESOLVED","cancellations","minedTx","NOT_MINED","cancellationReason","NOT_CANCELLED","isCancellation","cancellation","UNKNOWN","newState","_shortHistory","newDocument","shallow","smartTransactionSubmittedtime","error_details","baseClone","CLONE_DEEP_FLAG","baseAssignValue","baseForOwn","baseIteratee","iteratee","_api","_misc","_params","_account","_device","_management","_bitcoin","_binance","_cardano","_coinInfo","_eos","_ethereum","_nem","_ripple","_stellar","_tezos","_blockchain","_transactions","CARDANO","TRANSPORT","POPUP","NETWORK","IFRAME","ERRORS","DEVICE","BLOCKCHAIN","BLOCKCHAIN_EVENT","RESPONSE_EVENT","TRANSPORT_EVENT","DEVICE_EVENT","UI_EVENT","CORE_EVENT","_interopRequireWildcard","_getRequireWildcardCache","nodeInterop","cacheBabelInterop","cacheNodeInterop","newObj","hasPropertyDescriptor","desc","_PopupManager","iframe","_button","_message","_builder2","_ConnectSettings","_debug","_settings","_popupManager","_log","initLog","initPopupManager","pm","CLOSED","postMessage","handleMessage","messageEvent","parseMessage","messagePromises","BOOTSTRAP","LOADED","initPromise","ERROR","settings","TypedError","lazyLoad","enabled","UiMessage","IFRAME_FAILURE","popup","CALL","unlock","customMessageResponse","CUSTOM_MESSAGE_RESPONSE","className","webusbSrc","customMessageListener","CUSTOM_MESSAGE_REQUEST","loginChallengeListener","LOGIN_CHALLENGE_REQUEST","LOGIN_CHALLENGE_RESPONSE","asyncChallenge","DISABLE_WEBUSB","SubjectMetadataController","stateMetadata","subjectMetadata","persist","BaseControllerV2","messenger","subjectCacheLimit","hasPermissions","getTrimmedState","subjectHasPermissions","subjectsWithoutPermissionsEcounteredSinceStartup","clearState","clear","_draftState","addSubjectMetadata","newMetadata","extensionId","iconUrl","originToForget","cachedOrigin","draftState","trimMetadataState","newSubjectMetadata","MethodNames","hasSpecificationType","findCaveat","nanoid_1","invoker","nanoid","date","caveatType","specification","expectedType","network_access_1","networkAccessEndowmentBuilder","decorateWithCaveats","errors_1","caveatSpecifications","decorated","UnrecognizedCaveatTypeError","__rest","propertyIsEnumerable","PermissionController","deep_freeze_strict_1","immer_1","Caveat_1","Permission_1","permission_middleware_1","utils_2","controllerName","permissionSpecifications","_unrestrictedMethods","_caveatSpecifications","validatePermissionSpecifications","_permissionSpecifications","registerMessageHandlers","createPermissionMiddleware","getPermissionMiddlewareFactory","executeRestrictedMethod","_executeRestrictedMethod","getRestrictedMethod","isUnrestrictedMethod","getPermissionSpecification","getCaveatSpecification","innerTargetKey","hasProperty","messagingSystem","registerActionHandler","targetName","getEndowments","getSubjectNames","getPermissions","hasPermission","revokeAllPermissions","getTypedPermissionSpecification","requestingOrigin","failureError","EndowmentPermissionDoesNotExistError","getTargetKey","getPermission","UnrecognizedSubjectError","revokePermissions","subjectsAndPermissions","PermissionDoesNotExistError","deletePermission","revokePermissionForAllSubjects","hasCaveat","addCaveat","caveatValue","CaveatAlreadyExistsError","setCaveat","CaveatDoesNotExistError","validateCaveat","caveatIndex","existingCaveat","validateModifiedPermission","updatePermissionsByCaveat","targetCaveatType","mutator","targetCaveat","mutatorResult","deleteCaveat","removeCaveat","validatePermission","namespacedTargetsWithoutWildcard","wildCardMatch","segments","grantPermissions","approvedPermissions","preserveExistingPermissions","InvalidSubjectIdentifierError","requestedTarget","approvedPermission","InvalidApprovedPermissionError","constructCaveats","invokePermissionValidator","performCaveatValidation","setValidatedPermissions","InvalidCaveatsPropertyError","seenCaveatTypes","ForbiddenCaveatError","DuplicateCaveatError","castDraft","requestedCaveats","caveatArray","requestedCaveat","isNonEmptyArray","isPlainObject","InvalidCaveatError","InvalidCaveatFieldsError","InvalidCaveatTypeError","CaveatMissingValueError","isValidJson","CaveatInvalidJsonError","requestedPermissions","validateRequestedPermissions","permissionsRequest","requestUserApproval","approvedRequest","validateApprovedPermissions","originalMetadata","internalError","newOrigin","mutatedId","originalOrigin","mutatedOrigin","hasApprovalRequest","PermissionsRequestNotFoundError","_rejectPermissionsRequest","userRejectedRequest","unauthorized","Endowment","endowmentGetter","requestPermissions_1","getPermissions_1","requestPermissionsHandler","getPermissionsHandler","ExternalResourceController","obs_store_1","getUnauthorizedMessage","storageKey","requiredFields","initialResources","computeState","getResources","setResources","resources","clearResources","deleteResourcesFor","fromDomain","newResources","resource","getAllResources","newResource","processNewResource","existingResource","resourceNotFound","requiredField","handleRpcRequest","arg","SnapController","SnapStatusEvent","SnapStatus","SNAP_PREFIX_REGEX","SNAP_PREFIX","valid_1","json_schemas_1","TRUNCATED_SNAP_PROPERTIES","snapErrors","snaps","snapStates","disabledGuard","serializedSnap","snapStatusStateMachineConfig","initial","installing","states","running","cond","stopped","crash","crashed","closeAllConnections","executeSnap","getRpcMessageHandler","terminateAllSnaps","terminateSnap","endowmentPermissionNames","npmRegistryUrl","idleTimeCheckInterval","maxIdleTime","maxRequestTime","snap","memo","_closeAllConnections","_endowmentPermissionNames","_executeSnap","_getRpcMessageHandler","_onUnhandledSnapError","_onUnresponsiveSnap","_terminateSnap","_terminateAllSnaps","_idleTimeCheckInterval","_lastRequestMap","_maxIdleTime","_maxRequestTime","_pollForLastRequestStatus","_rpcHandlerMap","_snapsBeingAdded","_npmRegistryUrl","getSnapState","updateSnapState","_timeoutForLastRequestStatus","_stopSnapsLastRequestPastMax","snapId","timeSince","stopSnap","_transitionSnapState","_stopSnap","addSnapError","snapStatus","nextStatus","_startSnap","sourceCode","enableSnap","disableSnap","isRunning","setNotRunning","getTruncated","serialized","newSnapState","snapError","internalID","snapIds","removeSnap","removeSnaps","getPermittedSnaps","permittedSnaps","requestedSnaps","permissionName","isValidSnapVersion","processRequestedSnap","existingSnap","authorize","_snapId","validateSnapId","_add","SnapIdPrefixes","snapData","endowments","_getEndowments","allEndowments","svgIcon","validateSnapJsonFile","NpmSnapFileNames","Manifest","_fetchSnap","initialPermissions","snapsState","_fetchLocalSnap","npm","_fetchNpmSnap","packageName","fetchNpmSnap","localhostUrl","manifestUrl","LOCALHOST_HOSTNAMES","_manifest","fetchContent","location","filePath","iconPath","validateSnapShasum","destroy","unsubscribe","existingHandler","rpcHandler","startSnap","_recordSnapRpcRequest","timeoutPromise","race","validateNpmSnapPackageJson_js_1","validateSnapManifest_js_1","fileName","content","errors","PackageJson","allErrors","errorObject","instancePath","validateNpmSnapManifest","validateNpmSnap","ProgrammaticallyFixableSnapError","SnapValidationFailureReason","getSnapSourceShasum","PROPOSED_NAME_REGEX","DEFAULT_NPM_REGISTRY","crypto_1","concat_stream_1","fast_deep_equal_1","gunzip_maybe_1","pump_1","readable_web_to_node_stream_1","tar_stream_1","SVG_MAX_BYTE_SIZE","SVG_MAX_BYTE_SIZE_TEXT","contentType","fetchFunction","ExpectedSnapFiles","SnapFileNameFromKey","packageJson","registryUrl","tarballResponse","actualVersion","_d","packageMetadata","targetVersion","latest","tarballUrlString","dist","tarball","maybeUrl","isValidUrl","endsWith","newRegistryUrl","newTarballUrl","fetchNpmTarball","snapFiles","getReader","ReadableWebToNodeStream","getResponseBodyStream","extractStream","extract","jsFileCache","header","entryStream","headerName","headerType","NPM_TARBALL_PATH_PREFIX","pipe","resume","_e","bundlePath","createTarballExtractionStream","errorPrefix","validatedManifest","validatedPackageJson","packageJsonName","packageJsonVersion","packageJsonRepository","manifestPackageName","manifestPackageVersion","manifestRepository","NameMismatch","VersionMismatch","RepositoryMismatch","shasum","ShasumMismatch","setupMultiplex","AbstractExecutionService","object_multiplex_1","setupSnapProvider","unresponsivePollingInterval","unresponsiveTimeout","_snapRpcHooks","jobs","snapToJobMap","jobToSnapMap","_messenger","_unresponsivePollingInterval","_unresponsiveTimeout","_timeoutForUnresponsiveMap","jobId","terminate","workerId","job","_initJob","_mapSnapAndJob","streams","_command","_pollForJobStatus","_createSnapHooks","rpcEngine","_removeSnapHooks","_getJobStatus","rej","_getJobForSnap","_getSnapForJob","_removeSnapAndJobMapping","connectionStream","streamName","mux","WebWorkerExecutionService","post_message_stream_1","snap_workers_1","json_rpc_middleware_stream_1","AbstractExecutionService_1","workerUrl","workers","_setWorker","workerWrapper","newWorkerState","_deleteWorker","stream","destroyed","worker","Worker","ev","_initWorkerStreams","jsonRpcConnection","createStreamMiddleware","command","workerStream","WorkerParentPostMessageStream","createStream","SNAP_STREAM_NAMES","COMMAND","JSON_RPC","_connection","_addEthereumChain","_ethAccounts","_getProviderState","_logWeb3ShimUsage","_requestAccounts","_sendMetadata","_switchEthereumChain","_watchAsset","restrictedMethodPermissionBuilders","permittedMethods","permitted_1","restricted_1","builders","formatTxMetaForRpcResult","storages","plugins","createStore","graphQLRequest","verifier","GRAPHQL_SERVER_URL","graphql_server_url","PROFILE_SERVER_URL","profile_server_url","_getRootStoreAddress","serverUrl","_args","_args2","encodeURIComponent","blocklist","getSpaceDID","_getSpaceDID","conf","_args4","_args5","_args7","addressList","didList","_args10","verifs","verifyDID","proof_did","proof_github","verifyGithub","github","proof_twitter","verifyTwitter","twitter","ethereum_proof","verifyEthereum","ethereum","KeyValueStore","Thread","sha256Multihash","throwIfUndefined","throwIfNotEqualLenArrays","OrbitDBAddress","nameToSpaceName","namesTothreadName","threadName","ensureConnected","_name","_ensureConnected","_store","_activeThreads","_subscribedThreads","_unsubscribeThread","_subscribeThread","_joinThreadByAddress","_joinThread","_open","consentNeeded","spaceAddress","hasNumEntries","syncSpace","_db","initKeyringByName","consentCallback","del","_syncSpacePromise","publicStoreReducer","privateStoreReducer","subscribeFn","noAutoSub","subscribeThread","getSubDID","_getThreadAddress","threadSpace","threadKey","allEntries","threads","_all","_remove","_setMultiple","_set","_getMetadata","_get","PREFIX","getMetadata","setMultiple","prefixedKeys","newLog","newAll","keyring","_all2","_remove2","_setMultiple2","_set2","_getMetadata2","_get2","SALT","getDBSalt","dbKey","encryptEntry","symEncrypt","blockSize","blockDiff","pad","decryptEntry","symDecrypt","_args14","dbKeys","encryptedEntries","decEntry","_args19","_decEntry","_fetchText","_fetchJson","_getLinkConsent","_recoverPersonalSign","Multihash","HTTPError","getMessageConsent","safeEthSend","personalSig","openBoxConsent","openSpaceConsent","toDID","fetchText","arr1","arr2","_possibleConstructorReturn2","_getPrototypeOf2","_inherits2","ProfileStore","_KeyValueStore","linkProfile","Log","IFRAME_STORE_VERSION","iframe_store_version","iframe_store_url","IFRAME_STORE_URL","EXPERIMENTAL","preload","Bootstrap","syncLocal","sortFn","Sorting","SortByEntryHash","muport_ipfs_host","MUPORT_IPFS_HOST","muport_ipfs_port","MUPORT_IPFS_PORT","muport_ipfs_protocol","MUPORT_IPFS_PROTOCOL","HDNode","didJWT","DidDocument","IpfsMini","Identities","OdbIdentityProvider","addIdentityProvider","registerResolver","Keyring","STORAGE_KEY","MUPORT_IPFS","serializeState","_keyrings","_initKeys","_getIdFromEthAddress","_initKeyringByName","_initMuport2","_init3ID2","_initDID2","_getOdbId","_signJWT","use3ID","issuer","_mainKeyring","_subDIDs","getJWTSigner","createJWT","createIdentity","stateObj","spaceSeeds","muportIpfs","muportPromise","subDIDs","_initMuport","_init3ID","_rootDID","doc","_pubkeys","addPublicKey","asymEncryptionKey","addAuthentication","addCustomProperty","subSigningKey","subEncryptionKey","iat","alg","commit","noTimestamp","docHash","publishToInfura","createMuportDocument","_muportDID","addJSON","mnemonicToSeed","entropyToMnemonic","serialized3id","mnemonic","contentSignature","_initDID","managementKey","_box","_did","_addEmail","_email","_addTwitter","_twitter","_addGithub","_github","_DID","_getVerifiedPrivateAccount2","_addVerifiedPrivateAccount2","_getVerifiedPublicAccount2","_addVerifiedPublicAccount2","verificationFunction","_getVerifiedPublicAccount","gistUrl","_addVerifiedPublicAccount","claim","_getVerifiedPrivateAccount","verifyEmail","_addVerifiedPrivateAccount","_isClaim","isClaim","decodeJWT","verifyClaim","verifyJWT","_get3","_salt","_genDbKey","_decryptEntry","_encryptEntry","encryptedValues","_pad","_unpad","EventStore","FeedStore","CounterStore","DocumentStore","Cache","Keystore","createDBManifest","exchangeHeads","isDefined","io","Logger","logger","setLogLevel","databaseTypes","counter","eventlog","docstore","keyvalue","peerId","broker","keystore","stores","_directConnections","docs","databases","db","Store","accessControllerAddress","_loadCache","replicate","onClose","_onClose","_onWrite","addr","_onMessage","_onPeerConnected","heads","getStore","channel","_receiverID","isValidType","manifestHash","dbAddress","_determineAddress","_haveLocalData","overwrite","_addManifestToCache","onlyHash","localOnly","haveDB","_createStore","BlockService","Ipld","PeerId","PeerInfo","isIPFS","multiaddr","PeerBook","multicodec","multihashing","mergeOptions","boot","components","defaultRepo","mfsPreload","ipldOptions","_options","addresses","repo","_repo","_peerInfoBook","_peerInfo","_bitswap","_blockService","_ipld","ipld","_preload","_mfsPreload","_ipns","_print","silent","preStart","shutdown","isOnline","filesRegular","bootstrap","filesMFS","libp2p","bitswap","pin","ping","pingPullStream","pingReadableStream","dht","dns","stats","ipnsPubsub","sharding","BufferImpl","createNode","extendStatics","__extends","setPrototypeOf","__proto__","__","_hasOwnProperty","_getPathRecursive","found","patchErrorMessageFormatter","messageParts","charCode","getPath","hasUndefined","objKeys","objKeysLength","_super","tree","_newTarget","areEquals","objOps","document","removed","move","originalValue","valueToCopy","arrOps","pointer","getOriginalDestination","validateOperation","mutateDocument","banPrototypeModifications","returnValue","existingPathFragment","validateFunction","patch","length_1","operationResult","pathLen","existingPathLen","sequence","externalValidator","CIDUtil","uint8ArrayToString","uint8ArrayEquals","codecs","nameToCode","codecInts","symbol","for","multibaseName","isCID","baseName","isEncoded","validateCID","_bytes","toV0","errorMsg","checkCIDComponents","_Base64","Base64","gBase64","noConflict","Meteor","_hasatob","atob","_hasbtoa","_hasBuffer","_TD","_TE","TextEncoder","b64chs","b64tab","tab","b64re","_fromCC","_U8Afrom","it","_mkUriSafe","m0","_tidyB64","btoaPolyfill","u32","c1","c2","asc","_btoa","_fromUint8Array","u8a","strs","subarray","urlsafe","cb_utob","re_utob","utob","_encode","encodeURI","re_btou","cb_btou","cccc","btou","atobPolyfill","u24","r1","r2","_atob","_toUint8Array","_unURI","_decode","_noEnum","extendString","extendUint8Array","VERSION","fromBase64","toBase64","encodeURL","extendBuiltins","sha1","blake3","md4","bmt","x11","encodingLength","decodeText","asBuffer","nameOrCode","codeBuf","validEncode","enc","ArrayBuffer","isView","encodingFromData","baseTable","tableByCode","varintEncode","varintTable","encodingName","nameTable","arrays","curr","uint8ArrayFromString","uint8ArrayToNumber","numberToUint8Array","hexString","msCrypto","rnds8","byteToHex","bth","charenc","unescape","escape","base64map","rotl","rotr","words","hexToBytes","bytesToBase64","triplet","base64ToBytes","imod4","nodeType","_isBuffer","sep","isRetryableError","isSafeRequestError","isIdempotentRequestError","isNetworkOrIdempotentRequestError","_isRetryAllowed","_isRetryAllowed2","namespace","SAFE_HTTP_METHODS","IDEMPOTENT_HTTP_METHODS","noDelay","retryNumber","randomSum","getCurrentState","defaultOptions","interceptors","use","lastRequestTime","_getRequestOptions","getRequestOptions","_getRequestOptions$re","_getRequestOptions$re2","_getRequestOptions$re3","_getRequestOptions$sh","shouldResetTimeout","defaults","agent","httpAgent","httpsAgent","fixConfig","lastRequestDuration","transformRequest","Axios","mergeConfig","extend","instanceConfig","Cancel","CancelToken","isCancel","spread","isAxiosError","bytes_1","hash_1","calculateSigRecovery","isValidSigRecovery","homesteadOrLater","rBN","sBN","generateAddress2","eip1191ChainId","nonceBN","initCode","fromBuf","saltBuf","initCodeBuf","obj_1","keys_1","keccak224","keccak384","k256","keccak512","arrayContainsArray","superset","subset","getBinarySize","fromAscii","stringValue","fromUtf8","toAscii","toUtf8","getKeys","allowEmpty","ecdhUnsafe","ecdh","signatureImportLax","signatureImport","signatureExport","signatureNormalize","publicKeyCombine","publicKeyTweakMul","privateKeyTweakMul","privateKeyModInverse","privateKeyNegate","privateKeyImport","privateKeyExport","secp256k1v3","der","compressed","RangeError","tweak","publicKeys","sigObj","signOptions","noncefn","algo","bufferAlgo","bufferData","ecdsaSign","recid","ecdsaVerify","ecdsaRecover","initialTarget","Proxy","newTarget","filterNoop","internalEvents","externalEventFilter","oldTarget","eventNames","rawListeners","getRawListeners","ALPHABET_MAP","digits","stringOutput","EC","ec","messages","ecparams","curve","loadPublicKey","xBuffer","toRed","red","redSqr","redIMul","redIAdd","redSqrt","redNeg","loadCompressedPublicKey","yBuffer","x3","redISub","loadUncompressedPublicKey","bn","EC_PRIVATE_KEY_EXPORT_DER_FAIL","keyFromPrivate","sub","umod","EC_PRIVATE_KEY_RANGE_INVALID","invm","EC_PRIVATE_KEY_TWEAK_ADD_FAIL","iadd","isub","EC_PRIVATE_KEY_TWEAK_MUL_FAIL","imul","EC_PUBLIC_KEY_CREATE_FAIL","EC_PUBLIC_KEY_PARSE_FAIL","EC_PUBLIC_KEY_TWEAK_ADD_FAIL","point","mul","isInfinity","EC_PUBLIC_KEY_TWEAK_MUL_FAIL","pairs","EC_PUBLIC_KEY_COMBINE_FAIL","ECDSA_SIGNATURE_PARSE_FAIL","nh","getNonce","ECDSA_SIGN_FAIL","canonical","pers","recoveryParam","sigr","recoverPubKey","ECDSA_RECOVER_FAIL","shared","scalar","ECDH_FAIL","initCompressedValue","defaultValue","isBoolean","COMPRESSED_TYPE_INVALID","EC_PRIVATE_KEY_TYPE_INVALID","isBufferLength","EC_PRIVATE_KEY_LENGTH_INVALID","EC_PRIVATE_KEY_IMPORT_DER_FAIL","TWEAK_TYPE_INVALID","TWEAK_LENGTH_INVALID","EC_PUBLIC_KEY_TYPE_INVALID","isBufferLength2","EC_PUBLIC_KEY_LENGTH_INVALID","EC_PUBLIC_KEYS_TYPE_INVALID","isLengthGTZero","EC_PUBLIC_KEYS_LENGTH_INVALID","ECDSA_SIGNATURE_TYPE_INVALID","ECDSA_SIGNATURE_LENGTH_INVALID","ECDSA_SIGNATURE_PARSE_DER_FAIL","MSG32_TYPE_INVALID","MSG32_LENGTH_INVALID","isObject","OPTIONS_TYPE_INVALID","OPTIONS_DATA_TYPE_INVALID","OPTIONS_DATA_LENGTH_INVALID","isFunction","OPTIONS_NONCEFN_TYPE_INVALID","isNumber","RECOVERY_ID_TYPE_INVALID","isNumberInInterval","RECOVERY_ID_VALUE_INVALID","__spreadArray","pack","ar","existsIn","isAsciiStr","buildSignerPathBuf","fixLen","splitFrames","aes_js_1","crc_32_1","elliptic_1","protoVer","msgType","readUInt16BE","toDER","allowedPurposes","allowedCoins","frameSz","frames","zeroIsNull","isBase10NumStr","aesCbc","cbc","paddedData","pkcs7","rLen","sLen","keyFromPublic","allowFormatChars","extraChars","_i","getFuncSig","js_sha3_1","NAME_MAX_SZ","CATEGORY_SZ","MAX_PARAMS","def","numParams","latticeTypeIdx","arraySz","PARAM_SZ","f","canonicalName","arrSuffix","parseEtherscanAbiInputs","isNestedTuple","tupleParams","typeName","openBracketIdx","closeBracketIdx","singularTypeName","_def","numParam","reverseFwTypeMap","typeIdx","etherscan","_defs","ieee754","customInspectSymbol","SlowBuffer","INSPECT_MAX_BYTES","K_MAX_LENGTH","createBuffer","encodingOrOffset","isEncoding","actual","fromString","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","utf8ToBytes","slowToString","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","indexSize","arrLength","valLength","foundIndex","hexWrite","remaining","strLen","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","fromByteArray","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","kMaxLength","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","poolSize","allocUnsafeSlow","pos","swap16","swap32","swap64","toLocaleString","inspect","trim","thisStart","thisEnd","thisCopy","targetCopy","_arr","hexSliceLookupTable","checkOffset","ext","checkInt","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","readUIntLE","readUintBE","readUIntBE","readUint8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUint32BE","readIntLE","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUintLE","writeUIntLE","writeUintBE","writeUIntBE","writeUint8","writeUint16LE","writeUint16BE","writeUint32LE","writeUint32BE","writeIntLE","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","copyWithin","INVALID_BASE64_RE","Infinity","leadSurrogate","toByteArray","base64clean","dst","table","i16","Emitter","RequestBase","ResponseBase","Agent","Request","getXHR","XMLHttpRequest","ActiveXObject","pushEncodedKeyValuePair","subkey","parseString","isJSON","mime","Response","xhr","responseType","responseText","_setStatusProperties","line","lines","parseHeader","getAllResponseHeaders","getResponseHeader","_setHeaderProperties","_responseType","_parseBody","_query","_header","new_err","original","rawResponse","_isResponseOK","custom_err","serializeObject","html","xml","urlencoded","form","_parser","toError","accept","user","pass","encoder","_auth","attach","file","_data","_getFormData","append","_formData","FormData","_shouldRetry","_retry","_callback","_maxRetries","_retries","crossDomainError","crossDomain","ca","_isHost","_endCalled","_finalizeQueryString","_setTimeouts","onreadystatechange","readyState","_responseTimeoutTimer","timedout","_aborted","handleProgress","direction","loaded","hasListeners","onprogress","upload","_withCredentials","withCredentials","_serializer","setRequestHeader","_setDefaults","head","getEncodedPayload","encodingType","idx","signerPathBuf","maxExpandedSz","extraDataPayloads_1","prehash","frame","szLE","compression","allowedEncodings","isHex","integer","bits_1","byte_1","integer_1","nibble_1","string_1","bitwise","borc_1","eth_eip712_util_browser_1","rlp_browser_1","secp256k1_1","addRecoveryParam","hashBuf","hash_2","rs","pubToAddrStr","getRecoveryParam","useEIP155","chainIdBuf","getChainIdBuf","chainIdBN","chainIds","mainnet","roptsten","rinkeby","kovan","goerli","isValidChainIdHexNumStr","getExtraData","MAX_BASE_MSG_SZ","EXTRA_DATA_ALLOWED","maxSzAllowed","parseEIP712Msg","forJSParser","isArrayType","singularType","isCustomType","parseEIP712Item","nBytes","Encoder","semanticTypes","get_personal_sign_prefix","get_rlp_encoded_preimage","txType","VAR_PATH_SZ","displayHex","fwConst","buildPersonalSignRequest","eip712MaxTypeParams_1","data_1","shouldPrehash_1","buildEIP712Request","eip155","MAX_BASE_DATA_SZ","isDeployment","eip1559IsAllowed","eip2930IsAllowed","isEip1559","isEip2930","chainID","chainUsesEIP155","chainIdBytes","nonceBytes","gasPriceBytes","gasLimitBytes","toRlpElem","toBytes","valueBytes","dataBytes","maxPriorityFeePerGasBytes","maxFeePerGasBytes","PREHASH_FROM_ACCESS_LIST_1","accessList_1","accessList","listItem","storageKeys","txReqPayload","chainIdBufSz","PREHASH_UNSUPPORTED","extraEthTxDataSz","dataSz","chainIdExtraSz","dataToCopy","totalSz","newSig","newRawTx","rlpEncodedWithSig","bech32_1","bs58check_1","ripemd_1","DEFAULT_SIGHASH_BUFFER","OP","FMT_SEGWIT_NATIVE_V0","FMT_SEGWIT_NATIVE_V0_TESTNET","addition","getU32LE","getVarInt","writeUInt64LE","preBuf","nStr","decodeAddress","versionByte","pkh","bech32Dec","bech32","fromWords","purpose","coin","getScriptType","fee","payload_1","off_1","changeFmt","dec","inputSum_1","scriptType","lockTime","useWitness","needsWitness","numInputs","redeemScript","shaHash","pubkeyhash","buildRedeemScript","redeemScriptLen","sliceLen","sigLen","pubkeyLen","buildSig","emptyScript","numOutputs","script","buildP2shLockingScript","buildP2pkhLockingScript","buildLockingScript","scriptLen","witnessSlice","witness","buildWitness","bech32Prefix","bech32Version","toWords","duplex","Stack","arrayEach","assignValue","baseAssign","baseAssignIn","cloneBuffer","copyArray","copySymbols","copySymbolsIn","getAllKeys","getAllKeysIn","getTag","initCloneArray","initCloneByTag","initCloneObject","isMap","isSet","keysIn","argsTag","funcTag","objectTag","cloneableTags","bitmask","customizer","isDeep","isFlat","isFull","isArr","tag","isFunc","stacked","subValue","props","baseFor","baseMatches","baseMatchesProperty","property","CardanoTxWitnessType","CardanoTxSigningMode","CardanoPoolRelayType","CardanoNativeScriptHashDisplayFormat","CardanoNativeScriptType","CardanoCertificateType","CardanoAddressType","_protobuf","Enum_CardanoAddressType","Enum_CardanoCertificateType","Enum_CardanoNativeScriptType","Enum_CardanoNativeScriptHashDisplayFormat","Enum_CardanoPoolRelayType","Enum_CardanoTxSigningMode","Enum_CardanoTxWitnessType","FIAT_RATES_UPDATE","NOTIFICATION","BLOCK","CLOSE_WINDOW","CANCEL_POPUP_REQUEST","HANDSHAKE","EXTENSION_USB_PERMISSIONS","INIT","TYPES","bitcoin","eos","nem","stellar","cardano","ripple","tezos","binance","START_PENDING","REQUEST","STREAM","UPDATE","START","POOL_RELAY_TYPE","CERTIFICATE_TYPE","ADDRESS_TYPE","NETWORK_IDS","PROTOCOL_MAGICS","testnet","Base","Pointer","Enterprise","Byron","Reward","StakeRegistration","StakeDeregistration","StakeDelegation","StakePoolRegistration","SingleHostIp","SingleHostName","MultipleHostName","WAIT_FOR_SELECTION","WORD","PASSPHRASE_ON_DEVICE","PASSPHRASE","PIN","BUTTON","LOADING","USED_ELSEWHERE","RELEASED","ACQUIRED","RELEASE","ACQUIRE","CHANGED","DISCONNECT","CONNECT_UNACQUIRED","BUNDLE_PROGRESS","CHANGE_SETTINGS","RECEIVE_WORD","RECEIVE_FEE","RECEIVE_ACCOUNT","CHANGE_ACCOUNT","RECEIVE_DEVICE","RECEIVE_PASSPHRASE","RECEIVE_PIN","RECEIVE_CONFIRMATION","RECEIVE_PERMISSION","REQUEST_WORD","REQUEST_BUTTON","INSUFFICIENT_FUNDS","UPDATE_CUSTOM_FEE","SELECT_FEE","SELECT_ACCOUNT","SELECT_DEVICE","SET_OPERATION","INVALID_PASSPHRASE_ACTION","INVALID_PASSPHRASE","REQUEST_PASSPHRASE_ON_DEVICE","REQUEST_PASSPHRASE","INVALID_PIN","REQUEST_PIN","REQUEST_CONFIRMATION","REQUEST_PERMISSION","CLOSE_UI_WINDOW","REQUEST_UI_WINDOW","DEVICE_NEEDS_BACKUP","FIRMWARE_PROGRESS","FIRMWARE_NOT_INSTALLED","FIRMWARE_NOT_COMPATIBLE","FIRMWARE_NOT_SUPPORTED","FIRMWARE_OUTDATED","FIRMWARE_OLD","SEEDLESS","INITIALIZE","REQUIRE_MODE","NOT_IN_BOOTLOADER","BOOTLOADER","LIBUSB_ERROR_MESSAGE","WEBUSB_ERROR_MESSAGE","INVALID_PIN_ERROR_MESSAGE","WRONG_PREVIOUS_SESSION_ERROR_MESSAGE","TrezorError","ERROR_CODES","_inheritsLoose2","_wrapNativeSuper2","Init_NotInitialized","Init_AlreadyInitialized","Init_IframeBlocked","Init_IframeTimeout","Init_ManifestMissing","Popup_ConnectionMissing","Transport_Missing","Transport_InvalidProtobuf","Method_InvalidPackage","Method_InvalidParameter","Method_NotAllowed","Method_PermissionsNotGranted","Method_Cancel","Method_Interrupted","Method_UnknownCoin","Method_AddressNotMatch","Method_FirmwareUpdate_DownloadFailed","Method_CustomMessage_Callback","Method_Discovery_BundleException","Method_Override","Method_NoResponse","Backend_NotSupported","Backend_WorkerMissing","Backend_Disconnected","Backend_Invalid","Backend_Error","Runtime","Device_NotFound","Device_InitializeFailed","Device_FwException","Device_ModeException","Device_Disconnected","Device_UsedElsewhere","Device_InvalidState","Device_CallInProgress","_Error","buttons","querySelectorAll","getElementsByTagName","bounds","getBoundingClientRect","btnIframe","createElement","frameBorder","width","height","style","position","top","left","zIndex","setAttribute","onload","contentWindow","getLog","enableLogByPrefix","enableLog","colors","DescriptorStream","DeviceList","Device","Core","IFrame","Popup","css","_proto","addMessage","level","_len","_key","_len2","_key2","_console","_len3","_key3","_console2","_len4","_key4","_console3","_len5","_key5","_console4","_logs","messageData","corsValidator","getEnv","DEFAULT_PRIORITY","DEFAULT_DOMAIN","currentSettings","configSrc","priority","trustedHost","connectSrc","iframeSrc","popupSrc","transportReconnect","webusb","pendingTransportEvent","supportedBrowser","navigator","userAgent","interactionTimeout","chrome","runtime","onConnect","product","__TREZOR_CONNECT_SRC","customUrl","extension","appUrl","parseManifest","BlockchainMessage","ResponseMessage","TransportMessage","DeviceMessage","_assertThisInitialized2","_showPopupRequest","_networkUtils","_deferred","PopupManager","_EventEmitter","getOrigin","iframeHandshake","handleExtensionConnect","handleExtensionMessage","addListener","_window","tabs","active","focus","openFn","requestTimeout","popupPromise","openWrapper","closeInterval","closed","openTimeout","showPopupRequest","windows","getCurrent","currentWindow","newWindow","windowId","extensionTabId","href","extensionPort","onMessage","_this5","useBroadcastChannel","_tab","_this6","lastError","_postMessage","_this7","_inlineStyles","_messageID","existedFrame","manifestString","onLoad","getElementById","display","border","iframeOrigin","handleIframeBlocked","attachEvent","appendChild","injectStyleSheet","parentNode","removeChild","finish","ownerDocument","styleSheet","cssText","createTextNode","usePromise","naclUtil","isNullish","ethereumjs_util_1","ethereumjs_abi_1","validateVersion","allowedVersions","V3","unsortedDeps","_typedSignatureHash","legacyToBuffer","enum","ints","uints","getSolidityTypes","eip712Hash","messageHash","V1","ethjs_util_1","targetLength","padStart","urlAlphabet","customRandom","getRandom","mask","LN2","step","customAlphabet","specificationBuilder","_builderOptions","_getterOptions","caveatsProperty","receivedCaveat","Reflect","deepFreeze","oIsFunction","hasOwnProp","getOwnPropertyNames","prop","isFrozen"],"mappings":"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,GACA,YAAA,GACA,aAAA,GACA,aAAA,GACA,aAAA,GACA,aAAA,GACAC,OAAA,GACA,cAAA,GACA,aAAA,GACA,eAAA,GACAC,IAAA,IACAhxG,IAAA,IACAixG,IAAA,IACA,2BAAA,KACA,aAAA,KACA,aAAA,KACA,aAAA,KACA,aAAA,KACAC,IAAA,KACA,UAAA,MACA,YAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,YAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,aAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,cAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,cAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,eAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,gBAAA,MACA,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","file":"../ExtensionSource/background-1.js","sourcesContent":["const abi = [\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'hash', type: 'bytes32' },\n    ],\n    name: 'setContent',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ name: 'node', type: 'bytes32' }],\n    name: 'content',\n    outputs: [{ name: '', type: 'bytes32' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ name: 'interfaceID', type: 'bytes4' }],\n    name: 'supportsInterface',\n    outputs: [{ name: '', type: 'bool' }],\n    payable: false,\n    stateMutability: 'pure',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'key', type: 'string' },\n      { name: 'value', type: 'string' },\n    ],\n    name: 'setText',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'contentTypes', type: 'uint256' },\n    ],\n    name: 'ABI',\n    outputs: [\n      { name: 'contentType', type: 'uint256' },\n      { name: 'data', type: 'bytes' },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'x', type: 'bytes32' },\n      { name: 'y', type: 'bytes32' },\n    ],\n    name: 'setPubkey',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'hash', type: 'bytes' },\n    ],\n    name: 'setContenthash',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ name: 'node', type: 'bytes32' }],\n    name: 'addr',\n    outputs: [{ name: '', type: 'address' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'key', type: 'string' },\n    ],\n    name: 'text',\n    outputs: [{ name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'contentType', type: 'uint256' },\n      { name: 'data', type: 'bytes' },\n    ],\n    name: 'setABI',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ name: 'node', type: 'bytes32' }],\n    name: 'name',\n    outputs: [{ name: '', type: 'string' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'name', type: 'string' },\n    ],\n    name: 'setName',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ name: 'node', type: 'bytes32' }],\n    name: 'contenthash',\n    outputs: [{ name: '', type: 'bytes' }],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: true,\n    inputs: [{ name: 'node', type: 'bytes32' }],\n    name: 'pubkey',\n    outputs: [\n      { name: 'x', type: 'bytes32' },\n      { name: 'y', type: 'bytes32' },\n    ],\n    payable: false,\n    stateMutability: 'view',\n    type: 'function',\n  },\n  {\n    constant: false,\n    inputs: [\n      { name: 'node', type: 'bytes32' },\n      { name: 'addr', type: 'address' },\n    ],\n    name: 'setAddr',\n    outputs: [],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'function',\n  },\n  {\n    inputs: [{ name: 'ensAddr', type: 'address' }],\n    payable: false,\n    stateMutability: 'nonpayable',\n    type: 'constructor',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'node', type: 'bytes32' },\n      { indexed: false, name: 'a', type: 'address' },\n    ],\n    name: 'AddrChanged',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'node', type: 'bytes32' },\n      { indexed: false, name: 'name', type: 'string' },\n    ],\n    name: 'NameChanged',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'node', type: 'bytes32' },\n      { indexed: true, name: 'contentType', type: 'uint256' },\n    ],\n    name: 'ABIChanged',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'node', type: 'bytes32' },\n      { indexed: false, name: 'x', type: 'bytes32' },\n      { indexed: false, name: 'y', type: 'bytes32' },\n    ],\n    name: 'PubkeyChanged',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'node', type: 'bytes32' },\n      { indexed: false, name: 'indexedKey', type: 'string' },\n      { indexed: false, name: 'key', type: 'string' },\n    ],\n    name: 'TextChanged',\n    type: 'event',\n  },\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, name: 'node', type: 'bytes32' },\n      { indexed: false, name: 'hash', type: 'bytes' },\n    ],\n    name: 'ContenthashChanged',\n    type: 'event',\n  },\n];\nexport default abi;\n","/*\n\tISC License\n\n\tCopyright (c) 2019, Pierre-Louis Despaigne\n\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nconst multiC = require('multicodec');\nconst multiH = require('multihashes');\n\nconst { hexStringToBuffer, profiles } = require('./profiles');\nconst { cidForWeb, cidV0ToV1Base32 } = require('./helpers');\n\nmodule.exports = {\n\n\t//export some helpers functions\n\thelpers: {\n\t\tcidForWeb,\n\t\tcidV0ToV1Base32,\n\t},\n\n\t/**\n\t* Decode a Content Hash.\n\t* @param {string} hash an hex string containing a content hash\n\t* @return {string} the decoded content\n\t*/\n\tdecode: function (contentHash) {\n\t\tconst buffer = hexStringToBuffer(contentHash);\n\t\tconst codec = multiC.getCodec(buffer);\n\t\tconst value = multiC.rmPrefix(buffer);\n\t\tlet profile = profiles[codec];\n\t\tif (!profile) profile = profiles['default'];\n\t\treturn profile.decode(value);\n\t},\n\n\t/**\n\t* Encode an IPFS address into a content hash\n\t* @param {string} ipfsHash string containing an IPFS address\n\t* @return {string} the resulting content hash\n\t*/\n\tfromIpfs: function (ipfsHash) {\n\t\treturn this.encode('ipfs-ns', ipfsHash);\n\t},\n\n\t/**\n\t* Encode a Skylink into a content hash\n\t* @param {string} skylink string containing a Skylink\n\t* @return {string} the resulting content hash\n\t*/\n\tfromSkylink: function (skylink) {\n\t\treturn this.encode('skynet-ns', skylink);\n\t},\n\n\t/**\n\t* Encode a Swarm address into a content hash\n\t* @param {string} swarmHash string containing a Swarm address\n\t* @return {string} the resulting content hash\n\t*/\n\tfromSwarm: function (swarmHash) {\n\t\treturn this.encode('swarm-ns', swarmHash);\n\t},\n\n\t/**\n\t* General purpose encoding function\n  * @param {string} codec \n  * @param {string} value \n  */\n\tencode: function (codec, value) {\n\t\tlet profile = profiles[codec];\n\t\tif (!profile) profile = profiles['default'];\n\t\tconst encodedValue = profile.encode(value);\n\t\treturn multiH.toHexString(multiC.addPrefix(codec, encodedValue))\n\t},\n\n\t/**\n\t* Extract the codec of a content hash\n\t* @param {string} hash hex string containing a content hash\n\t* @return {string} the extracted codec\n\t*/\n\tgetCodec: function (hash) {\n\t\tlet buffer = hexStringToBuffer(hash);\n\t\treturn multiC.getCodec(buffer);\n\t},\n}\n","export const SINGLE_CALL_BALANCES_ADDRESS =\n  '0xb1f8e55c7f64d203c1400b9d8555d050f94adf39';\nexport const SINGLE_CALL_BALANCES_ADDRESS_RINKEBY =\n  '0x9f510b19f1ad66f0dcf6e45559fab0d6752c1db7';\nexport const SINGLE_CALL_BALANCES_ADDRESS_ROPSTEN =\n  '0xb8e671734ce5c8d7dfbbea5574fa4cf39f7a54a4';\nexport const SINGLE_CALL_BALANCES_ADDRESS_KOVAN =\n  '0xb1d3fbb2f83aecd196f474c16ca5d9cffa0d0ffc';\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createScaffoldMiddleware = void 0;\nfunction createScaffoldMiddleware(handlers) {\n    return (req, res, next, end) => {\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === 'function') {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n}\nexports.createScaffoldMiddleware = createScaffoldMiddleware;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlU2NhZmZvbGRNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZVNjYWZmb2xkTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQSxTQUFnQix3QkFBd0IsQ0FBQyxRQUV4QztJQUNDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtRQUM3QixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLHdCQUF3QjtRQUN4QixJQUFJLE9BQU8sS0FBSyxTQUFTLEVBQUU7WUFDekIsT0FBTyxJQUFJLEVBQUUsQ0FBQztTQUNmO1FBQ0QsdUNBQXVDO1FBQ3ZDLElBQUksT0FBTyxPQUFPLEtBQUssVUFBVSxFQUFFO1lBQ2pDLE9BQU8sT0FBTyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsZ0RBQWdEO1FBQy9DLEdBQStCLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztRQUNsRCxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ2YsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQWpCRCw0REFpQkMifQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getUniqueId = void 0;\n// uint32 (two's complement) max\n// more conservative than Number.MAX_SAFE_INTEGER\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2V0VW5pcXVlSWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvZ2V0VW5pcXVlSWQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsZ0NBQWdDO0FBQ2hDLGlEQUFpRDtBQUNqRCxNQUFNLEdBQUcsR0FBRyxVQUFVLENBQUM7QUFDdkIsSUFBSSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7QUFFaEQsU0FBZ0IsV0FBVztJQUN6QixTQUFTLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ2xDLE9BQU8sU0FBUyxDQUFDO0FBQ25CLENBQUM7QUFIRCxrQ0FHQyJ9","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createAsyncMiddleware = void 0;\n/**\n * JsonRpcEngine only accepts callback-based middleware directly.\n * createAsyncMiddleware exists to enable consumers to pass in async middleware\n * functions.\n *\n * Async middleware have no \"end\" function. Instead, they \"end\" if they return\n * without calling \"next\". Rather than passing in explicit return handlers,\n * async middleware can simply await \"next\", and perform operations on the\n * response object when execution resumes.\n *\n * To accomplish this, createAsyncMiddleware passes the async middleware a\n * wrapped \"next\" function. That function calls the internal JsonRpcEngine\n * \"next\" function with a return handler that resolves a promise when called.\n *\n * The return handler will always be called. Its resolution of the promise\n * enables the control flow described above.\n */\nfunction createAsyncMiddleware(asyncMiddleware) {\n    return async (req, res, next, end) => {\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve) => {\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = async () => {\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            // eslint-disable-next-line node/callback-return\n            next((runReturnHandlersCallback) => {\n                // This callback comes from JsonRpcEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        try {\n            await asyncMiddleware(req, res, asyncNext);\n            if (nextWasCalled) {\n                await nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            }\n            else {\n                end(null);\n            }\n        }\n        catch (error) {\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            }\n            else {\n                end(error);\n            }\n        }\n    };\n}\nexports.createAsyncMiddleware = createAsyncMiddleware;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlQXN5bmNNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2NyZWF0ZUFzeW5jTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFnQkE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFDSCxTQUFnQixxQkFBcUIsQ0FDbkMsZUFBNkM7SUFFN0MsT0FBTyxLQUFLLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7UUFDbkMsK0NBQStDO1FBQy9DLHFEQUFxRDtRQUNyRCxrQkFBa0I7UUFDbEIsSUFBSSxrQkFBOEIsQ0FBQztRQUNuQyxNQUFNLFdBQVcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzFDLGtCQUFrQixHQUFHLE9BQU8sQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVILElBQUkscUJBQXFCLEdBQVksSUFBSSxDQUFDO1FBQzFDLElBQUksYUFBYSxHQUFHLEtBQUssQ0FBQztRQUUxQiwwREFBMEQ7UUFDMUQsTUFBTSxTQUFTLEdBQUcsS0FBSyxJQUFJLEVBQUU7WUFDM0IsYUFBYSxHQUFHLElBQUksQ0FBQztZQUVyQix1RUFBdUU7WUFDdkUseURBQXlEO1lBQ3pELGdEQUFnRDtZQUNoRCxJQUFJLENBQUMsQ0FBQyx5QkFBeUIsRUFBRSxFQUFFO2dCQUNqQyw0REFBNEQ7Z0JBQzVELHFCQUFxQixHQUFHLHlCQUF5QixDQUFDO2dCQUNsRCxrQkFBa0IsRUFBRSxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1lBQ0gsTUFBTSxXQUFXLENBQUM7UUFDcEIsQ0FBQyxDQUFDO1FBRUYsSUFBSTtZQUNGLE1BQU0sZUFBZSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFM0MsSUFBSSxhQUFhLEVBQUU7Z0JBQ2pCLE1BQU0sV0FBVyxDQUFDLENBQUMsa0RBQWtEO2dCQUNwRSxxQkFBK0MsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN4RDtpQkFBTTtnQkFDTCxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDWDtTQUNGO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDZCxJQUFJLHFCQUFxQixFQUFFO2dCQUN4QixxQkFBK0MsQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6RDtpQkFBTTtnQkFDTCxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDWjtTQUNGO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQS9DRCxzREErQ0MifQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mergeMiddleware = void 0;\nconst JsonRpcEngine_1 = require(\"./JsonRpcEngine\");\nfunction mergeMiddleware(middlewareStack) {\n    const engine = new JsonRpcEngine_1.JsonRpcEngine();\n    middlewareStack.forEach((middleware) => engine.push(middleware));\n    return engine.asMiddleware();\n}\nexports.mergeMiddleware = mergeMiddleware;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWVyZ2VNaWRkbGV3YXJlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL21lcmdlTWlkZGxld2FyZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxtREFBbUU7QUFFbkUsU0FBZ0IsZUFBZSxDQUFDLGVBQXNEO0lBQ3BGLE1BQU0sTUFBTSxHQUFHLElBQUksNkJBQWEsRUFBRSxDQUFDO0lBQ25DLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxVQUFVLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztJQUNqRSxPQUFPLE1BQU0sQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUMvQixDQUFDO0FBSkQsMENBSUMifQ==","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIdRemapMiddleware = void 0;\nconst getUniqueId_1 = require(\"./getUniqueId\");\nfunction createIdRemapMiddleware() {\n    return (req, res, next, _end) => {\n        const originalId = req.id;\n        const newId = getUniqueId_1.getUniqueId();\n        req.id = newId;\n        res.id = newId;\n        next((done) => {\n            req.id = originalId;\n            res.id = originalId;\n            done();\n        });\n    };\n}\nexports.createIdRemapMiddleware = createIdRemapMiddleware;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRSZW1hcE1pZGRsZXdhcmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaWRSZW1hcE1pZGRsZXdhcmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsK0NBQTRDO0FBRzVDLFNBQWdCLHVCQUF1QjtJQUNyQyxPQUFPLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLEVBQUU7UUFDOUIsTUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQztRQUMxQixNQUFNLEtBQUssR0FBRyx5QkFBVyxFQUFFLENBQUM7UUFDNUIsR0FBRyxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFDZixHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQztRQUNmLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ1osR0FBRyxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUM7WUFDcEIsR0FBRyxDQUFDLEVBQUUsR0FBRyxVQUFVLENBQUM7WUFDcEIsSUFBSSxFQUFFLENBQUM7UUFDVCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQztBQUNKLENBQUM7QUFaRCwwREFZQyJ9","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.JsonRpcEngine = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\nclass JsonRpcEngine extends safe_event_emitter_1.default {\n    constructor() {\n        super();\n        this._middleware = [];\n    }\n    /**\n     * Add a middleware function to the engine's middleware stack.\n     *\n     * @param middleware - The middleware function to add.\n     */\n    push(middleware) {\n        this._middleware.push(middleware);\n    }\n    handle(req, cb) {\n        if (cb && typeof cb !== 'function') {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n    asMiddleware() {\n        return async (req, res, next, end) => {\n            try {\n                const [middlewareError, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback) => {\n                    try {\n                        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n                    }\n                    catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            }\n            catch (error) {\n                return end(error);\n            }\n        };\n    }\n    async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(\n            // 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        }\n        catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * A promise-wrapped _handle.\n     */\n    _promiseHandle(req) {\n        return new Promise((resolve) => {\n            this._handle(req, (_err, res) => {\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n    async _handle(callerReq, cb) {\n        if (!callerReq ||\n            Array.isArray(callerReq) ||\n            typeof callerReq !== 'object') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Requests must be plain objects. Received: ${typeof callerReq}`, { request: callerReq });\n            return cb(error, { id: undefined, jsonrpc: '2.0', error });\n        }\n        if (typeof callerReq.method !== 'string') {\n            const error = new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.invalidRequest, `Must specify a string method. Received: ${typeof callerReq.method}`, { request: callerReq });\n            return cb(error, { id: callerReq.id, jsonrpc: '2.0', error });\n        }\n        const req = Object.assign({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc,\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        }\n        catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = eth_rpc_errors_1.serializeError(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n    async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers,] = await JsonRpcEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JsonRpcEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JsonRpcEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n    /**\n     * Serially executes the given stack of middleware.\n     *\n     * @returns An array of any error encountered during middleware execution,\n     * a boolean indicating whether the request was completed, and an array of\n     * middleware-defined return handlers.\n     */\n    static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack) {\n            [error, isComplete] = await JsonRpcEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [error, isComplete, returnHandlers.reverse()];\n    }\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n    static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve) => {\n            const end = (err) => {\n                const error = err || res.error;\n                if (error) {\n                    res.error = eth_rpc_errors_1.serializeError(error);\n                }\n                // True indicates that the request should end\n                resolve([error, true]);\n            };\n            const next = (returnHandler) => {\n                if (res.error) {\n                    end(res.error);\n                }\n                else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== 'function') {\n                            end(new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: \"next\" return handlers must be functions. ` +\n                                `Received \"${typeof returnHandler}\" for request:\\n${jsonify(req)}`, { request: req }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([null, false]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            }\n            catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n    static async _runReturnHandlers(handlers) {\n        for (const handler of handlers) {\n            await new Promise((resolve, reject) => {\n                handler((err) => (err ? reject(err) : resolve()));\n            });\n        }\n    }\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n    static _checkForCompletion(req, res, isComplete) {\n        if (!('result' in res) && !('error' in res)) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Response has no error or result for request:\\n${jsonify(req)}`, { request: req });\n        }\n        if (!isComplete) {\n            throw new eth_rpc_errors_1.EthereumRpcError(eth_rpc_errors_1.errorCodes.rpc.internal, `JsonRpcEngine: Nothing ended request:\\n${jsonify(req)}`, { request: req });\n        }\n    }\n}\nexports.JsonRpcEngine = JsonRpcEngine;\nfunction jsonify(request) {\n    return JSON.stringify(request, null, 2);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSnNvblJwY0VuZ2luZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9Kc29uUnBjRW5naW5lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLHNGQUE0RDtBQUM1RCxtREFBOEU7QUF1RjlFOzs7R0FHRztBQUNILE1BQWEsYUFBYyxTQUFRLDRCQUFnQjtJQUdqRDtRQUNFLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxJQUFJLENBQU8sVUFBbUM7UUFDNUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBaUQsQ0FBQyxDQUFDO0lBQzNFLENBQUM7SUEyQ0QsTUFBTSxDQUFDLEdBQVksRUFBRSxFQUFRO1FBQzNCLElBQUksRUFBRSxJQUFJLE9BQU8sRUFBRSxLQUFLLFVBQVUsRUFBRTtZQUNsQyxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUM7U0FDL0Q7UUFFRCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDdEIsSUFBSSxFQUFFLEVBQUU7Z0JBQ04sT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQzthQUNuQztZQUNELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUMvQjtRQUVELElBQUksRUFBRSxFQUFFO1lBQ04sT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQThCLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDekQ7UUFDRCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBOEIsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILFlBQVk7UUFDVixPQUFPLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUNuQyxJQUFJ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","export const WALLET_PREFIX = 'wallet_';\n\nexport const NOTIFICATION_NAMES = {\n  accountsChanged: 'metamask_accountsChanged',\n  unlockStateChanged: 'metamask_unlockStateChanged',\n  chainChanged: 'metamask_chainChanged',\n};\n\nexport const LOG_IGNORE_METHODS = [\n  'wallet_registerOnboarding',\n  'wallet_watchAsset',\n];\n\nexport const LOG_METHOD_TYPES = {\n  restricted: 'restricted',\n  internal: 'internal',\n};\n\n/**\n * The permission activity log size limit.\n */\nexport const LOG_LIMIT = 100;\n","import { createSelector } from 'reselect';\nimport { CaveatTypes } from '../../../../shared/constants/permissions';\n\n/**\n * This file contains selectors for PermissionController selector event\n * subscriptions, used to detect whenever a subject's accounts change so that\n * we can notify the subject via the `accountsChanged` provider event.\n */\n\n/**\n * @param {Record<string, Record<string, unknown>>} state - The\n * PermissionController state.\n * @returns {Record<string, unknown>} The PermissionController subjects.\n */\nconst getSubjects = (state) => state.subjects;\n\n/**\n * Get the permitted accounts for each subject, keyed by origin.\n * The values of the returned map are immutable values from the\n * PermissionController state.\n *\n * @returns {Map<string, string[]>} The current origin:accounts[] map.\n */\nexport const getPermittedAccountsByOrigin = createSelector(\n  getSubjects,\n  (subjects) => {\n    return Object.values(subjects).reduce((originToAccountsMap, subject) => {\n      const caveat = subject.permissions?.eth_accounts?.caveats.find(\n        ({ type }) => type === CaveatTypes.restrictReturnedAccounts,\n      );\n\n      if (caveat) {\n        originToAccountsMap.set(subject.origin, caveat.value);\n      }\n      return originToAccountsMap;\n    }, new Map());\n  },\n);\n\n/**\n * Given the current and previous exposed accounts for each PermissionController\n * subject, returns a new map containing all accounts that have changed.\n * The values of each map must be immutable values directly from the\n * PermissionController state, or an empty array instantiated in this\n * function.\n *\n * @param {Map<string, string[]>} newAccountsMap - The new origin:accounts[] map.\n * @param {Map<string, string[]>} [previousAccountsMap] - The previous origin:accounts[] map.\n * @returns {Map<string, string[]>} The origin:accounts[] map of changed accounts.\n */\nexport const getChangedAccounts = (newAccountsMap, previousAccountsMap) => {\n  if (previousAccountsMap === undefined) {\n    return newAccountsMap;\n  }\n\n  const changedAccounts = new Map();\n  if (newAccountsMap === previousAccountsMap) {\n    return changedAccounts;\n  }\n\n  const newOrigins = new Set([...newAccountsMap.keys()]);\n\n  for (const origin of previousAccountsMap.keys()) {\n    const newAccounts = newAccountsMap.get(origin) ?? [];\n\n    // The values of these maps are references to immutable values, which is why\n    // a strict equality check is enough for diffing. The values are either from\n    // PermissionController state, or an empty array initialized in the previous\n    // call to this function. `newAccountsMap` will never contain any empty\n    // arrays.\n    if (previousAccountsMap.get(origin) !== newAccounts) {\n      changedAccounts.set(origin, newAccounts);\n    }\n\n    newOrigins.delete(origin);\n  }\n\n  // By now, newOrigins is either empty or contains some number of previously\n  // unencountered origins, and all of their accounts have \"changed\".\n  for (const origin of newOrigins.keys()) {\n    changedAccounts.set(origin, newAccountsMap.get(origin));\n  }\n  return changedAccounts;\n};\n","import { CaveatMutatorOperation } from '@metamask/snap-controllers';\nimport { CaveatTypes } from '../../../../shared/constants/permissions';\n\n/**\n * Factories that construct caveat mutator functions that are passed to\n * PermissionController.updatePermissionsByCaveat.\n */\nexport const CaveatMutatorFactories = {\n  [CaveatTypes.restrictReturnedAccounts]: {\n    removeAccount,\n  },\n};\n\n/**\n * Removes the target account from the value arrays of all\n * `restrictReturnedAccounts` caveats. No-ops if the target account is not in\n * the array, and revokes the parent permission if it's the only account in\n * the array.\n *\n * @param {string} targetAccount - The address of the account to remove from\n * all accounts permissions.\n * @param {string[]} existingAccounts - The account address array from the\n * account permissions.\n */\nfunction removeAccount(targetAccount, existingAccounts) {\n  const newAccounts = existingAccounts.filter(\n    (address) => address !== targetAccount,\n  );\n\n  if (newAccounts.length === existingAccounts.length) {\n    return { operation: CaveatMutatorOperation.noop };\n  } else if (newAccounts.length > 0) {\n    return {\n      operation: CaveatMutatorOperation.updateValue,\n      value: newAccounts,\n    };\n  }\n  return { operation: CaveatMutatorOperation.revokePermission };\n}\n","import { ObservableStore } from '@metamask/obs-store';\nimport stringify from 'fast-safe-stringify';\nimport { CaveatTypes } from '../../../../shared/constants/permissions';\nimport {\n  LOG_IGNORE_METHODS,\n  LOG_LIMIT,\n  LOG_METHOD_TYPES,\n  WALLET_PREFIX,\n} from './enums';\n\n/**\n * Controller with middleware for logging requests and responses to restricted\n * and permissions-related methods.\n */\nexport class PermissionLogController {\n  /**\n   * @param {{ restrictedMethods: Set<string>, initState: Record<string, unknown> }} options - Options bag.\n   */\n  constructor({ restrictedMethods, initState }) {\n    this.restrictedMethods = restrictedMethods;\n    this.store = new ObservableStore({\n      permissionHistory: {},\n      permissionActivityLog: [],\n      ...initState,\n    });\n  }\n\n  /**\n   * Get the restricted method activity log.\n   *\n   * @returns {Array<Object>} The activity log.\n   */\n  getActivityLog() {\n    return this.store.getState().permissionActivityLog;\n  }\n\n  /**\n   * Update the restricted method activity log.\n   *\n   * @param {Array<Object>} logs - The new activity log array.\n   */\n  updateActivityLog(logs) {\n    this.store.updateState({ permissionActivityLog: logs });\n  }\n\n  /**\n   * Get the permission history log.\n   *\n   * @returns {Object} The permissions history log.\n   */\n  getHistory() {\n    return this.store.getState().permissionHistory;\n  }\n\n  /**\n   * Update the permission history log.\n   *\n   * @param {Object} history - The new permissions history log object.\n   */\n  updateHistory(history) {\n    this.store.updateState({ permissionHistory: history });\n  }\n\n  /**\n   * Updates the exposed account history for the given origin.\n   * Sets the 'last seen' time to Date.now() for the given accounts.\n   * Does **not** update the 'lastApproved' time for the permission itself.\n   * Returns if the accounts array is empty.\n   *\n   * @param {string} origin - The origin that the accounts are exposed to.\n   * @param {Array<string>} accounts - The accounts.\n   */\n  updateAccountsHistory(origin, accounts) {\n    if (accounts.length === 0) {\n      return;\n    }\n\n    const accountToTimeMap = getAccountToTimeMap(accounts, Date.now());\n\n    this.commitNewHistory(origin, {\n      eth_accounts: {\n        accounts: accountToTimeMap,\n      },\n    });\n  }\n\n  /**\n   * Create a permissions log middleware. Records permissions activity and history:\n   *\n   * Activity: requests and responses for restricted and most wallet_ methods.\n   *\n   * History: for each origin, the last time a permission was granted, including\n   * which accounts were exposed, if any.\n   *\n   * @returns {JsonRpcEngineMiddleware} The permissions log middleware.\n   */\n  createMiddleware() {\n    return (req, res, next, _end) => {\n      let activityEntry, requestedMethods;\n      const { origin, method } = req;\n      const isInternal = method.startsWith(WALLET_PREFIX);\n\n      // we only log certain methods\n      if (\n        !LOG_IGNORE_METHODS.includes(method) &&\n        (isInternal || this.restrictedMethods.has(method))\n      ) {\n        activityEntry = this.logRequest(req, isInternal);\n\n        if (method === `${WALLET_PREFIX}requestPermissions`) {\n          // get the corresponding methods from the requested permissions so\n          // that we can record permissions history\n          requestedMethods = this.getRequestedMethods(req);\n        }\n      } else if (method === 'eth_requestAccounts') {\n        // eth_requestAccounts is a special case; we need to extract the accounts\n        // from it\n        activityEntry = this.logRequest(req, isInternal);\n        requestedMethods = ['eth_accounts'];\n      } else {\n        // no-op\n        next();\n        return;\n      }\n\n      // call next with a return handler for capturing the response\n      next((cb) => {\n        const time = Date.now();\n        this.logResponse(activityEntry, res, time);\n\n        if (requestedMethods && !res.error && res.result) {\n          // any permissions or accounts changes will be recorded on the response,\n          // so we only log permissions history here\n          this.logPermissionsHistory(\n            requestedMethods,\n            origin,\n            res.result,\n            time,\n            method === 'eth_requestAccounts',\n          );\n        }\n        cb();\n      });\n    };\n  }\n\n  /**\n   * Creates and commits an activity log entry, without response data.\n   *\n   * @param {Object} request - The request object.\n   * @param {boolean} isInternal - Whether the request is internal.\n   */\n  logRequest(request, isInternal) {\n    const activityEntry = {\n      id: request.id,\n      method: request.method,\n      methodType: isInternal\n        ? LOG_METHOD_TYPES.internal\n        : LOG_METHOD_TYPES.restricted,\n      origin: request.origin,\n      request: stringify(request, null, 2),\n      requestTime: Date.now(),\n      response: null,\n      responseTime: null,\n      success: null,\n    };\n    this.commitNewActivity(activityEntry);\n    return activityEntry;\n  }\n\n  /**\n   * Adds response data to an existing activity log entry.\n   * Entry assumed already committed (i.e., in the log).\n   *\n   * @param {Object} entry - The entry to add a response to.\n   * @param {Object} response - The response object.\n   * @param {number} time - Output from Date.now()\n   */\n  logResponse(entry, response, time) {\n    if (!entry || !response) {\n      return;\n    }\n\n    entry.response = stringify(response, null, 2);\n    entry.responseTime = time;\n    entry.success = !response.error;\n  }\n\n  /**\n   * Commit a new entry to the activity log.\n   * Removes the oldest entry from the log if it exceeds the log limit.\n   *\n   * @param {Object} entry - The activity log entry.\n   */\n  commitNewActivity(entry) {\n    const logs = this.getActivityLog();\n\n    // add new entry to end of log\n    logs.push(entry);\n\n    // remove oldest log if exceeding size limit\n    if (logs.length > LOG_LIMIT) {\n      logs.shift();\n    }\n\n    this.updateActivityLog(logs);\n  }\n\n  /**\n   * Create new permissions history log entries, if any, and commit them.\n   *\n   * @param {Array<string>} requestedMethods - The method names corresponding to the requested permissions.\n   * @param {string} origin - The origin of the permissions request.\n   * @param {Array<IOcapLdCapability} result - The permissions request response.result.\n   * @param {string} time - The time of the request, i.e. Date.now().\n   * @param {boolean} isEthRequestAccounts - Whether the permissions request was 'eth_requestAccounts'.\n   */\n  logPermissionsHistory(\n    requestedMethods,\n    origin,\n    result,\n    time,\n    isEthRequestAccounts,\n  ) {\n    let accounts, newEntries;\n\n    if (isEthRequestAccounts) {\n      accounts = result;\n      const accountToTimeMap = getAccountToTimeMap(accounts, time);\n\n      newEntries = {\n        eth_accounts: {\n          accounts: accountToTimeMap,\n          lastApproved: time,\n        },\n      };\n    } else {\n      // Records new \"lastApproved\" times for the granted permissions, if any.\n      // Special handling for eth_accounts, in order to record the time the\n      // accounts were last seen or approved by the origin.\n      newEntries = result\n        .map((perm) => {\n          if (perm.parentCapability === 'eth_accounts') {\n            accounts = this.getAccountsFromPermission(perm);\n          }\n\n          return perm.parentCapability;\n        })\n        .reduce((acc, method) => {\n          // all approved permissions will be included in the response,\n          // not just the newly requested ones\n          if (requestedMethods.includes(method)) {\n            if (method === 'eth_accounts') {\n              const accountToTimeMap = getAccountToTimeMap(accounts, time);\n\n              acc[method] = {\n                lastApproved: time,\n                accounts: accountToTimeMap,\n              };\n            } else {\n              acc[method] = { lastApproved: time };\n            }\n          }\n\n          return acc;\n        }, {});\n    }\n\n    if (Object.keys(newEntries).length > 0) {\n      this.commitNewHistory(origin, newEntries);\n    }\n  }\n\n  /**\n   * Commit new entries to the permissions history log.\n   * Merges the history for the given origin, overwriting existing entries\n   * with the same key (permission name).\n   *\n   * @param {string} origin - The requesting origin.\n   * @param {Object} newEntries - The new entries to commit.\n   */\n  commitNewHistory(origin, newEntries) {\n    // a simple merge updates most permissions\n    const history = this.getHistory();\n    const newOriginHistory = {\n      ...history[origin],\n      ...newEntries,\n    };\n\n    // eth_accounts requires special handling, because of information\n    // we store about the accounts\n    const existingEthAccountsEntry =\n      history[origin] && history[origin].eth_accounts;\n    const newEthAccountsEntry = newEntries.eth_accounts;\n\n    if (existingEthAccountsEntry && newEthAccountsEntry) {\n      // we may intend to update just the accounts, not the permission\n      // itself\n      const lastApproved =\n        newEthAccountsEntry.lastApproved ||\n        existingEthAccountsEntry.lastApproved;\n\n      // merge old and new eth_accounts history entries\n      newOriginHistory.eth_accounts = {\n        lastApproved,\n        accounts: {\n          ...existingEthAccountsEntry.accounts,\n          ...newEthAccountsEntry.accounts,\n        },\n      };\n    }\n\n    history[origin] = newOriginHistory;\n\n    this.updateHistory(history);\n  }\n\n  /**\n   * Get all requested methods from a permissions request.\n   *\n   * @param {Object} request - The request object.\n   * @returns {Array<string>} The names of the requested permissions.\n   */\n  getRequestedMethods(request) {\n    if (\n      !request.params ||\n      !request.params[0] ||\n      typeof request.params[0] !== 'object' ||\n      Array.isArray(request.params[0])\n    ) {\n      return null;\n    }\n    return Object.keys(request.params[0]);\n  }\n\n  /**\n   * Get the permitted accounts from an eth_accounts permissions object.\n   * Returns an empty array if the permission is not eth_accounts.\n   *\n   * @param {Object} perm - The permissions object.\n   * @returns {Array<string>} The permitted accounts.\n   */\n  getAccountsFromPermission(perm) {\n    if (perm.parentCapability !== 'eth_accounts' || !perm.caveats) {\n      return [];\n    }\n\n    const accounts = new Set();\n    for (const caveat of perm.caveats) {\n      if (\n        caveat.type === CaveatTypes.restrictReturnedAccounts &&\n        Array.isArray(caveat.value)\n      ) {\n        for (const value of caveat.value) {\n          accounts.add(value);\n        }\n      }\n    }\n    return [...accounts];\n  }\n}\n\n// helper functions\n\n/**\n * Get a map from account addresses to the given time.\n *\n * @param {Array<string>} accounts - An array of addresses.\n * @param {number} time - A time, e.g. Date.now().\n * @returns {Object} A string:number map of addresses to time.\n */\nfunction getAccountToTimeMap(accounts, time) {\n  return accounts.reduce((acc, account) => ({ ...acc, [account]: time }), {});\n}\n","import nanoid from 'nanoid';\nimport {\n  CaveatTypes,\n  RestrictedMethods,\n} from '../../../../shared/constants/permissions';\n\nexport function getPermissionBackgroundApiMethods(permissionController) {\n  return {\n    addPermittedAccount: (origin, account) => {\n      const existing = permissionController.getCaveat(\n        origin,\n        RestrictedMethods.eth_accounts,\n        CaveatTypes.restrictReturnedAccounts,\n      );\n\n      if (existing.value.includes(account)) {\n        throw new Error(\n          `eth_accounts permission for origin \"${origin}\" already permits account \"${account}\".`,\n        );\n      }\n\n      permissionController.updateCaveat(\n        origin,\n        RestrictedMethods.eth_accounts,\n        CaveatTypes.restrictReturnedAccounts,\n        [...existing.value, account],\n      );\n    },\n\n    removePermittedAccount: (origin, account) => {\n      const existing = permissionController.getCaveat(\n        origin,\n        RestrictedMethods.eth_accounts,\n        CaveatTypes.restrictReturnedAccounts,\n      );\n\n      if (!existing.value.includes(account)) {\n        throw new Error(\n          `eth_accounts permission for origin \"${origin}\" already does not permit account \"${account}\".`,\n        );\n      }\n\n      const remainingAccounts = existing.value.filter(\n        (existingAccount) => existingAccount !== account,\n      );\n\n      if (remainingAccounts.length === 0) {\n        permissionController.revokePermission(\n          origin,\n          RestrictedMethods.eth_accounts,\n        );\n      } else {\n        permissionController.updateCaveat(\n          origin,\n          RestrictedMethods.eth_accounts,\n          CaveatTypes.restrictReturnedAccounts,\n          remainingAccounts,\n        );\n      }\n    },\n\n    requestAccountsPermissionWithId: async (origin) => {\n      const id = nanoid();\n      permissionController.requestPermissions(\n        { origin },\n        {\n          eth_accounts: {},\n        },\n        { id },\n      );\n      return id;\n    },\n  };\n}\n","import {\n  constructPermission,\n  PermissionType,\n} from '@metamask/snap-controllers';\nimport {\n  CaveatTypes,\n  RestrictedMethods,\n} from '../../../../shared/constants/permissions';\n\n/**\n * This file contains the specifications of the permissions and caveats\n * that are recognized by our permission system. See the PermissionController\n * README in @metamask/snap-controllers for details.\n */\n\n/**\n * The \"keys\" of all of permissions recognized by the PermissionController.\n * Permission keys and names have distinct meanings in the permission system.\n */\nconst PermissionKeys = Object.freeze({\n  ...RestrictedMethods,\n});\n\n/**\n * Factory functions for all caveat types recognized by the\n * PermissionController.\n */\nconst CaveatFactories = Object.freeze({\n  [CaveatTypes.restrictReturnedAccounts]: (accounts) => {\n    return { type: CaveatTypes.restrictReturnedAccounts, value: accounts };\n  },\n});\n\n/**\n * A PreferencesController identity object.\n *\n * @typedef {Object} Identity\n * @property {string} address - The address of the identity.\n * @property {string} name - The name of the identity.\n * @property {number} [lastSelected] - Unix timestamp of when the identity was\n * last selected in the UI.\n */\n\n/**\n * Gets the specifications for all caveats that will be recognized by the\n * PermissionController.\n *\n * @param {{\n *   getIdentities: () => Record<string, Identity>,\n * }} options - Options bag.\n */\nexport const getCaveatSpecifications = ({ getIdentities }) => {\n  return {\n    [CaveatTypes.restrictReturnedAccounts]: {\n      type: CaveatTypes.restrictReturnedAccounts,\n\n      decorator: (method, caveat) => {\n        return async (args) => {\n          const result = await method(args);\n          return result\n            .filter((account) => caveat.value.includes(account))\n            .slice(0, 1);\n        };\n      },\n\n      validator: (caveat, _origin, _target) =>\n        validateCaveatAccounts(caveat.value, getIdentities),\n    },\n  };\n};\n\n/**\n * Gets the specifications for all permissions that will be recognized by the\n * PermissionController.\n *\n * @param {{\n *   getAllAccounts: () => Promise<string[]>,\n *   getIdentities: () => Record<string, Identity>,\n * }} options - Options bag.\n * @param options.getAllAccounts - A function that returns all Ethereum accounts\n * in the current MetaMask instance.\n * @param options.getIdentities - A function that returns the\n * `PreferencesController` identity objects for all Ethereum accounts in the\n * @param options.captureKeyringTypesWithMissingIdentities - A function that\n * captures extra error information about the \"Missing identity for address\"\n * error.\n * current MetaMask instance.\n */\nexport const getPermissionSpecifications = ({\n  getAllAccounts,\n  getIdentities,\n  captureKeyringTypesWithMissingIdentities,\n}) => {\n  return {\n    [PermissionKeys.eth_accounts]: {\n      permissionType: PermissionType.RestrictedMethod,\n      targetKey: PermissionKeys.eth_accounts,\n      allowedCaveats: [CaveatTypes.restrictReturnedAccounts],\n\n      factory: (permissionOptions, requestData) => {\n        if (Array.isArray(permissionOptions.caveats)) {\n          throw new Error(\n            `${PermissionKeys.eth_accounts} error: Received unexpected caveats. Any permitted caveats will be added automatically.`,\n          );\n        }\n\n        // This value will be further validated as part of the caveat.\n        if (!requestData.approvedAccounts) {\n          throw new Error(\n            `${PermissionKeys.eth_accounts} error: No approved accounts specified.`,\n          );\n        }\n\n        return constructPermission({\n          ...permissionOptions,\n          caveats: [\n            CaveatFactories[CaveatTypes.restrictReturnedAccounts](\n              requestData.approvedAccounts,\n            ),\n          ],\n        });\n      },\n\n      methodImplementation: async (_args) => {\n        const accounts = await getAllAccounts();\n        const identities = getIdentities();\n\n        return accounts.sort((firstAddress, secondAddress) => {\n          if (!identities[firstAddress]) {\n            captureKeyringTypesWithMissingIdentities(identities, accounts);\n            throw new Error(`Missing identity for address: \"${firstAddress}\".`);\n          } else if (!identities[secondAddress]) {\n            captureKeyringTypesWithMissingIdentities(identities, accounts);\n            throw new Error(\n              `Missing identity for address: \"${secondAddress}\".`,\n            );\n          } else if (\n            identities[firstAddress].lastSelected ===\n            identities[secondAddress].lastSelected\n          ) {\n            return 0;\n          } else if (identities[firstAddress].lastSelected === undefined) {\n            return 1;\n          } else if (identities[secondAddress].lastSelected === undefined) {\n            return -1;\n          }\n\n          return (\n            identities[secondAddress].lastSelected -\n            identities[firstAddress].lastSelected\n          );\n        });\n      },\n\n      validator: (permission, _origin, _target) => {\n        const { caveats } = permission;\n        if (\n          !caveats ||\n          caveats.length !== 1 ||\n          caveats[0].type !== CaveatTypes.restrictReturnedAccounts\n        ) {\n          throw new Error(\n            `${PermissionKeys.eth_accounts} error: Invalid caveats. There must be a single caveat of type \"${CaveatTypes.restrictReturnedAccounts}\".`,\n          );\n        }\n      },\n    },\n  };\n};\n\n/**\n * Validates the accounts associated with a caveat. In essence, ensures that\n * the accounts value is an array of non-empty strings, and that each string\n * corresponds to a PreferencesController identity.\n *\n * @param {string[]} accounts - The accounts associated with the caveat.\n * @param {() => Record<string, Identity>} getIdentities - Gets all\n * PreferencesController identities.\n */\nfunction validateCaveatAccounts(accounts, getIdentities) {\n  if (!Array.isArray(accounts) || accounts.length === 0) {\n    throw new Error(\n      `${PermissionKeys.eth_accounts} error: Expected non-empty array of Ethereum addresses.`,\n    );\n  }\n\n  const identities = getIdentities();\n  accounts.forEach((address) => {\n    if (!address || typeof address !== 'string') {\n      throw new Error(\n        `${PermissionKeys.eth_accounts} error: Expected an array of Ethereum addresses. Received: \"${address}\".`,\n      );\n    }\n\n    if (!identities[address]) {\n      throw new Error(\n        `${PermissionKeys.eth_accounts} error: Received unrecognized address: \"${address}\".`,\n      );\n    }\n  });\n}\n\n/**\n * All unrestricted methods recognized by the PermissionController.\n * Unrestricted methods are ignored by the permission system, but every\n * JSON-RPC request seen by the permission system must correspond to a\n * restricted or unrestricted method, or the request will be rejected with a\n * \"method not found\" error.\n */\nexport const unrestrictedMethods = Object.freeze([\n  'eth_blockNumber',\n  'eth_call',\n  'eth_chainId',\n  'eth_coinbase',\n  'eth_decrypt',\n  'eth_estimateGas',\n  'eth_feeHistory',\n  'eth_gasPrice',\n  'eth_getBalance',\n  'eth_getBlockByHash',\n  'eth_getBlockByNumber',\n  'eth_getBlockTransactionCountByHash',\n  'eth_getBlockTransactionCountByNumber',\n  'eth_getCode',\n  'eth_getEncryptionPublicKey',\n  'eth_getFilterChanges',\n  'eth_getFilterLogs',\n  'eth_getLogs',\n  'eth_getProof',\n  'eth_getStorageAt',\n  'eth_getTransactionByBlockHashAndIndex',\n  'eth_getTransactionByBlockNumberAndIndex',\n  'eth_getTransactionByHash',\n  'eth_getTransactionCount',\n  'eth_getTransactionReceipt',\n  'eth_getUncleByBlockHashAndIndex',\n  'eth_getUncleByBlockNumberAndIndex',\n  'eth_getUncleCountByBlockHash',\n  'eth_getUncleCountByBlockNumber',\n  'eth_getWork',\n  'eth_hashrate',\n  'eth_mining',\n  'eth_newBlockFilter',\n  'eth_newFilter',\n  'eth_newPendingTransactionFilter',\n  'eth_protocolVersion',\n  'eth_sendRawTransaction',\n  'eth_sendTransaction',\n  'eth_sign',\n  'eth_signTypedData',\n  'eth_signTypedData_v1',\n  'eth_signTypedData_v3',\n  'eth_signTypedData_v4',\n  'eth_submitHashrate',\n  'eth_submitWork',\n  'eth_syncing',\n  'eth_uninstallFilter',\n  'metamask_getProviderState',\n  'metamask_watchAsset',\n  'net_listening',\n  'net_peerCount',\n  'net_version',\n  'personal_ecRecover',\n  'personal_sign',\n  'wallet_watchAsset',\n  'web3_clientVersion',\n  'web3_sha3',\n]);\n","import EthJsEns from 'ethjs-ens';\nimport ensNetworkMap from 'ethereum-ens-network-map';\n\nexport default class Ens {\n  static getNetworkEnsSupport(network) {\n    return Boolean(ensNetworkMap[network]);\n  }\n\n  constructor({ network, provider } = {}) {\n    this._ethJsEns = new EthJsEns({\n      network,\n      provider,\n    });\n  }\n\n  lookup(ensName) {\n    return this._ethJsEns.lookup(ensName);\n  }\n\n  reverse(address) {\n    return this._ethJsEns.reverse(address);\n  }\n}\n","/**\n * Returns error without stack trace for better UI display\n *\n * @param {Error} err - error\n * @returns {Error} Error with clean stack trace.\n */\nexport default function cleanErrorStack(err) {\n  let { name } = err;\n  name = name === undefined ? 'Error' : String(name);\n\n  let msg = err.message;\n  msg = msg === undefined ? '' : String(msg);\n\n  if (name === '') {\n    err.stack = err.message;\n  } else if (msg === '') {\n    err.stack = err.name;\n  } else if (!err.stack) {\n    err.stack = `${err.name}: ${err.message}`;\n  }\n\n  return err;\n}\n","const EthQuery = require('ethjs-query')\nconst assert = require('assert')\nconst Mutex = require('await-semaphore').Mutex\n/**\n  @param opts {Object}\n    @param {Object} opts.provider a ethereum provider\n    @param {Function} opts.getPendingTransactions a function that returns an array of txMeta\n    whosee status is `submitted`\n    @param {Function} opts.getConfirmedTransactions a function that returns an array of txMeta\n    whose status is `confirmed`\n  @class\n*/\nclass NonceTracker {\n\n  constructor ({ provider, blockTracker, getPendingTransactions, getConfirmedTransactions }) {\n    this.provider = provider\n    this.blockTracker = blockTracker\n    this.ethQuery = new EthQuery(provider)\n    this.getPendingTransactions = getPendingTransactions\n    this.getConfirmedTransactions = getConfirmedTransactions\n    this.lockMap = {}\n  }\n\n  /**\n    @returns {Promise<Object>} with the key releaseLock (the gloabl mutex)\n  */\n  async getGlobalLock () {\n    const globalMutex = this._lookupMutex('global')\n    // await global mutex free\n    const releaseLock = await globalMutex.acquire()\n    return { releaseLock }\n  }\n\n  /**\n   * @typedef NonceDetails\n   * @property {number} highestLocallyConfirmed - A hex string of the highest nonce on a confirmed transaction.\n   * @property {number} nextNetworkNonce - The next nonce suggested by the eth_getTransactionCount method.\n   * @property {number} highestSuggested - The maximum between the other two, the number returned.\n   */\n\n  /**\n  this will return an object with the `nextNonce` `nonceDetails`, and the releaseLock\n  Note: releaseLock must be called after adding a signed tx to pending transactions (or discarding).\n\n  @param address {string} the hex string for the address whose nonce we are calculating\n  @returns {Promise<NonceDetails>}\n  */\n  async getNonceLock (address) {\n    // await global mutex free\n    await this._globalMutexFree()\n    // await lock free, then take lock\n    const releaseLock = await this._takeMutex(address)\n    try {\n      // evaluate multiple nextNonce strategies\n      const nonceDetails = {}\n      const networkNonceResult = await this._getNetworkNextNonce(address)\n      const highestLocallyConfirmed = this._getHighestLocallyConfirmed(address)\n      const nextNetworkNonce = networkNonceResult.nonce\n      const highestSuggested = Math.max(nextNetworkNonce, highestLocallyConfirmed)\n\n      const pendingTxs = this.getPendingTransactions(address)\n      const localNonceResult = this._getHighestContinuousFrom(pendingTxs, highestSuggested) || 0\n\n      nonceDetails.params = {\n        highestLocallyConfirmed,\n        highestSuggested,\n        nextNetworkNonce,\n      }\n      nonceDetails.local = localNonceResult\n      nonceDetails.network = networkNonceResult\n\n      const nextNonce = Math.max(networkNonceResult.nonce, localNonceResult.nonce)\n      assert(Number.isInteger(nextNonce), `nonce-tracker - nextNonce is not an integer - got: (${typeof nextNonce}) \"${nextNonce}\"`)\n\n      // return nonce and release cb\n      return { nextNonce, nonceDetails, releaseLock }\n    } catch (err) {\n      // release lock if we encounter an error\n      releaseLock()\n      throw err\n    }\n  }\n\n  async _globalMutexFree () {\n    const globalMutex = this._lookupMutex('global')\n    const releaseLock = await globalMutex.acquire()\n    releaseLock()\n  }\n\n  async _takeMutex (lockId) {\n    const mutex = this._lookupMutex(lockId)\n    const releaseLock = await mutex.acquire()\n    return releaseLock\n  }\n\n  _lookupMutex (lockId) {\n    let mutex = this.lockMap[lockId]\n    if (!mutex) {\n      mutex = new Mutex()\n      this.lockMap[lockId] = mutex\n    }\n    return mutex\n  }\n\n  async _getNetworkNextNonce (address) {\n    // calculate next nonce\n    // we need to make sure our base count\n    // and pending count are from the same block\n    const blockNumber = await this.blockTracker.getLatestBlock()\n    const baseCountBN = await this.ethQuery.getTransactionCount(address, blockNumber)\n    const baseCount = baseCountBN.toNumber()\n    assert(Number.isInteger(baseCount), `nonce-tracker - baseCount is not an integer - got: (${typeof baseCount}) \"${baseCount}\"`)\n    const nonceDetails = { blockNumber, baseCount }\n    return { name: 'network', nonce: baseCount, details: nonceDetails }\n  }\n\n  _getHighestLocallyConfirmed (address) {\n    const confirmedTransactions = this.getConfirmedTransactions(address)\n    const highest = this._getHighestNonce(confirmedTransactions)\n    return Number.isInteger(highest) ? highest + 1 : 0\n  }\n\n  _getHighestNonce (txList) {\n    const nonces = txList.map((txMeta) => {\n      const nonce = txMeta.txParams.nonce\n      assert(typeof nonce, 'string', 'nonces should be hex strings')\n      return parseInt(nonce, 16)\n    })\n    const highestNonce = Math.max.apply(null, nonces)\n    return highestNonce\n  }\n\n  /**\n    @typedef {object} highestContinuousFrom\n    @property {string} - name the name for how the nonce was calculated based on the data used\n    @property {number} - nonce the next suggested nonce\n    @property {object} - details the provided starting nonce that was used (for debugging)\n  */\n  /**\n    @param txList {array} - list of txMeta's\n    @param startPoint {number} - the highest known locally confirmed nonce\n    @returns {highestContinuousFrom}\n  */\n  _getHighestContinuousFrom (txList, startPoint) {\n    const nonces = txList.map((txMeta) => {\n      const nonce = txMeta.txParams.nonce\n      assert(typeof nonce, 'string', 'nonces should be hex strings')\n      return parseInt(nonce, 16)\n    })\n\n    let highest = startPoint\n    while (nonces.includes(highest)) {\n      highest++\n    }\n\n    return { name: 'local', nonce: highest, details: { startPoint, highest } }\n  }\n\n}\n\nmodule.exports = NonceTracker\n","import { ethErrors } from 'eth-rpc-errors';\nimport { addHexPrefix } from '../../../lib/util';\nimport {\n  TRANSACTION_ENVELOPE_TYPES,\n  TRANSACTION_STATUSES,\n} from '../../../../../shared/constants/transaction';\nimport { isEIP1559Transaction } from '../../../../../shared/modules/transaction.utils';\nimport { isValidHexAddress } from '../../../../../shared/modules/hexstring-utils';\n\nconst normalizers = {\n  from: addHexPrefix,\n  to: (to, lowerCase) =>\n    lowerCase ? addHexPrefix(to).toLowerCase() : addHexPrefix(to),\n  nonce: addHexPrefix,\n  value: addHexPrefix,\n  data: addHexPrefix,\n  gas: addHexPrefix,\n  gasPrice: addHexPrefix,\n  maxFeePerGas: addHexPrefix,\n  maxPriorityFeePerGas: addHexPrefix,\n  type: addHexPrefix,\n  estimateSuggested: (estimate) => estimate,\n  estimateUsed: (estimate) => estimate,\n};\n\nexport function normalizeAndValidateTxParams(txParams, lowerCase = true) {\n  const normalizedTxParams = normalizeTxParams(txParams, lowerCase);\n  validateTxParams(normalizedTxParams);\n  return normalizedTxParams;\n}\n\n/**\n * Normalizes the given txParams\n *\n * @param {Object} txParams - The transaction params\n * @param {boolean} [lowerCase] - Whether to lowercase the 'to' address.\n * Default: true\n * @returns {Object} the normalized tx params\n */\nexport function normalizeTxParams(txParams, lowerCase = true) {\n  // apply only keys in the normalizers\n  const normalizedTxParams = {};\n  for (const key in normalizers) {\n    if (txParams[key]) {\n      normalizedTxParams[key] = normalizers[key](txParams[key], lowerCase);\n    }\n  }\n  return normalizedTxParams;\n}\n\n/**\n * Given two fields, ensure that the second field is not included in txParams,\n * and if it is throw an invalidParams error.\n *\n * @param {Object} txParams - the transaction parameters object\n * @param {string} fieldBeingValidated - the current field being validated\n * @param {string} mutuallyExclusiveField - the field to ensure is not provided\n * @throws {ethErrors.rpc.invalidParams} Throws if mutuallyExclusiveField is\n *  present in txParams.\n */\nfunction ensureMutuallyExclusiveFieldsNotProvided(\n  txParams,\n  fieldBeingValidated,\n  mutuallyExclusiveField,\n) {\n  if (typeof txParams[mutuallyExclusiveField] !== 'undefined') {\n    throw ethErrors.rpc.invalidParams(\n      `Invalid transaction params: specified ${fieldBeingValidated} but also included ${mutuallyExclusiveField}, these cannot be mixed`,\n    );\n  }\n}\n\n/**\n * Ensures that the provided value for field is a string, throws an\n * invalidParams error if field is not a string.\n *\n * @param {Object} txParams - the transaction parameters object\n * @param {string} field - the current field being validated\n * @throws {ethErrors.rpc.invalidParams} Throws if field is not a string\n */\nfunction ensureFieldIsString(txParams, field) {\n  if (typeof txParams[field] !== 'string') {\n    throw ethErrors.rpc.invalidParams(\n      `Invalid transaction params: ${field} is not a string. got: (${txParams[field]})`,\n    );\n  }\n}\n\n/**\n * Ensures that the provided txParams has the proper 'type' specified for the\n * given field, if it is provided. If types do not match throws an\n * invalidParams error.\n *\n * @param {Object} txParams - the transaction parameters object\n * @param {'gasPrice' | 'maxFeePerGas' | 'maxPriorityFeePerGas'} field - the\n *  current field being validated\n * @throws {ethErrors.rpc.invalidParams} Throws if type does not match the\n *  expectations for provided field.\n */\nfunction ensureProperTransactionEnvelopeTypeProvided(txParams, field) {\n  switch (field) {\n    case 'maxFeePerGas':\n    case 'maxPriorityFeePerGas':\n      if (\n        txParams.type &&\n        txParams.type !== TRANSACTION_ENVELOPE_TYPES.FEE_MARKET\n      ) {\n        throw ethErrors.rpc.invalidParams(\n          `Invalid transaction envelope type: specified type \"${txParams.type}\" but including maxFeePerGas and maxPriorityFeePerGas requires type: \"${TRANSACTION_ENVELOPE_TYPES.FEE_MARKET}\"`,\n        );\n      }\n      break;\n    case 'gasPrice':\n    default:\n      if (\n        txParams.type &&\n        txParams.type === TRANSACTION_ENVELOPE_TYPES.FEE_MARKET\n      ) {\n        throw ethErrors.rpc.invalidParams(\n          `Invalid transaction envelope type: specified type \"${txParams.type}\" but included a gasPrice instead of maxFeePerGas and maxPriorityFeePerGas`,\n        );\n      }\n  }\n}\n\n/**\n * Validates the given tx parameters\n *\n * @param {Object} txParams - the tx params\n * @param {boolean} eip1559Compatibility - whether or not the current network supports EIP-1559 transactions\n * @throws {Error} if the tx params contains invalid fields\n */\nexport function validateTxParams(txParams, eip1559Compatibility = true) {\n  if (!txParams || typeof txParams !== 'object' || Array.isArray(txParams)) {\n    throw ethErrors.rpc.invalidParams(\n      'Invalid transaction params: must be an object.',\n    );\n  }\n  if (!txParams.to && !txParams.data) {\n    throw ethErrors.rpc.invalidParams(\n      'Invalid transaction params: must specify \"data\" for contract deployments, or \"to\" (and optionally \"data\") for all other types of transactions.',\n    );\n  }\n  if (isEIP1559Transaction({ txParams }) && !eip1559Compatibility) {\n    throw ethErrors.rpc.invalidParams(\n      'Invalid transaction params: params specify an EIP-1559 transaction but the current network does not support EIP-1559',\n    );\n  }\n\n  Object.entries(txParams).forEach(([key, value]) => {\n    // validate types\n    switch (key) {\n      case 'from':\n        validateFrom(txParams);\n        break;\n      case 'to':\n        validateRecipient(txParams);\n        break;\n      case 'gasPrice':\n        ensureProperTransactionEnvelopeTypeProvided(txParams, 'gasPrice');\n        ensureMutuallyExclusiveFieldsNotProvided(\n          txParams,\n          'gasPrice',\n          'maxFeePerGas',\n        );\n        ensureMutuallyExclusiveFieldsNotProvided(\n          txParams,\n          'gasPrice',\n          'maxPriorityFeePerGas',\n        );\n        ensureFieldIsString(txParams, 'gasPrice');\n        break;\n      case 'maxFeePerGas':\n        ensureProperTransactionEnvelopeTypeProvided(txParams, 'maxFeePerGas');\n        ensureMutuallyExclusiveFieldsNotProvided(\n          txParams,\n          'maxFeePerGas',\n          'gasPrice',\n        );\n        ensureFieldIsString(txParams, 'maxFeePerGas');\n        break;\n      case 'maxPriorityFeePerGas':\n        ensureProperTransactionEnvelopeTypeProvided(\n          txParams,\n          'maxPriorityFeePerGas',\n        );\n        ensureMutuallyExclusiveFieldsNotProvided(\n          txParams,\n          'maxPriorityFeePerGas',\n          'gasPrice',\n        );\n        ensureFieldIsString(txParams, 'maxPriorityFeePerGas');\n        break;\n      case 'value':\n        ensureFieldIsString(txParams, 'value');\n        if (value.toString().includes('-')) {\n          throw ethErrors.rpc.invalidParams(\n            `Invalid transaction value \"${value}\": not a positive number.`,\n          );\n        }\n\n        if (value.toString().includes('.')) {\n          throw ethErrors.rpc.invalidParams(\n            `Invalid transaction value of \"${value}\": number must be in wei.`,\n          );\n        }\n\n        if (!value.match(/^0x[a-fA-F0-9]+$/u)) {\n          throw ethErrors.rpc.invalidParams(\n            `Invalid transaction value of \"${value}\": not a valid hex string.`,\n          );\n        }\n        break;\n      case 'chainId':\n        if (typeof value !== 'number' && typeof value !== 'string') {\n          throw ethErrors.rpc.invalidParams(\n            `Invalid transaction params: ${key} is not a Number or hex string. got: (${value})`,\n          );\n        }\n        break;\n      default:\n        ensureFieldIsString(txParams, key);\n    }\n  });\n}\n\n/**\n * Validates the {@code from} field in the given tx params\n *\n * @param {Object} txParams\n * @throws {Error} if the from address isn't valid\n */\nexport function validateFrom(txParams) {\n  if (!(typeof txParams.from === 'string')) {\n    throw ethErrors.rpc.invalidParams(\n      `Invalid \"from\" address \"${txParams.from}\": not a string.`,\n    );\n  }\n  if (!isValidHexAddress(txParams.from, { allowNonPrefixed: false })) {\n    throw ethErrors.rpc.invalidParams('Invalid \"from\" address.');\n  }\n}\n\n/**\n * Validates the {@code to} field in the given tx params\n *\n * @param {Object} txParams - the tx params\n * @returns {Object} the tx params\n * @throws {Error} if the recipient is invalid OR there isn't tx data\n */\nexport function validateRecipient(txParams) {\n  if (txParams.to === '0x' || txParams.to === null) {\n    if (txParams.data) {\n      delete txParams.to;\n    } else {\n      throw ethErrors.rpc.invalidParams('Invalid \"to\" address.');\n    }\n  } else if (\n    txParams.to !== undefined &&\n    !isValidHexAddress(txParams.to, { allowNonPrefixed: false })\n  ) {\n    throw ethErrors.rpc.invalidParams('Invalid \"to\" address.');\n  }\n  return txParams;\n}\n\nexport const validateConfirmedExternalTransaction = ({\n  txMeta,\n  pendingTransactions,\n  confirmedTransactions,\n} = {}) => {\n  if (!txMeta || !txMeta.txParams) {\n    throw ethErrors.rpc.invalidParams(\n      '\"txMeta\" or \"txMeta.txParams\" is missing',\n    );\n  }\n  if (txMeta.status !== TRANSACTION_STATUSES.CONFIRMED) {\n    throw ethErrors.rpc.invalidParams(\n      'External transaction status should be \"confirmed\"',\n    );\n  }\n  const externalTxNonce = txMeta.txParams.nonce;\n  if (pendingTransactions && pendingTransactions.length > 0) {\n    const foundPendingTxByNonce = pendingTransactions.find(\n      (el) => el.txParams?.nonce === externalTxNonce,\n    );\n    if (foundPendingTxByNonce) {\n      throw ethErrors.rpc.invalidParams(\n        'External transaction nonce should not be in pending txs',\n      );\n    }\n  }\n  if (confirmedTransactions && confirmedTransactions.length > 0) {\n    const foundConfirmedTxByNonce = confirmedTransactions.find(\n      (el) => el.txParams?.nonce === externalTxNonce,\n    );\n    if (foundConfirmedTxByNonce) {\n      throw ethErrors.rpc.invalidParams(\n        'External transaction nonce should not be in confirmed txs',\n      );\n    }\n  }\n};\n\n/**\n * Returns a list of final states\n *\n * @returns {string[]} the states that can be considered final states\n */\nexport function getFinalStates() {\n  return [\n    TRANSACTION_STATUSES.REJECTED, // the user has responded no!\n    TRANSACTION_STATUSES.CONFIRMED, // the tx has been included in a block.\n    TRANSACTION_STATUSES.FAILED, // the tx failed for some reason, included on tx data.\n    TRANSACTION_STATUSES.DROPPED, // the tx nonce was already used\n  ];\n}\n\n/**\n * Normalizes tx receipt gas used to be a hexadecimal string.\n * It seems that sometimes the numerical values being returned from\n * this.query.getTransactionReceipt are BN instances and not strings.\n *\n * @param {string or BN instance} gasUsed\n * @returns normalized gas used as hexadecimal string\n */\nexport function normalizeTxReceiptGasUsed(gasUsed) {\n  return typeof gasUsed === 'string' ? gasUsed : gasUsed.toString(16);\n}\n","import EventEmitter from 'safe-event-emitter';\nimport log from 'loglevel';\nimport EthQuery from 'ethjs-query';\nimport { TRANSACTION_STATUSES } from '../../../../shared/constants/transaction';\n\n/**\n * Event emitter utility class for tracking the transactions as they\n * go from a pending state to a confirmed (mined in a block) state.\n *\n * As well as continues broadcast while in the pending state.\n */\nexport default class PendingTransactionTracker extends EventEmitter {\n  /**\n   * We wait this many blocks before emitting a 'tx:dropped' event\n   *\n   * This is because we could be talking to a node that is out of sync.\n   *\n   * @type {number}\n   */\n  DROPPED_BUFFER_COUNT = 3;\n\n  /**\n   * A map of transaction hashes to the number of blocks we've seen\n   * since first considering it dropped\n   *\n   * @type {Map<string, number>}\n   */\n  droppedBlocksBufferByHash = new Map();\n\n  /**\n   * @param {Object} config - Configuration.\n   * @param {Function} config.approveTransaction - Approves a transaction.\n   * @param {Function} config.confirmTransaction - Set a transaction as confirmed.\n   * @param {Function} config.getCompletedTransactions - Returns completed transactions.\n   * @param {Function} config.getPendingTransactions - Returns an array of pending transactions,\n   * @param {Object} config.nonceTracker - see nonce tracker\n   * @param {Object} config.provider - A network provider.\n   * @param {Object} config.query - An EthQuery instance.\n   * @param {Function} config.publishTransaction - Publishes a raw transaction,\n   */\n  constructor(config) {\n    super();\n    this.query = config.query || new EthQuery(config.provider);\n    this.nonceTracker = config.nonceTracker;\n    this.getPendingTransactions = config.getPendingTransactions;\n    this.getCompletedTransactions = config.getCompletedTransactions;\n    this.publishTransaction = config.publishTransaction;\n    this.approveTransaction = config.approveTransaction;\n    this.confirmTransaction = config.confirmTransaction;\n  }\n\n  /**\n   * checks the network for signed txs and releases the nonce global lock if it is\n   */\n  async updatePendingTxs() {\n    // in order to keep the nonceTracker accurate we block it while updating pending transactions\n    const nonceGlobalLock = await this.nonceTracker.getGlobalLock();\n    try {\n      const pendingTxs = this.getPendingTransactions();\n      await Promise.all(\n        pendingTxs.map((txMeta) => this._checkPendingTx(txMeta)),\n      );\n    } catch (err) {\n      log.error(\n        'PendingTransactionTracker - Error updating pending transactions',\n      );\n      log.error(err);\n    }\n    nonceGlobalLock.releaseLock();\n  }\n\n  /**\n   * Resubmits each pending transaction\n   *\n   * @param {string} blockNumber - the latest block number in hex\n   * @fires tx:warning\n   * @returns {Promise<void>}\n   */\n  async resubmitPendingTxs(blockNumber) {\n    const pending = this.getPendingTransactions();\n    if (!pending.length) {\n      return;\n    }\n    for (const txMeta of pending) {\n      try {\n        await this._resubmitTx(txMeta, blockNumber);\n      } catch (err) {\n        const errorMessage =\n          err.value?.message?.toLowerCase() || err.message.toLowerCase();\n        const isKnownTx =\n          // geth\n          errorMessage.includes('replacement transaction underpriced') ||\n          errorMessage.includes('known transaction') ||\n          // parity\n          errorMessage.includes('gas price too low to replace') ||\n          errorMessage.includes(\n            'transaction with the same hash was already imported',\n          ) ||\n          // other\n          errorMessage.includes('gateway timeout') ||\n          errorMessage.includes('nonce too low');\n        // ignore resubmit warnings, return early\n        if (isKnownTx) {\n          return;\n        }\n        // encountered real error - transition to error state\n        txMeta.warning = {\n          error: errorMessage,\n          message: 'There was an error when resubmitting this transaction.',\n        };\n        this.emit('tx:warning', txMeta, err);\n      }\n    }\n  }\n\n  /**\n   * Attempts to resubmit the given transaction with exponential backoff\n   *\n   * Will only attempt to retry the given tx every {@code 2**(txMeta.retryCount)} blocks.\n   *\n   * @param {Object} txMeta - the transaction metadata\n   * @param {string} latestBlockNumber - the latest block number in hex\n   * @returns {Promise<string|undefined>} the tx hash if retried\n   * @fires tx:block-update\n   * @fires tx:retry\n   * @private\n   */\n  async _resubmitTx(txMeta, latestBlockNumber) {\n    if (!txMeta.firstRetryBlockNumber) {\n      this.emit('tx:block-update', txMeta, latestBlockNumber);\n    }\n\n    const firstRetryBlockNumber =\n      txMeta.firstRetryBlockNumber || latestBlockNumber;\n    const txBlockDistance =\n      Number.parseInt(latestBlockNumber, 16) -\n      Number.parseInt(firstRetryBlockNumber, 16);\n\n    const retryCount = txMeta.retryCount || 0;\n\n    // Exponential backoff to limit retries at publishing (capped at ~15 minutes between retries)\n    if (txBlockDistance < Math.min(50, Math.pow(2, retryCount))) {\n      return undefined;\n    }\n\n    // Only auto-submit already-signed txs:\n    if (!('rawTx' in txMeta)) {\n      return this.approveTransaction(txMeta.id);\n    }\n\n    const { rawTx } = txMeta;\n    const txHash = await this.publishTransaction(rawTx);\n\n    // Increment successful tries:\n    this.emit('tx:retry', txMeta);\n    return txHash;\n  }\n\n  /**\n   * Query the network to see if the given {@code txMeta} has been included in a block\n   *\n   * @param {Object} txMeta - the transaction metadata\n   * @returns {Promise<void>}\n   * @fires tx:confirmed\n   * @fires tx:dropped\n   * @fires tx:failed\n   * @fires tx:warning\n   * @private\n   */\n\n  async _checkPendingTx(txMeta) {\n    const txHash = txMeta.hash;\n    const txId = txMeta.id;\n\n    // Only check submitted txs\n    if (txMeta.status !== TRANSACTION_STATUSES.SUBMITTED) {\n      return;\n    }\n\n    // extra check in case there was an uncaught error during the\n    // signature and submission process\n    if (!txHash) {\n      const noTxHashErr = new Error(\n        'We had an error while submitting this transaction, please try again.',\n      );\n      noTxHashErr.name = 'NoTxHashError';\n      this.emit('tx:failed', txId, noTxHashErr);\n\n      return;\n    }\n\n    if (await this._checkIfNonceIsTaken(txMeta)) {\n      this.emit('tx:dropped', txId);\n      return;\n    }\n\n    try {\n      const transactionReceipt = await this.query.getTransactionReceipt(txHash);\n      if (transactionReceipt?.blockNumber) {\n        const {\n          baseFeePerGas,\n          timestamp: blockTimestamp,\n        } = await this.query.getBlockByHash(\n          transactionReceipt?.blockHash,\n          false,\n        );\n\n        this.emit(\n          'tx:confirmed',\n          txId,\n          transactionReceipt,\n          baseFeePerGas,\n          blockTimestamp,\n        );\n        return;\n      }\n    } catch (err) {\n      txMeta.warning = {\n        error: err.message,\n        message: 'There was a problem loading this transaction.',\n      };\n      this.emit('tx:warning', txMeta, err);\n      return;\n    }\n\n    if (await this._checkIfTxWasDropped(txMeta)) {\n      this.emit('tx:dropped', txId);\n    }\n  }\n\n  /**\n   * Checks whether the nonce in the given {@code txMeta} is behind the network nonce\n   *\n   * @param {Object} txMeta - the transaction metadata\n   * @returns {Promise<boolean>}\n   * @private\n   */\n  async _checkIfTxWasDropped(txMeta) {\n    const {\n      hash: txHash,\n      txParams: { nonce, from },\n    } = txMeta;\n    const networkNextNonce = await this.query.getTransactionCount(from);\n\n    if (parseInt(nonce, 16) >= networkNextNonce.toNumber()) {\n      return false;\n    }\n\n    if (!this.droppedBlocksBufferByHash.has(txHash)) {\n      this.droppedBlocksBufferByHash.set(txHash, 0);\n    }\n\n    const currentBlockBuffer = this.droppedBlocksBufferByHash.get(txHash);\n\n    if (currentBlockBuffer < this.DROPPED_BUFFER_COUNT) {\n      this.droppedBlocksBufferByHash.set(txHash, currentBlockBuffer + 1);\n      return false;\n    }\n\n    this.droppedBlocksBufferByHash.delete(txHash);\n    return true;\n  }\n\n  /**\n   * Checks whether the nonce in the given {@code txMeta} is correct against the local set of transactions\n   *\n   * @param {Object} txMeta - the transaction metadata\n   * @returns {Promise<boolean>}\n   * @private\n   */\n  async _checkIfNonceIsTaken(txMeta) {\n    const address = txMeta.txParams.from;\n    const completed = this.getCompletedTransactions(address);\n    return completed.some(\n      // This is called while the transaction is in-flight, so it is possible that the\n      // list of completed transactions now includes the transaction we were looking at\n      // and if that is the case, don't consider the transaction to have taken its own nonce\n      (other) =>\n        !(other.id === txMeta.id) &&\n        other.txParams.nonce === txMeta.txParams.nonce,\n    );\n  }\n}\n","import EventEmitter from 'safe-event-emitter';\nimport { ObservableStore } from '@metamask/obs-store';\nimport log from 'loglevel';\nimport { keyBy, mapValues, omitBy, pickBy, sortBy } from 'lodash';\nimport createId from '../../../../shared/modules/random-id';\nimport { TRANSACTION_STATUSES } from '../../../../shared/constants/transaction';\nimport { METAMASK_CONTROLLER_EVENTS } from '../../metamask-controller';\nimport { transactionMatchesNetwork } from '../../../../shared/modules/transaction.utils';\nimport {\n  generateHistoryEntry,\n  replayHistory,\n  snapshotFromTxMeta,\n} from './lib/tx-state-history-helpers';\nimport {\n  getFinalStates,\n  normalizeAndValidateTxParams,\n  validateConfirmedExternalTransaction,\n} from './lib/util';\n\n/**\n * TransactionStatuses reimported from the shared transaction constants file\n *\n * @typedef {import(\n *  '../../../../shared/constants/transaction'\n * ).TransactionStatusString} TransactionStatusString\n */\n\n/**\n * @typedef {import('../../../../shared/constants/transaction').TxParams} TxParams\n */\n\n/**\n * @typedef {import(\n *  '../../../../shared/constants/transaction'\n * ).TransactionMeta} TransactionMeta\n */\n\n/**\n * @typedef {Object} TransactionState\n * @property {Record<string, TransactionMeta>} transactions - TransactionMeta\n *  keyed by the transaction's id.\n */\n\n/**\n * TransactionStateManager is responsible for the state of a transaction and\n * storing the transaction. It also has some convenience methods for finding\n * subsets of transactions.\n *\n * @param {Object} opts\n * @param {TransactionState} [opts.initState={ transactions: {} }] - initial\n *  transactions list keyed by id\n * @param {number} [opts.txHistoryLimit] - limit for how many finished\n *  transactions can hang around in state\n * @param {Function} opts.getNetwork - return network number\n */\nexport default class TransactionStateManager extends EventEmitter {\n  constructor({ initState, txHistoryLimit, getNetwork, getCurrentChainId }) {\n    super();\n\n    this.store = new ObservableStore({\n      transactions: {},\n      ...initState,\n    });\n    this.txHistoryLimit = txHistoryLimit;\n    this.getNetwork = getNetwork;\n    this.getCurrentChainId = getCurrentChainId;\n  }\n\n  /**\n   * Generates a TransactionMeta object consisting of the fields required for\n   * use throughout the extension. The argument here will override everything\n   * in the resulting transaction meta.\n   *\n   * TODO: Don't overwrite everything?\n   *\n   * @param {Partial<TransactionMeta>} opts - the object to use when\n   *  overwriting default keys of the TransactionMeta\n   * @returns {TransactionMeta} the default txMeta object\n   */\n  generateTxMeta(opts = {}) {\n    const netId = this.getNetwork();\n    const chainId = this.getCurrentChainId();\n    if (netId === 'loading') {\n      throw new Error('MetaMask is having trouble connecting to the network');\n    }\n\n    let dappSuggestedGasFees = null;\n\n    // If we are dealing with a transaction suggested by a dapp and not\n    // an internally created metamask transaction, we need to keep record of\n    // the originally submitted gasParams.\n    if (\n      opts.txParams &&\n      typeof opts.origin === 'string' &&\n      opts.origin !== 'metamask'\n    ) {\n      if (typeof opts.txParams.gasPrice !== 'undefined') {\n        dappSuggestedGasFees = {\n          gasPrice: opts.txParams.gasPrice,\n        };\n      } else if (\n        typeof opts.txParams.maxFeePerGas !== 'undefined' ||\n        typeof opts.txParams.maxPriorityFeePerGas !== 'undefined'\n      ) {\n        dappSuggestedGasFees = {\n          maxPriorityFeePerGas: opts.txParams.maxPriorityFeePerGas,\n          maxFeePerGas: opts.txParams.maxFeePerGas,\n        };\n      }\n\n      if (typeof opts.txParams.gas !== 'undefined') {\n        dappSuggestedGasFees = {\n          ...dappSuggestedGasFees,\n          gas: opts.txParams.gas,\n        };\n      }\n    }\n\n    return {\n      id: createId(),\n      time: new Date().getTime(),\n      status: TRANSACTION_STATUSES.UNAPPROVED,\n      metamaskNetworkId: netId,\n      originalGasEstimate: opts.txParams?.gas,\n      userEditedGasLimit: false,\n      chainId,\n      loadingDefaults: true,\n      dappSuggestedGasFees,\n      ...opts,\n    };\n  }\n\n  /**\n   * Get an object containing all unapproved transactions for the current\n   * network. This is the only transaction fetching method that returns an\n   * object, so it doesn't use getTransactions like everything else.\n   *\n   * @returns {Record<string, TransactionMeta>} Unapproved transactions keyed\n   *  by id\n   */\n  getUnapprovedTxList() {\n    const chainId = this.getCurrentChainId();\n    const network = this.getNetwork();\n    return pickBy(\n      this.store.getState().transactions,\n      (transaction) =>\n        transaction.status === TRANSACTION_STATUSES.UNAPPROVED &&\n        transactionMatchesNetwork(transaction, chainId, network),\n    );\n  }\n\n  /**\n   * Get all approved transactions for the current network. If an address is\n   * provided, the list will be further refined to only those transactions\n   * originating from the supplied address.\n   *\n   * @param {string} [address] - hex prefixed address to find transactions for.\n   * @returns {TransactionMeta[]} the filtered list of transactions\n   */\n  getApprovedTransactions(address) {\n    const searchCriteria = { status: TRANSACTION_STATUSES.APPROVED };\n    if (address) {\n      searchCriteria.from = address;\n    }\n    return this.getTransactions({ searchCriteria });\n  }\n\n  /**\n   * Get all pending transactions for the current network. If an address is\n   * provided, the list will be further refined to only those transactions\n   * originating from the supplied address.\n   *\n   * @param {string} [address] - hex prefixed address to find transactions for.\n   * @returns {TransactionMeta[]} the filtered list of transactions\n   */\n  getPendingTransactions(address) {\n    const searchCriteria = { status: TRANSACTION_STATUSES.SUBMITTED };\n    if (address) {\n      searchCriteria.from = address;\n    }\n    return this.getTransactions({ searchCriteria });\n  }\n\n  /**\n   * Get all confirmed transactions for the current network. If an address is\n   * provided, the list will be further refined to only those transactions\n   * originating from the supplied address.\n   *\n   * @param {string} [address] - hex prefixed address to find transactions for.\n   * @returns {TransactionMeta[]} the filtered list of transactions\n   */\n  getConfirmedTransactions(address) {\n    const searchCriteria = { status: TRANSACTION_STATUSES.CONFIRMED };\n    if (address) {\n      searchCriteria.from = address;\n    }\n    return this.getTransactions({ searchCriteria });\n  }\n\n  /**\n   * Adds the txMeta to the list of transactions in the store.\n   * if the list is over txHistoryLimit it will remove a transaction that\n   * is in its final state.\n   * it will also add the key `history` to the txMeta with the snap shot of\n   * the original object\n   *\n   * @param {TransactionMeta} txMeta - The TransactionMeta object to add.\n   * @returns {TransactionMeta} The same TransactionMeta, but with validated\n   *  txParams and transaction history.\n   */\n  addTransaction(txMeta) {\n    // normalize and validate txParams if present\n    if (txMeta.txParams) {\n      txMeta.txParams = normalizeAndValidateTxParams(txMeta.txParams, false);\n    }\n\n    this.once(`${txMeta.id}:signed`, () => {\n      this.removeAllListeners(`${txMeta.id}:rejected`);\n    });\n    this.once(`${txMeta.id}:rejected`, () => {\n      this.removeAllListeners(`${txMeta.id}:signed`);\n    });\n    // initialize history\n    txMeta.history = [];\n    // capture initial snapshot of txMeta for history\n    const snapshot = snapshotFromTxMeta(txMeta);\n    txMeta.history.push(snapshot);\n\n    const transactions = this.getTransactions({\n      filterToCurrentNetwork: false,\n    });\n    const { txHistoryLimit } = this;\n\n    // checks if the length of the tx history is longer then desired persistence\n    // limit and then if it is removes the oldest confirmed or rejected tx.\n    // Pending or unapproved transactions will not be removed by this\n    // operation. For safety of presenting a fully functional transaction UI\n    // representation, this function will not break apart transactions with the\n    // same nonce, per network. Not accounting for transactions of the same\n    // nonce and network combo can result in confusing or broken experiences\n    // in the UI.\n    //\n    // TODO: we are already limiting what we send to the UI, and in the future\n    // we will send UI only collected groups of transactions *per page* so at\n    // some point in the future, this persistence limit can be adjusted. When\n    // we do that I think we should figure out a better storage solution for\n    // transaction history entries.\n    const nonceNetworkSet = new Set();\n    const txsToDelete = transactions\n      .reverse()\n      .filter((tx) => {\n        const { nonce, from } = tx.txParams;\n        const { chainId, metamaskNetworkId, status } = tx;\n        const key = `${nonce}-${chainId ?? metamaskNetworkId}-${from}`;\n        if (nonceNetworkSet.has(key)) {\n          return false;\n        } else if (\n          nonceNetworkSet.size < txHistoryLimit - 1 ||\n          getFinalStates().includes(status) === false\n        ) {\n          nonceNetworkSet.add(key);\n          return false;\n        }\n        return true;\n      })\n      .map((tx) => tx.id);\n\n    this._deleteTransactions(txsToDelete);\n    this._addTransactionsToState([txMeta]);\n    return txMeta;\n  }\n\n  addExternalTransaction(txMeta) {\n    const fromAddress = txMeta?.txParams?.from;\n    const confirmedTransactions = this.getConfirmedTransactions(fromAddress);\n    const pendingTransactions = this.getPendingTransactions(fromAddress);\n    validateConfirmedExternalTransaction({\n      txMeta,\n      pendingTransactions,\n      confirmedTransactions,\n    });\n    this._addTransactionsToState([txMeta]);\n    return txMeta;\n  }\n\n  /**\n   * @param {number} txId\n   * @returns {TransactionMeta} the txMeta who matches the given id if none found\n   * for the network returns undefined\n   */\n  getTransaction(txId) {\n    const { transactions } = this.store.getState();\n    return transactions[txId];\n  }\n\n  /**\n   * updates the txMeta in the list and adds a history entry\n   *\n   * @param {Object} txMeta - the txMeta to update\n   * @param {string} [note] - a note about the update for history\n   */\n  updateTransaction(txMeta, note) {\n    // normalize and validate txParams if present\n    if (txMeta.txParams) {\n      txMeta.txParams = normalizeAndValidateTxParams(txMeta.txParams, false);\n    }\n\n    // create txMeta snapshot for history\n    const currentState = snapshotFromTxMeta(txMeta);\n    // recover previous tx state obj\n    const previousState = replayHistory(txMeta.history);\n    // generate history entry and add to history\n    const entry = generateHistoryEntry(previousState, currentState, note);\n    if (entry.length) {\n      txMeta.history.push(entry);\n    }\n\n    // commit txMeta to state\n    const txId = txMeta.id;\n    this.store.updateState({\n      transactions: {\n        ...this.store.getState().transactions,\n        [txId]: txMeta,\n      },\n    });\n  }\n\n  /**\n   * SearchCriteria can search in any key in TxParams or the base\n   * TransactionMeta. This type represents any key on either of those two\n   * types.\n   *\n   * @typedef {TxParams[keyof TxParams] | TransactionMeta[keyof TransactionMeta]} SearchableKeys\n   */\n\n  /**\n   * Predicates can either be strict values, which is shorthand for using\n   * strict equality, or a method that receives he value of the specified key\n   * and returns a boolean.\n   *\n   * @typedef {(v: unknown) => boolean | unknown} FilterPredicate\n   */\n\n  /**\n   * Retrieve a list of transactions from state. By default this will return\n   * the full list of Transactions for the currently selected chain/network.\n   * Additional options can be provided to change what is included in the final\n   * list.\n   *\n   * @param opts - options to change filter behavior\n   * @param {Record<SearchableKeys, FilterPredicate>} [opts.searchCriteria] -\n   *  an object with keys that match keys in TransactionMeta or TxParams, and\n   *  values that are predicates. Predicates can either be strict values,\n   *  which is shorthand for using strict equality, or a method that receives\n   *  the value of the specified key and returns a boolean. The transaction\n   *  list will be filtered to only those items that the predicate returns\n   *  truthy for. **HINT**: `err: undefined` is like looking for a tx with no\n   *  err. so you can also search txs that don't have something as well by\n   *  setting the value as undefined.\n   * @param {TransactionMeta[]} [opts.initialList] - If provided the filtering\n   *  will occur on the provided list. By default this will be the full list\n   *  from state sorted by time ASC.\n   * @param {boolean} [opts.filterToCurrentNetwork] - Filter transaction\n   *  list to only those that occurred on the current chain or network.\n   *  Defaults to true.\n   * @param {number} [opts.limit] - limit the number of transactions returned\n   *  to N unique nonces.\n   * @returns {TransactionMeta[]} The TransactionMeta objects that all provided\n   *  predicates return truthy for.\n   */\n  getTransactions({\n    searchCriteria = {},\n    initialList,\n    filterToCurrentNetwork = true,\n    limit,\n  } = {}) {\n    const chainId = this.getCurrentChainId();\n    const network = this.getNetwork();\n    // searchCriteria is an object that might have values that aren't predicate\n    // methods. When providing any other value type (string, number, etc), we\n    // consider this shorthand for \"check the value at key for strict equality\n    // with the provided value\". To conform this object to be only methods, we\n    // mapValues (lodash) such that every value on the object is a method that\n    // returns a boolean.\n    const predicateMethods = mapValues(searchCriteria, (predicate) => {\n      return typeof predicate === 'function'\n        ? predicate\n        : (v) => v === predicate;\n    });\n\n    // If an initial list is provided we need to change it back into an object\n    // first, so that it matches the shape of our state. This is done by the\n    // lodash keyBy method. This is the edge case for this method, typically\n    // initialList will be undefined.\n    const transactionsToFilter = initialList\n      ? keyBy(initialList, 'id')\n      : this.store.getState().transactions;\n\n    // Combine sortBy and pickBy to transform our state object into an array of\n    // matching transactions that are sorted by time.\n    const filteredTransactions = sortBy(\n      pickBy(transactionsToFilter, (transaction) => {\n        // default matchesCriteria to the value of transactionMatchesNetwork\n        // when filterToCurrentNetwork is true.\n        if (\n          filterToCurrentNetwork &&\n          transactionMatchesNetwork(transaction, chainId, network) === false\n        ) {\n          return false;\n        }\n        // iterate over the predicateMethods keys to check if the transaction\n        // matches the searchCriteria\n        for (const [key, predicate] of Object.entries(predicateMethods)) {\n          // We return false early as soon as we know that one of the specified\n          // search criteria do not match the transaction. This prevents\n          // needlessly checking all criteria when we already know the criteria\n          // are not fully satisfied. We check both txParams and the base\n          // object as predicate keys can be either.\n          if (key in transaction.txParams) {\n            if (predicate(transaction.txParams[key]) === false) {\n              return false;\n            }\n          } else if (predicate(transaction[key]) === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }),\n      'time',\n    );\n    if (limit !== undefined) {\n      // We need to have all transactions of a given nonce in order to display\n      // necessary details in the UI. We use the size of this set to determine\n      // whether we have reached the limit provided, thus ensuring that all\n      // transactions of nonces we include will be sent to the UI.\n      const nonces = new Set();\n      const txs = [];\n      // By default, the transaction list we filter from is sorted by time ASC.\n      // To ensure that filtered results prefers the newest transactions we\n      // iterate from right to left, inserting transactions into front of a new\n      // array. The original order is preserved, but we ensure that newest txs\n      // are preferred.\n      for (let i = filteredTransactions.length - 1; i > -1; i--) {\n        const txMeta = filteredTransactions[i];\n        const { nonce } = txMeta.txParams;\n        if (!nonces.has(nonce)) {\n          if (nonces.size < limit) {\n            nonces.add(nonce);\n          } else {\n            continue;\n          }\n        }\n        // Push transaction into the beginning of our array to ensure the\n        // original order is preserved.\n        txs.unshift(txMeta);\n      }\n      return txs;\n    }\n    return filteredTransactions;\n  }\n\n  /**\n   * Update status of the TransactionMeta with provided id to 'rejected'.\n   * After setting the status, the TransactionMeta is deleted from state.\n   *\n   * TODO: Should we show historically rejected transactions somewhere in the\n   * UI? Seems like it could be valuable for information purposes. Of course\n   * only after limit issues are reduced.\n   *\n   * @param {number} txId - the target TransactionMeta's Id\n   */\n  setTxStatusRejected(txId) {\n    this._setTransactionStatus(txId, TRANSACTION_STATUSES.REJECTED);\n    this._deleteTransaction(txId);\n  }\n\n  /**\n   * Update status of the TransactionMeta with provided id to 'unapproved'\n   *\n   * @param {number} txId - the target TransactionMeta's Id\n   */\n  setTxStatusUnapproved(txId) {\n    this._setTransactionStatus(txId, TRANSACTION_STATUSES.UNAPPROVED);\n  }\n\n  /**\n   * Update status of the TransactionMeta with provided id to 'approved'\n   *\n   * @param {number} txId - the target TransactionMeta's Id\n   */\n  setTxStatusApproved(txId) {\n    this._setTransactionStatus(txId, TRANSACTION_STATUSES.APPROVED);\n  }\n\n  /**\n   * Update status of the TransactionMeta with provided id to 'signed'\n   *\n   * @param {number} txId - the target TransactionMeta's Id\n   */\n  setTxStatusSigned(txId) {\n    this._setTransactionStatus(txId, TRANSACTION_STATUSES.SIGNED);\n  }\n\n  /**\n   * Update status of the TransactionMeta with provided id to 'submitted'\n   * and sets the 'submittedTime' property with the current Unix epoch time.\n   *\n   * @param {number} txId - the target TransactionMeta's Id\n   */\n  setTxStatusSubmitted(txId) {\n    const txMeta = this.getTransaction(txId);\n    txMeta.submittedTime = new Date().getTime();\n    this.updateTransaction(txMeta, 'txStateManager - add submitted time stamp');\n    this._setTransactionStatus(txId, TRANSACTION_STATUSES.SUBMITTED);\n  }\n\n  /**\n   * Update status of the TransactionMeta with provided id to 'confirmed'\n   *\n   * @param {number} txId - the target TransactionMeta's Id\n   */\n  setTxStatusConfirmed(txId) {\n    this._setTransactionStatus(txId, TRANSACTION_STATUSES.CONFIRMED);\n  }\n\n  /**\n   * Update status of the TransactionMeta with provided id to 'dropped'\n   *\n   * @param {number} txId - the target TransactionMeta's Id\n   */\n  setTxStatusDropped(txId) {\n    this._setTransactionStatus(txId, TRANSACTION_STATUSES.DROPPED);\n  }\n\n  /**\n   * Update status of the TransactionMeta with provided id to 'failed' and put\n   * the error on the TransactionMeta object.\n   *\n   * @param {number} txId - the target TransactionMeta's Id\n   * @param {Error} err - error object\n   */\n  setTxStatusFailed(txId, err) {\n    const error = err || new Error('Internal metamask failure');\n\n    const txMeta = this.getTransaction(txId);\n    txMeta.err = {\n      message: error.message?.toString() || error.toString(),\n      rpc: error.value,\n      stack: error.stack,\n    };\n    this.updateTransaction(\n      txMeta,\n      'transactions:tx-state-manager#fail - add error',\n    );\n    this._setTransactionStatus(txId, TRANSACTION_STATUSES.FAILED);\n  }\n\n  /**\n   * Removes all transactions for the given address on the current network,\n   * preferring chainId for comparison over networkId.\n   *\n   * @param {string} address - hex string of the from address on the txParams\n   *  to remove\n   */\n  wipeTransactions(address) {\n    // network only tx\n    const { transactions } = this.store.getState();\n    const network = this.getNetwork();\n    const chainId = this.getCurrentChainId();\n\n    // Update state\n    this.store.updateState({\n      transactions: omitBy(\n        transactions,\n        (transaction) =>\n          transaction.txParams.from === address &&\n          transactionMatchesNetwork(transaction, chainId, network),\n      ),\n    });\n  }\n\n  /**\n   * Filters out the unapproved transactions from state\n   */\n  clearUnapprovedTxs() {\n    this.store.updateState({\n      transactions: omitBy(\n        this.store.getState().transactions,\n        (transaction) => transaction.status === TRANSACTION_STATUSES.UNAPPROVED,\n      ),\n    });\n  }\n\n  //\n  //           PRIVATE METHODS\n  //\n\n  /**\n   * Updates a transaction's status in state, and then emits events that are\n   * subscribed to elsewhere. See below for best guesses on where and how these\n   * events are received.\n   *\n   * @param {number} txId - the TransactionMeta Id\n   * @param {TransactionStatusString} status - the status to set on the\n   *  TransactionMeta\n   * @fires txMeta.id:txMeta.status - every time a transaction's status changes\n   *  we emit the change passing along the id. This does not appear to be used\n   *  outside of this file, which only listens to this to unsubscribe listeners\n   *  of :rejected and :signed statuses when the inverse status changes. Likely\n   *  safe to drop.\n   * @fires tx:status-update - every time a transaction's status changes we\n   *  emit this event and pass txId and status. This event is subscribed to in\n   *  the TransactionController and re-broadcast by the TransactionController.\n   *  It is used internally within the TransactionController to try and update\n   *  pending transactions on each new block (from blockTracker). It's also\n   *  subscribed to in metamask-controller to display a browser notification on\n   *  confirmed or failed transactions.\n   * @fires txMeta.id:finished - When a transaction moves to a finished state\n   *  this event is emitted, which is used in the TransactionController to pass\n   *  along details of the transaction to the dapp that suggested them. This\n   *  pattern is replicated across all of the message managers and can likely\n   *  be supplemented or replaced by the ApprovalController.\n   * @fires updateBadge - When the number of transactions changes in state,\n   *  the badge in the browser extension bar should be updated to reflect the\n   *  number of pending transactions. This particular emit doesn't appear to\n   *  bubble up anywhere that is actually used. TransactionController emits\n   *  this *anytime the state changes*, so this is probably superfluous.\n   */\n  _setTransactionStatus(txId, status) {\n    const txMeta = this.getTransaction(txId);\n\n    if (!txMeta) {\n      return;\n    }\n\n    txMeta.status = status;\n    try {\n      this.updateTransaction(\n        txMeta,\n        `txStateManager: setting status to ${status}`,\n      );\n      this.emit(`${txMeta.id}:${status}`, txId);\n      this.emit(`tx:status-update`, txId, status);\n      if (\n        [\n          TRANSACTION_STATUSES.SUBMITTED,\n          TRANSACTION_STATUSES.REJECTED,\n          TRANSACTION_STATUSES.FAILED,\n        ].includes(status)\n      ) {\n        this.emit(`${txMeta.id}:finished`, txMeta);\n      }\n      this.emit(METAMASK_CONTROLLER_EVENTS.UPDATE_BADGE);\n    } catch (error) {\n      log.error(error);\n    }\n  }\n\n  /**\n   * Adds one or more transactions into state. This is not intended for\n   * external use.\n   *\n   * @private\n   * @param {TransactionMeta[]} transactions - the list of transactions to save\n   */\n  _addTransactionsToState(transactions) {\n    this.store.updateState({\n      transactions: transactions.reduce((result, newTx) => {\n        result[newTx.id] = newTx;\n        return result;\n      }, this.store.getState().transactions),\n    });\n  }\n\n  /**\n   * removes one transaction from state. This is not intended for external use.\n   *\n   * @private\n   * @param {number} targetTransactionId - the transaction to delete\n   */\n  _deleteTransaction(targetTransactionId) {\n    const { transactions } = this.store.getState();\n    delete transactions[targetTransactionId];\n    this.store.updateState({\n      transactions,\n    });\n  }\n\n  /**\n   * removes multiple transaction from state. This is not intended for external use.\n   *\n   * @private\n   * @param {number[]} targetTransactionIds - the transactions to delete\n   */\n  _deleteTransactions(targetTransactionIds) {\n    const { transactions } = this.store.getState();\n    targetTransactionIds.forEach((transactionId) => {\n      delete transactions[transactionId];\n    });\n    this.store.updateState({\n      transactions,\n    });\n  }\n}\n","import EthQuery from 'ethjs-query';\nimport log from 'loglevel';\nimport { addHexPrefix } from 'ethereumjs-util';\nimport { cloneDeep } from 'lodash';\nimport { hexToBn, BnMultiplyByFraction, bnToHex } from '../../lib/util';\n\n/**\n * Result of gas analysis, including either a gas estimate for a successful analysis, or\n * debug information for a failed analysis.\n *\n * @typedef {Object} GasAnalysisResult\n * @property {string} blockGasLimit - The gas limit of the block used for the analysis\n * @property {string} estimatedGasHex - The estimated gas, in hexadecimal\n * @property {Object} simulationFails - Debug information about why an analysis failed\n */\n\n/**\n * tx-gas-utils are gas utility methods for Transaction manager\n * its passed ethquery\n * and used to do things like calculate gas of a tx.\n *\n * @param {Object} provider - A network provider.\n */\n\nexport default class TxGasUtil {\n  constructor(provider) {\n    this.query = new EthQuery(provider);\n  }\n\n  /**\n   * @param {Object} txMeta - the txMeta object\n   * @returns {GasAnalysisResult} The result of the gas analysis\n   */\n  async analyzeGasUsage(txMeta) {\n    const block = await this.query.getBlockByNumber('latest', false);\n\n    // fallback to block gasLimit\n    const blockGasLimitBN = hexToBn(block.gasLimit);\n    const saferGasLimitBN = BnMultiplyByFraction(blockGasLimitBN, 19, 20);\n    let estimatedGasHex = bnToHex(saferGasLimitBN);\n    let simulationFails;\n    try {\n      estimatedGasHex = await this.estimateTxGas(txMeta);\n    } catch (error) {\n      log.warn(error);\n      simulationFails = {\n        reason: error.message,\n        errorKey: error.errorKey,\n        debug: { blockNumber: block.number, blockGasLimit: block.gasLimit },\n      };\n    }\n\n    return { blockGasLimit: block.gasLimit, estimatedGasHex, simulationFails };\n  }\n\n  /**\n   * Estimates the tx's gas usage\n   *\n   * @param {Object} txMeta - the txMeta object\n   * @returns {string} the estimated gas limit as a hex string\n   */\n  async estimateTxGas(txMeta) {\n    const txParams = cloneDeep(txMeta.txParams);\n\n    // `eth_estimateGas` can fail if the user has insufficient balance for the\n    // value being sent, or for the gas cost. We don't want to check their\n    // balance here, we just want the gas estimate. The gas price is removed\n    // to skip those balance checks. We check balance elsewhere. We also delete\n    // maxFeePerGas and maxPriorityFeePerGas to support EIP-1559 txs.\n    delete txParams.gasPrice;\n    delete txParams.maxFeePerGas;\n    delete txParams.maxPriorityFeePerGas;\n\n    // estimate tx gas requirements\n    return await this.query.estimateGas(txParams);\n  }\n\n  /**\n   * Adds a gas buffer with out exceeding the block gas limit\n   *\n   * @param {string} initialGasLimitHex - the initial gas limit to add the buffer too\n   * @param {string} blockGasLimitHex - the block gas limit\n   * @param multiplier\n   * @returns {string} the buffered gas limit as a hex string\n   */\n  addGasBuffer(initialGasLimitHex, blockGasLimitHex, multiplier = 1.5) {\n    const initialGasLimitBn = hexToBn(initialGasLimitHex);\n    const blockGasLimitBn = hexToBn(blockGasLimitHex);\n    const upperGasLimitBn = blockGasLimitBn.muln(0.9);\n    const bufferedGasLimitBn = initialGasLimitBn.muln(multiplier);\n\n    // if initialGasLimit is above blockGasLimit, dont modify it\n    if (initialGasLimitBn.gt(upperGasLimitBn)) {\n      return bnToHex(initialGasLimitBn);\n    }\n    // if bufferedGasLimit is below blockGasLimit, use bufferedGasLimit\n    if (bufferedGasLimitBn.lt(upperGasLimitBn)) {\n      return bnToHex(bufferedGasLimitBn);\n    }\n    // otherwise use blockGasLimit\n    return bnToHex(upperGasLimitBn);\n  }\n\n  async getBufferedGasLimit(txMeta, multiplier) {\n    const {\n      blockGasLimit,\n      estimatedGasHex,\n      simulationFails,\n    } = await this.analyzeGasUsage(txMeta);\n\n    // add additional gas buffer to our estimation for safety\n    const gasLimit = this.addGasBuffer(\n      addHexPrefix(estimatedGasHex),\n      blockGasLimit,\n      multiplier,\n    );\n    return { gasLimit, simulationFails };\n  }\n}\n","'use strict'\n\nconst assert = require('assert')\nconst removeSlash = require('remove-trailing-slash')\nconst looselyValidate = require('@segment/loosely-validate-event')\nconst axios = require('axios')\nconst axiosRetry = require('axios-retry')\nconst ms = require('ms')\nconst uuid = require('uuid/v4')\nconst md5 = require('md5')\nconst version = require('./package.json').version\nconst isString = require('lodash.isstring')\n\nconst setImmediate = global.setImmediate || process.nextTick.bind(process)\nconst noop = () => {}\n\nclass Analytics {\n  /**\n   * Initialize a new `Analytics` with your Segment project's `writeKey` and an\n   * optional dictionary of `options`.\n   *\n   * @param {String} writeKey\n   * @param {Object} [options] (optional)\n   *   @property {Number} flushAt (default: 20)\n   *   @property {Number} flushInterval (default: 10000)\n   *   @property {String} host (default: 'https://api.segment.io')\n   *   @property {Boolean} enable (default: true)\n   */\n\n  constructor (writeKey, options) {\n    options = options || {}\n\n    assert(writeKey, 'You must pass your Segment project\\'s write key.')\n\n    this.queue = []\n    this.writeKey = writeKey\n    this.host = removeSlash(options.host || 'https://api.segment.io')\n    this.timeout = options.timeout || false\n    this.flushAt = Math.max(options.flushAt, 1) || 20\n    this.flushInterval = options.flushInterval || 10000\n    this.flushed = false\n    Object.defineProperty(this, 'enable', {\n      configurable: false,\n      writable: false,\n      enumerable: true,\n      value: typeof options.enable === 'boolean' ? options.enable : true\n    })\n    this.axiosClient = axios.create()\n    axiosRetry(this.axiosClient, {\n      retries: options.retryCount || 3,\n      retryCondition: this._isErrorRetryable,\n      retryDelay: axiosRetry.exponentialDelay\n    })\n  }\n\n  _validate (message, type) {\n    try {\n      looselyValidate(message, type)\n    } catch (e) {\n      if (e.message === 'Your message must be < 32kb.') {\n        console.log('Your message must be < 32kb. This is currently surfaced as a warning to allow clients to update. Versions released after August 1, 2018 will throw an error instead. Please update your code before then.', message)\n        return\n      }\n      throw e\n    }\n  }\n\n  /**\n   * Send an identify `message`.\n   *\n   * @param {Object} message\n   * @param {Function} [callback] (optional)\n   * @return {Analytics}\n   */\n\n  identify (message, callback) {\n    this._validate(message, 'identify')\n    this.enqueue('identify', message, callback)\n    return this\n  }\n\n  /**\n   * Send a group `message`.\n   *\n   * @param {Object} message\n   * @param {Function} [callback] (optional)\n   * @return {Analytics}\n   */\n\n  group (message, callback) {\n    this._validate(message, 'group')\n    this.enqueue('group', message, callback)\n    return this\n  }\n\n  /**\n   * Send a track `message`.\n   *\n   * @param {Object} message\n   * @param {Function} [callback] (optional)\n   * @return {Analytics}\n   */\n\n  track (message, callback) {\n    this._validate(message, 'track')\n    this.enqueue('track', message, callback)\n    return this\n  }\n\n  /**\n   * Send a page `message`.\n   *\n   * @param {Object} message\n   * @param {Function} [callback] (optional)\n   * @return {Analytics}\n   */\n\n  page (message, callback) {\n    this._validate(message, 'page')\n    this.enqueue('page', message, callback)\n    return this\n  }\n\n  /**\n   * Send a screen `message`.\n   *\n   * @param {Object} message\n   * @param {Function} fn (optional)\n   * @return {Analytics}\n   */\n\n  screen (message, callback) {\n    this._validate(message, 'screen')\n    this.enqueue('screen', message, callback)\n    return this\n  }\n\n  /**\n   * Send an alias `message`.\n   *\n   * @param {Object} message\n   * @param {Function} [callback] (optional)\n   * @return {Analytics}\n   */\n\n  alias (message, callback) {\n    this._validate(message, 'alias')\n    this.enqueue('alias', message, callback)\n    return this\n  }\n\n  /**\n   * Add a `message` of type `type` to the queue and\n   * check whether it should be flushed.\n   *\n   * @param {String} type\n   * @param {Object} message\n   * @param {Function} [callback] (optional)\n   * @api private\n   */\n\n  enqueue (type, message, callback) {\n    callback = callback || noop\n\n    if (!this.enable) {\n      return setImmediate(callback)\n    }\n\n    message = Object.assign({}, message)\n    message.type = type\n    message.context = Object.assign({\n      library: {\n        name: 'analytics-node',\n        version\n      }\n    }, message.context)\n\n    message._metadata = Object.assign({\n      nodeVersion: process.versions.node\n    }, message._metadata)\n\n    if (!message.timestamp) {\n      message.timestamp = new Date()\n    }\n\n    if (!message.messageId) {\n      // We md5 the messaage to add more randomness. This is primarily meant\n      // for use in the browser where the uuid package falls back to Math.random()\n      // which is not a great source of randomness.\n      // Borrowed from analytics.js (https://github.com/segment-integrations/analytics.js-integration-segmentio/blob/a20d2a2d222aeb3ab2a8c7e72280f1df2618440e/lib/index.js#L255-L256).\n      message.messageId = `node-${md5(JSON.stringify(message))}-${uuid()}`\n    }\n\n    // Historically this library has accepted strings and numbers as IDs.\n    // However, our spec only allows strings. To avoid breaking compatibility,\n    // we'll coerce these to strings if they aren't already.\n    if (message.anonymousId && !isString(message.anonymousId)) {\n      message.anonymousId = JSON.stringify(message.anonymousId)\n    }\n    if (message.userId && !isString(message.userId)) {\n      message.userId = JSON.stringify(message.userId)\n    }\n\n    this.queue.push({ message, callback })\n\n    if (!this.flushed) {\n      this.flushed = true\n      this.flush()\n      return\n    }\n\n    if (this.queue.length >= this.flushAt) {\n      this.flush()\n    }\n\n    if (this.flushInterval && !this.timer) {\n      this.timer = setTimeout(this.flush.bind(this), this.flushInterval)\n    }\n  }\n\n  /**\n   * Flush the current queue\n   *\n   * @param {Function} [callback] (optional)\n   * @return {Analytics}\n   */\n\n  flush (callback) {\n    callback = callback || noop\n\n    if (!this.enable) {\n      return setImmediate(callback)\n    }\n\n    if (this.timer) {\n      clearTimeout(this.timer)\n      this.timer = null\n    }\n\n    if (!this.queue.length) {\n      return setImmediate(callback)\n    }\n\n    const items = this.queue.splice(0, this.flushAt)\n    const callbacks = items.map(item => item.callback)\n    const messages = items.map(item => item.message)\n\n    const data = {\n      batch: messages,\n      timestamp: new Date(),\n      sentAt: new Date()\n    }\n\n    const done = err => {\n      callbacks.forEach(callback => callback(err))\n      callback(err, data)\n    }\n\n    // Don't set the user agent if we're not on a browser. The latest spec allows\n    // the User-Agent header (see https://fetch.spec.whatwg.org/#terminology-headers\n    // and https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/setRequestHeader),\n    // but browsers such as Chrome and Safari have not caught up.\n    const headers = {}\n    if (typeof window === 'undefined') {\n      headers['user-agent'] = `analytics-node/${version}`\n    }\n\n    const req = {\n      method: 'POST',\n      url: `${this.host}/v1/batch`,\n      auth: {\n        username: this.writeKey\n      },\n      data,\n      headers\n    }\n\n    if (this.timeout) {\n      req.timeout = typeof this.timeout === 'string' ? ms(this.timeout) : this.timeout\n    }\n\n    this.axiosClient(req)\n      .then(() => done())\n      .catch(err => {\n        if (err.response) {\n          const error = new Error(err.response.statusText)\n          return done(error)\n        }\n\n        done(err)\n      })\n  }\n\n  _isErrorRetryable (error) {\n    // Retry Network Errors.\n    if (axiosRetry.isNetworkError(error)) {\n      return true\n    }\n\n    if (!error.response) {\n      // Cannot determine if the request can be retried\n      return false\n    }\n\n    // Retry Server Errors (5xx).\n    if (error.response.status >= 500 && error.response.status <= 599) {\n      return true\n    }\n\n    // Retry if rate limited.\n    if (error.response.status === 429) {\n      return true\n    }\n\n    return false\n  }\n}\n\nmodule.exports = Analytics\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Wallet = require('./index.js');\nvar ethUtil = require('ethereumjs-util');\nvar crypto = require('crypto');\nvar scryptsy = require('scryptsy');\nvar utf8 = require('utf8');\nvar aesjs = require('aes-js');\nvar Buffer = require('safe-buffer').Buffer;\n\nfunction assert(val, msg) {\n  if (!val) {\n    throw new Error(msg || 'Assertion failed');\n  }\n}\n\nfunction runCipherBuffer(cipher, data) {\n  return Buffer.concat([cipher.update(data), cipher.final()]);\n}\n\nvar Thirdparty = {};\n\n/*\n * opts:\n * - digest - digest algorithm, defaults to md5\n * - count - hash iterations\n * - keysize - desired key size\n * - ivsize - desired IV size\n *\n * Algorithm form https://www.openssl.org/docs/manmaster/crypto/EVP_BytesToKey.html\n *\n * FIXME: not optimised at all\n */\nfunction evp_kdf(data, salt, opts) {\n  // eslint-disable-line\n  // A single EVP iteration, returns `D_i`, where block equlas to `D_(i-1)`\n  function iter(block) {\n    var hash = crypto.createHash(opts.digest || 'md5');\n    hash.update(block);\n    hash.update(data);\n    hash.update(salt);\n    block = hash.digest();\n\n    for (var i = 1; i < (opts.count || 1); i++) {\n      hash = crypto.createHash(opts.digest || 'md5');\n      hash.update(block);\n      block = hash.digest();\n    }\n\n    return block;\n  }\n\n  var keysize = opts.keysize || 16;\n  var ivsize = opts.ivsize || 16;\n\n  var ret = [];\n\n  var i = 0;\n  while (Buffer.concat(ret).length < keysize + ivsize) {\n    ret[i] = iter(i === 0 ? Buffer.alloc(0) : ret[i - 1]);\n    i++;\n  }\n\n  var tmp = Buffer.concat(ret);\n\n  return {\n    key: tmp.slice(0, keysize),\n    iv: tmp.slice(keysize, keysize + ivsize)\n  };\n}\n\n// http://stackoverflow.com/questions/25288311/cryptojs-aes-pattern-always-ends-with\nfunction decodeCryptojsSalt(input) {\n  var ciphertext = Buffer.from(input, 'base64');\n  if (ciphertext.slice(0, 8).toString() === 'Salted__') {\n    return {\n      salt: ciphertext.slice(8, 16),\n      ciphertext: ciphertext.slice(16)\n    };\n  } else {\n    return {\n      ciphertext: ciphertext\n    };\n  }\n}\n\n/*\n * This wallet format is created by https://github.com/SilentCicero/ethereumjs-accounts\n * and used on https://www.myetherwallet.com/\n */\nThirdparty.fromEtherWallet = function (input, password) {\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  var privKey;\n  if (!json.locked) {\n    if (json.private.length !== 64) {\n      throw new Error('Invalid private key length');\n    }\n\n    privKey = Buffer.from(json.private, 'hex');\n  } else {\n    if (typeof password !== 'string') {\n      throw new Error('Password required');\n    }\n    if (password.length < 7) {\n      throw new Error('Password must be at least 7 characters');\n    }\n\n    // the \"encrypted\" version has the low 4 bytes\n    // of the hash of the address appended\n    var cipher = json.encrypted ? json.private.slice(0, 128) : json.private;\n\n    // decode openssl ciphertext + salt encoding\n    cipher = decodeCryptojsSalt(cipher);\n\n    if (!cipher.salt) {\n      throw new Error('Unsupported EtherWallet key format');\n    }\n\n    // derive key/iv using OpenSSL EVP as implemented in CryptoJS\n    var evp = evp_kdf(Buffer.from(password), cipher.salt, { keysize: 32, ivsize: 16 });\n\n    var decipher = crypto.createDecipheriv('aes-256-cbc', evp.key, evp.iv);\n    privKey = runCipherBuffer(decipher, Buffer.from(cipher.ciphertext));\n\n    // NOTE: yes, they've run it through UTF8\n    privKey = Buffer.from(utf8.decode(privKey.toString()), 'hex');\n  }\n\n  var wallet = new Wallet(privKey);\n\n  if (wallet.getAddressString() !== json.address) {\n    throw new Error('Invalid private key or address');\n  }\n\n  return wallet;\n};\n\nThirdparty.fromEtherCamp = function (passphrase) {\n  return new Wallet(ethUtil.keccak256(Buffer.from(passphrase)));\n};\n\nThirdparty.fromKryptoKit = function (entropy, password) {\n  function kryptoKitBrokenScryptSeed(buf) {\n    // js-scrypt calls `Buffer.from(String(salt), 'utf8')` on the seed even though it is a buffer\n    //\n    // The `buffer`` implementation used does the below transformation (doesn't matches the current version):\n    // https://github.com/feross/buffer/blob/67c61181b938b17d10dbfc0a545f713b8bd59de8/index.js\n\n    function decodeUtf8Char(str) {\n      try {\n        return decodeURIComponent(str);\n      } catch (err) {\n        return String.fromCharCode(0xFFFD); // UTF 8 invalid char\n      }\n    }\n\n    var res = '';\n    var tmp = '';\n\n    for (var i = 0; i < buf.length; i++) {\n      if (buf[i] <= 0x7F) {\n        res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i]);\n        tmp = '';\n      } else {\n        tmp += '%' + buf[i].toString(16);\n      }\n    }\n\n    return Buffer.from(res + decodeUtf8Char(tmp));\n  }\n\n  if (entropy[0] === '#') {\n    entropy = entropy.slice(1);\n  }\n\n  var type = entropy[0];\n  entropy = entropy.slice(1);\n\n  var privKey;\n  if (type === 'd') {\n    privKey = ethUtil.sha256(Buffer.from(entropy));\n  } else if (type === 'q') {\n    if (typeof password !== 'string') {\n      throw new Error('Password required');\n    }\n\n    var encryptedSeed = ethUtil.sha256(Buffer.from(entropy.slice(0, 30)));\n    var checksum = entropy.slice(30, 46);\n\n    var salt = kryptoKitBrokenScryptSeed(encryptedSeed);\n    var aesKey = scryptsy(Buffer.from(password, 'utf8'), salt, 16384, 8, 1, 32);\n\n    /* FIXME: try to use `crypto` instead of `aesjs`\n     // NOTE: ECB doesn't use the IV, so it can be anything\n    var decipher = crypto.createDecipheriv(\"aes-256-ecb\", aesKey, Buffer.from(0))\n     // FIXME: this is a clear abuse, but seems to match how ECB in aesjs works\n    privKey = Buffer.concat([\n      decipher.update(encryptedSeed).slice(0, 16),\n      decipher.update(encryptedSeed).slice(0, 16),\n    ])\n    */\n\n    /* eslint-disable new-cap */\n    var decipher = new aesjs.ModeOfOperation.ecb(aesKey);\n    /* eslint-enable new-cap */\n    /* decrypt returns an Uint8Array, perhaps there is a better way to concatenate */\n    privKey = Buffer.concat([Buffer.from(decipher.decrypt(encryptedSeed.slice(0, 16))), Buffer.from(decipher.decrypt(encryptedSeed.slice(16, 32)))]);\n\n    if (checksum.length > 0) {\n      if (checksum !== ethUtil.sha256(ethUtil.sha256(privKey)).slice(0, 8).toString('hex')) {\n        throw new Error('Failed to decrypt input - possibly invalid passphrase');\n      }\n    }\n  } else {\n    throw new Error('Unsupported or invalid entropy type');\n  }\n\n  return new Wallet(privKey);\n};\n\nThirdparty.fromQuorumWallet = function (passphrase, userid) {\n  assert(passphrase.length >= 10);\n  assert(userid.length >= 10);\n\n  var seed = passphrase + userid;\n  seed = crypto.pbkdf2Sync(seed, seed, 2000, 32, 'sha256');\n\n  return new Wallet(seed);\n};\n\nmodule.exports = Thirdparty;","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar Buffer = require('safe-buffer').Buffer;\nvar ethUtil = require('ethereumjs-util');\nvar crypto = require('crypto');\nvar randomBytes = require('randombytes');\nvar scryptsy = require('scryptsy');\nvar uuidv4 = require('uuid/v4');\nvar bs58check = require('bs58check');\n\nfunction assert(val, msg) {\n  if (!val) {\n    throw new Error(msg || 'Assertion failed');\n  }\n}\n\nfunction runCipherBuffer(cipher, data) {\n  return Buffer.concat([cipher.update(data), cipher.final()]);\n}\n\nvar Wallet = function Wallet(priv, pub) {\n  if (priv && pub) {\n    throw new Error('Cannot supply both a private and a public key to the constructor');\n  }\n\n  if (priv && !ethUtil.isValidPrivate(priv)) {\n    throw new Error('Private key does not satisfy the curve requirements (ie. it is invalid)');\n  }\n\n  if (pub && !ethUtil.isValidPublic(pub)) {\n    throw new Error('Invalid public key');\n  }\n\n  this._privKey = priv;\n  this._pubKey = pub;\n};\n\nObject.defineProperty(Wallet.prototype, 'privKey', {\n  get: function get() {\n    assert(this._privKey, 'This is a public key only wallet');\n    return this._privKey;\n  }\n});\n\nObject.defineProperty(Wallet.prototype, 'pubKey', {\n  get: function get() {\n    if (!this._pubKey) {\n      this._pubKey = ethUtil.privateToPublic(this.privKey);\n    }\n    return this._pubKey;\n  }\n});\n\nWallet.generate = function (icapDirect) {\n  if (icapDirect) {\n    var max = new ethUtil.BN('088f924eeceeda7fe92e1f5b0fffffffffffffff', 16);\n    while (true) {\n      var privKey = randomBytes(32);\n      if (new ethUtil.BN(ethUtil.privateToAddress(privKey)).lte(max)) {\n        return new Wallet(privKey);\n      }\n    }\n  } else {\n    return new Wallet(randomBytes(32));\n  }\n};\n\nWallet.generateVanityAddress = function (pattern) {\n  if ((typeof pattern === 'undefined' ? 'undefined' : _typeof(pattern)) !== 'object') {\n    pattern = new RegExp(pattern);\n  }\n\n  while (true) {\n    var privKey = randomBytes(32);\n    var address = ethUtil.privateToAddress(privKey);\n\n    if (pattern.test(address.toString('hex'))) {\n      return new Wallet(privKey);\n    }\n  }\n};\n\nWallet.prototype.getPrivateKey = function () {\n  return this.privKey;\n};\n\nWallet.prototype.getPrivateKeyString = function () {\n  return ethUtil.bufferToHex(this.getPrivateKey());\n};\n\nWallet.prototype.getPublicKey = function () {\n  return this.pubKey;\n};\n\nWallet.prototype.getPublicKeyString = function () {\n  return ethUtil.bufferToHex(this.getPublicKey());\n};\n\nWallet.prototype.getAddress = function () {\n  return ethUtil.publicToAddress(this.pubKey);\n};\n\nWallet.prototype.getAddressString = function () {\n  return ethUtil.bufferToHex(this.getAddress());\n};\n\nWallet.prototype.getChecksumAddressString = function () {\n  return ethUtil.toChecksumAddress(this.getAddressString());\n};\n\n// https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\nWallet.prototype.toV3 = function (password, opts) {\n  assert(this._privKey, 'This is a public key only wallet');\n\n  opts = opts || {};\n  var salt = opts.salt || randomBytes(32);\n  var iv = opts.iv || randomBytes(16);\n\n  var derivedKey;\n  var kdf = opts.kdf || 'scrypt';\n  var kdfparams = {\n    dklen: opts.dklen || 32,\n    salt: salt.toString('hex')\n  };\n\n  if (kdf === 'pbkdf2') {\n    kdfparams.c = opts.c || 262144;\n    kdfparams.prf = 'hmac-sha256';\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), salt, kdfparams.c, kdfparams.dklen, 'sha256');\n  } else if (kdf === 'scrypt') {\n    // FIXME: support progress reporting callback\n    kdfparams.n = opts.n || 262144;\n    kdfparams.r = opts.r || 8;\n    kdfparams.p = opts.p || 1;\n    derivedKey = scryptsy(Buffer.from(password), salt, kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else {\n    throw new Error('Unsupported kdf');\n  }\n\n  var cipher = crypto.createCipheriv(opts.cipher || 'aes-128-ctr', derivedKey.slice(0, 16), iv);\n  if (!cipher) {\n    throw new Error('Unsupported cipher');\n  }\n\n  var ciphertext = runCipherBuffer(cipher, this.privKey);\n\n  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), Buffer.from(ciphertext, 'hex')]));\n\n  return {\n    version: 3,\n    id: uuidv4({ random: opts.uuid || randomBytes(16) }),\n    address: this.getAddress().toString('hex'),\n    crypto: {\n      ciphertext: ciphertext.toString('hex'),\n      cipherparams: {\n        iv: iv.toString('hex')\n      },\n      cipher: opts.cipher || 'aes-128-ctr',\n      kdf: kdf,\n      kdfparams: kdfparams,\n      mac: mac.toString('hex')\n    }\n  };\n};\n\nWallet.prototype.getV3Filename = function (timestamp) {\n  /*\n   * We want a timestamp like 2016-03-15T17-11-33.007598288Z. Date formatting\n   * is a pain in Javascript, everbody knows that. We could use moment.js,\n   * but decide to do it manually in order to save space.\n   *\n   * toJSON() returns a pretty close version, so let's use it. It is not UTC though,\n   * but does it really matter?\n   *\n   * Alternative manual way with padding and Date fields: http://stackoverflow.com/a/7244288/4964819\n   *\n   */\n  var ts = timestamp ? new Date(timestamp) : new Date();\n\n  return ['UTC--', ts.toJSON().replace(/:/g, '-'), '--', this.getAddress().toString('hex')].join('');\n};\n\nWallet.prototype.toV3String = function (password, opts) {\n  return JSON.stringify(this.toV3(password, opts));\n};\n\nWallet.fromPublicKey = function (pub, nonStrict) {\n  if (nonStrict) {\n    pub = ethUtil.importPublic(pub);\n  }\n  return new Wallet(null, pub);\n};\n\nWallet.fromExtendedPublicKey = function (pub) {\n  assert(pub.slice(0, 4) === 'xpub', 'Not an extended public key');\n  pub = bs58check.decode(pub).slice(45);\n  // Convert to an Ethereum public key\n  return Wallet.fromPublicKey(pub, true);\n};\n\nWallet.fromPrivateKey = function (priv) {\n  return new Wallet(priv);\n};\n\nWallet.fromExtendedPrivateKey = function (priv) {\n  assert(priv.slice(0, 4) === 'xprv', 'Not an extended private key');\n  var tmp = bs58check.decode(priv);\n  assert(tmp[45] === 0, 'Invalid extended private key');\n  return Wallet.fromPrivateKey(tmp.slice(46));\n};\n\n// https://github.com/ethereum/go-ethereum/wiki/Passphrase-protected-key-store-spec\nWallet.fromV1 = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  if (json.Version !== '1') {\n    throw new Error('Not a V1 wallet');\n  }\n\n  if (json.Crypto.KeyHeader.Kdf !== 'scrypt') {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var kdfparams = json.Crypto.KeyHeader.KdfParams;\n  var derivedKey = scryptsy(Buffer.from(password), Buffer.from(json.Crypto.Salt, 'hex'), kdfparams.N, kdfparams.R, kdfparams.P, kdfparams.DkLen);\n\n  var ciphertext = Buffer.from(json.Crypto.CipherText, 'hex');\n\n  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n\n  if (mac.toString('hex') !== json.Crypto.MAC) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv('aes-128-cbc', ethUtil.keccak256(derivedKey.slice(0, 16)).slice(0, 16), Buffer.from(json.Crypto.IV, 'hex'));\n  var seed = runCipherBuffer(decipher, ciphertext);\n\n  return new Wallet(seed);\n};\n\nWallet.fromV3 = function (input, password, nonStrict) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(nonStrict ? input.toLowerCase() : input);\n\n  if (json.version !== 3) {\n    throw new Error('Not a V3 wallet');\n  }\n\n  var derivedKey;\n  var kdfparams;\n  if (json.crypto.kdf === 'scrypt') {\n    kdfparams = json.crypto.kdfparams;\n\n    // FIXME: support progress reporting callback\n    derivedKey = scryptsy(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.n, kdfparams.r, kdfparams.p, kdfparams.dklen);\n  } else if (json.crypto.kdf === 'pbkdf2') {\n    kdfparams = json.crypto.kdfparams;\n\n    if (kdfparams.prf !== 'hmac-sha256') {\n      throw new Error('Unsupported parameters to PBKDF2');\n    }\n\n    derivedKey = crypto.pbkdf2Sync(Buffer.from(password), Buffer.from(kdfparams.salt, 'hex'), kdfparams.c, kdfparams.dklen, 'sha256');\n  } else {\n    throw new Error('Unsupported key derivation scheme');\n  }\n\n  var ciphertext = Buffer.from(json.crypto.ciphertext, 'hex');\n\n  var mac = ethUtil.keccak256(Buffer.concat([derivedKey.slice(16, 32), ciphertext]));\n  if (mac.toString('hex') !== json.crypto.mac) {\n    throw new Error('Key derivation failed - possibly wrong passphrase');\n  }\n\n  var decipher = crypto.createDecipheriv(json.crypto.cipher, derivedKey.slice(0, 16), Buffer.from(json.crypto.cipherparams.iv, 'hex'));\n  var seed = runCipherBuffer(decipher, ciphertext);\n\n  return new Wallet(seed);\n};\n\n/*\n * Based on https://github.com/ethereum/pyethsaletool/blob/master/pyethsaletool.py\n * JSON fields: encseed, ethaddr, btcaddr, email\n */\nWallet.fromEthSale = function (input, password) {\n  assert(typeof password === 'string');\n  var json = (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object' ? input : JSON.parse(input);\n\n  var encseed = Buffer.from(json.encseed, 'hex');\n\n  // key derivation\n  var derivedKey = crypto.pbkdf2Sync(password, password, 2000, 32, 'sha256').slice(0, 16);\n\n  // seed decoding (IV is first 16 bytes)\n  // NOTE: crypto (derived from openssl) when used with aes-*-cbc will handle PKCS#7 padding internally\n  //       see also http://stackoverflow.com/a/31614770/4964819\n  var decipher = crypto.createDecipheriv('aes-128-cbc', derivedKey, encseed.slice(0, 16));\n  var seed = runCipherBuffer(decipher, encseed.slice(16));\n\n  var wallet = new Wallet(ethUtil.keccak256(seed));\n  if (wallet.getAddress().toString('hex') !== json.ethaddr) {\n    throw new Error('Decoded key mismatch - possibly wrong passphrase');\n  }\n  return wallet;\n};\n\nmodule.exports = Wallet;","import { strict as assert } from 'assert';\nimport EventEmitter from 'events';\nimport { ComposedStore, ObservableStore } from '@metamask/obs-store';\nimport { JsonRpcEngine } from 'json-rpc-engine';\nimport { providerFromEngine } from 'eth-json-rpc-middleware';\nimport log from 'loglevel';\nimport {\n  createSwappableProxy,\n  createEventEmitterProxy,\n} from 'swappable-obj-proxy';\nimport EthQuery from 'eth-query';\nimport {\n  RINKEBY,\n  MAINNET,\n  INFURA_PROVIDER_TYPES,\n  NETWORK_TYPE_RPC,\n  NETWORK_TYPE_TO_ID_MAP,\n  MAINNET_CHAIN_ID,\n  RINKEBY_CHAIN_ID,\n  INFURA_BLOCKED_KEY,\n} from '../../../../shared/constants/network';\nimport { SECOND } from '../../../../shared/constants/time';\nimport {\n  isPrefixedFormattedHexString,\n  isSafeChainId,\n} from '../../../../shared/modules/network.utils';\nimport getFetchWithTimeout from '../../../../shared/modules/fetch-with-timeout';\nimport createMetamaskMiddleware from './createMetamaskMiddleware';\nimport createInfuraClient from './createInfuraClient';\nimport createJsonRpcClient from './createJsonRpcClient';\n\nconst env = process.env.METAMASK_ENV;\nconst fetchWithTimeout = getFetchWithTimeout(SECOND * 30);\n\nlet defaultProviderConfigOpts;\nif (process.env.IN_TEST) {\n  defaultProviderConfigOpts = {\n    type: NETWORK_TYPE_RPC,\n    rpcUrl: 'http://localhost:8545',\n    chainId: '0x539',\n    nickname: 'Localhost 8545',\n  };\n} else if (process.env.METAMASK_DEBUG || env === 'test') {\n  defaultProviderConfigOpts = { type: RINKEBY, chainId: RINKEBY_CHAIN_ID };\n} else {\n  defaultProviderConfigOpts = { type: MAINNET, chainId: MAINNET_CHAIN_ID };\n}\n\nconst defaultProviderConfig = {\n  ticker: 'ETH',\n  ...defaultProviderConfigOpts,\n};\n\nconst defaultNetworkDetailsState = {\n  EIPS: { 1559: undefined },\n};\n\nexport const NETWORK_EVENTS = {\n  // Fired after the actively selected network is changed\n  NETWORK_DID_CHANGE: 'networkDidChange',\n  // Fired when the actively selected network *will* change\n  NETWORK_WILL_CHANGE: 'networkWillChange',\n  // Fired when Infura returns an error indicating no support\n  INFURA_IS_BLOCKED: 'infuraIsBlocked',\n  // Fired when not using an Infura network or when Infura returns no error, indicating support\n  INFURA_IS_UNBLOCKED: 'infuraIsUnblocked',\n};\n\nexport default class NetworkController extends EventEmitter {\n  constructor(opts = {}) {\n    super();\n\n    // create stores\n    this.providerStore = new ObservableStore(\n      opts.provider || { ...defaultProviderConfig },\n    );\n    this.previousProviderStore = new ObservableStore(\n      this.providerStore.getState(),\n    );\n    this.networkStore = new ObservableStore('loading');\n    // We need to keep track of a few details about the current network\n    // Ideally we'd merge this.networkStore with this new store, but doing so\n    // will require a decent sized refactor of how we're accessing network\n    // state. Currently this is only used for detecting EIP 1559 support but\n    // can be extended to track other network details.\n    this.networkDetails = new ObservableStore(\n      opts.networkDetails || {\n        ...defaultNetworkDetailsState,\n      },\n    );\n    this.store = new ComposedStore({\n      provider: this.providerStore,\n      previousProviderStore: this.previousProviderStore,\n      network: this.networkStore,\n      networkDetails: this.networkDetails,\n    });\n\n    // provider and block tracker\n    this._provider = null;\n    this._blockTracker = null;\n\n    // provider and block tracker proxies - because the network changes\n    this._providerProxy = null;\n    this._blockTrackerProxy = null;\n\n    this.on(NETWORK_EVENTS.NETWORK_DID_CHANGE, this.lookupNetwork);\n  }\n\n  /**\n   * Sets the Infura project ID\n   *\n   * @param {string} projectId - The Infura project ID\n   * @throws {Error} If the project ID is not a valid string.\n   */\n  setInfuraProjectId(projectId) {\n    if (!projectId || typeof projectId !== 'string') {\n      throw new Error('Invalid Infura project ID');\n    }\n\n    this._infuraProjectId = projectId;\n  }\n\n  initializeProvider(providerParams) {\n    this._baseProviderParams = providerParams;\n    const { type, rpcUrl, chainId } = this.getProviderConfig();\n    this._configureProvider({ type, rpcUrl, chainId });\n    this.lookupNetwork();\n  }\n\n  // return the proxies so the references will always be good\n  getProviderAndBlockTracker() {\n    const provider = this._providerProxy;\n    const blockTracker = this._blockTrackerProxy;\n    return { provider, blockTracker };\n  }\n\n  /**\n   * Method to return the latest block for the current network\n   *\n   * @returns {Object} Block header\n   */\n  getLatestBlock() {\n    return new Promise((resolve, reject) => {\n      const { provider } = this.getProviderAndBlockTracker();\n      const ethQuery = new EthQuery(provider);\n      ethQuery.sendAsync(\n        { method: 'eth_getBlockByNumber', params: ['latest', false] },\n        (err, block) => {\n          if (err) {\n            return reject(err);\n          }\n          return resolve(block);\n        },\n      );\n    });\n  }\n\n  /**\n   * Method to check if the block header contains fields that indicate EIP 1559\n   * support (baseFeePerGas).\n   *\n   * @returns {Promise<boolean>} true if current network supports EIP 1559\n   */\n  async getEIP1559Compatibility() {\n    const { EIPS } = this.networkDetails.getState();\n    if (EIPS[1559] !== undefined) {\n      return EIPS[1559];\n    }\n    const latestBlock = await this.getLatestBlock();\n    const supportsEIP1559 =\n      latestBlock && latestBlock.baseFeePerGas !== undefined;\n    this.setNetworkEIPSupport(1559, supportsEIP1559);\n    return supportsEIP1559;\n  }\n\n  verifyNetwork() {\n    // Check network when restoring connectivity:\n    if (this.isNetworkLoading()) {\n      this.lookupNetwork();\n    }\n  }\n\n  getNetworkState() {\n    return this.networkStore.getState();\n  }\n\n  setNetworkState(network) {\n    this.networkStore.putState(network);\n  }\n\n  /**\n   * Set EIP support indication in the networkDetails store\n   *\n   * @param {number} EIPNumber - The number of the EIP to mark support for\n   * @param {boolean} isSupported - True if the EIP is supported\n   */\n  setNetworkEIPSupport(EIPNumber, isSupported) {\n    this.networkDetails.updateState({\n      EIPS: {\n        [EIPNumber]: isSupported,\n      },\n    });\n  }\n\n  /**\n   * Reset EIP support to default (no support)\n   */\n  clearNetworkDetails() {\n    this.networkDetails.putState({ ...defaultNetworkDetailsState });\n  }\n\n  isNetworkLoading() {\n    return this.getNetworkState() === 'loading';\n  }\n\n  lookupNetwork() {\n    // Prevent firing when provider is not defined.\n    if (!this._provider) {\n      log.warn(\n        'NetworkController - lookupNetwork aborted due to missing provider',\n      );\n      return;\n    }\n\n    const chainId = this.getCurrentChainId();\n    if (!chainId) {\n      log.warn(\n        'NetworkController - lookupNetwork aborted due to missing chainId',\n      );\n      this.setNetworkState('loading');\n      // keep network details in sync with network state\n      this.clearNetworkDetails();\n      return;\n    }\n\n    // Ping the RPC endpoint so we can confirm that it works\n    const ethQuery = new EthQuery(this._provider);\n    const initialNetwork = this.getNetworkState();\n    const { type } = this.getProviderConfig();\n    const isInfura = INFURA_PROVIDER_TYPES.includes(type);\n\n    if (isInfura) {\n      this._checkInfuraAvailability(type);\n    } else {\n      this.emit(NETWORK_EVENTS.INFURA_IS_UNBLOCKED);\n    }\n\n    ethQuery.sendAsync({ method: 'net_version' }, (err, networkVersion) => {\n      const currentNetwork = this.getNetworkState();\n      if (initialNetwork === currentNetwork) {\n        if (err) {\n          this.setNetworkState('loading');\n          // keep network details in sync with network state\n          this.clearNetworkDetails();\n          return;\n        }\n\n        this.setNetworkState(networkVersion);\n        // look up EIP-1559 support\n        this.getEIP1559Compatibility();\n      }\n    });\n  }\n\n  getCurrentChainId() {\n    const { type, chainId: configChainId } = this.getProviderConfig();\n    return NETWORK_TYPE_TO_ID_MAP[type]?.chainId || configChainId;\n  }\n\n  setRpcTarget(rpcUrl, chainId, ticker = 'ETH', nickname = '', rpcPrefs) {\n    assert.ok(\n      isPrefixedFormattedHexString(chainId),\n      `Invalid chain ID \"${chainId}\": invalid hex string.`,\n    );\n    assert.ok(\n      isSafeChainId(parseInt(chainId, 16)),\n      `Invalid chain ID \"${chainId}\": numerical value greater than max safe value.`,\n    );\n    this.setProviderConfig({\n      type: NETWORK_TYPE_RPC,\n      rpcUrl,\n      chainId,\n      ticker,\n      nickname,\n      rpcPrefs,\n    });\n  }\n\n  async setProviderType(type) {\n    assert.notStrictEqual(\n      type,\n      NETWORK_TYPE_RPC,\n      `NetworkController - cannot call \"setProviderType\" with type \"${NETWORK_TYPE_RPC}\". Use \"setRpcTarget\"`,\n    );\n    assert.ok(\n      INFURA_PROVIDER_TYPES.includes(type),\n      `Unknown Infura provider type \"${type}\".`,\n    );\n    const { chainId } = NETWORK_TYPE_TO_ID_MAP[type];\n    this.setProviderConfig({\n      type,\n      rpcUrl: '',\n      chainId,\n      ticker: 'ETH',\n      nickname: '',\n    });\n  }\n\n  resetConnection() {\n    this.setProviderConfig(this.getProviderConfig());\n  }\n\n  /**\n   * Sets the provider config and switches the network.\n   *\n   * @param config\n   */\n  setProviderConfig(config) {\n    this.previousProviderStore.updateState(this.getProviderConfig());\n    this.providerStore.updateState(config);\n    this._switchNetwork(config);\n  }\n\n  rollbackToPreviousProvider() {\n    const config = this.previousProviderStore.getState();\n    this.providerStore.updateState(config);\n    this._switchNetwork(config);\n  }\n\n  getProviderConfig() {\n    return this.providerStore.getState();\n  }\n\n  getNetworkIdentifier() {\n    const provider = this.providerStore.getState();\n    return provider.type === NETWORK_TYPE_RPC ? provider.rpcUrl : provider.type;\n  }\n\n  //\n  // Private\n  //\n\n  async _checkInfuraAvailability(network) {\n    const rpcUrl = `https://${network}.infura.io/v3/${this._infuraProjectId}`;\n\n    let networkChanged = false;\n    this.once(NETWORK_EVENTS.NETWORK_DID_CHANGE, () => {\n      networkChanged = true;\n    });\n\n    try {\n      const response = await fetchWithTimeout(rpcUrl, {\n        method: 'POST',\n        body: JSON.stringify({\n          jsonrpc: '2.0',\n          method: 'eth_blockNumber',\n          params: [],\n          id: 1,\n        }),\n      });\n\n      if (networkChanged) {\n        return;\n      }\n\n      if (response.ok) {\n        this.emit(NETWORK_EVENTS.INFURA_IS_UNBLOCKED);\n      } else {\n        const responseMessage = await response.json();\n        if (networkChanged) {\n          return;\n        }\n        if (responseMessage.error === INFURA_BLOCKED_KEY) {\n          this.emit(NETWORK_EVENTS.INFURA_IS_BLOCKED);\n        }\n      }\n    } catch (err) {\n      log.warn(`MetaMask - Infura availability check failed`, err);\n    }\n  }\n\n  _switchNetwork(opts) {\n    // Indicate to subscribers that network is about to change\n    this.emit(NETWORK_EVENTS.NETWORK_WILL_CHANGE);\n    // Set loading state\n    this.setNetworkState('loading');\n    // Reset network details\n    this.clearNetworkDetails();\n    // Configure the provider appropriately\n    this._configureProvider(opts);\n    // Notify subscribers that network has changed\n    this.emit(NETWORK_EVENTS.NETWORK_DID_CHANGE, opts.type);\n  }\n\n  _configureProvider({ type, rpcUrl, chainId }) {\n    // infura type-based endpoints\n    const isInfura = INFURA_PROVIDER_TYPES.includes(type);\n    if (isInfura) {\n      this._configureInfuraProvider(type, this._infuraProjectId);\n      // url-based rpc endpoints\n    } else if (type === NETWORK_TYPE_RPC) {\n      this._configureStandardProvider(rpcUrl, chainId);\n    } else {\n      throw new Error(\n        `NetworkController - _configureProvider - unknown type \"${type}\"`,\n      );\n    }\n  }\n\n  _configureInfuraProvider(type, projectId) {\n    log.info('NetworkController - configureInfuraProvider', type);\n    const networkClient = createInfuraClient({\n      network: type,\n      projectId,\n    });\n    this._setNetworkClient(networkClient);\n  }\n\n  _configureStandardProvider(rpcUrl, chainId) {\n    log.info('NetworkController - configureStandardProvider', rpcUrl);\n    const networkClient = createJsonRpcClient({ rpcUrl, chainId });\n    this._setNetworkClient(networkClient);\n  }\n\n  _setNetworkClient({ networkMiddleware, blockTracker }) {\n    const metamaskMiddleware = createMetamaskMiddleware(\n      this._baseProviderParams,\n    );\n    const engine = new JsonRpcEngine();\n    engine.push(metamaskMiddleware);\n    engine.push(networkMiddleware);\n    const provider = providerFromEngine(engine);\n    this._setProviderAndBlockTracker({ provider, blockTracker });\n  }\n\n  _setProviderAndBlockTracker({ provider, blockTracker }) {\n    // update or initialize proxies\n    if (this._providerProxy) {\n      this._providerProxy.setTarget(provider);\n    } else {\n      this._providerProxy = createSwappableProxy(provider);\n    }\n    if (this._blockTrackerProxy) {\n      this._blockTrackerProxy.setTarget(blockTracker);\n    } else {\n      this._blockTrackerProxy = createEventEmitterProxy(blockTracker, {\n        eventFilter: 'skipInternal',\n      });\n    }\n    // set new provider and blockTracker\n    this._provider = provider;\n    this._blockTracker = blockTracker;\n  }\n}\n","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar cs = require('coinstring')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = secp256k1.publicKeyCreate(value, true)\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = secp256k1.publicKeyConvert(value, true) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return cs.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return cs.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(c, 'm', 'Invalid path')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = secp256k1.privateKeyTweakAdd(this.privateKey, IL)\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.derive(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = secp256k1.publicKeyTweakAdd(this.publicKey, IL, true)\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.derive(index + 1, isHardened)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return secp256k1.sign(hash, this.privateKey).signature\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.verify(hash, signature, this.publicKey)\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = cs.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('rmd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","const { Buffer } = require('buffer')\nconst ethUtil = require('ethereumjs-util')\nconst ethAbi = require('ethereumjs-abi')\nconst nacl = require('tweetnacl')\nnacl.util = require('tweetnacl-util')\n\nconst TYPED_MESSAGE_SCHEMA = {\n  type: 'object',\n  properties: {\n    types: {\n      type: 'object',\n      additionalProperties: {\n        type: 'array',\n        items: {\n          type: 'object',\n          properties: {\n            name: { type: 'string' },\n            type: { type: 'string' },\n          },\n          required: ['name', 'type'],\n        },\n      },\n    },\n    primaryType: { type: 'string' },\n    domain: { type: 'object' },\n    message: { type: 'object' },\n  },\n  required: ['types', 'primaryType', 'domain', 'message'],\n}\n\n/**\n * A collection of utility functions used for signing typed data\n */\nconst TypedDataUtils = {\n\n  /**\n   * Encodes an object by encoding and concatenating each of its members\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of an object\n   */\n  encodeData (primaryType, data, types, useV4 = true) {\n    const encodedTypes = ['bytes32']\n    const encodedValues = [this.hashType(primaryType, types)]\n\n    if (useV4) {\n      const encodeField = (name, type, value) => {\n        if (types[type] !== undefined) {\n          return ['bytes32', value === null || value === undefined ?\n            '0x0000000000000000000000000000000000000000000000000000000000000000' :\n            ethUtil.keccak(this.encodeData(type, value, types, useV4))]\n        }\n\n        if (value === undefined) {\n          throw new Error(`missing value for field ${name} of type ${type}`)\n        }\n\n        if (type === 'bytes') {\n          return ['bytes32', ethUtil.keccak(value)]\n        }\n\n        if (type === 'string') {\n          // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n          if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8')\n          }\n          return ['bytes32', ethUtil.keccak(value)]\n        }\n\n        if (type.lastIndexOf(']') === type.length - 1) {\n          const parsedType = type.slice(0, type.lastIndexOf('['))\n          const typeValuePairs = value.map((item) => encodeField(name, parsedType, item))\n          return ['bytes32', ethUtil.keccak(ethAbi.rawEncode(\n            typeValuePairs.map(([_type]) => _type),\n            typeValuePairs.map(([, _value]) => _value),\n          ))]\n        }\n\n        return [type, value]\n      }\n\n      for (const field of types[primaryType]) {\n        const [type, value] = encodeField(field.name, field.type, data[field.name])\n        encodedTypes.push(type)\n        encodedValues.push(value)\n      }\n    } else {\n      for (const field of types[primaryType]) {\n        let value = data[field.name]\n        if (value !== undefined) {\n          if (field.type === 'bytes') {\n            encodedTypes.push('bytes32')\n            value = ethUtil.keccak(value)\n            encodedValues.push(value)\n          } else if (field.type === 'string') {\n            encodedTypes.push('bytes32')\n            // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n            if (typeof value === 'string') {\n              value = Buffer.from(value, 'utf8')\n            }\n            value = ethUtil.keccak(value)\n            encodedValues.push(value)\n          } else if (types[field.type] !== undefined) {\n            encodedTypes.push('bytes32')\n            value = ethUtil.keccak(this.encodeData(field.type, value, types, useV4))\n            encodedValues.push(value)\n          } else if (field.type.lastIndexOf(']') === field.type.length - 1) {\n            throw new Error('Arrays currently unimplemented in encodeData')\n          } else {\n            encodedTypes.push(field.type)\n            encodedValues.push(value)\n          }\n        }\n      }\n    }\n\n    return ethAbi.rawEncode(encodedTypes, encodedValues)\n  },\n\n  /**\n   * Encodes the type of an object by encoding a comma delimited list of its members\n   *\n   * @param {string} primaryType - Root type to encode\n   * @param {Object} types - Type definitions\n   * @returns {string} - Encoded representation of the type of an object\n   */\n  encodeType (primaryType, types) {\n    let result = ''\n    let deps = this.findTypeDependencies(primaryType, types).filter((dep) => dep !== primaryType)\n    deps = [primaryType].concat(deps.sort())\n    for (const type of deps) {\n      const children = types[type]\n      if (!children) {\n        throw new Error(`No type definition specified: ${type}`)\n      }\n      result += `${type}(${types[type].map(({ name, type: _type }) => `${_type} ${name}`).join(',')})`\n    }\n    return result\n  },\n\n  /**\n   * Finds all types within a type defintion object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} types - Type definitions\n   * @param {Array} results - current set of accumulated types\n   * @returns {Array} - Set of all types found in the type definition\n   */\n  findTypeDependencies (primaryType, types, results = []) {\n    const [firstWord] = primaryType.match(/^\\w*/u)\n    primaryType = firstWord\n    if (results.includes(primaryType) || types[primaryType] === undefined) {\n      return results\n    }\n    results.push(primaryType)\n    for (const field of types[primaryType]) {\n      for (const dep of this.findTypeDependencies(field.type, types, results)) {\n        !results.includes(dep) && results.push(dep)\n      }\n    }\n    return results\n  },\n\n  /**\n   * Hashes an object\n   *\n   * @param {string} primaryType - Root type\n   * @param {Object} data - Object to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashStruct (primaryType, data, types, useV4 = true) {\n    return ethUtil.keccak(this.encodeData(primaryType, data, types, useV4))\n  },\n\n  /**\n   * Hashes the type of an object\n   *\n   * @param {string} primaryType - Root type to hash\n   * @param {Object} types - Type definitions\n   * @returns {string} - Hash of an object\n   */\n  hashType (primaryType, types) {\n    return ethUtil.keccak(this.encodeType(primaryType, types))\n  },\n\n  /**\n   * Removes properties from a message object that are not defined per EIP-712\n   *\n   * @param {Object} data - typed message object\n   * @returns {Object} - typed message object with only allowed fields\n   */\n  sanitizeData (data) {\n    const sanitizedData = {}\n    for (const key of Object.keys(TYPED_MESSAGE_SCHEMA.properties)) {\n      data[key] && (sanitizedData[key] = data[key])\n    }\n    if (sanitizedData.types) {\n      sanitizedData.types = { EIP712Domain: [], ...sanitizedData.types }\n    }\n    return sanitizedData\n  },\n\n  /**\n   * Signs a typed message as per EIP-712 and returns its keccak hash\n   *\n   * @param {Object} typedData - Types message data to sign\n   * @returns {string} - keccak hash of the resulting signed message\n   */\n  sign (typedData, useV4 = true) {\n    const sanitizedData = this.sanitizeData(typedData)\n    const parts = [Buffer.from('1901', 'hex')]\n    parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4))\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n      parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4))\n    }\n    return ethUtil.keccak(Buffer.concat(parts))\n  },\n}\n\nmodule.exports = {\n  TYPED_MESSAGE_SCHEMA,\n  TypedDataUtils,\n\n  concatSig (v, r, s) {\n    const rSig = ethUtil.fromSigned(r)\n    const sSig = ethUtil.fromSigned(s)\n    const vSig = ethUtil.bufferToInt(v)\n    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)\n    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)\n    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')\n  },\n\n  normalize (input) {\n    if (!input) {\n      return undefined\n    }\n\n    if (typeof input === 'number') {\n      const buffer = ethUtil.toBuffer(input)\n      input = ethUtil.bufferToHex(buffer)\n    }\n\n    if (typeof input !== 'string') {\n      let msg = 'eth-sig-util.normalize() requires hex string or integer input.'\n      msg += ` received ${typeof input}: ${input}`\n      throw new Error(msg)\n    }\n\n    return ethUtil.addHexPrefix(input.toLowerCase())\n  },\n\n  personalSign (privateKey, msgParams) {\n    const message = ethUtil.toBuffer(msgParams.data)\n    const msgHash = ethUtil.hashPersonalMessage(message)\n    const sig = ethUtil.ecsign(msgHash, privateKey)\n    const serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n    return serialized\n  },\n\n  recoverPersonalSignature (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    const sender = ethUtil.publicToAddress(publicKey)\n    const senderHex = ethUtil.bufferToHex(sender)\n    return senderHex\n  },\n\n  extractPublicKey (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    return `0x${publicKey.toString('hex')}`\n  },\n\n  typedSignatureHash (typedData) {\n    const hashBuffer = typedSignatureHash(typedData)\n    return ethUtil.bufferToHex(hashBuffer)\n  },\n\n  signTypedDataLegacy (privateKey, msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const sig = ethUtil.ecsign(msgHash, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignatureLegacy (msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const publicKey = recoverPublicKey(msgHash, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  },\n\n  encrypt (receiverPublicKey, msgParams, version) {\n\n    switch (version) {\n      case 'x25519-xsalsa20-poly1305': {\n        if (typeof msgParams.data === 'undefined') {\n          throw new Error('Cannot detect secret message, message params should be of the form {data: \"secret message\"} ')\n        }\n        // generate ephemeral keypair\n        const ephemeralKeyPair = nacl.box.keyPair()\n\n        // assemble encryption parameters - from string to UInt8\n        let pubKeyUInt8Array\n        try {\n          pubKeyUInt8Array = nacl.util.decodeBase64(receiverPublicKey)\n        } catch (err) {\n          throw new Error('Bad public key')\n        }\n\n        const msgParamsUInt8Array = nacl.util.decodeUTF8(msgParams.data)\n        const nonce = nacl.randomBytes(nacl.box.nonceLength)\n\n        // encrypt\n        const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey)\n\n        // handle encrypted data\n        const output = {\n          version: 'x25519-xsalsa20-poly1305',\n          nonce: nacl.util.encodeBase64(nonce),\n          ephemPublicKey: nacl.util.encodeBase64(ephemeralKeyPair.publicKey),\n          ciphertext: nacl.util.encodeBase64(encryptedMessage),\n        }\n        // return encrypted msg data\n        return output\n      }\n      default:\n        throw new Error('Encryption type/version not supported')\n\n    }\n  },\n\n  encryptSafely (receiverPublicKey, msgParams, version) {\n\n    const DEFAULT_PADDING_LENGTH = (2 ** 11)\n    const NACL_EXTRA_BYTES = 16\n\n    const { data } = msgParams\n    if (!data) {\n      throw new Error('Cannot encrypt empty msg.data')\n    }\n\n    if (typeof data === 'object' && data.toJSON) {\n      // remove toJSON attack vector\n      // TODO, check all possible children\n      throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property')\n    }\n\n    // add padding\n    const dataWithPadding = {\n      data,\n      padding: '',\n    }\n\n    // calculate padding\n    const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8')\n    const modVal = (dataLength % DEFAULT_PADDING_LENGTH)\n    let padLength = 0\n    // Only pad if necessary\n    if (modVal > 0) {\n      padLength = (DEFAULT_PADDING_LENGTH - modVal) - NACL_EXTRA_BYTES // nacl extra bytes\n    }\n    dataWithPadding.padding = '0'.repeat(padLength)\n\n    const paddedMsgParams = { data: JSON.stringify(dataWithPadding) }\n    return this.encrypt(receiverPublicKey, paddedMsgParams, version)\n  },\n\n  decrypt (encryptedData, receiverPrivateKey) {\n\n    switch (encryptedData.version) {\n      case 'x25519-xsalsa20-poly1305': {\n        // string to buffer to UInt8Array\n        const recieverPrivateKeyUint8Array = nacl_decodeHex(receiverPrivateKey)\n        const recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey\n\n        // assemble decryption parameters\n        const nonce = nacl.util.decodeBase64(encryptedData.nonce)\n        const ciphertext = nacl.util.decodeBase64(encryptedData.ciphertext)\n        const ephemPublicKey = nacl.util.decodeBase64(encryptedData.ephemPublicKey)\n\n        // decrypt\n        const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey)\n\n        // return decrypted msg data\n        let output\n        try {\n          output = nacl.util.encodeUTF8(decryptedMessage)\n        } catch (err) {\n          throw new Error('Decryption failed.')\n        }\n\n        if (output) {\n          return output\n        }\n        throw new Error('Decryption failed.')\n      }\n\n      default:\n        throw new Error('Encryption type/version not supported.')\n    }\n  },\n\n  decryptSafely (encryptedData, receiverPrivateKey) {\n    const dataWithPadding = JSON.parse(this.decrypt(encryptedData, receiverPrivateKey))\n    return dataWithPadding.data\n  },\n\n\n  getEncryptionPublicKey (privateKey) {\n    const privateKeyUint8Array = nacl_decodeHex(privateKey)\n    const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey\n    return nacl.util.encodeBase64(encryptionPublicKey)\n  },\n\n\n  /**\n   * A generic entry point for all typed data methods to be passed, includes a version parameter.\n   */\n  signTypedMessage (privateKey, msgParams, version = 'V4') {\n    switch (version) {\n      case 'V1':\n        return this.signTypedDataLegacy(privateKey, msgParams)\n      case 'V3':\n        return this.signTypedData(privateKey, msgParams)\n      case 'V4':\n      default:\n        return this.signTypedData_v4(privateKey, msgParams)\n    }\n  },\n\n  recoverTypedMessage (msgParams, version = 'V4') {\n    switch (version) {\n      case 'V1':\n        return this.recoverTypedSignatureLegacy(msgParams)\n      case 'V3':\n        return this.recoverTypedSignature(msgParams)\n      case 'V4':\n      default:\n        return this.recoverTypedSignature_v4(msgParams)\n    }\n  },\n\n  signTypedData (privateKey, msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data, false)\n    const sig = ethUtil.ecsign(message, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  signTypedData_v4 (privateKey, msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data)\n    const sig = ethUtil.ecsign(message, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignature (msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data, false)\n    const publicKey = recoverPublicKey(message, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  },\n\n  recoverTypedSignature_v4 (msgParams) {\n    const message = TypedDataUtils.sign(msgParams.data)\n    const publicKey = recoverPublicKey(message, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  },\n\n}\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash (typedData) {\n  const error = new Error('Expect argument to be non-empty array')\n  if (typeof typedData !== 'object' || !typedData.length) {\n    throw error\n  }\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value\n  })\n  const types = typedData.map(function (e) {\n    return e.type\n  })\n  const schema = typedData.map(function (e) {\n    if (!e.name) {\n      throw error\n    }\n    return `${e.type} ${e.name}`\n  })\n\n  return ethAbi.soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      ethAbi.soliditySHA3(types, data),\n    ],\n  )\n}\n\nfunction recoverPublicKey (hash, sig) {\n  const signature = ethUtil.toBuffer(sig)\n  const sigParams = ethUtil.fromRpcSig(signature)\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)\n}\n\nfunction getPublicKeyFor (msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data)\n  const msgHash = ethUtil.hashPersonalMessage(message)\n  return recoverPublicKey(msgHash, msgParams.sig)\n}\n\n\nfunction padWithZeroes (number, length) {\n  let myString = `${number}`\n  while (myString.length < length) {\n    myString = `0${myString}`\n  }\n  return myString\n}\n\n// converts hex strings to the Uint8Array format used by nacl\nfunction nacl_decodeHex (msgHex) {\n  const msgBase64 = (Buffer.from(msgHex, 'hex')).toString('base64')\n  return nacl.util.decodeBase64(msgBase64)\n}\n\n\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ethersProviderAsMiddleware = exports.providerAsMiddleware = void 0;\nfunction providerAsMiddleware(provider) {\n    return (req, res, _next, end) => {\n        // send request to provider\n        provider.sendAsync(req, (err, providerRes) => {\n            // forward any error\n            if (err) {\n                return end(err);\n            }\n            // copy provider response onto original response\n            Object.assign(res, providerRes);\n            return end();\n        });\n    };\n}\nexports.providerAsMiddleware = providerAsMiddleware;\nfunction ethersProviderAsMiddleware(provider) {\n    return (req, res, _next, end) => {\n        // send request to provider\n        provider.send(req, (err, providerRes) => {\n            // forward any error\n            if (err) {\n                return end(err);\n            }\n            // copy provider response onto original response\n            Object.assign(res, providerRes);\n            return end();\n        });\n    };\n}\nexports.ethersProviderAsMiddleware = ethersProviderAsMiddleware;\n//# sourceMappingURL=providerAsMiddleware.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.providerFromMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst providerFromEngine_1 = require(\"./providerFromEngine\");\nfunction providerFromMiddleware(middleware) {\n    const engine = new json_rpc_engine_1.JsonRpcEngine();\n    engine.push(middleware);\n    const provider = (0, providerFromEngine_1.providerFromEngine)(engine);\n    return provider;\n}\nexports.providerFromMiddleware = providerFromMiddleware;\n//# sourceMappingURL=providerFromMiddleware.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBlockTrackerInspectorMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst futureBlockRefRequests = [\n    'eth_getTransactionByHash',\n    'eth_getTransactionReceipt',\n];\n// inspect if response contains a block ref higher than our latest block\nfunction createBlockTrackerInspectorMiddleware({ blockTracker, }) {\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {\n        var _a;\n        if (!futureBlockRefRequests.includes(req.method)) {\n            return next();\n        }\n        // eslint-disable-next-line node/callback-return\n        await next();\n        // abort if no result or no block number\n        if (!((_a = res.result) === null || _a === void 0 ? void 0 : _a.blockNumber)) {\n            return undefined;\n        }\n        if (typeof res.result.blockNumber === 'string') {\n            // if number is higher, suggest block-tracker check for a new block\n            const blockNumber = Number.parseInt(res.result.blockNumber, 16);\n            // Typecast: If getCurrentBlock returns null, currentBlockNumber will be NaN, which is fine.\n            const currentBlockNumber = Number.parseInt(blockTracker.getCurrentBlock(), 16);\n            if (blockNumber > currentBlockNumber) {\n                await blockTracker.checkForLatestBlock();\n            }\n        }\n        return undefined;\n    });\n}\nexports.createBlockTrackerInspectorMiddleware = createBlockTrackerInspectorMiddleware;\n//# sourceMappingURL=block-tracker-inspector.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBlockRefMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst clone_1 = __importDefault(require(\"clone\"));\nconst pify_1 = __importDefault(require(\"pify\"));\nconst cache_1 = require(\"./utils/cache\");\nfunction createBlockRefMiddleware({ provider, blockTracker, } = {}) {\n    if (!provider) {\n        throw Error('BlockRefMiddleware - mandatory \"provider\" option is missing.');\n    }\n    if (!blockTracker) {\n        throw Error('BlockRefMiddleware - mandatory \"blockTracker\" option is missing.');\n    }\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {\n        var _a;\n        const blockRefIndex = (0, cache_1.blockTagParamIndex)(req);\n        // skip if method does not include blockRef\n        if (blockRefIndex === undefined) {\n            return next();\n        }\n        // skip if not \"latest\"\n        let blockRef = (_a = req.params) === null || _a === void 0 ? void 0 : _a[blockRefIndex];\n        // omitted blockRef implies \"latest\"\n        if (blockRef === undefined) {\n            blockRef = 'latest';\n        }\n        if (blockRef !== 'latest') {\n            return next();\n        }\n        // lookup latest block\n        const latestBlockNumber = await blockTracker.getLatestBlock();\n        // create child request with specific block-ref\n        const childRequest = (0, clone_1.default)(req);\n        if (childRequest.params) {\n            childRequest.params[blockRefIndex] = latestBlockNumber;\n        }\n        // perform child request\n        const childRes = await (0, pify_1.default)(provider.sendAsync).call(provider, childRequest);\n        // copy child response onto original response\n        res.result = childRes.result;\n        res.error = childRes.error;\n        return next();\n    });\n}\nexports.createBlockRefMiddleware = createBlockRefMiddleware;\n//# sourceMappingURL=block-ref.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createFetchConfigFromReq = exports.createFetchMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n/* eslint-disable node/global-require,@typescript-eslint/no-require-imports */\nconst fetch = global.fetch || require('node-fetch');\nconst btoa = global.btoa || require('btoa');\n/* eslint-enable node/global-require,@typescript-eslint/no-require-imports */\nconst RETRIABLE_ERRORS = [\n    // ignore server overload errors\n    'Gateway timeout',\n    'ETIMEDOUT',\n    // ignore server sent html error pages\n    // or truncated json responses\n    'failed to parse response body',\n    // ignore errors where http req failed to establish\n    'Failed to fetch',\n];\nfunction createFetchMiddleware({ rpcUrl, originHttpHeaderKey, }) {\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, _next) => {\n        const { fetchUrl, fetchParams } = createFetchConfigFromReq({\n            req,\n            rpcUrl,\n            originHttpHeaderKey,\n        });\n        // attempt request multiple times\n        const maxAttempts = 5;\n        const retryInterval = 1000;\n        for (let attempt = 0; attempt < maxAttempts; attempt++) {\n            try {\n                const fetchRes = await fetch(fetchUrl, fetchParams);\n                // check for http errrors\n                checkForHttpErrors(fetchRes);\n                // parse response body\n                const rawBody = await fetchRes.text();\n                let fetchBody;\n                try {\n                    fetchBody = JSON.parse(rawBody);\n                }\n                catch (_) {\n                    throw new Error(`FetchMiddleware - failed to parse response body: \"${rawBody}\"`);\n                }\n                const result = parseResponse(fetchRes, fetchBody);\n                // set result and exit retry loop\n                res.result = result;\n                return;\n            }\n            catch (err) {\n                const errMsg = err.toString();\n                const isRetriable = RETRIABLE_ERRORS.some((phrase) => errMsg.includes(phrase));\n                // re-throw error if not retriable\n                if (!isRetriable) {\n                    throw err;\n                }\n            }\n            // delay before retrying\n            await timeout(retryInterval);\n        }\n    });\n}\nexports.createFetchMiddleware = createFetchMiddleware;\nfunction checkForHttpErrors(fetchRes) {\n    // check for errors\n    switch (fetchRes.status) {\n        case 405:\n            throw eth_rpc_errors_1.ethErrors.rpc.methodNotFound();\n        case 418:\n            throw createRatelimitError();\n        case 503:\n        case 504:\n            throw createTimeoutError();\n        default:\n            break;\n    }\n}\nfunction parseResponse(fetchRes, body) {\n    // check for error code\n    if (fetchRes.status !== 200) {\n        throw eth_rpc_errors_1.ethErrors.rpc.internal({\n            message: `Non-200 status code: '${fetchRes.status}'`,\n            data: body,\n        });\n    }\n    // check for rpc error\n    if (body.error) {\n        throw eth_rpc_errors_1.ethErrors.rpc.internal({\n            data: body.error,\n        });\n    }\n    // return successful result\n    return body.result;\n}\nfunction createFetchConfigFromReq({ req, rpcUrl, originHttpHeaderKey, }) {\n    const parsedUrl = new URL(rpcUrl);\n    const fetchUrl = normalizeUrlFromParsed(parsedUrl);\n    // prepare payload\n    // copy only canonical json rpc properties\n    const payload = {\n        id: req.id,\n        jsonrpc: req.jsonrpc,\n        method: req.method,\n        params: req.params,\n    };\n    // extract 'origin' parameter from request\n    const originDomain = req.origin;\n    // serialize request body\n    const serializedPayload = JSON.stringify(payload);\n    // configure fetch params\n    const fetchParams = {\n        method: 'POST',\n        headers: {\n            Accept: 'application/json',\n            'Content-Type': 'application/json',\n        },\n        body: serializedPayload,\n    };\n    // encoded auth details as header (not allowed in fetch url)\n    if (parsedUrl.username && parsedUrl.password) {\n        const authString = `${parsedUrl.username}:${parsedUrl.password}`;\n        const encodedAuth = btoa(authString);\n        fetchParams.headers.Authorization = `Basic ${encodedAuth}`;\n    }\n    // optional: add request origin as header\n    if (originHttpHeaderKey && originDomain) {\n        fetchParams.headers[originHttpHeaderKey] = originDomain;\n    }\n    return { fetchUrl, fetchParams };\n}\nexports.createFetchConfigFromReq = createFetchConfigFromReq;\nfunction normalizeUrlFromParsed(parsedUrl) {\n    let result = '';\n    result += parsedUrl.protocol;\n    result += `//${parsedUrl.hostname}`;\n    if (parsedUrl.port) {\n        result += `:${parsedUrl.port}`;\n    }\n    result += `${parsedUrl.pathname}`;\n    result += `${parsedUrl.search}`;\n    return result;\n}\nfunction createRatelimitError() {\n    return eth_rpc_errors_1.ethErrors.rpc.internal({ message: `Request is being rate limited.` });\n}\nfunction createTimeoutError() {\n    let msg = `Gateway timeout. The request took too long to process. `;\n    msg += `This can happen when querying logs over too wide a block range.`;\n    return eth_rpc_errors_1.ethErrors.rpc.internal({ message: msg });\n}\nfunction timeout(duration) {\n    return new Promise((resolve) => setTimeout(resolve, duration));\n}\n//# sourceMappingURL=fetch.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBlockCacheMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst cache_1 = require(\"./utils/cache\");\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues = [undefined, null, '\\u003cnil\\u003e'];\n//\n// Cache Strategies\n//\nclass BlockCacheStrategy {\n    constructor() {\n        this.cache = {};\n    }\n    getBlockCacheForPayload(_payload, blockNumberHex) {\n        const blockNumber = Number.parseInt(blockNumberHex, 16);\n        let blockCache = this.cache[blockNumber];\n        // create new cache if necesary\n        if (!blockCache) {\n            const newCache = {};\n            this.cache[blockNumber] = newCache;\n            blockCache = newCache;\n        }\n        return blockCache;\n    }\n    async get(payload, requestedBlockNumber) {\n        // lookup block cache\n        const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);\n        // lookup payload in block cache\n        const identifier = (0, cache_1.cacheIdentifierForPayload)(payload, true);\n        return identifier ? blockCache[identifier] : undefined;\n    }\n    async set(payload, requestedBlockNumber, result) {\n        // check if we can cached this result\n        const canCacheResult = this.canCacheResult(payload, result);\n        if (!canCacheResult) {\n            return;\n        }\n        // set the value in the cache\n        const identifier = (0, cache_1.cacheIdentifierForPayload)(payload, true);\n        if (!identifier) {\n            return;\n        }\n        const blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);\n        blockCache[identifier] = result;\n    }\n    canCacheRequest(payload) {\n        // check request method\n        if (!(0, cache_1.canCache)(payload)) {\n            return false;\n        }\n        // check blockTag\n        const blockTag = (0, cache_1.blockTagForPayload)(payload);\n        if (blockTag === 'pending') {\n            return false;\n        }\n        // can be cached\n        return true;\n    }\n    canCacheResult(payload, result) {\n        // never cache empty values (e.g. undefined)\n        if (emptyValues.includes(result)) {\n            return false;\n        }\n        // check if transactions have block reference before caching\n        if (payload.method &&\n            ['eth_getTransactionByHash', 'eth_getTransactionReceipt'].includes(payload.method)) {\n            if (!result ||\n                !result.blockHash ||\n                result.blockHash ===\n                    '0x0000000000000000000000000000000000000000000000000000000000000000') {\n                return false;\n            }\n        }\n        // otherwise true\n        return true;\n    }\n    // removes all block caches with block number lower than `oldBlockHex`\n    clearBefore(oldBlockHex) {\n        const oldBlockNumber = Number.parseInt(oldBlockHex, 16);\n        // clear old caches\n        Object.keys(this.cache)\n            .map(Number)\n            .filter((num) => num < oldBlockNumber)\n            .forEach((num) => delete this.cache[num]);\n    }\n}\nfunction createBlockCacheMiddleware({ blockTracker, } = {}) {\n    // validate options\n    if (!blockTracker) {\n        throw new Error('createBlockCacheMiddleware - No PollingBlockTracker specified');\n    }\n    // create caching strategies\n    const blockCache = new BlockCacheStrategy();\n    const strategies = {\n        perma: blockCache,\n        block: blockCache,\n        fork: blockCache,\n    };\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {\n        // allow cach to be skipped if so specified\n        if (req.skipCache) {\n            return next();\n        }\n        // check type and matching strategy\n        const type = (0, cache_1.cacheTypeForPayload)(req);\n        const strategy = strategies[type];\n        // If there's no strategy in place, pass it down the chain.\n        if (!strategy) {\n            return next();\n        }\n        // If the strategy can't cache this request, ignore it.\n        if (!strategy.canCacheRequest(req)) {\n            return next();\n        }\n        // get block reference (number or keyword)\n        let blockTag = (0, cache_1.blockTagForPayload)(req);\n        if (!blockTag) {\n            blockTag = 'latest';\n        }\n        // get exact block number\n        let requestedBlockNumber;\n        if (blockTag === 'earliest') {\n            // this just exists for symmetry with \"latest\"\n            requestedBlockNumber = '0x00';\n        }\n        else if (blockTag === 'latest') {\n            // fetch latest block number\n            const latestBlockNumber = await blockTracker.getLatestBlock();\n            // clear all cache before latest block\n            blockCache.clearBefore(latestBlockNumber);\n            requestedBlockNumber = latestBlockNumber;\n        }\n        else {\n            // We have a hex number\n            requestedBlockNumber = blockTag;\n        }\n        // end on a hit, continue on a miss\n        const cacheResult = await strategy.get(req, requestedBlockNumber);\n        if (cacheResult === undefined) {\n            // cache miss\n            // wait for other middleware to handle request\n            // eslint-disable-next-line node/callback-return\n            await next();\n            // add result to cache\n            // it's safe to cast res.result as Block, due to runtime type checks\n            // performed when strategy.set is called\n            await strategy.set(req, requestedBlockNumber, res.result);\n        }\n        else {\n            // fill in result from cache\n            res.result = cacheResult;\n        }\n        return undefined;\n    });\n}\nexports.createBlockCacheMiddleware = createBlockCacheMiddleware;\n//# sourceMappingURL=block-cache.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createBlockRefRewriteMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst cache_1 = require(\"./utils/cache\");\nfunction createBlockRefRewriteMiddleware({ blockTracker, } = {}) {\n    if (!blockTracker) {\n        throw Error('BlockRefRewriteMiddleware - mandatory \"blockTracker\" option is missing.');\n    }\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, _res, next) => {\n        var _a;\n        const blockRefIndex = (0, cache_1.blockTagParamIndex)(req);\n        // skip if method does not include blockRef\n        if (blockRefIndex === undefined) {\n            return next();\n        }\n        // skip if not \"latest\"\n        let blockRef = (_a = req.params) === null || _a === void 0 ? void 0 : _a[blockRefIndex];\n        // omitted blockRef implies \"latest\"\n        if (blockRef === undefined) {\n            blockRef = 'latest';\n        }\n        if (blockRef !== 'latest') {\n            return next();\n        }\n        // rewrite blockRef to block-tracker's block number\n        const latestBlockNumber = await blockTracker.getLatestBlock();\n        if (req.params) {\n            // eslint-disable-next-line require-atomic-updates\n            req.params[blockRefIndex] = latestBlockNumber;\n        }\n        return next();\n    });\n}\nexports.createBlockRefRewriteMiddleware = createBlockRefRewriteMiddleware;\n//# sourceMappingURL=block-ref-rewrite.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.providerFromEngine = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nfunction providerFromEngine(engine) {\n    const provider = new safe_event_emitter_1.default();\n    // handle both rpc send methods\n    provider.sendAsync = engine.handle.bind(engine);\n    provider.send = (req, callback) => {\n        if (typeof callback !== 'function') {\n            throw new Error('Must provide callback to \"send\" method.');\n        }\n        engine.handle(req, callback);\n    };\n    // forward notifications\n    if (engine.on) {\n        engine.on('notification', (message) => {\n            provider.emit('data', null, message);\n        });\n    }\n    return provider;\n}\nexports.providerFromEngine = providerFromEngine;\n//# sourceMappingURL=providerFromEngine.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createInflightCacheMiddleware = void 0;\nconst clone_1 = __importDefault(require(\"clone\"));\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst cache_1 = require(\"./utils/cache\");\nfunction createInflightCacheMiddleware() {\n    const inflightRequests = {};\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {\n        // allow cach to be skipped if so specified\n        if (req.skipCache) {\n            return next();\n        }\n        // get cacheId, if cacheable\n        const cacheId = (0, cache_1.cacheIdentifierForPayload)(req);\n        // if not cacheable, skip\n        if (!cacheId) {\n            return next();\n        }\n        // check for matching requests\n        let activeRequestHandlers = inflightRequests[cacheId];\n        // if found, wait for the active request to be handled\n        if (activeRequestHandlers) {\n            // setup the response listener and wait for it to be called\n            // it will handle copying the result and request fields\n            await createActiveRequestHandler(res, activeRequestHandlers);\n            return undefined;\n        }\n        // setup response handler array for subsequent requests\n        activeRequestHandlers = [];\n        inflightRequests[cacheId] = activeRequestHandlers;\n        // allow request to be handled normally\n        // eslint-disable-next-line node/callback-return\n        await next();\n        // clear inflight requests\n        delete inflightRequests[cacheId];\n        // schedule activeRequestHandlers to be handled\n        handleActiveRequest(res, activeRequestHandlers);\n        // complete\n        return undefined;\n    });\n    function createActiveRequestHandler(res, activeRequestHandlers) {\n        const { resolve, promise } = deferredPromise();\n        activeRequestHandlers.push((handledRes) => {\n            // append a copy of the result and error to the response\n            res.result = (0, clone_1.default)(handledRes.result);\n            res.error = (0, clone_1.default)(handledRes.error);\n            resolve();\n        });\n        return promise;\n    }\n    function handleActiveRequest(res, activeRequestHandlers) {\n        // use setTimeout so we can resolve our original request first\n        setTimeout(() => {\n            activeRequestHandlers.forEach((handler) => {\n                try {\n                    handler(res);\n                }\n                catch (err) {\n                    // catch error so all requests are handled correctly\n                    console.error(err);\n                }\n            });\n        });\n    }\n}\nexports.createInflightCacheMiddleware = createInflightCacheMiddleware;\nfunction deferredPromise() {\n    let resolve;\n    const promise = new Promise((_resolve) => {\n        resolve = _resolve;\n    });\n    return { resolve, promise };\n}\n//# sourceMappingURL=inflight-cache.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createRetryOnEmptyMiddleware = void 0;\nconst clone_1 = __importDefault(require(\"clone\"));\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst pify_1 = __importDefault(require(\"pify\"));\nconst cache_1 = require(\"./utils/cache\");\n//\n// RetryOnEmptyMiddleware will retry any request with an empty response that has\n// a numbered block reference at or lower than the blockTracker's latest block.\n// Its useful for dealing with load-balanced ethereum JSON RPC\n// nodes that are not always in sync with each other.\n//\n// empty values used to determine if a request should be retried\n// `<nil>` comes from https://github.com/ethereum/go-ethereum/issues/16925\nconst emptyValues = [\n    undefined,\n    null,\n    '\\u003cnil\\u003e',\n];\nfunction createRetryOnEmptyMiddleware({ provider, blockTracker, } = {}) {\n    if (!provider) {\n        throw Error('RetryOnEmptyMiddleware - mandatory \"provider\" option is missing.');\n    }\n    if (!blockTracker) {\n        throw Error('RetryOnEmptyMiddleware - mandatory \"blockTracker\" option is missing.');\n    }\n    return (0, json_rpc_engine_1.createAsyncMiddleware)(async (req, res, next) => {\n        var _a;\n        const blockRefIndex = (0, cache_1.blockTagParamIndex)(req);\n        // skip if method does not include blockRef\n        if (blockRefIndex === undefined) {\n            return next();\n        }\n        // skip if not exact block references\n        let blockRef = (_a = req.params) === null || _a === void 0 ? void 0 : _a[blockRefIndex];\n        // omitted blockRef implies \"latest\"\n        if (blockRef === undefined) {\n            blockRef = 'latest';\n        }\n        // skip if non-number block reference\n        if (['latest', 'pending'].includes(blockRef)) {\n            return next();\n        }\n        // skip if block refernce is not a valid number\n        const blockRefNumber = Number.parseInt(blockRef.slice(2), 16);\n        if (Number.isNaN(blockRefNumber)) {\n            return next();\n        }\n        // lookup latest block\n        const latestBlockNumberHex = await blockTracker.getLatestBlock();\n        const latestBlockNumber = Number.parseInt(latestBlockNumberHex.slice(2), 16);\n        // skip if request block number is higher than current\n        if (blockRefNumber > latestBlockNumber) {\n            return next();\n        }\n        // create child request with specific block-ref\n        const childRequest = (0, clone_1.default)(req);\n        // attempt child request until non-empty response is received\n        const childResponse = await retry(10, async () => {\n            const attemptResponse = await (0, pify_1.default)(provider.sendAsync).call(provider, childRequest);\n            // verify result\n            if (emptyValues.includes(attemptResponse)) {\n                throw new Error(`RetryOnEmptyMiddleware - empty response \"${JSON.stringify(attemptResponse)}\" for request \"${JSON.stringify(childRequest)}\"`);\n            }\n            return attemptResponse;\n        });\n        // copy child response onto original response\n        res.result = childResponse.result;\n        res.error = childResponse.error;\n        return next();\n    });\n}\nexports.createRetryOnEmptyMiddleware = createRetryOnEmptyMiddleware;\nasync function retry(maxRetries, asyncFn) {\n    for (let index = 0; index < maxRetries; index++) {\n        try {\n            return await asyncFn();\n        }\n        catch (err) {\n            await timeout(1000);\n        }\n    }\n    throw new Error('RetryOnEmptyMiddleware - retries exhausted');\n}\nfunction timeout(duration) {\n    return new Promise((resolve) => setTimeout(resolve, duration));\n}\n//# sourceMappingURL=retryOnEmpty.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createWalletMiddleware = void 0;\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst sigUtil = __importStar(require(\"eth-sig-util\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nfunction createWalletMiddleware({ getAccounts, processDecryptMessage, processEncryptionPublicKey, processEthSignMessage, processPersonalMessage, processTransaction, processSignTransaction, processTypedMessage, processTypedMessageV3, processTypedMessageV4, }) {\n    if (!getAccounts) {\n        throw new Error('opts.getAccounts is required');\n    }\n    return (0, json_rpc_engine_1.createScaffoldMiddleware)({\n        // account lookups\n        eth_accounts: (0, json_rpc_engine_1.createAsyncMiddleware)(lookupAccounts),\n        eth_coinbase: (0, json_rpc_engine_1.createAsyncMiddleware)(lookupDefaultAccount),\n        // tx signatures\n        eth_sendTransaction: (0, json_rpc_engine_1.createAsyncMiddleware)(sendTransaction),\n        eth_signTransaction: (0, json_rpc_engine_1.createAsyncMiddleware)(signTransaction),\n        // message signatures\n        eth_sign: (0, json_rpc_engine_1.createAsyncMiddleware)(ethSign),\n        eth_signTypedData: (0, json_rpc_engine_1.createAsyncMiddleware)(signTypedData),\n        eth_signTypedData_v3: (0, json_rpc_engine_1.createAsyncMiddleware)(signTypedDataV3),\n        eth_signTypedData_v4: (0, json_rpc_engine_1.createAsyncMiddleware)(signTypedDataV4),\n        personal_sign: (0, json_rpc_engine_1.createAsyncMiddleware)(personalSign),\n        eth_getEncryptionPublicKey: (0, json_rpc_engine_1.createAsyncMiddleware)(encryptionPublicKey),\n        eth_decrypt: (0, json_rpc_engine_1.createAsyncMiddleware)(decryptMessage),\n        personal_ecRecover: (0, json_rpc_engine_1.createAsyncMiddleware)(personalRecover),\n    });\n    //\n    // account lookups\n    //\n    async function lookupAccounts(req, res) {\n        res.result = await getAccounts(req);\n    }\n    async function lookupDefaultAccount(req, res) {\n        const accounts = await getAccounts(req);\n        res.result = accounts[0] || null;\n    }\n    //\n    // transaction signatures\n    //\n    async function sendTransaction(req, res) {\n        if (!processTransaction) {\n            throw eth_rpc_errors_1.ethErrors.rpc.methodNotSupported();\n        }\n        const txParams = req.params[0] || {};\n        txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n        res.result = await processTransaction(txParams, req);\n    }\n    async function signTransaction(req, res) {\n        if (!processSignTransaction) {\n            throw eth_rpc_errors_1.ethErrors.rpc.methodNotSupported();\n        }\n        const txParams = req.params[0] || {};\n        txParams.from = await validateAndNormalizeKeyholder(txParams.from, req);\n        res.result = await processSignTransaction(txParams, req);\n    }\n    //\n    // message signatures\n    //\n    async function ethSign(req, res) {\n        if (!processEthSignMessage) {\n            throw eth_rpc_errors_1.ethErrors.rpc.methodNotSupported();\n        }\n        const address = await validateAndNormalizeKeyholder(req.params[0], req);\n        const message = req.params[1];\n        const extraParams = req.params[2] || {};\n        const msgParams = Object.assign(Object.assign({}, extraParams), { from: address, data: message });\n        res.result = await processEthSignMessage(msgParams, req);\n    }\n    async function signTypedData(req, res) {\n        if (!processTypedMessage) {\n            throw eth_rpc_errors_1.ethErrors.rpc.methodNotSupported();\n        }\n        const message = req.params[0];\n        const address = await validateAndNormalizeKeyholder(req.params[1], req);\n        const version = 'V1';\n        const extraParams = req.params[2] || {};\n        const msgParams = Object.assign(Object.assign({}, extraParams), { from: address, data: message });\n        res.result = await processTypedMessage(msgParams, req, version);\n    }\n    async function signTypedDataV3(req, res) {\n        if (!processTypedMessageV3) {\n            throw eth_rpc_errors_1.ethErrors.rpc.methodNotSupported();\n        }\n        const address = await validateAndNormalizeKeyholder(req.params[0], req);\n        const message = req.params[1];\n        const version = 'V3';\n        const msgParams = {\n            data: message,\n            from: address,\n            version,\n        };\n        res.result = await processTypedMessageV3(msgParams, req, version);\n    }\n    async function signTypedDataV4(req, res) {\n        if (!processTypedMessageV4) {\n            throw eth_rpc_errors_1.ethErrors.rpc.methodNotSupported();\n        }\n        const address = await validateAndNormalizeKeyholder(req.params[0], req);\n        const message = req.params[1];\n        const version = 'V4';\n        const msgParams = {\n            data: message,\n            from: address,\n            version,\n        };\n        res.result = await processTypedMessageV4(msgParams, req, version);\n    }\n    async function personalSign(req, res) {\n        if (!processPersonalMessage) {\n            throw eth_rpc_errors_1.ethErrors.rpc.methodNotSupported();\n        }\n        // process normally\n        const firstParam = req.params[0];\n        const secondParam = req.params[1];\n        // non-standard \"extraParams\" to be appended to our \"msgParams\" obj\n        const extraParams = req.params[2] || {};\n        // We initially incorrectly ordered these parameters.\n        // To gracefully respect users who adopted this API early,\n        // we are currently gracefully recovering from the wrong param order\n        // when it is clearly identifiable.\n        //\n        // That means when the first param is definitely an address,\n        // and the second param is definitely not, but is hex.\n        let address, message;\n        if (resemblesAddress(firstParam) && !resemblesAddress(secondParam)) {\n            let warning = `The eth_personalSign method requires params ordered `;\n            warning += `[message, address]. This was previously handled incorrectly, `;\n            warning += `and has been corrected automatically. `;\n            warning += `Please switch this param order for smooth behavior in the future.`;\n            res.warning = warning;\n            address = firstParam;\n            message = secondParam;\n        }\n        else {\n            message = firstParam;\n            address = secondParam;\n        }\n        address = await validateAndNormalizeKeyholder(address, req);\n        const msgParams = Object.assign(Object.assign({}, extraParams), { from: address, data: message });\n        // eslint-disable-next-line require-atomic-updates\n        res.result = await processPersonalMessage(msgParams, req);\n    }\n    async function personalRecover(req, res) {\n        const message = req.params[0];\n        const signature = req.params[1];\n        const extraParams = req.params[2] || {};\n        const msgParams = Object.assign(Object.assign({}, extraParams), { sig: signature, data: message });\n        const signerAddress = sigUtil.recoverPersonalSignature(msgParams);\n        res.result = signerAddress;\n    }\n    async function encryptionPublicKey(req, res) {\n        if (!processEncryptionPublicKey) {\n            throw eth_rpc_errors_1.ethErrors.rpc.methodNotSupported();\n        }\n        const address = await validateAndNormalizeKeyholder(req.params[0], req);\n        res.result = await processEncryptionPublicKey(address, req);\n    }\n    async function decryptMessage(req, res) {\n        if (!processDecryptMessage) {\n            throw eth_rpc_errors_1.ethErrors.rpc.methodNotSupported();\n        }\n        const ciphertext = req.params[0];\n        const address = await validateAndNormalizeKeyholder(req.params[1], req);\n        const extraParams = req.params[2] || {};\n        const msgParams = Object.assign(Object.assign({}, extraParams), { from: address, data: ciphertext });\n        res.result = await processDecryptMessage(msgParams, req);\n    }\n    //\n    // utility\n    //\n    /**\n     * Validates the keyholder address, and returns a normalized (i.e. lowercase)\n     * copy of it.\n     *\n     * @param {string} address - The address to validate and normalize.\n     * @param {Object} req - The request object.\n     * @returns {string} - The normalized address, if valid. Otherwise, throws\n     * an error\n     */\n    async function validateAndNormalizeKeyholder(address, req) {\n        if (typeof address === 'string' && address.length > 0) {\n            // ensure address is included in provided accounts\n            const accounts = await getAccounts(req);\n            const normalizedAccounts = accounts.map((_address) => _address.toLowerCase());\n            const normalizedAddress = address.toLowerCase();\n            if (normalizedAccounts.includes(normalizedAddress)) {\n                return normalizedAddress;\n            }\n        }\n        throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n            message: `Invalid parameters: must provide an Ethereum address.`,\n        });\n    }\n}\nexports.createWalletMiddleware = createWalletMiddleware;\nfunction resemblesAddress(str) {\n    // hex prefix 2 + 20 bytes\n    return str.length === 2 + 20 * 2;\n}\n//# sourceMappingURL=wallet.js.map",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) -- > 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Constants = exports.Client = void 0;\nvar client_1 = require(\"./client\");\nObject.defineProperty(exports, \"Client\", { enumerable: true, get: function () { return client_1.Client; } });\nvar constants_1 = require(\"./constants\");\nObject.defineProperty(exports, \"Constants\", { enumerable: true, get: function () { return constants_1.EXTERNAL; } });\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CANCELLABLE_INTERVAL = exports.DEFAULT_INTERVAL = void 0;\nconst controllers_1 = require(\"@metamask/controllers\");\nconst bignumber_js_1 = require(\"bignumber.js\");\nconst ethers_1 = require(\"ethers\");\nconst mapValues_1 = __importDefault(require(\"lodash/mapValues\"));\nconst cloneDeep_1 = __importDefault(require(\"lodash/cloneDeep\"));\nconst types_1 = require(\"./types\");\nconst utils_1 = require(\"./utils\");\nconst constants_1 = require(\"./constants\");\nconst { safelyExecute } = controllers_1.util;\n// TODO: JSDoc all methods\n// TODO: Remove all comments (* ! ?)\nconst SECOND = 1000;\nconst MINUTE = SECOND * 60;\nexports.DEFAULT_INTERVAL = SECOND * 10;\nexports.CANCELLABLE_INTERVAL = MINUTE;\nclass SmartTransactionsController extends controllers_1.BaseController {\n    constructor({ onNetworkStateChange, getNonceLock, getNetwork, provider, confirmExternalTransaction, trackMetaMetricsEvent, }, config, state) {\n        super(config, state);\n        this.defaultConfig = {\n            interval: exports.DEFAULT_INTERVAL,\n            chainId: constants_1.CHAIN_IDS.ETHEREUM,\n            clientId: 'default',\n            supportedChainIds: [constants_1.CHAIN_IDS.ETHEREUM, constants_1.CHAIN_IDS.RINKEBY],\n        };\n        this.defaultState = {\n            smartTransactionsState: {\n                smartTransactions: {},\n                userOptIn: undefined,\n                fees: undefined,\n                liveness: true,\n                estimatedGas: {\n                    txData: undefined,\n                    approvalTxData: undefined,\n                },\n            },\n        };\n        this.getNonceLock = getNonceLock;\n        this.getNetwork = getNetwork;\n        this.ethersProvider = new ethers_1.ethers.providers.Web3Provider(provider);\n        this.confirmExternalTransaction = confirmExternalTransaction;\n        this.trackMetaMetricsEvent = trackMetaMetricsEvent;\n        this.initialize();\n        this.initializeSmartTransactionsForChainId();\n        onNetworkStateChange(({ provider: newProvider }) => {\n            const { chainId } = newProvider;\n            this.configure({ chainId });\n            this.initializeSmartTransactionsForChainId();\n            this.checkPoll(this.state);\n            this.ethersProvider = new ethers_1.ethers.providers.Web3Provider(provider);\n        });\n        this.subscribe((currentState) => this.checkPoll(currentState));\n    }\n    /* istanbul ignore next */\n    async fetch(request, options) {\n        const { clientId } = this.config;\n        const fetchOptions = Object.assign(Object.assign({}, options), { headers: Object.assign({ 'Content-Type': 'application/json' }, (clientId && { 'X-Client-Id': clientId })) });\n        return utils_1.handleFetch(request, fetchOptions);\n    }\n    checkPoll(state) {\n        const { smartTransactions } = state.smartTransactionsState;\n        const currentSmartTransactions = smartTransactions[this.config.chainId];\n        const pendingTransactions = currentSmartTransactions === null || currentSmartTransactions === void 0 ? void 0 : currentSmartTransactions.filter(utils_1.isSmartTransactionPending);\n        if (!this.timeoutHandle && (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) > 0) {\n            this.poll();\n        }\n        else if (this.timeoutHandle && (pendingTransactions === null || pendingTransactions === void 0 ? void 0 : pendingTransactions.length) === 0) {\n            this.stop();\n        }\n    }\n    initializeSmartTransactionsForChainId() {\n        var _a;\n        if (this.config.supportedChainIds.includes(this.config.chainId)) {\n            const { smartTransactionsState } = this.state;\n            this.update({\n                smartTransactionsState: Object.assign(Object.assign({}, smartTransactionsState), { smartTransactions: Object.assign(Object.assign({}, smartTransactionsState.smartTransactions), { [this.config.chainId]: (_a = smartTransactionsState.smartTransactions[this.config.chainId]) !== null && _a !== void 0 ? _a : [] }) }),\n            });\n        }\n    }\n    async poll(interval) {\n        const { chainId, supportedChainIds } = this.config;\n        interval && this.configure({ interval }, false, false);\n        this.timeoutHandle && clearInterval(this.timeoutHandle);\n        if (!supportedChainIds.includes(chainId)) {\n            return;\n        }\n        await safelyExecute(() => this.updateSmartTransactions());\n        this.timeoutHandle = setInterval(() => {\n            safelyExecute(() => this.updateSmartTransactions());\n        }, this.config.interval);\n    }\n    async stop() {\n        this.timeoutHandle && clearInterval(this.timeoutHandle);\n        this.timeoutHandle = undefined;\n    }\n    setOptInState(state) {\n        this.update({\n            smartTransactionsState: Object.assign(Object.assign({}, this.state.smartTransactionsState), { userOptIn: state }),\n        });\n    }\n    trackStxStatusChange(smartTransaction, prevSmartTransaction) {\n        var _a, _b;\n        if (!prevSmartTransaction) {\n            return; // Don't track the first STX, because it doesn't have all necessary params.\n        }\n        let updatedSmartTransaction = cloneDeep_1.default(smartTransaction);\n        updatedSmartTransaction = Object.assign(Object.assign({}, cloneDeep_1.default(prevSmartTransaction)), updatedSmartTransaction);\n        if (!updatedSmartTransaction.swapMetaData ||\n            (updatedSmartTransaction.status === prevSmartTransaction.status &&\n                prevSmartTransaction.swapMetaData)) {\n            return; // If status hasn't changed, don't track it again.\n        }\n        const sensitiveProperties = {\n            stx_status: updatedSmartTransaction.status,\n            token_from_address: (_a = updatedSmartTransaction.txParams) === null || _a === void 0 ? void 0 : _a.from,\n            token_from_symbol: updatedSmartTransaction.sourceTokenSymbol,\n            token_to_address: (_b = updatedSmartTransaction.txParams) === null || _b === void 0 ? void 0 : _b.to,\n            token_to_symbol: updatedSmartTransaction.destinationTokenSymbol,\n            processing_time: utils_1.getStxProcessingTime(updatedSmartTransaction.time),\n            stx_enabled: true,\n            stx_user_opt_in: true,\n        };\n        this.trackMetaMetricsEvent({\n            event: 'STX Status Updated',\n            category: 'swaps',\n            sensitiveProperties,\n        });\n    }\n    isNewSmartTransaction(smartTransactionUuid) {\n        const { chainId } = this.config;\n        const { smartTransactionsState } = this.state;\n        const { smartTransactions } = smartTransactionsState;\n        const currentSmartTransactions = smartTransactions[chainId];\n        const currentIndex = currentSmartTransactions === null || currentSmartTransactions === void 0 ? void 0 : currentSmartTransactions.findIndex((stx) => stx.uuid === smartTransactionUuid);\n        return currentIndex === -1 || currentIndex === undefined;\n    }\n    updateSmartTransaction(smartTransaction) {\n        const { chainId } = this.config;\n        const { smartTransactionsState } = this.state;\n        const { smartTransactions } = smartTransactionsState;\n        const currentSmartTransactions = smartTransactions[chainId];\n        const currentIndex = currentSmartTransactions === null || currentSmartTransactions === void 0 ? void 0 : currentSmartTransactions.findIndex((stx) => stx.uuid === smartTransaction.uuid);\n        const isNewSmartTransaction = this.isNewSmartTransaction(smartTransaction.uuid);\n        this.trackStxStatusChange(smartTransaction, isNewSmartTransaction\n            ? undefined\n            : currentSmartTransactions[currentIndex]);\n        if (isNewSmartTransaction) {\n            // add smart transaction\n            const cancelledNonceIndex = currentSmartTransactions.findIndex((stx) => {\n                var _a, _b, _c;\n                return ((_a = stx.txParams) === null || _a === void 0 ? void 0 : _a.nonce) === ((_b = smartTransaction.txParams) === null || _b === void 0 ? void 0 : _b.nonce) &&\n                    ((_c = stx.status) === null || _c === void 0 ? void 0 : _c.startsWith('cancelled'));\n            });\n            const snapshot = cloneDeep_1.default(smartTransaction);\n            const history = [snapshot];\n            const historifiedSmartTransaction = Object.assign(Object.assign({}, smartTransaction), { history });\n            const nextSmartTransactions = cancelledNonceIndex > -1\n                ? currentSmartTransactions\n                    .slice(0, cancelledNonceIndex)\n                    .concat(currentSmartTransactions.slice(cancelledNonceIndex + 1))\n                    .concat(historifiedSmartTransaction)\n                : currentSmartTransactions.concat(historifiedSmartTransaction);\n            this.update({\n                smartTransactionsState: Object.assign(Object.assign({}, smartTransactionsState), { smartTransactions: Object.assign(Object.assign({}, smartTransactionsState.smartTransactions), { [chainId]: nextSmartTransactions }) }),\n            });\n            return;\n        }\n        if ((smartTransaction.status === types_1.SmartTransactionStatuses.SUCCESS ||\n            smartTransaction.status === types_1.SmartTransactionStatuses.REVERTED) &&\n            !smartTransaction.confirmed) {\n            // confirm smart transaction\n            const currentSmartTransaction = currentSmartTransactions[currentIndex];\n            const nextSmartTransaction = Object.assign(Object.assign({}, currentSmartTransaction), smartTransaction);\n            this.confirmSmartTransaction(nextSmartTransaction);\n        }\n        this.update({\n            smartTransactionsState: Object.assign(Object.assign({}, smartTransactionsState), { smartTransactions: Object.assign(Object.assign({}, smartTransactionsState.smartTransactions), { [chainId]: smartTransactionsState.smartTransactions[chainId].map((item, index) => {\n                        return index === currentIndex\n                            ? Object.assign(Object.assign({}, item), smartTransaction) : item;\n                    }) }) }),\n        });\n    }\n    async updateSmartTransactions() {\n        const { smartTransactions } = this.state.smartTransactionsState;\n        const { chainId } = this.config;\n        const currentSmartTransactions = smartTransactions === null || smartTransactions === void 0 ? void 0 : smartTransactions[chainId];\n        const transactionsToUpdate = currentSmartTransactions\n            .filter(utils_1.isSmartTransactionPending)\n            .map((smartTransaction) => smartTransaction.uuid);\n        if (transactionsToUpdate.length > 0) {\n            this.fetchSmartTransactionsStatus(transactionsToUpdate);\n        }\n    }\n    async confirmSmartTransaction(smartTransaction) {\n        var _a, _b, _c;\n        const txHash = (_a = smartTransaction.statusMetadata) === null || _a === void 0 ? void 0 : _a.minedHash;\n        try {\n            const transactionReceipt = await this.ethersProvider.getTransactionReceipt(txHash);\n            const transaction = await this.ethersProvider.getTransaction(txHash);\n            const maxFeePerGas = (_b = transaction.maxFeePerGas) === null || _b === void 0 ? void 0 : _b.toHexString();\n            const maxPriorityFeePerGas = (_c = transaction.maxPriorityFeePerGas) === null || _c === void 0 ? void 0 : _c.toHexString();\n            if (transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockNumber) {\n                const blockData = await this.ethersProvider.getBlock(transactionReceipt === null || transactionReceipt === void 0 ? void 0 : transactionReceipt.blockNumber, false);\n                const baseFeePerGas = blockData === null || blockData === void 0 ? void 0 : blockData.baseFeePerGas.toHexString();\n                const txReceipt = mapValues_1.default(transactionReceipt, (value) => {\n                    if (value instanceof ethers_1.ethers.BigNumber) {\n                        return value.toHexString();\n                    }\n                    return value;\n                });\n                const updatedTxParams = Object.assign(Object.assign({}, smartTransaction.txParams), { maxFeePerGas,\n                    maxPriorityFeePerGas });\n                // call confirmExternalTransaction\n                const originalTxMeta = Object.assign(Object.assign({}, smartTransaction), { id: smartTransaction.uuid, status: 'confirmed', hash: txHash, txParams: updatedTxParams });\n                // create txMeta snapshot for history\n                const snapshot = utils_1.snapshotFromTxMeta(originalTxMeta);\n                // recover previous tx state obj\n                const previousState = utils_1.replayHistory(originalTxMeta.history);\n                // generate history entry and add to history\n                const entry = utils_1.generateHistoryEntry(previousState, snapshot, 'txStateManager: setting status to confirmed');\n                const txMeta = entry.length > 0\n                    ? Object.assign(Object.assign({}, originalTxMeta), { history: originalTxMeta.history.concat(entry) }) : originalTxMeta;\n                this.confirmExternalTransaction(txMeta, txReceipt, baseFeePerGas);\n                this.trackMetaMetricsEvent({\n                    event: 'STX Confirmed',\n                    category: 'swaps',\n                });\n                this.updateSmartTransaction(Object.assign(Object.assign({}, smartTransaction), { confirmed: true }));\n            }\n        }\n        catch (e) {\n            this.trackMetaMetricsEvent({\n                event: 'STX Confirmation Failed',\n                category: 'swaps',\n            });\n            console.error('confirm error', e);\n        }\n    }\n    // ! Ask backend API to accept list of uuids as params\n    async fetchSmartTransactionsStatus(uuids) {\n        const { chainId } = this.config;\n        const params = new URLSearchParams({\n            uuids: uuids.join(','),\n        });\n        const url = `${utils_1.getAPIRequestURL(types_1.APIType.BATCH_STATUS, chainId)}?${params.toString()}`;\n        const data = await this.fetch(url);\n        Object.entries(data).forEach(([uuid, smartTransaction]) => {\n            this.updateSmartTransaction({\n                statusMetadata: smartTransaction,\n                status: utils_1.calculateStatus(smartTransaction),\n                uuid,\n            });\n        });\n        return data;\n    }\n    async addNonceToTransaction(transaction) {\n        const nonceLock = await this.getNonceLock(transaction.from);\n        const nonce = nonceLock.nextNonce;\n        nonceLock.releaseLock();\n        return Object.assign(Object.assign({}, transaction), { nonce: `0x${nonce.toString(16)}` });\n    }\n    async getFees(unsignedTransaction) {\n        const { chainId } = this.config;\n        const unsignedTransactionWithNonce = await this.addNonceToTransaction(unsignedTransaction);\n        const data = await this.fetch(utils_1.getAPIRequestURL(types_1.APIType.GET_FEES, chainId), {\n            method: 'POST',\n            body: JSON.stringify({\n                tx: unsignedTransactionWithNonce,\n            }),\n        });\n        this.update({\n            smartTransactionsState: Object.assign(Object.assign({}, this.state.smartTransactionsState), { fees: data }),\n        });\n        return data;\n    }\n    async estimateGas(unsignedTransaction, approveTxParams) {\n        const { chainId } = this.config;\n        let approvalTxData;\n        if (approveTxParams) {\n            const unsignedApprovalTransactionWithNonce = await this.addNonceToTransaction(approveTxParams);\n            approvalTxData = await this.fetch(utils_1.getAPIRequestURL(types_1.APIType.ESTIMATE_GAS, chainId), {\n                method: 'POST',\n                body: JSON.stringify({\n                    tx: unsignedApprovalTransactionWithNonce,\n                }),\n            });\n        }\n        const unsignedTransactionWithNonce = await this.addNonceToTransaction(unsignedTransaction);\n        const data = await this.fetch(utils_1.getAPIRequestURL(types_1.APIType.ESTIMATE_GAS, chainId), {\n            method: 'POST',\n            body: JSON.stringify(Object.assign({ tx: unsignedTransactionWithNonce }, (approveTxParams && { pending_txs: [approveTxParams] }))),\n        });\n        this.update({\n            smartTransactionsState: Object.assign(Object.assign({}, this.state.smartTransactionsState), { estimatedGas: {\n                    txData: data,\n                    approvalTxData,\n                } }),\n        });\n        return data;\n    }\n    // * After this successful call client must add a nonce representative to\n    // * transaction controller external transactions list\n    async submitSignedTransactions({ txParams, signedTransactions, signedCanceledTransactions, }) {\n        const { chainId } = this.config;\n        const data = await this.fetch(utils_1.getAPIRequestURL(types_1.APIType.SUBMIT_TRANSACTIONS, chainId), {\n            method: 'POST',\n            body: JSON.stringify({\n                rawTxs: signedTransactions,\n                rawCancelTxs: signedCanceledTransactions,\n            }),\n        });\n        const time = Date.now();\n        const metamaskNetworkId = this.getNetwork();\n        let preTxBalance;\n        try {\n            const preTxBalanceBN = await this.ethersProvider.getBalance(txParams === null || txParams === void 0 ? void 0 : txParams.from);\n            preTxBalance = new bignumber_js_1.BigNumber(preTxBalanceBN.toHexString()).toString(16);\n        }\n        catch (e) {\n            console.error('ethers error', e);\n        }\n        const nonceLock = await this.getNonceLock(txParams === null || txParams === void 0 ? void 0 : txParams.from);\n        const nonce = ethers_1.ethers.utils.hexlify(nonceLock.nextNonce);\n        if (txParams && !(txParams === null || txParams === void 0 ? void 0 : txParams.nonce)) {\n            txParams.nonce = nonce;\n        }\n        const { nonceDetails } = nonceLock;\n        this.updateSmartTransaction({\n            chainId,\n            nonceDetails,\n            metamaskNetworkId,\n            preTxBalance,\n            status: types_1.SmartTransactionStatuses.PENDING,\n            time,\n            txParams,\n            uuid: data.uuid,\n            cancellable: true,\n        });\n        setTimeout(() => {\n            if (!this.isNewSmartTransaction(data.uuid)) {\n                // Only do this for an existing smart transaction. If an STX is not in the list anymore\n                // (e.g. because it was cancelled and a new one was submitted, which deletes the first one),\n                // do not try to update the old one, because it would create a new one with most\n                // of the required STX params missing. It would only have \"uuid\" and \"cancellable\" params.\n                this.updateSmartTransaction({\n                    uuid: data.uuid,\n                    cancellable: false,\n                });\n            }\n        }, exports.CANCELLABLE_INTERVAL);\n        nonceLock.releaseLock();\n        return data;\n    }\n    // ! This should return if the cancellation was on chain or not (for nonce management)\n    // * After this successful call client must update nonce representative\n    // * in transaction controller external transactions list\n    // ! Ask backend API to make this endpoint a POST\n    async cancelSmartTransaction(uuid) {\n        const { chainId } = this.config;\n        await this.fetch(utils_1.getAPIRequestURL(types_1.APIType.CANCEL, chainId), {\n            method: 'POST',\n            body: JSON.stringify({ uuid }),\n        });\n        this.updateSmartTransaction({\n            uuid,\n            status: types_1.SmartTransactionStatuses.CANCELLED_USER_CANCELLED,\n        });\n    }\n    async fetchLiveness() {\n        const { chainId } = this.config;\n        let liveness = false;\n        try {\n            const response = await this.fetch(utils_1.getAPIRequestURL(types_1.APIType.LIVENESS, chainId));\n            liveness = Boolean(response.lastBlock);\n        }\n        catch (e) {\n            console.log('\"fetchLiveness\" API call failed');\n        }\n        this.update({\n            smartTransactionsState: Object.assign(Object.assign({}, this.state.smartTransactionsState), { liveness }),\n        });\n        return liveness;\n    }\n    async setStatusRefreshInterval(interval) {\n        if (interval !== this.config.interval) {\n            this.configure({ interval }, false, false);\n        }\n    }\n    getTransactions({ addressFrom, status, }) {\n        const { smartTransactions } = this.state.smartTransactionsState;\n        const { chainId } = this.config;\n        const currentSmartTransactions = smartTransactions === null || smartTransactions === void 0 ? void 0 : smartTransactions[chainId];\n        if (!currentSmartTransactions || currentSmartTransactions.length === 0) {\n            return [];\n        }\n        return currentSmartTransactions.filter((stx) => {\n            var _a;\n            return stx.status === status && ((_a = stx.txParams) === null || _a === void 0 ? void 0 : _a.from) === addressFrom;\n        });\n    }\n}\nexports.default = SmartTransactionsController;\n//# sourceMappingURL=SmartTransactionsController.js.map","var assert = require('assert')\nvar Buffer = require('safe-buffer').Buffer\nvar crypto = require('crypto')\nvar cs = require('coinstring')\nvar secp256k1 = require('secp256k1')\n\nvar MASTER_SECRET = Buffer.from('Bitcoin seed', 'utf8')\nvar HARDENED_OFFSET = 0x80000000\nvar LEN = 78\n\n// Bitcoin hardcoded by default, can use package `coininfo` for others\nvar BITCOIN_VERSIONS = {private: 0x0488ADE4, public: 0x0488B21E}\n\nfunction HDKey (versions) {\n  this.versions = versions || BITCOIN_VERSIONS\n  this.depth = 0\n  this.index = 0\n  this._privateKey = null\n  this._publicKey = null\n  this.chainCode = null\n  this._fingerprint = 0\n  this.parentFingerprint = 0\n}\n\nObject.defineProperty(HDKey.prototype, 'fingerprint', { get: function () { return this._fingerprint } })\nObject.defineProperty(HDKey.prototype, 'identifier', { get: function () { return this._identifier } })\nObject.defineProperty(HDKey.prototype, 'pubKeyHash', { get: function () { return this.identifier } })\n\nObject.defineProperty(HDKey.prototype, 'privateKey', {\n  get: function () {\n    return this._privateKey\n  },\n  set: function (value) {\n    assert.equal(value.length, 32, 'Private key must be 32 bytes.')\n    assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key')\n\n    this._privateKey = value\n    this._publicKey = secp256k1.publicKeyCreate(value, true)\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicKey', {\n  get: function () {\n    return this._publicKey\n  },\n  set: function (value) {\n    assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.')\n    assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key')\n\n    this._publicKey = secp256k1.publicKeyConvert(value, true) // force compressed point\n    this._identifier = hash160(this.publicKey)\n    this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0)\n    this._privateKey = null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'privateExtendedKey', {\n  get: function () {\n    if (this._privateKey) return cs.encode(serialize(this, this.versions.private, Buffer.concat([Buffer.alloc(1, 0), this.privateKey])))\n    else return null\n  }\n})\n\nObject.defineProperty(HDKey.prototype, 'publicExtendedKey', {\n  get: function () {\n    return cs.encode(serialize(this, this.versions.public, this.publicKey))\n  }\n})\n\nHDKey.prototype.derive = function (path) {\n  if (path === 'm' || path === 'M' || path === \"m'\" || path === \"M'\") {\n    return this\n  }\n\n  var entries = path.split('/')\n  var hdkey = this\n  entries.forEach(function (c, i) {\n    if (i === 0) {\n      assert(c, 'm', 'Invalid path')\n      return\n    }\n\n    var hardened = (c.length > 1) && (c[c.length - 1] === \"'\")\n    var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)\n    assert(childIndex < HARDENED_OFFSET, 'Invalid index')\n    if (hardened) childIndex += HARDENED_OFFSET\n\n    hdkey = hdkey.deriveChild(childIndex)\n  })\n\n  return hdkey\n}\n\nHDKey.prototype.deriveChild = function (index) {\n  var isHardened = index >= HARDENED_OFFSET\n  var indexBuffer = Buffer.allocUnsafe(4)\n  indexBuffer.writeUInt32BE(index, 0)\n\n  var data\n\n  if (isHardened) { // Hardened child\n    assert(this.privateKey, 'Could not derive hardened child key')\n\n    var pk = this.privateKey\n    var zb = Buffer.alloc(1, 0)\n    pk = Buffer.concat([zb, pk])\n\n    // data = 0x00 || ser256(kpar) || ser32(index)\n    data = Buffer.concat([pk, indexBuffer])\n  } else { // Normal child\n    // data = serP(point(kpar)) || ser32(index)\n    //      = serP(Kpar) || ser32(index)\n    data = Buffer.concat([this.publicKey, indexBuffer])\n  }\n\n  var I = crypto.createHmac('sha512', this.chainCode).update(data).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hd = new HDKey(this.versions)\n\n  // Private parent key -> private child key\n  if (this.privateKey) {\n    // ki = parse256(IL) + kpar (mod n)\n    try {\n      hd.privateKey = secp256k1.privateKeyTweakAdd(this.privateKey, IL)\n      // throw if IL >= n || (privateKey + IL) === 0\n    } catch (err) {\n      // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i\n      return this.derive(index + 1)\n    }\n  // Public parent key -> public child key\n  } else {\n    // Ki = point(parse256(IL)) + Kpar\n    //    = G*IL + Kpar\n    try {\n      hd.publicKey = secp256k1.publicKeyTweakAdd(this.publicKey, IL, true)\n      // throw if IL >= n || (g**IL + publicKey) is infinity\n    } catch (err) {\n      // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i\n      return this.derive(index + 1, isHardened)\n    }\n  }\n\n  hd.chainCode = IR\n  hd.depth = this.depth + 1\n  hd.parentFingerprint = this.fingerprint// .readUInt32BE(0)\n  hd.index = index\n\n  return hd\n}\n\nHDKey.prototype.sign = function (hash) {\n  return secp256k1.sign(hash, this.privateKey).signature\n}\n\nHDKey.prototype.verify = function (hash, signature) {\n  return secp256k1.verify(hash, signature, this.publicKey)\n}\n\nHDKey.prototype.toJSON = function () {\n  return {\n    xpriv: this.privateExtendedKey,\n    xpub: this.publicExtendedKey\n  }\n}\n\nHDKey.fromMasterSeed = function (seedBuffer, versions) {\n  var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest()\n  var IL = I.slice(0, 32)\n  var IR = I.slice(32)\n\n  var hdkey = new HDKey(versions)\n  hdkey.chainCode = IR\n  hdkey.privateKey = IL\n\n  return hdkey\n}\n\nHDKey.fromExtendedKey = function (base58key, versions) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  versions = versions || BITCOIN_VERSIONS\n  var hdkey = new HDKey(versions)\n\n  var keyBuffer = cs.decode(base58key)\n\n  var version = keyBuffer.readUInt32BE(0)\n  assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public')\n\n  hdkey.depth = keyBuffer.readUInt8(4)\n  hdkey.parentFingerprint = keyBuffer.readUInt32BE(5)\n  hdkey.index = keyBuffer.readUInt32BE(9)\n  hdkey.chainCode = keyBuffer.slice(13, 45)\n\n  var key = keyBuffer.slice(45)\n  if (key.readUInt8(0) === 0) { // private\n    assert(version === versions.private, 'Version mismatch: version does not match private')\n    hdkey.privateKey = key.slice(1) // cut off first 0x0 byte\n  } else {\n    assert(version === versions.public, 'Version mismatch: version does not match public')\n    hdkey.publicKey = key\n  }\n\n  return hdkey\n}\n\nHDKey.fromJSON = function (obj) {\n  return HDKey.fromExtendedKey(obj.xpriv)\n}\n\nfunction serialize (hdkey, version, key) {\n  // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)\n  var buffer = Buffer.allocUnsafe(LEN)\n\n  buffer.writeUInt32BE(version, 0)\n  buffer.writeUInt8(hdkey.depth, 4)\n\n  var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000\n  buffer.writeUInt32BE(fingerprint, 5)\n  buffer.writeUInt32BE(hdkey.index, 9)\n\n  hdkey.chainCode.copy(buffer, 13)\n  key.copy(buffer, 45)\n\n  return buffer\n}\n\nfunction hash160 (buf) {\n  var sha = crypto.createHash('sha256').update(buf).digest()\n  return crypto.createHash('rmd160').update(sha).digest()\n}\n\nHDKey.HARDENED_OFFSET = HARDENED_OFFSET\nmodule.exports = HDKey\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nvar _exportNames = {};\nexports[\"default\"] = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _constants = require(\"./constants\");\n\nObject.keys(_constants).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _constants[key]) return;\n  exports[key] = _constants[key];\n});\n\nvar _node = require(\"./env/node\");\n\nvar _types = require(\"./types\");\n\nObject.keys(_types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === _types[key]) return;\n  exports[key] = _types[key];\n});\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar TrezorConnect = {\n  manifest: _node.manifest,\n  init: _node.init,\n  getSettings: _node.getSettings,\n  on: function on(type, fn) {\n    _node.eventEmitter.on(type, fn);\n  },\n  off: function off(type, fn) {\n    _node.eventEmitter.removeListener(type, fn);\n  },\n  removeAllListeners: function removeAllListeners() {\n    _node.eventEmitter.removeAllListeners();\n  },\n  uiResponse: _node.uiResponse,\n  // methods\n  blockchainGetAccountBalanceHistory: function blockchainGetAccountBalanceHistory(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainGetAccountBalanceHistory'\n    }, params));\n  },\n  blockchainGetCurrentFiatRates: function blockchainGetCurrentFiatRates(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainGetCurrentFiatRates'\n    }, params));\n  },\n  blockchainGetFiatRatesForTimestamps: function blockchainGetFiatRatesForTimestamps(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainGetFiatRatesForTimestamps'\n    }, params));\n  },\n  blockchainDisconnect: function blockchainDisconnect(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainDisconnect'\n    }, params));\n  },\n  blockchainEstimateFee: function blockchainEstimateFee(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainEstimateFee'\n    }, params));\n  },\n  blockchainGetTransactions: function blockchainGetTransactions(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainGetTransactions'\n    }, params));\n  },\n  blockchainSetCustomBackend: function blockchainSetCustomBackend(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainSetCustomBackend'\n    }, params));\n  },\n  blockchainSubscribe: function blockchainSubscribe(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainSubscribe'\n    }, params));\n  },\n  blockchainSubscribeFiatRates: function blockchainSubscribeFiatRates(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainSubscribeFiatRates'\n    }, params));\n  },\n  blockchainUnsubscribe: function blockchainUnsubscribe(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainUnsubscribe'\n    }, params));\n  },\n  blockchainUnsubscribeFiatRates: function blockchainUnsubscribeFiatRates(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'blockchainUnsubscribeFiatRates'\n    }, params));\n  },\n  customMessage: function customMessage(params) {\n    return (0, _node.customMessage)(params);\n  },\n  requestLogin: function requestLogin(params) {\n    return (0, _node.requestLogin)(params);\n  },\n  cardanoGetAddress: function cardanoGetAddress(params) {\n    var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;\n    return (0, _node.call)(_objectSpread(_objectSpread({\n      method: 'cardanoGetAddress'\n    }, params), {}, {\n      useEventListener: useEventListener\n    }));\n  },\n  cardanoGetNativeScriptHash: function cardanoGetNativeScriptHash(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'cardanoGetNativeScriptHash'\n    }, params));\n  },\n  cardanoGetPublicKey: function cardanoGetPublicKey(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'cardanoGetPublicKey'\n    }, params));\n  },\n  cardanoSignTransaction: function cardanoSignTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'cardanoSignTransaction'\n    }, params));\n  },\n  cipherKeyValue: function cipherKeyValue(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'cipherKeyValue'\n    }, params));\n  },\n  composeTransaction: function composeTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'composeTransaction'\n    }, params));\n  },\n  ethereumGetAddress: function ethereumGetAddress(params) {\n    var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;\n    return (0, _node.call)(_objectSpread(_objectSpread({\n      method: 'ethereumGetAddress'\n    }, params), {}, {\n      useEventListener: useEventListener\n    }));\n  },\n  ethereumGetPublicKey: function ethereumGetPublicKey(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'ethereumGetPublicKey'\n    }, params));\n  },\n  ethereumSignMessage: function ethereumSignMessage(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'ethereumSignMessage'\n    }, params));\n  },\n  ethereumSignTransaction: function ethereumSignTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'ethereumSignTransaction'\n    }, params));\n  },\n  ethereumSignTypedData: function ethereumSignTypedData(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'ethereumSignTypedData'\n    }, params));\n  },\n  ethereumVerifyMessage: function ethereumVerifyMessage(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'ethereumVerifyMessage'\n    }, params));\n  },\n  getAccountInfo: function getAccountInfo(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'getAccountInfo'\n    }, params));\n  },\n  getAddress: function getAddress(params) {\n    var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;\n    return (0, _node.call)(_objectSpread(_objectSpread({\n      method: 'getAddress'\n    }, params), {}, {\n      useEventListener: useEventListener\n    }));\n  },\n  getDeviceState: function getDeviceState(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'getDeviceState'\n    }, params));\n  },\n  getFeatures: function getFeatures(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'getFeatures'\n    }, params));\n  },\n  getPublicKey: function getPublicKey(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'getPublicKey'\n    }, params));\n  },\n  liskGetAddress: function liskGetAddress() {\n    return (0, _node.call)({\n      method: 'liskDeprecated'\n    });\n  },\n  liskGetPublicKey: function liskGetPublicKey() {\n    return (0, _node.call)({\n      method: 'liskDeprecated'\n    });\n  },\n  liskSignMessage: function liskSignMessage() {\n    return (0, _node.call)({\n      method: 'liskDeprecated'\n    });\n  },\n  liskSignTransaction: function liskSignTransaction() {\n    return (0, _node.call)({\n      method: 'liskDeprecated'\n    });\n  },\n  liskVerifyMessage: function liskVerifyMessage() {\n    return (0, _node.call)({\n      method: 'liskDeprecated'\n    });\n  },\n  nemGetAddress: function nemGetAddress(params) {\n    var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;\n    return (0, _node.call)(_objectSpread(_objectSpread({\n      method: 'nemGetAddress'\n    }, params), {}, {\n      useEventListener: useEventListener\n    }));\n  },\n  nemSignTransaction: function nemSignTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'nemSignTransaction'\n    }, params));\n  },\n  pushTransaction: function pushTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'pushTransaction'\n    }, params));\n  },\n  rippleGetAddress: function rippleGetAddress(params) {\n    var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;\n    return (0, _node.call)(_objectSpread(_objectSpread({\n      method: 'rippleGetAddress'\n    }, params), {}, {\n      useEventListener: useEventListener\n    }));\n  },\n  rippleSignTransaction: function rippleSignTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'rippleSignTransaction'\n    }, params));\n  },\n  signMessage: function signMessage(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'signMessage'\n    }, params));\n  },\n  signTransaction: function signTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'signTransaction'\n    }, params));\n  },\n  stellarGetAddress: function stellarGetAddress(params) {\n    var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;\n    return (0, _node.call)(_objectSpread(_objectSpread({\n      method: 'stellarGetAddress'\n    }, params), {}, {\n      useEventListener: useEventListener\n    }));\n  },\n  stellarSignTransaction: function stellarSignTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'stellarSignTransaction'\n    }, params));\n  },\n  tezosGetAddress: function tezosGetAddress(params) {\n    var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;\n    return (0, _node.call)(_objectSpread(_objectSpread({\n      method: 'tezosGetAddress'\n    }, params), {}, {\n      useEventListener: useEventListener\n    }));\n  },\n  tezosGetPublicKey: function tezosGetPublicKey(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'tezosGetPublicKey'\n    }, params));\n  },\n  tezosSignTransaction: function tezosSignTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'tezosSignTransaction'\n    }, params));\n  },\n  eosGetPublicKey: function eosGetPublicKey(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'eosGetPublicKey'\n    }, params));\n  },\n  eosSignTransaction: function eosSignTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'eosSignTransaction'\n    }, params));\n  },\n  binanceGetAddress: function binanceGetAddress(params) {\n    var useEventListener = _node.eventEmitter.listenerCount(_constants.UI.ADDRESS_VALIDATION) > 0;\n    return (0, _node.call)(_objectSpread(_objectSpread({\n      method: 'binanceGetAddress'\n    }, params), {}, {\n      useEventListener: useEventListener\n    }));\n  },\n  binanceGetPublicKey: function binanceGetPublicKey(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'binanceGetPublicKey'\n    }, params));\n  },\n  binanceSignTransaction: function binanceSignTransaction(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'binanceSignTransaction'\n    }, params));\n  },\n  verifyMessage: function verifyMessage(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'verifyMessage'\n    }, params));\n  },\n  resetDevice: function resetDevice(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'resetDevice'\n    }, params));\n  },\n  wipeDevice: function wipeDevice(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'wipeDevice'\n    }, params));\n  },\n  applyFlags: function applyFlags(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'applyFlags'\n    }, params));\n  },\n  applySettings: function applySettings(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'applySettings'\n    }, params));\n  },\n  backupDevice: function backupDevice(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'backupDevice'\n    }, params));\n  },\n  changePin: function changePin(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'changePin'\n    }, params));\n  },\n  firmwareUpdate: function firmwareUpdate(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'firmwareUpdate'\n    }, params));\n  },\n  recoveryDevice: function recoveryDevice(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'recoveryDevice'\n    }, params));\n  },\n  getCoinInfo: function getCoinInfo(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'getCoinInfo'\n    }, params));\n  },\n  rebootToBootloader: function rebootToBootloader(params) {\n    return (0, _node.call)(_objectSpread({\n      method: 'rebootToBootloader'\n    }, params));\n  },\n  dispose: _node.dispose,\n  cancel: _node.cancel,\n  renderWebUSBButton: _node.renderWebUSBButton,\n  disableWebUSB: _node.disableWebUSB\n};\nvar _default = TrezorConnect;\nexports[\"default\"] = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// eslint-disable-next-line import/no-unresolved\nvar sigUtil = require('@metamask/eth-sig-util'); // Sanitization is used for T1 as eth-sig-util does not support BigInt\n\n\nfunction sanitizeData(data) {\n  switch (Object.prototype.toString.call(data)) {\n    case '[object Object]':\n      {\n        var entries = Object.keys(data).map(function (k) {\n          return [k, sanitizeData(data[k])];\n        });\n        return Object.fromEntries(entries);\n      }\n\n    case '[object Array]':\n      return data.map(function (v) {\n        return sanitizeData(v);\n      });\n\n    case '[object BigInt]':\n      return data.toString();\n\n    default:\n      return data;\n  }\n}\n\nvar transformTypedData = function transformTypedData(data, metamask_v4_compat) {\n  if (!metamask_v4_compat) {\n    throw new Error('Trezor: Only version 4 of typed data signing is supported');\n  }\n\n  var version = sigUtil.SignTypedDataVersion.V4;\n\n  var _sigUtil$TypedDataUti = sigUtil.TypedDataUtils.sanitizeData(data),\n      types = _sigUtil$TypedDataUti.types,\n      primaryType = _sigUtil$TypedDataUti.primaryType,\n      domain = _sigUtil$TypedDataUti.domain,\n      message = _sigUtil$TypedDataUti.message;\n\n  var domainSeparatorHash = sigUtil.TypedDataUtils.hashStruct('EIP712Domain', sanitizeData(domain), types, version).toString('hex');\n  var messageHash = sigUtil.TypedDataUtils.hashStruct(primaryType, sanitizeData(message), types, version).toString('hex');\n  return _objectSpread({\n    domain_separator_hash: domainSeparatorHash,\n    message_hash: messageHash\n  }, data);\n};\n\nmodule.exports = transformTypedData;","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./SubjectMetadataController\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.endowmentPermissionBuilders = exports.permissionRpcMethods = void 0;\n__exportStar(require(\"./Caveat\"), exports);\n__exportStar(require(\"./Permission\"), exports);\n__exportStar(require(\"./PermissionController\"), exports);\n__exportStar(require(\"./utils\"), exports);\n// TODO: Move these to the appropriate package\nexports.permissionRpcMethods = __importStar(require(\"./rpc-methods\"));\nvar endowments_1 = require(\"./endowments\");\nObject.defineProperty(exports, \"endowmentPermissionBuilders\", { enumerable: true, get: function () { return endowments_1.endowmentPermissionBuilders; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./ExternalResourceController\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./SnapController\"), exports);\n__exportStar(require(\"./json-schemas\"), exports);\n__exportStar(require(\"./utils\"), exports);\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./AbstractExecutionService\"), exports);\n__exportStar(require(\"./ExecutionService\"), exports);\n__exportStar(require(\"./WebWorkerExecutionService\"), exports);\n//# sourceMappingURL=index.js.map","import { flatten } from 'lodash';\nimport { permissionRpcMethods } from '@metamask/snap-controllers';\nimport { selectHooks } from '@metamask/rpc-methods';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { UNSUPPORTED_RPC_METHODS } from '../../../../shared/constants/network';\nimport localHandlers from './handlers';\n\nconst allHandlers = [...localHandlers, ...permissionRpcMethods.handlers];\n\nconst handlerMap = allHandlers.reduce((map, handler) => {\n  for (const methodName of handler.methodNames) {\n    map.set(methodName, handler);\n  }\n  return map;\n}, new Map());\n\nconst expectedHookNames = Array.from(\n  new Set(\n    flatten(allHandlers.map(({ hookNames }) => Object.keys(hookNames))),\n  ).values(),\n);\n\n/**\n * Creates a json-rpc-engine middleware of RPC method implementations.\n *\n * Handlers consume functions that hook into the background, and only depend\n * on their signatures, not e.g. controller internals.\n *\n * @param {Record<string, unknown>} hooks - Required \"hooks\" into our\n * controllers.\n * @returns {(req: Object, res: Object, next: Function, end: Function) => void}\n */\nexport function createMethodMiddleware(hooks) {\n  // Fail immediately if we forgot to provide any expected hooks.\n  const missingHookNames = expectedHookNames.filter(\n    (hookName) => !Object.hasOwnProperty.call(hooks, hookName),\n  );\n  if (missingHookNames.length > 0) {\n    throw new Error(\n      `Missing expected hooks:\\n\\n${missingHookNames.join('\\n')}\\n`,\n    );\n  }\n\n  return async function methodMiddleware(req, res, next, end) {\n    // Reject unsupported methods.\n    if (UNSUPPORTED_RPC_METHODS.has(req.method)) {\n      return end(ethErrors.rpc.methodNotSupported());\n    }\n\n    const handler = handlerMap.get(req.method);\n    if (handler) {\n      const { implementation, hookNames } = handler;\n      try {\n        // Implementations may or may not be async, so we must await them.\n        return await implementation(\n          req,\n          res,\n          next,\n          end,\n          selectHooks(hooks, hookNames),\n        );\n      } catch (error) {\n        console.error(error);\n        return end(error);\n      }\n    }\n\n    return next();\n  };\n}\n\n","\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0});var e,t=require(\"@keystonehq/base-eth-keyring\"),s=require(\"events\"),n=require(\"@metamask/obs-store\"),i=require(\"@keystonehq/bc-ur-registry-eth\"),r=require(\"uuid\"),c=require(\"@ethereumjs/tx\"),o=(e=require(\"rlp\"))&&\"object\"==typeof e&&\"default\"in e?e.default:e;class a extends s.EventEmitter{constructor(){if(super(),this.readCryptoHDKeyOrCryptoAccount=()=>new Promise((e,t)=>{this.memStore.updateState({sync:{reading:!0}}),this.on(\"keystone-sync_success-hdkey\",t=>{const s=i.CryptoHDKey.fromCBOR(Buffer.from(t,\"hex\"));this.resetState(),e(s)}),this.on(\"keystone-sync_success-account\",t=>{const s=i.CryptoAccount.fromCBOR(Buffer.from(t,\"hex\"));this.resetState(),e(s)}),this.on(\"keystone-sync_cancel\",()=>{this.resetState(),t(new Error(\"KeystoneError#sync_cancel. Sync process canceled, please retry\"))})}),this.submitCryptoHDKey=e=>{this.emit(\"keystone-sync_success-hdkey\",e)},this.submitCryptoAccount=e=>{this.emit(\"keystone-sync_success-account\",e)},this.cancelSync=()=>{this.emit(\"keystone-sync_cancel\")},this.requestSignature=(e,t,s)=>new Promise((n,c)=>{const o=e.toUR(),a=e.getRequestId(),h=r.stringify(a),u={requestId:h,payload:{type:o.type,cbor:o.cbor.toString(\"hex\")},title:t,description:s};this.memStore.updateState({sign:{request:u}}),this.once(h+\"-signed\",e=>{const t=i.ETHSignature.fromCBOR(Buffer.from(e,\"hex\"));this.resetState(),n(t)}),this.once(h+\"-canceled\",()=>{this.resetState(),c(new Error(\"KeystoneError#Tx_canceled. Signing canceled, please retry\"))})}),this.submitSignature=(e,t)=>{this.emit(e+\"-signed\",t)},this.cancelRequestSignature=()=>{const e=this.memStore.getState().sign.request;if(e){const{requestId:t}=e;this.memStore.updateState({sign:{}}),this.emit(t+\"-canceled\")}},this.resetState=()=>{this.memStore.updateState({sync:{reading:!1},sign:{}})},a.instance)return a.instance;this.memStore=new n.ObservableStore({sync:{reading:!1},sign:{},_version:1}),a.instance=this}}class h extends t.BaseKeyring{constructor(e){if(super(e),this.getInteraction=()=>new a,this.getMemStore=()=>this.getInteraction().memStore,this.removeAccount=e=>{if(!this.accounts.map(e=>e.toLowerCase()).includes(e.toLowerCase()))throw new Error(`Address ${e} not found in this keyring`);this.accounts=this.accounts.filter(t=>t.toLowerCase()!==e.toLowerCase())},this.forgetDevice=()=>{this.page=0,this.perPage=5,this.accounts=[],this.currentAccount=0,this.name=\"QR Hardware\",this.initialized=!1,this.xfp=\"\",this.xpub=\"\",this.hdPath=\"\",this.indexes={},this.hdk=void 0,this.paths={}},this.submitCryptoHDKey=this.getInteraction().submitCryptoHDKey,this.submitCryptoAccount=this.getInteraction().submitCryptoAccount,this.submitSignature=this.getInteraction().submitSignature,this.cancelSync=this.getInteraction().cancelSync,this.cancelSignRequest=this.getInteraction().cancelRequestSignature,h.instance)return h.instance.deserialize(e),h.instance;h.instance=this}async signTransaction(e,t){const s=0===t.type?i.DataType.transaction:i.DataType.typedTransaction;let n;n=0===t.type?o.encode(t.getMessageToSign(!1)):t.getMessageToSign(!1);const a=await this._pathFromAddress(e),h=t.common.chainId(),u=r.v4(),y=i.EthSignRequest.constructETHRequest(n,s,a,this.xfp,u,h),{r:g,s:m,v:d}=await this.requestSignature(u,y,\"Scan with your Keystone\",'After your Keystone has signed the transaction, click on \"Scan Keystone\" to receive the signature'),p=t.toJSON();return p.v=d,p.s=m,p.r=g,p.type=t.type,c.TransactionFactory.fromTxData(p,{common:t.common})}}h.type=t.BaseKeyring.type,exports.MetaMaskKeyring=h;\n//# sourceMappingURL=metamask-airgapped-keyring.cjs.production.min.js.map\n","'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar baseEthKeyring = require('@keystonehq/base-eth-keyring');\nvar events = require('events');\nvar obsStore = require('@metamask/obs-store');\nvar bcUrRegistryEth = require('@keystonehq/bc-ur-registry-eth');\nvar uuid = require('uuid');\nvar tx = require('@ethereumjs/tx');\nvar rlp = _interopDefault(require('rlp'));\n\nclass MetamaskInteractionProvider extends events.EventEmitter {\n  constructor() {\n    super();\n\n    this.readCryptoHDKeyOrCryptoAccount = () => {\n      return new Promise((resolve, reject) => {\n        this.memStore.updateState({\n          sync: {\n            reading: true\n          }\n        });\n        this.on('keystone-sync_success-hdkey', cbor => {\n          const cryptoHDKey = bcUrRegistryEth.CryptoHDKey.fromCBOR(Buffer.from(cbor, 'hex'));\n          this.resetState();\n          resolve(cryptoHDKey);\n        });\n        this.on('keystone-sync_success-account', cbor => {\n          const cryptoAccount = bcUrRegistryEth.CryptoAccount.fromCBOR(Buffer.from(cbor, 'hex'));\n          this.resetState();\n          resolve(cryptoAccount);\n        });\n        this.on('keystone-sync_cancel', () => {\n          this.resetState();\n          reject(new Error('KeystoneError#sync_cancel. Sync process canceled, please retry'));\n        });\n      });\n    };\n\n    this.submitCryptoHDKey = cbor => {\n      this.emit('keystone-sync_success-hdkey', cbor);\n    };\n\n    this.submitCryptoAccount = cbor => {\n      this.emit('keystone-sync_success-account', cbor);\n    };\n\n    this.cancelSync = () => {\n      this.emit('keystone-sync_cancel');\n    };\n\n    this.requestSignature = (signRequest, requestTitle, requestDescription) => {\n      return new Promise((resolve, reject) => {\n        const ur = signRequest.toUR();\n        const requestIdBuffer = signRequest.getRequestId();\n        const requestId = uuid.stringify(requestIdBuffer);\n        const signPayload = {\n          requestId,\n          payload: {\n            type: ur.type,\n            cbor: ur.cbor.toString('hex')\n          },\n          title: requestTitle,\n          description: requestDescription\n        };\n        this.memStore.updateState({\n          sign: {\n            request: signPayload\n          }\n        });\n        this.once(`${requestId}-signed`, cbor => {\n          const ethSignature = bcUrRegistryEth.ETHSignature.fromCBOR(Buffer.from(cbor, 'hex'));\n          this.resetState();\n          resolve(ethSignature);\n        });\n        this.once(`${requestId}-canceled`, () => {\n          this.resetState();\n          reject(new Error('KeystoneError#Tx_canceled. Signing canceled, please retry'));\n        });\n      });\n    };\n\n    this.submitSignature = (requestId, cbor) => {\n      this.emit(`${requestId}-signed`, cbor);\n    };\n\n    this.cancelRequestSignature = () => {\n      const signPayload = this.memStore.getState().sign.request;\n\n      if (signPayload) {\n        const {\n          requestId\n        } = signPayload;\n        this.memStore.updateState({\n          sign: {}\n        });\n        this.emit(`${requestId}-canceled`);\n      }\n    };\n\n    this.resetState = () => {\n      this.memStore.updateState({\n        sync: {\n          reading: false\n        },\n        sign: {}\n      });\n    };\n\n    if (MetamaskInteractionProvider.instance) {\n      return MetamaskInteractionProvider.instance;\n    }\n\n    this.memStore = new obsStore.ObservableStore({\n      sync: {\n        reading: false\n      },\n      sign: {},\n      _version: 1\n    });\n    MetamaskInteractionProvider.instance = this;\n  }\n\n}\n\nclass MetaMaskKeyring extends baseEthKeyring.BaseKeyring {\n  constructor(opts) {\n    super(opts);\n\n    this.getInteraction = () => {\n      return new MetamaskInteractionProvider();\n    };\n\n    this.getMemStore = () => {\n      return this.getInteraction().memStore;\n    };\n\n    this.removeAccount = address => {\n      if (!this.accounts.map(a => a.toLowerCase()).includes(address.toLowerCase())) {\n        throw new Error(`Address ${address} not found in this keyring`);\n      }\n\n      this.accounts = this.accounts.filter(a => a.toLowerCase() !== address.toLowerCase());\n    };\n\n    this.forgetDevice = () => {\n      //common props\n      this.page = 0;\n      this.perPage = 5;\n      this.accounts = [];\n      this.currentAccount = 0;\n      this.name = 'QR Hardware';\n      this.initialized = false; //hd props;\n\n      this.xfp = '';\n      this.xpub = '';\n      this.hdPath = '';\n      this.indexes = {};\n      this.hdk = undefined; //pubkey props;\n\n      this.paths = {};\n    };\n\n    this.submitCryptoHDKey = this.getInteraction().submitCryptoHDKey;\n    this.submitCryptoAccount = this.getInteraction().submitCryptoAccount;\n    this.submitSignature = this.getInteraction().submitSignature;\n    this.cancelSync = this.getInteraction().cancelSync;\n    this.cancelSignRequest = this.getInteraction().cancelRequestSignature;\n\n    if (MetaMaskKeyring.instance) {\n      MetaMaskKeyring.instance.deserialize(opts);\n      return MetaMaskKeyring.instance;\n    }\n\n    MetaMaskKeyring.instance = this;\n  }\n\n  async signTransaction(address, tx$1) {\n    const dataType = tx$1.type === 0 ? bcUrRegistryEth.DataType.transaction : bcUrRegistryEth.DataType.typedTransaction;\n    let messageToSign;\n\n    if (tx$1.type === 0) {\n      messageToSign = rlp.encode(tx$1.getMessageToSign(false));\n    } else {\n      messageToSign = tx$1.getMessageToSign(false);\n    }\n\n    const hdPath = await this._pathFromAddress(address);\n    const chainId = tx$1.common.chainId();\n    const requestId = uuid.v4();\n    const ethSignRequest = bcUrRegistryEth.EthSignRequest.constructETHRequest(messageToSign, dataType, hdPath, this.xfp, requestId, chainId);\n    const {\n      r,\n      s,\n      v\n    } = await this.requestSignature(requestId, ethSignRequest, 'Scan with your Keystone', 'After your Keystone has signed the transaction, click on \"Scan Keystone\" to receive the signature');\n    const txJson = tx$1.toJSON();\n    txJson.v = v;\n    txJson.s = s;\n    txJson.r = r;\n    txJson.type = tx$1.type;\n    const transaction = tx.TransactionFactory.fromTxData(txJson, {\n      common: tx$1.common\n    });\n    return transaction;\n  }\n\n}\nMetaMaskKeyring.type = baseEthKeyring.BaseKeyring.type;\n\nexports.MetaMaskKeyring = MetaMaskKeyring;\n//# sourceMappingURL=metamask-airgapped-keyring.cjs.development.js.map\n","function delay(time) {\n  return new Promise((resolve) => setTimeout(resolve, time));\n}\n\nasync function loadFromMock3Box(key) {\n  const res = await window.fetch(`http://localhost:8889?key=${key}`);\n  const text = await res.text();\n  return text.length ? JSON.parse(text) : null;\n}\n\nasync function saveToMock3Box(key, newDataAtKey) {\n  const res = await window.fetch('http://localhost:8889', {\n    method: 'POST',\n    body: JSON.stringify({\n      key,\n      data: newDataAtKey,\n    }),\n  });\n\n  return res.text();\n}\n\nclass Mock3Box {\n  static openBox(address) {\n    this.address = address;\n    return Promise.resolve({\n      onSyncDone: (cb) => {\n        setTimeout(cb, 200);\n      },\n      openSpace: async (spaceName, config) => {\n        const { onSyncDone } = config;\n        this.spaceName = spaceName;\n\n        setTimeout(onSyncDone, 150);\n\n        await delay(50);\n\n        return {\n          private: {\n            get: async (key) => {\n              await delay(50);\n              const res = await loadFromMock3Box(\n                `${this.address}-${this.spaceName}-${key}`,\n              );\n              return res;\n            },\n            set: async (key, data) => {\n              await saveToMock3Box(\n                `${this.address}-${this.spaceName}-${key}`,\n                data,\n              );\n              await delay(50);\n              return null;\n            },\n          },\n        };\n      },\n      logout: () => undefined,\n    });\n  }\n\n  static async getConfig(address) {\n    const backup = await loadFromMock3Box(`${address}-metamask-metamaskBackup`);\n    return backup ? { spaces: { metamask: {} } } : {};\n  }\n}\n\nmodule.exports = Mock3Box;\n","import { createScaffoldMiddleware, mergeMiddleware } from 'json-rpc-engine';\nimport { createWalletMiddleware } from 'eth-json-rpc-middleware';\nimport {\n  createPendingNonceMiddleware,\n  createPendingTxMiddleware,\n} from './middleware/pending';\n\nexport default function createMetamaskMiddleware({\n  version,\n  getAccounts,\n  processTransaction,\n  processEthSignMessage,\n  processTypedMessage,\n  processTypedMessageV3,\n  processTypedMessageV4,\n  processPersonalMessage,\n  processDecryptMessage,\n  processEncryptionPublicKey,\n  getPendingNonce,\n  getPendingTransactionByHash,\n}) {\n  const metamaskMiddleware = mergeMiddleware([\n    createScaffoldMiddleware({\n      eth_syncing: false,\n      web3_clientVersion: `MetaMask/v${version}`,\n    }),\n    createWalletMiddleware({\n      getAccounts,\n      processTransaction,\n      processEthSignMessage,\n      processTypedMessage,\n      processTypedMessageV3,\n      processTypedMessageV4,\n      processPersonalMessage,\n      processDecryptMessage,\n      processEncryptionPublicKey,\n    }),\n    createPendingNonceMiddleware({ getPendingNonce }),\n    createPendingTxMiddleware({ getPendingTransactionByHash }),\n  ]);\n  return metamaskMiddleware;\n}\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar localstorage = require('store');\n\nvar IPFS = require('ipfs');\n\nvar OrbitDB = require('orbit-db');\n\nvar Pubsub = require('orbit-db-pubsub'); // const OrbitDBCacheProxy = require('orbit-db-cache-postmsg-proxy').Client\n// const { createProxyClient } = require('ipfs-postmsg-proxy')\n\n\nvar AccessControllers = require('orbit-db-access-controllers');\n\nvar _require = require('3box-orbitdb-plugins'),\n    LegacyIPFS3BoxAccessController = _require.LegacyIPFS3BoxAccessController,\n    ThreadAccessController = _require.ThreadAccessController,\n    ModeratorAccessController = _require.ModeratorAccessController;\n\nAccessControllers.addAccessController({\n  AccessController: LegacyIPFS3BoxAccessController\n});\nAccessControllers.addAccessController({\n  AccessController: ThreadAccessController\n});\nAccessControllers.addAccessController({\n  AccessController: ModeratorAccessController\n});\n\nvar ThreeId = require('./3id');\n\nvar PublicStore = require('./publicStore');\n\nvar PrivateStore = require('./privateStore');\n\nvar Verified = require('./verified');\n\nvar Space = require('./space');\n\nvar utils = require('./utils/index');\n\nvar idUtils = require('./utils/id');\n\nvar config = require('./config.js');\n\nvar API = require('./api');\n\nvar ACCOUNT_TYPES = {\n  ethereum: 'ethereum',\n  ethereumEOA: 'ethereum-eoa'\n};\nvar ADDRESS_SERVER_URL = config.address_server_url;\nvar PINNING_NODE = config.pinning_node;\nvar PINNING_ROOM = config.pinning_room; // const IFRAME_STORE_VERSION = '0.0.3'\n// const IFRAME_STORE_URL = `https://iframe.3box.io/${IFRAME_STORE_VERSION}/iframe.html`\n\nvar IPFS_OPTIONS = config.ipfs_options;\nvar ORBITDB_OPTS = config.orbitdb_options;\nvar globalIPFS, globalOrbitDB; // , ipfsProxy, cacheProxy, iframeLoadedPromise\n\n/*\nif (typeof window !== 'undefined' && typeof document !== 'undefined') {\n  const iframe = document.createElement('iframe')\n  iframe.src = IFRAME_STORE_URL\n  iframe.style = 'width:0; height:0; border:0; border:none !important'\n\n  iframeLoadedPromise = new Promise((resolve, reject) => {\n    iframe.onload = () => { resolve() }\n  })\n\n  document.body.appendChild(iframe)\n  // Create proxy clients that talks to the iframe\n  const postMessage = iframe.contentWindow.postMessage.bind(iframe.contentWindow)\n  ipfsProxy = createProxyClient({ postMessage })\n  cacheProxy = OrbitDBCacheProxy({ postMessage })\n} */\n\nvar Box =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Please use the **openBox** method to instantiate a 3Box\n   */\n  function Box(threeId, ethereumProvider, ipfs) {\n    var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    (0, _classCallCheck2[\"default\"])(this, Box);\n    this._3id = threeId;\n    this._web3provider = ethereumProvider;\n    this._ipfs = ipfs;\n    this._serverUrl = opts.addressServer || ADDRESS_SERVER_URL;\n\n    this._onSyncDoneCB = function () {};\n\n    this._boxSynced = false;\n    /**\n     * @property {KeyValueStore} public         access the profile store of the users 3Box\n     */\n\n    this[\"public\"] = null;\n    /**\n     * @property {KeyValueStore} private        access the private store of the users 3Box\n     */\n\n    this[\"private\"] = null;\n    /**\n     * @property {Verified} verified        check and create verifications\n     */\n\n    this.verified = new Verified(this);\n    /**\n     * @property {Object} spaces            an object containing all open spaces indexed by their name.\n     */\n\n    this.spaces = {}; // local store of all pinning server pubsub messages seen related to spaces\n\n    this.spacesPubSubMessages = {};\n  }\n\n  (0, _createClass2[\"default\"])(Box, [{\n    key: \"_load\",\n    value: function () {\n      var _load2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee3() {\n        var _this = this;\n\n        var opts,\n            rootStoreName,\n            key,\n            rootStoreAddress,\n            onNewPeer,\n            _ref2,\n            _ref3,\n            pubStoreAddress,\n            privStoreAddress,\n            syncPromises,\n            hasResponse,\n            spaceMessageFilterActive,\n            filterTimeSet,\n            onMessageRes,\n            _args3 = arguments;\n\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                opts = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n                rootStoreName = this._3id.muportFingerprint + '.root';\n                this.pinningNode = opts.pinningNode || PINNING_NODE;\n\n                this._ipfs.swarm.connect(this.pinningNode, function () {});\n\n                _context3.t0 = OrbitDB;\n                _context3.t1 = this._ipfs;\n                _context3.t2 = opts.orbitPath;\n                _context3.next = 9;\n                return this._3id.getOdbId();\n\n              case 9:\n                _context3.t3 = _context3.sent;\n                _context3.t4 = {\n                  directory: _context3.t2,\n                  identity: _context3.t3\n                };\n                _context3.next = 13;\n                return _context3.t0.createInstance.call(_context3.t0, _context3.t1, _context3.t4);\n\n              case 13:\n                this._orbitdb = _context3.sent;\n                // , { cache })\n                globalOrbitDB = this._orbitdb;\n                key = this._3id.getKeyringBySpaceName(rootStoreName).getPublicKeys(true).signingKey;\n                _context3.next = 18;\n                return this._orbitdb.feed(rootStoreName, _objectSpread({}, ORBITDB_OPTS, {\n                  format: 'dag-pb',\n                  accessController: {\n                    write: [key],\n                    type: 'legacy-ipfs-3box',\n                    skipManifest: true\n                  }\n                }));\n\n              case 18:\n                this._rootStore = _context3.sent;\n                rootStoreAddress = this._rootStore.address.toString();\n                _context3.t5 = Pubsub;\n                _context3.t6 = this._ipfs;\n                _context3.next = 24;\n                return this._ipfs.id();\n\n              case 24:\n                _context3.t7 = _context3.sent.id;\n                this._pubsub = new _context3.t5(_context3.t6, _context3.t7);\n\n                onNewPeer =\n                /*#__PURE__*/\n                function () {\n                  var _ref = (0, _asyncToGenerator2[\"default\"])(\n                  /*#__PURE__*/\n                  _regenerator[\"default\"].mark(function _callee(topic, peer) {\n                    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            if (peer === _this.pinningNode.split('/').pop()) {\n                              _this._pubsub.publish(PINNING_ROOM, {\n                                type: 'PIN_DB',\n                                odbAddress: rootStoreAddress,\n                                did: _this.DID\n                              });\n                            }\n\n                          case 1:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function onNewPeer(_x2, _x3) {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                this[\"public\"] = new PublicStore(this._orbitdb, this._3id.muportFingerprint + '.public', this._linkProfile.bind(this), this._ensurePinningNodeConnected.bind(this), this._3id);\n                this[\"private\"] = new PrivateStore(this._orbitdb, this._3id.muportFingerprint + '.private', this._ensurePinningNodeConnected.bind(this), this._3id);\n                _context3.next = 31;\n                return Promise.all([this[\"public\"]._load(), this[\"private\"]._load()]);\n\n              case 31:\n                _ref2 = _context3.sent;\n                _ref3 = (0, _slicedToArray2[\"default\"])(_ref2, 2);\n                pubStoreAddress = _ref3[0];\n                privStoreAddress = _ref3[1];\n                syncPromises = [];\n                hasResponse = {}; // Filters and store space related messages for 3secs, the best effort\n                // simple approach, until refactor\n\n                spaceMessageFilterActive = true;\n                filterTimeSet = false;\n\n                onMessageRes =\n                /*#__PURE__*/\n                function () {\n                  var _ref4 = (0, _asyncToGenerator2[\"default\"])(\n                  /*#__PURE__*/\n                  _regenerator[\"default\"].mark(function _callee2(topic, data) {\n                    var promises;\n                    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            if (!filterTimeSet) {\n                              filterTimeSet = true;\n                              setTimeout(function () {\n                                spaceMessageFilterActive = false;\n                              }, 3000);\n                            }\n\n                            if (!(data.type === 'HAS_ENTRIES')) {\n                              _context2.next = 12;\n                              break;\n                            }\n\n                            if (data.odbAddress === privStoreAddress && !hasResponse[privStoreAddress]) {\n                              syncPromises.push(_this[\"private\"]._sync(data.numEntries));\n                              hasResponse[privStoreAddress] = true;\n                            }\n\n                            if (data.odbAddress === pubStoreAddress && !hasResponse[pubStoreAddress]) {\n                              syncPromises.push(_this[\"public\"]._sync(data.numEntries));\n                              hasResponse[pubStoreAddress] = true;\n                            }\n\n                            if (spaceMessageFilterActive && data.odbAddress.includes('space') === true) {\n                              _this.spacesPubSubMessages[data.odbAddress] = data;\n                            }\n\n                            if (!(syncPromises.length === 2)) {\n                              _context2.next = 12;\n                              break;\n                            }\n\n                            promises = syncPromises;\n                            syncPromises = [];\n                            _context2.next = 10;\n                            return Promise.all(promises);\n\n                          case 10:\n                            _this._boxSynced = true;\n\n                            _this._onSyncDoneCB(); // this._pubsub.unsubscribe(PINNING_ROOM)\n\n\n                          case 12:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2);\n                  }));\n\n                  return function onMessageRes(_x4, _x5) {\n                    return _ref4.apply(this, arguments);\n                  };\n                }();\n\n                this._pubsub.subscribe(PINNING_ROOM, onMessageRes, onNewPeer);\n\n                _context3.next = 43;\n                return this._createRootStore(rootStoreAddress, privStoreAddress, pubStoreAddress, this.pinningNode);\n\n              case 43:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _load() {\n        return _load2.apply(this, arguments);\n      }\n\n      return _load;\n    }()\n  }, {\n    key: \"_createRootStore\",\n    value: function () {\n      var _createRootStore2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee5(rootStoreAddress, privOdbAddress, pubOdbAddress) {\n        var _this2 = this;\n\n        var entries, pinAddressLinks;\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._rootStore.load();\n\n              case 2:\n                _context5.next = 4;\n                return this._rootStore.iterator({\n                  limit: -1\n                }).collect();\n\n              case 4:\n                entries = _context5.sent;\n\n                if (entries.find(function (e) {\n                  return e.payload.value.odbAddress === pubOdbAddress;\n                })) {\n                  _context5.next = 8;\n                  break;\n                }\n\n                _context5.next = 8;\n                return this._rootStore.add({\n                  odbAddress: pubOdbAddress\n                });\n\n              case 8:\n                if (entries.find(function (e) {\n                  return e.payload.value.odbAddress === privOdbAddress;\n                })) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                _context5.next = 11;\n                return this._rootStore.add({\n                  odbAddress: privOdbAddress\n                });\n\n              case 11:\n                this._publishRootStore(rootStoreAddress);\n\n                pinAddressLinks =\n                /*#__PURE__*/\n                function () {\n                  var _ref5 = (0, _asyncToGenerator2[\"default\"])(\n                  /*#__PURE__*/\n                  _regenerator[\"default\"].mark(function _callee4() {\n                    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n                      while (1) {\n                        switch (_context4.prev = _context4.next) {\n                          case 0:\n                            // Filter for address-links, get CID, and get to pin it\n                            entries.filter(function (entry) {\n                              return entry.payload.value.type === 'address-link';\n                            }).map(function (entry) {\n                              _this2._ipfs.dag.get(entry.payload.value.data);\n                            });\n\n                          case 1:\n                          case \"end\":\n                            return _context4.stop();\n                        }\n                      }\n                    }, _callee4);\n                  }));\n\n                  return function pinAddressLinks() {\n                    return _ref5.apply(this, arguments);\n                  };\n                }();\n\n                pinAddressLinks();\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _createRootStore(_x6, _x7, _x8) {\n        return _createRootStore2.apply(this, arguments);\n      }\n\n      return _createRootStore;\n    }()\n    /**\n     * Get the public profile of a given address\n     *\n     * @param     {String}    address                 An ethereum address\n     * @param     {Object}    opts                    Optional parameters\n     * @param     {Function}  opts.blocklist          A function that takes an address and returns true if the user has been blocked\n     * @param     {String}    opts.metadata           flag to retrieve metadata\n     * @param     {String}    opts.addressServer      URL of the Address Server\n     * @param     {Object}    opts.ipfs               A js-ipfs ipfs object\n     * @param     {Boolean}   opts.useCacheService    Use 3Box API and Cache Service to fetch profile instead of OrbitDB. Default true.\n     * @param     {String}    opts.profileServer      URL of Profile API server\n     * @return    {Object}                            a json object with the profile for the given address\n     */\n\n  }, {\n    key: \"openSpace\",\n\n    /**\n     * Opens the space with the given name in the users 3Box\n     *\n     * @param     {String}            name                    The name of the space\n     * @param     {Object}            opts                    Optional parameters\n     * @param     {Function}          opts.consentCallback    A function that will be called when the user has consented to opening the box\n     * @param     {Function}          opts.onSyncDone         A function that will be called when the space has finished syncing with the pinning node\n     * @return    {Space}                                     the Space instance for the given space name\n     */\n    value: function () {\n      var _openSpace = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee6(name) {\n        var opts,\n            _args6 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                opts = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n\n                if (this.spaces[name]) {\n                  _context6.next = 23;\n                  break;\n                }\n\n                this.spaces[name] = new Space(name, this._3id, this._orbitdb, this._rootStore, this._ensurePinningNodeConnected.bind(this));\n                _context6.prev = 3;\n                opts = Object.assign({\n                  numEntriesMessages: this.spacesPubSubMessages\n                }, opts);\n                _context6.next = 7;\n                return this.spaces[name].open(opts);\n\n              case 7:\n                _context6.next = 9;\n                return this.isAddressLinked();\n\n              case 9:\n                if (_context6.sent) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                this.linkAddress();\n\n              case 11:\n                _context6.next = 21;\n                break;\n\n              case 13:\n                _context6.prev = 13;\n                _context6.t0 = _context6[\"catch\"](3);\n                delete this.spaces[name];\n\n                if (!_context6.t0.message.includes('User denied message signature.')) {\n                  _context6.next = 20;\n                  break;\n                }\n\n                throw new Error('User denied space consent.');\n\n              case 20:\n                throw new Error('An error occured while opening space: ', _context6.t0.message);\n\n              case 21:\n                _context6.next = 24;\n                break;\n\n              case 23:\n                if (opts.onSyncDone) {\n                  // since the space is already open we can call onSyncDone directly\n                  opts.onSyncDone();\n                }\n\n              case 24:\n                return _context6.abrupt(\"return\", this.spaces[name]);\n\n              case 25:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[3, 13]]);\n      }));\n\n      function openSpace(_x9) {\n        return _openSpace.apply(this, arguments);\n      }\n\n      return openSpace;\n    }()\n    /**\n     * Sets the callback function that will be called once when the db is fully synced.\n     *\n     * @param     {Function}      syncDone        The function that will be called\n     */\n\n  }, {\n    key: \"onSyncDone\",\n    value: function onSyncDone(syncDone) {\n      this._onSyncDoneCB = syncDone;\n\n      if (this._boxSynced) {\n        this._onSyncDoneCB();\n      }\n    }\n  }, {\n    key: \"_publishRootStore\",\n    value: function () {\n      var _publishRootStore2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee7(rootStoreAddress) {\n        var addressToken;\n        return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this._3id.signJWT({\n                  rootStoreAddress: rootStoreAddress\n                });\n\n              case 2:\n                addressToken = _context7.sent;\n                _context7.prev = 3;\n                _context7.next = 6;\n                return utils.fetchJson(this._serverUrl + '/odbAddress', {\n                  address_token: addressToken\n                });\n\n              case 6:\n                _context7.next = 12;\n                break;\n\n              case 8:\n                _context7.prev = 8;\n                _context7.t0 = _context7[\"catch\"](3);\n\n                if (_context7.t0.statusCode) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                throw new Error(_context7.t0);\n\n              case 12:\n                return _context7.abrupt(\"return\", true);\n\n              case 13:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[3, 8]]);\n      }));\n\n      function _publishRootStore(_x10) {\n        return _publishRootStore2.apply(this, arguments);\n      }\n\n      return _publishRootStore;\n    }()\n    /**\n     * @property {String} DID        the DID of the user\n     */\n\n  }, {\n    key: \"linkAddress\",\n\n    /**\n     * Creates a proof that links an ethereum address to the 3Box account of the user. If given proof, it will simply be added to the root store.\n     *\n     * @param     {Object}    [link]                         Optional link object with type or proof\n     * @param     {String}    [link.type='ethereum-eoa']     The type of link (default 'ethereum')\n     * @param     {Object}    [link.proof]                   Proof object, should follow [spec](https://github.com/3box/3box/blob/master/3IPs/3ip-5.md)\n     */\n    value: function () {\n      var _linkAddress = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee8() {\n        var link,\n            _args8 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                link = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};\n\n                if (!link.proof) {\n                  _context8.next = 5;\n                  break;\n                }\n\n                _context8.next = 4;\n                return this._writeAddressLink(link.proof);\n\n              case 4:\n                return _context8.abrupt(\"return\");\n\n              case 5:\n                if (!(!link.type || link.type === ACCOUNT_TYPES.ethereumEOA)) {\n                  _context8.next = 8;\n                  break;\n                }\n\n                _context8.next = 8;\n                return this._linkProfile();\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function linkAddress() {\n        return _linkAddress.apply(this, arguments);\n      }\n\n      return linkAddress;\n    }()\n  }, {\n    key: \"linkAccount\",\n    value: function () {\n      var _linkAccount = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee9() {\n        var type,\n            _args9 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                type = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : ACCOUNT_TYPES.ethereumEOA;\n                console.warn('linkAccount: deprecated, please use linkAddress going forward');\n                _context9.next = 4;\n                return this.linkAddress(type);\n\n              case 4:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function linkAccount() {\n        return _linkAccount.apply(this, arguments);\n      }\n\n      return linkAccount;\n    }()\n    /**\n     * Remove given address link, returns true if successful\n     *\n     * @param     {String}   address      address that is linked\n     */\n\n  }, {\n    key: \"removeAddressLink\",\n    value: function () {\n      var _removeAddressLink = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee10(address) {\n        var linkExist, payload, oneHour, deleteToken;\n        return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                address = address.toLowerCase();\n                _context10.next = 3;\n                return this.isAddressLinked({\n                  address: address\n                });\n\n              case 3:\n                linkExist = _context10.sent;\n\n                if (linkExist) {\n                  _context10.next = 6;\n                  break;\n                }\n\n                throw new Error('removeAddressLink: link for given address does not exist');\n\n              case 6:\n                payload = {\n                  address: address,\n                  type: \"delete-address-link\"\n                };\n                oneHour = 60 * 60;\n                _context10.next = 10;\n                return this._3id.signJWT(payload, {\n                  expiresIn: oneHour\n                });\n\n              case 10:\n                deleteToken = _context10.sent;\n                _context10.prev = 11;\n                _context10.next = 14;\n                return utils.fetchJson(this._serverUrl + '/linkdelete', {\n                  delete_token: deleteToken\n                });\n\n              case 14:\n                _context10.next = 20;\n                break;\n\n              case 16:\n                _context10.prev = 16;\n                _context10.t0 = _context10[\"catch\"](11);\n\n                if (_context10.t0.statusCode) {\n                  _context10.next = 20;\n                  break;\n                }\n\n                throw new Error(_context10.t0);\n\n              case 20:\n                _context10.next = 22;\n                return this._deleteAddressLink(address);\n\n              case 22:\n                return _context10.abrupt(\"return\", true);\n\n              case 23:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[11, 16]]);\n      }));\n\n      function removeAddressLink(_x11) {\n        return _removeAddressLink.apply(this, arguments);\n      }\n\n      return removeAddressLink;\n    }()\n    /**\n     * Checks if there is a proof that links an external account to the 3Box account of the user. If not params given and any link exists, returns true\n     *\n     * @param     {Object}    [query]            Optional object with address and/or type.\n     * @param     {String}    [query.type]       Does the given type of link exist\n     * @param     {String}    [query.address]    Is the given adressed linked\n     */\n\n  }, {\n    key: \"isAddressLinked\",\n    value: function () {\n      var _isAddressLinked = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee11() {\n        var query,\n            links,\n            linksQuery,\n            _args11 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                query = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n                if (query.address) query.address = query.address.toLowerCase();\n                _context11.next = 4;\n                return this._readAddressLinks();\n\n              case 4:\n                links = _context11.sent;\n                linksQuery = links.find(function (link) {\n                  var res = query.address ? link.address === query.address : true;\n                  return query.type ? res && link.type === query.type : res;\n                });\n                return _context11.abrupt(\"return\", Boolean(linksQuery));\n\n              case 7:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function isAddressLinked() {\n        return _isAddressLinked.apply(this, arguments);\n      }\n\n      return isAddressLinked;\n    }()\n  }, {\n    key: \"isAccountLinked\",\n    value: function () {\n      var _isAccountLinked = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee12() {\n        var type,\n            _args12 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                type = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : ACCOUNT_TYPES.ethereumEOA;\n                console.warn('isAccountLinked: deprecated, please use isAddressLinked going forward');\n                return _context12.abrupt(\"return\", this.isAddressLinked(type));\n\n              case 3:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function isAccountLinked() {\n        return _isAccountLinked.apply(this, arguments);\n      }\n\n      return isAccountLinked;\n    }()\n    /**\n     * Lists address links associated with this 3Box\n     *\n     * @return    {Array}                        An array of link objects\n     */\n\n  }, {\n    key: \"listAddressLinks\",\n    value: function () {\n      var _listAddressLinks = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee13() {\n        var entries;\n        return _regenerator[\"default\"].wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this._readAddressLinks();\n\n              case 2:\n                entries = _context13.sent;\n                return _context13.abrupt(\"return\", entries.reduce(function (list, entry) {\n                  var item = Object.assign({}, entry);\n                  item.linkId = item.entry.hash;\n                  delete item.entry;\n                  return item;\n                }, []));\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function listAddressLinks() {\n        return _listAddressLinks.apply(this, arguments);\n      }\n\n      return listAddressLinks;\n    }()\n  }, {\n    key: \"_linkProfile\",\n    value: function () {\n      var _linkProfile2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee14() {\n        var address, linkData, did, consent;\n        return _regenerator[\"default\"].wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                address = this._3id.managementAddress;\n                _context14.next = 3;\n                return this._readAddressLink(address);\n\n              case 3:\n                linkData = _context14.sent;\n\n                if (linkData) {\n                  _context14.next = 19;\n                  break;\n                }\n\n                did = this.DID;\n                _context14.prev = 6;\n                _context14.next = 9;\n                return utils.getLinkConsent(address, did, this._web3provider);\n\n              case 9:\n                consent = _context14.sent;\n                _context14.next = 16;\n                break;\n\n              case 12:\n                _context14.prev = 12;\n                _context14.t0 = _context14[\"catch\"](6);\n                console.log(_context14.t0);\n                throw new Error('Link consent message must be signed before adding data, to link address to store');\n\n              case 16:\n                linkData = {\n                  version: 1,\n                  type: ACCOUNT_TYPES.ethereumEOA,\n                  message: consent.msg,\n                  signature: consent.sig,\n                  timestamp: consent.timestamp\n                };\n                _context14.next = 19;\n                return this._writeAddressLink(linkData);\n\n              case 19:\n                _context14.next = 21;\n                return this[\"public\"].get('proof_did');\n\n              case 21:\n                if (_context14.sent) {\n                  _context14.next = 29;\n                  break;\n                }\n\n                _context14.t1 = this[\"public\"];\n                _context14.next = 25;\n                return this._3id.signJWT();\n\n              case 25:\n                _context14.t2 = _context14.sent;\n                _context14.t3 = {\n                  noLink: true\n                };\n                _context14.next = 29;\n                return _context14.t1.set.call(_context14.t1, 'proof_did', _context14.t2, _context14.t3);\n\n              case 29:\n                // Send consentSignature to 3box-address-server to link profile with ethereum address\n                utils.fetchJson(this._serverUrl + '/link', linkData)[\"catch\"](console.error);\n\n              case 30:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[6, 12]]);\n      }));\n\n      function _linkProfile() {\n        return _linkProfile2.apply(this, arguments);\n      }\n\n      return _linkProfile;\n    }()\n  }, {\n    key: \"_writeAddressLink\",\n    value: function () {\n      var _writeAddressLink2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee15(proof) {\n        var data, linkExist, link;\n        return _regenerator[\"default\"].wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this._ipfs.dag.put(proof);\n\n              case 2:\n                data = _context15.sent.toBaseEncodedString();\n                _context15.next = 5;\n                return this._linkCIDExists(data);\n\n              case 5:\n                linkExist = _context15.sent;\n\n                if (!linkExist) {\n                  _context15.next = 8;\n                  break;\n                }\n\n                return _context15.abrupt(\"return\");\n\n              case 8:\n                link = {\n                  type: 'address-link',\n                  data: data\n                };\n                _context15.next = 11;\n                return this._rootStore.add(link);\n\n              case 11:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function _writeAddressLink(_x12) {\n        return _writeAddressLink2.apply(this, arguments);\n      }\n\n      return _writeAddressLink;\n    }()\n  }, {\n    key: \"_linkCIDExists\",\n    value: function () {\n      var _linkCIDExists2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee16(cid) {\n        var entries, linkEntries;\n        return _regenerator[\"default\"].wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this._rootStore.iterator({\n                  limit: -1\n                }).collect();\n\n              case 2:\n                entries = _context16.sent;\n                linkEntries = entries.filter(function (e) {\n                  return e.payload.value.type === 'address-link';\n                });\n                return _context16.abrupt(\"return\", linkEntries.find(function (entry) {\n                  return entry.data === cid;\n                }));\n\n              case 5:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function _linkCIDExists(_x13) {\n        return _linkCIDExists2.apply(this, arguments);\n      }\n\n      return _linkCIDExists;\n    }()\n  }, {\n    key: \"_deleteAddressLink\",\n    value: function () {\n      var _deleteAddressLink2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee17(address) {\n        var link;\n        return _regenerator[\"default\"].wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                address = address.toLowerCase();\n                _context17.next = 3;\n                return this._readAddressLink(address);\n\n              case 3:\n                link = _context17.sent;\n\n                if (link) {\n                  _context17.next = 6;\n                  break;\n                }\n\n                throw new Error('_deleteAddressLink: link for given address does not exist');\n\n              case 6:\n                return _context17.abrupt(\"return\", this._rootStore.remove(link.entry.hash));\n\n              case 7:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function _deleteAddressLink(_x14) {\n        return _deleteAddressLink2.apply(this, arguments);\n      }\n\n      return _deleteAddressLink;\n    }()\n  }, {\n    key: \"_readAddressLinks\",\n    value: function () {\n      var _readAddressLinks2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee19() {\n        var _this3 = this;\n\n        var entries, linkEntries, resolveLinks;\n        return _regenerator[\"default\"].wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this._rootStore.iterator({\n                  limit: -1\n                }).collect();\n\n              case 2:\n                entries = _context19.sent;\n                linkEntries = entries.filter(function (e) {\n                  return e.payload.value.type === 'address-link';\n                });\n                resolveLinks = linkEntries.map(\n                /*#__PURE__*/\n                function () {\n                  var _ref6 = (0, _asyncToGenerator2[\"default\"])(\n                  /*#__PURE__*/\n                  _regenerator[\"default\"].mark(function _callee18(entry) {\n                    var obj;\n                    return _regenerator[\"default\"].wrap(function _callee18$(_context18) {\n                      while (1) {\n                        switch (_context18.prev = _context18.next) {\n                          case 0:\n                            _context18.next = 2;\n                            return _this3._ipfs.dag.get(entry.payload.value.data);\n\n                          case 2:\n                            obj = _context18.sent.value;\n\n                            if (obj.address) {\n                              _context18.next = 7;\n                              break;\n                            }\n\n                            _context18.next = 6;\n                            return utils.recoverPersonalSign(obj.message, obj.signature);\n\n                          case 6:\n                            obj.address = _context18.sent;\n\n                          case 7:\n                            obj.entry = entry;\n                            return _context18.abrupt(\"return\", obj);\n\n                          case 9:\n                          case \"end\":\n                            return _context18.stop();\n                        }\n                      }\n                    }, _callee18);\n                  }));\n\n                  return function (_x15) {\n                    return _ref6.apply(this, arguments);\n                  };\n                }());\n                return _context19.abrupt(\"return\", Promise.all(resolveLinks));\n\n              case 6:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function _readAddressLinks() {\n        return _readAddressLinks2.apply(this, arguments);\n      }\n\n      return _readAddressLinks;\n    }()\n  }, {\n    key: \"_readAddressLink\",\n    value: function () {\n      var _readAddressLink2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee20(address) {\n        var links;\n        return _regenerator[\"default\"].wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                address = address.toLowerCase();\n                _context20.next = 3;\n                return this._readAddressLinks();\n\n              case 3:\n                links = _context20.sent;\n                return _context20.abrupt(\"return\", links.find(function (link) {\n                  return link.address.toLowerCase() === address;\n                }));\n\n              case 5:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function _readAddressLink(_x16) {\n        return _readAddressLink2.apply(this, arguments);\n      }\n\n      return _readAddressLink;\n    }()\n  }, {\n    key: \"_ensurePinningNodeConnected\",\n    value: function () {\n      var _ensurePinningNodeConnected2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee21(odbAddress, isThread) {\n        var _this4 = this;\n\n        var roomPeers, rootStoreAddress;\n        return _regenerator[\"default\"].wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this._ipfs.pubsub.peers(odbAddress);\n\n              case 2:\n                roomPeers = _context21.sent;\n\n                if (!roomPeers.find(function (p) {\n                  return p === _this4.pinningNode.split('/').pop();\n                })) {\n                  this._ipfs.swarm.connect(this.pinningNode, function () {});\n\n                  rootStoreAddress = this._rootStore.address.toString();\n\n                  if (isThread) {\n                    this._pubsub.publish(PINNING_ROOM, {\n                      type: 'SYNC_DB',\n                      odbAddress: odbAddress,\n                      thread: true\n                    });\n                  } else {\n                    this._pubsub.publish(PINNING_ROOM, {\n                      type: 'PIN_DB',\n                      odbAddress: rootStoreAddress\n                    });\n                  }\n                }\n\n              case 4:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n\n      function _ensurePinningNodeConnected(_x17, _x18) {\n        return _ensurePinningNodeConnected2.apply(this, arguments);\n      }\n\n      return _ensurePinningNodeConnected;\n    }()\n  }, {\n    key: \"close\",\n    value: function () {\n      var _close = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee22() {\n        return _regenerator[\"default\"].wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this._orbitdb.stop();\n\n              case 2:\n                _context22.next = 4;\n                return this._pubsub.disconnect();\n\n              case 4:\n                globalOrbitDB = null;\n\n              case 5:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function close() {\n        return _close.apply(this, arguments);\n      }\n\n      return close;\n    }()\n    /**\n     * Closes the 3box instance and clears local cache. If you call this,\n     * users will need to sign a consent message to log in the next time\n     * you call openBox.\n     */\n\n  }, {\n    key: \"logout\",\n    value: function () {\n      var _logout = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee23() {\n        var address;\n        return _regenerator[\"default\"].wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.next = 2;\n                return this.close();\n\n              case 2:\n                this._3id.logout();\n\n                address = this._3id.managementAddress;\n                localstorage.remove('linkConsent_' + address);\n\n              case 5:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }()\n    /**\n     * Check if the given address is logged in\n     *\n     * @param     {String}    address                 An ethereum address\n     * @return    {Boolean}                           true if the user is logged in\n     */\n\n  }, {\n    key: \"DID\",\n    get: function get() {\n      return this._3id.muportDID;\n    }\n  }], [{\n    key: \"getProfile\",\n    value: function () {\n      var _getProfile = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee24(address) {\n        var opts,\n            metadata,\n            profile,\n            normalizedAddress,\n            _args24 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                opts = _args24.length > 1 && _args24[1] !== undefined ? _args24[1] : {};\n                metadata = opts.metadata;\n                opts = Object.assign({\n                  useCacheService: true\n                }, opts);\n\n                if (!opts.useCacheService) {\n                  _context24.next = 9;\n                  break;\n                }\n\n                _context24.next = 6;\n                return API.getProfile(address, opts.profileServer, {\n                  metadata: metadata\n                });\n\n              case 6:\n                profile = _context24.sent;\n                _context24.next = 15;\n                break;\n\n              case 9:\n                if (!metadata) {\n                  _context24.next = 11;\n                  break;\n                }\n\n                throw new Error('getting metadata is not yet supported outside of the API');\n\n              case 11:\n                normalizedAddress = address.toLowerCase();\n                _context24.next = 14;\n                return this._getProfileOrbit(normalizedAddress, opts);\n\n              case 14:\n                profile = _context24.sent;\n\n              case 15:\n                return _context24.abrupt(\"return\", profile);\n\n              case 16:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function getProfile(_x19) {\n        return _getProfile.apply(this, arguments);\n      }\n\n      return getProfile;\n    }()\n    /**\n     * Get a list of public profiles for given addresses. This relies on 3Box profile API.\n     *\n     * @param     {Array}     address                 An array of ethereum addresses\n     * @param     {Object}    opts                    Optional parameters\n     * @param     {String}    opts.profileServer      URL of Profile API server\n     * @return    {Object}                            a json object with each key an address and value the profile\n     */\n\n  }, {\n    key: \"getProfiles\",\n    value: function () {\n      var _getProfiles = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee25(addressArray) {\n        var opts,\n            _args25 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                opts = _args25.length > 1 && _args25[1] !== undefined ? _args25[1] : {};\n                return _context25.abrupt(\"return\", API.getProfiles(addressArray, opts));\n\n              case 2:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25);\n      }));\n\n      function getProfiles(_x20) {\n        return _getProfiles.apply(this, arguments);\n      }\n\n      return getProfiles;\n    }()\n    /**\n     * Get the public data in a space of a given address with the given name\n     *\n     * @param     {String}    address                 An ethereum address\n     * @param     {String}    name                    A space name\n     * @param     {Object}    opts                    Optional parameters\n     * @param     {Function}  opts.blocklist          A function that takes an address and returns true if the user has been blocked\n     * @param     {String}    opts.metadata           flag to retrieve metadata\n     * @param     {String}    opts.profileServer      URL of Profile API server\n     * @return    {Object}                            a json object with the public space data\n     */\n\n  }, {\n    key: \"getSpace\",\n    value: function () {\n      var _getSpace = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee26(address, name) {\n        var opts,\n            _args26 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                opts = _args26.length > 2 && _args26[2] !== undefined ? _args26[2] : {};\n                return _context26.abrupt(\"return\", API.getSpace(address, name, opts.profileServer, opts));\n\n              case 2:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26);\n      }));\n\n      function getSpace(_x21, _x22) {\n        return _getSpace.apply(this, arguments);\n      }\n\n      return getSpace;\n    }()\n    /**\n     * Get all posts that are made to a thread.\n     *\n     * @param     {String}    space                   The name of the space the thread is in\n     * @param     {String}    name                    The name of the thread\n     * @param     {String}    firstModerator          The DID (or ethereum address) of the first moderator\n     * @param     {Boolean}   members                 True if only members are allowed to post\n     * @param     {Object}    opts                    Optional parameters\n     * @param     {String}    opts.profileServer      URL of Profile API server\n     * @return    {Array<Object>}                     An array of posts\n     */\n\n  }, {\n    key: \"getThread\",\n    value: function () {\n      var _getThread = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee27(space, name, firstModerator, members) {\n        var opts,\n            _args27 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                opts = _args27.length > 4 && _args27[4] !== undefined ? _args27[4] : {};\n                return _context27.abrupt(\"return\", API.getThread(space, name, firstModerator, members, opts));\n\n              case 2:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27);\n      }));\n\n      function getThread(_x23, _x24, _x25, _x26) {\n        return _getThread.apply(this, arguments);\n      }\n\n      return getThread;\n    }()\n    /**\n     * Get all posts that are made to a thread.\n     *\n     * @param     {String}    address                 The orbitdb-address of the thread\n     * @param     {Object}    opts                    Optional parameters\n     * @param     {String}    opts.profileServer      URL of Profile API server\n     * @return    {Array<Object>}                     An array of posts\n     */\n\n  }, {\n    key: \"getThreadByAddress\",\n    value: function () {\n      var _getThreadByAddress = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee28(address) {\n        var opts,\n            _args28 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                opts = _args28.length > 1 && _args28[1] !== undefined ? _args28[1] : {};\n                return _context28.abrupt(\"return\", API.getThreadByAddress(address, opts));\n\n              case 2:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28);\n      }));\n\n      function getThreadByAddress(_x27) {\n        return _getThreadByAddress.apply(this, arguments);\n      }\n\n      return getThreadByAddress;\n    }()\n    /**\n     * Get the configuration of a users 3Box\n     *\n     * @param     {String}    address                 The ethereum address\n     * @param     {Object}    opts                    Optional parameters\n     * @param     {String}    opts.profileServer      URL of Profile API server\n     * @return    {Array<Object>}                     An array of posts\n     */\n\n  }, {\n    key: \"getConfig\",\n    value: function () {\n      var _getConfig = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee29(address) {\n        var opts,\n            _args29 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                opts = _args29.length > 1 && _args29[1] !== undefined ? _args29[1] : {};\n                return _context29.abrupt(\"return\", API.getConfig(address, opts));\n\n              case 2:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29);\n      }));\n\n      function getConfig(_x28) {\n        return _getConfig.apply(this, arguments);\n      }\n\n      return getConfig;\n    }()\n    /**\n     * Get the names of all spaces a user has\n     *\n     * @param     {String}    address                 An ethereum address\n     * @param     {Object}    opts                    Optional parameters\n     * @param     {String}    opts.profileServer      URL of Profile API server\n     * @return    {Object}                            an array with all spaces as strings\n     */\n\n  }, {\n    key: \"listSpaces\",\n    value: function () {\n      var _listSpaces = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee30(address) {\n        var opts,\n            _args30 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                opts = _args30.length > 1 && _args30[1] !== undefined ? _args30[1] : {};\n                return _context30.abrupt(\"return\", API.listSpaces(address, opts.profileServer));\n\n              case 2:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30);\n      }));\n\n      function listSpaces(_x29) {\n        return _listSpaces.apply(this, arguments);\n      }\n\n      return listSpaces;\n    }()\n  }, {\n    key: \"_getProfileOrbit\",\n    value: function () {\n      var _getProfileOrbit2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee32(address) {\n        var opts,\n            rootStoreAddress,\n            usingGlobalIPFS,\n            ipfs,\n            orbitdb,\n            cache,\n            pinningNode,\n            publicStore,\n            rootStore,\n            readyPromise,\n            profileEntry,\n            profile,\n            closeAll,\n            _args32 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                opts = _args32.length > 1 && _args32[1] !== undefined ? _args32[1] : {};\n\n                if (!idUtils.isMuportDID(address)) {\n                  _context32.next = 3;\n                  break;\n                }\n\n                throw new Error('DID are supported in the cached version only');\n\n              case 3:\n                _context32.next = 5;\n                return API.getRootStoreAddress(address.toLowerCase(), opts.addressServer);\n\n              case 5:\n                rootStoreAddress = _context32.sent;\n                usingGlobalIPFS = false; // let usingGlobalOrbitDB = false\n\n                if (!globalIPFS) {\n                  _context32.next = 12;\n                  break;\n                }\n\n                ipfs = globalIPFS;\n                usingGlobalIPFS = true;\n                _context32.next = 15;\n                break;\n\n              case 12:\n                _context32.next = 14;\n                return initIPFS(opts.ipfs, opts.iframeStore, opts.ipfsOptions);\n\n              case 14:\n                ipfs = _context32.sent;\n\n              case 15:\n                if (globalOrbitDB) {\n                  orbitdb = globalOrbitDB;\n                  usingGlobalIPFS = true;\n                } else {\n                  cache = null; // (opts.iframeStore && !!cacheProxy) ? cacheProxy : null\n\n                  orbitdb = new OrbitDB(ipfs, opts.orbitPath, {\n                    cache: cache\n                  });\n                }\n\n                pinningNode = opts.pinningNode || PINNING_NODE;\n                ipfs.swarm.connect(pinningNode, function () {});\n                publicStore = new PublicStore(orbitdb);\n\n                if (!rootStoreAddress) {\n                  _context32.next = 41;\n                  break;\n                }\n\n                _context32.next = 22;\n                return orbitdb.open(rootStoreAddress);\n\n              case 22:\n                rootStore = _context32.sent;\n                readyPromise = new Promise(function (resolve, reject) {\n                  rootStore.events.on('ready', resolve);\n                });\n                rootStore.load();\n                _context32.next = 27;\n                return readyPromise;\n\n              case 27:\n                if (rootStore.iterator({\n                  limit: -1\n                }).collect().length) {\n                  _context32.next = 30;\n                  break;\n                }\n\n                _context32.next = 30;\n                return new Promise(function (resolve, reject) {\n                  rootStore.events.on('replicate.progress', function (_x, _y, _z, num, max) {\n                    if (num === max) {\n                      rootStore.events.on('replicated', resolve);\n                    }\n                  });\n                });\n\n              case 30:\n                profileEntry = rootStore.iterator({\n                  limit: -1\n                }).collect().find(function (entry) {\n                  return entry.payload.value.odbAddress.split('.')[1] === 'public';\n                });\n                _context32.next = 33;\n                return publicStore._load(profileEntry.payload.value.odbAddress);\n\n              case 33:\n                _context32.next = 35;\n                return publicStore._sync();\n\n              case 35:\n                profile = publicStore.all();\n\n                closeAll =\n                /*#__PURE__*/\n                function () {\n                  var _ref7 = (0, _asyncToGenerator2[\"default\"])(\n                  /*#__PURE__*/\n                  _regenerator[\"default\"].mark(function _callee31() {\n                    return _regenerator[\"default\"].wrap(function _callee31$(_context31) {\n                      while (1) {\n                        switch (_context31.prev = _context31.next) {\n                          case 0:\n                            _context31.next = 2;\n                            return rootStore.close();\n\n                          case 2:\n                            _context31.next = 4;\n                            return publicStore.close();\n\n                          case 4:\n                            // if (!usingGlobalOrbitDB) await orbitdb.stop()\n                            if (!usingGlobalIPFS) {} // await ipfs.stop()\n\n\n                          case 5:\n                          case \"end\":\n                            return _context31.stop();\n                        }\n                      }\n                    }, _callee31);\n                  }));\n\n                  return function closeAll() {\n                    return _ref7.apply(this, arguments);\n                  };\n                }(); // close but don't wait for it\n\n\n                closeAll();\n                return _context32.abrupt(\"return\", profile);\n\n              case 41:\n                return _context32.abrupt(\"return\", null);\n\n              case 42:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32);\n      }));\n\n      function _getProfileOrbit(_x30) {\n        return _getProfileOrbit2.apply(this, arguments);\n      }\n\n      return _getProfileOrbit;\n    }()\n    /**\n     * GraphQL for 3Box profile API\n     *\n     * @param     {Object}    query               A graphQL query object.\n     * @param     {Object}    opts                Optional parameters\n     * @param     {String}    opts.graphqlServer  URL of graphQL 3Box profile service\n     * @return    {Object}                        a json object with each key an address and value the profile\n     */\n\n  }, {\n    key: \"profileGraphQL\",\n    value: function () {\n      var _profileGraphQL = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee33(query) {\n        var opts,\n            _args33 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                opts = _args33.length > 1 && _args33[1] !== undefined ? _args33[1] : {};\n                return _context33.abrupt(\"return\", API.profileGraphQL(query, opts.graphqlServer));\n\n              case 2:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33);\n      }));\n\n      function profileGraphQL(_x31) {\n        return _profileGraphQL.apply(this, arguments);\n      }\n\n      return profileGraphQL;\n    }()\n    /**\n     * Verifies the proofs of social accounts that is present in the profile.\n     *\n     * @param     {Object}            profile                 A user profile object, received from the `getProfile` function\n     * @return    {Object}                                    An object containing the accounts that have been verified\n     */\n\n  }, {\n    key: \"getVerifiedAccounts\",\n    value: function () {\n      var _getVerifiedAccounts = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee34(profile) {\n        return _regenerator[\"default\"].wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                return _context34.abrupt(\"return\", API.getVerifiedAccounts(profile));\n\n              case 1:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34);\n      }));\n\n      function getVerifiedAccounts(_x32) {\n        return _getVerifiedAccounts.apply(this, arguments);\n      }\n\n      return getVerifiedAccounts;\n    }()\n    /**\n     * Opens the 3Box associated with the given address\n     *\n     * @param     {String}            address                 An ethereum address\n     * @param     {ethereumProvider}  ethereumProvider        An ethereum provider\n     * @param     {Object}            opts                    Optional parameters\n     * @param     {Function}          opts.consentCallback    A function that will be called when the user has consented to opening the box\n     * @param     {String}            opts.pinningNode        A string with an ipfs multi-address to a 3box pinning node\n     * @param     {Object}            opts.ipfs               A js-ipfs ipfs object\n     * @param     {String}            opts.addressServer      URL of the Address Server\n     * @param     {String}            opts.contentSignature   A signature, provided by a client of 3box using the private keys associated with the given address, of the 3box consent message\n     * @return    {Box}                                       the 3Box instance for the given address\n     */\n\n  }, {\n    key: \"openBox\",\n    value: function () {\n      var _openBox = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee35(address, ethereumProvider) {\n        var opts,\n            ipfs,\n            _3id,\n            box,\n            _args35 = arguments;\n\n        return _regenerator[\"default\"].wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                opts = _args35.length > 2 && _args35[2] !== undefined ? _args35[2] : {};\n                _context35.t0 = globalIPFS;\n\n                if (_context35.t0) {\n                  _context35.next = 6;\n                  break;\n                }\n\n                _context35.next = 5;\n                return initIPFS(opts.ipfs, opts.iframeStore, opts.ipfsOptions);\n\n              case 5:\n                _context35.t0 = _context35.sent;\n\n              case 6:\n                ipfs = _context35.t0;\n                globalIPFS = ipfs;\n                _context35.next = 10;\n                return ThreeId.getIdFromEthAddress(address, ethereumProvider, ipfs, opts);\n\n              case 10:\n                _3id = _context35.sent;\n                box = new Box(_3id, ethereumProvider, ipfs, opts);\n                _context35.next = 14;\n                return box._load(opts);\n\n              case 14:\n                return _context35.abrupt(\"return\", box);\n\n              case 15:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35);\n      }));\n\n      function openBox(_x33, _x34) {\n        return _openBox.apply(this, arguments);\n      }\n\n      return openBox;\n    }()\n  }, {\n    key: \"isLoggedIn\",\n    value: function isLoggedIn(address) {\n      return ThreeId.isLoggedIn(address);\n    }\n  }]);\n  return Box;\n}();\n\nfunction initIPFS(_x35, _x36, _x37) {\n  return _initIPFS.apply(this, arguments);\n}\n\nfunction _initIPFS() {\n  _initIPFS = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee36(ipfs, iframeStore, ipfsOptions) {\n    return _regenerator[\"default\"].wrap(function _callee36$(_context36) {\n      while (1) {\n        switch (_context36.prev = _context36.next) {\n          case 0:\n            // if (!ipfs && !ipfsProxy) throw new Error('No IPFS object configured and no default available for environment')\n            if (!!ipfs && iframeStore) console.log('Warning: iframeStore true, orbit db cache in iframe, but the given ipfs object is being used, and may not be running in same iframe.');\n\n            if (!ipfs) {\n              _context36.next = 5;\n              break;\n            }\n\n            return _context36.abrupt(\"return\", ipfs);\n\n          case 5:\n            return _context36.abrupt(\"return\", new Promise(function (resolve, reject) {\n              ipfs = new IPFS(ipfsOptions || IPFS_OPTIONS);\n              ipfs.on('error', function (error) {\n                console.error(error);\n                reject(error);\n              });\n              ipfs.on('ready', function () {\n                return resolve(ipfs);\n              });\n            }));\n\n          case 6:\n          case \"end\":\n            return _context36.stop();\n        }\n      }\n    }, _callee36);\n  }));\n  return _initIPFS.apply(this, arguments);\n}\n\nBox.idUtils = idUtils;\nmodule.exports = Box;","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017 Joachim Wester\n * MIT license\n */\nvar helpers_1 = require(\"./helpers\");\nvar core_1 = require(\"./core\");\n/* export all core functions and types */\nvar core_2 = require(\"./core\");\nexports.applyOperation = core_2.applyOperation;\nexports.applyPatch = core_2.applyPatch;\nexports.applyReducer = core_2.applyReducer;\nexports.getValueByPointer = core_2.getValueByPointer;\nexports.validate = core_2.validate;\nexports.validator = core_2.validator;\n/* export some helpers */\nvar helpers_2 = require(\"./helpers\");\nexports.JsonPatchError = helpers_2.PatchError;\nexports.deepClone = helpers_2._deepClone;\nexports.escapePathComponent = helpers_2.escapePathComponent;\nexports.unescapePathComponent = helpers_2.unescapePathComponent;\nvar beforeDict = new WeakMap();\nvar Mirror = /** @class */ (function () {\n    function Mirror(obj) {\n        this.observers = new Map();\n        this.obj = obj;\n    }\n    return Mirror;\n}());\nvar ObserverInfo = /** @class */ (function () {\n    function ObserverInfo(callback, observer) {\n        this.callback = callback;\n        this.observer = observer;\n    }\n    return ObserverInfo;\n}());\nfunction getMirror(obj) {\n    return beforeDict.get(obj);\n}\nfunction getObserverFromMirror(mirror, callback) {\n    return mirror.observers.get(callback);\n}\nfunction removeObserverFromMirror(mirror, observer) {\n    mirror.observers.delete(observer.callback);\n}\n/**\n * Detach an observer from an object\n */\nfunction unobserve(root, observer) {\n    observer.unobserve();\n}\nexports.unobserve = unobserve;\n/**\n * Observes changes made to an object, which can then be retrieved using generate\n */\nfunction observe(obj, callback) {\n    var patches = [];\n    var observer;\n    var mirror = getMirror(obj);\n    if (!mirror) {\n        mirror = new Mirror(obj);\n        beforeDict.set(obj, mirror);\n    }\n    else {\n        var observerInfo = getObserverFromMirror(mirror, callback);\n        observer = observerInfo && observerInfo.observer;\n    }\n    if (observer) {\n        return observer;\n    }\n    observer = {};\n    mirror.value = helpers_1._deepClone(obj);\n    if (callback) {\n        observer.callback = callback;\n        observer.next = null;\n        var dirtyCheck = function () {\n            generate(observer);\n        };\n        var fastCheck = function () {\n            clearTimeout(observer.next);\n            observer.next = setTimeout(dirtyCheck);\n        };\n        if (typeof window !== 'undefined') { //not Node\n            window.addEventListener('mouseup', fastCheck);\n            window.addEventListener('keyup', fastCheck);\n            window.addEventListener('mousedown', fastCheck);\n            window.addEventListener('keydown', fastCheck);\n            window.addEventListener('change', fastCheck);\n        }\n    }\n    observer.patches = patches;\n    observer.object = obj;\n    observer.unobserve = function () {\n        generate(observer);\n        clearTimeout(observer.next);\n        removeObserverFromMirror(mirror, observer);\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('mouseup', fastCheck);\n            window.removeEventListener('keyup', fastCheck);\n            window.removeEventListener('mousedown', fastCheck);\n            window.removeEventListener('keydown', fastCheck);\n            window.removeEventListener('change', fastCheck);\n        }\n    };\n    mirror.observers.set(callback, new ObserverInfo(callback, observer));\n    return observer;\n}\nexports.observe = observe;\n/**\n * Generate an array of patches from an observer\n */\nfunction generate(observer, invertible) {\n    if (invertible === void 0) { invertible = false; }\n    var mirror = beforeDict.get(observer.object);\n    _generate(mirror.value, observer.object, observer.patches, \"\", invertible);\n    if (observer.patches.length) {\n        core_1.applyPatch(mirror.value, observer.patches);\n    }\n    var temp = observer.patches;\n    if (temp.length > 0) {\n        observer.patches = [];\n        if (observer.callback) {\n            observer.callback(temp);\n        }\n    }\n    return temp;\n}\nexports.generate = generate;\n// Dirty check if obj is different from mirror, generate patches and update mirror\nfunction _generate(mirror, obj, patches, path, invertible) {\n    if (obj === mirror) {\n        return;\n    }\n    if (typeof obj.toJSON === \"function\") {\n        obj = obj.toJSON();\n    }\n    var newKeys = helpers_1._objectKeys(obj);\n    var oldKeys = helpers_1._objectKeys(mirror);\n    var changed = false;\n    var deleted = false;\n    //if ever \"move\" operation is implemented here, make sure this test runs OK: \"should not generate the same patch twice (move)\"\n    for (var t = oldKeys.length - 1; t >= 0; t--) {\n        var key = oldKeys[t];\n        var oldVal = mirror[key];\n        if (helpers_1.hasOwnProperty(obj, key) && !(obj[key] === undefined && oldVal !== undefined && Array.isArray(obj) === false)) {\n            var newVal = obj[key];\n            if (typeof oldVal == \"object\" && oldVal != null && typeof newVal == \"object\" && newVal != null) {\n                _generate(oldVal, newVal, patches, path + \"/\" + helpers_1.escapePathComponent(key), invertible);\n            }\n            else {\n                if (oldVal !== newVal) {\n                    changed = true;\n                    if (invertible) {\n                        patches.push({ op: \"test\", path: path + \"/\" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(oldVal) });\n                    }\n                    patches.push({ op: \"replace\", path: path + \"/\" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(newVal) });\n                }\n            }\n        }\n        else if (Array.isArray(mirror) === Array.isArray(obj)) {\n            if (invertible) {\n                patches.push({ op: \"test\", path: path + \"/\" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(oldVal) });\n            }\n            patches.push({ op: \"remove\", path: path + \"/\" + helpers_1.escapePathComponent(key) });\n            deleted = true; // property has been deleted\n        }\n        else {\n            if (invertible) {\n                patches.push({ op: \"test\", path: path, value: mirror });\n            }\n            patches.push({ op: \"replace\", path: path, value: obj });\n            changed = true;\n        }\n    }\n    if (!deleted && newKeys.length == oldKeys.length) {\n        return;\n    }\n    for (var t = 0; t < newKeys.length; t++) {\n        var key = newKeys[t];\n        if (!helpers_1.hasOwnProperty(mirror, key) && obj[key] !== undefined) {\n            patches.push({ op: \"add\", path: path + \"/\" + helpers_1.escapePathComponent(key), value: helpers_1._deepClone(obj[key]) });\n        }\n    }\n}\n/**\n * Create an array of patches from the differences in two objects\n */\nfunction compare(tree1, tree2, invertible) {\n    if (invertible === void 0) { invertible = false; }\n    var patches = [];\n    _generate(tree1, tree2, patches, '', invertible);\n    return patches;\n}\nexports.compare = compare;\n/**\n * Default export for backwards compat\n */\n// import just to re-export as default\nvar core = require(\"./core\");\nvar helpers_3 = require(\"./helpers\");\nexports.default = __assign({}, core, { \n    // duplex\n    unobserve: unobserve,\n    observe: observe,\n    generate: generate,\n    compare: compare,\n    // helpers\n    JsonPatchError: helpers_3.PatchError, deepClone: helpers_1._deepClone, escapePathComponent: helpers_1.escapePathComponent,\n    unescapePathComponent: helpers_3.unescapePathComponent });\n","/*\n\tISC License\n\n\tCopyright (c) 2019, Pierre-Louis Despaigne\n\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nconst CID = require('cids');\nconst multiH = require('multihashes');\nconst base64 = require('js-base64')\n\n/**\n * Convert an hexadecimal string to a Buffer, the string can start with or without '0x'\n * @param {string} hex an hexadecimal value\n * @return {Buffer} the resulting Buffer\n */\nconst hexStringToBuffer = (hex) => {\n\tlet prefix = hex.slice(0, 2);\n\tlet value = hex.slice(2);\n\tlet res = '';\n\tif (prefix === '0x') res = value;\n\telse res = hex;\n\treturn multiH.fromHexString(res);\n}\n\n/**\n * Validates IPNS identifier  to safeguard against insecure names.\n * @param {CID} name ised in ipns-ns\n * @return {bool}\n */\nconst isCryptographicIPNS =  (cid) => {\n  try {\n    const { multihash } = cid\n    // Additional check for identifiers shorter\n    // than what inlined ED25519 pubkey would be\n    // https://github.com/ensdomains/ens-app/issues/849#issuecomment-777088950\n    if (multihash.length < 38) {\n      const mh = multiH.decode(multihash)\n      // ED25519 pubkeys are inlined using identity hash function\n      // and we should not see anything shorter than that\n      if (mh.name === 'identity' && mh.length < 36) {\n        // One can read inlined string value via:\n        // console.log('ipns-ns id:', String(multiH.decode(new CID(value).multihash).digest))\n        return false\n      }\n    }\n    // ok, CID looks fine\n    return true\n  } catch (_) { return false }\n  return false\n}\n\n/**\n* list of known encoding,\n* encoding should be a function that takes a `string` input,\n* and return a `Buffer` result\n*/\nconst encodes = {\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  skynet: (value) => {\n    return base64.toUint8Array(value)\n  },\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  swarm: (value) => {\n    const multihash = multiH.encode(hexStringToBuffer(value), 'keccak-256');\n\t\treturn new CID(1, 'swarm-manifest', multihash).bytes;\n  },\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  ipfs: (value) => {\n    return new CID(value).toV1().bytes;\n  },\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  ipns: (value) => {\n    const cid = new CID(value)\n    if (!isCryptographicIPNS(cid)) {\n        throw Error('ipns-ns allows only valid cryptographic libp2p-key identifiers, try using ED25519 pubkey instead')\n    }\n    // Represent IPNS name as a CID with libp2p-key codec\n    // https://github.com/libp2p/specs/blob/master/RFC/0001-text-peerid-cid.md\n    return new CID(1, 'libp2p-key', cid.multihash).bytes\n  },\n  /**\n  * @param {string} value\n  * @return {Buffer}\n  */\n  utf8: (value) => {\n    return Buffer.from(value, 'utf8');\n  },\n};\n\n/** \n* list of known decoding,\n* decoding should be a function that takes a `Buffer` input,\n* and return a `string` result\n*/\nconst decodes = {\n  /**\n  * @param {Buffer} value \n  */\n  hexMultiHash: (value) => {\n    const cid = new CID(value);\n    return multiH.decode(cid.multihash).digest.toString('hex');\n  },\n  /**\n  * @param {Buffer} value \n  */\n  ipfs: (value) => {\n    const cid = new CID(value).toV1();\n    return cid.toString(cid.codec === 'libp2p-key' ? 'base36' : 'base32')\n  },\n  /**\n  * @param {Buffer} value \n  */\n  ipns: (value) => {\n    const cid = new CID(value).toV1()\n    if (!isCryptographicIPNS(cid)) {\n        // Value is not a libp2p-key, return original string\n        console.warn('[ensdomains/content-hash] use of non-cryptographic identifiers in ipns-ns is deprecated and will be removed, migrate to ED25519 libp2p-key')\n        return String(multiH.decode(new CID(value).multihash).digest)\n        // TODO: start throwing an error (after some deprecation period)\n        // throw Error('ipns-ns allows only valid cryptographic libp2p-key identifiers, try using ED25519 pubkey instead')\n    }\n    return cid.toString('base36')\n  },\n  /**\n  * @param {Buffer} value \n  */\n  utf8: (value) => {\n    return value.toString('utf8');\n  },\n  base64: (value) => {\n    // `true` option makes it URL safe (replaces / and + with - and _ )\n    return base64.fromUint8Array(value, true)\n  }\n};\n\n/**\n* list of known encoding/decoding for a given codec,\n* `encode` should be chosen among the `encodes` functions\n* `decode` should be chosen among the `decodes` functions\n*/\nconst profiles = {\n  'skynet-ns': {\n    encode: encodes.skynet,\n    decode: decodes.base64,\n  },\n  'swarm-ns': {\n    encode: encodes.swarm,\n    decode: decodes.hexMultiHash,\n  },\n  'ipfs-ns': {\n    encode: encodes.ipfs,\n    decode: decodes.ipfs,\n  },\n  'ipns-ns': {\n    encode: encodes.ipns,\n    decode: decodes.ipns,\n  },\n  'default': {\n    encode: encodes.utf8,\n    decode: decodes.utf8,\n  },\n};\n\nexports.hexStringToBuffer = hexStringToBuffer;\nexports.profiles = profiles;\n","// @ts-check\n/* eslint-disable guard-for-in */\n/**\n * Multihash implementation in JavaScript.\n *\n * @module multihash\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst multibase = require('multibase')\nconst varint = require('varint')\nconst { names } = require('./constants')\nconst { TextDecoder } = require('web-encoding')\n\nconst textDecoder = new TextDecoder()\nconst codes = {}\n\nfor (const key in names) {\n  codes[names[key]] = key\n}\nexports.names = names\nexports.codes = Object.freeze(codes)\n\n/**\n * Convert the given multihash to a hex encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nexports.toHexString = function toHexString (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  const buffer = Buffer.isBuffer(hash)\n    ? hash\n    : Buffer.from(hash.buffer, hash.byteOffset, hash.byteLength)\n\n  return buffer.toString('hex')\n}\n\n/**\n * Convert the given hex encoded string to a multihash.\n *\n * @param {string} hash\n * @returns {Buffer}\n */\nexports.fromHexString = function fromHexString (hash) {\n  return Buffer.from(hash, 'hex')\n}\n\n/**\n * Convert the given multihash to a base58 encoded string.\n *\n * @param {Uint8Array} hash\n * @returns {string}\n */\nexports.toB58String = function toB58String (hash) {\n  if (!(hash instanceof Uint8Array)) {\n    throw new Error('must be passed a Uint8Array')\n  }\n\n  return textDecoder.decode(multibase.encode('base58btc', hash)).slice(1)\n}\n\n/**\n * Convert the given base58 encoded string to a multihash.\n *\n * @param {string|Uint8Array} hash\n * @returns {Buffer}\n */\nexports.fromB58String = function fromB58String (hash) {\n  const encoded = hash instanceof Uint8Array\n    ? textDecoder.decode(hash)\n    : hash\n\n  return multibase.decode('z' + encoded)\n}\n\n/**\n * Decode a hash from the given multihash.\n *\n * @param {Uint8Array} bytes\n * @returns {{code: number, name: string, length: number, digest: Buffer}} result\n */\nexports.decode = function decode (bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new Error('multihash must be a Uint8Array')\n  }\n  let buf = Buffer.isBuffer(bytes)\n    ? bytes\n    : Buffer.from(bytes.buffer, bytes.byteOffset, bytes.byteLength)\n\n  if (buf.length < 2) {\n    throw new Error('multihash too short. must be > 2 bytes.')\n  }\n\n  const code = varint.decode(buf)\n  if (!exports.isValidCode(code)) {\n    throw new Error(`multihash unknown function code: 0x${code.toString(16)}`)\n  }\n  buf = buf.slice(varint.decode.bytes)\n\n  const len = varint.decode(buf)\n  if (len < 0) {\n    throw new Error(`multihash invalid length: ${len}`)\n  }\n  buf = buf.slice(varint.decode.bytes)\n\n  if (buf.length !== len) {\n    throw new Error(`multihash length inconsistent: 0x${buf.toString('hex')}`)\n  }\n\n  return {\n    code,\n    name: codes[code],\n    length: len,\n    digest: buf\n  }\n}\n\n/**\n *  Encode a hash digest along with the specified function code.\n *\n * > **Note:** the length is derived from the length of the digest itself.\n *\n * @param {Uint8Array} digest\n * @param {string|number} code\n * @param {number} [length]\n * @returns {Buffer}\n */\nexports.encode = function encode (digest, code, length) {\n  if (!digest || code === undefined) {\n    throw new Error('multihash encode requires at least two args: digest, code')\n  }\n\n  // ensure it's a hashfunction code.\n  const hashfn = exports.coerceCode(code)\n\n  if (!(digest instanceof Uint8Array)) {\n    throw new Error('digest should be a Uint8Array')\n  }\n\n  if (length == null) {\n    length = digest.length\n  }\n\n  if (length && digest.length !== length) {\n    throw new Error('digest length should be equal to specified length.')\n  }\n\n  const hash = varint.encode(hashfn)\n  const len = varint.encode(length)\n  const buffer = Buffer.alloc(hash.length + len.length + digest.length)\n  buffer.set(hash, 0)\n  buffer.set(len, hash.length)\n  buffer.set(digest, hash.length + len.length)\n  return buffer\n}\n\n/**\n * Converts a hash function name into the matching code.\n * If passed a number it will return the number if it's a valid code.\n * @param {string|number} name\n * @returns {number}\n */\nexports.coerceCode = function coerceCode (name) {\n  let code = name\n\n  if (typeof name === 'string') {\n    if (names[name] === undefined) {\n      throw new Error(`Unrecognized hash function named: ${name}`)\n    }\n    code = names[name]\n  }\n\n  if (typeof code !== 'number') {\n    throw new Error(`Hash function code should be a number. Got: ${code}`)\n  }\n\n  if (codes[code] === undefined && !exports.isAppCode(code)) {\n    throw new Error(`Unrecognized function code: ${code}`)\n  }\n\n  return code\n}\n\n/**\n * Checks wether a code is part of the app range\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isAppCode = function appCode (code) {\n  return code > 0 && code < 0x10\n}\n\n/**\n * Checks whether a multihash code is valid.\n *\n * @param {number} code\n * @returns {boolean}\n */\nexports.isValidCode = function validCode (code) {\n  if (exports.isAppCode(code)) {\n    return true\n  }\n\n  if (codes[code]) {\n    return true\n  }\n\n  return false\n}\n\n/**\n * Check if the given buffer is a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {void}\n * @throws {Error}\n */\nfunction validate (multihash) {\n  exports.decode(multihash) // throws if bad.\n}\nexports.validate = validate\n\n/**\n * Returns a prefix from a valid multihash. Throws an error if it is not valid.\n *\n * @param {Uint8Array} multihash\n * @returns {Buffer}\n * @throws {Error}\n */\nexports.prefix = function prefix (multihash) {\n  validate(multihash)\n\n  return Buffer.from(multihash.buffer, multihash.byteOffset, 2)\n}\n","/*\n\tISC License\n\n\tCopyright (c) 2019, Pierre-Louis Despaigne\n\n\tPermission to use, copy, modify, and/or distribute this software for any\n\tpurpose with or without fee is hereby granted, provided that the above\n\tcopyright notice and this permission notice appear in all copies.\n\n\tTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n\tWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n\tMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n\tANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n\tWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n\tACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n\tOR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n*/\n\nconst CID = require('cids');\n\n// Label's max length in DNS (https://tools.ietf.org/html/rfc1034#page-7)\nconst dnsLabelMaxLength = 63;\n\n/**\n * Take any ipfsHash and convert it to DNS-compatible CID\n * @param {string} ipfsHash a regular ipfs hash either a cid v0 or v1\n * @return {string} the resulting ipfs hash as a cid v1\n */\nconst cidForWeb = (ipfsHash) => {\n\tlet cid = new CID(ipfsHash);\n\tif (cid.version === 0) {\n\t\tcid = cid.toV1();\n\t}\n  let dnsLabel = cid.toString('base32');\n  if (dnsLabel.length > dnsLabelMaxLength) {\n    const b36 = cid.toString('base36');\n    if (b36.length <= dnsLabelMaxLength) {\n      return b36;\n    }\n    throw new TypeError ('CID is longer than DNS limit of 63 characters and is not compatible with public gateways');\n  }\n\treturn dnsLabel;\n}\n\nexports.cidForWeb = cidForWeb;\n\n\n/**\n * Take any ipfsHash and convert it to a CID v1 encoded in base32.\n * @param {string} ipfsHash a regular ipfs hash either a cid v0 or v1 (v1 will remain unchanged)\n * @return {string} the resulting ipfs hash as a cid v1\n */\nconst cidV0ToV1Base32 = (ipfsHash) => {\n\tlet cid = new CID(ipfsHash);\n\tif (cid.version === 0) {\n\t\tcid = cid.toV1();\n\t}\n\treturn cid.toString('base32');\n}\n\nexports.cidV0ToV1Base32 = cidV0ToV1Base32;\n","/**\n * Implementation of the multicodec specification.\n *\n * @module multicodec\n * @example\n * const multicodec = require('multicodec')\n *\n * const prefixedProtobuf = multicodec.addPrefix('protobuf', protobufBuffer)\n * // prefixedProtobuf 0x50...\n *\n */\n'use strict'\n\n/** @typedef {__import__('./generated-types').CodecName} CodecName */\n/** @typedef {__import__('./generated-types').CodecNumber} CodecNumber */\n\nconst varint = require('varint')\nconst intTable = require('./int-table')\nconst codecNameToCodeVarint = require('./varint-table')\nconst util = require('./util')\nconst uint8ArrayConcat = require('uint8arrays/concat')\n\n/**\n * Prefix a buffer with a multicodec-packed.\n *\n * @param {CodecName|Uint8Array} multicodecStrOrCode\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction addPrefix (multicodecStrOrCode, data) {\n  let prefix\n\n  if (multicodecStrOrCode instanceof Uint8Array) {\n    prefix = util.varintUint8ArrayEncode(multicodecStrOrCode)\n  } else {\n    if (codecNameToCodeVarint[multicodecStrOrCode]) {\n      prefix = codecNameToCodeVarint[multicodecStrOrCode]\n    } else {\n      throw new Error('multicodec not recognized')\n    }\n  }\n  return uint8ArrayConcat([prefix, data], prefix.length + data.length)\n}\n\n/**\n * Decapsulate the multicodec-packed prefix from the data.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n */\nfunction rmPrefix (data) {\n  varint.decode(data)\n  return data.slice(varint.decode.bytes)\n}\n\n/**\n * Get the codec of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecName}\n */\nfunction getCodec (prefixedData) {\n  const code = varint.decode(prefixedData)\n  const codecName = intTable.get(code)\n  if (codecName === undefined) {\n    throw new Error(`Code ${code} not found`)\n  }\n  return codecName\n}\n\n/**\n * Get the name of the codec.\n *\n * @param {CodecNumber} codec\n * @returns {CodecName|undefined}\n */\nfunction getName (codec) {\n  return intTable.get(codec)\n}\n\n/**\n * Get the code of the codec\n *\n * @param {CodecName} name\n * @returns {CodecNumber}\n */\nfunction getNumber (name) {\n  const code = codecNameToCodeVarint[name]\n  if (code === undefined) {\n    throw new Error('Codec `' + name + '` not found')\n  }\n  return varint.decode(code)\n}\n\n/**\n * Get the code of the prefixed data.\n *\n * @param {Uint8Array} prefixedData\n * @returns {CodecNumber}\n */\nfunction getCode (prefixedData) {\n  return varint.decode(prefixedData)\n}\n\n/**\n * Get the code as varint of a codec name.\n *\n * @param {CodecName} codecName\n * @returns {Uint8Array}\n */\nfunction getCodeVarint (codecName) {\n  const code = codecNameToCodeVarint[codecName]\n  if (code === undefined) {\n    throw new Error('Codec `' + codecName + '` not found')\n  }\n  return code\n}\n\n/**\n * Get the varint of a code.\n *\n * @param {CodecNumber} code\n * @returns {Array.<number>}\n */\nfunction getVarint (code) {\n  return varint.encode(code)\n}\n\n// Make the constants top-level constants\nconst constants = require('./constants')\n\n// Human friendly names for printing, e.g. in error messages\nconst print = require('./print')\n\nmodule.exports = {\n  addPrefix,\n  rmPrefix,\n  getCodec,\n  getName,\n  getNumber,\n  getCode,\n  getCodeVarint,\n  getVarint,\n  print,\n  ...constants\n}\n","module.exports={\n  \"name\": \"analytics-node\",\n  \"version\": \"3.4.0-beta.3\",\n  \"description\": \"The hassle-free way to integrate analytics into any Node.js application\",\n  \"license\": \"MIT\",\n  \"repository\": \"segmentio/analytics-node\",\n  \"author\": {\n    \"name\": \"Segment\",\n    \"email\": \"tools+npm@segment.com\",\n    \"url\": \"https://segment.com\"\n  },\n  \"engines\": {\n    \"node\": \">=4\"\n  },\n  \"size-limit\": [\n    {\n      \"limit\": \"25 KB\",\n      \"path\": \"index.js\"\n    }\n  ],\n  \"scripts\": {\n    \"circle-lint\": \".buildscript/circle.sh\",\n    \"dependencies\": \"yarn\",\n    \"size\": \"size-limit\",\n    \"test\": \"standard && nyc ava --timeout=20s&& .buildscript/e2e.sh\",\n    \"report-coverage\": \"nyc report --reporter=lcov > coverage.lcov && codecov\",\n    \"np\": \"np --no-publish\",\n    \"release\": \"yarn run np\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"keywords\": [\n    \"analytics\",\n    \"stats\",\n    \"segment.io\",\n    \"segmentio\",\n    \"segment\",\n    \"client\",\n    \"driver\"\n  ],\n  \"dependencies\": {\n    \"@segment/loosely-validate-event\": \"^2.0.0\",\n    \"axios\": \"^0.19.2\",\n    \"axios-retry\": \"^3.0.2\",\n    \"lodash.isstring\": \"^4.0.1\",\n    \"md5\": \"^2.2.1\",\n    \"ms\": \"^2.0.0\",\n    \"remove-trailing-slash\": \"^0.1.0\",\n    \"uuid\": \"^3.2.1\"\n  },\n  \"devDependencies\": {\n    \"ava\": \"^0.25.0\",\n    \"basic-auth\": \"^2.0.1\",\n    \"body-parser\": \"^1.17.1\",\n    \"codecov\": \"^3.0.0\",\n    \"commander\": \"^2.9.0\",\n    \"delay\": \"^4.2.0\",\n    \"express\": \"^4.15.2\",\n    \"husky\": \"^3.0.4\",\n    \"nyc\": \"^14.1.1\",\n    \"pify\": \"^4.0.1\",\n    \"sinon\": \"^7.3.2\",\n    \"size-limit\": \"^1.3.5\",\n    \"snyk\": \"^1.171.1\",\n    \"standard\": \"^12.0.1\"\n  }\n}\n","\n/**\n * Remove trailing slashes from the given `str`\n *\n * @api public\n * @param {String} str\n * @return {String}\n */\nexports = module.exports = function (str) {\n  return String(str).replace(exports.expr, '');\n};\n\n/**\n * Expose the regex\n *\n * @api private\n * @type {RegExp}\n */\nexports.expr = /\\/+$/;\n","/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function (val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","/**\n * lodash 4.0.1 (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\n\n/** `Object#toString` result references. */\nvar stringTag = '[object String]';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @type Function\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `String` primitive or object.\n *\n * @static\n * @memberOf _\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.\n * @example\n *\n * _.isString('abc');\n * // => true\n *\n * _.isString(1);\n * // => false\n */\nfunction isString(value) {\n  return typeof value == 'string' ||\n    (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);\n}\n\nmodule.exports = isString;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","(function(){\r\n  var crypt = require('crypt'),\r\n      utf8 = require('charenc').utf8,\r\n      isBuffer = require('is-buffer'),\r\n      bin = require('charenc').bin,\r\n\r\n  // The core\r\n  md5 = function (message, options) {\r\n    // Convert to byte array\r\n    if (message.constructor == String)\r\n      if (options && options.encoding === 'binary')\r\n        message = bin.stringToBytes(message);\r\n      else\r\n        message = utf8.stringToBytes(message);\r\n    else if (isBuffer(message))\r\n      message = Array.prototype.slice.call(message, 0);\r\n    else if (!Array.isArray(message) && message.constructor !== Uint8Array)\r\n      message = message.toString();\r\n    // else, assume byte array already\r\n\r\n    var m = crypt.bytesToWords(message),\r\n        l = message.length * 8,\r\n        a =  1732584193,\r\n        b = -271733879,\r\n        c = -1732584194,\r\n        d =  271733878;\r\n\r\n    // Swap endian\r\n    for (var i = 0; i < m.length; i++) {\r\n      m[i] = ((m[i] <<  8) | (m[i] >>> 24)) & 0x00FF00FF |\r\n             ((m[i] << 24) | (m[i] >>>  8)) & 0xFF00FF00;\r\n    }\r\n\r\n    // Padding\r\n    m[l >>> 5] |= 0x80 << (l % 32);\r\n    m[(((l + 64) >>> 9) << 4) + 14] = l;\r\n\r\n    // Method shortcuts\r\n    var FF = md5._ff,\r\n        GG = md5._gg,\r\n        HH = md5._hh,\r\n        II = md5._ii;\r\n\r\n    for (var i = 0; i < m.length; i += 16) {\r\n\r\n      var aa = a,\r\n          bb = b,\r\n          cc = c,\r\n          dd = d;\r\n\r\n      a = FF(a, b, c, d, m[i+ 0],  7, -680876936);\r\n      d = FF(d, a, b, c, m[i+ 1], 12, -389564586);\r\n      c = FF(c, d, a, b, m[i+ 2], 17,  606105819);\r\n      b = FF(b, c, d, a, m[i+ 3], 22, -1044525330);\r\n      a = FF(a, b, c, d, m[i+ 4],  7, -176418897);\r\n      d = FF(d, a, b, c, m[i+ 5], 12,  1200080426);\r\n      c = FF(c, d, a, b, m[i+ 6], 17, -1473231341);\r\n      b = FF(b, c, d, a, m[i+ 7], 22, -45705983);\r\n      a = FF(a, b, c, d, m[i+ 8],  7,  1770035416);\r\n      d = FF(d, a, b, c, m[i+ 9], 12, -1958414417);\r\n      c = FF(c, d, a, b, m[i+10], 17, -42063);\r\n      b = FF(b, c, d, a, m[i+11], 22, -1990404162);\r\n      a = FF(a, b, c, d, m[i+12],  7,  1804603682);\r\n      d = FF(d, a, b, c, m[i+13], 12, -40341101);\r\n      c = FF(c, d, a, b, m[i+14], 17, -1502002290);\r\n      b = FF(b, c, d, a, m[i+15], 22,  1236535329);\r\n\r\n      a = GG(a, b, c, d, m[i+ 1],  5, -165796510);\r\n      d = GG(d, a, b, c, m[i+ 6],  9, -1069501632);\r\n      c = GG(c, d, a, b, m[i+11], 14,  643717713);\r\n      b = GG(b, c, d, a, m[i+ 0], 20, -373897302);\r\n      a = GG(a, b, c, d, m[i+ 5],  5, -701558691);\r\n      d = GG(d, a, b, c, m[i+10],  9,  38016083);\r\n      c = GG(c, d, a, b, m[i+15], 14, -660478335);\r\n      b = GG(b, c, d, a, m[i+ 4], 20, -405537848);\r\n      a = GG(a, b, c, d, m[i+ 9],  5,  568446438);\r\n      d = GG(d, a, b, c, m[i+14],  9, -1019803690);\r\n      c = GG(c, d, a, b, m[i+ 3], 14, -187363961);\r\n      b = GG(b, c, d, a, m[i+ 8], 20,  1163531501);\r\n      a = GG(a, b, c, d, m[i+13],  5, -1444681467);\r\n      d = GG(d, a, b, c, m[i+ 2],  9, -51403784);\r\n      c = GG(c, d, a, b, m[i+ 7], 14,  1735328473);\r\n      b = GG(b, c, d, a, m[i+12], 20, -1926607734);\r\n\r\n      a = HH(a, b, c, d, m[i+ 5],  4, -378558);\r\n      d = HH(d, a, b, c, m[i+ 8], 11, -2022574463);\r\n      c = HH(c, d, a, b, m[i+11], 16,  1839030562);\r\n      b = HH(b, c, d, a, m[i+14], 23, -35309556);\r\n      a = HH(a, b, c, d, m[i+ 1],  4, -1530992060);\r\n      d = HH(d, a, b, c, m[i+ 4], 11,  1272893353);\r\n      c = HH(c, d, a, b, m[i+ 7], 16, -155497632);\r\n      b = HH(b, c, d, a, m[i+10], 23, -1094730640);\r\n      a = HH(a, b, c, d, m[i+13],  4,  681279174);\r\n      d = HH(d, a, b, c, m[i+ 0], 11, -358537222);\r\n      c = HH(c, d, a, b, m[i+ 3], 16, -722521979);\r\n      b = HH(b, c, d, a, m[i+ 6], 23,  76029189);\r\n      a = HH(a, b, c, d, m[i+ 9],  4, -640364487);\r\n      d = HH(d, a, b, c, m[i+12], 11, -421815835);\r\n      c = HH(c, d, a, b, m[i+15], 16,  530742520);\r\n      b = HH(b, c, d, a, m[i+ 2], 23, -995338651);\r\n\r\n      a = II(a, b, c, d, m[i+ 0],  6, -198630844);\r\n      d = II(d, a, b, c, m[i+ 7], 10,  1126891415);\r\n      c = II(c, d, a, b, m[i+14], 15, -1416354905);\r\n      b = II(b, c, d, a, m[i+ 5], 21, -57434055);\r\n      a = II(a, b, c, d, m[i+12],  6,  1700485571);\r\n      d = II(d, a, b, c, m[i+ 3], 10, -1894986606);\r\n      c = II(c, d, a, b, m[i+10], 15, -1051523);\r\n      b = II(b, c, d, a, m[i+ 1], 21, -2054922799);\r\n      a = II(a, b, c, d, m[i+ 8],  6,  1873313359);\r\n      d = II(d, a, b, c, m[i+15], 10, -30611744);\r\n      c = II(c, d, a, b, m[i+ 6], 15, -1560198380);\r\n      b = II(b, c, d, a, m[i+13], 21,  1309151649);\r\n      a = II(a, b, c, d, m[i+ 4],  6, -145523070);\r\n      d = II(d, a, b, c, m[i+11], 10, -1120210379);\r\n      c = II(c, d, a, b, m[i+ 2], 15,  718787259);\r\n      b = II(b, c, d, a, m[i+ 9], 21, -343485551);\r\n\r\n      a = (a + aa) >>> 0;\r\n      b = (b + bb) >>> 0;\r\n      c = (c + cc) >>> 0;\r\n      d = (d + dd) >>> 0;\r\n    }\r\n\r\n    return crypt.endian([a, b, c, d]);\r\n  };\r\n\r\n  // Auxiliary functions\r\n  md5._ff  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & c | ~b & d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._gg  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b & d | c & ~d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._hh  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (b ^ c ^ d) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n  md5._ii  = function (a, b, c, d, x, s, t) {\r\n    var n = a + (c ^ (b | ~d)) + (x >>> 0) + t;\r\n    return ((n << s) | (n >>> (32 - s))) + b;\r\n  };\r\n\r\n  // Package private blocksize\r\n  md5._blocksize = 16;\r\n  md5._digestsize = 16;\r\n\r\n  module.exports = function (message, options) {\r\n    if (message === undefined || message === null)\r\n      throw new Error('Illegal argument ' + message);\r\n\r\n    var digestbytes = crypt.wordsToBytes(md5(message, options));\r\n    return options && options.asBytes ? digestbytes :\r\n        options && options.asString ? bin.bytesToString(digestbytes) :\r\n        crypt.bytesToHex(digestbytes);\r\n  };\r\n\r\n})();\r\n","var type = require('component-type')\nvar join = require('join-component')\nvar assert = require('assert')\n\n// Segment messages can be a maximum of 32kb.\nvar MAX_SIZE = 32 << 10\n\nmodule.exports = looselyValidateEvent\n\n/**\n * Validate an event.\n */\n\nfunction looselyValidateEvent (event, type) {\n  validateGenericEvent(event)\n  type = type || event.type\n  assert(type, 'You must pass an event type.')\n  switch (type) {\n    case 'track':\n      return validateTrackEvent(event)\n    case 'group':\n      return validateGroupEvent(event)\n    case 'identify':\n      return validateIdentifyEvent(event)\n    case 'page':\n      return validatePageEvent(event)\n    case 'screen':\n      return validateScreenEvent(event)\n    case 'alias':\n      return validateAliasEvent(event)\n    default:\n      assert(0, 'Invalid event type: \"' + type + '\"')\n  }\n}\n\n/**\n * Validate a \"track\" event.\n */\n\nfunction validateTrackEvent (event) {\n  assert(event.anonymousId || event.userId, 'You must pass either an \"anonymousId\" or a \"userId\".')\n  assert(event.event, 'You must pass an \"event\".')\n}\n\n/**\n * Validate a \"group\" event.\n */\n\nfunction validateGroupEvent (event) {\n  assert(event.anonymousId || event.userId, 'You must pass either an \"anonymousId\" or a \"userId\".')\n  assert(event.groupId, 'You must pass a \"groupId\".')\n}\n\n/**\n * Validate a \"identify\" event.\n */\n\nfunction validateIdentifyEvent (event) {\n  assert(event.anonymousId || event.userId, 'You must pass either an \"anonymousId\" or a \"userId\".')\n}\n\n/**\n * Validate a \"page\" event.\n */\n\nfunction validatePageEvent (event) {\n  assert(event.anonymousId || event.userId, 'You must pass either an \"anonymousId\" or a \"userId\".')\n}\n\n/**\n * Validate a \"screen\" event.\n */\n\nfunction validateScreenEvent (event) {\n  assert(event.anonymousId || event.userId, 'You must pass either an \"anonymousId\" or a \"userId\".')\n}\n\n/**\n * Validate an \"alias\" event.\n */\n\nfunction validateAliasEvent (event) {\n  assert(event.userId, 'You must pass a \"userId\".')\n  assert(event.previousId, 'You must pass a \"previousId\".')\n}\n\n/**\n * Validation rules.\n */\n\nvar genericValidationRules = {\n  anonymousId: [ 'string', 'number' ],\n  category: 'string',\n  context: 'object',\n  event: 'string',\n  groupId: [ 'string', 'number' ],\n  integrations: 'object',\n  name: 'string',\n  previousId: [ 'string', 'number' ],\n  timestamp: 'date',\n  userId: [ 'string', 'number' ],\n  type: 'string'\n}\n\n/**\n * Validate an event object.\n */\n\nfunction validateGenericEvent (event) {\n  assert(type(event) === 'object', 'You must pass a message object.')\n  var json = JSON.stringify(event)\n  // Strings are variable byte encoded, so json.length is not sufficient.\n  assert(Buffer.byteLength(json, 'utf8') < MAX_SIZE, 'Your message must be < 32kb.')\n\n  for (var key in genericValidationRules) {\n    var val = event[key]\n    if (!val) continue\n    var rule = genericValidationRules[key]\n    if (type(rule) !== 'array') {\n      rule = [ rule ]\n    }\n    var a = rule[0] === 'object' ? 'an' : 'a'\n    assert(\n      rule.some(function (e) { return type(val) === e }),\n      '\"' + key + '\" must be ' + a + ' ' + join(rule, 'or') + '.'\n    )\n  }\n}\n","module.exports = require('./lib/index').default;","module.exports = require('./lib/axios');","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.secp256k1 = exports.rlp = exports.BN = void 0;\nvar secp256k1 = require('./secp256k1v3-adapter');\nexports.secp256k1 = secp256k1;\nvar ethjsUtil = require('ethjs-util');\nvar BN = require(\"bn.js\");\nexports.BN = BN;\nvar rlp = require(\"rlp\");\nexports.rlp = rlp;\nObject.assign(exports, ethjsUtil);\n/**\n * Constants\n */\n__exportStar(require(\"./constants\"), exports);\n/**\n * Public-key cryptography (secp256k1) and addresses\n */\n__exportStar(require(\"./account\"), exports);\n/**\n * Hash functions\n */\n__exportStar(require(\"./hash\"), exports);\n/**\n * ECDSA signature\n */\n__exportStar(require(\"./signature\"), exports);\n/**\n * Utilities for manipulating Buffers, byte arrays, etc.\n */\n__exportStar(require(\"./bytes\"), exports);\n/**\n * Function for definining properties on an object\n */\n__exportStar(require(\"./object\"), exports);\n//# sourceMappingURL=index.js.map","var pbkdf2Sync = require('pbkdf2').pbkdf2Sync\n\nvar MAX_VALUE = 0x7fffffff\n\n// N = Cpu cost, r = Memory cost, p = parallelization cost\nfunction scrypt (key, salt, N, r, p, dkLen, progressCallback) {\n  if (N === 0 || (N & (N - 1)) !== 0) throw Error('N must be > 0 and a power of 2')\n\n  if (N > MAX_VALUE / 128 / r) throw Error('Parameter N is too large')\n  if (r > MAX_VALUE / 128 / p) throw Error('Parameter r is too large')\n\n  var XY = new Buffer(256 * r)\n  var V = new Buffer(128 * r * N)\n\n  // pseudo global\n  var B32 = new Int32Array(16) // salsa20_8\n  var x = new Int32Array(16) // salsa20_8\n  var _X = new Buffer(64) // blockmix_salsa8\n\n  // pseudo global\n  var B = pbkdf2Sync(key, salt, 1, p * 128 * r, 'sha256')\n\n  var tickCallback\n  if (progressCallback) {\n    var totalOps = p * N * 2\n    var currentOp = 0\n\n    tickCallback = function () {\n      ++currentOp\n\n      // send progress notifications once every 1,000 ops\n      if (currentOp % 1000 === 0) {\n        progressCallback({\n          current: currentOp,\n          total: totalOps,\n          percent: (currentOp / totalOps) * 100.0\n        })\n      }\n    }\n  }\n\n  for (var i = 0; i < p; i++) {\n    smix(B, i * 128 * r, r, N, V, XY)\n  }\n\n  return pbkdf2Sync(key, B, 1, dkLen, 'sha256')\n\n  // all of these functions are actually moved to the top\n  // due to function hoisting\n\n  function smix (B, Bi, r, N, V, XY) {\n    var Xi = 0\n    var Yi = 128 * r\n    var i\n\n    B.copy(XY, Xi, Bi, Bi + Yi)\n\n    for (i = 0; i < N; i++) {\n      XY.copy(V, i * Yi, Xi, Xi + Yi)\n      blockmix_salsa8(XY, Xi, Yi, r)\n\n      if (tickCallback) tickCallback()\n    }\n\n    for (i = 0; i < N; i++) {\n      var offset = Xi + (2 * r - 1) * 64\n      var j = XY.readUInt32LE(offset) & (N - 1)\n      blockxor(V, j * Yi, XY, Xi, Yi)\n      blockmix_salsa8(XY, Xi, Yi, r)\n\n      if (tickCallback) tickCallback()\n    }\n\n    XY.copy(B, Bi, Xi, Xi + Yi)\n  }\n\n  function blockmix_salsa8 (BY, Bi, Yi, r) {\n    var i\n\n    arraycopy(BY, Bi + (2 * r - 1) * 64, _X, 0, 64)\n\n    for (i = 0; i < 2 * r; i++) {\n      blockxor(BY, i * 64, _X, 0, 64)\n      salsa20_8(_X)\n      arraycopy(_X, 0, BY, Yi + (i * 64), 64)\n    }\n\n    for (i = 0; i < r; i++) {\n      arraycopy(BY, Yi + (i * 2) * 64, BY, Bi + (i * 64), 64)\n    }\n\n    for (i = 0; i < r; i++) {\n      arraycopy(BY, Yi + (i * 2 + 1) * 64, BY, Bi + (i + r) * 64, 64)\n    }\n  }\n\n  function R (a, b) {\n    return (a << b) | (a >>> (32 - b))\n  }\n\n  function salsa20_8 (B) {\n    var i\n\n    for (i = 0; i < 16; i++) {\n      B32[i] = (B[i * 4 + 0] & 0xff) << 0\n      B32[i] |= (B[i * 4 + 1] & 0xff) << 8\n      B32[i] |= (B[i * 4 + 2] & 0xff) << 16\n      B32[i] |= (B[i * 4 + 3] & 0xff) << 24\n      // B32[i] = B.readUInt32LE(i*4)   <--- this is signficantly slower even in Node.js\n    }\n\n    arraycopy(B32, 0, x, 0, 16)\n\n    for (i = 8; i > 0; i -= 2) {\n      x[ 4] ^= R(x[ 0] + x[12], 7)\n      x[ 8] ^= R(x[ 4] + x[ 0], 9)\n      x[12] ^= R(x[ 8] + x[ 4], 13)\n      x[ 0] ^= R(x[12] + x[ 8], 18)\n      x[ 9] ^= R(x[ 5] + x[ 1], 7)\n      x[13] ^= R(x[ 9] + x[ 5], 9)\n      x[ 1] ^= R(x[13] + x[ 9], 13)\n      x[ 5] ^= R(x[ 1] + x[13], 18)\n      x[14] ^= R(x[10] + x[ 6], 7)\n      x[ 2] ^= R(x[14] + x[10], 9)\n      x[ 6] ^= R(x[ 2] + x[14], 13)\n      x[10] ^= R(x[ 6] + x[ 2], 18)\n      x[ 3] ^= R(x[15] + x[11], 7)\n      x[ 7] ^= R(x[ 3] + x[15], 9)\n      x[11] ^= R(x[ 7] + x[ 3], 13)\n      x[15] ^= R(x[11] + x[ 7], 18)\n      x[ 1] ^= R(x[ 0] + x[ 3], 7)\n      x[ 2] ^= R(x[ 1] + x[ 0], 9)\n      x[ 3] ^= R(x[ 2] + x[ 1], 13)\n      x[ 0] ^= R(x[ 3] + x[ 2], 18)\n      x[ 6] ^= R(x[ 5] + x[ 4], 7)\n      x[ 7] ^= R(x[ 6] + x[ 5], 9)\n      x[ 4] ^= R(x[ 7] + x[ 6], 13)\n      x[ 5] ^= R(x[ 4] + x[ 7], 18)\n      x[11] ^= R(x[10] + x[ 9], 7)\n      x[ 8] ^= R(x[11] + x[10], 9)\n      x[ 9] ^= R(x[ 8] + x[11], 13)\n      x[10] ^= R(x[ 9] + x[ 8], 18)\n      x[12] ^= R(x[15] + x[14], 7)\n      x[13] ^= R(x[12] + x[15], 9)\n      x[14] ^= R(x[13] + x[12], 13)\n      x[15] ^= R(x[14] + x[13], 18)\n    }\n\n    for (i = 0; i < 16; ++i) B32[i] = x[i] + B32[i]\n\n    for (i = 0; i < 16; i++) {\n      var bi = i * 4\n      B[bi + 0] = (B32[i] >> 0 & 0xff)\n      B[bi + 1] = (B32[i] >> 8 & 0xff)\n      B[bi + 2] = (B32[i] >> 16 & 0xff)\n      B[bi + 3] = (B32[i] >> 24 & 0xff)\n      // B.writeInt32LE(B32[i], i*4)  //<--- this is signficantly slower even in Node.js\n    }\n  }\n\n  // naive approach... going back to loop unrolling may yield additional performance\n  function blockxor (S, Si, D, Di, len) {\n    for (var i = 0; i < len; i++) {\n      D[Di + i] ^= S[Si + i]\n    }\n  }\n}\n\nfunction arraycopy (src, srcPos, dest, destPos, length) {\n  if (Buffer.isBuffer(src) && Buffer.isBuffer(dest)) {\n    src.copy(dest, destPos, srcPos, srcPos + length)\n  } else {\n    while (length--) {\n      dest[destPos++] = src[srcPos++]\n    }\n  }\n}\n\nmodule.exports = scrypt\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","const createSwappableProxy = require('./createSwappableProxy')\nconst createEventEmitterProxy = require('./createEventEmitterProxy')\n\nmodule.exports = {\n  createSwappableProxy,\n  createEventEmitterProxy,\n}\n","import { createAsyncMiddleware, mergeMiddleware } from 'json-rpc-engine';\nimport {\n  createFetchMiddleware,\n  createBlockRefRewriteMiddleware,\n  createBlockCacheMiddleware,\n  createInflightCacheMiddleware,\n  createBlockTrackerInspectorMiddleware,\n  providerFromMiddleware,\n} from 'eth-json-rpc-middleware';\nimport { PollingBlockTracker } from 'eth-block-tracker';\nimport { SECOND } from '../../../../shared/constants/time';\n\nconst inTest = process.env.IN_TEST;\nconst blockTrackerOpts = inTest ? { pollingInterval: SECOND } : {};\nconst getTestMiddlewares = () => {\n  return inTest ? [createEstimateGasDelayTestMiddleware()] : [];\n};\n\nexport default function createJsonRpcClient({ rpcUrl, chainId }) {\n  const fetchMiddleware = createFetchMiddleware({ rpcUrl });\n  const blockProvider = providerFromMiddleware(fetchMiddleware);\n  const blockTracker = new PollingBlockTracker({\n    ...blockTrackerOpts,\n    provider: blockProvider,\n  });\n\n  const networkMiddleware = mergeMiddleware([\n    ...getTestMiddlewares(),\n    createChainIdMiddleware(chainId),\n    createBlockRefRewriteMiddleware({ blockTracker }),\n    createBlockCacheMiddleware({ blockTracker }),\n    createInflightCacheMiddleware(),\n    createBlockTrackerInspectorMiddleware({ blockTracker }),\n    fetchMiddleware,\n  ]);\n\n  return { networkMiddleware, blockTracker };\n}\n\nfunction createChainIdMiddleware(chainId) {\n  return (req, res, next, end) => {\n    if (req.method === 'eth_chainId') {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\n/**\n * For use in tests only.\n * Adds a delay to `eth_estimateGas` calls.\n */\nfunction createEstimateGasDelayTestMiddleware() {\n  return createAsyncMiddleware(async (req, _, next) => {\n    if (req.method === 'eth_estimateGas') {\n      await new Promise((resolve) => setTimeout(resolve, SECOND * 2));\n    }\n    return next();\n  });\n}\n","import { createScaffoldMiddleware, mergeMiddleware } from 'json-rpc-engine';\nimport {\n  createBlockRefMiddleware,\n  createRetryOnEmptyMiddleware,\n  createBlockCacheMiddleware,\n  createInflightCacheMiddleware,\n  createBlockTrackerInspectorMiddleware,\n  providerFromMiddleware,\n} from 'eth-json-rpc-middleware';\n\nimport createInfuraMiddleware from 'eth-json-rpc-infura';\nimport { PollingBlockTracker } from 'eth-block-tracker';\n\nimport { NETWORK_TYPE_TO_ID_MAP } from '../../../../shared/constants/network';\n\nexport default function createInfuraClient({ network, projectId }) {\n  const infuraMiddleware = createInfuraMiddleware({\n    network,\n    projectId,\n    maxAttempts: 5,\n    source: 'metamask',\n  });\n  const infuraProvider = providerFromMiddleware(infuraMiddleware);\n  const blockTracker = new PollingBlockTracker({ provider: infuraProvider });\n\n  const networkMiddleware = mergeMiddleware([\n    createNetworkAndChainIdMiddleware({ network }),\n    createBlockCacheMiddleware({ blockTracker }),\n    createInflightCacheMiddleware(),\n    createBlockRefMiddleware({ blockTracker, provider: infuraProvider }),\n    createRetryOnEmptyMiddleware({ blockTracker, provider: infuraProvider }),\n    createBlockTrackerInspectorMiddleware({ blockTracker }),\n    infuraMiddleware,\n  ]);\n  return { networkMiddleware, blockTracker };\n}\n\nfunction createNetworkAndChainIdMiddleware({ network }) {\n  if (!NETWORK_TYPE_TO_ID_MAP[network]) {\n    throw new Error(`createInfuraClient - unknown network \"${network}\"`);\n  }\n\n  const { chainId, networkId } = NETWORK_TYPE_TO_ID_MAP[network];\n\n  return createScaffoldMiddleware({\n    eth_chainId: chainId,\n    net_version: networkId,\n  });\n}\n","var base58 = require('bs58')\nvar createHash = require('create-hash')\n\nfunction encode (payload, version) {\n  if (Array.isArray(payload) || payload instanceof Uint8Array) {\n    payload = new Buffer(payload)\n  }\n\n  var buf\n  if (version != null) {\n    if (typeof version === 'number') {\n      version = new Buffer([version])\n    }\n    buf = Buffer.concat([version, payload])\n  } else {\n    buf = payload\n  }\n\n  var checksum = sha256x2(buf).slice(0, 4)\n  var result = Buffer.concat([buf, checksum])\n  return base58.encode(result)\n}\n\nfunction decode (base58str, version) {\n  var arr = base58.decode(base58str)\n  var buf = new Buffer(arr)\n  var versionLength\n\n  if (version == null) {\n    versionLength = 0\n  } else {\n    if (typeof version === 'number') version = new Buffer([version])\n\n    versionLength = version.length\n    var versionCompare = buf.slice(0, versionLength)\n    if (versionCompare.toString('hex') !== version.toString('hex')) {\n      throw new Error('Invalid version')\n    }\n  }\n\n  var checksum = buf.slice(-4)\n  var endPos = buf.length - 4\n  var bytes = buf.slice(0, endPos)\n\n  var newChecksum = sha256x2(bytes).slice(0, 4)\n  if (checksum.toString('hex') !== newChecksum.toString('hex')) {\n    throw new Error('Invalid checksum')\n  }\n\n  return bytes.slice(versionLength)\n}\n\nfunction isValid (base58str, version) {\n  try {\n    decode(base58str, version)\n  } catch (e) {\n    return false\n  }\n\n  return true\n}\n\nfunction createEncoder (version) {\n  return function (payload) {\n    return encode(payload, version)\n  }\n}\n\nfunction createDecoder (version) {\n  return function (base58str) {\n    return decode(base58str, version)\n  }\n}\n\nfunction createValidator (version) {\n  return function (base58str) {\n    return isValid(base58str, version)\n  }\n}\n\nfunction sha256x2 (buffer) {\n  var sha = createHash('sha256').update(buffer).digest()\n  return createHash('sha256').update(sha).digest()\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  isValid: isValid,\n  createEncoder: createEncoder,\n  createDecoder: createDecoder,\n  createValidator: createValidator\n}\n","'use strict'\nmodule.exports = require('./lib')(require('./lib/elliptic'))\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar createKeccakHash = require('keccak');\nvar secp256k1 = require('secp256k1');\nvar assert = require('assert');\nvar rlp = require('rlp');\nvar BN = require('bn.js');\nvar createHash = require('create-hash');\nvar Buffer = require('safe-buffer').Buffer;\nObject.assign(exports, require('ethjs-util'));\n\n/**\n * the max integer that this VM can handle (a ```BN```)\n * @var {BN} MAX_INTEGER\n */\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);\n\n/**\n * 2^256 (a ```BN```)\n * @var {BN} TWO_POW256\n */\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);\n\n/**\n * Keccak-256 hash of null (a ```String```)\n * @var {String} KECCAK256_NULL_S\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\nexports.SHA3_NULL_S = exports.KECCAK256_NULL_S;\n\n/**\n * Keccak-256 hash of null (a ```Buffer```)\n * @var {Buffer} KECCAK256_NULL\n */\nexports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');\nexports.SHA3_NULL = exports.KECCAK256_NULL;\n\n/**\n * Keccak-256 of an RLP of an empty array (a ```String```)\n * @var {String} KECCAK256_RLP_ARRAY_S\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\nexports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;\n\n/**\n * Keccak-256 of an RLP of an empty array (a ```Buffer```)\n * @var {Buffer} KECCAK256_RLP_ARRAY\n */\nexports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\nexports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;\n\n/**\n * Keccak-256 hash of the RLP of null  (a ```String```)\n * @var {String} KECCAK256_RLP_S\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\nexports.SHA3_RLP_S = exports.KECCAK256_RLP_S;\n\n/**\n * Keccak-256 hash of the RLP of null (a ```Buffer```)\n * @var {Buffer} KECCAK256_RLP\n */\nexports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');\nexports.SHA3_RLP = exports.KECCAK256_RLP;\n\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n * @var {Function}\n */\nexports.BN = BN;\n\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n * @var {Function}\n */\nexports.rlp = rlp;\n\n/**\n * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)\n * @var {Object}\n */\nexports.secp256k1 = secp256k1;\n\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\n/**\n  * Returns a zero address\n  * @method zeroAddress\n  * @return {String}\n  */\nexports.zeroAddress = function () {\n  var addressLength = 20;\n  var zeroAddress = exports.zeros(addressLength);\n  return exports.bufferToHex(zeroAddress);\n};\n\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\nexports.setLengthLeft = exports.setLength = function (msg, length, right) {\n  var buf = exports.zeros(length);\n  msg = exports.toBuffer(msg);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true);\n};\n\n/**\n * Trims leading zeros from a `Buffer` or an `Array`\n * @param {Buffer|Array|String} a\n * @return {Buffer|Array|String}\n */\nexports.unpad = exports.stripZeros = function (a) {\n  a = exports.stripHexPrefix(a);\n  var first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param {*} v the value\n */\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (exports.isHexString(v)) {\n        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');\n      } else {\n        v = Buffer.from(v);\n      }\n    } else if (typeof v === 'number') {\n      v = exports.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n  return v;\n};\n\n/**\n * Converts a `Buffer` to a `Number`\n * @param {Buffer} buf\n * @return {Number}\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n  return new BN(exports.toBuffer(buf)).toNumber();\n};\n\n/**\n * Converts a `Buffer` into a hex `String`\n * @param {Buffer} buf\n * @return {String}\n */\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n  return '0x' + buf.toString('hex');\n};\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param {Buffer} num\n * @return {BN}\n */\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256);\n};\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param {BN} num\n * @return {Buffer}\n */\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n\n/**\n * Creates Keccak hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the Keccak width\n * @return {Buffer}\n */\nexports.keccak = function (a, bits) {\n  a = exports.toBuffer(a);\n  if (!bits) bits = 256;\n\n  return createKeccakHash('keccak' + bits).update(a).digest();\n};\n\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256)\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n\n/**\n * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the SHA-3 width\n * @return {Buffer}\n */\nexports.sha3 = exports.keccak;\n\n/**\n * Creates SHA256 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.sha256 = function (a) {\n  a = exports.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n\n/**\n * Creates RIPEMD160 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Boolean} padded whether it should be padded to 256 bits or not\n * @return {Buffer}\n */\nexports.ripemd160 = function (a, padded) {\n  a = exports.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return exports.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n * @param {Buffer} privateKey\n * @return {Boolean}\n */\nexports.isValidPrivate = function (privateKey) {\n  return secp256k1.privateKeyVerify(privateKey);\n};\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Boolean}\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n\n  if (!sanitize) {\n    return false;\n  }\n\n  return secp256k1.publicKeyVerify(publicKey);\n};\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Buffer}\n */\nexports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {\n  pubKey = exports.toBuffer(pubKey);\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);\n  }\n  assert(pubKey.length === 64);\n  // Only take the lower 160bits of the hash\n  return exports.keccak(pubKey).slice(-20);\n};\n\n/**\n * Returns the ethereum public key of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nvar privateToPublic = exports.privateToPublic = function (privateKey) {\n  privateKey = exports.toBuffer(privateKey);\n  // skip the type flag and use the X, Y points\n  return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n};\n\n/**\n * Converts a public key to the Ethereum format.\n * @param {Buffer} publicKey\n * @return {Buffer}\n */\nexports.importPublic = function (publicKey) {\n  publicKey = exports.toBuffer(publicKey);\n  if (publicKey.length !== 64) {\n    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);\n  }\n  return publicKey;\n};\n\n/**\n * ECDSA sign\n * @param {Buffer} msgHash\n * @param {Buffer} privateKey\n * @return {Object}\n */\nexports.ecsign = function (msgHash, privateKey) {\n  var sig = secp256k1.sign(msgHash, privateKey);\n\n  var ret = {};\n  ret.r = sig.signature.slice(0, 32);\n  ret.s = sig.signature.slice(32, 64);\n  ret.v = sig.recovery + 27;\n  return ret;\n};\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n * @param message\n * @returns {Buffer} hash\n */\nexports.hashPersonalMessage = function (message) {\n  var prefix = exports.toBuffer('\\x19Ethereum Signed Message:\\n' + message.length.toString());\n  return exports.keccak(Buffer.concat([prefix, message]));\n};\n\n/**\n * ECDSA public key recovery from signature\n * @param {Buffer} msgHash\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {Buffer} publicKey\n */\nexports.ecrecover = function (msgHash, v, r, s) {\n  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);\n  var recovery = v - 27;\n  if (recovery !== 0 && recovery !== 1) {\n    throw new Error('Invalid signature v value');\n  }\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {String} sig\n */\nexports.toRpcSig = function (v, r, s) {\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (v !== 27 && v !== 28) {\n    throw new Error('Invalid recovery id');\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053\n  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));\n};\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * @param {String} sig\n * @return {Object}\n */\nexports.fromRpcSig = function (sig) {\n  sig = exports.toBuffer(sig);\n\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (sig.length !== 65) {\n    throw new Error('Invalid signature length');\n  }\n\n  var v = sig[64];\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64)\n  };\n};\n\n/**\n * Returns the ethereum address of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(privateToPublic(privateKey));\n};\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too\n * @param {String} address\n * @return {Boolean}\n */\nexports.isValidAddress = function (address) {\n  return (/^0x[0-9a-fA-F]{40}$/.test(address)\n  );\n};\n\n/**\n  * Checks if a given address is a zero address\n  * @method isZeroAddress\n  * @param {String} address\n  * @return {Boolean}\n  */\nexports.isZeroAddress = function (address) {\n  var zeroAddress = exports.zeroAddress();\n  return zeroAddress === exports.addHexPrefix(address);\n};\n\n/**\n * Returns a checksummed address\n * @param {String} address\n * @return {String}\n */\nexports.toChecksumAddress = function (address) {\n  address = exports.stripHexPrefix(address).toLowerCase();\n  var hash = exports.keccak(address).toString('hex');\n  var ret = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Checks if the address is a valid checksummed address\n * @param {Buffer} address\n * @return {Boolean}\n */\nexports.isValidChecksumAddress = function (address) {\n  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;\n};\n\n/**\n * Generates an address of a newly created contract\n * @param {Buffer} from the address which is creating this new address\n * @param {Buffer} nonce the nonce of the from account\n * @return {Buffer}\n */\nexports.generateAddress = function (from, nonce) {\n  from = exports.toBuffer(from);\n  nonce = new BN(nonce);\n\n  if (nonce.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    nonce = null;\n  } else {\n    nonce = Buffer.from(nonce.toArray());\n  }\n\n  // Only take the lower 160bits of the hash\n  return exports.rlphash([from, nonce]).slice(-20);\n};\n\n/**\n * Returns true if the supplied address belongs to a precompiled account (Byzantium)\n * @param {Buffer|String} address\n * @return {Boolean}\n */\nexports.isPrecompiled = function (address) {\n  var a = exports.unpad(address);\n  return a.length === 1 && a[0] >= 1 && a[0] <= 8;\n};\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\"\n * @param {String} str\n * @return {String}\n */\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return exports.isHexPrefixed(str) ? str : '0x' + str;\n};\n\n/**\n * Validate ECDSA signature\n * @method isValidSignature\n * @param {Buffer} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @param {Boolean} [homestead=true]\n * @return {Boolean}\n */\n\nexports.isValidSignature = function (v, r, s, homestead) {\n  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (v !== 27 && v !== 28) {\n    return false;\n  }\n\n  r = new BN(r);\n  s = new BN(s);\n\n  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Converts a `Buffer` or `Array` to JSON\n * @param {Buffer|Array} ba\n * @return {Array|String|null}\n */\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return '0x' + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n    return array;\n  }\n};\n\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param {Object} self the `Object` to define properties on\n * @param {Array} fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param {*} data data to be validated against the definitions\n */\nexports.defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = [];\n\n  // attach the `toJSON`\n  self.toJSON = function (label) {\n    if (label) {\n      var obj = {};\n      self._fields.forEach(function (field) {\n        obj[field] = '0x' + self[field].toString('hex');\n      });\n      return obj;\n    }\n    return exports.baToJSON(this.raw);\n  };\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n    function getter() {\n      return self.raw[i];\n    }\n    function setter(v) {\n      v = exports.toBuffer(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = exports.stripZeros(v);\n        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    }\n\n    // attach alias\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  });\n\n  // if the constuctor is passed data\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(exports.stripHexPrefix(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      }\n\n      // make sure all the items are buffers\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = exports.toBuffer(d);\n      });\n    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n      var keys = Object.keys(data);\n      fields.forEach(function (field) {\n        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cacheTypeForPayload = exports.blockTagParamIndex = exports.paramsWithoutBlockTag = exports.blockTagForPayload = exports.canCache = exports.cacheIdentifierForPayload = void 0;\nconst json_stable_stringify_1 = __importDefault(require(\"json-stable-stringify\"));\nfunction cacheIdentifierForPayload(payload, skipBlockRef) {\n    var _a;\n    const simpleParams = skipBlockRef\n        ? paramsWithoutBlockTag(payload)\n        : (_a = payload.params) !== null && _a !== void 0 ? _a : [];\n    if (canCache(payload)) {\n        return `${payload.method}:${(0, json_stable_stringify_1.default)(simpleParams)}`;\n    }\n    return null;\n}\nexports.cacheIdentifierForPayload = cacheIdentifierForPayload;\nfunction canCache(payload) {\n    return cacheTypeForPayload(payload) !== 'never';\n}\nexports.canCache = canCache;\nfunction blockTagForPayload(payload) {\n    if (!payload.params) {\n        return undefined;\n    }\n    const index = blockTagParamIndex(payload);\n    // Block tag param not passed.\n    if (index === undefined || index >= payload.params.length) {\n        return undefined;\n    }\n    return payload.params[index];\n}\nexports.blockTagForPayload = blockTagForPayload;\nfunction paramsWithoutBlockTag(payload) {\n    if (!payload.params) {\n        return [];\n    }\n    const index = blockTagParamIndex(payload);\n    // Block tag param not passed.\n    if (index === undefined || index >= payload.params.length) {\n        return payload.params;\n    }\n    // eth_getBlockByNumber has the block tag first, then the optional includeTx? param\n    if (payload.method === 'eth_getBlockByNumber') {\n        return payload.params.slice(1);\n    }\n    return payload.params.slice(0, index);\n}\nexports.paramsWithoutBlockTag = paramsWithoutBlockTag;\nfunction blockTagParamIndex(payload) {\n    switch (payload.method) {\n        // blockTag is at index 2\n        case 'eth_getStorageAt':\n            return 2;\n        // blockTag is at index 1\n        case 'eth_getBalance':\n        case 'eth_getCode':\n        case 'eth_getTransactionCount':\n        case 'eth_call':\n            return 1;\n        // blockTag is at index 0\n        case 'eth_getBlockByNumber':\n            return 0;\n        // there is no blockTag\n        default:\n            return undefined;\n    }\n}\nexports.blockTagParamIndex = blockTagParamIndex;\nfunction cacheTypeForPayload(payload) {\n    switch (payload.method) {\n        // cache permanently\n        case 'web3_clientVersion':\n        case 'web3_sha3':\n        case 'eth_protocolVersion':\n        case 'eth_getBlockTransactionCountByHash':\n        case 'eth_getUncleCountByBlockHash':\n        case 'eth_getCode':\n        case 'eth_getBlockByHash':\n        case 'eth_getTransactionByHash':\n        case 'eth_getTransactionByBlockHashAndIndex':\n        case 'eth_getTransactionReceipt':\n        case 'eth_getUncleByBlockHashAndIndex':\n        case 'eth_getCompilers':\n        case 'eth_compileLLL':\n        case 'eth_compileSolidity':\n        case 'eth_compileSerpent':\n        case 'shh_version':\n        case 'test_permaCache':\n            return 'perma';\n        // cache until fork\n        case 'eth_getBlockByNumber':\n        case 'eth_getBlockTransactionCountByNumber':\n        case 'eth_getUncleCountByBlockNumber':\n        case 'eth_getTransactionByBlockNumberAndIndex':\n        case 'eth_getUncleByBlockNumberAndIndex':\n        case 'test_forkCache':\n            return 'fork';\n        // cache for block\n        case 'eth_gasPrice':\n        case 'eth_blockNumber':\n        case 'eth_getBalance':\n        case 'eth_getStorageAt':\n        case 'eth_getTransactionCount':\n        case 'eth_call':\n        case 'eth_estimateGas':\n        case 'eth_getFilterLogs':\n        case 'eth_getLogs':\n        case 'test_blockCache':\n            return 'block';\n        // never cache\n        default:\n            return 'never';\n    }\n}\nexports.cacheTypeForPayload = cacheTypeForPayload;\n//# sourceMappingURL=cache.js.map","'use strict';\n\nconst processFn = (fn, opts) => function () {\n\tconst P = opts.promiseModule;\n\tconst args = new Array(arguments.length);\n\n\tfor (let i = 0; i < arguments.length; i++) {\n\t\targs[i] = arguments[i];\n\t}\n\n\treturn new P((resolve, reject) => {\n\t\tif (opts.errorFirst) {\n\t\t\targs.push(function (err, result) {\n\t\t\t\tif (opts.multiArgs) {\n\t\t\t\t\tconst results = new Array(arguments.length - 1);\n\n\t\t\t\t\tfor (let i = 1; i < arguments.length; i++) {\n\t\t\t\t\t\tresults[i - 1] = arguments[i];\n\t\t\t\t\t}\n\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tresults.unshift(err);\n\t\t\t\t\t\treject(results);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(results);\n\t\t\t\t\t}\n\t\t\t\t} else if (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\targs.push(function (result) {\n\t\t\t\tif (opts.multiArgs) {\n\t\t\t\t\tconst results = new Array(arguments.length - 1);\n\n\t\t\t\t\tfor (let i = 0; i < arguments.length; i++) {\n\t\t\t\t\t\tresults[i] = arguments[i];\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve(results);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfn.apply(this, args);\n\t});\n};\n\nmodule.exports = (obj, opts) => {\n\topts = Object.assign({\n\t\texclude: [/.+(Sync|Stream)$/],\n\t\terrorFirst: true,\n\t\tpromiseModule: Promise\n\t}, opts);\n\n\tconst filter = key => {\n\t\tconst match = pattern => typeof pattern === 'string' ? key === pattern : pattern.test(key);\n\t\treturn opts.include ? opts.include.some(match) : !opts.exclude.some(match);\n\t};\n\n\tlet ret;\n\tif (typeof obj === 'function') {\n\t\tret = function () {\n\t\t\tif (opts.excludeMain) {\n\t\t\t\treturn obj.apply(this, arguments);\n\t\t\t}\n\n\t\t\treturn processFn(obj, opts).apply(this, arguments);\n\t\t};\n\t} else {\n\t\tret = Object.create(Object.getPrototypeOf(obj));\n\t}\n\n\tfor (const key in obj) { // eslint-disable-line guard-for-in\n\t\tconst x = obj[key];\n\t\tret[key] = typeof x === 'function' && filter(key) ? processFn(x, opts) : x;\n\t}\n\n\treturn ret;\n};\n","const ethUtil = require('ethereumjs-util')\nconst ethAbi = require('ethereumjs-abi')\n\nmodule.exports = {\n\n  concatSig: function (v, r, s) {\n    const rSig = ethUtil.fromSigned(r)\n    const sSig = ethUtil.fromSigned(s)\n    const vSig = ethUtil.bufferToInt(v)\n    const rStr = padWithZeroes(ethUtil.toUnsigned(rSig).toString('hex'), 64)\n    const sStr = padWithZeroes(ethUtil.toUnsigned(sSig).toString('hex'), 64)\n    const vStr = ethUtil.stripHexPrefix(ethUtil.intToHex(vSig))\n    return ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex')\n  },\n\n  normalize: function (input) {\n    if (!input) return\n\n    if (typeof input === 'number') {\n      const buffer = ethUtil.toBuffer(input)\n      input = ethUtil.bufferToHex(buffer)\n    }\n\n    if (typeof input !== 'string') {\n      var msg = 'eth-sig-util.normalize() requires hex string or integer input.'\n      msg += ' received ' + (typeof input) + ': ' + input\n      throw new Error(msg)\n    }\n\n    return ethUtil.addHexPrefix(input.toLowerCase())\n  },\n\n  personalSign: function (privateKey, msgParams) {\n    var message = ethUtil.toBuffer(msgParams.data)\n    var msgHash = ethUtil.hashPersonalMessage(message)\n    var sig = ethUtil.ecsign(msgHash, privateKey)\n    var serialized = ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n    return serialized\n  },\n\n  recoverPersonalSignature: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    const sender = ethUtil.publicToAddress(publicKey)\n    const senderHex = ethUtil.bufferToHex(sender)\n    return senderHex\n  },\n\n  extractPublicKey: function (msgParams) {\n    const publicKey = getPublicKeyFor(msgParams)\n    return '0x' + publicKey.toString('hex')\n  },\n\n  typedSignatureHash: function (typedData) {\n    const hashBuffer = typedSignatureHash(typedData)\n    return ethUtil.bufferToHex(hashBuffer)\n  },\n\n  signTypedData: function (privateKey, msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const sig = ethUtil.ecsign(msgHash, privateKey)\n    return ethUtil.bufferToHex(this.concatSig(sig.v, sig.r, sig.s))\n  },\n\n  recoverTypedSignature: function (msgParams) {\n    const msgHash = typedSignatureHash(msgParams.data)\n    const publicKey = recoverPublicKey(msgHash, msgParams.sig)\n    const sender = ethUtil.publicToAddress(publicKey)\n    return ethUtil.bufferToHex(sender)\n  }\n\n}\n\n/**\n * @param typedData - Array of data along with types, as per EIP712.\n * @returns Buffer\n */\nfunction typedSignatureHash(typedData) {\n  const error = new Error('Expect argument to be non-empty array')\n  if (typeof typedData !== 'object' || !typedData.length) throw error\n\n  const data = typedData.map(function (e) {\n    return e.type === 'bytes' ? ethUtil.toBuffer(e.value) : e.value\n  })\n  const types = typedData.map(function (e) { return e.type })\n  const schema = typedData.map(function (e) {\n    if (!e.name) throw error\n    return e.type + ' ' + e.name\n  })\n\n  return ethAbi.soliditySHA3(\n    ['bytes32', 'bytes32'],\n    [\n      ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n      ethAbi.soliditySHA3(types, data)\n    ]\n  )\n}\n\nfunction recoverPublicKey(hash, sig) {\n  const signature = ethUtil.toBuffer(sig)\n  const sigParams = ethUtil.fromRpcSig(signature)\n  return ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s)\n}\n\nfunction getPublicKeyFor (msgParams) {\n  const message = ethUtil.toBuffer(msgParams.data)\n  const msgHash = ethUtil.hashPersonalMessage(message)\n  return recoverPublicKey(msgHash, msgParams.sig)\n}\n\n\nfunction padWithZeroes (number, length) {\n  var myString = '' + number\n  while (myString.length < length) {\n    myString = '0' + myString\n  }\n  return myString\n}\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ETH_ABI_LATTICE_FW_TYPE_MAP = exports.MAX_CHAIN_ID_BYTES = exports.HANDLE_LARGER_CHAIN_ID = exports.HARDENED_OFFSET = exports.VERSION_BYTE = exports.REQUEST_TYPE_BYTE = exports.signingSchema = exports.responseMsgs = exports.responseCodes = exports.messageConstants = exports.ethMsgProtocol = exports.encReqCodes = exports.deviceCodes = exports.decResLengths = exports.addressSizes = exports.ENC_MSG_LEN = exports.BASE_URL = exports.BIP_CONSTANTS = exports.AES_IV = exports.ADDR_STR_LEN = exports.getFwVersionConst = exports.ASCII_REGEX = exports.EXTERNAL = void 0;\n// Consistent with Lattice's IV\nvar AES_IV = [\n    0x6d, 0x79, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77,\n    0x6f, 0x72, 0x64,\n];\nexports.AES_IV = AES_IV;\nvar ADDR_STR_LEN = 129; // 128-char strings (null terminated)\nexports.ADDR_STR_LEN = ADDR_STR_LEN;\n// Decrypted response lengths will be fixed for any given message type.\n// These are defined in the Lattice spec.\n// Every decrypted response should have a 65-byte pubkey prefixing it (and a 4-byte request ID)\n// These are NOT counted in `decResLengths`, meaning these values are 69-bytes smaller than the\n// corresponding structs in firmware.\nvar decResLengths = {\n    empty: 0,\n    getAddresses: 10 * ADDR_STR_LEN,\n    sign: 1090,\n    getWallets: 142,\n    addAbiDefs: 8,\n    getKvRecords: 1395,\n    getAbiRecords: 1215,\n    removeAbiRecords: 1,\n    test: 1646, // Max size of test response payload\n};\nexports.decResLengths = decResLengths;\n// Every corresponding decrypted response struct in firmware has a pubkey\n// and checksum added. These are not included in `decResLengths`\nvar DES_RES_EXTRADATA_LEN = 69;\n// Encrypted responses also have metadata\n// Prefix:\n// * protocol version (1 byte)\n// * response type, reserved (1 byte) -- not used\n// * response id (4 bytes) -- not used\n// * payload length (2 bytes)\n// * response code (1 byte)\n// Suffix:\n// * checksum (4 bytes) -- NOT the same checksum as inside the decrypted msg\nvar ENC_MSG_METADATA_LEN = 13;\nvar ENC_MSG_EXTRA_LEN = DES_RES_EXTRADATA_LEN + ENC_MSG_METADATA_LEN;\n// Per Lattice spec, all encrypted messages must fit in a buffer of this size.\n// The length comes from the largest request/response data type size\n// We also add the prefix length\nvar ENC_MSG_LEN = 0;\nexports.ENC_MSG_LEN = ENC_MSG_LEN;\nObject.keys(decResLengths).forEach(function (k) {\n    if (decResLengths[k] + ENC_MSG_EXTRA_LEN > ENC_MSG_LEN)\n        exports.ENC_MSG_LEN = ENC_MSG_LEN = decResLengths[k] + ENC_MSG_EXTRA_LEN;\n});\nvar deviceCodes = {\n    CONNECT: 1,\n    ENCRYPTED_REQUEST: 2,\n};\nexports.deviceCodes = deviceCodes;\nvar encReqCodes = {\n    FINALIZE_PAIRING: 0,\n    GET_ADDRESSES: 1,\n    ADD_PERMISSION: 2,\n    SIGN_TRANSACTION: 3,\n    GET_WALLETS: 4,\n    ADD_PERMISSION_V0: 5,\n    ADD_ABI_DEFS: 6,\n    GET_KV_RECORDS: 7,\n    ADD_KV_RECORDS: 8,\n    REMOVE_KV_RECORDS: 9,\n    GET_ABI_RECORDS: 10,\n    REMOVE_ABI_RECORDS: 11,\n    TEST: 12,\n};\nexports.encReqCodes = encReqCodes;\nvar messageConstants = {\n    NOT_PAIRED: 0x00,\n    PAIRED: 0x01,\n};\nexports.messageConstants = messageConstants;\nvar addressSizes = {\n    BTC: 20,\n    ETH: 20, // 20 byte address not including 0x prefix\n};\nexports.addressSizes = addressSizes;\nvar responseCodes = {\n    RESP_SUCCESS: 0x00,\n    RESP_ERR_INVALID_MSG: 0x80,\n    RESP_ERR_UNSUPPORTED_VER: 0x81,\n    RESP_ERR_DEV_BUSY: 0x82,\n    RESP_ERR_USER_TIMEOUT: 0x83,\n    RESP_ERR_USER_DECLINED: 0x84,\n    RESP_ERR_PAIR_FAIL: 0x85,\n    RESP_ERR_PAIR_DISABLED: 0x86,\n    RESP_ERR_PERMISSION_DISABLED: 0x87,\n    RESP_ERR_INTERNAL: 0x88,\n    RESP_ERR_GCE_TIMEOUT: 0x89,\n    RESP_ERR_WRONG_WALLET: 0x8a,\n    RESP_ERR_DEV_LOCKED: 0x8b,\n    RESP_ERR_DISABLED: 0x8c,\n    RESP_ERR_ALREADY: 0x8d,\n    RESP_ERR_INVALID_EPHEM_ID: 0x8e,\n};\nexports.responseCodes = responseCodes;\nvar responseMsgs = (_a = {},\n    _a[responseCodes.RESP_SUCCESS] = 0x00,\n    _a[responseCodes.RESP_ERR_INVALID_MSG] = 'Invalid request',\n    _a[responseCodes.RESP_ERR_UNSUPPORTED_VER] = 'Unsupported version',\n    _a[responseCodes.RESP_ERR_DEV_BUSY] = 'Device busy',\n    _a[responseCodes.RESP_ERR_USER_TIMEOUT] = 'Timeout waiting for user',\n    _a[responseCodes.RESP_ERR_USER_DECLINED] = 'Request declined by user',\n    _a[responseCodes.RESP_ERR_PAIR_FAIL] = 'Pairing failed',\n    _a[responseCodes.RESP_ERR_PAIR_DISABLED] = 'Pairing is currently disabled',\n    _a[responseCodes.RESP_ERR_PERMISSION_DISABLED] = 'Automated signing is currently disabled',\n    _a[responseCodes.RESP_ERR_INTERNAL] = 'Device error',\n    _a[responseCodes.RESP_ERR_GCE_TIMEOUT] = 'Timeout',\n    _a[responseCodes.RESP_ERR_WRONG_WALLET] = 'Active wallet does not match request',\n    _a[responseCodes.RESP_ERR_DEV_LOCKED] = 'Device locked',\n    _a[responseCodes.RESP_ERR_DISABLED] = 'Disabled',\n    _a[responseCodes.RESP_ERR_ALREADY] = 'Record already exists. You must first remove it on your device.',\n    _a[responseCodes.RESP_ERR_INVALID_EPHEM_ID] = 'Could not find requester. Please reconnect.',\n    _a);\nexports.responseMsgs = responseMsgs;\nvar signingSchema = {\n    BTC_TRANSFER: 0,\n    ETH_TRANSFER: 1,\n    ERC20_TRANSFER: 2,\n    ETH_MSG: 3,\n    EXTRA_DATA: 4,\n    GENERAL_SIGNING: 5,\n};\nexports.signingSchema = signingSchema;\nvar HARDENED_OFFSET = 0x80000000; // Hardened offset\nexports.HARDENED_OFFSET = HARDENED_OFFSET;\nvar BIP_CONSTANTS = {\n    PURPOSES: {\n        ETH: HARDENED_OFFSET + 44,\n        BTC_LEGACY: HARDENED_OFFSET + 44,\n        BTC_WRAPPED_SEGWIT: HARDENED_OFFSET + 49,\n        BTC_SEGWIT: HARDENED_OFFSET + 84,\n    },\n    COINS: {\n        ETH: HARDENED_OFFSET + 60,\n        BTC: HARDENED_OFFSET,\n        BTC_TESTNET: HARDENED_OFFSET + 1,\n    },\n};\nexports.BIP_CONSTANTS = BIP_CONSTANTS;\nvar REQUEST_TYPE_BYTE = 0x02; // For all HSM-bound requests\nexports.REQUEST_TYPE_BYTE = REQUEST_TYPE_BYTE;\nvar VERSION_BYTE = 1;\nexports.VERSION_BYTE = VERSION_BYTE;\nvar HANDLE_LARGER_CHAIN_ID = 255; // ChainId value to signify larger chainID is in data buffer\nexports.HANDLE_LARGER_CHAIN_ID = HANDLE_LARGER_CHAIN_ID;\nvar MAX_CHAIN_ID_BYTES = 8; // Max number of bytes to contain larger chainID in data buffer\nexports.MAX_CHAIN_ID_BYTES = MAX_CHAIN_ID_BYTES;\nvar BASE_URL = 'https://signing.gridpl.us';\nexports.BASE_URL = BASE_URL;\nvar EIP712_ABI_LATTICE_FW_TYPE_MAP = {\n    address: 1,\n    bool: 2,\n    uint8: 3,\n    uint16: 4,\n    uint24: 5,\n    uint32: 6,\n    uint40: 7,\n    uint48: 8,\n    uint56: 9,\n    uint64: 10,\n    uint72: 11,\n    uint80: 12,\n    uint88: 13,\n    uint96: 14,\n    uint104: 15,\n    uint112: 16,\n    uint120: 17,\n    uint128: 18,\n    uint136: 19,\n    uint144: 20,\n    uint152: 21,\n    uint160: 22,\n    uint168: 23,\n    uint176: 24,\n    uint184: 25,\n    uint192: 26,\n    uint200: 27,\n    uint208: 28,\n    uint216: 29,\n    uint224: 30,\n    uint232: 31,\n    uint240: 32,\n    uint248: 33,\n    uint256: 34,\n    int8: 35,\n    int16: 36,\n    int24: 37,\n    int32: 38,\n    int40: 39,\n    int48: 40,\n    int56: 41,\n    int64: 42,\n    int72: 43,\n    int80: 44,\n    int88: 45,\n    int96: 46,\n    int104: 47,\n    int112: 48,\n    int120: 49,\n    int128: 50,\n    int136: 51,\n    int144: 52,\n    int152: 53,\n    int160: 54,\n    int168: 55,\n    int176: 56,\n    int184: 57,\n    int192: 58,\n    int200: 59,\n    int208: 60,\n    int216: 61,\n    int224: 62,\n    int232: 63,\n    int240: 64,\n    int248: 65,\n    int256: 66,\n    uint: 67,\n    bytes1: 69,\n    bytes2: 70,\n    bytes3: 71,\n    bytes4: 72,\n    bytes5: 73,\n    bytes6: 74,\n    bytes7: 75,\n    bytes8: 76,\n    bytes9: 77,\n    bytes10: 78,\n    bytes11: 79,\n    bytes12: 80,\n    bytes13: 81,\n    bytes14: 82,\n    bytes15: 83,\n    bytes16: 84,\n    bytes17: 85,\n    bytes18: 86,\n    bytes19: 87,\n    bytes20: 88,\n    bytes21: 89,\n    bytes22: 90,\n    bytes23: 91,\n    bytes24: 92,\n    bytes25: 93,\n    bytes26: 94,\n    bytes27: 95,\n    bytes28: 96,\n    bytes29: 97,\n    bytes30: 98,\n    bytes31: 99,\n    bytes32: 100,\n    bytes: 101,\n    string: 102,\n};\nvar ETH_ABI_LATTICE_FW_TYPE_MAP = __assign(__assign({}, EIP712_ABI_LATTICE_FW_TYPE_MAP), { tuple1: 103, tuple2: 104, tuple3: 105, tuple4: 106, tuple5: 107, tuple6: 108, tuple7: 109, tuple8: 110, tuple9: 111, tuple10: 112, tuple11: 113, tuple12: 114, tuple13: 115, tuple14: 116, tuple15: 117, tuple16: 118, tuple17: 119 });\nexports.ETH_ABI_LATTICE_FW_TYPE_MAP = ETH_ABI_LATTICE_FW_TYPE_MAP;\nvar ethMsgProtocol = {\n    SIGN_PERSONAL: {\n        str: 'signPersonal',\n        enumIdx: 0, // Enum index of this protocol in Lattice firmware\n    },\n    TYPED_DATA: {\n        str: 'typedData',\n        enumIdx: 1,\n        rawDataMaxLen: 1629,\n        typeCodes: EIP712_ABI_LATTICE_FW_TYPE_MAP, // Enum indices of data types in Lattice firmware\n    },\n};\nexports.ethMsgProtocol = ethMsgProtocol;\n//======================================================\n// EXTERNALLY EXPORTED CONSTANTS\n// These are used for building requests\n//======================================================\nexports.EXTERNAL = {\n    // Optional flags for `getAddresses`\n    GET_ADDR_FLAGS: {\n        SECP256K1_PUB: 3,\n        ED25519_PUB: 4,\n    },\n    // Options for building general signing requests\n    SIGNING: {\n        HASHES: {\n            NONE: 0,\n            KECCAK256: 1,\n            SHA256: 2,\n        },\n        CURVES: {\n            SECP256K1: 0,\n            ED25519: 1\n        },\n        ENCODINGS: {\n            ASCII: 0,\n            HEX: 1,\n            SOLANA: 2,\n        }\n    }\n};\nfunction getFwVersionConst(v) {\n    var c = {\n        extraDataFrameSz: 0,\n        extraDataMaxFrames: 0,\n    };\n    function gte(v, exp) {\n        // Note that `v` fields come in as [fix|minor|major]\n        return (v[2] > exp[0] ||\n            (v[2] === exp[0] && v[1] > exp[1]) ||\n            (v[2] === exp[0] && v[1] === exp[1] && v[0] > exp[2]) ||\n            (v[2] === exp[0] && v[1] === exp[1] && v[0] === exp[2]));\n    }\n    // Very old legacy versions do not give a version number\n    var legacy = v.length === 0;\n    // BASE FIELDS\n    //--------------------------------------\n    // Various size constants have changed on the firmware side over time and\n    // are captured here\n    if (!legacy && gte(v, [0, 10, 4])) {\n        // >=0.10.3\n        c.reqMaxDataSz = 1678;\n        c.ethMaxGasPrice = 20000000000000; // 20000 gwei\n        c.addrFlagsAllowed = true;\n    }\n    else if (!legacy && gte(v, [0, 10, 0])) {\n        // >=0.10.0\n        c.reqMaxDataSz = 1678;\n        c.ethMaxGasPrice = 20000000000000; // 20000 gwei\n        c.addrFlagsAllowed = true;\n    }\n    else {\n        // Legacy or <0.10.0\n        c.reqMaxDataSz = 1152;\n        c.ethMaxGasPrice = 500000000000; // 500 gwei\n        c.addrFlagsAllowed = false;\n    }\n    // These transformations apply to all versions. The subtraction\n    // of 128 bytes accounts for metadata and is for legacy reasons.\n    // For all modern versions, these are 1550 bytes.\n    // NOTE: Non-legacy ETH txs (e.g. EIP1559) will shrink\n    // this number.\n    // See `ETH_BASE_TX_MAX_DATA_SZ` and `ETH_MAX_BASE_MSG_SZ` in firmware\n    c.ethMaxDataSz = c.reqMaxDataSz - 128;\n    c.ethMaxMsgSz = c.ethMaxDataSz;\n    // Max number of params in an EIP712 type. This was added to firmware\n    // to avoid blowing stack size.\n    c.eip712MaxTypeParams = 18;\n    // EXTRA FIELDS ADDED IN LATER VERSIONS\n    //-------------------------------------\n    // V0.14.0 added support for a more robust API around ABI definitions\n    // and generic signing functionality\n    if (!legacy && gte(v, [0, 13, 0])) {\n        // Size of `category` buffer. Inclusive of null terminator byte.\n        c.abiCategorySz = 32;\n        c.abiMaxRmv = 200; // Max number of ABI defs that can be removed with\n        // a single request\n        if (!c.genericSigning) {\n            c.genericSigning = {};\n        }\n        // See `sizeof(GenericSigningRequest_t)` in firmware\n        c.genericSigning.baseReqSz = 1552;\n        // See `GENERIC_SIGNING_BASE_MSG_SZ` in firmware\n        c.genericSigning.baseDataSz = 1519;\n        c.genericSigning.hashTypes = exports.EXTERNAL.SIGNING.HASHES;\n        c.genericSigning.curveTypes = exports.EXTERNAL.SIGNING.CURVES;\n        c.genericSigning.encodingTypes = exports.EXTERNAL.SIGNING.ENCODINGS;\n        // Supported flags for `getAddresses`\n        c.getAddressFlags = [\n            exports.EXTERNAL.GET_ADDR_FLAGS.ED25519_PUB,\n            exports.EXTERNAL.GET_ADDR_FLAGS.SECP256K1_PUB\n        ];\n        // We updated the max number of params in EIP712 types\n        c.eip712MaxTypeParams = 36;\n    }\n    // V0.13.0 added native segwit addresses and fixed a bug in exporting\n    // legacy bitcoin addresses\n    if (!legacy && gte(v, [0, 13, 0])) {\n        c.allowBtcLegacyAndSegwitAddrs = true;\n        // Random address to be used when trying to deploy a contract\n        c.contractDeployKey = '0x08002e0fec8e6acf00835f43c9764f7364fa3f42';\n    }\n    // V0.12.0 added an API for creating, removing, and fetching key-val file\n    // records. For the purposes of this SDK, we only hook into one type of kv\n    // file: address names.\n    if (!legacy && gte(v, [0, 12, 0])) {\n        c.kvActionsAllowed = true;\n        c.kvKeyMaxStrSz = 63;\n        c.kvValMaxStrSz = 63;\n        c.kvActionMaxNum = 10;\n        c.kvRemoveMaxNum = 100;\n    }\n    // V0.11.2 changed how messages are displayed. For personal_sign messages\n    // we now write the header (`Signer: <path>`) into the main body of the screen.\n    // This means personal sign message max size is slightly smaller than for\n    // EIP712 messages because in the latter case there is no header\n    // Note that `<path>` has max size of 62 bytes (`m/X/X/...`)\n    if (!legacy && gte(v, [0, 11, 2])) {\n        c.personalSignHeaderSz = 72;\n    }\n    // V0.11.0 allows new ETH transaction types\n    if (!legacy && gte(v, [0, 11, 0])) {\n        c.allowedEthTxTypesVersion = 1;\n        c.allowedEthTxTypes = [\n            1,\n            2, // eip1559\n        ];\n        c.totalExtraEthTxDataSz = 10;\n    }\n    // V0.10.10 allows a user to sign a prehashed ETH message if payload too big\n    if (!legacy && gte(v, [0, 10, 10])) {\n        c.ethMsgPreHashAllowed = true;\n    }\n    // V0.10.8 allows a user to sign a prehashed transaction if the payload\n    // is too big\n    if (!legacy && gte(v, [0, 10, 8])) {\n        c.prehashAllowed = true;\n    }\n    // V0.10.5 added the ability to use flexible address path sizes, which\n    // changes the `getAddress` API. It also added support for EIP712\n    if (!legacy && gte(v, [0, 10, 5])) {\n        c.varAddrPathSzAllowed = true;\n        c.eip712Supported = true;\n    }\n    // V0.10.4 introduced the ability to send signing requests over multiple\n    // data frames (i.e. in multiple requests)\n    if (!legacy && gte(v, [0, 10, 4])) {\n        c.extraDataFrameSz = 1500; // 1500 bytes per frame of extraData allowed\n        c.extraDataMaxFrames = 1; // 1 frame of extraData allowed\n    }\n    return c;\n}\nexports.getFwVersionConst = getFwVersionConst;\nvar ASCII_REGEX = /^[\\x00-\\x7F]+$/;\nexports.ASCII_REGEX = ASCII_REGEX;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Client = void 0;\nvar bitwise_1 = __importDefault(require(\"bitwise\"));\nvar buffer_1 = require(\"buffer/\");\nvar superagent_1 = __importDefault(require(\"superagent\"));\nvar bitcoin_1 = __importDefault(require(\"./bitcoin\"));\nvar sha_1 = require(\"hash.js/lib/hash/sha\");\nvar index_1 = require(\"./index\");\nvar constants_1 = require(\"./constants\");\nvar ethereum_1 = __importDefault(require(\"./ethereum\"));\nvar ethereumAbi_1 = require(\"./ethereumAbi\");\nvar genericSigning_1 = require(\"./genericSigning\");\nvar util_1 = require(\"./util\");\nvar EMPTY_WALLET_UID = buffer_1.Buffer.alloc(32);\n/**\n * `Client` is a class-based interface for managing a Lattice device.\n */\nvar Client = /** @class */ (function () {\n    /**\n     * @param params - Parameters are passed as an object.\n     */\n    function Client(_a) {\n        var baseUrl = _a.baseUrl, name = _a.name, privKey = _a.privKey, stateData = _a.stateData, timeout = _a.timeout, retryCount = _a.retryCount;\n        // Default state params\n        // -----\n        this.ephemeralPub = null;\n        this.deviceId = null;\n        this.isPaired = false;\n        this.activeWallets = {\n            internal: {\n                uid: EMPTY_WALLET_UID,\n                name: null,\n                capabilities: null,\n                external: false,\n            },\n            external: {\n                uid: EMPTY_WALLET_UID,\n                name: null,\n                capabilities: null,\n                external: true,\n            },\n        };\n        // The user may pass in state data to rehydrate a session that was previously cached\n        // -----\n        if (stateData) {\n            this._unpackAndApplyStateData(stateData);\n            return;\n        }\n        // Other params to check if `stateData` is not included\n        // -----\n        // `baseUrl` describes where to send HTTP requests\n        this.baseUrl = baseUrl || constants_1.BASE_URL;\n        // `name` is a human readable string associated with this app on the Lattice\n        if (name && (name.length < 5 || name.length > 24)) {\n            throw new Error('`name` must be 5-24 characters');\n        }\n        this.name = name || 'Unknown';\n        // `privKey` is used to generate a keypair, which is used for maintaining\n        // an encrypted messaging channel with the target Lattice\n        this.privKey = privKey || (0, util_1.randomBytes)(32);\n        this.key = (0, util_1.getP256KeyPair)(this.privKey);\n        // `retryCount` defines the number of automatic retries for asynchronous requests.\n        // Retries only happen for certain device errors which indicate retrying is allowed.\n        this.retryCount = retryCount || 3;\n        // `timeout` is the number of milliseconds allowed before terminating\n        // asynchronous requests if no response is returned in time\n        this.timeout = timeout || 60000;\n    }\n    /**\n     * Get a JSON string containing state data that can be used to rehydrate a session.\n     * Pass the contents of this to the constructor as `stateData` to rehydrate.\n     */\n    Client.prototype.getStateData = function () {\n        return this._packStateData();\n    };\n    //=======================================================================\n    // LATTICE FUNCTIONS\n    //=======================================================================\n    /**\n     * `connect` will attempt to contact a device based on its deviceId. The response should include\n     * an ephemeral public key, which is used to pair with the device in a later request.\n     * @category Lattice\n     */\n    Client.prototype.connect = function (deviceId, _cb) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            // User may \"re-connect\" if a device ID has previously been stored\n            if (typeof deviceId === 'function') {\n                if (!_this.deviceId)\n                    return cb('No device ID has been stored. Please connect with your device ID first.');\n                cb = deviceId;\n            }\n            else {\n                // If the user passes in a device ID, connect to that device and save\n                // the new ID for future use.\n                _this.deviceId = deviceId;\n            }\n            var param = _this._buildRequest(constants_1.deviceCodes.CONNECT, _this.pubKeyBytes());\n            _this._request(param, null, function (err, res) {\n                if (err)\n                    return cb(err);\n                _this.isPaired = _this._handleConnect(res) || false;\n                // Check for an active wallet. This will get bypassed if we are not paired.\n                if (_this.isPaired) {\n                    _this._getActiveWallet(function (err) {\n                        return cb(err, _this.isPaired);\n                    }, true);\n                }\n                else {\n                    return cb(null, false);\n                }\n            });\n        });\n    };\n    /**\n     * If a pairing secret is provided, `pair` uses it to sign a hash of the public key, name, and\n     * pairing secret. It then sends the name and signature to the device. If no pairing secret is\n     * provided, `pair` sends a zero-length name buffer to the device.\n     * @category Lattice\n     * @returns The active wallet object.\n     */\n    Client.prototype.pair = function (pairingSecret, _cb) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            // Build the secret hash from the salt\n            var pubKey = _this.pubKeyBytes();\n            var nameBuf = buffer_1.Buffer.alloc(25);\n            if (_this.name.length < 5 || _this.name.length > 24) {\n                return cb('Invalid length for name provided. Must be 5-24 characters.');\n            }\n            if (pairingSecret.length > 0) {\n                // If a pairing secret of zero length is passed in, it usually indicates\n                // we want to cancel the pairing attempt. In this case we pass a zero-length\n                // name buffer so the firmware can know not to draw the error screen.\n                // Note that we still expect an error to come back (RESP_ERR_PAIR_FAIL)\n                nameBuf.write(_this.name);\n            }\n            // Make sure we add a null termination byte to the pairing secret\n            var preImage = buffer_1.Buffer.concat([\n                pubKey,\n                nameBuf,\n                buffer_1.Buffer.from(pairingSecret),\n            ]);\n            var hash = buffer_1.Buffer.from((0, sha_1.sha256)().update(preImage).digest('hex'), 'hex');\n            var sig = _this.key.sign(hash); // returns an array, not a buffer\n            var derSig = (0, util_1.toPaddedDER)(sig);\n            var payload = buffer_1.Buffer.concat([nameBuf, derSig]);\n            // Build the request\n            _this._request(payload, 'FINALIZE_PAIRING', function (err, res) {\n                if (err)\n                    return cb(err);\n                // Recover the ephemeral key\n                var errStr = _this._handlePair(res);\n                if (errStr)\n                    return cb(errStr);\n                // Try to get the active wallet once pairing is successful\n                _this._getActiveWallet(function (err) {\n                    if (err)\n                        return cb(err);\n                    return cb(null, _this.hasActiveWallet());\n                }, true);\n            });\n        });\n    };\n    /**\n     * `test` takes a data object with a testID and a payload, and sends them to the device.\n     * @category Lattice\n     */\n    Client.prototype.test = function (data, _cb) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            if (!data.payload)\n                return cb('First argument must contain `testID` and `payload` fields.');\n            var TEST_DATA_SZ = 500;\n            var payload = buffer_1.Buffer.alloc(TEST_DATA_SZ + 6);\n            payload.writeUInt32BE(data.testID, 0);\n            payload.writeUInt16BE(data.payload.length, 4);\n            data.payload.copy(payload, 6);\n            _this._request(payload, 'TEST', function (err, res) {\n                if (err)\n                    return cb(err);\n                var decrypted = _this._handleEncResponse(res, constants_1.decResLengths.test);\n                if (decrypted.err !== null)\n                    return cb(decrypted.err);\n                return cb(null, decrypted.data.slice(65)); // remove ephem pub\n            });\n        });\n    };\n    /**\n     * `getAddresses` takes a starting path and a number to get the addresses associated with the\n     * active wallet.\n     * @category Lattice\n     * @returns An array of addresses.\n     */\n    Client.prototype.getAddresses = function (opts, _cb) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            var MAX_ADDR = 10;\n            var startPath = opts.startPath, n = opts.n, _a = opts.flag, flag = _a === void 0 ? 0 : _a;\n            if (startPath === undefined || n === undefined)\n                return cb('Please provide `startPath` and `n` options');\n            if (startPath.length < 2 || startPath.length > 5)\n                return cb('Path must include between 2 and 5 indices');\n            if (n > MAX_ADDR)\n                return cb(\"You may only request \".concat(MAX_ADDR, \" addresses at once.\"));\n            var fwConstants = (0, constants_1.getFwVersionConst)(_this.fwVersion);\n            if (!(0, util_1.isValidAssetPath)(startPath, fwConstants))\n                return cb('Parent derivation path is not supported');\n            var sz = 32 + 20 + 1; // walletUID + 5 u32 indices + count/flag\n            if (fwConstants.varAddrPathSzAllowed) {\n                sz += 1; // pathDepth\n            }\n            else if (startPath.length !== 5) {\n                return cb('Your Lattice firmware only supports derivation paths with 5 indices. Please upgrade.');\n            }\n            var payload = buffer_1.Buffer.alloc(sz);\n            var off = 0;\n            // WalletUID\n            var wallet = _this.getActiveWallet();\n            if (wallet === null)\n                return cb('No active wallet.');\n            wallet.uid.copy(payload, off);\n            off += 32;\n            // Build the start path (5x u32 indices)\n            if (fwConstants.varAddrPathSzAllowed) {\n                payload.writeUInt8(startPath.length, off);\n                off += 1;\n            }\n            for (var i = 0; i < 5; i++) {\n                if (i <= startPath.length)\n                    payload.writeUInt32BE(startPath[i], off);\n                off += 4;\n            }\n            // Specify the number of subsequent addresses to request.\n            // We also allow the user to skip the cache and request any address related to the asset\n            // in the wallet.\n            var val, flagVal = 0;\n            if (fwConstants.addrFlagsAllowed) {\n                // A 4-bit flag can be used for non-standard address requests\n                // This needs to be combined with `n` as a 4 bit value\n                flagVal = (fwConstants.getAddressFlags &&\n                    fwConstants.getAddressFlags.indexOf(flag) > -1)\n                    ? flag : 0;\n                var flagBits = bitwise_1.default.nibble.read(flagVal);\n                var countBits = bitwise_1.default.nibble.read(n);\n                val = bitwise_1.default.byte.write(flagBits.concat(countBits));\n            }\n            else {\n                // Very old firmware does not support this flag. We can deprecate this soon.\n                val = n;\n            }\n            payload.writeUInt8(val, off);\n            off++;\n            return _this._request(payload, 'GET_ADDRESSES', function (err, res) {\n                if (err)\n                    return cb(err);\n                var parsedRes = _this._handleGetAddresses(res, flagVal);\n                if (parsedRes.err)\n                    return cb(parsedRes.err);\n                return cb(null, parsedRes.data);\n            });\n        });\n    };\n    /**\n     * `sign` builds and sends a request for signing to the device.\n     * @category Lattice\n     * @returns The response from the device.\n     */\n    Client.prototype.sign = function (opts, _cb, cachedData, nextCode) {\n        var _this = this;\n        if (cachedData === void 0) { cachedData = null; }\n        if (nextCode === void 0) { nextCode = null; }\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            var currency = opts.currency;\n            var data = opts.data;\n            if (!data) {\n                return cb('You must provide `data`');\n            }\n            // All transaction requests must be put into the same sized buffer.\n            // This comes from sizeof(GpTransactionRequest_t), but note we remove\n            // the 2-byte schemaId since it is not returned from our resolver.\n            // Note that different firmware versions may have different data sizes.\n            var fwConstants = (0, constants_1.getFwVersionConst)(_this.fwVersion);\n            // Build the signing request payload to send to the device. If we catch\n            // bad params, return an error instead\n            data = __assign({ fwConstants: fwConstants }, data);\n            var req, reqPayload;\n            var schema;\n            if (cachedData !== null && nextCode !== null) {\n                req = cachedData;\n                reqPayload = buffer_1.Buffer.concat([nextCode, req.extraDataPayloads.shift()]);\n                schema = constants_1.signingSchema.EXTRA_DATA;\n            }\n            else {\n                try {\n                    if (currency === 'ETH') {\n                        req = ethereum_1.default.buildEthereumTxRequest(data);\n                    }\n                    else if (currency === 'ETH_MSG') {\n                        req = ethereum_1.default.buildEthereumMsgRequest(data);\n                    }\n                    else if (currency === 'BTC') {\n                        req = bitcoin_1.default.buildBitcoinTxRequest(data);\n                    }\n                    else {\n                        req = (0, genericSigning_1.buildGenericSigningMsgRequest)(data);\n                    }\n                }\n                catch (err) {\n                    return cb(\"Error building signing request: \".concat(err.message));\n                }\n                if (req.err !== undefined)\n                    return cb(req.err);\n                if (req.payload.length > fwConstants.reqMaxDataSz)\n                    return cb('Transaction is too large');\n                reqPayload = req.payload;\n                schema = req.schema;\n            }\n            // Build the payload\n            var payload = buffer_1.Buffer.alloc(2 + fwConstants.reqMaxDataSz);\n            var off = 0;\n            // Whether there will be follow up requests\n            var hasExtraPayloads = req.extraDataPayloads && Number(req.extraDataPayloads.length > 0);\n            payload.writeUInt8(hasExtraPayloads, off);\n            off += 1;\n            // Copy request schema (e.g. ETH or BTC transfer)\n            payload.writeUInt8(schema, off);\n            off += 1;\n            // Copy the wallet UID\n            var wallet = _this.getActiveWallet();\n            if (wallet === null)\n                return cb('No active wallet.');\n            wallet.uid.copy(payload, off);\n            off += wallet.uid.length;\n            // Build data based on the type of request\n            // Copy the payload of the request\n            reqPayload.copy(payload, off);\n            // Construct the encrypted request and send it\n            return _this._request(payload, 'SIGN_TRANSACTION', function (err, res) {\n                if (err) {\n                    // If there was another error caught, return it\n                    if (err)\n                        return cb(err);\n                }\n                else if (hasExtraPayloads) {\n                    var decrypted = _this._handleEncResponse(res, constants_1.decResLengths.sign);\n                    nextCode = decrypted.data.slice(65, 73);\n                    if (!cachedData)\n                        cachedData = req;\n                    return _this.sign(opts, cb, cachedData, nextCode);\n                }\n                else {\n                    // Correct wallet and no errors -- handle the response\n                    try {\n                        var parsedRes = _this._handleSign(res, currency, req);\n                        return cb(null, parsedRes);\n                    }\n                    catch (err) {\n                        return cb(err.message);\n                    }\n                }\n            });\n        });\n    };\n    /**\n     * `addAbiDefs` sends a list of ABI definitions to the device in chunks of up to `MAX_ABI_DEFS`.\n     * @category Lattice\n     * @returns The decrypted response.\n     */\n    Client.prototype.addAbiDefs = function (defs, _cb, nextCode) {\n        var _this = this;\n        if (nextCode === void 0) { nextCode = null; }\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            var defsToAdd = defs.slice(0, ethereumAbi_1.MAX_ABI_DEFS);\n            defs = defs.slice(ethereumAbi_1.MAX_ABI_DEFS);\n            var abiPayload;\n            try {\n                abiPayload = (0, ethereumAbi_1.buildAddAbiPayload)(defsToAdd);\n            }\n            catch (err) {\n                return cb(err);\n            }\n            var payload = buffer_1.Buffer.alloc(abiPayload.length + 10);\n            // Let the firmware know how many defs are remaining *after this one*.\n            // If this is a positive number, firmware will send us a temporary code\n            // to bypass user authorization if the user has configured easy ABI loading.\n            payload.writeUInt16LE(defs.length, 0);\n            // If this is a follow-up request, we don't need to ask for user authorization\n            // if we use the correct temporary u64\n            if (nextCode !== null)\n                nextCode.copy(payload, 2);\n            abiPayload.copy(payload, 10);\n            return _this._request(payload, 'ADD_ABI_DEFS', function (err, res, responseCode) {\n                if (responseCode && responseCode !== constants_1.responseCodes.RESP_SUCCESS)\n                    return cb('Error making request.');\n                else if (err)\n                    return cb(err);\n                var decrypted = _this._handleEncResponse(res, constants_1.decResLengths.addAbiDefs);\n                // Grab the 8 byte code to fast track our next request, if needed\n                nextCode = decrypted.data.slice(65, 73);\n                // No defs left? Return success\n                if (defs.length === 0)\n                    return cb(null);\n                // Add the next set\n                _this.addAbiDefs(defs, cb, nextCode);\n            });\n        });\n    };\n    /**\n     * `getAbiRecords` fetches a set of ABI records saved on the Lattice. You can fetch\n     * sequential records based on a starting index and count.\n     * @category Lattice\n     * @returns The decrypted response.\n     */\n    Client.prototype.getAbiRecords = function (opts, _cb, fetched) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            var _a = opts.n, n = _a === void 0 ? 1 : _a, _b = opts.startIdx, startIdx = _b === void 0 ? 0 : _b, _c = opts.category, category = _c === void 0 ? '' : _c;\n            var fwConstants = (0, constants_1.getFwVersionConst)(_this.fwVersion);\n            if (n < 1) {\n                return cb('Must request at least one record (n=0)');\n            }\n            else if (n < 0 || startIdx < 0) {\n                return cb('Both `n` and `startIdx` must be >=0');\n            }\n            else if (!fwConstants.abiCategorySz) {\n                return cb('Outdated Lattice firmware. Please update.');\n            }\n            else if (category.length >= fwConstants.abiCategorySz) {\n                return cb(\"category must be <\".concat(fwConstants.abiCategorySz - 1, \" characters, got \").concat(category.length));\n            }\n            if (!fetched) {\n                fetched = {\n                    startIdx: startIdx,\n                    numRemaining: null,\n                    numFetched: null,\n                    records: [],\n                };\n            }\n            var payload = buffer_1.Buffer.alloc(4 + fwConstants.abiCategorySz);\n            payload.writeUInt16LE(startIdx, 0);\n            payload.writeUInt16LE(n, 2);\n            buffer_1.Buffer.from(category).copy(payload, 4);\n            return _this._request(payload, 'GET_ABI_RECORDS', function (err, res) {\n                if (err) {\n                    return cb(err);\n                }\n                // Correct wallet and no errors -- handle the response\n                var d = _this._handleEncResponse(res, constants_1.decResLengths.getAbiRecords);\n                if (d.err)\n                    return cb(d.err);\n                // Decode the response\n                var off = 65; // Skip 65 byte pubkey prefix\n                var numRemaining = d.data.readUInt32LE(off);\n                off += 4;\n                var numReturned = d.data.readUInt8(off);\n                off += 1;\n                // Start adding data if there is data to add\n                fetched.numRemaining = numRemaining;\n                if (!fetched.records) {\n                    fetched.records = [];\n                }\n                for (var i = 0; i < numReturned; i++) {\n                    // Parse and add the def\n                    var packedDef = d.data.slice(off, off + ethereumAbi_1.ABI_DEF_SZ);\n                    off += ethereumAbi_1.ABI_DEF_SZ;\n                    fetched.records.push((0, ethereumAbi_1.unpackAbiDef)(packedDef));\n                }\n                // Decrement the total counter\n                opts.n -= numReturned;\n                if (opts.n < 1 || numReturned < 1) {\n                    fetched.numFetched = fetched.records.length;\n                    return cb(null, fetched);\n                }\n                else {\n                    // Recurse if there is more to fetch\n                    opts.startIdx += numReturned;\n                    return _this.getAbiRecords(opts, cb, fetched);\n                }\n            });\n        });\n    };\n    /**\n     * `removeAbiRecords` requests removal of ABI records on the device. You can request\n     * removal based on a desired set of function signatures.\n     * @category Lattice\n     * @returns The decrypted response.\n     */\n    Client.prototype.removeAbiRecords = function (opts, _cb, cbData) {\n        var _this = this;\n        if (cbData === void 0) { cbData = { numRemoved: 0, numTried: 0 }; }\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            var sigs = opts.sigs;\n            var fwConstants = (0, constants_1.getFwVersionConst)(_this.fwVersion);\n            if (!fwConstants.abiMaxRmv) {\n                return cb('Outdated Lattice firmware. Please update.');\n            }\n            else if (sigs.length === 0) {\n                return cb('At least one signature in `sigs` must be provided.');\n            }\n            var sigsSlice = sigs.slice(cbData.numTried, cbData.numTried + fwConstants.abiMaxRmv);\n            var payload = buffer_1.Buffer.alloc(1 + (4 * fwConstants.abiMaxRmv));\n            var off = 0;\n            payload.writeUInt8(sigsSlice.length, off);\n            off += 1;\n            sigsSlice.forEach(function (sig) {\n                try {\n                    var sigBuf = ethereum_1.default.ensureHexBuffer(sig);\n                    if (sigBuf.length !== 4) {\n                        return cb('Signatures must be 4 bytes.');\n                    }\n                    sigBuf.copy(payload, off);\n                    off += 4;\n                }\n                catch (err) {\n                    return cb(\"Error writing signature: \".concat(err.message));\n                }\n            });\n            return _this._request(payload, 'REMOVE_ABI_RECORDS', function (err, res) {\n                if (err) {\n                    return cb(err);\n                }\n                // Correct wallet and no errors -- handle the response\n                var d = _this._handleEncResponse(res, constants_1.decResLengths.removeAbiRecords);\n                if (d.err)\n                    return cb(d.err);\n                // Decode the response\n                var off = 65; // Skip 65 byte pubkey prefix\n                var rmv = d.data.readUInt8(off);\n                off += 1;\n                cbData.numRemoved += rmv;\n                cbData.numTried += sigsSlice.length;\n                if (cbData.numTried >= opts.sigs.length) {\n                    return cb(null, cbData);\n                }\n                else {\n                    // Recurse if there are more to remove\n                    return _this.removeAbiRecords(opts, cb, cbData);\n                }\n            });\n        });\n    };\n    /**\n     * `addPermissionV0` takes in a currency, time window, spending limit, and decimals, and builds a\n     * payload to send to the Lattice.\n     * @category Lattice\n     */\n    Client.prototype.addPermissionV0 = function (opts, _cb) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            var currency = opts.currency, timeWindow = opts.timeWindow, limit = opts.limit, decimals = opts.decimals, asset = opts.asset;\n            if (!currency ||\n                timeWindow === undefined ||\n                limit === undefined ||\n                decimals === undefined ||\n                timeWindow === null ||\n                limit === null ||\n                decimals === null)\n                return cb('currency, timeWindow, decimals, and limit are all required options.');\n            else if (timeWindow === 0 || limit === 0)\n                return cb('Time window and spending limit must be positive.');\n            // Build the name of the permission\n            var name = currency;\n            if (asset)\n                name += \"_\".concat(asset);\n            // Start building the payload\n            var payload = buffer_1.Buffer.alloc(293);\n            // Copy the name\n            if (buffer_1.Buffer.from(name).length > 255)\n                return cb('Asset name too long.');\n            buffer_1.Buffer.from(name).copy(payload, 0);\n            // Convert the limit to a 32 byte hex buffer and copy it in\n            var limitBuf = ethereum_1.default.ensureHexBuffer(limit);\n            if (limitBuf.length > 32)\n                return cb('Limit too large.');\n            limitBuf.copy(payload, 256 + (32 - limitBuf.length));\n            // Copy the time window (seconds)\n            payload.writeUInt32BE(timeWindow, 288);\n            payload.writeUInt8(decimals, 292);\n            // Encrypt the request and send it to the Lattice.\n            return _this._request(payload, 'ADD_PERMISSION_V0', function (err, res) {\n                if (err) {\n                    // If there was another error caught, return it\n                    if (err)\n                        return cb(err);\n                }\n                else {\n                    // Correct wallet and no errors -- handle the response\n                    var d = _this._handleEncResponse(res, constants_1.decResLengths.empty);\n                    if (d.err)\n                        return cb(d.err);\n                    return cb(null);\n                }\n            });\n        });\n    };\n    /**\n     * `getKvRecords` fetches a list of key-value records from the Lattice.\n     * @category Lattice\n     */\n    Client.prototype.getKvRecords = function (opts, _cb) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            var _a = opts.type, type = _a === void 0 ? 0 : _a, _b = opts.n, n = _b === void 0 ? 1 : _b, _c = opts.start, start = _c === void 0 ? 0 : _c;\n            var fwConstants = (0, constants_1.getFwVersionConst)(_this.fwVersion);\n            if (!fwConstants.kvActionsAllowed) {\n                return cb('Unsupported. Please update firmware.');\n            }\n            else if (n < 1) {\n                return cb('You must request at least one record.');\n            }\n            else if (n > fwConstants.kvActionMaxNum) {\n                return cb(\"You may only request up to \".concat(fwConstants.kvActionMaxNum, \" records at once.\"));\n            }\n            var payload = buffer_1.Buffer.alloc(9);\n            payload.writeUInt32LE(type, 0);\n            payload.writeUInt8(n, 4);\n            payload.writeUInt32LE(start, 5);\n            // Encrypt the request and send it to the Lattice.\n            return _this._request(payload, 'GET_KV_RECORDS', function (err, res) {\n                if (err) {\n                    // If there was another error caught, return it\n                    if (err)\n                        return cb(err);\n                }\n                else {\n                    // Correct wallet and no errors -- handle the response\n                    var d = _this._handleEncResponse(res, constants_1.decResLengths.getKvRecords);\n                    if (d.err)\n                        return cb(d.err);\n                    // Decode the response\n                    var off = 65; // Skip 65 byte pubkey prefix\n                    var nTotal = parseInt(d.data.slice(off, off + 4).toString('hex'), 16);\n                    off += 4;\n                    var nFetched = parseInt(d.data.slice(off, off + 1).toString('hex'), 16);\n                    off += 1;\n                    if (nFetched > fwConstants.kvActionMaxNum)\n                        return cb('Too many records fetched. Firmware error.');\n                    var records = [];\n                    for (var i = 0; i < nFetched; i++) {\n                        var r = {};\n                        r.id = parseInt(d.data.slice(off, off + 4).toString('hex'), 16);\n                        off += 4;\n                        r.type = parseInt(d.data.slice(off, off + 4).toString('hex'), 16);\n                        off += 4;\n                        r.caseSensitive =\n                            parseInt(d.data.slice(off, off + 1).toString('hex'), 16) === 1\n                                ? true\n                                : false;\n                        off += 1;\n                        var keySz = parseInt(d.data.slice(off, off + 1).toString('hex'), 16);\n                        off += 1;\n                        r.key = d.data.slice(off, off + keySz - 1).toString();\n                        off += fwConstants.kvKeyMaxStrSz + 1;\n                        var valSz = parseInt(d.data.slice(off, off + 1).toString('hex'), 16);\n                        off += 1;\n                        r.val = d.data.slice(off, off + valSz - 1).toString();\n                        off += fwConstants.kvValMaxStrSz + 1;\n                        records.push(r);\n                    }\n                    return cb(null, { records: records, total: nTotal, fetched: nFetched });\n                }\n            });\n        });\n    };\n    /**\n     * `addKvRecords` takes in a set of key-value records and sends a request to add them to the\n     * Lattice.\n     * @category Lattice\n     * @returns A callback with an error or null.\n     */\n    Client.prototype.addKvRecords = function (opts, _cb) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            var _a = opts.type, type = _a === void 0 ? 0 : _a, _b = opts.records, records = _b === void 0 ? {} : _b, _c = opts.caseSensitive, caseSensitive = _c === void 0 ? false : _c;\n            var fwConstants = (0, constants_1.getFwVersionConst)(_this.fwVersion);\n            if (!fwConstants.kvActionsAllowed) {\n                return cb('Unsupported. Please update firmware.');\n            }\n            else if (typeof records !== 'object' ||\n                Object.keys(records).length === 0) {\n                return cb('One or more key-value mapping must be provided in `records` param.');\n            }\n            else if (Object.keys(records).length > fwConstants.kvActionMaxNum) {\n                return cb(\"Too many keys provided. Please only provide up to \".concat(fwConstants.kvActionMaxNum, \".\"));\n            }\n            else if (Object.keys(records).length < 1) {\n                return cb('You must provide at least one key to add.');\n            }\n            var payload = buffer_1.Buffer.alloc(1 + 139 * fwConstants.kvActionMaxNum);\n            payload.writeUInt8(Object.keys(records).length, 0);\n            var off = 1;\n            try {\n                Object.keys(records).forEach(function (key) {\n                    if (typeof key !== 'string' ||\n                        String(key).length > fwConstants.kvKeyMaxStrSz) {\n                        throw new Error(\"Key \".concat(key, \" too large. Must be <=\").concat(fwConstants.kvKeyMaxStrSz, \" characters.\"));\n                    }\n                    else if (typeof records[key] !== 'string' ||\n                        String(records[key]).length > fwConstants.kvValMaxStrSz) {\n                        throw new Error(\"Value \".concat(records[key], \" too large. Must be <=\").concat(fwConstants.kvValMaxStrSz, \" characters.\"));\n                    }\n                    else if (String(key).length === 0 ||\n                        String(records[key]).length === 0) {\n                        throw new Error('Keys and values must be >0 characters.');\n                    }\n                    else if (!constants_1.ASCII_REGEX.test(key) || !constants_1.ASCII_REGEX.test(records[key])) {\n                        throw new Error('Unicode characters are not supported.');\n                    }\n                    // Skip the ID portion. This will get added by firmware.\n                    payload.writeUInt32LE(0, off);\n                    off += 4;\n                    payload.writeUInt32LE(type, off);\n                    off += 4;\n                    payload.writeUInt8(caseSensitive ? 1 : 0, off);\n                    off += 1;\n                    payload.writeUInt8(String(key).length + 1, off);\n                    off += 1;\n                    buffer_1.Buffer.from(String(key)).copy(payload, off);\n                    off += fwConstants.kvKeyMaxStrSz + 1;\n                    payload.writeUInt8(String(records[key]).length + 1, off);\n                    off += 1;\n                    buffer_1.Buffer.from(String(records[key])).copy(payload, off);\n                    off += fwConstants.kvValMaxStrSz + 1;\n                });\n            }\n            catch (err) {\n                return cb(\"Error building request: \".concat(err.message));\n            }\n            // Encrypt the request and send it to the Lattice.\n            return _this._request(payload, 'ADD_KV_RECORDS', function (err, res) {\n                if (err) {\n                    // If there was another error caught, return it\n                    if (err)\n                        return cb(err);\n                }\n                else {\n                    // Correct wallet and no errors -- handle the response\n                    var d = _this._handleEncResponse(res, constants_1.decResLengths.empty);\n                    if (d.err)\n                        return cb(d.err);\n                    return cb(null);\n                }\n            });\n        });\n    };\n    /**\n     * `removeKvRecords` takes in an array of ids and sends a request to remove them from the Lattice.\n     * @category Lattice\n     * @returns A callback with an error or null.\n     */\n    Client.prototype.removeKvRecords = function (opts, _cb) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var cb = (0, util_1.promisifyCb)(resolve, reject, _cb);\n            var _a = opts.type, type = _a === void 0 ? 0 : _a, _b = opts.ids, ids = _b === void 0 ? [] : _b;\n            var fwConstants = (0, constants_1.getFwVersionConst)(_this.fwVersion);\n            if (!fwConstants.kvActionsAllowed) {\n                return cb('Unsupported. Please update firmware.');\n            }\n            else if (!Array.isArray(ids) || ids.length < 1) {\n                return cb('You must include one or more `ids` to removed.');\n            }\n            else if (ids.length > fwConstants.kvRemoveMaxNum) {\n                return cb(\"Only up to \".concat(fwConstants.kvRemoveMaxNum, \" records may be removed at once.\"));\n            }\n            var payload = buffer_1.Buffer.alloc(5 + 4 * fwConstants.kvRemoveMaxNum);\n            payload.writeUInt32LE(type, 0);\n            payload.writeUInt8(ids.length, 4);\n            for (var i = 0; i < ids.length; i++) {\n                payload.writeUInt32LE(ids[i], 5 + 4 * i);\n            }\n            // Encrypt the request and send it to the Lattice.\n            return _this._request(payload, 'REMOVE_KV_RECORDS', function (err, res) {\n                if (err) {\n                    // If there was another error caught, return it\n                    if (err)\n                        return cb(err);\n                }\n                else {\n                    // Correct wallet and no errors -- handle the response\n                    var d = _this._handleEncResponse(res, constants_1.decResLengths.empty);\n                    if (d.err)\n                        return cb(d.err);\n                    return cb(null);\n                }\n            });\n        });\n    };\n    //=======================================================================\n    // INTERNAL FUNCTIONS\n    // These handle the logic around building requests and consuming\n    // responses. They take into account the Lattice's serialization scheme\n    // among other protocols.\n    //=======================================================================\n    /**\n     * Get the active wallet in the device. If we already have one recorded, we don't need to do\n     * anything\n     * @internal\n     * @returns callback\n     */\n    Client.prototype._getActiveWallet = function (cb, forceRefresh) {\n        var _this = this;\n        if (forceRefresh === void 0) { forceRefresh = false; }\n        if (forceRefresh !== true &&\n            (this.hasActiveWallet() === true || this.isPaired !== true)) {\n            // If the active wallet already exists, or if we are not paired, skip the request\n            return cb(null);\n        }\n        else {\n            // No active wallet? Get it from the device\n            var payload = buffer_1.Buffer.alloc(0);\n            return this._request(payload, 'GET_WALLETS', function (err, res) {\n                if (err) {\n                    _this._resetActiveWallets();\n                    return cb(err);\n                }\n                return cb(_this._handleGetWallets(res));\n            });\n        }\n    };\n    /**\n     * Get the shared secret, derived via ECDH from the local private key and the ephemeral public key\n     * @internal\n     * @returns Buffer\n     */\n    Client.prototype._getSharedSecret = function () {\n        // Once every ~256 attempts, we will get a key that starts with a `00` byte, which\n        // can lead to problems initializing AES if we don't force a 32 byte BE buffer.\n        return buffer_1.Buffer.from(this.key.derive(this.ephemeralPub.getPublic()).toArray('be', 32));\n    };\n    /**\n     * Get the ephemeral id, which is the first 4 bytes of the shared secret generated from the local\n     * private key and the ephemeral public key from the device.\n     * @internal\n     * @returns Buffer\n     */\n    Client.prototype._getEphemId = function () {\n        if (this.ephemeralPub === null)\n            return null;\n        // EphemId is the first 4 bytes of the hash of the shared secret\n        var secret = this._getSharedSecret();\n        var hash = buffer_1.Buffer.from((0, sha_1.sha256)().update(secret).digest('hex'), 'hex');\n        return hash.slice(0, 4);\n    };\n    /**\n     * Builds an encrypted request\n     * @internal\n     */\n    Client.prototype._buildEncRequest = function (enc_request_code, payload) {\n        // Get the ephemeral id - all encrypted requests require there to be an\n        // epehemeral public key in order to send\n        var ephemId = parseInt(this._getEphemId().toString('hex'), 16);\n        // Build the payload and checksum\n        var payloadPreCs = buffer_1.Buffer.concat([\n            buffer_1.Buffer.from([enc_request_code]),\n            payload,\n        ]);\n        var cs = (0, util_1.checksum)(payloadPreCs);\n        var payloadBuf = buffer_1.Buffer.alloc(payloadPreCs.length + 4);\n        // Lattice validates checksums in little endian\n        payloadPreCs.copy(payloadBuf, 0);\n        payloadBuf.writeUInt32LE(cs, payloadPreCs.length);\n        // Encrypt this payload\n        var secret = this._getSharedSecret();\n        var newEncPayload = (0, util_1.aes256_encrypt)(payloadBuf, secret);\n        // Write to the overall payload. We must use the same length\n        // for every encrypted request and must include a 32-bit ephemId\n        // along with the encrypted data\n        var newPayload = buffer_1.Buffer.alloc(constants_1.ENC_MSG_LEN + 4);\n        // First 4 bytes are the ephemeral id (in little endian)\n        newPayload.writeUInt32LE(ephemId, 0);\n        // Next N bytes\n        newEncPayload.copy(newPayload, 4);\n        return this._buildRequest(constants_1.deviceCodes.ENCRYPTED_REQUEST, newPayload);\n    };\n    /**\n     * Build a request to send to the device.\n     * @internal\n     * @param request_code {uint8} - 8-bit unsigned integer representing the message request code\n     * @param id {buffer} - 4 byte identifier (comes from HSM for subsequent encrypted reqs)\n     * @param payload {buffer} - serialized payload\n     * @returns {buffer}\n     */\n    Client.prototype._buildRequest = function (request_code, payload) {\n        // Length of payload;\n        // we add 1 to the payload length to account for the request_code byte\n        var L = payload && buffer_1.Buffer.isBuffer(payload) ? payload.length + 1 : 1;\n        if (request_code === constants_1.deviceCodes.ENCRYPTED_REQUEST) {\n            L = 1 + payload.length;\n        }\n        var i = 0;\n        var preReq = buffer_1.Buffer.alloc(L + 8);\n        // Build the header\n        i = preReq.writeUInt8(constants_1.VERSION_BYTE, i);\n        i = preReq.writeUInt8(constants_1.REQUEST_TYPE_BYTE, i);\n        var id = (0, util_1.randomBytes)(4);\n        i = preReq.writeUInt32BE(parseInt(\"0x\".concat(id.toString('hex'))), i);\n        i = preReq.writeUInt16BE(L, i);\n        // Build the payload\n        i = preReq.writeUInt8(request_code, i);\n        if (L > 1)\n            i = payload.copy(preReq, i);\n        // Add the checksum\n        var cs = (0, util_1.checksum)(preReq);\n        var req = buffer_1.Buffer.alloc(preReq.length + 4); // 4-byte checksum\n        i = preReq.copy(req);\n        req.writeUInt32BE(cs, i);\n        return req;\n    };\n    /**\n     * Send a request to the device and wait for a response.\n     * @internal\n     * @returns The response code.\n     */\n    Client.prototype._request = function (payload, encReqCode, cb, retryCount) {\n        var _this = this;\n        if (retryCount === void 0) { retryCount = this.retryCount; }\n        if (!this.deviceId) {\n            return cb('Device ID is not set. Please set it and try again.');\n        }\n        else if (encReqCode && constants_1.encReqCodes[encReqCode] === undefined) {\n            return cb('Unknown encrypted request code.');\n        }\n        // Encrypt the data if appropriate. Most requests are end-to-end encrypted,\n        // but some (e.g. CONNNECT) are not encrypted.\n        var data = encReqCode\n            ? this._buildEncRequest(constants_1.encReqCodes[encReqCode], payload)\n            : payload;\n        var url = \"\".concat(this.baseUrl, \"/\").concat(this.deviceId);\n        superagent_1.default\n            .post(url)\n            .timeout(this.timeout)\n            .send({ data: data })\n            .then(function (res) {\n            // Handle formatting or generic HTTP errors\n            if (!res || !res.body) {\n                return cb(\"Invalid response: \".concat(res));\n            }\n            else if (res.body.status !== 200) {\n                return cb(\"Error code \".concat(res.body.status, \": \").concat(res.body.message));\n            }\n            // Handle retry logic\n            var parsed = (0, util_1.parseLattice1Response)(res.body.message);\n            var deviceBusy = parsed.responseCode === constants_1.responseCodes.RESP_ERR_DEV_BUSY ||\n                parsed.responseCode === constants_1.responseCodes.RESP_ERR_GCE_TIMEOUT;\n            var wrongWallet = parsed.responseCode === constants_1.responseCodes.RESP_ERR_WRONG_WALLET;\n            var invalidEphemId = parsed.responseCode === constants_1.responseCodes.RESP_ERR_INVALID_EPHEM_ID;\n            var canRetry = retryCount > 0;\n            // Re-connect and/or retry request if needed\n            if (canRetry && deviceBusy) {\n                // Wait a few seconds and retry\n                setTimeout(function () {\n                    _this._request(payload, encReqCode, cb, retryCount - 1);\n                }, 3000);\n            }\n            else if (canRetry && invalidEphemId) {\n                // Encrypted channel got out of sync. Reconnect and retry.\n                _this.connect(_this.deviceId, function (err, isPaired) {\n                    if (err) {\n                        // Abort on connection error\n                        return cb(err);\n                    }\n                    else if (!isPaired) {\n                        // Abort if we are not paired\n                        return cb('Not paired to device.');\n                    }\n                    _this._request(payload, encReqCode, cb, retryCount - 1);\n                });\n            }\n            else if (canRetry && wrongWallet) {\n                // Incorrect wallet being requested. Clear wallet state.\n                _this._resetActiveWallets();\n                // Reconnect, update wallet UID, and retry\n                _this.connect(_this.deviceId, function (err, isPaired) {\n                    if (err) {\n                        // Abort on connection error\n                        return cb(err);\n                    }\n                    else if (!isPaired) {\n                        // Abort if we are not paired\n                        return cb('Not paired to device.');\n                    }\n                    // Include the new wallet UID in the payload and retry\n                    payload = _this._replaceWalletUID(encReqCode, payload);\n                    if (!payload) {\n                        // Not allowed to retry. Exit here.\n                        return cb('Wrong wallet. Failed to switch. Please reconnect.');\n                    }\n                    _this._request(payload, encReqCode, cb, retryCount - 1);\n                });\n            }\n            else if (parsed.responseCode || parsed.err) {\n                if (parsed.err) {\n                    return cb(parsed.err);\n                }\n                cb(constants_1.responseMsgs[parsed.responseCode] || 'Unknown request failure');\n            }\n            else {\n                // All good\n                cb(null, parsed.data, parsed.responseCode);\n            }\n        })\n            .catch(function (err) {\n            var isTimeout = err.code === 'ECONNABORTED' && err.errno === 'ETIME';\n            if (isTimeout)\n                return cb('Timeout waiting for device. Please ensure it is connected to the internet and try again in a minute.');\n            else\n                return cb(\"Failed to make request to device: \".concat(err.message));\n        });\n    };\n    // ----- Device response -----\n    /**\n    * `_handleConnect` will call `StartPairingMode` on the device, which gives the user 60 seconds to finalize\n    * the pairing. This will return an ephemeral public key, which is needed for the next request.\n    * - If the device is already paired, this ephemPub is simply used to encrypt the next request.\n    * - If the device is not paired, it is needed to pair the device within 60 seconds.\n    * @category Device Response\n    * @internal\n    * @returns true if we are paired to the device already\n    */\n    Client.prototype._handleConnect = function (res) {\n        var off = 0;\n        var pairingStatus = res.readUInt8(off);\n        off++;\n        // If we are already paired, we get the next ephemeral key\n        var pub = res.slice(off, off + 65).toString('hex');\n        off += 65;\n        // Grab the firmware version (will be 0-length for older fw versions)\n        // It is of format |fix|minor|major|reserved|\n        this.fwVersion = res.slice(off, off + 4);\n        // Set the public key\n        this.ephemeralPub = (0, util_1.getP256KeyPairFromPub)(pub);\n        // return the state of our pairing\n        return pairingStatus === constants_1.messageConstants.PAIRED;\n    };\n    /**\n     * All encrypted responses must be decrypted with the previous shared secret. Per specification,\n     * decrypted responses will all contain a 65-byte public key as the prefix, which becomes the new\n     * `ephemeralPub`.\n     * @category Device Response\n     * @internal\n     */\n    Client.prototype._handleEncResponse = function (encRes, len) {\n        // Decrypt response\n        var secret = this._getSharedSecret();\n        var encData = encRes.slice(0, constants_1.ENC_MSG_LEN);\n        var res = (0, util_1.aes256_decrypt)(encData, secret);\n        // len does not include a 65-byte pubkey that prefies each encResponse\n        len += 65;\n        // Validate checksum. It will be the last 4 bytes of the decrypted payload.\n        // The length of the decrypted payload will be fixed for each given message type.\n        var toCheck = res.slice(0, len);\n        var cs = parseInt(\"0x\".concat(res.slice(len, len + 4).toString('hex')));\n        var csCheck = (0, util_1.checksum)(toCheck);\n        if (cs !== csCheck)\n            return {\n                err: \"Checksum mismatch in response from Lattice (calculated \".concat(csCheck, \", wanted \").concat(cs, \")\"),\n            };\n        // First 65 bytes is the next ephemeral pubkey\n        var pub = res.slice(0, 65).toString('hex');\n        try {\n            this.ephemeralPub = (0, util_1.getP256KeyPairFromPub)(pub);\n            return { err: null, data: res };\n        }\n        catch (e) {\n            return { err: \"Error handling getAddresses response: \".concat(e.toString()) };\n        }\n    };\n    /**\n     * Pair will create a new pairing if the user successfully enters the secret into the device in\n     * time. If successful (`status=0`), the device will return a new ephemeral public key, which is\n     * used to derive a shared secret for the next request\n     * @category Device Response\n     * @internal\n     * @returns error (or null)\n     */\n    Client.prototype._handlePair = function (encRes) {\n        var d = this._handleEncResponse(encRes, constants_1.decResLengths.empty);\n        if (d.err)\n            return d.err;\n        this.isPaired = true;\n        return null;\n    };\n    /**\n     * @category Device Response\n     * @internal\n     * @return an array of address strings\n     */\n    Client.prototype._handleGetAddresses = function (encRes, flag) {\n        // Handle the encrypted response\n        var decrypted = this._handleEncResponse(encRes, constants_1.decResLengths.getAddresses);\n        if (decrypted.err !== null)\n            return decrypted;\n        var addrData = decrypted.data;\n        var off = 65; // Skip 65 byte pubkey prefix\n        // Look for addresses until we reach the end (a 4 byte checksum)\n        var addrs = [];\n        // Pubkeys are formatted differently in the response\n        var _a = index_1.Constants.GET_ADDR_FLAGS, ED25519_PUB = _a.ED25519_PUB, SECP256K1_PUB = _a.SECP256K1_PUB;\n        var arePubkeys = flag === ED25519_PUB ||\n            flag === SECP256K1_PUB;\n        if (arePubkeys) {\n            off += 1; // skip uint8 representing pubkey type\n        }\n        while (off + 4 < constants_1.decResLengths.getAddresses) {\n            if (arePubkeys) {\n                // Pubkeys are shorter and are returned as buffers\n                var pubBytes = addrData.slice(off, off + 65);\n                var isEmpty = pubBytes.every(function (byte) { return byte === 0x00; });\n                if (!isEmpty && flag === ED25519_PUB) {\n                    // ED25519 pubkeys are 32 bytes\n                    addrs.push(pubBytes.slice(0, 32));\n                }\n                else if (!isEmpty) {\n                    // Only other returned pubkeys are ECC, or 65 bytes\n                    // Note that we return full (uncompressed) ECC pubkeys\n                    addrs.push(pubBytes);\n                }\n                off += 65;\n            }\n            else {\n                // Otherwise we are dealing with address strings\n                var addrBytes = addrData.slice(off, off + constants_1.ADDR_STR_LEN);\n                off += constants_1.ADDR_STR_LEN;\n                // Return the UTF-8 representation\n                var len = addrBytes.indexOf(0); // First 0 is the null terminator\n                if (len > 0) {\n                    addrs.push(addrBytes.slice(0, len).toString());\n                }\n            }\n        }\n        return { data: addrs, err: null };\n    };\n    /**\n     * If there is an active wallet, return null. Otherwise, return an error message.\n     * @category Device Response\n     * @internal\n     * @param encRes - The encrypted response from the device.\n     */\n    Client.prototype._handleGetWallets = function (encRes) {\n        var decrypted = this._handleEncResponse(encRes, constants_1.decResLengths.getWallets);\n        if (decrypted.err !== null)\n            return decrypted;\n        var res = decrypted.data;\n        var walletUID;\n        // Read the external wallet data first. If it is non-null, the external wallet will\n        // be the active wallet of the device and we should save it.\n        // If the external wallet is blank, it means there is no card present and we should\n        // save and use the interal wallet.\n        // If both wallets are empty, it means the device still needs to be set up.\n        var walletDescriptorLen = 71;\n        // Skip 65byte pubkey prefix. WalletDescriptor contains 32byte id + 4byte flag + 35byte name\n        var off = 65;\n        // Internal first\n        var hasActiveWallet = false;\n        walletUID = res.slice(off, off + 32);\n        this.activeWallets.internal.uid = walletUID;\n        this.activeWallets.internal.capabilities = res.readUInt32BE(off + 32);\n        this.activeWallets.internal.name = res.slice(off + 36, off + walletDescriptorLen);\n        if (!walletUID.equals(EMPTY_WALLET_UID))\n            hasActiveWallet = true;\n        // Offset the first item\n        off += walletDescriptorLen;\n        // External\n        walletUID = res.slice(off, off + 32);\n        this.activeWallets.external.uid = walletUID;\n        this.activeWallets.external.capabilities = res.readUInt32BE(off + 32);\n        this.activeWallets.external.name = res.slice(off + 36, off + walletDescriptorLen);\n        if (!walletUID.equals(EMPTY_WALLET_UID))\n            hasActiveWallet = true;\n        if (hasActiveWallet === true)\n            return null;\n        else\n            return 'No active wallet.';\n    };\n    /**\n     * `_handleSign` takes the encrypted response from the device and decrypts it. It then parses the\n     * decrypted response and returns the data.\n     * @category Device Response\n     * @internal\n     * @param encRes - The encrypted response from the server\n     * @param currencyType - The type of currency being signed.\n     * @param req - The original request data\n     * @returns The transaction data, the transaction hash, and the signature.\n     */\n    Client.prototype._handleSign = function (encRes, currencyType, req) {\n        if (req === void 0) { req = null; }\n        // Handle the encrypted response\n        var decrypted = this._handleEncResponse(encRes, constants_1.decResLengths.sign);\n        if (decrypted.err !== null)\n            return { err: decrypted.err };\n        var PUBKEY_PREFIX_LEN = 65;\n        var PKH_PREFIX_LEN = 20;\n        var off = PUBKEY_PREFIX_LEN; // Skip past pubkey prefix\n        var res = decrypted.data;\n        // Get the change data if we are making a BTC transaction\n        var changeRecipient;\n        if (currencyType === 'BTC') {\n            var changeVersion = bitcoin_1.default.getAddressFormat(req.origData.changePath);\n            var changePubkeyhash = res.slice(off, off + PKH_PREFIX_LEN);\n            off += PKH_PREFIX_LEN;\n            changeRecipient = bitcoin_1.default.getBitcoinAddress(changePubkeyhash, changeVersion);\n        }\n        var DERLength = 74; // max size of a DER signature -- all Lattice sigs are this long\n        var SIGS_OFFSET = 10 * DERLength; // 10 signature slots precede 10 pubkey slots\n        var PUBKEYS_OFFSET = PUBKEY_PREFIX_LEN + PKH_PREFIX_LEN + SIGS_OFFSET;\n        if (currencyType === 'BTC') {\n            var compressedPubLength = 33; // Size of compressed public key\n            var pubkeys = [];\n            var sigs = [];\n            var n = 0;\n            // Parse the signature for each output -- they are returned\n            // in the serialized payload in form [pubkey, sig]\n            // There is one signature per output\n            while (off < res.length) {\n                // Exit out if we have seen all the returned sigs and pubkeys\n                if (res[off] !== 0x30)\n                    break;\n                // Otherwise grab another set\n                // Note that all DER sigs returned fill the maximum 74 byte buffer, but also\n                // contain a length at off+1, which we use to parse the non-zero data.\n                // First get the signature from its slot\n                var sigStart = off;\n                var sigEnd = off + 2 + res[off + 1];\n                sigs.push(res.slice(sigStart, sigEnd));\n                // Next, shift by the full set of signatures to hit the respective pubkey\n                // NOTE: The data returned is: [<sig0>, <sig1>, ... <sig9>][<pubkey0>, <pubkey1>, ... <pubkey9>]\n                var pubStart = n * compressedPubLength + PUBKEYS_OFFSET;\n                var pubEnd = (n + 1) * compressedPubLength + PUBKEYS_OFFSET;\n                pubkeys.push(res.slice(pubStart, pubEnd));\n                // Update offset to hit the next signature slot\n                off += DERLength;\n                n += 1;\n            }\n            // Build the transaction data to be serialized\n            var preSerializedData = {\n                inputs: [],\n                outputs: [],\n            };\n            // First output comes from request dta\n            preSerializedData.outputs.push({\n                value: req.origData.value,\n                recipient: req.origData.recipient,\n            });\n            if (req.changeData.value > 0) {\n                // Second output comes from change data\n                preSerializedData.outputs.push({\n                    value: req.changeData.value,\n                    recipient: changeRecipient,\n                });\n            }\n            // Add the inputs\n            for (var i = 0; i < sigs.length; i++) {\n                preSerializedData.inputs.push({\n                    hash: req.origData.prevOuts[i].txHash,\n                    index: req.origData.prevOuts[i].index,\n                    sig: sigs[i],\n                    pubkey: pubkeys[i],\n                    signerPath: req.origData.prevOuts[i].signerPath,\n                });\n            }\n            // Finally, serialize the transaction\n            var serializedTx = bitcoin_1.default.serializeTx(preSerializedData);\n            // Generate the transaction hash so the user can look this transaction up later\n            var preImageTxHash = serializedTx;\n            var txHashPre = buffer_1.Buffer.from((0, sha_1.sha256)().update(buffer_1.Buffer.from(preImageTxHash, 'hex')).digest('hex'), 'hex');\n            // Add extra data for debugging/lookup purposes\n            return {\n                tx: serializedTx,\n                txHash: (0, sha_1.sha256)().update(txHashPre).digest('hex'),\n                changeRecipient: changeRecipient,\n                sigs: sigs,\n            };\n        }\n        else if (currencyType === 'ETH') {\n            var sig = (0, util_1.parseDER)(res.slice(off, off + 2 + res[off + 1]));\n            off += DERLength;\n            var ethAddr = res.slice(off, off + 20);\n            // Determine the `v` param and add it to the sig before returning\n            var _a = ethereum_1.default.buildEthRawTx(req, sig, ethAddr), rawTx = _a.rawTx, sigWithV = _a.sigWithV;\n            return {\n                tx: \"0x\".concat(rawTx),\n                txHash: \"0x\".concat(ethereum_1.default.hashTransaction(rawTx)),\n                sig: {\n                    v: sigWithV.v,\n                    r: sigWithV.r.toString('hex'),\n                    s: sigWithV.s.toString('hex'),\n                },\n                signer: ethAddr,\n            };\n        }\n        else if (currencyType === 'ETH_MSG') {\n            var sig = (0, util_1.parseDER)(res.slice(off, off + 2 + res[off + 1]));\n            off += DERLength;\n            var signer = res.slice(off, off + 20);\n            var validatedSig = ethereum_1.default.validateEthereumMsgResponse({ signer: signer, sig: sig }, req);\n            return {\n                sig: {\n                    v: validatedSig.v,\n                    r: validatedSig.r.toString('hex'),\n                    s: validatedSig.s.toString('hex'),\n                },\n                signer: signer,\n            };\n        }\n        else {\n            // Generic signing request\n            return (0, genericSigning_1.parseGenericSigningResponse)(res, off, req.curveType, req.omitPubkey);\n        }\n    };\n    /**\n     * Reset the active wallets to empty values.\n     * @category Device Response\n     * @internal\n     */\n    Client.prototype._resetActiveWallets = function () {\n        this.activeWallets.internal.uid = EMPTY_WALLET_UID;\n        this.activeWallets.internal.name = null;\n        this.activeWallets.internal.capabilities = null;\n        this.activeWallets.external.uid = EMPTY_WALLET_UID;\n        this.activeWallets.external.name = null;\n        this.activeWallets.external.capabilities = null;\n        return;\n    };\n    /**\n     * Update the payload with the current wallet UID.\n     * Some (not all) requests require the active wallet UID\n     * in order for Lattice firmware to accept them. If we get\n     * a \"wrong wallet\" error, the SDK will automatically request\n     * the current wallet UID from the device and may retry the\n     * request, but the original request payload must be modified.\n     */\n    Client.prototype._replaceWalletUID = function (encReqCode, payload) {\n        var wallet = this.getActiveWallet();\n        if (!wallet) {\n            return null;\n        }\n        // See if we can modify the payload and retry\n        if (encReqCode === 'GET_ADDRESSES') {\n            wallet.uid.copy(payload, 0);\n            return payload;\n        }\n        else if (encReqCode === 'SIGN_TRANSACTION') {\n            wallet.uid.copy(payload, 2);\n            return payload;\n        }\n        // Not allowed to retry\n        return null;\n    };\n    /**\n     * Return JSON-stringified version of state data. Can be used to\n     * rehydrate an SDK session without reconnecting to the target Lattice.\n     */\n    Client.prototype._packStateData = function () {\n        try {\n            var data = {\n                activeWallets: {\n                    internal: {\n                        uid: this.activeWallets.internal.uid.toString('hex'),\n                        name: this.activeWallets.internal.name.toString(),\n                        capabilities: this.activeWallets.internal.capabilities,\n                    },\n                    external: {\n                        uid: this.activeWallets.external.uid.toString('hex'),\n                        name: this.activeWallets.external.name.toString(),\n                        capabilities: this.activeWallets.external.capabilities,\n                    }\n                },\n                ephemeralPub: this.ephemeralPub.getPublic().encode('hex'),\n                fwVersion: this.fwVersion.toString('hex'),\n                deviceId: this.deviceId,\n                name: this.name,\n                baseUrl: this.baseUrl,\n                privKey: this.privKey.toString('hex'),\n                retryCount: this.retryCount,\n                timeout: this.timeout,\n            };\n            return JSON.stringify(data);\n        }\n        catch (err) {\n            console.warn('Could not pack state data.');\n            return null;\n        }\n    };\n    /**\n     * Unpack a JSON-stringified version of state data and apply it to state.\n     * This will allow us to rehydrate an old session.\n     */\n    Client.prototype._unpackAndApplyStateData = function (data) {\n        try {\n            var unpacked = JSON.parse(data);\n            // Attempty to parse the data\n            var internalWallet = {\n                uid: buffer_1.Buffer.from(unpacked.activeWallets.internal.uid, 'hex'),\n                name: buffer_1.Buffer.from(unpacked.activeWallets.internal.name),\n                capabilities: unpacked.activeWallets.internal.capabilities,\n                external: false,\n            };\n            var externalWallet = {\n                uid: buffer_1.Buffer.from(unpacked.activeWallets.external.uid, 'hex'),\n                name: buffer_1.Buffer.from(unpacked.activeWallets.external.name),\n                capabilities: unpacked.activeWallets.external.capabilities,\n                external: true,\n            };\n            var ephemeralPubBytes = buffer_1.Buffer.from(unpacked.ephemeralPub, 'hex');\n            var fwVersionBytes = buffer_1.Buffer.from(unpacked.fwVersion, 'hex');\n            var privKeyBytes = buffer_1.Buffer.from(unpacked.privKey, 'hex');\n            // Apply unpacked params\n            this.activeWallets.internal = internalWallet;\n            this.activeWallets.external = externalWallet;\n            this.ephemeralPub = (0, util_1.getP256KeyPairFromPub)(ephemeralPubBytes);\n            this.fwVersion = fwVersionBytes;\n            this.deviceId = unpacked.deviceId;\n            this.name = unpacked.name;\n            this.baseUrl = unpacked.baseUrl;\n            this.privKey = privKeyBytes;\n            this.key = (0, util_1.getP256KeyPair)(this.privKey);\n            this.retryCount = unpacked.retryCount;\n            this.timeout = unpacked.timeout;\n        }\n        catch (err) {\n            console.warn('Could not apply state data.');\n        }\n    };\n    /**\n     * Get the active wallet.\n     * @returns The active wallet.\n     */\n    Client.prototype.getActiveWallet = function () {\n        if (!EMPTY_WALLET_UID.equals(this.activeWallets.external.uid)) {\n            return this.activeWallets.external;\n        }\n        else if (!EMPTY_WALLET_UID.equals(this.activeWallets.internal.uid)) {\n            return this.activeWallets.internal;\n        }\n        else {\n            return null;\n        }\n    };\n    /**\n     * Check if the user has an active wallet\"\n     * @returns true is user has active wallet\n     */\n    Client.prototype.hasActiveWallet = function () {\n        return this.getActiveWallet() !== null;\n    };\n    /**\n     * Get 64 bytes representing the public key\n     * This is the uncompressed key without the leading 04 byte\n     * @param LE - Whether to return the public key in little endian format.\n     * @returns A Buffer containing the public key.\n     */\n    Client.prototype.pubKeyBytes = function (LE) {\n        if (LE === void 0) { LE = false; }\n        var k = this.key.getPublic();\n        var p = k.encode('hex');\n        var pb = buffer_1.Buffer.from(p, 'hex');\n        if (LE === true) {\n            // Need to flip X and Y components to little endian\n            var x = pb.slice(1, 33).reverse();\n            var y = pb.slice(33, 65).reverse();\n            // @ts-expect-error - TODO: Find out why Buffer won't accept pb[0]\n            return buffer_1.Buffer.concat([pb[0], x, y]);\n        }\n        else {\n            return pb;\n        }\n    };\n    /**\n     * TODO: Find a better way to export this.\n     * `parseAbi` takes a source and data as arguments, and returns the parsed ABI.\n     * @param source - The name of the source of the ABI data.\n     * @param data - The data to parse.\n     * @param skipErrors - If true, errors will be skipped and the function will return an object with\n     * an error property.\n     * @returns The parsed ABI.\n     */\n    Client.prototype.parseAbi = function (source, data, skipErrors) {\n        if (skipErrors === void 0) { skipErrors = false; }\n        switch (source) {\n            case 'etherscan':\n                return ethereumAbi_1.abiParsers[source](data, skipErrors);\n            default:\n                return { err: \"No \".concat(source, \" parser available.\") };\n        }\n    };\n    return Client;\n}());\nexports.Client = Client;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CHAIN_IDS = exports.API_BASE_URL = void 0;\nexports.API_BASE_URL = 'https://transaction.metaswap.codefi.network';\nexports.CHAIN_IDS = {\n    ETHEREUM: '0x1',\n    RINKEBY: '0x4',\n    BSC: '0x38',\n};\n//# sourceMappingURL=constants.js.map","\"use strict\";\n/** API */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.cancellationReasonToStatusMap = exports.SmartTransactionStatuses = exports.SmartTransactionCancellationReason = exports.SmartTransactionMinedTx = exports.APIType = void 0;\nvar APIType;\n(function (APIType) {\n    APIType[APIType[\"GET_FEES\"] = 0] = \"GET_FEES\";\n    APIType[APIType[\"ESTIMATE_GAS\"] = 1] = \"ESTIMATE_GAS\";\n    APIType[APIType[\"SUBMIT_TRANSACTIONS\"] = 2] = \"SUBMIT_TRANSACTIONS\";\n    APIType[APIType[\"CANCEL\"] = 3] = \"CANCEL\";\n    APIType[APIType[\"BATCH_STATUS\"] = 4] = \"BATCH_STATUS\";\n    APIType[APIType[\"LIVENESS\"] = 5] = \"LIVENESS\";\n})(APIType = exports.APIType || (exports.APIType = {}));\n/** SmartTransactions */\nvar SmartTransactionMinedTx;\n(function (SmartTransactionMinedTx) {\n    SmartTransactionMinedTx[\"NOT_MINED\"] = \"not_mined\";\n    SmartTransactionMinedTx[\"SUCCESS\"] = \"success\";\n    SmartTransactionMinedTx[\"CANCELLED\"] = \"cancelled\";\n    SmartTransactionMinedTx[\"REVERTED\"] = \"reverted\";\n    SmartTransactionMinedTx[\"UNKNOWN\"] = \"unknown\";\n})(SmartTransactionMinedTx = exports.SmartTransactionMinedTx || (exports.SmartTransactionMinedTx = {}));\nvar SmartTransactionCancellationReason;\n(function (SmartTransactionCancellationReason) {\n    SmartTransactionCancellationReason[\"WOULD_REVERT\"] = \"would_revert\";\n    SmartTransactionCancellationReason[\"TOO_CHEAP\"] = \"too_cheap\";\n    SmartTransactionCancellationReason[\"DEADLINE_MISSED\"] = \"deadline_missed\";\n    SmartTransactionCancellationReason[\"INVALID_NONCE\"] = \"invalid_nonce\";\n    SmartTransactionCancellationReason[\"USER_CANCELLED\"] = \"user_cancelled\";\n    SmartTransactionCancellationReason[\"NOT_CANCELLED\"] = \"not_cancelled\";\n})(SmartTransactionCancellationReason = exports.SmartTransactionCancellationReason || (exports.SmartTransactionCancellationReason = {}));\nvar SmartTransactionStatuses;\n(function (SmartTransactionStatuses) {\n    SmartTransactionStatuses[\"PENDING\"] = \"pending\";\n    SmartTransactionStatuses[\"SUCCESS\"] = \"success\";\n    SmartTransactionStatuses[\"REVERTED\"] = \"reverted\";\n    SmartTransactionStatuses[\"UNKNOWN\"] = \"unknown\";\n    SmartTransactionStatuses[\"CANCELLED_WOULD_REVERT\"] = \"cancelled_would_revert\";\n    SmartTransactionStatuses[\"CANCELLED_TOO_CHEAP\"] = \"cancelled_too_cheap\";\n    SmartTransactionStatuses[\"CANCELLED_DEADLINE_MISSED\"] = \"cancelled_deadline_missed\";\n    SmartTransactionStatuses[\"CANCELLED_INVALID_NONCE\"] = \"cancelled_invalid_nonce\";\n    SmartTransactionStatuses[\"CANCELLED_USER_CANCELLED\"] = \"cancelled_user_cancelled\";\n    SmartTransactionStatuses[\"RESOLVED\"] = \"resolved\";\n})(SmartTransactionStatuses = exports.SmartTransactionStatuses || (exports.SmartTransactionStatuses = {}));\nexports.cancellationReasonToStatusMap = {\n    [SmartTransactionCancellationReason.WOULD_REVERT]: SmartTransactionStatuses.CANCELLED_WOULD_REVERT,\n    [SmartTransactionCancellationReason.TOO_CHEAP]: SmartTransactionStatuses.CANCELLED_TOO_CHEAP,\n    [SmartTransactionCancellationReason.DEADLINE_MISSED]: SmartTransactionStatuses.CANCELLED_DEADLINE_MISSED,\n    [SmartTransactionCancellationReason.INVALID_NONCE]: SmartTransactionStatuses.CANCELLED_INVALID_NONCE,\n    [SmartTransactionCancellationReason.USER_CANCELLED]: SmartTransactionStatuses.CANCELLED_USER_CANCELLED,\n};\n//# sourceMappingURL=types.js.map",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) -- > 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handleFetch = exports.getStxProcessingTime = exports.snapshotFromTxMeta = exports.replayHistory = exports.generateHistoryEntry = exports.calculateStatus = exports.getAPIRequestURL = exports.isSmartTransactionStatusResolved = exports.isSmartTransactionPending = void 0;\nconst fast_json_patch_1 = __importDefault(require(\"fast-json-patch\"));\nconst lodash_1 = require(\"lodash\");\nconst types_1 = require(\"./types\");\nconst constants_1 = require(\"./constants\");\nfunction isSmartTransactionPending(smartTransaction) {\n    return smartTransaction.status === types_1.SmartTransactionStatuses.PENDING;\n}\nexports.isSmartTransactionPending = isSmartTransactionPending;\nconst isSmartTransactionStatusResolved = (status) => status === 'uuid_not_found';\nexports.isSmartTransactionStatusResolved = isSmartTransactionStatusResolved;\n// TODO use actual url once API is defined\nfunction getAPIRequestURL(apiType, chainId) {\n    const chainIdDec = parseInt(chainId, 16);\n    switch (apiType) {\n        case types_1.APIType.GET_FEES: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/getFees`;\n        }\n        case types_1.APIType.ESTIMATE_GAS: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/estimateGas`;\n        }\n        case types_1.APIType.SUBMIT_TRANSACTIONS: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/submitTransactions`;\n        }\n        case types_1.APIType.CANCEL: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/cancel`;\n        }\n        case types_1.APIType.BATCH_STATUS: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/batchStatus`;\n        }\n        case types_1.APIType.LIVENESS: {\n            return `${constants_1.API_BASE_URL}/networks/${chainIdDec}/health`;\n        }\n        default: {\n            throw new Error(`Invalid APIType`); // It can never get here thanks to TypeScript.\n        }\n    }\n}\nexports.getAPIRequestURL = getAPIRequestURL;\nconst calculateStatus = (status) => {\n    if (exports.isSmartTransactionStatusResolved(status)) {\n        return types_1.SmartTransactionStatuses.RESOLVED;\n    }\n    const cancellations = [\n        types_1.SmartTransactionCancellationReason.WOULD_REVERT,\n        types_1.SmartTransactionCancellationReason.TOO_CHEAP,\n        types_1.SmartTransactionCancellationReason.DEADLINE_MISSED,\n        types_1.SmartTransactionCancellationReason.INVALID_NONCE,\n        types_1.SmartTransactionCancellationReason.USER_CANCELLED,\n    ];\n    if ((status === null || status === void 0 ? void 0 : status.minedTx) === types_1.SmartTransactionMinedTx.NOT_MINED) {\n        if (status.cancellationReason ===\n            types_1.SmartTransactionCancellationReason.NOT_CANCELLED) {\n            return types_1.SmartTransactionStatuses.PENDING;\n        }\n        const isCancellation = cancellations.findIndex((cancellation) => cancellation === status.cancellationReason) > -1;\n        if (status.cancellationReason && isCancellation) {\n            return types_1.cancellationReasonToStatusMap[status.cancellationReason];\n        }\n    }\n    else if ((status === null || status === void 0 ? void 0 : status.minedTx) === types_1.SmartTransactionMinedTx.SUCCESS) {\n        return types_1.SmartTransactionStatuses.SUCCESS;\n    }\n    else if ((status === null || status === void 0 ? void 0 : status.minedTx) === types_1.SmartTransactionMinedTx.REVERTED) {\n        return types_1.SmartTransactionStatuses.REVERTED;\n    }\n    else if ((status === null || status === void 0 ? void 0 : status.minedTx) === types_1.SmartTransactionMinedTx.UNKNOWN) {\n        return types_1.SmartTransactionStatuses.UNKNOWN;\n    }\n    return types_1.SmartTransactionStatuses.UNKNOWN;\n};\nexports.calculateStatus = calculateStatus;\n/**\n  Generates an array of history objects sense the previous state.\n  The object has the keys\n    op (the operation performed),\n    path (the key and if a nested object then each key will be separated with a `/`)\n    value\n  with the first entry having the note and a timestamp when the change took place\n  @param {Object} previousState - the previous state of the object\n  @param {Object} newState - the update object\n  @param {string} [note] - a optional note for the state change\n  @returns {Array}\n*/\nfunction generateHistoryEntry(previousState, newState, note) {\n    const entry = fast_json_patch_1.default.compare(previousState, newState);\n    // Add a note to the first op, since it breaks if we append it to the entry\n    if (entry[0]) {\n        if (note) {\n            entry[0].note = note;\n        }\n        entry[0].timestamp = Date.now();\n    }\n    return entry;\n}\nexports.generateHistoryEntry = generateHistoryEntry;\n/**\n  Recovers previous txMeta state obj\n  @returns {Object}\n*/\nfunction replayHistory(_shortHistory) {\n    const shortHistory = lodash_1.cloneDeep(_shortHistory);\n    return shortHistory.reduce((val, entry) => fast_json_patch_1.default.applyPatch(val, entry).newDocument);\n}\nexports.replayHistory = replayHistory;\n/**\n * Snapshot {@code txMeta}\n * @param {Object} txMeta - the tx metadata object\n * @returns {Object} a deep clone without history\n */\nfunction snapshotFromTxMeta(txMeta) {\n    const shallow = Object.assign({}, txMeta);\n    delete shallow.history;\n    return lodash_1.cloneDeep(shallow);\n}\nexports.snapshotFromTxMeta = snapshotFromTxMeta;\n/**\n * Returns processing time for an STX in seconds.\n * @param {number} smartTransactionSubmittedtime\n * @returns {number} Processing time in seconds.\n */\nconst getStxProcessingTime = (smartTransactionSubmittedtime) => {\n    if (!smartTransactionSubmittedtime) {\n        return undefined;\n    }\n    return Math.round((Date.now() - smartTransactionSubmittedtime) / 1000);\n};\nexports.getStxProcessingTime = getStxProcessingTime;\nasync function handleFetch(request, options) {\n    const response = await fetch(request, options);\n    const json = await response.json();\n    if (!response.ok) {\n        const { error: type, error_details: message } = json;\n        console.log(`response`, response);\n        throw new Error(`Fetch error:${JSON.stringify({\n            status: response.status,\n            type,\n            message,\n        })}`);\n    }\n    return json;\n}\nexports.handleFetch = handleFetch;\n//# sourceMappingURL=utils.js.map","var baseClone = require('./_baseClone');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);\n}\n\nmodule.exports = cloneDeep;\n","var baseAssignValue = require('./_baseAssignValue'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee');\n\n/**\n * Creates an object with the same keys as `object` and values generated\n * by running each own enumerable string keyed property of `object` thru\n * `iteratee`. The iteratee is invoked with three arguments:\n * (value, key, object).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @returns {Object} Returns the new mapped object.\n * @see _.mapKeys\n * @example\n *\n * var users = {\n *   'fred':    { 'user': 'fred',    'age': 40 },\n *   'pebbles': { 'user': 'pebbles', 'age': 1 }\n * };\n *\n * _.mapValues(users, function(o) { return o.age; });\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n *\n * // The `_.property` iteratee shorthand.\n * _.mapValues(users, 'age');\n * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)\n */\nfunction mapValues(object, iteratee) {\n  var result = {};\n  iteratee = baseIteratee(iteratee, 3);\n\n  baseForOwn(object, function(value, key, object) {\n    baseAssignValue(result, key, iteratee(value, key, object));\n  });\n  return result;\n}\n\nmodule.exports = mapValues;\n","'use strict'\nmodule.exports = require('./lib')(require('./lib/elliptic'))\n","\"use strict\";\n\nexports.__esModule = true;\n\nvar _api = require(\"./api\");\n\nObject.keys(_api).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _api[key]) return;\n  exports[key] = _api[key];\n});\n\nvar _events = require(\"./events\");\n\nObject.keys(_events).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _events[key]) return;\n  exports[key] = _events[key];\n});\n\nvar _misc = require(\"./misc\");\n\nObject.keys(_misc).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _misc[key]) return;\n  exports[key] = _misc[key];\n});\n\nvar _params = require(\"./params\");\n\nObject.keys(_params).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _params[key]) return;\n  exports[key] = _params[key];\n});\n\nvar _account = require(\"./account\");\n\nObject.keys(_account).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _account[key]) return;\n  exports[key] = _account[key];\n});\n\nvar _device = require(\"./trezor/device\");\n\nObject.keys(_device).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _device[key]) return;\n  exports[key] = _device[key];\n});\n\nvar _management = require(\"./trezor/management\");\n\nObject.keys(_management).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _management[key]) return;\n  exports[key] = _management[key];\n});\n\nvar _bitcoin = require(\"./networks/bitcoin\");\n\nObject.keys(_bitcoin).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _bitcoin[key]) return;\n  exports[key] = _bitcoin[key];\n});\n\nvar _binance = require(\"./networks/binance\");\n\nObject.keys(_binance).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _binance[key]) return;\n  exports[key] = _binance[key];\n});\n\nvar _cardano = require(\"./networks/cardano\");\n\nObject.keys(_cardano).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _cardano[key]) return;\n  exports[key] = _cardano[key];\n});\n\nvar _coinInfo = require(\"./networks/coinInfo\");\n\nObject.keys(_coinInfo).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _coinInfo[key]) return;\n  exports[key] = _coinInfo[key];\n});\n\nvar _eos = require(\"./networks/eos\");\n\nObject.keys(_eos).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _eos[key]) return;\n  exports[key] = _eos[key];\n});\n\nvar _ethereum = require(\"./networks/ethereum\");\n\nObject.keys(_ethereum).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _ethereum[key]) return;\n  exports[key] = _ethereum[key];\n});\n\nvar _nem = require(\"./networks/nem\");\n\nObject.keys(_nem).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _nem[key]) return;\n  exports[key] = _nem[key];\n});\n\nvar _ripple = require(\"./networks/ripple\");\n\nObject.keys(_ripple).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _ripple[key]) return;\n  exports[key] = _ripple[key];\n});\n\nvar _stellar = require(\"./networks/stellar\");\n\nObject.keys(_stellar).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _stellar[key]) return;\n  exports[key] = _stellar[key];\n});\n\nvar _tezos = require(\"./networks/tezos\");\n\nObject.keys(_tezos).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _tezos[key]) return;\n  exports[key] = _tezos[key];\n});\n\nvar _blockchain = require(\"./backend/blockchain\");\n\nObject.keys(_blockchain).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _blockchain[key]) return;\n  exports[key] = _blockchain[key];\n});\n\nvar _transactions = require(\"./backend/transactions\");\n\nObject.keys(_transactions).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (key in exports && exports[key] === _transactions[key]) return;\n  exports[key] = _transactions[key];\n});","\"use strict\";\n\nexports.__esModule = true;\nexports.CARDANO = exports.UI = exports.TRANSPORT = exports.POPUP = exports.NETWORK = exports.IFRAME = exports.ERRORS = exports.DEVICE = exports.BLOCKCHAIN = exports.BLOCKCHAIN_EVENT = exports.RESPONSE_EVENT = exports.TRANSPORT_EVENT = exports.DEVICE_EVENT = exports.UI_EVENT = exports.CORE_EVENT = void 0;\n\nvar BLOCKCHAIN = _interopRequireWildcard(require(\"./blockchain\"));\n\nexports.BLOCKCHAIN = BLOCKCHAIN;\n\nvar DEVICE = _interopRequireWildcard(require(\"./device\"));\n\nexports.DEVICE = DEVICE;\n\nvar ERRORS = _interopRequireWildcard(require(\"./errors\"));\n\nexports.ERRORS = ERRORS;\n\nvar IFRAME = _interopRequireWildcard(require(\"./iframe\"));\n\nexports.IFRAME = IFRAME;\n\nvar NETWORK = _interopRequireWildcard(require(\"./network\"));\n\nexports.NETWORK = NETWORK;\n\nvar POPUP = _interopRequireWildcard(require(\"./popup\"));\n\nexports.POPUP = POPUP;\n\nvar TRANSPORT = _interopRequireWildcard(require(\"./transport\"));\n\nexports.TRANSPORT = TRANSPORT;\n\nvar UI = _interopRequireWildcard(require(\"./ui\"));\n\nexports.UI = UI;\n\nvar CARDANO = _interopRequireWildcard(require(\"./cardano\"));\n\nexports.CARDANO = CARDANO;\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar CORE_EVENT = 'CORE_EVENT';\nexports.CORE_EVENT = CORE_EVENT;\nvar UI_EVENT = 'UI_EVENT';\nexports.UI_EVENT = UI_EVENT;\nvar DEVICE_EVENT = 'DEVICE_EVENT';\nexports.DEVICE_EVENT = DEVICE_EVENT;\nvar TRANSPORT_EVENT = 'TRANSPORT_EVENT';\nexports.TRANSPORT_EVENT = TRANSPORT_EVENT;\nvar RESPONSE_EVENT = 'RESPONSE_EVENT';\nexports.RESPONSE_EVENT = RESPONSE_EVENT;\nvar BLOCKCHAIN_EVENT = 'BLOCKCHAIN_EVENT';\nexports.BLOCKCHAIN_EVENT = BLOCKCHAIN_EVENT;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.disableWebUSB = exports.requestLogin = exports.customMessage = exports.getSettings = exports.renderWebUSBButton = exports.uiResponse = exports.call = exports.init = exports.cancel = exports.dispose = exports.manifest = exports.eventEmitter = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _events = _interopRequireDefault(require(\"events\"));\n\nvar _PopupManager = _interopRequireDefault(require(\"../../popup/PopupManager\"));\n\nvar iframe = _interopRequireWildcard(require(\"../../iframe/builder\"));\n\nvar _button = _interopRequireDefault(require(\"../../webusb/button\"));\n\nvar _message = require(\"../../message\");\n\nvar _builder2 = require(\"../../message/builder\");\n\nvar _ConnectSettings = require(\"../../data/ConnectSettings\");\n\nvar _debug = require(\"../../utils/debug\");\n\nvar _constants = require(\"../../constants\");\n\nvar $T = _interopRequireWildcard(require(\"../../types\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar eventEmitter = new _events[\"default\"]();\nexports.eventEmitter = eventEmitter;\n\nvar _log = (0, _debug.initLog)('[trezor-connect.js]');\n\nvar _settings;\n\nvar _popupManager;\n\nvar initPopupManager = function initPopupManager() {\n  var pm = new _PopupManager[\"default\"](_settings);\n  pm.on(_constants.POPUP.CLOSED, function (error) {\n    iframe.postMessage({\n      type: _constants.POPUP.CLOSED,\n      payload: error ? {\n        error: error\n      } : null\n    }, false);\n  });\n  return pm;\n};\n\nvar manifest = function manifest(data) {\n  _settings = (0, _ConnectSettings.parse)({\n    manifest: data\n  });\n};\n\nexports.manifest = manifest;\n\nvar dispose = function dispose() {\n  eventEmitter.removeAllListeners();\n  iframe.dispose();\n\n  if (_popupManager) {\n    _popupManager.close();\n  }\n};\n\nexports.dispose = dispose;\n\nvar cancel = function cancel(error) {\n  if (_popupManager) {\n    _popupManager.emit(_constants.POPUP.CLOSED, error);\n  }\n}; // handle message received from iframe\n\n\nexports.cancel = cancel;\n\nvar handleMessage = function handleMessage(messageEvent) {\n  // ignore messages from domain other then iframe origin\n  if (messageEvent.origin !== iframe.origin) return;\n  var message = (0, _message.parseMessage)(messageEvent.data);\n  var event = message.event,\n      type = message.type,\n      payload = message.payload;\n  var id = message.id || 0;\n\n  _log.log('handleMessage', message);\n\n  switch (event) {\n    case _constants.RESPONSE_EVENT:\n      if (iframe.messagePromises[id]) {\n        // resolve message promise (send result of call method)\n        iframe.messagePromises[id].resolve({\n          id: id,\n          success: message.success,\n          payload: payload\n        });\n        delete iframe.messagePromises[id];\n      } else {\n        _log.warn(\"Unknown message id \" + id);\n      }\n\n      break;\n\n    case _constants.DEVICE_EVENT:\n      // pass DEVICE event up to html\n      eventEmitter.emit(event, message);\n      eventEmitter.emit(type, payload); // DEVICE_EVENT also emit single events (connect/disconnect...)\n\n      break;\n\n    case _constants.TRANSPORT_EVENT:\n      eventEmitter.emit(event, message);\n      eventEmitter.emit(type, payload);\n      break;\n\n    case _constants.BLOCKCHAIN_EVENT:\n      eventEmitter.emit(event, message);\n      eventEmitter.emit(type, payload);\n      break;\n\n    case _constants.UI_EVENT:\n      if (type === _constants.IFRAME.BOOTSTRAP) {\n        iframe.clearTimeout();\n        break;\n      }\n\n      if (type === _constants.IFRAME.LOADED) {\n        iframe.initPromise.resolve();\n      }\n\n      if (type === _constants.IFRAME.ERROR) {\n        iframe.initPromise.reject(payload.error);\n      } // pass UI event up\n\n\n      eventEmitter.emit(event, message);\n      eventEmitter.emit(type, payload);\n      break;\n\n    default:\n      _log.log('Undefined message', event, messageEvent);\n\n  }\n};\n\nvar init = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(settings) {\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (settings === void 0) {\n              settings = {};\n            }\n\n            if (!iframe.instance) {\n              _context.next = 3;\n              break;\n            }\n\n            throw _constants.ERRORS.TypedError('Init_AlreadyInitialized');\n\n          case 3:\n            if (!_settings) {\n              _settings = (0, _ConnectSettings.parse)(settings);\n            }\n\n            if (_settings.manifest) {\n              _context.next = 6;\n              break;\n            }\n\n            throw _constants.ERRORS.TypedError('Init_ManifestMissing');\n\n          case 6:\n            if (!_settings.lazyLoad) {\n              _context.next = 9;\n              break;\n            }\n\n            // reset \"lazyLoad\" after first use\n            _settings.lazyLoad = false;\n            return _context.abrupt(\"return\");\n\n          case 9:\n            if (!_popupManager) {\n              _popupManager = initPopupManager();\n            }\n\n            _log.enabled = !!_settings.debug;\n            window.addEventListener('message', handleMessage);\n            window.addEventListener('unload', dispose);\n            _context.next = 15;\n            return iframe.init(_settings);\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function init(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.init = init;\n\nvar call = /*#__PURE__*/function () {\n  var _ref2 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2(params) {\n    var response;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!(!iframe.instance && !iframe.timeout)) {\n              _context2.next = 15;\n              break;\n            }\n\n            // init popup with lazy loading before iframe initialization\n            _settings = (0, _ConnectSettings.parse)(_settings);\n\n            if (_settings.manifest) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", (0, _message.errorMessage)(_constants.ERRORS.TypedError('Init_ManifestMissing')));\n\n          case 4:\n            if (!_popupManager) {\n              _popupManager = initPopupManager();\n            }\n\n            _popupManager.request(true); // auto init with default settings\n\n\n            _context2.prev = 6;\n            _context2.next = 9;\n            return init(_settings);\n\n          case 9:\n            _context2.next = 15;\n            break;\n\n          case 11:\n            _context2.prev = 11;\n            _context2.t0 = _context2[\"catch\"](6);\n\n            if (_popupManager) {\n              // Catch fatal iframe errors (not loading)\n              if (['Init_IframeBlocked', 'Init_IframeTimeout'].includes(_context2.t0.code)) {\n                _popupManager.postMessage((0, _builder2.UiMessage)(_constants.UI.IFRAME_FAILURE));\n              } else {\n                _popupManager.close();\n              }\n            }\n\n            return _context2.abrupt(\"return\", (0, _message.errorMessage)(_context2.t0));\n\n          case 15:\n            if (!iframe.timeout) {\n              _context2.next = 17;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", (0, _message.errorMessage)(_constants.ERRORS.TypedError('Init_ManifestMissing')));\n\n          case 17:\n            if (!iframe.error) {\n              _context2.next = 19;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", (0, _message.errorMessage)(iframe.error));\n\n          case 19:\n            // request popup window it might be used in the future\n            if (_settings.popup && _popupManager) {\n              _popupManager.request();\n            } // post message to iframe\n\n\n            _context2.prev = 20;\n            _context2.next = 23;\n            return iframe.postMessage({\n              type: _constants.IFRAME.CALL,\n              payload: params\n            });\n\n          case 23:\n            response = _context2.sent;\n\n            if (!response) {\n              _context2.next = 27;\n              break;\n            }\n\n            if (!response.success && response.payload.code !== 'Device_CallInProgress' && _popupManager) {\n              _popupManager.unlock();\n            }\n\n            return _context2.abrupt(\"return\", response);\n\n          case 27:\n            if (_popupManager) {\n              _popupManager.unlock();\n            }\n\n            return _context2.abrupt(\"return\", (0, _message.errorMessage)(_constants.ERRORS.TypedError('Method_NoResponse')));\n\n          case 31:\n            _context2.prev = 31;\n            _context2.t1 = _context2[\"catch\"](20);\n\n            _log.error('__call error', _context2.t1);\n\n            if (_popupManager) {\n              _popupManager.close();\n            }\n\n            return _context2.abrupt(\"return\", (0, _message.errorMessage)(_context2.t1));\n\n          case 36:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[6, 11], [20, 31]]);\n  }));\n\n  return function call(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.call = call;\n\nvar customMessageResponse = function customMessageResponse(payload) {\n  iframe.postMessage({\n    event: _constants.UI_EVENT,\n    type: _constants.UI.CUSTOM_MESSAGE_RESPONSE,\n    payload: payload\n  });\n};\n\nvar uiResponse = function uiResponse(response) {\n  var type = response.type,\n      payload = response.payload;\n  iframe.postMessage({\n    event: _constants.UI_EVENT,\n    type: type,\n    payload: payload\n  });\n};\n\nexports.uiResponse = uiResponse;\n\nvar renderWebUSBButton = function renderWebUSBButton(className) {\n  (0, _button[\"default\"])(className, _settings.webusbSrc, iframe.origin);\n};\n\nexports.renderWebUSBButton = renderWebUSBButton;\n\nvar getSettings = function getSettings() {\n  if (!iframe.instance) {\n    return Promise.resolve((0, _message.errorMessage)(_constants.ERRORS.TypedError('Init_NotInitialized')));\n  }\n\n  return call({\n    method: 'getSettings'\n  });\n};\n\nexports.getSettings = getSettings;\n\nvar customMessage = /*#__PURE__*/function () {\n  var _ref3 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(params) {\n    var callback, customMessageListener, response;\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            if (!(typeof params.callback !== 'function')) {\n              _context4.next = 2;\n              break;\n            }\n\n            return _context4.abrupt(\"return\", (0, _message.errorMessage)(_constants.ERRORS.TypedError('Method_CustomMessage_Callback')));\n\n          case 2:\n            // TODO: set message listener only if iframe is loaded correctly\n            callback = params.callback;\n\n            customMessageListener = /*#__PURE__*/function () {\n              var _ref4 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n                var data, payload;\n                return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n                  while (1) {\n                    switch (_context3.prev = _context3.next) {\n                      case 0:\n                        data = event.data;\n\n                        if (!(data && data.type === _constants.UI.CUSTOM_MESSAGE_REQUEST)) {\n                          _context3.next = 6;\n                          break;\n                        }\n\n                        _context3.next = 4;\n                        return callback(data.payload);\n\n                      case 4:\n                        payload = _context3.sent;\n\n                        if (payload) {\n                          customMessageResponse(payload);\n                        } else {\n                          customMessageResponse({\n                            message: 'release'\n                          });\n                        }\n\n                      case 6:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }\n                }, _callee3);\n              }));\n\n              return function customMessageListener(_x4) {\n                return _ref4.apply(this, arguments);\n              };\n            }();\n\n            window.addEventListener('message', customMessageListener, false);\n            _context4.next = 7;\n            return call(_objectSpread(_objectSpread({\n              method: 'customMessage'\n            }, params), {}, {\n              callback: null\n            }));\n\n          case 7:\n            response = _context4.sent;\n            window.removeEventListener('message', customMessageListener);\n            return _context4.abrupt(\"return\", response);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function customMessage(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nexports.customMessage = customMessage;\n\nvar requestLogin = /*#__PURE__*/function () {\n  var _ref5 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee6(params) {\n    var callback, loginChallengeListener, response;\n    return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!(typeof params.callback === 'function')) {\n              _context6.next = 9;\n              break;\n            }\n\n            callback = params.callback; // TODO: set message listener only if iframe is loaded correctly\n\n            loginChallengeListener = /*#__PURE__*/function () {\n              var _ref6 = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee5(event) {\n                var data, payload;\n                return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n                  while (1) {\n                    switch (_context5.prev = _context5.next) {\n                      case 0:\n                        data = event.data;\n\n                        if (!(data && data.type === _constants.UI.LOGIN_CHALLENGE_REQUEST)) {\n                          _context5.next = 12;\n                          break;\n                        }\n\n                        _context5.prev = 2;\n                        _context5.next = 5;\n                        return callback();\n\n                      case 5:\n                        payload = _context5.sent;\n                        iframe.postMessage({\n                          event: _constants.UI_EVENT,\n                          type: _constants.UI.LOGIN_CHALLENGE_RESPONSE,\n                          payload: payload\n                        });\n                        _context5.next = 12;\n                        break;\n\n                      case 9:\n                        _context5.prev = 9;\n                        _context5.t0 = _context5[\"catch\"](2);\n                        iframe.postMessage({\n                          event: _constants.UI_EVENT,\n                          type: _constants.UI.LOGIN_CHALLENGE_RESPONSE,\n                          payload: _context5.t0.message\n                        });\n\n                      case 12:\n                      case \"end\":\n                        return _context5.stop();\n                    }\n                  }\n                }, _callee5, null, [[2, 9]]);\n              }));\n\n              return function loginChallengeListener(_x6) {\n                return _ref6.apply(this, arguments);\n              };\n            }();\n\n            window.addEventListener('message', loginChallengeListener, false);\n            _context6.next = 6;\n            return call(_objectSpread(_objectSpread({\n              method: 'requestLogin'\n            }, params), {}, {\n              asyncChallenge: true,\n              callback: null\n            }));\n\n          case 6:\n            response = _context6.sent;\n            window.removeEventListener('message', loginChallengeListener);\n            return _context6.abrupt(\"return\", response);\n\n          case 9:\n            return _context6.abrupt(\"return\", call(_objectSpread({\n              method: 'requestLogin'\n            }, params)));\n\n          case 10:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n\n  return function requestLogin(_x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nexports.requestLogin = requestLogin;\n\nvar disableWebUSB = function disableWebUSB() {\n  iframe.postMessage({\n    event: _constants.UI_EVENT,\n    type: _constants.TRANSPORT.DISABLE_WEBUSB\n  });\n};\n\nexports.disableWebUSB = disableWebUSB;","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalize = exports.concatSig = void 0;\n__exportStar(require(\"./personal-sign\"), exports);\n__exportStar(require(\"./sign-typed-data\"), exports);\n__exportStar(require(\"./encryption\"), exports);\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"concatSig\", { enumerable: true, get: function () { return utils_1.concatSig; } });\nObject.defineProperty(exports, \"normalize\", { enumerable: true, get: function () { return utils_1.normalize; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SubjectMetadataController = void 0;\nconst controllers_1 = require(\"@metamask/controllers\");\nconst controllerName = 'SubjectMetadataController';\nconst stateMetadata = {\n    subjectMetadata: { persist: true, anonymous: false },\n};\nconst defaultState = {\n    subjectMetadata: {},\n};\n/**\n * A controller for storing metadata associated with permission subjects. More\n * or less, a cache.\n */\nclass SubjectMetadataController extends controllers_1.BaseControllerV2 {\n    constructor({ messenger, subjectCacheLimit, state = {}, }) {\n        if (!Number.isInteger(subjectCacheLimit) || subjectCacheLimit < 1) {\n            throw new Error(`subjectCacheLimit must be a positive integer. Received: \"${subjectCacheLimit}\"`);\n        }\n        const hasPermissions = (origin) => {\n            return messenger.call('PermissionController:hasPermissions', origin);\n        };\n        super({\n            name: controllerName,\n            metadata: stateMetadata,\n            messenger,\n            state: Object.assign({}, SubjectMetadataController.getTrimmedState(state, hasPermissions)),\n        });\n        this.subjectHasPermissions = hasPermissions;\n        this.subjectCacheLimit = subjectCacheLimit;\n        this.subjectsWithoutPermissionsEcounteredSinceStartup = new Set();\n    }\n    /**\n     * Clears the state of this controller. Also resets the cache of subjects\n     * encountered since startup, so as to not prematurely reach the cache limit.\n     */\n    clearState() {\n        this.subjectsWithoutPermissionsEcounteredSinceStartup.clear();\n        this.update((_draftState) => {\n            return Object.assign({}, defaultState);\n        });\n    }\n    /**\n     * Stores domain metadata for the given origin (subject). Deletes metadata for\n     * subjects without permissions in a FIFO manner once more than\n     * {@link SubjectMetadataController.subjectCacheLimit} distinct origins have\n     * been added since boot.\n     *\n     * In order to prevent a degraded user experience,\n     * metadata is never deleted for subjects with permissions, since metadata\n     * cannot yet be requested on demand.\n     *\n     * @param metadata - The subject metadata to store.\n     */\n    addSubjectMetadata(metadata) {\n        const { origin } = metadata;\n        const newMetadata = Object.assign(Object.assign({}, metadata), { extensionId: metadata.extensionId || null, iconUrl: metadata.iconUrl || null, name: metadata.name || null });\n        let originToForget = null;\n        // We only delete the oldest encountered subject from the cache, again to\n        // ensure that the user's experience isn't degraded by missing icons etc.\n        if (this.subjectsWithoutPermissionsEcounteredSinceStartup.size >=\n            this.subjectCacheLimit) {\n            const cachedOrigin = this.subjectsWithoutPermissionsEcounteredSinceStartup\n                .values()\n                .next().value;\n            this.subjectsWithoutPermissionsEcounteredSinceStartup.delete(cachedOrigin);\n            if (!this.subjectHasPermissions(cachedOrigin)) {\n                originToForget = cachedOrigin;\n            }\n        }\n        this.subjectsWithoutPermissionsEcounteredSinceStartup.add(origin);\n        this.update((draftState) => {\n            // Typecast: ts(2589)\n            draftState.subjectMetadata[origin] = newMetadata;\n            if (typeof originToForget === 'string') {\n                delete draftState.subjectMetadata[originToForget];\n            }\n        });\n    }\n    /**\n     * Deletes all subjects without permissions from the controller's state.\n     */\n    trimMetadataState() {\n        this.update((draftState) => {\n            return SubjectMetadataController.getTrimmedState(\n            // Typecast: ts(2589)\n            draftState, this.subjectHasPermissions);\n        });\n    }\n    /**\n     * Returns a new state object that only includes subjects with permissions.\n     * This method is static because we want to call it in the constructor, before\n     * the controller's state is initialized.\n     *\n     * @param state - The state object to trim.\n     * @param hasPermissions - A function that returns a boolean indicating\n     * whether a particular subject (identified by its origin) has any\n     * permissions.\n     * @returns The new state object. If the specified `state` object has no\n     * subject metadata, the returned object will be equivalent to the default\n     * state of this controller.\n     */\n    static getTrimmedState(state, hasPermissions) {\n        const { subjectMetadata = {} } = state;\n        return {\n            subjectMetadata: Object.keys(subjectMetadata).reduce((newSubjectMetadata, origin) => {\n                if (hasPermissions(origin)) {\n                    newSubjectMetadata[origin] = subjectMetadata[origin];\n                }\n                return newSubjectMetadata;\n            }, {}),\n        };\n    }\n}\nexports.SubjectMetadataController = SubjectMetadataController;\n//# sourceMappingURL=SubjectMetadataController.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MethodNames = void 0;\nvar MethodNames;\n(function (MethodNames) {\n    MethodNames[\"requestPermissions\"] = \"wallet_requestPermissions\";\n    MethodNames[\"getPermissions\"] = \"wallet_getPermissions\";\n})(MethodNames = exports.MethodNames || (exports.MethodNames = {}));\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hasSpecificationType = exports.PermissionType = exports.findCaveat = exports.constructPermission = void 0;\nconst nanoid_1 = require(\"nanoid\");\n/**\n * The default permission factory function. Naively constructs a permission from\n * the inputs. Sets a default, random `id` if none is provided.\n *\n * @see {@link Permission} For more details.\n *\n * @template TargetPermission - The {@link Permission} that will be constructed.\n * @param options - The options for the permission.\n * @returns The new permission object.\n */\nfunction constructPermission(options) {\n    const { caveats = null, invoker, target } = options;\n    return {\n        id: nanoid_1.nanoid(),\n        parentCapability: target,\n        invoker,\n        caveats,\n        date: new Date().getTime(),\n    };\n}\nexports.constructPermission = constructPermission;\n/**\n * Gets the caveat of the specified type belonging to the specified permission.\n *\n * @param permission The permission whose caveat to retrieve.\n * @param caveatType The type of the caveat to retrieve.\n * @returns The caveat, or undefined if no such caveat exists.\n */\nfunction findCaveat(permission, caveatType) {\n    var _a;\n    return (_a = permission.caveats) === null || _a === void 0 ? void 0 : _a.find((caveat) => caveat.type === caveatType);\n}\nexports.findCaveat = findCaveat;\n/**\n * The different possible types of permissions.\n */\nvar PermissionType;\n(function (PermissionType) {\n    /**\n     * A restricted JSON-RPC method. A subject must have the requisite permission\n     * to call a restricted JSON-RPC method.\n     */\n    PermissionType[\"RestrictedMethod\"] = \"RestrictedMethod\";\n    /**\n     * An \"endowment\" granted to subjects that possess the requisite permission,\n     * such as a global environment variable exposing a restricted API, etc.\n     */\n    PermissionType[\"Endowment\"] = \"Endowment\";\n})(PermissionType = exports.PermissionType || (exports.PermissionType = {}));\n/**\n * Checks that the specification has the expected permission type.\n *\n * @param specification - The specification to check.\n * @param expectedType - The expected permission type.\n * @template Specification - The specification to check.\n * @template Type - The expected permission type.\n * @returns Whether or not the specification is of the expected type.\n */\nfunction hasSpecificationType(specification, expectedType) {\n    return specification.permissionType === expectedType;\n}\nexports.hasSpecificationType = hasSpecificationType;\n//# sourceMappingURL=Permission.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.endowmentPermissionBuilders = void 0;\nconst network_access_1 = require(\"./network-access\");\nexports.endowmentPermissionBuilders = {\n    [network_access_1.networkAccessEndowmentBuilder.targetKey]: network_access_1.networkAccessEndowmentBuilder,\n};\n//# sourceMappingURL=index.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decorateWithCaveats = void 0;\nconst errors_1 = require(\"./errors\");\n/**\n * Decorate a restricted method implementation with its caveats.\n *\n * Note that all caveat functions (i.e. the argument and return value of the\n * decorator) must be awaited.\n */\nfunction decorateWithCaveats(methodImplementation, permission, // bound to the requesting origin\ncaveatSpecifications) {\n    const { caveats } = permission;\n    if (!caveats) {\n        return methodImplementation;\n    }\n    let decorated = async (args) => methodImplementation(args);\n    for (const caveat of caveats) {\n        const specification = caveatSpecifications[caveat.type];\n        if (!specification) {\n            throw new errors_1.UnrecognizedCaveatTypeError(caveat.type);\n        }\n        decorated = specification.decorator(decorated, caveat);\n    }\n    return decorated;\n}\nexports.decorateWithCaveats = decorateWithCaveats;\n//# sourceMappingURL=Caveat.js.map","\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PermissionController = exports.CaveatMutatorOperation = void 0;\nconst controllers_1 = require(\"@metamask/controllers\");\n/* eslint-enable @typescript-eslint/no-unused-vars */\nconst deep_freeze_strict_1 = __importDefault(require(\"deep-freeze-strict\"));\nconst immer_1 = require(\"immer\");\nconst nanoid_1 = require(\"nanoid\");\nconst utils_1 = require(\"../utils\");\nconst Caveat_1 = require(\"./Caveat\");\nconst errors_1 = require(\"./errors\");\nconst Permission_1 = require(\"./Permission\");\nconst permission_middleware_1 = require(\"./permission-middleware\");\nconst utils_2 = require(\"./utils\");\n/**\n * The name of the {@link PermissionController}.\n */\nconst controllerName = 'PermissionController';\n/**\n * Get the state metadata of the {@link PermissionController}.\n *\n * @template Permission - The controller's permission type union.\n */\nfunction getStateMetadata() {\n    return { subjects: { anonymous: true, persist: true } };\n}\n/**\n * Get the default state of the {@link PermissionController}.\n *\n * @template Permission - The controller's permission type union.\n */\nfunction getDefaultState() {\n    return { subjects: {} };\n}\n/**\n * Describes the possible results of a {@link CaveatMutator} function.\n */\nvar CaveatMutatorOperation;\n(function (CaveatMutatorOperation) {\n    CaveatMutatorOperation[CaveatMutatorOperation[\"noop\"] = 0] = \"noop\";\n    CaveatMutatorOperation[CaveatMutatorOperation[\"updateValue\"] = 1] = \"updateValue\";\n    CaveatMutatorOperation[CaveatMutatorOperation[\"deleteCaveat\"] = 2] = \"deleteCaveat\";\n    CaveatMutatorOperation[CaveatMutatorOperation[\"revokePermission\"] = 3] = \"revokePermission\";\n})(CaveatMutatorOperation = exports.CaveatMutatorOperation || (exports.CaveatMutatorOperation = {}));\n/**\n * The permission controller. See the README for details.\n *\n * Assumes the existence of an {@link ApprovalController} reachable via the\n * {@link ControllerMessenger}.\n *\n * @template ControllerPermissionSpecification - A union of the types of all\n * permission specifications available to the controller. Any referenced caveats\n * must be included in the controller's caveat specifications.\n * @template ControllerCaveatSpecification - A union of the types of all\n * caveat specifications available to the controller.\n */\nclass PermissionController extends controllers_1.BaseControllerV2 {\n    /**\n     * @param options - Permission controller options.\n     * @param options.caveatSpecifications - The specifications of all caveats\n     * available to the controller. See {@link CaveatSpecificationMap} and the\n     * documentation for more details.\n     * @param options.permissionSpecifications - The specifications of all\n     * permissions available to the controller. See\n     * {@link PermissionSpecificationMap} and the README for more details.\n     * @param options.unrestrictedMethods - The callable names of all JSON-RPC\n     * methods ignored by the new controller.\n     * @param options.messenger - The controller messenger. See\n     * {@link BaseController} for more information.\n     * @param options.state - Existing state to hydrate the controller with at\n     * initialization.\n     */\n    constructor(options) {\n        const { caveatSpecifications, permissionSpecifications, unrestrictedMethods, messenger, state = {}, } = options;\n        super({\n            name: controllerName,\n            metadata: getStateMetadata(),\n            messenger,\n            state: Object.assign(Object.assign({}, getDefaultState()), state),\n        });\n        this._unrestrictedMethods = new Set(unrestrictedMethods);\n        this._caveatSpecifications = deep_freeze_strict_1.default(Object.assign({}, caveatSpecifications));\n        this.validatePermissionSpecifications(permissionSpecifications, this._caveatSpecifications);\n        this._permissionSpecifications = deep_freeze_strict_1.default(Object.assign({}, permissionSpecifications));\n        this.registerMessageHandlers();\n        this.createPermissionMiddleware = permission_middleware_1.getPermissionMiddlewareFactory({\n            executeRestrictedMethod: this._executeRestrictedMethod.bind(this),\n            getRestrictedMethod: this.getRestrictedMethod.bind(this),\n            isUnrestrictedMethod: this.unrestrictedMethods.has.bind(this.unrestrictedMethods),\n        });\n    }\n    /**\n     * The names of all JSON-RPC methods that will be ignored by the controller.\n     */\n    get unrestrictedMethods() {\n        return this._unrestrictedMethods;\n    }\n    /**\n     * Gets a permission specification.\n     *\n     * @param targetKey - The target key of the permission specification to get.\n     * @returns The permission specification with the specified target key.\n     */\n    getPermissionSpecification(targetKey) {\n        return this._permissionSpecifications[targetKey];\n    }\n    /**\n     * Gets a caveat specification.\n     *\n     * @param caveatType - The type of the caveat specification to get.\n     * @returns The caveat specification with the specified type.\n     */\n    getCaveatSpecification(caveatType) {\n        return this._caveatSpecifications[caveatType];\n    }\n    /**\n     * Constructor helper for validating permission specifications. This is\n     * intended to prevent the use of invalid target keys which, while impossible\n     * to add in TypeScript, could rather easily occur in plain JavaScript.\n     *\n     * Throws an error if validation fails.\n     *\n     * @param permissionSpecifications - The permission specifications passed to\n     * this controller's constructor.\n     * @param caveatSpecifications - The caveat specifications passed to this\n     * controller.\n     */\n    validatePermissionSpecifications(permissionSpecifications, caveatSpecifications) {\n        Object.entries(permissionSpecifications).forEach(([targetKey, { permissionType, targetKey: innerTargetKey, allowedCaveats },]) => {\n            if (!permissionType || !utils_1.hasProperty(Permission_1.PermissionType, permissionType)) {\n                throw new Error(`Invalid permission type: \"${permissionType}\"`);\n            }\n            // Check if the target key is the empty string, ends with \"_\", or ends\n            // with \"*\" but not \"_*\"\n            if (!targetKey || /_$/u.test(targetKey) || /[^_]\\*$/u.test(targetKey)) {\n                throw new Error(`Invalid permission target key: \"${targetKey}\"`);\n            }\n            if (targetKey !== innerTargetKey) {\n                throw new Error(`Invalid permission specification: key \"${targetKey}\" must match specification.target value \"${innerTargetKey}\".`);\n            }\n            if (allowedCaveats) {\n                allowedCaveats.forEach((caveatType) => {\n                    if (!utils_1.hasProperty(caveatSpecifications, caveatType)) {\n                        throw new errors_1.UnrecognizedCaveatTypeError(caveatType);\n                    }\n                });\n            }\n        });\n    }\n    /**\n     * Constructor helper for registering the controller's messaging system\n     * actions.\n     */\n    registerMessageHandlers() {\n        this.messagingSystem.registerActionHandler(`${controllerName}:clearPermissions`, () => this.clearState());\n        this.messagingSystem.registerActionHandler(`${controllerName}:getEndowments`, (origin, targetName, requestData) => this.getEndowments(origin, targetName, requestData));\n        this.messagingSystem.registerActionHandler(`${controllerName}:getSubjectNames`, () => this.getSubjectNames());\n        this.messagingSystem.registerActionHandler(`${controllerName}:getPermissions`, (origin) => this.getPermissions(origin));\n        this.messagingSystem.registerActionHandler(`${controllerName}:hasPermission`, (origin, targetName) => this.hasPermission(origin, targetName));\n        this.messagingSystem.registerActionHandler(`${controllerName}:hasPermissions`, (origin) => this.hasPermissions(origin));\n        this.messagingSystem.registerActionHandler(`${controllerName}:revokeAllPermissions`, (origin) => this.revokeAllPermissions(origin));\n        this.messagingSystem.registerActionHandler(`${controllerName}:requestPermissions`, (subject, permissions) => this.requestPermissions(subject, permissions));\n    }\n    /**\n     * Clears the state of the controller.\n     */\n    clearState() {\n        this.update((_draftState) => {\n            return Object.assign({}, getDefaultState());\n        });\n    }\n    /**\n     * Gets the permission specification corresponding to the given permission\n     * type and target name. Throws an error if the target name does not\n     * correspond to a permission, or if the specification is not of the\n     * given permission type.\n     *\n     * @template Type - The type of the permission specification to get.\n     * @param permissionType - The type of the permission specification to get.\n     * @param targetName - The name of the permission whose specification to get.\n     * @param requestingOrigin - The origin of the requesting subject, if any.\n     * Will be added to any thrown errors.\n     * @returns The specification object corresponding to the given type and\n     * target name.\n     */\n    getTypedPermissionSpecification(permissionType, targetName, requestingOrigin) {\n        const failureError = permissionType === Permission_1.PermissionType.RestrictedMethod\n            ? errors_1.methodNotFound(targetName, requestingOrigin ? { origin: requestingOrigin } : undefined)\n            : new errors_1.EndowmentPermissionDoesNotExistError(targetName, requestingOrigin);\n        const targetKey = this.getTargetKey(targetName);\n        if (!targetKey) {\n            throw failureError;\n        }\n        const specification = this.getPermissionSpecification(targetKey);\n        if (!Permission_1.hasSpecificationType(specification, permissionType)) {\n            throw failureError;\n        }\n        return specification;\n    }\n    /**\n     * Gets the implementation of the specified restricted method.\n     *\n     * A JSON-RPC error is thrown if the method does not exist.\n     *\n     * @see {@link PermissionController.executeRestrictedMethod} and\n     * {@link PermissionController.createPermissionMiddleware} for internal usage.\n     * @param method - The name of the restricted method.\n     * @param origin - The origin associated with the request for the restricted\n     * method, if any.\n     * @returns The restricted method implementation.\n     */\n    getRestrictedMethod(method, origin) {\n        return this.getTypedPermissionSpecification(Permission_1.PermissionType.RestrictedMethod, method, origin).methodImplementation;\n    }\n    /**\n     * @returns The origins (i.e. IDs) of all subjects.\n     */\n    getSubjectNames() {\n        return Object.keys(this.state.subjects);\n    }\n    /**\n     * Gets the permission for the specified target of the subject corresponding\n     * to the specified origin.\n     *\n     * @param origin - The origin of the subject.\n     * @param targetName - The method name as invoked by a third party (i.e., not\n     * a method key).\n     * @returns The permission if it exists, or undefined otherwise.\n     */\n    getPermission(origin, targetName) {\n        var _a;\n        return (_a = this.state.subjects[origin]) === null || _a === void 0 ? void 0 : _a.permissions[targetName];\n    }\n    /**\n     * Gets all permissions for the specified subject, if any.\n     *\n     * @param origin - The origin of the subject.\n     * @returns The permissions of the subject, if any.\n     */\n    getPermissions(origin) {\n        var _a;\n        return (_a = this.state.subjects[origin]) === null || _a === void 0 ? void 0 : _a.permissions;\n    }\n    /**\n     * Checks whether the subject with the specified origin has the specified\n     * permission.\n     *\n     * @param origin - The origin of the subject.\n     * @param target - The target name of the permission.\n     * @returns Whether the subject has the permission.\n     */\n    hasPermission(origin, target) {\n        return Boolean(this.getPermission(origin, target));\n    }\n    /**\n     * Checks whether the subject with the specified origin has any permissions.\n     * Use this if you want to know if a subject \"exists\".\n     *\n     * @param origin - The origin of the subject to check.\n     * @returns Whether the subject has any permissions.\n     */\n    hasPermissions(origin) {\n        return Boolean(this.state.subjects[origin]);\n    }\n    /**\n     * Revokes all permissions from the specified origin.\n     *\n     * Throws an error of the origin has no permissions.\n     *\n     * @param origin - The origin whose permissions to revoke.\n     */\n    revokeAllPermissions(origin) {\n        this.update((draftState) => {\n            if (!draftState.subjects[origin]) {\n                throw new errors_1.UnrecognizedSubjectError(origin);\n            }\n            delete draftState.subjects[origin];\n        });\n    }\n    /**\n     * Revokes the specified permission from the subject with the specified\n     * origin.\n     *\n     * Throws an error if the subject or the permission does not exist.\n     *\n     * @param origin - The origin of the subject whose permission to revoke.\n     * @param target - The target name of the permission to revoke.\n     */\n    revokePermission(origin, target) {\n        this.revokePermissions({ [origin]: [target] });\n    }\n    /**\n     * Revokes the specified permissions from the specified subjects.\n     *\n     * Throws an error if any of the subjects or permissions do not exist.\n     *\n     * @param subjectsAndPermissions - An object mapping subject origins\n     * to arrays of permission target names to revoke.\n     */\n    revokePermissions(subjectsAndPermissions) {\n        this.update((draftState) => {\n            Object.keys(subjectsAndPermissions).forEach((origin) => {\n                if (!utils_1.hasProperty(draftState.subjects, origin)) {\n                    throw new errors_1.UnrecognizedSubjectError(origin);\n                }\n                subjectsAndPermissions[origin].forEach((target) => {\n                    const { permissions } = draftState.subjects[origin];\n                    if (!utils_1.hasProperty(permissions, target)) {\n                        throw new errors_1.PermissionDoesNotExistError(origin, target);\n                    }\n                    this.deletePermission(draftState.subjects, origin, target);\n                });\n            });\n        });\n    }\n    /**\n     * Revokes all permissions corresponding to the specified target for all subjects.\n     * Does nothing if no subjects or no such permission exists.\n     *\n     * @param target - The name of the target to revoke all permissions for.\n     */\n    revokePermissionForAllSubjects(target) {\n        if (this.getSubjectNames().length === 0) {\n            return;\n        }\n        this.update((draftState) => {\n            Object.entries(draftState.subjects).forEach(([origin, subject]) => {\n                const { permissions } = subject;\n                if (utils_1.hasProperty(permissions, target)) {\n                    this.deletePermission(draftState.subjects, origin, target);\n                }\n            });\n        });\n    }\n    /**\n     * Deletes the permission identified by the given origin and target. If the\n     * permission is the single remaining permission of its subject, the subject\n     * is also deleted.\n     *\n     * @param subjects - The draft permission controller subjects.\n     * @param origin - The origin of the subject associated with the permission\n     * to delete.\n     * @param target - The target name of the permission to delete.\n     */\n    deletePermission(subjects, origin, target) {\n        const { permissions } = subjects[origin];\n        if (Object.keys(permissions).length > 1) {\n            delete permissions[target];\n        }\n        else {\n            delete subjects[origin];\n        }\n    }\n    /**\n     * Checks whether the permission of the subject corresponding to the given\n     * origin has a caveat of the specified type.\n     *\n     * Throws an error if the subject does not have a permission with the\n     * specified target name.\n     *\n     * @template TargetName - The permission target name. Should be inferred.\n     * @template CaveatType - The valid caveat types for the permission. Should\n     * be inferred.\n     * @param origin - The origin of the subject.\n     * @param target - The target name of the permission.\n     * @param caveatType - The type of the caveat to check for.\n     * @returns Whether the permission has the specified caveat.\n     */\n    hasCaveat(origin, target, caveatType) {\n        return Boolean(this.getCaveat(origin, target, caveatType));\n    }\n    /**\n     * Gets the caveat of the specified type, if any, for the permission of\n     * the subject corresponding to the given origin.\n     *\n     * Throws an error if the subject does not have a permission with the\n     * specified target name.\n     *\n     * @template TargetName - The permission target name. Should be inferred.\n     * @template CaveatType - The valid caveat types for the permission. Should\n     * be inferred.\n     * @param origin - The origin of the subject.\n     * @param target - The target name of the permission.\n     * @param caveatType - The type of the caveat to get.\n     * @returns The caveat, or `undefined` if no such caveat exists.\n     */\n    getCaveat(origin, target, caveatType) {\n        const permission = this.getPermission(origin, target);\n        if (!permission) {\n            throw new errors_1.PermissionDoesNotExistError(origin, target);\n        }\n        return Permission_1.findCaveat(permission, caveatType);\n    }\n    /**\n     * Adds a caveat of the specified type, with the specified caveat value, to\n     * the permission corresponding to the given subject origin and permission\n     * target.\n     *\n     * For modifying existing caveats, use\n     * {@link PermissionController.updateCaveat}.\n     *\n     * Throws an error if no such permission exists, or if the caveat already\n     * exists.\n     *\n     * @template TargetName - The permission target name. Should be inferred.\n     * @template CaveatType - The valid caveat types for the permission. Should\n     * be inferred.\n     * @param origin - The origin of the subject.\n     * @param target - The target name of the permission.\n     * @param caveatType - The type of the caveat to add.\n     * @param caveatValue - The value of the caveat to add.\n     */\n    addCaveat(origin, target, caveatType, caveatValue) {\n        if (this.hasCaveat(origin, target, caveatType)) {\n            throw new errors_1.CaveatAlreadyExistsError(origin, target, caveatType);\n        }\n        this.setCaveat(origin, target, caveatType, caveatValue);\n    }\n    /**\n     * Updates the value of the caveat of the specified type belonging to the\n     * permission corresponding to the given subject origin and permission\n     * target.\n     *\n     * For adding new caveats, use\n     * {@link PermissionController.addCaveat}.\n     *\n     * Throws an error if no such permission or caveat exists.\n     *\n     * @template TargetName - The permission target name. Should be inferred.\n     * @template CaveatType - The valid caveat types for the permission. Should\n     * be inferred.\n     * @param origin - The origin of the subject.\n     * @param target - The target name of the permission.\n     * @param caveatType - The type of the caveat to update.\n     * @param caveatValue - The new value of the caveat.\n     */\n    updateCaveat(origin, target, caveatType, caveatValue) {\n        if (!this.hasCaveat(origin, target, caveatType)) {\n            throw new errors_1.CaveatDoesNotExistError(origin, target, caveatType);\n        }\n        this.setCaveat(origin, target, caveatType, caveatValue);\n    }\n    /**\n     * Sets the specified caveat on the specified permission. Overwrites existing\n     * caveats of the same type in-place (preserving array order), and adds the\n     * caveat to the end of the array otherwise.\n     *\n     * Throws an error if the permission does not exist or fails to validate after\n     * its caveats have been modified.\n     *\n     * @see {@link PermissionController.addCaveat}\n     * @see {@link PermissionController.updateCaveat}\n     * @template TargetName - The permission target name. Should be inferred.\n     * @template CaveatType - The valid caveat types for the permission. Should\n     * be inferred.\n     * @param origin - The origin of the subject.\n     * @param target - The target name of the permission.\n     * @param caveatType - The type of the caveat to set.\n     * @param caveatValue - The value of the caveat to set.\n     */\n    setCaveat(origin, target, caveatType, caveatValue) {\n        this.update((draftState) => {\n            const subject = draftState.subjects[origin];\n            // Unreachable because `hasCaveat` is always called before this, and it\n            // throws if permissions are missing. TypeScript needs this, however.\n            /* istanbul ignore if */\n            if (!subject) {\n                throw new errors_1.UnrecognizedSubjectError(origin);\n            }\n            const permission = subject.permissions[target];\n            /* istanbul ignore if: practically impossible, but TypeScript wants it */\n            if (!permission) {\n                throw new errors_1.PermissionDoesNotExistError(origin, target);\n            }\n            const caveat = {\n                type: caveatType,\n                value: caveatValue,\n            };\n            this.validateCaveat(caveat, origin, target);\n            if (permission.caveats) {\n                const caveatIndex = permission.caveats.findIndex((existingCaveat) => existingCaveat.type === caveat.type);\n                if (caveatIndex === -1) {\n                    permission.caveats.push(caveat);\n                }\n                else {\n                    permission.caveats.splice(caveatIndex, 1, caveat);\n                }\n            }\n            else {\n                // Typecast: At this point, we don't know if the specific permission\n                // is allowed to have caveats, but it should be impossible to call\n                // this method for a permission that may not have any caveats.\n                // If all else fails, the permission validator is also called.\n                permission.caveats = [caveat];\n            }\n            this.validateModifiedPermission(permission, origin, target);\n        });\n    }\n    /**\n     * Updates all caveats with the specified type for all subjects and\n     * permissions by applying the specified mutator function to them.\n     *\n     * **ATTN:** Permissions can be revoked entirely by the action of this method,\n     * read on for details.\n     *\n     * Caveat mutators are functions that receive a caveat value and return a\n     * tuple consisting of a {@link CaveatMutatorOperation} and, optionally, a new\n     * value to update the existing caveat with.\n     *\n     * For each caveat, depending on the mutator result, this method will:\n     * - Do nothing ({@link CaveatMutatorOperation.noop})\n     * - Update the value of the caveat ({@link CaveatMutatorOperation.updateValue})\n     *   - The caveat specification validator, if any, will be called after\n     *     updating the value.\n     * - Delete the caveat ({@link CaveatMutatorOperation.deleteCaveat})\n     *   - The permission specification validator, if any, will be called after\n     *     deleting the caveat.\n     * - Revoke the parent permission ({@link CaveatMutatorOperation.revokePermission})\n     *\n     * This method throws if the validation of any caveat or permission fails.\n     *\n     * @param targetCaveatType - The type of the caveats to update.\n     * @param mutator - The mutator function which will be applied to all caveat\n     * values.\n     */\n    updatePermissionsByCaveat(targetCaveatType, mutator) {\n        if (Object.keys(this.state.subjects).length === 0) {\n            return;\n        }\n        this.update((draftState) => {\n            Object.values(draftState.subjects).forEach((subject) => {\n                Object.values(subject.permissions).forEach((permission) => {\n                    const { caveats } = permission;\n                    const targetCaveat = caveats === null || caveats === void 0 ? void 0 : caveats.find(({ type }) => type === targetCaveatType);\n                    if (!targetCaveat) {\n                        return;\n                    }\n                    // The mutator may modify the caveat value in place, and must always\n                    // return a valid mutation result.\n                    const mutatorResult = mutator(targetCaveat.value);\n                    switch (mutatorResult.operation) {\n                        case CaveatMutatorOperation.noop:\n                            break;\n                        case CaveatMutatorOperation.updateValue:\n                            // Typecast: `Mutable` is used here to assign to a readonly\n                            // property. `targetConstraint` should already be mutable because\n                            // it's part of a draft, but for some reason it's not. We can't\n                            // use the more-correct `Draft` type here either because it\n                            // results in an error.\n                            targetCaveat.value =\n                                mutatorResult.value;\n                            this.validateCaveat(targetCaveat, subject.origin, permission.parentCapability);\n                            break;\n                        case CaveatMutatorOperation.deleteCaveat:\n                            this.deleteCaveat(permission, targetCaveatType, subject.origin, permission.parentCapability);\n                            break;\n                        case CaveatMutatorOperation.revokePermission:\n                            this.deletePermission(draftState.subjects, subject.origin, permission.parentCapability);\n                            break;\n                        default: {\n                            // This type check ensures that the switch statement is\n                            // exhaustive.\n                            const _exhaustiveCheck = mutatorResult;\n                            throw new Error(`Unrecognized mutation result: \"${_exhaustiveCheck.operation}\"`);\n                        }\n                    }\n                });\n            });\n        });\n    }\n    /**\n     * Removes the caveat of the specified type from the permission corresponding\n     * to the given subject origin and target name.\n     *\n     * Throws an error if no such permission or caveat exists.\n     *\n     * @template TargetName - The permission target name. Should be inferred.\n     * @template CaveatType - The valid caveat types for the permission. Should\n     * be inferred.\n     * @param origin - The origin of the subject.\n     * @param target - The target name of the permission.\n     * @param caveatType - The type of the caveat to remove.\n     */\n    removeCaveat(origin, target, caveatType) {\n        this.update((draftState) => {\n            var _a;\n            const permission = (_a = draftState.subjects[origin]) === null || _a === void 0 ? void 0 : _a.permissions[target];\n            if (!permission) {\n                throw new errors_1.PermissionDoesNotExistError(origin, target);\n            }\n            if (!permission.caveats) {\n                throw new errors_1.CaveatDoesNotExistError(origin, target, caveatType);\n            }\n            this.deleteCaveat(permission, caveatType, origin, target);\n        });\n    }\n    /**\n     * Deletes the specified caveat from the specified permission. If no caveats\n     * remain after deletion, the permission's caveat property is set to `null`.\n     * The permission is validated after being modified.\n     *\n     * Throws an error if the permission does not have a caveat with the specified\n     * type.\n     *\n     * @param permission - The permission whose caveat to delete.\n     * @param caveatType - The type of the caveat to delete.\n     * @param origin - The origin the permission subject.\n     * @param target - The name of the permission target.\n     */\n    deleteCaveat(permission, caveatType, origin, target) {\n        /* istanbul ignore if: not possible in our usage */\n        if (!permission.caveats) {\n            throw new errors_1.CaveatDoesNotExistError(origin, target, caveatType);\n        }\n        const caveatIndex = permission.caveats.findIndex((existingCaveat) => existingCaveat.type === caveatType);\n        if (caveatIndex === -1) {\n            throw new errors_1.CaveatDoesNotExistError(origin, target, caveatType);\n        }\n        if (permission.caveats.length === 1) {\n            permission.caveats = null;\n        }\n        else {\n            permission.caveats.splice(caveatIndex, 1);\n        }\n        this.validateModifiedPermission(permission, origin, target);\n    }\n    /**\n     * Validates the specified modified permission. Should **always** be invoked\n     * on a permission after its caveats have been modified.\n     *\n     * Just like {@link PermissionController.validatePermission}, except that the\n     * corresponding target key and specification are retrieved first, and an\n     * error is thrown if the target key does not exist.\n     *\n     * @param permission - The modified permission to validate.\n     * @param origin - The origin associated with the permission.\n     * @param targetName - The target name name of the permission.\n     */\n    validateModifiedPermission(permission, origin, targetName) {\n        const targetKey = this.getTargetKey(permission.parentCapability);\n        /* istanbul ignore if: this should be impossible */\n        if (!targetKey) {\n            throw new Error(`Fatal: Existing permission target key \"${targetKey}\" has no specification.`);\n        }\n        this.validatePermission(this.getPermissionSpecification(targetKey), permission, origin, targetName);\n    }\n    /**\n     * Gets the key for the specified permission target.\n     *\n     * Used to support our namespaced permission target feature, which is used\n     * to implement namespaced restricted JSON-RPC methods.\n     *\n     * @param target - The requested permission target.\n     * @returns The internal key of the permission target.\n     */\n    getTargetKey(target) {\n        if (utils_1.hasProperty(this._permissionSpecifications, target)) {\n            return target;\n        }\n        const namespacedTargetsWithoutWildcard = {};\n        for (const targetKey of Object.keys(this._permissionSpecifications)) {\n            const wildCardMatch = targetKey.match(/(.+)\\*$/u);\n            if (wildCardMatch) {\n                namespacedTargetsWithoutWildcard[wildCardMatch[1]] = true;\n            }\n        }\n        // Check for potentially nested namespaces:\n        // Ex: wildzone_\n        // Ex: eth_plugin_\n        const segments = target.split('_');\n        let targetKey = '';\n        while (segments.length > 0 &&\n            !utils_1.hasProperty(this._permissionSpecifications, targetKey) &&\n            !namespacedTargetsWithoutWildcard[targetKey]) {\n            targetKey += `${segments.shift()}_`;\n        }\n        if (namespacedTargetsWithoutWildcard[targetKey]) {\n            return `${targetKey}*`;\n        }\n        return undefined;\n    }\n    /**\n     * Grants _approved_ permissions to the specified subject. Every permission and\n     * caveat is stringently validated – including by calling every specification\n     * validator – and an error is thrown if any validation fails.\n     *\n     * **ATTN:** This method does **not** prompt the user for approval.\n     *\n     * @see {@link PermissionController.requestPermissions} For initiating a\n     * permissions request requiring user approval.\n     * @param options - Options bag.\n     * @param options.approvedPermissions - The requested permissions approved by\n     * the user.\n     * @param options.requestData - Permission request data. Passed to permission\n     * factory functions.\n     * @param options.preserveExistingPermissions - Whether to preserve the\n     * subject's existing permissions.\n     * @param options.subject - The subject to grant permissions to.\n     * @returns The granted permissions.\n     */\n    grantPermissions({ approvedPermissions, requestData, preserveExistingPermissions = true, subject, }) {\n        const { origin } = subject;\n        if (!origin || typeof origin !== 'string') {\n            throw new errors_1.InvalidSubjectIdentifierError(origin);\n        }\n        const permissions = (preserveExistingPermissions\n            ? Object.assign({}, this.getPermissions(origin)) : {});\n        for (const [requestedTarget, approvedPermission] of Object.entries(approvedPermissions)) {\n            const targetKey = this.getTargetKey(requestedTarget);\n            if (!targetKey) {\n                throw errors_1.methodNotFound(requestedTarget);\n            }\n            if (approvedPermission.parentCapability !== undefined &&\n                requestedTarget !== approvedPermission.parentCapability) {\n                throw new errors_1.InvalidApprovedPermissionError(origin, requestedTarget, approvedPermission);\n            }\n            // The requested target must be a valid target name if we found its key.\n            // We reassign it to change its type.\n            const targetName = requestedTarget;\n            const specification = this.getPermissionSpecification(targetKey);\n            // The requested caveats are validated here.\n            const caveats = this.constructCaveats(origin, targetName, approvedPermission.caveats);\n            const permissionOptions = {\n                caveats,\n                invoker: origin,\n                target: targetName,\n            };\n            let permission;\n            if (specification.factory) {\n                permission = specification.factory(permissionOptions, requestData);\n                // Full caveat and permission validation is performed here since the\n                // factory function can arbitrarily modify the entire permission object,\n                // including its caveats.\n                this.validatePermission(specification, permission, origin, targetName);\n            }\n            else {\n                permission = Permission_1.constructPermission(permissionOptions);\n                // We do not need to validate caveats in this case, because the plain\n                // permission constructor function does not modify the caveats, which\n                // were already validated by `constructCaveats` above.\n                this.validatePermission(specification, permission, origin, targetName, {\n                    invokePermissionValidator: true,\n                    performCaveatValidation: false,\n                });\n            }\n            permissions[targetName] = permission;\n        }\n        this.setValidatedPermissions(origin, permissions);\n        return permissions;\n    }\n    /**\n     * Validates the specified permission by:\n     * - Ensuring that its `caveats` property is either `null` or a non-empty\n     *   array.\n     * - Ensuring that it only includes caveats allowed by its specification.\n     * - Ensuring that it includes no duplicate caveats (by caveat type).\n     * - Validating each caveat object, if `performCaveatValidation` is `true`.\n     * - Calling the validator of its specification, if one exists and\n     *   `invokePermissionValidator` is `true`.\n     *\n     * An error is thrown if validation fails.\n     *\n     * @param specification - The specification of the permission.\n     * @param permission - The permission to validate.\n     * @param origin - The origin associated with the permission.\n     * @param targetName - The target name of the permission.\n     * @param validationOptions - Validation options.\n     * @param validationOptions.invokePermissionValidator - Whether to invoke the\n     * permission's consumer-specified validator function, if any.\n     * @param validationOptions.performCaveatValidation - Whether to invoke\n     * {@link PermissionController.validateCaveat} on each of the permission's\n     * caveats.\n     */\n    validatePermission(specification, permission, origin, targetName, { invokePermissionValidator, performCaveatValidation } = {\n        invokePermissionValidator: true,\n        performCaveatValidation: true,\n    }) {\n        const { allowedCaveats, validator } = specification;\n        if (utils_1.hasProperty(permission, 'caveats')) {\n            const { caveats } = permission;\n            if (caveats !== null && !(Array.isArray(caveats) && caveats.length > 0)) {\n                throw new errors_1.InvalidCaveatsPropertyError(origin, targetName, caveats);\n            }\n            const seenCaveatTypes = new Set();\n            caveats === null || caveats === void 0 ? void 0 : caveats.forEach((caveat) => {\n                if (performCaveatValidation) {\n                    this.validateCaveat(caveat, origin, targetName);\n                }\n                if (!(allowedCaveats === null || allowedCaveats === void 0 ? void 0 : allowedCaveats.includes(caveat.type))) {\n                    throw new errors_1.ForbiddenCaveatError(caveat.type, origin, targetName);\n                }\n                if (seenCaveatTypes.has(caveat.type)) {\n                    throw new errors_1.DuplicateCaveatError(caveat.type, origin, targetName);\n                }\n                seenCaveatTypes.add(caveat.type);\n            });\n        }\n        if (invokePermissionValidator && validator) {\n            validator(permission, origin, targetName);\n        }\n    }\n    /**\n     * Assigns the specified permissions to the subject with the given origin.\n     * Overwrites all existing permissions, and creates a subject entry if it\n     * doesn't already exist.\n     *\n     * **ATTN:** Assumes that the new permissions have been validated.\n     *\n     * @param origin - The origin of the grantee subject.\n     * @param permissions - The new permissions for the grantee subject.\n     */\n    setValidatedPermissions(origin, permissions) {\n        this.update((draftState) => {\n            if (!draftState.subjects[origin]) {\n                draftState.subjects[origin] = { origin, permissions: {} };\n            }\n            draftState.subjects[origin].permissions = immer_1.castDraft(permissions);\n        });\n    }\n    /**\n     * Validates the requested caveats for the permission of the specified\n     * subject origin and target name and returns the validated caveat array.\n     *\n     * Throws an error if validation fails.\n     *\n     * @param origin - The origin of the permission subject.\n     * @param target - The permission target name.\n     * @param requestedCaveats - The requested caveats to construct.\n     * @returns The constructed caveats.\n     */\n    constructCaveats(origin, target, requestedCaveats) {\n        const caveatArray = requestedCaveats === null || requestedCaveats === void 0 ? void 0 : requestedCaveats.map((requestedCaveat) => {\n            this.validateCaveat(requestedCaveat, origin, target);\n            // Reassign so that we have a fresh object.\n            const { type, value } = requestedCaveat;\n            return { type, value };\n        });\n        return caveatArray && utils_1.isNonEmptyArray(caveatArray)\n            ? caveatArray\n            : undefined;\n    }\n    /**\n     * This methods validates that the specified caveat is an object with the\n     * expected properties and types. It also ensures that a caveat specification\n     * exists for the requested caveat type, and calls the specification\n     * validator, if it exists, on the caveat object.\n     *\n     * Throws an error if validation fails.\n     *\n     * @param caveat - The caveat object to validate.\n     * @param origin - The origin associated with the subject of the parent\n     * permission.\n     * @param target - The target name associated with the parent permission.\n     */\n    validateCaveat(caveat, origin, target) {\n        var _a;\n        if (!utils_1.isPlainObject(caveat)) {\n            throw new errors_1.InvalidCaveatError(caveat, origin, target);\n        }\n        if (Object.keys(caveat).length !== 2) {\n            throw new errors_1.InvalidCaveatFieldsError(caveat, origin, target);\n        }\n        if (typeof caveat.type !== 'string') {\n            throw new errors_1.InvalidCaveatTypeError(caveat, origin, target);\n        }\n        const specification = this.getCaveatSpecification(caveat.type);\n        if (!specification) {\n            throw new errors_1.UnrecognizedCaveatTypeError(caveat.type, origin, target);\n        }\n        if (!utils_1.hasProperty(caveat, 'value') || caveat.value === undefined) {\n            throw new errors_1.CaveatMissingValueError(caveat, origin, target);\n        }\n        if (!utils_1.isValidJson(caveat.value)) {\n            throw new errors_1.CaveatInvalidJsonError(caveat, origin, target);\n        }\n        // Typecast: TypeScript still believes that the caveat is a PlainObject.\n        (_a = specification.validator) === null || _a === void 0 ? void 0 : _a.call(specification, caveat, origin, target);\n    }\n    /**\n     * Initiates a permission request that requires user approval. This should\n     * always be used to grant additional permissions to a subject, unless user\n     * approval has been obtained through some other means.\n     *\n     * Permissions are validated at every step of the approval process, and this\n     * method will reject if validation fails.\n     *\n     * @see {@link ApprovalController} For the user approval logic.\n     * @see {@link PermissionController.acceptPermissionsRequest} For the method\n     * that _accepts_ the request and resolves the user approval promise.\n     * @see {@link PermissionController.rejectPermissionsRequest} For the method\n     * that _rejects_ the request and the user approval promise.\n     * @param subject - The grantee subject.\n     * @param requestedPermissions - The requested permissions.\n     * @param options - Additional options.\n     * @param options.id - The id of the permissions request. Defaults to a unique\n     * id.\n     * @param options.preserveExistingPermissions - Whether to preserve the\n     * subject's existing permissions. Defaults to `true`.\n     * @returns The granted permissions and request metadata.\n     */\n    async requestPermissions(subject, requestedPermissions, options = {}) {\n        const { origin } = subject;\n        const { id = nanoid_1.nanoid(), preserveExistingPermissions = true } = options;\n        this.validateRequestedPermissions(origin, requestedPermissions);\n        const metadata = {\n            id,\n            origin,\n        };\n        const permissionsRequest = {\n            metadata,\n            permissions: requestedPermissions,\n        };\n        const _a = await this.requestUserApproval(permissionsRequest), { permissions: approvedPermissions } = _a, requestData = __rest(_a, [\"permissions\"]);\n        return [\n            this.grantPermissions({\n                subject,\n                approvedPermissions,\n                preserveExistingPermissions,\n                requestData,\n            }),\n            metadata,\n        ];\n    }\n    /**\n     * Validates requested permissions. Throws if validation fails.\n     *\n     * This method ensures that the requested permissions are a properly\n     * formatted {@link RequestedPermissions} object, and performs the same\n     * validation as {@link PermissionController.grantPermissions}, except that\n     * consumer-specified permission validator functions are not called, since\n     * they are only called on fully constructed, approved permissions that are\n     * otherwise completely valid.\n     *\n     * Unrecognzied properties on requested permissions are ignored.\n     *\n     * @param origin - The origin of the grantee subject.\n     * @param requestedPermissions - The requested permissions.\n     */\n    validateRequestedPermissions(origin, requestedPermissions) {\n        if (!utils_1.isPlainObject(requestedPermissions)) {\n            throw errors_1.invalidParams({\n                message: `Requested permissions for origin \"${origin}\" is not a plain object.`,\n                data: { origin, requestedPermissions },\n            });\n        }\n        if (Object.keys(requestedPermissions).length === 0) {\n            throw errors_1.invalidParams({\n                message: `Permissions request for origin \"${origin}\" contains no permissions.`,\n                data: { requestedPermissions },\n            });\n        }\n        for (const targetName of Object.keys(requestedPermissions)) {\n            const permission = requestedPermissions[targetName];\n            const targetKey = this.getTargetKey(targetName);\n            if (!targetKey) {\n                throw errors_1.methodNotFound(targetName, { origin, requestedPermissions });\n            }\n            if (!utils_1.isPlainObject(permission) ||\n                (permission.parentCapability !== undefined &&\n                    targetName !== permission.parentCapability)) {\n                throw errors_1.invalidParams({\n                    message: `Permissions request for origin \"${origin}\" contains invalid requested permission(s).`,\n                    data: { origin, requestedPermissions },\n                });\n            }\n            // Here we validate the permission without invoking its validator, if any.\n            // The validator will be invoked after the permission has been approved.\n            this.validatePermission(this.getPermissionSpecification(targetKey), \n            // Typecast: The permission is still a \"PlainObject\" here.\n            permission, origin, targetName, { invokePermissionValidator: false, performCaveatValidation: true });\n        }\n    }\n    /**\n     * Adds a request to the {@link ApprovalController} using the\n     * {@link AddApprovalRequest} action. Also validates the resulting approved\n     * permissions request, and throws an error if validation fails.\n     *\n     * @param permissionsRequest - The permissions request object.\n     * @returns The approved permissions request object.\n     */\n    async requestUserApproval(permissionsRequest) {\n        const { origin, id } = permissionsRequest.metadata;\n        const approvedRequest = await this.messagingSystem.call('ApprovalController:addRequest', {\n            id,\n            origin,\n            requestData: permissionsRequest,\n            type: utils_2.MethodNames.requestPermissions,\n        }, true);\n        this.validateApprovedPermissions(approvedRequest, { id, origin });\n        return approvedRequest;\n    }\n    /**\n     * Validates an approved {@link PermissionsRequest} object. The approved\n     * request must have the required `metadata` and `permissions` properties,\n     * the `id` and `origin` of the `metadata` must match the original request\n     * metadata, and the requested permissions must be valid per\n     * {@link PermissionController.validateRequestedPermissions}. Any extra\n     * metadata properties are ignored.\n     *\n     * An error is thrown if validation fails.\n     *\n     * @param approvedRequest - The approved permissions request object.\n     * @param originalMetadata - The original request metadata.\n     */\n    validateApprovedPermissions(approvedRequest, originalMetadata) {\n        const { id, origin } = originalMetadata;\n        if (!utils_1.isPlainObject(approvedRequest) ||\n            !utils_1.isPlainObject(approvedRequest.metadata)) {\n            throw errors_1.internalError(`Approved permissions request for subject \"${origin}\" is invalid.`, { data: { approvedRequest } });\n        }\n        const { metadata: { id: newId, origin: newOrigin }, permissions, } = approvedRequest;\n        if (newId !== id) {\n            throw errors_1.internalError(`Approved permissions request for subject \"${origin}\" mutated its id.`, { originalId: id, mutatedId: newId });\n        }\n        if (newOrigin !== origin) {\n            throw errors_1.internalError(`Approved permissions request for subject \"${origin}\" mutated its origin.`, { originalOrigin: origin, mutatedOrigin: newOrigin });\n        }\n        try {\n            this.validateRequestedPermissions(origin, permissions);\n        }\n        catch (error) {\n            // Re-throw as an internal error; we should never receive invalid approved\n            // permissions.\n            throw errors_1.internalError(`Invalid approved permissions request: ${error.message}`, error.data);\n        }\n    }\n    /**\n     * Accepts a permissions request created by\n     * {@link PermissionController.requestPermissions}.\n     *\n     * @param request - The permissions request.\n     */\n    async acceptPermissionsRequest(request) {\n        const { id } = request.metadata;\n        if (!this.hasApprovalRequest({ id })) {\n            throw new errors_1.PermissionsRequestNotFoundError(id);\n        }\n        if (Object.keys(request.permissions).length === 0) {\n            this._rejectPermissionsRequest(id, errors_1.invalidParams({\n                message: 'Must request at least one permission.',\n            }));\n            return;\n        }\n        try {\n            this.messagingSystem.call('ApprovalController:acceptRequest', id, request);\n        }\n        catch (error) {\n            // If accepting unexpectedly fails, reject the request and re-throw the\n            // error\n            this._rejectPermissionsRequest(id, error);\n            throw error;\n        }\n    }\n    /**\n     * Rejects a permissions request created by\n     * {@link PermissionController.requestPermissions}.\n     *\n     * @param id - The id of the request to be rejected.\n     */\n    async rejectPermissionsRequest(id) {\n        if (!this.hasApprovalRequest({ id })) {\n            throw new errors_1.PermissionsRequestNotFoundError(id);\n        }\n        this._rejectPermissionsRequest(id, errors_1.userRejectedRequest());\n    }\n    /**\n     * Checks whether the {@link ApprovalController} has a particular permissions\n     * request.\n     *\n     * @see {@link PermissionController.acceptPermissionsRequest} and\n     * {@link PermissionController.rejectPermissionsRequest} for usage.\n     * @param options - The {@link HasApprovalRequest} options.\n     * @param options.id - The id of the approval request to check for.\n     * @returns Whether the specified request exists.\n     */\n    hasApprovalRequest(options) {\n        return this.messagingSystem.call('ApprovalController:hasRequest', \n        // Typecast: For some reason, the type here expects all of the possible\n        // HasApprovalRequest options to be specified, when they're actually all\n        // optional. Passing just the id is definitely valid, so we just cast it.\n        options);\n    }\n    /**\n     * Rejects the permissions request with the specified id, with the specified\n     * error as the reason. This method is effectively a wrapper around a\n     * messenger call for the `ApprovalController:rejectRequest` action.\n     *\n     * @see {@link PermissionController.acceptPermissionsRequest} and\n     * {@link PermissionController.rejectPermissionsRequest} for usage.\n     * @param id - The id of the request to reject.\n     * @param error - The error associated with the rejection.\n     */\n    _rejectPermissionsRequest(id, error) {\n        return this.messagingSystem.call('ApprovalController:rejectRequest', id, error);\n    }\n    /**\n     * Gets the subject's endowments per the specified endowment permission.\n     * Throws if the subject does not have the required permission or if the\n     * permission is not an endowment permission.\n     *\n     * @param origin - The origin of the subject whose endowments to retrieve.\n     * @param targetName - The name of the endowment permission. This must be a\n     * valid permission target name.\n     * @param requestData - Additional data associated with the request, if any.\n     * Forwarded to the endowment getter function for the permission.\n     * @returns The endowments, if any.\n     */\n    async getEndowments(origin, targetName, requestData) {\n        if (!this.hasPermission(origin, targetName)) {\n            throw errors_1.unauthorized({ data: { origin, targetName } });\n        }\n        return this.getTypedPermissionSpecification(Permission_1.PermissionType.Endowment, targetName, origin).endowmentGetter({ origin, requestData });\n    }\n    /**\n     * Executes a restricted method as the subject with the given origin.\n     * The specified params, if any, will be passed to the method implementation.\n     *\n     * **ATTN:** Great caution should be exercised in the use of this method.\n     * Methods that cause side effects or affect application state should\n     * be avoided.\n     *\n     * This method will first attempt to retrieve the requested restricted method\n     * implementation, throwing if it does not exist. The method will then be\n     * invoked as though the subject with the specified origin had invoked it with\n     * the specified parameters. This means that any existing caveats will be\n     * applied to the restricted method, and this method will throw if the\n     * restricted method or its caveat decorators throw.\n     *\n     * In addition, this method will throw if the subject does not have a\n     * permission for the specified restricted method.\n     *\n     * @param origin - The origin of the subject to execute the method on behalf\n     * of.\n     * @param targetName - The name of the method to execute. This must be a valid\n     * permission target name.\n     * @param params - The parameters to pass to the method implementation.\n     * @returns The result of the executed method.\n     */\n    async executeRestrictedMethod(origin, targetName, params) {\n        // Throws if the method does not exist\n        const methodImplementation = this.getRestrictedMethod(targetName, origin);\n        const result = await this._executeRestrictedMethod(methodImplementation, { origin }, targetName, params);\n        if (result === undefined) {\n            throw new Error(`Internal request for method \"${targetName}\" as origin \"${origin}\" returned no result.`);\n        }\n        return result;\n    }\n    /**\n     * An internal method used in the controller's `json-rpc-engine` middleware\n     * and {@link PermissionController.executeRestrictedMethod}. Calls the\n     * specified restricted method implementation after decorating it with the\n     * caveats of its permission. Throws if the subject does not have the\n     * requisite permission.\n     *\n     * **ATTN:** Parameter validation is the responsibility of the caller, or\n     * the restricted method implementation in the case of `params`.\n     *\n     * @see {@link PermissionController.executeRestrictedMethod} and\n     * {@link PermissionController.createPermissionMiddleware} for usage.\n     * @param methodImplementation - The implementation of the method to call.\n     * @param subject - Metadata about the subject that made the request.\n     * @param req - The request object associated with the request.\n     * @returns\n     */\n    _executeRestrictedMethod(methodImplementation, subject, method, params = []) {\n        const { origin } = subject;\n        const permission = this.getPermission(origin, method);\n        if (!permission) {\n            throw errors_1.unauthorized({ data: { origin, method } });\n        }\n        return Caveat_1.decorateWithCaveats(methodImplementation, permission, this._caveatSpecifications)({ method, params, context: { origin } });\n    }\n}\nexports.PermissionController = PermissionController;\n//# sourceMappingURL=PermissionController.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.handlers = void 0;\nconst requestPermissions_1 = require(\"./requestPermissions\");\nconst getPermissions_1 = require(\"./getPermissions\");\nexports.handlers = [requestPermissions_1.requestPermissionsHandler, getPermissions_1.getPermissionsHandler];\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExternalResourceController = void 0;\nconst obs_store_1 = require(\"@metamask/obs-store\");\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst nanoid_1 = require(\"nanoid\");\nconst alwaysRequiredFields = ['fromDomain'];\nconst computeState = (storageKey, initialResources) => {\n    return { [storageKey]: initialResources };\n};\nconst getUnauthorizedMessage = (id) => `Not authorized to access resource with id \"${id}\".`;\n/**\n * A class intended to describe a particular resource that is managed by snaps.\n * Example resources are assets.\n *\n * These are things that MetaMask treats as first-class objects with distinct properties within its own UI.\n */\nclass ExternalResourceController extends safe_event_emitter_1.default {\n    constructor({ storageKey, requiredFields, initialResources, }) {\n        super();\n        this.requiredFields = requiredFields;\n        this.storageKey = storageKey;\n        this.store = new obs_store_1.ObservableStore(computeState(storageKey, initialResources));\n    }\n    getResources() {\n        return Object.assign({}, this.store.getState()[this.storageKey]);\n    }\n    setResources(resources) {\n        this.store.updateState({\n            [this.storageKey]: resources,\n        });\n    }\n    clearResources() {\n        this.setResources({});\n    }\n    deleteResourcesFor(fromDomain) {\n        const resources = this.getResources();\n        const newResources = Object.entries(resources).reduce((acc, [id, resource]) => {\n            if (resource.fromDomain !== fromDomain) {\n                acc[id] = resource;\n            }\n            return acc;\n        }, {});\n        this.setResources(newResources);\n    }\n    get(fromDomain, id) {\n        const resource = this.getResources()[id];\n        if (resource && resource.fromDomain !== fromDomain) {\n            throw eth_rpc_errors_1.ethErrors.provider.unauthorized({\n                message: getUnauthorizedMessage(id),\n            });\n        }\n        return resource ? Object.assign({}, resource) : null;\n    }\n    getAllResources(fromDomain) {\n        return Object.values(this.getResources()).filter((resource) => {\n            return resource.fromDomain === fromDomain;\n        });\n    }\n    add(fromDomain, resource) {\n        const newResource = this.processNewResource(fromDomain, resource);\n        const { id } = newResource;\n        const resources = this.getResources();\n        if (resources[id]) {\n            throw new Error(`Resource with id \"${id}\" already exists.`);\n        }\n        else {\n            resources[id] = newResource;\n            this.setResources(resources);\n        }\n        return newResource.id;\n    }\n    update(fromDomain, resource) {\n        const { id } = resource;\n        const resources = this.getResources();\n        const existingResource = resources[id];\n        if (!existingResource) {\n            throw eth_rpc_errors_1.ethErrors.rpc.resourceNotFound({\n                message: `Resource with id \"${id}\" not found.`,\n            });\n        }\n        else if (existingResource.fromDomain !== fromDomain) {\n            throw eth_rpc_errors_1.ethErrors.provider.unauthorized({\n                message: getUnauthorizedMessage(id),\n            });\n        }\n        resources[id] = this.processNewResource(fromDomain, Object.assign(Object.assign({}, resources[id]), resource));\n        this.setResources(resources);\n        return id;\n    }\n    processNewResource(fromDomain, resource) {\n        this.requiredFields.forEach((requiredField) => {\n            if (!(requiredField in resource)) {\n                throw eth_rpc_errors_1.ethErrors.rpc.invalidParams(`Resource from \"${fromDomain}\" missing required field: ${requiredField}`);\n            }\n        });\n        return Object.assign(Object.assign({}, resource), { fromDomain, id: resource.id || nanoid_1.nanoid() });\n    }\n    delete(fromDomain, id) {\n        const resources = this.getResources();\n        const existingResource = resources[id];\n        if (!existingResource) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n                message: `Resource with id \"${id}\" not found.`,\n            });\n        }\n        else if (existingResource.fromDomain !== fromDomain) {\n            throw eth_rpc_errors_1.ethErrors.provider.unauthorized({\n                message: getUnauthorizedMessage(id),\n            });\n        }\n        delete resources[id];\n        this.setResources(resources);\n        return null;\n    }\n    handleRpcRequest(fromDomain, method, arg) {\n        if (!fromDomain || typeof fromDomain !== 'string') {\n            throw new Error('Invalid fromDomain.');\n        }\n        switch (method) {\n            case 'get':\n                return this.get(fromDomain, arg);\n            case 'getAll':\n                return this.getAllResources(fromDomain);\n            case 'add':\n                return this.add(fromDomain, arg);\n            case 'update':\n                return this.update(fromDomain, arg);\n            case 'delete':\n                return this.delete(fromDomain, arg);\n            default:\n                throw eth_rpc_errors_1.ethErrors.rpc.methodNotFound({\n                    message: `Not an asset method: ${method}`,\n                });\n        }\n    }\n}\nexports.ExternalResourceController = ExternalResourceController;\n//# sourceMappingURL=ExternalResourceController.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SnapController = exports.SnapStatusEvent = exports.SnapStatus = exports.SNAP_PREFIX_REGEX = exports.SNAP_PREFIX = exports.controllerName = void 0;\nconst controllers_1 = require(\"@metamask/controllers\");\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst nanoid_1 = require(\"nanoid\");\nconst valid_1 = __importDefault(require(\"semver/functions/valid\"));\nconst utils_1 = require(\"../utils\");\nconst json_schemas_1 = require(\"./json-schemas\");\nconst utils_2 = require(\"./utils\");\nexports.controllerName = 'SnapController';\nexports.SNAP_PREFIX = 'wallet_snap_';\nexports.SNAP_PREFIX_REGEX = new RegExp(`^${exports.SNAP_PREFIX}`, 'u');\nconst TRUNCATED_SNAP_PROPERTIES = new Set([\n    'initialPermissions',\n    'id',\n    'permissionName',\n    'version',\n]);\nconst defaultState = {\n    snapErrors: {},\n    snaps: {},\n    snapStates: {},\n};\nvar SnapStatus;\n(function (SnapStatus) {\n    SnapStatus[\"installing\"] = \"installing\";\n    SnapStatus[\"running\"] = \"running\";\n    SnapStatus[\"stopped\"] = \"stopped\";\n    SnapStatus[\"crashed\"] = \"crashed\";\n})(SnapStatus = exports.SnapStatus || (exports.SnapStatus = {}));\nvar SnapStatusEvent;\n(function (SnapStatusEvent) {\n    SnapStatusEvent[\"start\"] = \"start\";\n    SnapStatusEvent[\"stop\"] = \"stop\";\n    SnapStatusEvent[\"crash\"] = \"crash\";\n})(SnapStatusEvent = exports.SnapStatusEvent || (exports.SnapStatusEvent = {}));\n/**\n * Guard transitioning when the snap is disabled.\n */\nconst disabledGuard = (serializedSnap) => {\n    return serializedSnap.enabled;\n};\n/**\n * The state machine configuration for a snaps `status` state.\n * Using a state machine for a snaps `status` ensures that the snap transitions to a valid next lifecycle state.\n * Supports a very minimal subset of XState conventions outlined in `_transitionSnapState`.\n */\nconst snapStatusStateMachineConfig = {\n    initial: SnapStatus.installing,\n    states: {\n        [SnapStatus.installing]: {\n            on: {\n                [SnapStatusEvent.start]: {\n                    target: SnapStatus.running,\n                    cond: disabledGuard,\n                },\n            },\n        },\n        [SnapStatus.running]: {\n            on: {\n                [SnapStatusEvent.stop]: SnapStatus.stopped,\n                [SnapStatusEvent.crash]: SnapStatus.crashed,\n            },\n        },\n        [SnapStatus.stopped]: {\n            on: {\n                [SnapStatusEvent.start]: {\n                    target: SnapStatus.running,\n                    cond: disabledGuard,\n                },\n            },\n        },\n        [SnapStatus.crashed]: {\n            on: {\n                [SnapStatusEvent.start]: {\n                    target: SnapStatus.running,\n                    cond: disabledGuard,\n                },\n            },\n        },\n    },\n};\nconst name = 'SnapController';\n/*\n * A snap is initialized in three phases:\n * - Add: Loads the snap from a remote source and parses it.\n * - Authorize: Requests the snap's required permissions from the user.\n * - Start: Initializes the snap in its SES realm with the authorized permissions.\n */\nclass SnapController extends controllers_1.BaseControllerV2 {\n    constructor({ closeAllConnections, executeSnap, getRpcMessageHandler, messenger, state, terminateAllSnaps, terminateSnap, endowmentPermissionNames = [], npmRegistryUrl, idleTimeCheckInterval = 5000, maxIdleTime = 30000, maxRequestTime = 60000, }) {\n        super({\n            messenger,\n            metadata: {\n                snapErrors: {\n                    persist: false,\n                    anonymous: false,\n                },\n                snapStates: {\n                    persist: true,\n                    anonymous: false,\n                },\n                snaps: {\n                    persist: (snaps) => {\n                        return Object.values(snaps)\n                            .map((snap) => {\n                            return Object.assign(Object.assign({}, snap), { \n                                // At the time state is rehydrated, no snap will be running.\n                                status: SnapStatus.stopped });\n                        })\n                            .reduce((memo, snap) => {\n                            memo[snap.id] = snap;\n                            return memo;\n                        }, {});\n                    },\n                    anonymous: false,\n                },\n            },\n            name,\n            state: Object.assign(Object.assign({}, defaultState), state),\n        });\n        this._closeAllConnections = closeAllConnections;\n        this._endowmentPermissionNames = endowmentPermissionNames;\n        this._executeSnap = executeSnap;\n        this._getRpcMessageHandler = getRpcMessageHandler;\n        this._onUnhandledSnapError = this._onUnhandledSnapError.bind(this);\n        this._onUnresponsiveSnap = this._onUnresponsiveSnap.bind(this);\n        this._terminateSnap = terminateSnap;\n        this._terminateAllSnaps = terminateAllSnaps;\n        this._idleTimeCheckInterval = idleTimeCheckInterval;\n        this._lastRequestMap = new Map();\n        this._maxIdleTime = maxIdleTime;\n        this._maxRequestTime = maxRequestTime;\n        this._pollForLastRequestStatus();\n        this._rpcHandlerMap = new Map();\n        this._snapsBeingAdded = new Map();\n        this._npmRegistryUrl = npmRegistryUrl;\n        this.messagingSystem.subscribe('ExecutionService:unhandledError', this._onUnhandledSnapError);\n        this.messagingSystem.subscribe('ExecutionService:unresponsive', this._onUnresponsiveSnap);\n        this.registerMessageHandlers();\n    }\n    /**\n     * Constructor helper for registering the controller's messaging system\n     * actions.\n     */\n    registerMessageHandlers() {\n        this.messagingSystem.registerActionHandler(`${exports.controllerName}:add`, (...args) => this.add(...args));\n        this.messagingSystem.registerActionHandler(`${exports.controllerName}:get`, (...args) => this.get(...args));\n        this.messagingSystem.registerActionHandler(`${exports.controllerName}:getRpcMessageHandler`, (...args) => this.getRpcMessageHandler(...args));\n        this.messagingSystem.registerActionHandler(`${exports.controllerName}:getSnapState`, (...args) => this.getSnapState(...args));\n        this.messagingSystem.registerActionHandler(`${exports.controllerName}:has`, (...args) => this.has(...args));\n        this.messagingSystem.registerActionHandler(`${exports.controllerName}:updateSnapState`, (...args) => this.updateSnapState(...args));\n    }\n    _pollForLastRequestStatus() {\n        this._timeoutForLastRequestStatus = setTimeout(async () => {\n            this._stopSnapsLastRequestPastMax();\n            this._pollForLastRequestStatus();\n        }, this._idleTimeCheckInterval);\n    }\n    _stopSnapsLastRequestPastMax() {\n        this._lastRequestMap.forEach(async (timestamp, snapId) => {\n            if (this._maxIdleTime && utils_1.timeSince(timestamp) > this._maxIdleTime) {\n                this.stopSnap(snapId);\n            }\n        });\n    }\n    _onUnresponsiveSnap(snapId) {\n        this._transitionSnapState(snapId, SnapStatusEvent.crash);\n        this._stopSnap(snapId, false);\n        this.addSnapError({\n            code: -32001,\n            message: 'Snap Unresponsive',\n            data: {\n                snapId,\n            },\n        });\n    }\n    _onUnhandledSnapError(snapId, error) {\n        this._transitionSnapState(snapId, SnapStatusEvent.crash);\n        this._stopSnap(snapId, false);\n        this.addSnapError(error);\n    }\n    /**\n     * Transitions between states using `snapStatusStateMachineConfig` as the template to figure out the next state.\n     * This transition function uses a very minimal subset of XState conventions:\n     * - supports initial state\n     * - .on supports raw event target string\n     * - .on supports {target, cond} object\n     * - the arguments for `cond` is the `SerializedSnap` instead of Xstate convention of `(event, context) => boolean`\n     *\n     * @param snapId - The id of the snap to transition\n     * @param event - The event enum to use to transition\n     */\n    _transitionSnapState(snapId, event) {\n        var _a;\n        const snapStatus = this.state.snaps[snapId].status;\n        let nextStatus = (_a = snapStatusStateMachineConfig.states[snapStatus].on[event]) !== null && _a !== void 0 ? _a : snapStatus;\n        if (nextStatus.cond) {\n            const cond = nextStatus.cond(this.state.snaps[snapId]);\n            if (cond === false) {\n                throw new Error(`Condition failed for state transition \"${snapId}\" with event \"${event}\".`);\n            }\n        }\n        if (nextStatus.target) {\n            nextStatus = nextStatus.target;\n        }\n        if (nextStatus === snapStatus) {\n            return;\n        }\n        this.update((state) => {\n            state.snaps[snapId].status = nextStatus;\n        });\n    }\n    /**\n     * Starts the given snap. Throws an error if no such snap exists\n     * or if it is already running.\n     *\n     * @param snapId - The id of the Snap to start.\n     */\n    async startSnap(snapId) {\n        const snap = this.get(snapId);\n        if (!snap) {\n            throw new Error(`Snap \"${snapId}\" not found.`);\n        }\n        if (this.state.snaps[snapId].enabled === false) {\n            throw new Error(`Snap \"${snapId}\" is disabled.`);\n        }\n        await this._startSnap({\n            snapId,\n            sourceCode: snap.sourceCode,\n        });\n    }\n    /**\n     * Enables the given snap. A snap can only be started if it is enabled.\n     *\n     * @param snapId - The id of the Snap to enable.\n     */\n    enableSnap(snapId) {\n        this.update((state) => {\n            state.snaps[snapId].enabled = true;\n        });\n    }\n    /**\n     * Disables the given snap. A snap can only be started if it is enabled.\n     *\n     * @param snapId - The id of the Snap to disable.\n     */\n    disableSnap(snapId) {\n        if (this.isRunning(snapId)) {\n            this.stopSnap(snapId);\n        }\n        this.update((state) => {\n            state.snaps[snapId].enabled = false;\n        });\n    }\n    /**\n     * Stops the given snap. Throws an error if no such snap exists\n     * or if it is already stopped.\n     *\n     * @param snapId - The id of the Snap to stop.\n     */\n    stopSnap(snapId) {\n        const snap = this.get(snapId);\n        if (!snap) {\n            throw new Error(`Snap \"${snapId}\" not found.`);\n        }\n        if (!this.isRunning(snapId)) {\n            throw new Error(`Snap \"${snapId}\" already stopped.`);\n        }\n        this._stopSnap(snapId);\n        console.log(`Snap \"${snapId}\" stopped.`);\n    }\n    /**\n     * Stops the given snap, removes all hooks, closes all connections, and\n     * terminates its worker.\n     *\n     * @param snapId - The id of the Snap to stop.\n     * @param setNotRunning - Whether to mark the snap as not running.\n     * Should only be set to false if the snap is about to be deleted.\n     */\n    _stopSnap(snapId, setNotRunning = true) {\n        this._lastRequestMap.delete(snapId);\n        this._closeAllConnections(snapId);\n        this._terminateSnap(snapId);\n        if (setNotRunning) {\n            this._transitionSnapState(snapId, SnapStatusEvent.stop);\n        }\n    }\n    /**\n     * Returns whether the given snap is running.\n     * Throws an error if the snap doesn't exist.\n     *\n     * @param snapId - The id of the Snap to check.\n     */\n    isRunning(snapId) {\n        const snap = this.get(snapId);\n        if (!snap) {\n            throw new Error(`Snap \"${snapId}\" not found.`);\n        }\n        return snap.status === SnapStatus.running;\n    }\n    /**\n     * Returns whether the given snap has been added to state.\n     *\n     * @param snapId - The id of the Snap to check for.\n     */\n    has(snapId) {\n        return Boolean(this.get(snapId));\n    }\n    /**\n     * Gets the snap with the given id if it exists, including all data.\n     * This should not be used if the snap is to be serializable, as e.g.\n     * the snap sourceCode may be quite large.\n     *\n     * @param snapId - The id of the Snap to get.\n     */\n    get(snapId) {\n        return this.state.snaps[snapId];\n    }\n    /**\n     * Gets the snap with the given id if it exists, excluding any\n     * non-serializable or expensive-to-serialize data.\n     *\n     * @param snapId - The id of the Snap to get.\n     */\n    getTruncated(snapId) {\n        const snap = this.get(snapId);\n        return snap\n            ? Object.keys(snap).reduce((serialized, key) => {\n                if (TRUNCATED_SNAP_PROPERTIES.has(key)) {\n                    serialized[key] = snap[key];\n                }\n                return serialized;\n            }, {})\n            : null;\n    }\n    /**\n     * Updates the own state of the snap with the given id.\n     * This is distinct from the state MetaMask uses to manage snaps.\n     *\n     * @param snapId - The id of the Snap whose state should be updated.\n     * @param newSnapState - The new state of the snap.\n     */\n    async updateSnapState(snapId, newSnapState) {\n        this.update((state) => {\n            state.snapStates[snapId] = newSnapState;\n        });\n    }\n    /**\n     * Adds error from a snap to the SnapControllers state.\n     *\n     * @param snapError - The error to store on the SnapController\n     */\n    async addSnapError(snapError) {\n        this.update((state) => {\n            const id = nanoid_1.nanoid();\n            state.snapErrors[id] = Object.assign(Object.assign({}, snapError), { internalID: id });\n        });\n    }\n    /**\n     * Removes an error by internalID from a the SnapControllers state.\n     *\n     * @param internalID - The internal error ID to remove on the SnapController\n     */\n    async removeSnapError(internalID) {\n        this.update((state) => {\n            delete state.snapErrors[internalID];\n        });\n    }\n    /**\n     * Clears all errors from the SnapControllers state.\n     *\n     */\n    async clearSnapErrors() {\n        this.update((state) => {\n            state.snapErrors = {};\n        });\n    }\n    /**\n     * Gets the own state of the snap with the given id.\n     * This is distinct from the state MetaMask uses to manage snaps.\n     *\n     * @param snapId - The id of the Snap whose state to get.\n     */\n    async getSnapState(snapId) {\n        var _a;\n        return (_a = this.state.snapStates[snapId]) !== null && _a !== void 0 ? _a : null;\n    }\n    /**\n     * Completely clear the controller's state: delete all associated data,\n     * handlers, event listeners, and permissions; tear down all snap providers.\n     */\n    clearState() {\n        const snapIds = Object.keys(this.state.snaps);\n        snapIds.forEach((snapId) => {\n            this._closeAllConnections(snapId);\n        });\n        this._terminateAllSnaps();\n        snapIds.forEach((snapId) => this.messagingSystem.call('PermissionController:revokeAllPermissions', snapId));\n        this.update((state) => {\n            state.snaps = {};\n            state.snapStates = {};\n        });\n    }\n    /**\n     * Removes the given snap from state, and clears all associated handlers\n     * and listeners.\n     *\n     * @param snapId - The id of the Snap.\n     */\n    removeSnap(snapId) {\n        this.removeSnaps([snapId]);\n    }\n    /**\n     * Stops the given snaps, removes them from state, and clears all associated\n     * permissions, handlers, and listeners.\n     *\n     * @param snapIds - The ids of the Snaps.\n     */\n    removeSnaps(snapIds) {\n        if (!Array.isArray(snapIds)) {\n            throw new Error('Expected array of snap ids.');\n        }\n        this.update((state) => {\n            snapIds.forEach((snapId) => {\n                this._stopSnap(snapId, false);\n                this._rpcHandlerMap.delete(snapId);\n                delete state.snaps[snapId];\n                delete state.snapStates[snapId];\n                this.messagingSystem.publish(`SnapController:snapRemoved`, snapId);\n            });\n        });\n        snapIds.forEach((snapId) => this.messagingSystem.call('PermissionController:revokeAllPermissions', snapId));\n    }\n    /**\n     * Gets the serialized permitted snaps of the given origin, if any.\n     * @param origin - The origin whose permitted snaps to retrieve.\n     */\n    getPermittedSnaps(origin) {\n        var _a;\n        return Object.values((_a = this.messagingSystem.call('PermissionController:getPermissions', origin)) !== null && _a !== void 0 ? _a : {}).reduce((permittedSnaps, perm) => {\n            if (perm.parentCapability.startsWith(exports.SNAP_PREFIX)) {\n                const snapId = perm.parentCapability.replace(exports.SNAP_PREFIX_REGEX, '');\n                const snap = this.getTruncated(snapId);\n                permittedSnaps[snapId] = snap || {\n                    error: eth_rpc_errors_1.serializeError(new Error('Snap permitted but not installed.')),\n                };\n            }\n            return permittedSnaps;\n        }, {});\n    }\n    /**\n     * Installs the snaps requested by the given origin, returning the snap\n     * object if the origin is permitted to install it, and an authorization error\n     * otherwise.\n     *\n     * @param origin - The origin that requested to install the snaps.\n     * @param requestedSnaps - The snaps to install.\n     * @returns An object of snap ids and snap objects, or errors if a\n     * snap couldn't be installed.\n     */\n    async installSnaps(origin, requestedSnaps) {\n        const result = {};\n        await Promise.all(Object.entries(requestedSnaps).map(async ([snapId, { version = 'latest' }]) => {\n            const permissionName = exports.SNAP_PREFIX + snapId;\n            if (!isValidSnapVersion(version)) {\n                result[snapId] = {\n                    error: eth_rpc_errors_1.ethErrors.rpc.invalidParams(`The \"version\" field must be a valid SemVer version or the string \"latest\" if specified. Received: \"${version}\".`),\n                };\n                return;\n            }\n            if (this.messagingSystem.call('PermissionController:hasPermission', origin, permissionName)) {\n                // Attempt to install and run the snap, storing any errors that\n                // occur during the process.\n                result[snapId] = Object.assign({}, (await this.processRequestedSnap(snapId, version)));\n            }\n            else {\n                // only allow the installation of permitted snaps\n                result[snapId] = {\n                    error: eth_rpc_errors_1.ethErrors.provider.unauthorized(`Not authorized to install snap \"${snapId}\". Request the permission for the snap before attempting to install it.`),\n                };\n            }\n        }));\n        return result;\n    }\n    /**\n     * Adds, authorizes, and runs the given snap with a snap provider.\n     * Results from this method should be efficiently serializable.\n     *\n     * @param snapId - The id of the snap.\n     * @param version - The version of the snap to install.\n     * @returns The resulting snap object, or an error if something went wrong.\n     */\n    async processRequestedSnap(snapId, version) {\n        const existingSnap = this.getTruncated(snapId);\n        if (existingSnap) {\n            return existingSnap;\n        }\n        try {\n            const { sourceCode } = await this.add({\n                id: snapId,\n                version,\n            });\n            await this.authorize(snapId);\n            await this._startSnap({\n                snapId,\n                sourceCode,\n            });\n            this.messagingSystem.publish(`SnapController:snapInstalled`, snapId);\n            return this.getTruncated(snapId);\n        }\n        catch (err) {\n            console.error(`Error when adding snap.`, err);\n            if (this.has(snapId)) {\n                this.removeSnap(snapId);\n            }\n            return { error: eth_rpc_errors_1.serializeError(err) };\n        }\n    }\n    /**\n     * Returns a promise representing the complete installation of the requested snap.\n     * If the snap is already being installed, the previously pending promise will be returned.\n     *\n     * @param snapId - The id of the Snap.\n     * @param args - Object containing either the URL of the snap's manifest,\n     * or the snap's manifest and source code.\n     * @returns The resulting snap object.\n     */\n    add(args) {\n        const { id: _snapId } = args;\n        this.validateSnapId(_snapId);\n        const snapId = _snapId;\n        if (!args ||\n            !('id' in args) ||\n            (!('manifest' in args) && 'sourceCode' in args) ||\n            ('manifest' in args && !('sourceCode' in args))) {\n            throw new Error(`Invalid add snap args for snap \"${snapId}\".`);\n        }\n        if (!this._snapsBeingAdded.has(snapId)) {\n            console.log(`Adding snap: ${snapId}`);\n            this._snapsBeingAdded.set(snapId, this._add(args));\n        }\n        return this._snapsBeingAdded.get(snapId);\n    }\n    validateSnapId(snapId) {\n        if (!snapId || typeof snapId !== 'string') {\n            throw new Error(`Invalid snap id: Not a string. Received \"${snapId}\"`);\n        }\n        for (const prefix of Object.values(utils_2.SnapIdPrefixes)) {\n            if (snapId.startsWith(prefix) && snapId.replace(prefix, '').length > 0) {\n                return;\n            }\n        }\n        throw new Error(`Invalid snap id. Received: \"${snapId}\"`);\n    }\n    async _startSnap(snapData) {\n        const { snapId } = snapData;\n        if (this.isRunning(snapId)) {\n            throw new Error(`Snap \"${snapId}\" is already started.`);\n        }\n        const result = await this._executeSnap(Object.assign(Object.assign({}, snapData), { endowments: await this._getEndowments(snapId) }));\n        this._transitionSnapState(snapId, SnapStatusEvent.start);\n        return result;\n    }\n    /**\n     * Gets the names of all endowments that will be added to the Snap's\n     * Compartment when it executes. These should be the names of global\n     * JavaScript APIs accessible in the root realm of the execution environment.\n     *\n     * Throws an error if the endowment getter for a permission returns a truthy\n     * value that is not an array of strings.\n     *\n     * @param snapId - The id of the snap whose SES endowments to get.\n     * @returns An array of the names of the endowments, if any.\n     */\n    async _getEndowments(snapId) {\n        let allEndowments = [];\n        for (const permissionName of this._endowmentPermissionNames) {\n            if (this.messagingSystem.call('PermissionController:hasPermission', snapId, permissionName)) {\n                const endowments = await this.messagingSystem.call('PermissionController:getEndowments', snapId, permissionName);\n                if (endowments) {\n                    // We don't have any guarantees about the type of the endowments\n                    // value, so we have to guard at runtime.\n                    if (!Array.isArray(endowments) ||\n                        endowments.some((value) => typeof value !== 'string')) {\n                        throw new Error('Expected an array of string endowment names.');\n                    }\n                    allEndowments = allEndowments.concat(endowments);\n                }\n            }\n        }\n        return allEndowments.length > 0 ? allEndowments : undefined;\n    }\n    /**\n     * Internal method. See the \"add\" method.\n     *\n     * @param snapId - The id of the Snap.\n     * @param args - The add snap args.\n     * @returns The resulting snap object.\n     */\n    async _add(args) {\n        const { id: snapId, version } = args;\n        let manifest, sourceCode, svgIcon;\n        if ('manifest' in args) {\n            manifest = args.manifest;\n            sourceCode = args.sourceCode;\n            json_schemas_1.validateSnapJsonFile(utils_2.NpmSnapFileNames.Manifest, manifest);\n        }\n        else {\n            ({ manifest, sourceCode, svgIcon } = await this._fetchSnap(snapId, version));\n        }\n        if (typeof sourceCode !== 'string' || sourceCode.length === 0) {\n            throw new Error(`Invalid source code for snap \"${snapId}\".`);\n        }\n        const initialPermissions = manifest === null || manifest === void 0 ? void 0 : manifest.initialPermissions;\n        if (!initialPermissions ||\n            typeof initialPermissions !== 'object' ||\n            Array.isArray(initialPermissions)) {\n            throw new Error(`Invalid initial permissions for snap \"${snapId}\".`);\n        }\n        let snap = {\n            enabled: true,\n            id: snapId,\n            initialPermissions,\n            manifest,\n            permissionName: exports.SNAP_PREFIX + snapId,\n            sourceCode,\n            status: snapStatusStateMachineConfig.initial,\n            version: manifest.version,\n        };\n        const snapsState = this.state.snaps;\n        // restore relevant snap state if it exists\n        if (snapsState[snapId]) {\n            snap = Object.assign(Object.assign({}, snapsState[snapId]), snap);\n        }\n        // store the snap back in state\n        this.update((state) => {\n            state.snaps[snapId] = snap;\n        });\n        this.messagingSystem.publish(`SnapController:snapAdded`, snapId, snap, svgIcon);\n        return snap;\n    }\n    /**\n     * Fetches the manifest and source code of a snap.\n     *\n     * @param snapId - The id of the Snap.\n     * @param version - The version of the Snap to fetch.\n     * @returns A tuple of the Snap manifest object and the Snap source code.\n     */\n    async _fetchSnap(snapId, version) {\n        try {\n            if (snapId.startsWith(utils_2.SnapIdPrefixes.local)) {\n                return this._fetchLocalSnap(snapId.replace(utils_2.SnapIdPrefixes.local, ''));\n            }\n            else if (snapId.startsWith(utils_2.SnapIdPrefixes.npm)) {\n                return this._fetchNpmSnap(snapId.replace(utils_2.SnapIdPrefixes.npm, ''), version);\n            }\n            // This should be impossible.\n            /* istanbul ignore next */\n            throw new Error(`Invalid Snap id: \"${snapId}\"`);\n        }\n        catch (error) {\n            throw new Error(`Failed to fetch Snap \"${snapId}\": ${error.message}`);\n        }\n    }\n    async _fetchNpmSnap(packageName, version) {\n        if (!isValidSnapVersion(version)) {\n            throw new Error(`Received invalid Snap version: \"${version}\".`);\n        }\n        const { manifest, sourceCode, svgIcon } = await utils_2.fetchNpmSnap(packageName, version, this._npmRegistryUrl);\n        return { manifest, sourceCode, svgIcon };\n    }\n    /**\n     * Fetches the manifest and source code of a local snap.\n     *\n     * @param localhostUrl - The localhost URL to download from.\n     * @returns The validated manifest and the source code.\n     */\n    async _fetchLocalSnap(localhostUrl) {\n        const manifestUrl = new URL(utils_2.NpmSnapFileNames.Manifest, localhostUrl);\n        if (!utils_2.LOCALHOST_HOSTNAMES.has(manifestUrl.hostname)) {\n            throw new Error(`Invalid URL: Locally hosted Snaps must be hosted on localhost. Received URL: \"${manifestUrl.toString()}\"`);\n        }\n        const _manifest = await utils_2.fetchContent(manifestUrl, 'json');\n        json_schemas_1.validateSnapJsonFile(utils_2.NpmSnapFileNames.Manifest, _manifest);\n        const manifest = _manifest;\n        const { source: { location: { npm: { filePath, iconPath }, }, }, } = manifest;\n        const [sourceCode, svgIcon] = await Promise.all([\n            utils_2.fetchContent(new URL(filePath, localhostUrl), 'text'),\n            iconPath\n                ? utils_2.fetchContent(new URL(iconPath, localhostUrl), 'text')\n                : undefined,\n        ]);\n        utils_2.validateSnapShasum(manifest, sourceCode);\n        return { manifest, sourceCode, svgIcon };\n    }\n    /**\n     * Initiates a request for the given snap's initial permissions.\n     * Must be called in order. See processRequestedSnap.\n     *\n     * @param snapId - The id of the Snap.\n     * @returns The snap's approvedPermissions.\n     */\n    async authorize(snapId) {\n        console.log(`Authorizing snap: ${snapId}`);\n        const snapsState = this.state.snaps;\n        const snap = snapsState[snapId];\n        const { initialPermissions } = snap;\n        // Don't prompt if there are no permissions requested:\n        if (Object.keys(initialPermissions).length === 0) {\n            return [];\n        }\n        if (initialPermissions === null) {\n            return [];\n        }\n        try {\n            const [approvedPermissions] = await this.messagingSystem.call('PermissionController:requestPermissions', { origin: snapId }, initialPermissions);\n            return Object.values(approvedPermissions).map((perm) => perm.parentCapability);\n        }\n        finally {\n            this._snapsBeingAdded.delete(snapId);\n        }\n    }\n    destroy() {\n        super.destroy();\n        if (this._timeoutForLastRequestStatus) {\n            clearTimeout(this._timeoutForLastRequestStatus);\n        }\n        this.messagingSystem.unsubscribe('ExecutionService:unhandledError', this._onUnhandledSnapError);\n        this.messagingSystem.unsubscribe('ExecutionService:unresponsive', this._onUnresponsiveSnap);\n    }\n    /**\n     * Gets the RPC message handler for the given snap.\n     *\n     * @param snapId - The id of the Snap whose message handler to get.\n     */\n    async getRpcMessageHandler(snapId) {\n        const existingHandler = this._rpcHandlerMap.get(snapId);\n        if (existingHandler) {\n            return existingHandler;\n        }\n        const rpcHandler = async (origin, request) => {\n            let handler = await this._getRpcMessageHandler(snapId);\n            if (this.state.snaps[snapId].enabled === false) {\n                throw new Error(`Snap \"${snapId}\" is disabled.`);\n            }\n            if (this.state.snaps[snapId].status === SnapStatus.installing) {\n                throw new Error(`Snap \"${snapId}\" has not been started yet.`);\n            }\n            if (!handler && this.isRunning(snapId) === false) {\n                // cold start\n                await this.startSnap(snapId);\n                handler = await this._getRpcMessageHandler(snapId);\n            }\n            if (!handler) {\n                throw new Error(`Snap execution service returned no RPC handler for running snap \"${snapId}\".`);\n            }\n            this._recordSnapRpcRequest(snapId);\n            // Handle max request time\n            let timeout;\n            const timeoutPromise = new Promise((_resolve, reject) => {\n                timeout = setTimeout(() => {\n                    this._stopSnap(snapId);\n                    reject(new Error('The request timed out.'));\n                }, this._maxRequestTime);\n            });\n            // This will either get the result or reject due to the timeout.\n            const result = await Promise.race([\n                handler(origin, request),\n                timeoutPromise,\n            ]);\n            clearTimeout(timeout);\n            return result;\n        };\n        this._rpcHandlerMap.set(snapId, rpcHandler);\n        return rpcHandler;\n    }\n    _recordSnapRpcRequest(snapId) {\n        this._lastRequestMap.set(snapId, Date.now());\n    }\n}\nexports.SnapController = SnapController;\nfunction isValidSnapVersion(version) {\n    return Boolean(typeof version === 'string' &&\n        (version === 'latest' || valid_1.default(version)));\n}\n//# sourceMappingURL=SnapController.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSnapJsonFile = void 0;\nconst validateNpmSnapPackageJson_js_1 = __importDefault(require(\"./validateNpmSnapPackageJson.js\"));\nconst validateSnapManifest_js_1 = __importDefault(require(\"./validateSnapManifest.js\"));\nconst utils_1 = require(\"../utils\");\n/**\n * Validates a Snap JSON file. Throws a human-readable list of errors if\n * validation fails.\n *\n * @param fileName - The name of Snap JSON file to validate.\n * @param content - The contents of the file.\n */\nfunction validateSnapJsonFile(fileName, content) {\n    let errors;\n    switch (fileName) {\n        case utils_1.NpmSnapFileNames.Manifest:\n            if (content && typeof content === 'object' && !Array.isArray(content)) {\n                if (content.repository === undefined) {\n                    // We do this to allow consumers to omit this field. We cannot omit\n                    // it internally due to TS@<4.4 limitations.\n                    content.repository = null;\n                }\n            }\n            errors = validateSnapManifest_js_1.default(content);\n            break;\n        case utils_1.NpmSnapFileNames.PackageJson:\n            errors = validateNpmSnapPackageJson_js_1.default(content);\n            break;\n        default:\n            throw new Error(`Unrecognized file name \"${fileName}\".`);\n    }\n    if (errors && errors.length !== 0) {\n        throw new Error(`${errors.reduce((allErrors, errorObject = {}) => {\n            const { instancePath, message = 'unknown error' } = errorObject;\n            const currentString = instancePath\n                ? `\\t${instancePath}\\n\\t${message}\\n\\n`\n                : `\\t${message}\\n\\n`;\n            return `${allErrors}${currentString}`;\n        }, '').replace(/\\n$/u, '')}`);\n    }\n}\nexports.validateSnapJsonFile = validateSnapJsonFile;\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateSnapShasum = exports.validateNpmSnapManifest = exports.validateNpmSnap = exports.ProgrammaticallyFixableSnapError = exports.SnapValidationFailureReason = exports.fetchNpmSnap = exports.getSnapSourceShasum = exports.fetchContent = exports.PROPOSED_NAME_REGEX = exports.DEFAULT_NPM_REGISTRY = exports.LOCALHOST_HOSTNAMES = exports.NpmSnapFileNames = exports.SnapIdPrefixes = void 0;\nconst crypto_1 = require(\"crypto\");\nconst concat_stream_1 = __importDefault(require(\"concat-stream\"));\nconst fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\nconst gunzip_maybe_1 = __importDefault(require(\"gunzip-maybe\"));\nconst pump_1 = __importDefault(require(\"pump\"));\nconst readable_web_to_node_stream_1 = require(\"readable-web-to-node-stream\");\nconst tar_stream_1 = require(\"tar-stream\");\nconst utils_1 = require(\"../utils\");\nconst json_schemas_1 = require(\"./json-schemas\");\nvar SnapIdPrefixes;\n(function (SnapIdPrefixes) {\n    SnapIdPrefixes[\"npm\"] = \"npm:\";\n    SnapIdPrefixes[\"local\"] = \"local:\";\n})(SnapIdPrefixes = exports.SnapIdPrefixes || (exports.SnapIdPrefixes = {}));\nvar NpmSnapFileNames;\n(function (NpmSnapFileNames) {\n    NpmSnapFileNames[\"PackageJson\"] = \"package.json\";\n    NpmSnapFileNames[\"Manifest\"] = \"snap.manifest.json\";\n})(NpmSnapFileNames = exports.NpmSnapFileNames || (exports.NpmSnapFileNames = {}));\nexports.LOCALHOST_HOSTNAMES = new Set(['localhost', '127.0.0.1']);\nexports.DEFAULT_NPM_REGISTRY = 'https://registry.npmjs.org';\nconst SVG_MAX_BYTE_SIZE = 100000;\nconst SVG_MAX_BYTE_SIZE_TEXT = `${Math.floor(SVG_MAX_BYTE_SIZE / 1000)}kb`;\n// This RegEx matches valid npm package names (with some exceptions) and space-\n// separated alphanumerical words, optionally with dashes and underscores.\n// The RegEx consists of two parts. The first part matches space-separated\n// words. It is based on the following Stackoverflow answer:\n// https://stackoverflow.com/a/34974982\n// The second part, after the pipe operator, is the same RegEx used for the\n// `name` field of the official package.json JSON Schema, except that we allow\n// mixed-case letters. It was originally copied from:\n// https://github.com/SchemaStore/schemastore/blob/81a16897c1dabfd98c72242a5fd62eb080ff76d8/src/schemas/json/package.json#L132-L138\nexports.PROPOSED_NAME_REGEX = /^(?:[A-Za-z0-9-_]+( [A-Za-z0-9-_]+)*)|(?:(?:@[A-Za-z0-9-*~][A-Za-z0-9-*._~]*\\/)?[A-Za-z0-9-~][A-Za-z0-9-._~]*)$/u;\n/**\n * @param url - The URL to fetch.\n * @param contentType - The content type of the response body.\n * @returns The response body as the specified content type.\n */\nasync function fetchContent(url, contentType, fetchFunction = fetch) {\n    const response = await fetchFunction(typeof url === 'string' ? url : url.toString());\n    return await response[contentType]();\n}\nexports.fetchContent = fetchContent;\n/**\n * Calculates the Base64-econded SHA-256 digest of a Snap source code string.\n *\n * @param sourceCode - The UTF-8 string source code of a Snap.\n * @returns The Base64-encoded SHA-256 digest of the source code.\n */\nfunction getSnapSourceShasum(sourceCode) {\n    return crypto_1.createHash('sha256').update(sourceCode, 'utf8').digest('base64');\n}\nexports.getSnapSourceShasum = getSnapSourceShasum;\n// npm fetch stuff\nconst ExpectedSnapFiles = ['manifest', 'packageJson', 'sourceCode'];\nconst SnapFileNameFromKey = {\n    manifest: NpmSnapFileNames.Manifest,\n    packageJson: NpmSnapFileNames.PackageJson,\n    sourceCode: 'source code bundle',\n};\n/**\n * Fetches a Snap from the public npm registry.\n *\n * @param packageName - The name of the package whose tarball to fetch.\n * @param version - The version of the package to fetch, or the string `latest`\n * to fetch the latest version.\n * @param fetchFunction - The fetch function to use. Defaults to the global\n * {@link fetch}. Useful for Node.js compatibility.\n * @returns A tuple of the Snap manifest object and the Snap source code.\n */\nasync function fetchNpmSnap(packageName, version, registryUrl = exports.DEFAULT_NPM_REGISTRY, fetchFunction = fetch) {\n    const [tarballResponse, actualVersion] = await fetchNpmTarball(packageName, version, registryUrl, fetchFunction);\n    // Extract the tarball and get the necessary files from it.\n    const snapFiles = {};\n    await new Promise((resolve, reject) => {\n        pump_1.default(getResponseBodyStream(tarballResponse), \n        // The \"gz\" in \"tgz\" stands for \"gzip\". The tarball needs to be decompressed\n        // before we can actually grab any files from it.\n        gunzip_maybe_1.default(), createTarballExtractionStream(snapFiles), (error) => {\n            error ? reject(error) : resolve();\n        });\n    });\n    // At this point, the necessary files will have been added to the snapFiles\n    // object if they exist.\n    return validateNpmSnap(snapFiles, `npm Snap \"${packageName}@${actualVersion}\" validation error: `);\n}\nexports.fetchNpmSnap = fetchNpmSnap;\n/**\n * Snap validation failure reason codes that are programmatically fixable\n * if validation occurs during development.\n */\nvar SnapValidationFailureReason;\n(function (SnapValidationFailureReason) {\n    SnapValidationFailureReason[\"NameMismatch\"] = \"\\\"name\\\" field mismatch\";\n    SnapValidationFailureReason[\"VersionMismatch\"] = \"\\\"version\\\" field mismatch\";\n    SnapValidationFailureReason[\"RepositoryMismatch\"] = \"\\\"repository\\\" field mismatch\";\n    SnapValidationFailureReason[\"ShasumMismatch\"] = \"\\\"shasum\\\" field mismatch\";\n})(SnapValidationFailureReason = exports.SnapValidationFailureReason || (exports.SnapValidationFailureReason = {}));\n/**\n * An error indicating that a Snap validation failure is programmatically\n * fixable during development.\n */\nclass ProgrammaticallyFixableSnapError extends Error {\n    constructor(message, reason) {\n        super(message);\n        this.reason = reason;\n    }\n}\nexports.ProgrammaticallyFixableSnapError = ProgrammaticallyFixableSnapError;\n/**\n * Validates the files extracted from an npm Snap package tarball by ensuring\n * that they're non-empty and that the Json files match their respective schemas\n * and the Snaps publishing specification.\n *\n * @param snapFiles - The object containing the expected Snap file contents,\n * if any.\n * @param packageName - The name of the package whose tarball to fetch.\n * @param version - The version of the package to fetch, or the string `latest`.\n * @param errorPrefix - The prefix of the error message.\n * @returns A tuple of the Snap manifest object and the Snap source code.\n */\nfunction validateNpmSnap(snapFiles, errorPrefix) {\n    ExpectedSnapFiles.forEach((key) => {\n        if (!snapFiles[key]) {\n            throw new Error(`${errorPrefix}Missing file \"${SnapFileNameFromKey[key]}\".`);\n        }\n    });\n    // Typecast: We are assured that the required files exist if we get here.\n    const { manifest, packageJson, sourceCode, svgIcon } = snapFiles;\n    try {\n        json_schemas_1.validateSnapJsonFile(NpmSnapFileNames.Manifest, manifest);\n    }\n    catch (error) {\n        throw new Error(`${errorPrefix}\"${NpmSnapFileNames.Manifest}\" is invalid:\\n${error.message}`);\n    }\n    const validatedManifest = manifest;\n    const { iconPath } = validatedManifest.source.location.npm;\n    if (iconPath && !svgIcon) {\n        throw new Error(`${errorPrefix}Missing file \"${iconPath}\".`);\n    }\n    try {\n        json_schemas_1.validateSnapJsonFile(NpmSnapFileNames.PackageJson, packageJson);\n    }\n    catch (error) {\n        throw new Error(`${errorPrefix}\"${NpmSnapFileNames.PackageJson}\" is invalid:\\n${error.message}`);\n    }\n    const validatedPackageJson = packageJson;\n    validateNpmSnapManifest({\n        manifest: validatedManifest,\n        packageJson: validatedPackageJson,\n        sourceCode,\n    }, errorPrefix);\n    if (svgIcon) {\n        if (Buffer.byteLength(svgIcon, 'utf8') > SVG_MAX_BYTE_SIZE) {\n            throw new Error(`${errorPrefix}The specified SVG icon exceeds the maximum size of ${SVG_MAX_BYTE_SIZE_TEXT}.`);\n        }\n    }\n    return {\n        manifest: validatedManifest,\n        packageJson: validatedPackageJson,\n        sourceCode,\n        svgIcon,\n    };\n}\nexports.validateNpmSnap = validateNpmSnap;\n/**\n * Validates the fields of an npm Snap manifest that has already passed JSON\n * Schema validation.\n *\n * @param manifest - The npm Snap manifest to validate.\n * @param packageJson - The npm Snap's `package.json`.\n * @param sourceCode - The Snap's source code.\n * @param errorPrefix - The prefix for error messages.\n */\nfunction validateNpmSnapManifest({ manifest, packageJson, sourceCode }, errorPrefix) {\n    const packageJsonName = packageJson.name;\n    const packageJsonVersion = packageJson.version;\n    const packageJsonRepository = packageJson.repository;\n    const manifestPackageName = manifest.source.location.npm.packageName;\n    const manifestPackageVersion = manifest.version;\n    const manifestRepository = manifest.repository;\n    if (packageJsonName !== manifestPackageName) {\n        throw new ProgrammaticallyFixableSnapError(`${errorPrefix}\"${NpmSnapFileNames.Manifest}\" npm package name (\"${manifestPackageName}\") does not match the \"${NpmSnapFileNames.PackageJson}\" \"name\" field (\"${packageJsonName}\").`, SnapValidationFailureReason.NameMismatch);\n    }\n    if (packageJsonVersion !== manifestPackageVersion) {\n        throw new ProgrammaticallyFixableSnapError(`${errorPrefix}\"${NpmSnapFileNames.Manifest}\" npm package version (\"${manifestPackageVersion}\") does not match the \"${NpmSnapFileNames.PackageJson}\" \"version\" field (\"${packageJsonVersion}\").`, SnapValidationFailureReason.VersionMismatch);\n    }\n    if (\n    // The repository may be `undefined` in package.json but can only be defined\n    // or `null` in the Snap manifest due to TS@<4.4 issues.\n    (packageJsonRepository || manifestRepository) &&\n        !fast_deep_equal_1.default(packageJsonRepository, manifestRepository)) {\n        throw new ProgrammaticallyFixableSnapError(`${errorPrefix}\"${NpmSnapFileNames.Manifest}\" \"repository\" field does not match the \"${NpmSnapFileNames.PackageJson}\" \"repository\" field.`, SnapValidationFailureReason.RepositoryMismatch);\n    }\n    validateSnapShasum(manifest, sourceCode, `${errorPrefix}\"${NpmSnapFileNames.Manifest}\" \"shasum\" field does not match computed shasum.`);\n    return [manifest, sourceCode, packageJson];\n}\nexports.validateNpmSnapManifest = validateNpmSnapManifest;\n/**\n * Fetches the tarball (`.tgz` file) of the specified package and version from\n * the public npm registry. Throws an error if fetching fails.\n *\n * @param packageName - The name of the package whose tarball to fetch.\n * @param version - The version of the package to fetch, or the string `latest`\n * to fetch the latest version.\n * @param fetchFunction - The fetch function to use. Defaults to the global\n * {@link fetch}. Useful for Node.js compatibility.\n * @returns A tuple of the {@link Response} for the package tarball and the\n * actual version of the package.\n */\nasync function fetchNpmTarball(packageName, version, registryUrl = exports.DEFAULT_NPM_REGISTRY, fetchFunction = fetch) {\n    var _a, _b, _c, _d;\n    const packageMetadata = await fetchContent(new URL(packageName, registryUrl), 'json', fetchFunction);\n    if (!utils_1.isPlainObject(packageMetadata)) {\n        throw new Error(`Failed to fetch package \"${packageName}\" metadata from npm.`);\n    }\n    const targetVersion = version === 'latest'\n        ? (_a = packageMetadata['dist-tags']) === null || _a === void 0 ? void 0 : _a.latest\n        : version;\n    const tarballUrlString = (_d = (_c = (_b = packageMetadata.versions) === null || _b === void 0 ? void 0 : _b[targetVersion]) === null || _c === void 0 ? void 0 : _c.dist) === null || _d === void 0 ? void 0 : _d.tarball;\n    if (!isValidUrl(tarballUrlString) || !tarballUrlString.endsWith('.tgz')) {\n        throw new Error(`Failed to find valid tarball URL in npm metadata for package \"${packageName}\".`);\n    }\n    // Override the tarball hostname/protocol with registryUrl hostname/protocol\n    const newRegistryUrl = new URL(registryUrl);\n    const newTarballUrl = new URL(tarballUrlString);\n    newTarballUrl.hostname = newRegistryUrl.hostname;\n    newTarballUrl.protocol = newRegistryUrl.protocol;\n    // Perform a raw fetch because we want the Response object itself.\n    const tarballResponse = await fetchFunction(newTarballUrl.toString());\n    if (!tarballResponse.ok || !tarballResponse.body) {\n        throw new Error(`Failed to fetch tarball for package \"${packageName}\".`);\n    }\n    return [tarballResponse, targetVersion];\n}\n// The paths of files within npm tarballs appear to always be prefixed with\n// \"package/\".\nconst NPM_TARBALL_PATH_PREFIX = /^package\\//u;\n/**\n * Creates a `tar-stream` that will get the necessary files from an npm Snap\n * package tarball (`.tgz` file).\n *\n * @param snapFiles - An object to write target file contents to.\n * @returns The {@link Writable} tarball extraction stream.\n */\nfunction createTarballExtractionStream(snapFiles) {\n    // `tar-stream` is pretty old-school, so we create it first and then\n    // instrument it by adding event listeners.\n    const extractStream = tar_stream_1.extract();\n    // `tar-stream` reads every file in the tarball serially. We already know\n    // where to look for package.json and the Snap manifest, but we don't know\n    // where the source code is. Therefore, we cache the contents of each .js\n    // file in the tarball and pick out the correct one when the stream has ended.\n    const jsFileCache = new Map();\n    // \"entry\" is fired for every discreet entity in the tarball. This includes\n    // files and folders.\n    extractStream.on('entry', (header, entryStream, next) => {\n        const { name: headerName, type: headerType } = header;\n        if (headerType === 'file') {\n            // The name is a path if the header type is \"file\".\n            const filePath = headerName.replace(NPM_TARBALL_PATH_PREFIX, '');\n            // Note the use of `concat-stream` since the data for each file may be\n            // chunked.\n            if (filePath === NpmSnapFileNames.PackageJson) {\n                return entryStream.pipe(concat_stream_1.default((data) => {\n                    try {\n                        snapFiles.packageJson = JSON.parse(data.toString());\n                    }\n                    catch (_error) {\n                        return extractStream.destroy(new Error(`Failed to parse \"${NpmSnapFileNames.PackageJson}\".`));\n                    }\n                    return next();\n                }));\n            }\n            else if (filePath === NpmSnapFileNames.Manifest) {\n                return entryStream.pipe(concat_stream_1.default((data) => {\n                    try {\n                        snapFiles.manifest = JSON.parse(data.toString());\n                    }\n                    catch (_error) {\n                        return extractStream.destroy(new Error(`Failed to parse \"${NpmSnapFileNames.Manifest}\".`));\n                    }\n                    return next();\n                }));\n            }\n            else if (/\\w+\\.(?:js|svg)$/u.test(filePath)) {\n                return entryStream.pipe(concat_stream_1.default((data) => {\n                    jsFileCache.set(filePath, data);\n                    return next();\n                }));\n            }\n        }\n        // If we get here, the entry is not a file, and we want to ignore. The entry\n        // stream must be drained, or the extractStream will stop reading. This is\n        // effectively a no-op for the current entry.\n        entryStream.on('end', () => next());\n        return entryStream.resume();\n    });\n    // When we've read the entire tarball, attempt to grab the bundle file\n    // contents from the .js file cache.\n    extractStream.on('finish', () => {\n        var _a, _b, _c, _d, _e;\n        if (utils_1.isPlainObject(snapFiles.manifest)) {\n            /* istanbul ignore next: optional chaining */\n            const { filePath: bundlePath, iconPath } = (_c = (_b = (_a = snapFiles.manifest.source) === null || _a === void 0 ? void 0 : _a.location) === null || _b === void 0 ? void 0 : _b.npm) !== null && _c !== void 0 ? _c : {};\n            if (bundlePath) {\n                snapFiles.sourceCode = (_d = jsFileCache.get(bundlePath)) === null || _d === void 0 ? void 0 : _d.toString('utf8');\n            }\n            if (typeof iconPath === 'string' && iconPath.endsWith('.svg')) {\n                snapFiles.svgIcon = (_e = jsFileCache.get(iconPath)) === null || _e === void 0 ? void 0 : _e.toString('utf8');\n            }\n        }\n        jsFileCache.clear();\n    });\n    return extractStream;\n}\n/**\n * Checks whether the source.shasum property of the specified Snap manifest\n * matches the shasum of the specified snap source code string.\n *\n * @param manifest - The manifest whose shasum to validate.\n * @param sourceCode - The source code of the snap.\n */\nfunction validateSnapShasum(manifest, sourceCode, errorMessage = 'Invalid Snap manifest: manifest shasum does not match computed shasum.') {\n    if (manifest.source.shasum !== getSnapSourceShasum(sourceCode)) {\n        throw new ProgrammaticallyFixableSnapError(errorMessage, SnapValidationFailureReason.ShasumMismatch);\n    }\n}\nexports.validateSnapShasum = validateSnapShasum;\n/**\n * Gets the body of a {@link fetch} response as a Node.js {@link Readable}\n * stream. Returns the stream directly if it is already a Node.js stream.\n * We can't use the native Web {@link ReadableStream} directly because the\n * other stream libraries we use expect Node.js streams.\n *\n * @param response - The response whose body stream to get.\n * @returns The response body stream, as a Node.js Readable stream.\n */\nfunction getResponseBodyStream(response) {\n    const { body } = response;\n    if (typeof body.getReader !== 'function') {\n        return body;\n    }\n    return new readable_web_to_node_stream_1.ReadableWebToNodeStream(response.body);\n}\n/**\n * @param maybeUrl - The string to check.\n * @returns Whether the specified string is a valid URL.\n */\nfunction isValidUrl(maybeUrl) {\n    try {\n        return Boolean(new URL(maybeUrl));\n    }\n    catch (_error) {\n        return false;\n    }\n}\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=ExecutionService.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setupMultiplex = exports.AbstractExecutionService = void 0;\nconst object_multiplex_1 = __importDefault(require(\"@metamask/object-multiplex\"));\nconst nanoid_1 = require(\"nanoid\");\nconst pump_1 = __importDefault(require(\"pump\"));\nclass AbstractExecutionService {\n    constructor({ setupSnapProvider, messenger, unresponsivePollingInterval = 5000, unresponsiveTimeout = 30000, }) {\n        this._snapRpcHooks = new Map();\n        this.jobs = new Map();\n        this.setupSnapProvider = setupSnapProvider;\n        this.snapToJobMap = new Map();\n        this.jobToSnapMap = new Map();\n        this._messenger = messenger;\n        this._unresponsivePollingInterval = unresponsivePollingInterval;\n        this._unresponsiveTimeout = unresponsiveTimeout;\n        this._timeoutForUnresponsiveMap = new Map();\n    }\n    async terminateSnap(snapId) {\n        const jobId = this.snapToJobMap.get(snapId);\n        if (!jobId) {\n            throw new Error(`Job not found for snap with id \"${snapId}\".`);\n        }\n        this.terminate(jobId);\n    }\n    async terminateAllSnaps() {\n        for (const workerId of this.jobs.keys()) {\n            this.terminate(workerId);\n        }\n        this._snapRpcHooks.clear();\n    }\n    /**\n     * Gets the RPC message handler for the given snap.\n     *\n     * @param snapId - The id of the Snap whose message handler to get.\n     */\n    async getRpcMessageHandler(snapId) {\n        return this._snapRpcHooks.get(snapId);\n    }\n    async executeSnap(snapData) {\n        if (this.snapToJobMap.has(snapData.snapId)) {\n            throw new Error(`Snap \"${snapData.snapId}\" is already being executed.`);\n        }\n        const job = await this._initJob();\n        this._mapSnapAndJob(snapData.snapId, job.id);\n        this.setupSnapProvider(snapData.snapId, job.streams.rpc);\n        const result = await this._command(job.id, {\n            jsonrpc: '2.0',\n            method: 'executeSnap',\n            params: snapData,\n            id: nanoid_1.nanoid(),\n        });\n        // set up poll/ping for status to see if its up, if its not then emit event that it cant be reached\n        this._pollForJobStatus(snapData.snapId);\n        this._createSnapHooks(snapData.snapId, job.id);\n        return result;\n    }\n    async _command(jobId, message) {\n        if (typeof message !== 'object') {\n            throw new Error('Must send object.');\n        }\n        const job = this.jobs.get(jobId);\n        if (!job) {\n            throw new Error(`Job with id \"${jobId}\" not found.`);\n        }\n        console.log('Parent: Sending Command', message);\n        const response = await job.rpcEngine.handle(message);\n        if (response.error) {\n            throw new Error(response.error.message);\n        }\n        return response.result;\n    }\n    _removeSnapHooks(snapId) {\n        this._snapRpcHooks.delete(snapId);\n    }\n    _createSnapHooks(snapId, workerId) {\n        const rpcHook = async (origin, request) => {\n            return await this._command(workerId, {\n                id: nanoid_1.nanoid(),\n                jsonrpc: '2.0',\n                method: 'snapRpc',\n                params: {\n                    origin,\n                    request,\n                    target: snapId,\n                },\n            });\n        };\n        this._snapRpcHooks.set(snapId, rpcHook);\n    }\n    _pollForJobStatus(snapId) {\n        const jobId = this.snapToJobMap.get(snapId);\n        if (!jobId) {\n            throw new Error('no job id found for snap');\n        }\n        const timeout = setTimeout(async () => {\n            this._getJobStatus(jobId)\n                .then(() => {\n                this._pollForJobStatus(snapId);\n            })\n                .catch(() => {\n                this._messenger.publish('ExecutionService:unresponsive', snapId);\n            });\n        }, this._unresponsivePollingInterval);\n        this._timeoutForUnresponsiveMap.set(snapId, timeout);\n    }\n    async _getJobStatus(jobId) {\n        let resolve;\n        let reject;\n        const timeoutPromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        const timeout = setTimeout(() => {\n            reject(new Error('ping request timed out'));\n        }, this._unresponsiveTimeout);\n        return Promise.race([\n            this._command(jobId, {\n                jsonrpc: '2.0',\n                method: 'ping',\n                params: [],\n                id: nanoid_1.nanoid(),\n            }).then(() => {\n                clearTimeout(timeout);\n                resolve();\n            }),\n            timeoutPromise,\n        ]);\n    }\n    /**\n     * @returns The ID of the snap's job.\n     */\n    _getJobForSnap(snapId) {\n        return this.snapToJobMap.get(snapId);\n    }\n    /**\n     * @returns The ID jobs's snap.\n     */\n    _getSnapForJob(jobId) {\n        return this.jobToSnapMap.get(jobId);\n    }\n    _mapSnapAndJob(snapId, jobId) {\n        this.snapToJobMap.set(snapId, jobId);\n        this.jobToSnapMap.set(jobId, snapId);\n    }\n    _removeSnapAndJobMapping(jobId) {\n        const snapId = this.jobToSnapMap.get(jobId);\n        if (!snapId) {\n            throw new Error(`job: \"${jobId}\" has no mapped snap.`);\n        }\n        this.jobToSnapMap.delete(jobId);\n        this.snapToJobMap.delete(snapId);\n        this._removeSnapHooks(snapId);\n    }\n}\nexports.AbstractExecutionService = AbstractExecutionService;\n/**\n * Sets up stream multiplexing for the given stream.\n *\n * @param connectionStream - the stream to mux\n * @param streamName - the name of the stream, for identification in errors\n * @return {stream.Stream} the multiplexed stream\n */\nfunction setupMultiplex(connectionStream, streamName) {\n    const mux = new object_multiplex_1.default();\n    pump_1.default(connectionStream, \n    // Typecast: stream type mismatch\n    mux, connectionStream, (err) => {\n        if (err) {\n            streamName\n                ? console.error(`\"${streamName}\" stream failure.`, err)\n                : console.error(err);\n        }\n    });\n    return mux;\n}\nexports.setupMultiplex = setupMultiplex;\n//# sourceMappingURL=AbstractExecutionService.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WebWorkerExecutionService = void 0;\nconst obs_store_1 = require(\"@metamask/obs-store\");\nconst post_message_stream_1 = require(\"@metamask/post-message-stream\");\nconst snap_workers_1 = require(\"@metamask/snap-workers\");\nconst json_rpc_engine_1 = require(\"json-rpc-engine\");\nconst json_rpc_middleware_stream_1 = require(\"json-rpc-middleware-stream\");\nconst nanoid_1 = require(\"nanoid\");\nconst pump_1 = __importDefault(require(\"pump\"));\nconst AbstractExecutionService_1 = require(\"./AbstractExecutionService\");\nclass WebWorkerExecutionService extends AbstractExecutionService_1.AbstractExecutionService {\n    constructor({ setupSnapProvider, workerUrl, messenger, unresponsivePollingInterval = 5000, unresponsiveTimeout = 30000, }) {\n        super({\n            setupSnapProvider,\n            messenger,\n            unresponsivePollingInterval,\n            unresponsiveTimeout,\n        });\n        this.workerUrl = workerUrl;\n        this.store = new obs_store_1.ObservableStore({ workers: {} });\n    }\n    _setWorker(workerId, workerWrapper) {\n        this.jobs.set(workerId, workerWrapper);\n        const newWorkerState = Object.assign(Object.assign({}, this.store.getState().workers), { [workerId]: workerWrapper });\n        this.store.updateState({ workers: newWorkerState });\n    }\n    _deleteWorker(workerId) {\n        this.jobs.delete(workerId);\n        const newWorkerState = Object.assign({}, this.store.getState().workers);\n        delete newWorkerState[workerId];\n        this.store.updateState({ workers: newWorkerState });\n    }\n    terminate(workerId) {\n        const workerWrapper = this.jobs.get(workerId);\n        if (!workerWrapper) {\n            throw new Error(`Worker with id \"${workerId}\" not found.`);\n        }\n        const snapId = this._getSnapForJob(workerId);\n        if (!snapId) {\n            throw new Error(`Failed to find a snap for worker with id \"${workerId}\".`);\n        }\n        Object.values(workerWrapper.streams).forEach((stream) => {\n            try {\n                !stream.destroyed && stream.destroy();\n                stream.removeAllListeners();\n            }\n            catch (err) {\n                console.log('Error while destroying stream', err);\n            }\n        });\n        workerWrapper.worker.terminate();\n        this._removeSnapAndJobMapping(workerId);\n        this._deleteWorker(workerId);\n        clearTimeout(this._timeoutForUnresponsiveMap.get(workerId));\n        this._timeoutForUnresponsiveMap.delete(workerId);\n        console.log(`worker:${workerId} terminated`);\n    }\n    async _initJob() {\n        const workerId = nanoid_1.nanoid();\n        const worker = new Worker(this.workerUrl, {\n            name: workerId,\n        });\n        // Handle out-of-band errors, i.e. errors thrown from the snap outside of the req/res cycle.\n        const errorHandler = (ev) => {\n            if (this._messenger) {\n                const snapId = this.jobToSnapMap.get(workerId);\n                if (snapId) {\n                    this._messenger.publish('ExecutionService:unhandledError', snapId, {\n                        code: ev.error.code,\n                        message: ev.error.message,\n                        data: ev.error.data,\n                    });\n                }\n            }\n        };\n        worker.addEventListener('error', errorHandler, { once: true });\n        const streams = this._initWorkerStreams(worker, workerId);\n        const rpcEngine = new json_rpc_engine_1.JsonRpcEngine();\n        const jsonRpcConnection = json_rpc_middleware_stream_1.createStreamMiddleware();\n        pump_1.default(jsonRpcConnection.stream, streams.command, jsonRpcConnection.stream);\n        rpcEngine.push(jsonRpcConnection.middleware);\n        const workerWrapper = {\n            id: workerId,\n            streams,\n            rpcEngine,\n            worker,\n        };\n        this._setWorker(workerId, workerWrapper);\n        await this._command(workerId, {\n            jsonrpc: '2.0',\n            method: 'ping',\n            id: nanoid_1.nanoid(),\n        });\n        return workerWrapper;\n    }\n    _initWorkerStreams(worker, workerId) {\n        const workerStream = new post_message_stream_1.WorkerParentPostMessageStream({ worker });\n        // Typecast justification: stream type mismatch\n        const mux = AbstractExecutionService_1.setupMultiplex(workerStream, `Worker:${workerId}`);\n        const commandStream = mux.createStream(snap_workers_1.SNAP_STREAM_NAMES.COMMAND);\n        const rpcStream = mux.createStream(snap_workers_1.SNAP_STREAM_NAMES.JSON_RPC);\n        // Typecast: stream type mismatch\n        return {\n            command: commandStream,\n            rpc: rpcStream,\n            _connection: workerStream,\n        };\n    }\n}\nexports.WebWorkerExecutionService = WebWorkerExecutionService;\n//# sourceMappingURL=WebWorkerExecutionService.js.map","import addEthereumChain from './add-ethereum-chain';\nimport ethAccounts from './eth-accounts';\nimport getProviderState from './get-provider-state';\nimport logWeb3ShimUsage from './log-web3-shim-usage';\nimport requestAccounts from './request-accounts';\nimport sendMetadata from './send-metadata';\nimport switchEthereumChain from './switch-ethereum-chain';\nimport watchAsset from './watch-asset';\n\nconst handlers = [\n  addEthereumChain,\n  ethAccounts,\n  getProviderState,\n  logWeb3ShimUsage,\n  requestAccounts,\n  sendMetadata,\n  switchEthereumChain,\n  watchAsset,\n];\nexport default handlers;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.selectHooks = exports.restrictedMethodPermissionBuilders = exports.permittedMethods = void 0;\nvar permitted_1 = require(\"./permitted\");\nObject.defineProperty(exports, \"permittedMethods\", { enumerable: true, get: function () { return permitted_1.handlers; } });\nvar restricted_1 = require(\"./restricted\");\nObject.defineProperty(exports, \"restrictedMethodPermissionBuilders\", { enumerable: true, get: function () { return restricted_1.builders; } });\nvar utils_1 = require(\"./utils\");\nObject.defineProperty(exports, \"selectHooks\", { enumerable: true, get: function () { return utils_1.selectHooks; } });\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./asStream\"), exports);\n__exportStar(require(\"./ComposedStore\"), exports);\n__exportStar(require(\"./MergedStore\"), exports);\n__exportStar(require(\"./ObservableStore\"), exports);\n__exportStar(require(\"./transform\"), exports);\n//# sourceMappingURL=index.js.map","\n'use strict'\n\nif (\"production\" === 'production') {\n  module.exports = require('./bc-ur-registry-eth.cjs.production.min.js')\n} else {\n  module.exports = require('./bc-ur-registry-eth.cjs.development.js')\n}\n","\n'use strict'\n\nif (\"production\" === 'production') {\n  module.exports = require('./base-eth-keyring.cjs.production.min.js')\n} else {\n  module.exports = require('./base-eth-keyring.cjs.development.js')\n}\n","import { createAsyncMiddleware } from 'json-rpc-engine';\nimport { formatTxMetaForRpcResult } from '../util';\n\nexport function createPendingNonceMiddleware({ getPendingNonce }) {\n  return createAsyncMiddleware(async (req, res, next) => {\n    const { method, params } = req;\n    if (method !== 'eth_getTransactionCount') {\n      next();\n      return;\n    }\n    const [param, blockRef] = params;\n    if (blockRef !== 'pending') {\n      next();\n      return;\n    }\n    res.result = await getPendingNonce(param);\n  });\n}\n\nexport function createPendingTxMiddleware({ getPendingTransactionByHash }) {\n  return createAsyncMiddleware(async (req, res, next) => {\n    const { method, params } = req;\n    if (method !== 'eth_getTransactionByHash') {\n      next();\n      return;\n    }\n    const [hash] = params;\n    const txMeta = getPendingTransactionByHash(hash);\n    if (!txMeta) {\n      next();\n      return;\n    }\n    res.result = formatTxMetaForRpcResult(txMeta);\n  });\n}\n","var engine = require('../src/store-engine')\n\nvar storages = require('../storages/all')\nvar plugins = [require('../plugins/json2')]\n\nmodule.exports = engine.createStore(storages, plugins)\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar graphQLRequest = require('graphql-request').request;\n\nvar utils = require('./utils/index');\n\nvar verifier = require('./utils/verifier');\n\nvar _require = require('./utils/id'),\n    isMuportDID = _require.isMuportDID;\n\nvar config = require('./config.js');\n\nvar GRAPHQL_SERVER_URL = config.graphql_server_url;\nvar PROFILE_SERVER_URL = config.profile_server_url;\nvar ADDRESS_SERVER_URL = config.address_server_url;\n\nfunction getRootStoreAddress(_x) {\n  return _getRootStoreAddress.apply(this, arguments);\n}\n\nfunction _getRootStoreAddress() {\n  _getRootStoreAddress = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee(identifier) {\n    var serverUrl,\n        res,\n        _args = arguments;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            serverUrl = _args.length > 1 && _args[1] !== undefined ? _args[1] : ADDRESS_SERVER_URL;\n            _context.next = 3;\n            return utils.fetchJson(serverUrl + '/odbAddress/' + identifier);\n\n          case 3:\n            res = _context.sent;\n            return _context.abrupt(\"return\", res.data.rootStoreAddress);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getRootStoreAddress.apply(this, arguments);\n}\n\nfunction listSpaces(_x2) {\n  return _listSpaces.apply(this, arguments);\n}\n\nfunction _listSpaces() {\n  _listSpaces = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee2(address) {\n    var serverUrl,\n        _args2 = arguments;\n    return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            serverUrl = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : PROFILE_SERVER_URL;\n            _context2.prev = 1;\n\n            if (!isMuportDID(address)) {\n              _context2.next = 8;\n              break;\n            }\n\n            _context2.next = 5;\n            return utils.fetchJson(serverUrl + '/list-spaces?did=' + encodeURIComponent(address));\n\n          case 5:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 8:\n            _context2.next = 10;\n            return utils.fetchJson(serverUrl + '/list-spaces?address=' + encodeURIComponent(address));\n\n          case 10:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 11:\n            _context2.next = 16;\n            break;\n\n          case 13:\n            _context2.prev = 13;\n            _context2.t0 = _context2[\"catch\"](1);\n            return _context2.abrupt(\"return\", []);\n\n          case 16:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[1, 13]]);\n  }));\n  return _listSpaces.apply(this, arguments);\n}\n\nfunction getSpace(_x3, _x4) {\n  return _getSpace.apply(this, arguments);\n} // TODO consumes address now, could also give root DID to get space DID\n\n\nfunction _getSpace() {\n  _getSpace = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee3(address, name) {\n    var serverUrl,\n        _ref,\n        metadata,\n        blocklist,\n        url,\n        _args3 = arguments;\n\n    return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            serverUrl = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : PROFILE_SERVER_URL;\n            _ref = _args3.length > 3 && _args3[3] !== undefined ? _args3[3] : {}, metadata = _ref.metadata, blocklist = _ref.blocklist;\n\n            if (!(blocklist && blocklist(address))) {\n              _context3.next = 4;\n              break;\n            }\n\n            throw new Error(\"user with \".concat(address, \" is blocked\"));\n\n          case 4:\n            url = \"\".concat(serverUrl, \"/space\");\n            _context3.prev = 5;\n\n            // Add first parameter: address or did\n            if (isMuportDID(address)) {\n              url = \"\".concat(url, \"?did=\").concat(encodeURIComponent(address));\n            } else {\n              url = \"\".concat(url, \"?address=\").concat(encodeURIComponent(address.toLowerCase()));\n            } // Add name:\n\n\n            url = \"\".concat(url, \"&name=\").concat(encodeURIComponent(name)); // Add metadata:\n\n            if (metadata) {\n              url = \"\".concat(url, \"&metadata=\").concat(encodeURIComponent(metadata));\n            } // Query:\n            // we await explicitly to make sure the error is catch'd in the correct scope\n\n\n            _context3.next = 11;\n            return utils.fetchJson(url);\n\n          case 11:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 14:\n            _context3.prev = 14;\n            _context3.t0 = _context3[\"catch\"](5);\n            return _context3.abrupt(\"return\", {});\n\n          case 17:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[5, 14]]);\n  }));\n  return _getSpace.apply(this, arguments);\n}\n\nfunction getSpaceDID(_x5, _x6) {\n  return _getSpaceDID.apply(this, arguments);\n}\n\nfunction _getSpaceDID() {\n  _getSpaceDID = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee4(address, space) {\n    var opts,\n        conf,\n        _args4 = arguments;\n    return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            opts = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};\n            _context4.next = 3;\n            return getConfig(address, opts);\n\n          case 3:\n            conf = _context4.sent;\n\n            if (!(!conf.spaces[space] || !conf.spaces[space].DID)) {\n              _context4.next = 6;\n              break;\n            }\n\n            throw new Error(\"Could not find appropriate DID for address \".concat(address));\n\n          case 6:\n            return _context4.abrupt(\"return\", conf.spaces[space].DID);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n  return _getSpaceDID.apply(this, arguments);\n}\n\nfunction getThread(_x7, _x8, _x9, _x10) {\n  return _getThread.apply(this, arguments);\n}\n\nfunction _getThread() {\n  _getThread = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee5(space, name, firstModerator, members) {\n    var opts,\n        serverUrl,\n        url,\n        _args5 = arguments;\n    return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            opts = _args5.length > 4 && _args5[4] !== undefined ? _args5[4] : {};\n            serverUrl = opts.profileServer || PROFILE_SERVER_URL;\n\n            if (!firstModerator.startsWith('0x')) {\n              _context5.next = 6;\n              break;\n            }\n\n            _context5.next = 5;\n            return getSpaceDID(firstModerator, space, opts);\n\n          case 5:\n            firstModerator = _context5.sent;\n\n          case 6:\n            _context5.prev = 6;\n            url = \"\".concat(serverUrl, \"/thread?space=\").concat(encodeURIComponent(space), \"&name=\").concat(encodeURIComponent(name));\n            url += \"&mod=\".concat(encodeURIComponent(firstModerator), \"&members=\").concat(encodeURIComponent(members));\n            _context5.next = 11;\n            return utils.fetchJson(url);\n\n          case 11:\n            return _context5.abrupt(\"return\", _context5.sent);\n\n          case 14:\n            _context5.prev = 14;\n            _context5.t0 = _context5[\"catch\"](6);\n            throw new Error(_context5.t0);\n\n          case 17:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[6, 14]]);\n  }));\n  return _getThread.apply(this, arguments);\n}\n\nfunction getThreadByAddress(_x11) {\n  return _getThreadByAddress.apply(this, arguments);\n}\n\nfunction _getThreadByAddress() {\n  _getThreadByAddress = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee6(address) {\n    var opts,\n        serverUrl,\n        _args6 = arguments;\n    return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            opts = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n            serverUrl = opts.profileServer || PROFILE_SERVER_URL;\n            _context6.prev = 2;\n            _context6.next = 5;\n            return utils.fetchJson(\"\".concat(serverUrl, \"/thread?address=\").concat(encodeURIComponent(address)));\n\n          case 5:\n            return _context6.abrupt(\"return\", _context6.sent);\n\n          case 8:\n            _context6.prev = 8;\n            _context6.t0 = _context6[\"catch\"](2);\n            throw new Error(_context6.t0);\n\n          case 11:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6, null, [[2, 8]]);\n  }));\n  return _getThreadByAddress.apply(this, arguments);\n}\n\nfunction getConfig(_x12) {\n  return _getConfig.apply(this, arguments);\n}\n\nfunction _getConfig() {\n  _getConfig = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee7(address) {\n    var opts,\n        serverUrl,\n        _args7 = arguments;\n    return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            opts = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};\n            serverUrl = opts.profileServer || PROFILE_SERVER_URL;\n            _context7.prev = 2;\n            _context7.next = 5;\n            return utils.fetchJson(\"\".concat(serverUrl, \"/config?address=\").concat(encodeURIComponent(address)));\n\n          case 5:\n            return _context7.abrupt(\"return\", _context7.sent);\n\n          case 8:\n            _context7.prev = 8;\n            _context7.t0 = _context7[\"catch\"](2);\n            throw new Error(_context7.t0);\n\n          case 11:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[2, 8]]);\n  }));\n  return _getConfig.apply(this, arguments);\n}\n\nfunction getProfile(_x13) {\n  return _getProfile.apply(this, arguments);\n}\n\nfunction _getProfile() {\n  _getProfile = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee8(address) {\n    var serverUrl,\n        _ref2,\n        metadata,\n        blocklist,\n        url,\n        _args8 = arguments;\n\n    return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            serverUrl = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : PROFILE_SERVER_URL;\n            _ref2 = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : {}, metadata = _ref2.metadata, blocklist = _ref2.blocklist;\n\n            if (!(blocklist && blocklist(address))) {\n              _context8.next = 4;\n              break;\n            }\n\n            throw new Error(\"user with \".concat(address, \" is blocked\"));\n\n          case 4:\n            url = \"\".concat(serverUrl, \"/profile\");\n            _context8.prev = 5;\n\n            // Add first parameter: address or did\n            if (isMuportDID(address)) {\n              url = \"\".concat(url, \"?did=\").concat(encodeURIComponent(address));\n            } else {\n              url = \"\".concat(url, \"?address=\").concat(encodeURIComponent(address.toLowerCase()));\n            } // Add metadata:\n\n\n            if (metadata) {\n              url = \"\".concat(url, \"&metadata=\").concat(encodeURIComponent(metadata));\n            } // Query:\n            // we await explicitly to make sure the error is catch'd in the correct scope\n\n\n            _context8.next = 10;\n            return utils.fetchJson(url);\n\n          case 10:\n            return _context8.abrupt(\"return\", _context8.sent);\n\n          case 13:\n            _context8.prev = 13;\n            _context8.t0 = _context8[\"catch\"](5);\n            return _context8.abrupt(\"return\", {});\n\n          case 16:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8, null, [[5, 13]]);\n  }));\n  return _getProfile.apply(this, arguments);\n}\n\nfunction getProfiles(_x14) {\n  return _getProfiles.apply(this, arguments);\n}\n\nfunction _getProfiles() {\n  _getProfiles = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee9(addressArray) {\n    var opts,\n        req,\n        url,\n        _args9 = arguments;\n    return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            opts = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {};\n            opts = Object.assign({\n              profileServer: PROFILE_SERVER_URL\n            }, opts);\n            req = {\n              addressList: [],\n              didList: [] // Split addresses on ethereum / dids\n\n            };\n            addressArray.forEach(function (address) {\n              if (isMuportDID(address)) {\n                req.didList.push(address);\n              } else {\n                req.addressList.push(address);\n              }\n            });\n            url = \"\".concat(opts.profileServer, \"/profileList\");\n            return _context9.abrupt(\"return\", utils.fetchJson(url, req));\n\n          case 6:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9);\n  }));\n  return _getProfiles.apply(this, arguments);\n}\n\nfunction profileGraphQL(_x15) {\n  return _profileGraphQL.apply(this, arguments);\n}\n\nfunction _profileGraphQL() {\n  _profileGraphQL = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee10(query) {\n    var opts,\n        _args10 = arguments;\n    return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n      while (1) {\n        switch (_context10.prev = _context10.next) {\n          case 0:\n            opts = _args10.length > 1 && _args10[1] !== undefined ? _args10[1] : {};\n            opts = Object.assign({\n              graphqlServer: GRAPHQL_SERVER_URL\n            }, opts);\n            return _context10.abrupt(\"return\", graphQLRequest(opts.graphqlServer, query));\n\n          case 3:\n          case \"end\":\n            return _context10.stop();\n        }\n      }\n    }, _callee10);\n  }));\n  return _profileGraphQL.apply(this, arguments);\n}\n\nfunction getVerifiedAccounts(_x16) {\n  return _getVerifiedAccounts.apply(this, arguments);\n}\n\nfunction _getVerifiedAccounts() {\n  _getVerifiedAccounts = (0, _asyncToGenerator2[\"default\"])(\n  /*#__PURE__*/\n  _regenerator[\"default\"].mark(function _callee11(profile) {\n    var verifs, did;\n    return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n      while (1) {\n        switch (_context11.prev = _context11.next) {\n          case 0:\n            verifs = {};\n            _context11.prev = 1;\n            _context11.next = 4;\n            return verifier.verifyDID(profile.proof_did);\n\n          case 4:\n            did = _context11.sent;\n            verifs.did = did;\n\n            if (!profile.proof_github) {\n              _context11.next = 15;\n              break;\n            }\n\n            _context11.prev = 7;\n            _context11.next = 10;\n            return verifier.verifyGithub(did, profile.proof_github);\n\n          case 10:\n            verifs.github = _context11.sent;\n            _context11.next = 15;\n            break;\n\n          case 13:\n            _context11.prev = 13;\n            _context11.t0 = _context11[\"catch\"](7);\n\n          case 15:\n            if (!profile.proof_twitter) {\n              _context11.next = 24;\n              break;\n            }\n\n            _context11.prev = 16;\n            _context11.next = 19;\n            return verifier.verifyTwitter(did, profile.proof_twitter);\n\n          case 19:\n            verifs.twitter = _context11.sent;\n            _context11.next = 24;\n            break;\n\n          case 22:\n            _context11.prev = 22;\n            _context11.t1 = _context11[\"catch\"](16);\n\n          case 24:\n            if (!profile.ethereum_proof) {\n              _context11.next = 33;\n              break;\n            }\n\n            _context11.prev = 25;\n            _context11.next = 28;\n            return verifier.verifyEthereum(profile.ethereum_proof, did);\n\n          case 28:\n            verifs.ethereum = _context11.sent;\n            _context11.next = 33;\n            break;\n\n          case 31:\n            _context11.prev = 31;\n            _context11.t2 = _context11[\"catch\"](25);\n\n          case 33:\n            _context11.next = 37;\n            break;\n\n          case 35:\n            _context11.prev = 35;\n            _context11.t3 = _context11[\"catch\"](1);\n\n          case 37:\n            return _context11.abrupt(\"return\", verifs);\n\n          case 38:\n          case \"end\":\n            return _context11.stop();\n        }\n      }\n    }, _callee11, null, [[1, 35], [7, 13], [16, 22], [25, 31]]);\n  }));\n  return _getVerifiedAccounts.apply(this, arguments);\n}\n\nmodule.exports = {\n  profileGraphQL: profileGraphQL,\n  getProfile: getProfile,\n  getSpace: getSpace,\n  listSpaces: listSpaces,\n  getThread: getThread,\n  getThreadByAddress: getThreadByAddress,\n  getConfig: getConfig,\n  getRootStoreAddress: getRootStoreAddress,\n  getProfiles: getProfiles,\n  getVerifiedAccounts: getVerifiedAccounts,\n  getSpaceDID: getSpaceDID\n};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar KeyValueStore = require('./keyValueStore');\n\nvar Thread = require('./thread');\n\nvar _require = require('./utils'),\n    sha256Multihash = _require.sha256Multihash,\n    throwIfUndefined = _require.throwIfUndefined,\n    throwIfNotEqualLenArrays = _require.throwIfNotEqualLenArrays;\n\nvar OrbitDBAddress = require('orbit-db/src/orbit-db-address');\n\nvar ENC_BLOCK_SIZE = 24;\n\nvar nameToSpaceName = function nameToSpaceName(name) {\n  return \"3box.space.\".concat(name, \".keyvalue\");\n};\n\nvar namesTothreadName = function namesTothreadName(spaceName, threadName) {\n  return \"3box.thread.\".concat(spaceName, \".\").concat(threadName);\n};\n\nvar Space =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Please use **box.openSpace** to get the instance of this class\n   */\n  function Space(name, threeId, orbitdb, rootStore, ensureConnected) {\n    (0, _classCallCheck2[\"default\"])(this, Space);\n    this._name = name;\n    this._3id = threeId;\n    this._ensureConnected = ensureConnected;\n    this._store = new KeyValueStore(orbitdb, nameToSpaceName(this._name), this._ensureConnected, this._3id);\n    this._orbitdb = orbitdb;\n    this._activeThreads = {};\n    this._rootStore = rootStore;\n    /**\n     * @property {KeyValueStore} public         access the profile store of the space\n     */\n\n    this[\"public\"] = null;\n    /**\n     * @property {KeyValueStore} private        access the private store of the space\n     */\n\n    this[\"private\"] = null;\n  }\n  /**\n   * @property {String} DID        the did of the user in this space\n   */\n\n\n  (0, _createClass2[\"default\"])(Space, [{\n    key: \"open\",\n    value: function () {\n      var _open = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee2() {\n        var _this = this;\n\n        var opts,\n            consentNeeded,\n            spaceAddress,\n            entries,\n            entry,\n            hasNumEntries,\n            numEntries,\n            syncSpace,\n            _args2 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                opts = _args2.length > 0 && _args2[0] !== undefined ? _args2[0] : {};\n\n                if (this._store._db) {\n                  _context2.next = 29;\n                  break;\n                }\n\n                _context2.next = 4;\n                return this._3id.initKeyringByName(this._name);\n\n              case 4:\n                consentNeeded = _context2.sent;\n                if (opts.consentCallback) opts.consentCallback(consentNeeded, this._name);\n                _context2.next = 8;\n                return this._store._load();\n\n              case 8:\n                spaceAddress = _context2.sent;\n                _context2.next = 11;\n                return this._rootStore.iterator({\n                  limit: -1\n                }).collect();\n\n              case 11:\n                entries = _context2.sent;\n                entry = entries.find(function (entry) {\n                  return entry.payload.value.odbAddress && entry.payload.value.odbAddress.indexOf(nameToSpaceName(_this._name)) !== -1;\n                });\n\n                if (entry) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.next = 16;\n                return this._rootStore.add({\n                  type: 'space',\n                  DID: this.DID,\n                  odbAddress: spaceAddress\n                });\n\n              case 16:\n                _context2.next = 23;\n                break;\n\n              case 18:\n                if (entry.payload.value.type) {\n                  _context2.next = 23;\n                  break;\n                }\n\n                _context2.next = 21;\n                return this._rootStore.del(entry.hash);\n\n              case 21:\n                _context2.next = 23;\n                return this._rootStore.add({\n                  type: 'space',\n                  DID: this.DID,\n                  odbAddress: spaceAddress\n                });\n\n              case 23:\n                hasNumEntries = opts.numEntriesMessages && opts.numEntriesMessages[spaceAddress];\n                numEntries = hasNumEntries ? opts.numEntriesMessages[spaceAddress].numEntries : undefined;\n\n                syncSpace =\n                /*#__PURE__*/\n                function () {\n                  var _ref = (0, _asyncToGenerator2[\"default\"])(\n                  /*#__PURE__*/\n                  _regenerator[\"default\"].mark(function _callee() {\n                    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n                      while (1) {\n                        switch (_context.prev = _context.next) {\n                          case 0:\n                            _context.next = 2;\n                            return _this._store._sync(numEntries);\n\n                          case 2:\n                            if (opts.onSyncDone) opts.onSyncDone();\n\n                          case 3:\n                          case \"end\":\n                            return _context.stop();\n                        }\n                      }\n                    }, _callee);\n                  }));\n\n                  return function syncSpace() {\n                    return _ref.apply(this, arguments);\n                  };\n                }();\n\n                this._syncSpacePromise = syncSpace();\n                this[\"public\"] = publicStoreReducer(this._store);\n                this[\"private\"] = privateStoreReducer(this._store, this._3id.getKeyringBySpaceName(nameToSpaceName(this._name)));\n\n              case 29:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function open() {\n        return _open.apply(this, arguments);\n      }\n\n      return open;\n    }()\n    /**\n     * Join a thread. Use this to start receiving updates from, and to post in threads\n     *\n     * @param     {String}    name                    The name of the thread\n     * @param     {Object}    opts                    Optional parameters\n     * @param     {String}    opts.firstModerator     DID of first moderator of a thread, by default, user is first moderator\n     * @param     {Boolean}   opts.members            join a members only thread, which only members can post in, defaults to open thread\n     * @param     {Boolean}   opts.noAutoSub          Disable auto subscription to the thread when posting to it (default false)\n     *\n     * @return    {Thread}                            An instance of the thread class for the joined thread\n     */\n\n  }, {\n    key: \"joinThread\",\n    value: function () {\n      var _joinThread = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee3(name) {\n        var opts,\n            subscribeFn,\n            thread,\n            address,\n            _args3 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                opts = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : {};\n                subscribeFn = opts.noAutoSub ? function () {} : this.subscribeThread.bind(this);\n                if (!opts.firstModerator) opts.firstModerator = this._3id.getSubDID(this._name);\n                thread = new Thread(this._orbitdb, namesTothreadName(this._name, name), this._3id, opts.members, opts.firstModerator, subscribeFn, this._ensureConnected);\n                _context3.next = 6;\n                return thread._getThreadAddress();\n\n              case 6:\n                address = _context3.sent;\n\n                if (!this._activeThreads[address]) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this._activeThreads[address]);\n\n              case 9:\n                _context3.next = 11;\n                return thread._load();\n\n              case 11:\n                this._activeThreads[address] = thread;\n                return _context3.abrupt(\"return\", thread);\n\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function joinThread(_x) {\n        return _joinThread.apply(this, arguments);\n      }\n\n      return joinThread;\n    }()\n    /**\n     * Join a thread by full thread address. Use this to start receiving updates from, and to post in threads\n     *\n     * @param     {String}    address                 The full address of the thread\n     * @param     {Object}    opts                    Optional parameters\n     * @param     {Boolean}   opts.noAutoSub          Disable auto subscription to the thread when posting to it (default false)\n     *\n     * @return    {Thread}                            An instance of the thread class for the joined thread\n     */\n\n  }, {\n    key: \"joinThreadByAddress\",\n    value: function () {\n      var _joinThreadByAddress = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee4(address) {\n        var opts,\n            threadSpace,\n            threadName,\n            subscribeFn,\n            thread,\n            _args4 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                opts = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n\n                if (OrbitDBAddress.isValid(address)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                throw new Error('joinThreadByAddress: valid orbitdb address required');\n\n              case 3:\n                threadSpace = address.split('.')[2];\n                threadName = address.split('.')[3];\n\n                if (!(threadSpace !== this._name)) {\n                  _context4.next = 7;\n                  break;\n                }\n\n                throw new Error('joinThreadByAddress: attempting to open thread from different space, must open within same space');\n\n              case 7:\n                if (!this._activeThreads[address]) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\", this._activeThreads[address]);\n\n              case 9:\n                subscribeFn = opts.noAutoSub ? function () {} : this.subscribeThread.bind(this);\n                thread = new Thread(this._orbitdb, namesTothreadName(this._name, threadName), this._3id, opts.members, opts.firstModerator, subscribeFn, this._ensureConnected);\n                _context4.next = 13;\n                return thread._load(address);\n\n              case 13:\n                this._activeThreads[address] = thread;\n                return _context4.abrupt(\"return\", thread);\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function joinThreadByAddress(_x2) {\n        return _joinThreadByAddress.apply(this, arguments);\n      }\n\n      return joinThreadByAddress;\n    }()\n    /**\n     * Subscribe to the given thread, if not already subscribed\n     *\n     * @param     {String}    address                The address of the thread\n     * @param     {Object}    config                configuration and thread meta data\n     * @param     {String}    opts.name             Name of thread\n     * @param     {String}    opts.firstModerator   DID of the first moderator\n     * @param     {String}    opts.members          Boolean string, true if a members only thread\n     */\n\n  }, {\n    key: \"subscribeThread\",\n    value: function () {\n      var _subscribeThread = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee5(address) {\n        var config,\n            threadKey,\n            _args5 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                config = _args5.length > 1 && _args5[1] !== undefined ? _args5[1] : {};\n\n                if (OrbitDBAddress.isValid(address)) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                throw new Error('subscribeThread: must subscribe to valid thread/orbitdb address');\n\n              case 3:\n                threadKey = \"thread-\".concat(address);\n                _context5.next = 6;\n                return this._syncSpacePromise;\n\n              case 6:\n                _context5.next = 8;\n                return this[\"public\"].get(threadKey);\n\n              case 8:\n                if (_context5.sent) {\n                  _context5.next = 11;\n                  break;\n                }\n\n                _context5.next = 11;\n                return this[\"public\"].set(threadKey, Object.assign({}, config, {\n                  address: address\n                }));\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function subscribeThread(_x3) {\n        return _subscribeThread.apply(this, arguments);\n      }\n\n      return subscribeThread;\n    }()\n    /**\n     * Unsubscribe from the given thread, if subscribed\n     *\n     * @param     {String}    address     The address of the thread\n     */\n\n  }, {\n    key: \"unsubscribeThread\",\n    value: function () {\n      var _unsubscribeThread = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee6(address) {\n        var threadKey;\n        return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                threadKey = \"thread-\".concat(address);\n                _context6.next = 3;\n                return this[\"public\"].get(threadKey);\n\n              case 3:\n                if (!_context6.sent) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                _context6.next = 6;\n                return this[\"public\"].remove(threadKey);\n\n              case 6:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function unsubscribeThread(_x4) {\n        return _unsubscribeThread.apply(this, arguments);\n      }\n\n      return unsubscribeThread;\n    }()\n    /**\n     * Get a list of all the threads subscribed to in this space\n     *\n     * @return    {Array<Objects>}    A list of thread objects as { address, firstModerator, members, name}\n     */\n\n  }, {\n    key: \"subscribedThreads\",\n    value: function () {\n      var _subscribedThreads = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee7() {\n        var allEntries;\n        return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this[\"public\"].all();\n\n              case 2:\n                allEntries = _context7.sent;\n                return _context7.abrupt(\"return\", Object.keys(allEntries).reduce(function (threads, key) {\n                  if (key.startsWith('thread')) {\n                    // ignores experimental threads (v1)\n                    var address = key.split('thread-')[1];\n\n                    if (OrbitDBAddress.isValid(address)) {\n                      threads.push(allEntries[key]);\n                    }\n                  }\n\n                  return threads;\n                }, []));\n\n              case 4:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function subscribedThreads() {\n        return _subscribedThreads.apply(this, arguments);\n      }\n\n      return subscribedThreads;\n    }()\n  }, {\n    key: \"DID\",\n    get: function get() {\n      return this._3id.getSubDID(this._name);\n    }\n  }]);\n  return Space;\n}();\n\nmodule.exports = Space;\n\nvar publicStoreReducer = function publicStoreReducer(store) {\n  var PREFIX = 'pub_';\n  return {\n    get: function () {\n      var _get = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee8(key) {\n        var opts,\n            _args8 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                opts = _args8.length > 1 && _args8[1] !== undefined ? _args8[1] : {};\n                return _context8.abrupt(\"return\", store.get(PREFIX + key, opts));\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function get(_x5) {\n        return _get.apply(this, arguments);\n      }\n\n      return get;\n    }(),\n    getMetadata: function () {\n      var _getMetadata = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee9(key) {\n        return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", store.getMetadata(PREFIX + key));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n\n      function getMetadata(_x6) {\n        return _getMetadata.apply(this, arguments);\n      }\n\n      return getMetadata;\n    }(),\n    set: function () {\n      var _set = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee10(key, value) {\n        return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                throwIfUndefined(key, 'key');\n                return _context10.abrupt(\"return\", store.set(PREFIX + key, value));\n\n              case 2:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10);\n      }));\n\n      function set(_x7, _x8) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }(),\n    setMultiple: function () {\n      var _setMultiple = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee11(keys, values) {\n        var prefixedKeys;\n        return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                throwIfNotEqualLenArrays(keys, values);\n                prefixedKeys = keys.map(function (key) {\n                  return PREFIX + key;\n                });\n                return _context11.abrupt(\"return\", store.setMultiple(prefixedKeys, values));\n\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11);\n      }));\n\n      function setMultiple(_x9, _x10) {\n        return _setMultiple.apply(this, arguments);\n      }\n\n      return setMultiple;\n    }(),\n    remove: function () {\n      var _remove = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee12(key) {\n        return _regenerator[\"default\"].wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                throwIfUndefined(key, 'key');\n                return _context12.abrupt(\"return\", store.remove(PREFIX + key));\n\n              case 2:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12);\n      }));\n\n      function remove(_x11) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }(),\n\n    get log() {\n      return store.log.reduce(function (newLog, entry) {\n        if (entry.key.startsWith(PREFIX)) {\n          entry.key = entry.key.slice(4);\n          newLog.push(entry);\n        }\n\n        return newLog;\n      }, []);\n    },\n\n    all: function () {\n      var _all = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee13(opts) {\n        var entries;\n        return _regenerator[\"default\"].wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return store.all(opts);\n\n              case 2:\n                entries = _context13.sent;\n                return _context13.abrupt(\"return\", Object.keys(entries).reduce(function (newAll, key) {\n                  if (key.startsWith(PREFIX)) {\n                    newAll[key.slice(4)] = entries[key];\n                  }\n\n                  return newAll;\n                }, {}));\n\n              case 4:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13);\n      }));\n\n      function all(_x12) {\n        return _all.apply(this, arguments);\n      }\n\n      return all;\n    }()\n  };\n};\n\nvar privateStoreReducer = function privateStoreReducer(store, keyring) {\n  var PREFIX = 'priv_';\n  var SALT = keyring.getDBSalt();\n\n  var dbKey = function dbKey(key) {\n    throwIfUndefined(key, 'key');\n    return PREFIX + sha256Multihash(SALT + key);\n  };\n\n  var pad = function pad(val) {\n    var blockSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ENC_BLOCK_SIZE;\n    var blockDiff = (blockSize - val.length % blockSize) % blockSize;\n    return \"\".concat(val).concat('\\0'.repeat(blockDiff));\n  };\n\n  var unpad = function unpad(padded) {\n    return padded.replace(/\\0+$/, '');\n  };\n\n  var encryptEntry = function encryptEntry(entry) {\n    return keyring.symEncrypt(pad(JSON.stringify(entry)));\n  };\n\n  var decryptEntry = function decryptEntry(_ref2) {\n    var ciphertext = _ref2.ciphertext,\n        nonce = _ref2.nonce;\n    return JSON.parse(unpad(keyring.symDecrypt(ciphertext, nonce)));\n  };\n\n  return {\n    get: function () {\n      var _get2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee14(key) {\n        var opts,\n            entry,\n            _args14 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                opts = _args14.length > 1 && _args14[1] !== undefined ? _args14[1] : {};\n                _context14.next = 3;\n                return store.get(dbKey(key), opts);\n\n              case 3:\n                entry = _context14.sent;\n\n                if (entry) {\n                  _context14.next = 6;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", null);\n\n              case 6:\n                if (!opts.metadata) {\n                  _context14.next = 8;\n                  break;\n                }\n\n                return _context14.abrupt(\"return\", _objectSpread({}, entry, {\n                  value: decryptEntry(entry.value).value\n                }));\n\n              case 8:\n                return _context14.abrupt(\"return\", decryptEntry(entry).value);\n\n              case 9:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14);\n      }));\n\n      function get(_x13) {\n        return _get2.apply(this, arguments);\n      }\n\n      return get;\n    }(),\n    getMetadata: function () {\n      var _getMetadata2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee15(key) {\n        return _regenerator[\"default\"].wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                return _context15.abrupt(\"return\", store.getMetadata(dbKey(key)));\n\n              case 1:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15);\n      }));\n\n      function getMetadata(_x14) {\n        return _getMetadata2.apply(this, arguments);\n      }\n\n      return getMetadata;\n    }(),\n    set: function () {\n      var _set2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee16(key, value) {\n        return _regenerator[\"default\"].wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                return _context16.abrupt(\"return\", store.set(dbKey(key), encryptEntry({\n                  key: key,\n                  value: value\n                })));\n\n              case 1:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16);\n      }));\n\n      function set(_x15, _x16) {\n        return _set2.apply(this, arguments);\n      }\n\n      return set;\n    }(),\n    setMultiple: function () {\n      var _setMultiple2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee17(keys, values) {\n        var dbKeys, encryptedEntries;\n        return _regenerator[\"default\"].wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                throwIfNotEqualLenArrays(keys, values);\n                dbKeys = keys.map(dbKey);\n                encryptedEntries = values.map(function (value, index) {\n                  return encryptEntry({\n                    key: keys[index],\n                    value: value\n                  });\n                });\n                return _context17.abrupt(\"return\", store.setMultiple(dbKeys, encryptedEntries));\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17);\n      }));\n\n      function setMultiple(_x17, _x18) {\n        return _setMultiple2.apply(this, arguments);\n      }\n\n      return setMultiple;\n    }(),\n    remove: function () {\n      var _remove2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee18(key) {\n        return _regenerator[\"default\"].wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                return _context18.abrupt(\"return\", store.remove(dbKey(key)));\n\n              case 1:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18);\n      }));\n\n      function remove(_x19) {\n        return _remove2.apply(this, arguments);\n      }\n\n      return remove;\n    }(),\n\n    get log() {\n      return store.log.reduce(function (newLog, entry) {\n        if (entry.key.startsWith(PREFIX)) {\n          var decEntry = decryptEntry(entry.value);\n          entry.key = decEntry.key;\n          entry.value = decEntry.value;\n          newLog.push(entry);\n        }\n\n        return newLog;\n      }, []);\n    },\n\n    all: function () {\n      var _all2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee19() {\n        var opts,\n            entries,\n            _args19 = arguments;\n        return _regenerator[\"default\"].wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                opts = _args19.length > 0 && _args19[0] !== undefined ? _args19[0] : {};\n                _context19.next = 3;\n                return store.all(opts);\n\n              case 3:\n                entries = _context19.sent;\n                return _context19.abrupt(\"return\", Object.keys(entries).reduce(function (newAll, key) {\n                  if (key.startsWith(PREFIX)) {\n                    var entry = entries[key];\n\n                    if (opts.metadata) {\n                      var decEntry = decryptEntry(entry.value);\n                      newAll[decEntry.key] = _objectSpread({}, entry, {\n                        value: decEntry.value\n                      });\n                    } else {\n                      var _decEntry = decryptEntry(entry);\n\n                      newAll[_decEntry.key] = _decEntry.value;\n                    }\n                  }\n\n                  return newAll;\n                }, {}));\n\n              case 5:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19);\n      }));\n\n      function all() {\n        return _all2.apply(this, arguments);\n      }\n\n      return all;\n    }()\n  };\n};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar fetch = typeof window !== 'undefined' ? window.fetch : require('node-fetch');\n\nvar Multihash = require('multihashes');\n\nvar sha256 = require('js-sha256').sha256;\n\nvar ethers = require('ethers');\n\nvar HTTPError = function HTTPError(status, message) {\n  var e = new Error(message);\n  e.statusCode = status;\n  return e;\n};\n\nvar getMessageConsent = function getMessageConsent(did, timestamp) {\n  var msg = 'Create a new 3Box profile' + '\\n\\n' + '- \\n' + 'Your unique profile ID is ' + did;\n  if (timestamp) msg += ' \\n' + 'Timestamp: ' + timestamp;\n  return msg;\n};\n\nvar safeEthSend = function safeEthSend(ethereum, data, callback) {\n  var send = (Boolean(ethereum.sendAsync) ? ethereum.sendAsync : ethereum.send).bind(ethereum);\n  return new Promise(function (resolve, reject) {\n    send(data, function (err, result) {\n      if (err) reject(err);\n      if (result.error) reject(result.error);\n      resolve(result.result);\n    });\n  });\n};\n\nmodule.exports = {\n  getMessageConsent: getMessageConsent,\n  recoverPersonalSign: function () {\n    var _recoverPersonalSign = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee(msg, personalSig) {\n      var msgParams;\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!msg || !personalSig)) {\n                _context.next = 2;\n                break;\n              }\n\n              throw new Error('recoverPersonalSign: missing arguments, msg and/or personalSig');\n\n            case 2:\n              msgParams = {\n                data: msg,\n                sig: personalSig\n              };\n              return _context.abrupt(\"return\", ethers.utils.verifyMessage(msg, personalSig));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    function recoverPersonalSign(_x, _x2) {\n      return _recoverPersonalSign.apply(this, arguments);\n    }\n\n    return recoverPersonalSign;\n  }(),\n  openBoxConsent: function openBoxConsent(fromAddress, ethereum) {\n    var text = 'This app wants to view and update your 3Box profile.';\n    var msg = '0x' + Buffer.from(text, 'utf8').toString('hex');\n    var params = [msg, fromAddress];\n    var method = 'personal_sign';\n    return safeEthSend(ethereum, {\n      jsonrpc: '2.0',\n      id: 0,\n      method: method,\n      params: params,\n      fromAddress: fromAddress\n    });\n  },\n  openSpaceConsent: function openSpaceConsent(fromAddress, ethereum, name) {\n    var text = \"Allow this app to open your \".concat(name, \" space.\");\n    var msg = '0x' + Buffer.from(text, 'utf8').toString('hex');\n    var params = [msg, fromAddress];\n    var method = 'personal_sign';\n    return safeEthSend(ethereum, {\n      jsonrpc: '2.0',\n      id: 0,\n      method: method,\n      params: params,\n      fromAddress: fromAddress\n    });\n  },\n  getLinkConsent: function () {\n    var _getLinkConsent = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee2(fromAddress, toDID, ethereum) {\n      var timestamp, text, msg, params, method, sig;\n      return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              timestamp = Math.floor(new Date().getTime() / 1000);\n              text = getMessageConsent(toDID, timestamp);\n              msg = '0x' + Buffer.from(text, 'utf8').toString('hex');\n              params = [msg, fromAddress];\n              method = 'personal_sign';\n              _context2.next = 7;\n              return safeEthSend(ethereum, {\n                jsonrpc: '2.0',\n                id: 0,\n                method: method,\n                params: params,\n                fromAddress: fromAddress\n              });\n\n            case 7:\n              sig = _context2.sent;\n              return _context2.abrupt(\"return\", {\n                msg: text,\n                sig: sig,\n                timestamp: timestamp\n              });\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    function getLinkConsent(_x3, _x4, _x5) {\n      return _getLinkConsent.apply(this, arguments);\n    }\n\n    return getLinkConsent;\n  }(),\n  fetchJson: function () {\n    var _fetchJson = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee3(url, body) {\n      var opts, r;\n      return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (body) {\n                opts = {\n                  body: JSON.stringify(body),\n                  method: 'POST',\n                  headers: {\n                    'Content-Type': 'application/json'\n                  }\n                };\n              }\n\n              _context3.next = 3;\n              return fetch(url, opts);\n\n            case 3:\n              r = _context3.sent;\n\n              if (!r.ok) {\n                _context3.next = 8;\n                break;\n              }\n\n              return _context3.abrupt(\"return\", r.json());\n\n            case 8:\n              throw HTTPError(r.status, \"Invalid response (\".concat(r.status, \") for query at \").concat(url));\n\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    function fetchJson(_x6, _x7) {\n      return _fetchJson.apply(this, arguments);\n    }\n\n    return fetchJson;\n  }(),\n  fetchText: function () {\n    var _fetchText = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee4(url, opts) {\n      var r;\n      return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetch(url, opts);\n\n            case 2:\n              r = _context4.sent;\n\n              if (!r.ok) {\n                _context4.next = 7;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", r.text());\n\n            case 7:\n              throw HTTPError(r.status, \"Invalid response (\".concat(r.status, \") for query at \").concat(url));\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    function fetchText(_x8, _x9) {\n      return _fetchText.apply(this, arguments);\n    }\n\n    return fetchText;\n  }(),\n  throwIfUndefined: function throwIfUndefined(arg, name) {\n    if (arg === undefined || arg === null) {\n      throw new Error(\"\".concat(name, \" is a required argument\"));\n    }\n  },\n  throwIfNotEqualLenArrays: function throwIfNotEqualLenArrays(arr1, arr2) {\n    if (!Array.isArray(arr1) || !Array.isArray(arr2)) {\n      throw new Error('One or more arguments are not an array');\n    }\n\n    if (arr1.length !== arr2.length) {\n      throw new Error('Arrays must be of the same length');\n    }\n  },\n  sha256Multihash: function sha256Multihash(str) {\n    var digest = Buffer.from(sha256.digest(str));\n    return Multihash.encode(digest, 'sha2-256').toString('hex');\n  },\n  sha256: sha256\n};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar KeyValueStore = require('./keyValueStore');\n\nvar _require = require('./utils/index'),\n    throwIfUndefined = _require.throwIfUndefined,\n    throwIfNotEqualLenArrays = _require.throwIfNotEqualLenArrays;\n\nvar ProfileStore =\n/*#__PURE__*/\nfunction (_KeyValueStore) {\n  (0, _inherits2[\"default\"])(ProfileStore, _KeyValueStore);\n\n  function ProfileStore(orbitdb, name, linkProfile, ensureConnected, _3id) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, ProfileStore);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(ProfileStore).call(this, orbitdb, name, ensureConnected, _3id));\n    _this._linkProfile = linkProfile;\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(ProfileStore, [{\n    key: \"set\",\n    value: function () {\n      var _set = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee(key, value) {\n        var opts,\n            _args = arguments;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                opts = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n                throwIfUndefined(key, 'key'); // if this is the noLink call we shouldn't call _linkProfile.\n\n                if (opts.noLink) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 5;\n                return this._linkProfile();\n\n              case 5:\n                return _context.abrupt(\"return\", (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ProfileStore.prototype), \"set\", this).call(this, key, value));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function set(_x, _x2) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"setMultiple\",\n    value: function () {\n      var _setMultiple = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee2(keys, values) {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                throwIfNotEqualLenArrays(keys, values);\n                _context2.next = 3;\n                return this._linkProfile();\n\n              case 3:\n                return _context2.abrupt(\"return\", (0, _get2[\"default\"])((0, _getPrototypeOf2[\"default\"])(ProfileStore.prototype), \"setMultiple\", this).call(this, keys, values));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function setMultiple(_x3, _x4) {\n        return _setMultiple.apply(this, arguments);\n      }\n\n      return setMultiple;\n    }()\n  }]);\n  return ProfileStore;\n}(KeyValueStore);\n\nmodule.exports = ProfileStore;","module.exports = require('./src/ipfs-pubsub')\n","\"use strict\";\n\nvar Log = require('ipfs-log');\n\nvar IFRAME_STORE_VERSION = '0.0.3';\nmodule.exports = {\n  address_server_url: process.env.ADDRESS_SERVER_URL || 'https://beta.3box.io/address-server',\n  pinning_node: process.env.PINNING_NODE || '/dnsaddr/ipfs.3box.io/tcp/443/wss/ipfs/QmZvxEpiVNjmNbEKyQGvFzAY1BwmGuuvdUTmcTstQPhyVC',\n  pinning_room: process.env.PINNING_ROOM || '3box-pinning',\n  iframe_store_version: process.env.IFRAME_STORE_VERSION || IFRAME_STORE_VERSION,\n  iframe_store_url: process.env.IFRAME_STORE_URL || \"https://iframe.3box.io/\".concat(IFRAME_STORE_VERSION, \"/iframe.html\"),\n  ipfs_options: {\n    EXPERIMENTAL: {\n      pubsub: true\n    },\n    preload: {\n      enabled: false\n    },\n    config: {\n      Bootstrap: []\n    }\n  },\n  orbitdb_options: {\n    syncLocal: true,\n    sortFn: Log.Sorting.SortByEntryHash // this option is required now but will likely not be in the future.\n\n  },\n  graphql_server_url: process.env.GRAPHQL_SERVER_URL || 'https://api.3box.io/graph/',\n  profile_server_url: process.env.PROFILE_SERVER_URL || 'https://ipfs.3box.io',\n  muport_ipfs_host: process.env.MUPORT_IPFS_HOST || 'ipfs.infura.io',\n  muport_ipfs_port: process.env.MUPORT_IPFS_PORT || 5001,\n  muport_ipfs_protocol: process.env.MUPORT_IPFS_PROTOCOL || 'https'\n};","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar HDNode = require('ethers').utils.HDNode;\n\nvar didJWT = require('did-jwt');\n\nvar DidDocument = require('ipfs-did-document');\n\nvar IpfsMini = require('ipfs-mini');\n\nvar localstorage = require('store');\n\nvar Identities = require('orbit-db-identity-provider');\n\nvar _require = require('3box-orbitdb-plugins'),\n    OdbIdentityProvider = _require.OdbIdentityProvider;\n\nIdentities.addIdentityProvider(OdbIdentityProvider);\n\nvar registerResolver = require('3id-resolver');\n\nvar utils = require('../utils/index');\n\nvar Keyring = require('./keyring');\n\nvar config = require('../config.js');\n\nvar DID_METHOD_NAME = '3';\nvar STORAGE_KEY = 'serialized3id_';\nvar MUPORT_IPFS = {\n  host: config.muport_ipfs_host,\n  port: config.muport_ipfs_port,\n  protocol: config.muport_ipfs_protocol\n};\n\nvar ThreeId =\n/*#__PURE__*/\nfunction () {\n  function ThreeId(serializeState, ethereum, ipfs, opts) {\n    (0, _classCallCheck2[\"default\"])(this, ThreeId);\n    this._ethereum = ethereum;\n    this._ipfs = ipfs;\n    this._keyrings = {};\n\n    this._initKeys(serializeState, opts);\n\n    registerResolver(ipfs);\n    localstorage.set(STORAGE_KEY + this.managementAddress, this.serializeState());\n  }\n\n  (0, _createClass2[\"default\"])(ThreeId, [{\n    key: \"signJWT\",\n    value: function () {\n      var _signJWT = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee(payload) {\n        var _ref,\n            use3ID,\n            space,\n            expiresIn,\n            keyring,\n            issuer,\n            settings,\n            _args = arguments;\n\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _ref = _args.length > 1 && _args[1] !== undefined ? _args[1] : {}, use3ID = _ref.use3ID, space = _ref.space, expiresIn = _ref.expiresIn;\n                keyring = space ? this._keyrings[space] : this._mainKeyring;\n                issuer = this.muportDID;\n\n                if (use3ID) {\n                  issuer = this.DID;\n                } else if (space) {\n                  issuer = this._subDIDs[space];\n                }\n\n                settings = {\n                  signer: keyring.getJWTSigner(),\n                  issuer: issuer,\n                  expiresIn: expiresIn\n                };\n                return _context.abrupt(\"return\", didJWT.createJWT(payload, settings));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function signJWT(_x) {\n        return _signJWT.apply(this, arguments);\n      }\n\n      return signJWT;\n    }()\n  }, {\n    key: \"getSubDID\",\n    value: function getSubDID(space) {\n      return this._subDIDs[space];\n    }\n  }, {\n    key: \"getOdbId\",\n    value: function () {\n      var _getOdbId = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee2(space) {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", Identities.createIdentity({\n                  type: '3ID',\n                  threeId: this,\n                  space: space\n                }));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getOdbId(_x2) {\n        return _getOdbId.apply(this, arguments);\n      }\n\n      return getOdbId;\n    }()\n  }, {\n    key: \"serializeState\",\n    value: function serializeState() {\n      var _this = this;\n\n      var stateObj = {\n        managementAddress: this.managementAddress,\n        seed: this._mainKeyring.serialize(),\n        spaceSeeds: {}\n      };\n      Object.keys(this._keyrings).map(function (name) {\n        stateObj.spaceSeeds[name] = _this._keyrings[name].serialize();\n      });\n      return JSON.stringify(stateObj);\n    }\n  }, {\n    key: \"_initKeys\",\n    value: function _initKeys(serializeState) {\n      var _this2 = this;\n\n      var state = JSON.parse(serializeState); // TODO remove toLowerCase() in future, should be sanitized elsewhere\n      //      this forces existing state to correct state so that address <->\n      //      rootstore relation holds\n\n      this.managementAddress = state.managementAddress.toLowerCase();\n      this._mainKeyring = new Keyring(state.seed);\n      Object.keys(state.spaceSeeds).map(function (name) {\n        _this2._keyrings[name] = new Keyring(state.spaceSeeds[name]);\n      });\n    }\n  }, {\n    key: \"_initDID\",\n    value: function () {\n      var _initDID2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee3(muportIpfs) {\n        var _this3 = this;\n\n        var muportPromise, spaces, subDIDs;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                muportPromise = this._initMuport(muportIpfs);\n                _context3.next = 3;\n                return this._init3ID();\n\n              case 3:\n                this._rootDID = _context3.sent;\n                spaces = Object.keys(this._keyrings);\n                _context3.next = 7;\n                return Promise.all(spaces.map(function (space) {\n                  return _this3._init3ID(space);\n                }));\n\n              case 7:\n                subDIDs = _context3.sent;\n                this._subDIDs = {};\n                spaces.map(function (space, i) {\n                  _this3._subDIDs[space] = subDIDs[i];\n                });\n                _context3.next = 12;\n                return muportPromise;\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _initDID(_x3) {\n        return _initDID2.apply(this, arguments);\n      }\n\n      return _initDID;\n    }()\n  }, {\n    key: \"_init3ID\",\n    value: function () {\n      var _init3ID2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee4(spaceName) {\n        var doc, pubkeys, _pubkeys, payload, signature;\n\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                doc = new DidDocument(this._ipfs, DID_METHOD_NAME);\n\n                if (spaceName) {\n                  _context4.next = 9;\n                  break;\n                }\n\n                pubkeys = this._mainKeyring.getPublicKeys(true);\n                doc.addPublicKey('signingKey', 'Secp256k1VerificationKey2018', 'publicKeyHex', pubkeys.signingKey);\n                doc.addPublicKey('encryptionKey', 'Curve25519EncryptionPublicKey', 'publicKeyBase64', pubkeys.asymEncryptionKey);\n                doc.addPublicKey('managementKey', 'Secp256k1VerificationKey2018', 'ethereumAddress', this.managementAddress);\n                doc.addAuthentication('Secp256k1SignatureAuthentication2018', 'signingKey');\n                _context4.next = 20;\n                break;\n\n              case 9:\n                _pubkeys = this._keyrings[spaceName].getPublicKeys(true);\n                doc.addPublicKey('subSigningKey', 'Secp256k1VerificationKey2018', 'publicKeyHex', _pubkeys.signingKey);\n                doc.addPublicKey('subEncryptionKey', 'Curve25519EncryptionPublicKey', 'publicKeyBase64', _pubkeys.asymEncryptionKey);\n                doc.addAuthentication('Secp256k1SignatureAuthentication2018', 'subSigningKey');\n                doc.addCustomProperty('space', spaceName);\n                doc.addCustomProperty('root', this.DID);\n                payload = {\n                  subSigningKey: _pubkeys.signingKey,\n                  subEncryptionKey: _pubkeys.asymEncryptionKey,\n                  space: spaceName,\n                  iat: null\n                };\n                _context4.next = 18;\n                return this.signJWT(payload, {\n                  use3ID: true\n                });\n\n              case 18:\n                signature = _context4.sent.split('.')[2];\n                doc.addCustomProperty('proof', {\n                  alg: 'ES256K',\n                  signature: signature\n                });\n\n              case 20:\n                _context4.next = 22;\n                return doc.commit({\n                  noTimestamp: true\n                });\n\n              case 22:\n                return _context4.abrupt(\"return\", doc.DID);\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _init3ID(_x4) {\n        return _init3ID2.apply(this, arguments);\n      }\n\n      return _init3ID;\n    }()\n  }, {\n    key: \"_initMuport\",\n    value: function () {\n      var _initMuport2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee6(muportIpfs) {\n        var keys, doc, docHash, publishToInfura;\n        return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                keys = this._mainKeyring.getPublicKeys();\n                doc = createMuportDocument(keys.signingKey, this.managementAddress, keys.asymEncryptionKey);\n                _context6.next = 4;\n                return this._ipfs.add(Buffer.from(JSON.stringify(doc)));\n\n              case 4:\n                docHash = _context6.sent[0].hash;\n                this._muportDID = 'did:muport:' + docHash;\n                this.muportFingerprint = utils.sha256Multihash(this.muportDID);\n\n                publishToInfura =\n                /*#__PURE__*/\n                function () {\n                  var _ref2 = (0, _asyncToGenerator2[\"default\"])(\n                  /*#__PURE__*/\n                  _regenerator[\"default\"].mark(function _callee5() {\n                    var ipfsMini;\n                    return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n                      while (1) {\n                        switch (_context5.prev = _context5.next) {\n                          case 0:\n                            ipfsMini = new IpfsMini(muportIpfs);\n                            ipfsMini.addJSON(doc, function (err, res) {\n                              if (err) console.error(err);\n                            });\n\n                          case 2:\n                          case \"end\":\n                            return _context5.stop();\n                        }\n                      }\n                    }, _callee5);\n                  }));\n\n                  return function publishToInfura() {\n                    return _ref2.apply(this, arguments);\n                  };\n                }();\n\n                publishToInfura();\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _initMuport(_x5) {\n        return _initMuport2.apply(this, arguments);\n      }\n\n      return _initMuport;\n    }()\n  }, {\n    key: \"getKeyringBySpaceName\",\n    value: function getKeyringBySpaceName(name) {\n      var split = name.split('.');\n\n      if (split[0] === this.muportFingerprint) {\n        return this._mainKeyring;\n      } else {\n        return this._keyrings[split[2]];\n      }\n    }\n  }, {\n    key: \"initKeyringByName\",\n    value: function () {\n      var _initKeyringByName = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee7(name) {\n        var sig, entropy, seed;\n        return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (this._keyrings[name]) {\n                  _context7.next = 14;\n                  break;\n                }\n\n                _context7.next = 3;\n                return utils.openSpaceConsent(this.managementAddress, this._ethereum, name);\n\n              case 3:\n                sig = _context7.sent;\n                entropy = '0x' + utils.sha256(sig.slice(2));\n                seed = HDNode.mnemonicToSeed(HDNode.entropyToMnemonic(entropy));\n                this._keyrings[name] = new Keyring(seed);\n                _context7.next = 9;\n                return this._init3ID(name);\n\n              case 9:\n                this._subDIDs[name] = _context7.sent;\n                localstorage.set(STORAGE_KEY + this.managementAddress, this.serializeState());\n                return _context7.abrupt(\"return\", true);\n\n              case 14:\n                return _context7.abrupt(\"return\", false);\n\n              case 15:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function initKeyringByName(_x6) {\n        return _initKeyringByName.apply(this, arguments);\n      }\n\n      return initKeyringByName;\n    }()\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      localstorage.remove(STORAGE_KEY + this.managementAddress);\n    }\n  }, {\n    key: \"DID\",\n    get: function get() {\n      return this._rootDID;\n    }\n  }, {\n    key: \"muportDID\",\n    get: function get() {\n      return this._muportDID;\n    }\n  }], [{\n    key: \"isLoggedIn\",\n    value: function isLoggedIn(address) {\n      return Boolean(localstorage.get(STORAGE_KEY + address.toLowerCase()));\n    }\n  }, {\n    key: \"getIdFromEthAddress\",\n    value: function () {\n      var _getIdFromEthAddress = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee8(address, ethereum, ipfs) {\n        var opts,\n            normalizedAddress,\n            serialized3id,\n            sig,\n            entropy,\n            mnemonic,\n            seed,\n            _3id,\n            _args8 = arguments;\n\n        return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                opts = _args8.length > 3 && _args8[3] !== undefined ? _args8[3] : {};\n                normalizedAddress = address.toLowerCase();\n                serialized3id = localstorage.get(STORAGE_KEY + normalizedAddress);\n\n                if (!serialized3id) {\n                  _context8.next = 7;\n                  break;\n                }\n\n                if (opts.consentCallback) opts.consentCallback(false);\n                _context8.next = 19;\n                break;\n\n              case 7:\n                if (!opts.contentSignature) {\n                  _context8.next = 11;\n                  break;\n                }\n\n                sig = opts.contentSignature;\n                _context8.next = 14;\n                break;\n\n              case 11:\n                _context8.next = 13;\n                return utils.openBoxConsent(normalizedAddress, ethereum);\n\n              case 13:\n                sig = _context8.sent;\n\n              case 14:\n                if (opts.consentCallback) opts.consentCallback(true);\n                entropy = '0x' + utils.sha256(sig.slice(2));\n                mnemonic = HDNode.entropyToMnemonic(entropy);\n                seed = HDNode.mnemonicToSeed(mnemonic);\n                serialized3id = JSON.stringify({\n                  managementAddress: normalizedAddress,\n                  seed: seed,\n                  spaceSeeds: {}\n                });\n\n              case 19:\n                _3id = new ThreeId(serialized3id, ethereum, ipfs, opts);\n                _context8.next = 22;\n                return _3id._initDID(opts.muportIpfs || MUPORT_IPFS);\n\n              case 22:\n                return _context8.abrupt(\"return\", _3id);\n\n              case 23:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n\n      function getIdFromEthAddress(_x7, _x8, _x9) {\n        return _getIdFromEthAddress.apply(this, arguments);\n      }\n\n      return getIdFromEthAddress;\n    }()\n  }]);\n  return ThreeId;\n}();\n\nvar createMuportDocument = function createMuportDocument(signingKey, managementKey, asymEncryptionKey) {\n  return {\n    version: 1,\n    signingKey: signingKey,\n    managementKey: managementKey,\n    asymEncryptionKey: asymEncryptionKey\n  };\n};\n\nmodule.exports = ThreeId;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar verifier = require('./utils/verifier');\n\nvar Verified =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Please use **box.verified** to get the instance of this class\n   */\n  function Verified(box) {\n    (0, _classCallCheck2[\"default\"])(this, Verified);\n    this._box = box;\n    this._did = box._3id.muportDID;\n  }\n\n  (0, _createClass2[\"default\"])(Verified, [{\n    key: \"_addVerifiedPublicAccount\",\n    value: function () {\n      var _addVerifiedPublicAccount2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee(key, proof, verificationFunction) {\n        var account;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return verificationFunction(this._did, proof);\n\n              case 2:\n                account = _context.sent;\n                _context.next = 5;\n                return this._box[\"public\"].set('proof_' + key, proof);\n\n              case 5:\n                return _context.abrupt(\"return\", account);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _addVerifiedPublicAccount(_x, _x2, _x3) {\n        return _addVerifiedPublicAccount2.apply(this, arguments);\n      }\n\n      return _addVerifiedPublicAccount;\n    }()\n  }, {\n    key: \"_getVerifiedPublicAccount\",\n    value: function () {\n      var _getVerifiedPublicAccount2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee2(key, verificationFunction) {\n        var proof;\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._box[\"public\"].get('proof_' + key);\n\n              case 2:\n                proof = _context2.sent;\n                return _context2.abrupt(\"return\", verificationFunction(this._did, proof));\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _getVerifiedPublicAccount(_x4, _x5) {\n        return _getVerifiedPublicAccount2.apply(this, arguments);\n      }\n\n      return _getVerifiedPublicAccount;\n    }()\n  }, {\n    key: \"_addVerifiedPrivateAccount\",\n    value: function () {\n      var _addVerifiedPrivateAccount2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee3(key, proof, verificationFunction) {\n        var account;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return verificationFunction(this._did, proof);\n\n              case 2:\n                account = _context3.sent;\n                _context3.next = 5;\n                return this._box[\"private\"].set('proof_' + key, proof);\n\n              case 5:\n                return _context3.abrupt(\"return\", account);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _addVerifiedPrivateAccount(_x6, _x7, _x8) {\n        return _addVerifiedPrivateAccount2.apply(this, arguments);\n      }\n\n      return _addVerifiedPrivateAccount;\n    }()\n  }, {\n    key: \"_getVerifiedPrivateAccount\",\n    value: function () {\n      var _getVerifiedPrivateAccount2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee4(key, verificationFunction) {\n        var proof;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this._box[\"private\"].get('proof_' + key);\n\n              case 2:\n                proof = _context4.sent;\n                return _context4.abrupt(\"return\", verificationFunction(this._did, proof));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _getVerifiedPrivateAccount(_x9, _x10) {\n        return _getVerifiedPrivateAccount2.apply(this, arguments);\n      }\n\n      return _getVerifiedPrivateAccount;\n    }()\n    /**\n     * Returns the verified DID of the user\n     *\n     * @return    {String}                            The DID of the user\n     */\n\n  }, {\n    key: \"DID\",\n    value: function () {\n      var _DID = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee5() {\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this._did);\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function DID() {\n        return _DID.apply(this, arguments);\n      }\n\n      return DID;\n    }()\n    /**\n     * Verifies that the user has a valid github account\n     * Throws an error otherwise.\n     *\n     * @return    {Object}                            Object containing username, and proof\n     */\n\n  }, {\n    key: \"github\",\n    value: function () {\n      var _github = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee6() {\n        return _regenerator[\"default\"].wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this._getVerifiedPublicAccount('github', verifier.verifyGithub));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function github() {\n        return _github.apply(this, arguments);\n      }\n\n      return github;\n    }()\n    /**\n     * Adds a github verification to the users profile\n     * Throws an error if the verification fails.\n     *\n     * @param     {Object}            gistUrl         URL of the proof\n     * @return    {Object}                            Object containing username, and proof\n     */\n\n  }, {\n    key: \"addGithub\",\n    value: function () {\n      var _addGithub = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee7(gistUrl) {\n        return _regenerator[\"default\"].wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this._addVerifiedPublicAccount('github', gistUrl, verifier.verifyGithub));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function addGithub(_x11) {\n        return _addGithub.apply(this, arguments);\n      }\n\n      return addGithub;\n    }()\n    /**\n     * Verifies that the user has a valid twitter account\n     * Throws an error otherwise.\n     *\n     * @return    {Object}                            Object containing username, proof, and the verifier\n     */\n\n  }, {\n    key: \"twitter\",\n    value: function () {\n      var _twitter = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee8() {\n        return _regenerator[\"default\"].wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", this._getVerifiedPublicAccount('twitter', verifier.verifyTwitter));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function twitter() {\n        return _twitter.apply(this, arguments);\n      }\n\n      return twitter;\n    }()\n    /**\n     * Adds a twitter verification to the users profile\n     * Throws an error if the verification fails.\n     *\n     * @param     {String}            claim           A did-JWT claim ownership of a twitter username\n     * @return    {Object}                            Object containing username, proof, and the verifier\n     */\n\n  }, {\n    key: \"addTwitter\",\n    value: function () {\n      var _addTwitter = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee9(claim) {\n        return _regenerator[\"default\"].wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", this._addVerifiedPublicAccount('twitter', claim, verifier.verifyTwitter));\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function addTwitter(_x12) {\n        return _addTwitter.apply(this, arguments);\n      }\n\n      return addTwitter;\n    }()\n    /**\n    * Verifies that the user has a verified email account\n    * Throws an error otherwise.\n    *\n    * @return    {Object}                            Object containing username, proof, and the verifier\n    */\n\n  }, {\n    key: \"email\",\n    value: function () {\n      var _email = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee10() {\n        return _regenerator[\"default\"].wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", this._getVerifiedPrivateAccount('email', verifier.verifyEmail));\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function email() {\n        return _email.apply(this, arguments);\n      }\n\n      return email;\n    }()\n    /**\n     * Adds an email verification to the users profile\n     * Throws an error if the verification fails.\n     *\n     * @param     {String}            claim           A did-JWT claim ownership of an email username\n     * @return    {Object}                            Object containing username, proof, and the verifier\n     */\n\n  }, {\n    key: \"addEmail\",\n    value: function () {\n      var _addEmail = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee11(claim) {\n        return _regenerator[\"default\"].wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", this._addVerifiedPrivateAccount('email', claim, verifier.verifyEmail));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function addEmail(_x13) {\n        return _addEmail.apply(this, arguments);\n      }\n\n      return addEmail;\n    }()\n  }]);\n  return Verified;\n}();\n\nmodule.exports = Verified;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\n/**\n * A module to verify & validate claims\n *\n * @name idUtils\n * @memberof Box\n */\nvar didJWT = require('did-jwt');\n\nvar DID_MUPORT_PREFIX = 'did:muport:';\nmodule.exports = {\n  /**\n   * Check whether a string is a muport did or not\n   *\n   * @memberOf Box.idUtils\n   * @param   {String}     address  A string containing a user profile address\n   * @return  {*|boolean}           Whether the address is a muport did or not\n   */\n  isMuportDID: function isMuportDID(address) {\n    return address.startsWith(DID_MUPORT_PREFIX);\n  },\n\n  /**\n   * Check whether a string is a valid claim or not\n   *\n   * @memberOf Box.idUtils\n   * @param  {String}             claim\n   * @param  {Object}             opts            Optional parameters\n   * @param  {string}             opts.audience   The DID of the audience of the JWT\n   * @return {Promise<boolean>}                   whether the parameter is an actual claim\n   */\n  isClaim: function () {\n    var _isClaim = (0, _asyncToGenerator2[\"default\"])(\n    /*#__PURE__*/\n    _regenerator[\"default\"].mark(function _callee(claim) {\n      var opts,\n          _args = arguments;\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              _context.prev = 1;\n              _context.next = 4;\n              return didJWT.decodeJWT(claim, opts);\n\n            case 4:\n              return _context.abrupt(\"return\", true);\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](1);\n              return _context.abrupt(\"return\", false);\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 7]]);\n    }));\n\n    function isClaim(_x) {\n      return _isClaim.apply(this, arguments);\n    }\n\n    return isClaim;\n  }(),\n\n  /**\n   * Verify a claim and return its content.\n   * See https://github.com/uport-project/did-jwt/ for more details.\n   *\n   * @memberOf Box.idUtils\n   * @param  {String}             claim\n   * @param  {Object}             opts            Optional parameters\n   * @param  {string}             opts.audience   The DID of the JWT's audience\n   * @return {Object}                             The validated claim\n   */\n  verifyClaim: didJWT.verifyJWT\n};","const AccessControllers = require('./src/access-controllers')\nmodule.exports = AccessControllers\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _get3 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar KeyValueStore = require('./keyValueStore');\n\nvar utils = require('./utils/index');\n\nvar ENC_BLOCK_SIZE = 24;\n\nvar PrivateStore =\n/*#__PURE__*/\nfunction (_KeyValueStore) {\n  (0, _inherits2[\"default\"])(PrivateStore, _KeyValueStore);\n\n  function PrivateStore(orbitdb, name, ensureConnected, _3id) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, PrivateStore);\n    _this = (0, _possibleConstructorReturn2[\"default\"])(this, (0, _getPrototypeOf2[\"default\"])(PrivateStore).call(this, orbitdb, name, ensureConnected, _3id));\n    _this.keyring = _3id.getKeyringBySpaceName(name);\n    _this._salt = _this.keyring.getDBSalt();\n    return _this;\n  }\n\n  (0, _createClass2[\"default\"])(PrivateStore, [{\n    key: \"get\",\n    value: function () {\n      var _get2 = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee(key) {\n        var opts,\n            entry,\n            _args = arguments;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                _context.next = 3;\n                return (0, _get3[\"default\"])((0, _getPrototypeOf2[\"default\"])(PrivateStore.prototype), \"get\", this).call(this, this._genDbKey(key), opts);\n\n              case 3:\n                entry = _context.sent;\n\n                if (entry) {\n                  _context.next = 6;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", null);\n\n              case 6:\n                if (!opts.metadata) {\n                  _context.next = 8;\n                  break;\n                }\n\n                return _context.abrupt(\"return\", _objectSpread({}, entry, {\n                  value: this._decryptEntry(entry.value)\n                }));\n\n              case 8:\n                return _context.abrupt(\"return\", this._decryptEntry(entry));\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function get(_x) {\n        return _get2.apply(this, arguments);\n      }\n\n      return get;\n    }()\n  }, {\n    key: \"getMetadata\",\n    value: function () {\n      var _getMetadata = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee2(key) {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", (0, _get3[\"default\"])((0, _getPrototypeOf2[\"default\"])(PrivateStore.prototype), \"getMetadata\", this).call(this, this._genDbKey(key)));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getMetadata(_x2) {\n        return _getMetadata.apply(this, arguments);\n      }\n\n      return getMetadata;\n    }()\n  }, {\n    key: \"set\",\n    value: function () {\n      var _set = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee3(key, value) {\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                value = this._encryptEntry(value);\n                key = this._genDbKey(key);\n                return _context3.abrupt(\"return\", (0, _get3[\"default\"])((0, _getPrototypeOf2[\"default\"])(PrivateStore.prototype), \"set\", this).call(this, key, value));\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function set(_x3, _x4) {\n        return _set.apply(this, arguments);\n      }\n\n      return set;\n    }()\n  }, {\n    key: \"setMultiple\",\n    value: function () {\n      var _setMultiple = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee4(keys, values) {\n        var dbKeys, encryptedValues;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                utils.throwIfNotEqualLenArrays(keys, values);\n                dbKeys = keys.map(this._genDbKey, this);\n                encryptedValues = values.map(this._encryptEntry, this);\n                return _context4.abrupt(\"return\", (0, _get3[\"default\"])((0, _getPrototypeOf2[\"default\"])(PrivateStore.prototype), \"setMultiple\", this).call(this, dbKeys, encryptedValues));\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function setMultiple(_x5, _x6) {\n        return _setMultiple.apply(this, arguments);\n      }\n\n      return setMultiple;\n    }()\n  }, {\n    key: \"remove\",\n    value: function () {\n      var _remove = (0, _asyncToGenerator2[\"default\"])(\n      /*#__PURE__*/\n      _regenerator[\"default\"].mark(function _callee5(key) {\n        return _regenerator[\"default\"].wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                key = this._genDbKey(key);\n                return _context5.abrupt(\"return\", (0, _get3[\"default\"])((0, _getPrototypeOf2[\"default\"])(PrivateStore.prototype), \"remove\", this).call(this, key));\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function remove(_x7) {\n        return _remove.apply(this, arguments);\n      }\n\n      return remove;\n    }()\n    /**\n     * Returns array of underlying log entries. In linearized order according to their Lamport clocks.\n     * Useful for generating a complete history of all operations on store. Key is hashed, so key is\n     * not available from the private store.\n     *\n     *  @example\n     *  const log = store.log\n     *  const entry = log[0]\n     *  console.log(entry)\n     *  // { op: 'PUT', key: ...., value: 'Botbot', timeStamp: '1538575416068' }\n     *\n     * @return    {Array<Object>}     Array of ordered log entry objects\n     */\n\n  }, {\n    key: \"_genDbKey\",\n    value: function _genDbKey(key) {\n      utils.throwIfUndefined(key, 'key');\n      return utils.sha256Multihash(this._salt + key);\n    }\n  }, {\n    key: \"_encryptEntry\",\n    value: function _encryptEntry(entry) {\n      if (typeof entry === 'undefined') throw new Error('Entry to encrypt cannot be undefined');\n      return this.keyring.symEncrypt(this._pad(JSON.stringify(entry)));\n    }\n  }, {\n    key: \"_decryptEntry\",\n    value: function _decryptEntry(_ref) {\n      var ciphertext = _ref.ciphertext,\n          nonce = _ref.nonce;\n      return JSON.parse(this._unpad(this.keyring.symDecrypt(ciphertext, nonce)));\n    }\n  }, {\n    key: \"_pad\",\n    value: function _pad(val) {\n      var blockSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ENC_BLOCK_SIZE;\n      var blockDiff = (blockSize - val.length % blockSize) % blockSize;\n      return \"\".concat(val).concat('\\0'.repeat(blockDiff));\n    }\n  }, {\n    key: \"_unpad\",\n    value: function _unpad(padded) {\n      return padded.replace(/\\0+$/, '');\n    }\n  }, {\n    key: \"log\",\n    get: function get() {\n      var _this2 = this;\n\n      return (0, _get3[\"default\"])((0, _getPrototypeOf2[\"default\"])(PrivateStore.prototype), \"log\", this).map(function (obj) {\n        return Object.assign(obj, {\n          value: obj.value ? _this2._decryptEntry(obj.value) : null\n        });\n      });\n    }\n  }]);\n  return PrivateStore;\n}(KeyValueStore);\n\nmodule.exports = PrivateStore;","const OdbIdentityProvider = require('./odbIdentityProvider')\nconst ModeratorAccessController = require('./moderatorAccessController')\nconst ThreadAccessController = require('./threadAccessController')\nconst LegacyIPFS3BoxAccessController = require('./legacyIpfs3boxAccessController')\n\nmodule.exports = { OdbIdentityProvider, ModeratorAccessController, ThreadAccessController, LegacyIPFS3BoxAccessController  }\n","'use strict'\n\nconst path = require('path')\nconst EventStore = require('orbit-db-eventstore')\nconst FeedStore = require('orbit-db-feedstore')\nconst KeyValueStore = require('orbit-db-kvstore')\nconst CounterStore = require('orbit-db-counterstore')\nconst DocumentStore = require('orbit-db-docstore')\nconst Pubsub = require('orbit-db-pubsub')\nconst Cache = require('orbit-db-cache')\nconst Keystore = require('orbit-db-keystore')\nconst Identities = require('orbit-db-identity-provider')\nlet AccessControllers = require('orbit-db-access-controllers')\nconst OrbitDBAddress = require('./orbit-db-address')\nconst createDBManifest = require('./db-manifest')\nconst exchangeHeads = require('./exchange-heads')\nconst { isDefined, io } = require('./utils')\n\nconst Logger = require('logplease')\nconst logger = Logger.create(\"orbit-db\")\nLogger.setLogLevel('ERROR')\n\n// Mapping for 'database type' -> Class\nlet databaseTypes = {\n  'counter': CounterStore,\n  'eventlog': EventStore,\n  'feed': FeedStore,\n  'docstore': DocumentStore,\n  'keyvalue': KeyValueStore,\n}\n\n  class OrbitDB {\n  constructor(ipfs, identity, options = {}) {\n    if (!isDefined(ipfs))\n      throw new Error('IPFS is a required argument. See https://github.com/orbitdb/orbit-db/blob/master/API.md#createinstance')\n\n    if (!isDefined(identity))\n      throw new Error('identity is a required argument. See https://github.com/orbitdb/orbit-db/blob/master/API.md#createinstance')\n\n    this._ipfs = ipfs\n    this.identity = identity\n    this.id = options.peerId\n    this._pubsub = options && options.broker\n      ? new options.broker(this._ipfs)\n      : new Pubsub(this._ipfs, this.id)\n    this.directory = options.directory || './orbitdb'\n    this.keystore = options.keystore\n    this.cache = options.cache || Cache\n    this.stores = {}\n    this._directConnections = {}\n    // AccessControllers module can be passed in to enable\n    // testing with orbit-db-access-controller\n    AccessControllers = options.AccessControllers || AccessControllers\n  }\n\n  static async createInstance (ipfs, options = {}) {\n    if (!isDefined(ipfs))\n      throw new Error('IPFS is a required argument. See https://github.com/orbitdb/orbit-db/blob/master/API.md#createinstance')\n\n    const { id } = await ipfs.id()\n    const directory = options.directory || './orbitdb'\n    const keystore = options.keystore || Keystore.create(path.join(directory, id, '/keystore'))\n\n    const identity = options.identity || await Identities.createIdentity({\n      id: options.id || id,\n      keystore: keystore,\n    })\n    options = Object.assign({}, options, {\n      peerId: id ,\n      directory: directory,\n      keystore: keystore\n    })\n    const orbitdb = new OrbitDB(ipfs, identity, options)\n    return orbitdb\n  }\n\n  /* Databases */\n  async feed (address, options = {}) {\n    options = Object.assign({ create: true, type: 'feed' }, options)\n    return this.open(address, options)\n  }\n\n  async log (address, options = {}) {\n    options = Object.assign({ create: true, type: 'eventlog' }, options)\n    return this.open(address, options)\n  }\n\n  async eventlog (address, options = {}) {\n    return this.log(address, options)\n  }\n\n  async keyvalue (address, options = {}) {\n    options = Object.assign({ create: true, type: 'keyvalue' }, options)\n    return this.open(address, options)\n  }\n\n  async kvstore (address, options = {}) {\n    return this.keyvalue(address, options)\n  }\n\n  async counter (address, options = {}) {\n    options = Object.assign({ create: true, type: 'counter' }, options)\n    return this.open(address, options)\n  }\n\n  async docs (address, options = {}) {\n    options = Object.assign({ create: true, type: 'docstore' }, options)\n    return this.open(address, options)\n  }\n\n  async docstore (address, options = {}) {\n    return this.docs(address, options)\n  }\n\n  async disconnect () {\n    //close Keystore\n    if (this.keystore.close)\n      await this.keystore.close()\n\n    // Close all open databases\n    const databases = Object.values(this.stores)\n    for (let db of databases) {\n      await db.close()\n      delete this.stores[db.address.toString()]\n    }\n\n    // Close a direct connection and remove it from internal state\n    const removeDirectConnect = e => {\n      this._directConnections[e].close()\n      delete this._directConnections[e]\n    }\n\n    // Close all direct connections to peers\n    Object.keys(this._directConnections).forEach(removeDirectConnect)\n\n    // Disconnect from pubsub\n    if (this._pubsub) {\n      await this._pubsub.disconnect()\n    }\n\n    // Remove all databases from the state\n    this.stores = {}\n  }\n\n  // Alias for disconnect()\n  async stop () {\n    await this.disconnect()\n  }\n\n  /* Private methods */\n  async _createStore (type, address, options) {\n    // Get the type -> class mapping\n    const Store = databaseTypes[type]\n\n    if (!Store)\n      throw new Error(`Invalid database type '${type}'`)\n\n    let accessController\n    if (options.accessControllerAddress) {\n      accessController = await AccessControllers.resolve(this, options.accessControllerAddress, options.accessController)\n    }\n\n    const cache = await this._loadCache(this.directory, address)\n\n    const opts = Object.assign({ replicate: true }, options, {\n      accessController: accessController,\n      keystore: this.keystore,\n      cache: cache,\n      onClose: this._onClose.bind(this),\n    })\n    const identity = options.identity || this.identity\n\n    const store = new Store(this._ipfs, identity, address, opts)\n    store.events.on('write', this._onWrite.bind(this))\n    // ID of the store is the address as a string\n    const addr = address.toString()\n    this.stores[addr] = store\n\n    // Subscribe to pubsub to get updates from peers,\n    // this is what hooks us into the message propagation layer\n    // and the p2p network\n    if(opts.replicate && this._pubsub)\n      this._pubsub.subscribe(addr, this._onMessage.bind(this), this._onPeerConnected.bind(this))\n\n    return store\n  }\n\n  // Callback for local writes to the database. We the update to pubsub.\n  _onWrite (address, entry, heads) {\n    if(!heads) throw new Error(\"'heads' not defined\")\n    if(this._pubsub) this._pubsub.publish(address, heads)\n  }\n\n  // Callback for receiving a message from the network\n  async _onMessage (address, heads) {\n    const store = this.stores[address]\n    try {\n      logger.debug(`Received ${heads.length} heads for '${address}':\\n`, JSON.stringify(heads.map(e => e.hash), null, 2))\n      if (store && heads && heads.length > 0) {\n        await store.sync(heads)\n      }\n    } catch (e) {\n      logger.error(e)\n    }\n  }\n\n  // Callback for when a peer connected to a database\n  async _onPeerConnected (address, peer) {\n    logger.debug(`New peer '${peer}' connected to '${address}'`)\n\n    const getStore = address => this.stores[address]\n    const getDirectConnection = peer => this._directConnections[peer]\n    const onChannelCreated = channel => this._directConnections[channel._receiverID] = channel\n    const onMessage = (address, heads) => this._onMessage(address, heads)\n\n    const channel = await exchangeHeads(\n      this._ipfs,\n      address,\n      peer,\n      getStore,\n      getDirectConnection,\n      onMessage,\n      onChannelCreated\n    )\n\n    if (getStore(address))\n      getStore(address).events.emit('peer', peer)\n  }\n\n  // Callback when database was closed\n  async _onClose (address) {\n    logger.debug(`Close ${address}`)\n\n    // Unsubscribe from pubsub\n    if (this._pubsub) {\n      await this._pubsub.unsubscribe(address)\n    }\n\n    delete this.stores[address]\n  }\n\n  async _determineAddress(name, type, options = {}) {\n    if (!OrbitDB.isValidType(type))\n      throw new Error(`Invalid database type '${type}'`)\n\n    if (OrbitDBAddress.isValid(name))\n      throw new Error(`Given database name is an address. Please give only the name of the database!`)\n\n    // Create an AccessController, use IPFS AC as the default\n    options.accessController = Object.assign({}, { name: name , type: 'ipfs' }, options.accessController)\n    const accessControllerAddress = await AccessControllers.create(this, options.accessController.type, options.accessController  || {})\n\n    // Save the manifest to IPFS\n    const manifestHash = await createDBManifest(this._ipfs, name, type, accessControllerAddress, options)\n\n    // Create the database address\n    return OrbitDBAddress.parse(path.join('/orbitdb', manifestHash, name))\n  }\n\n  /* Create and Open databases */\n\n  /*\n    options = {\n      accessController: { write: [] } // array of keys that can write to this database\n      directory: './orbitdb', // directory in which to place the database files\n      overwrite: false, // whether we should overwrite the existing database if it exists\n    }\n  */\n  async create (name, type, options = {}) {\n    logger.debug(`create()`)\n\n    // The directory to look databases from can be passed in as an option\n    const directory = options.directory || this.directory\n    logger.debug(`Creating database '${name}' as ${type} in '${directory}'`)\n\n    // Create the database address\n    const dbAddress = await this._determineAddress(name, type, options)\n\n    // Load the locally saved database information\n    const cache = await this._loadCache(directory, dbAddress)\n\n    // Check if we have the database locally\n    const haveDB = await this._haveLocalData(cache, dbAddress)\n\n    if (haveDB && !options.overwrite)\n      throw new Error(`Database '${dbAddress}' already exists!`)\n\n    // Save the database locally\n    await this._addManifestToCache(directory, dbAddress)\n\n    logger.debug(`Created database '${dbAddress}'`)\n\n    // Open the database\n    return this.open(dbAddress, options)\n  }\n\n  async determineAddress(name, type, options = {}) {\n    const opts = Object.assign({}, { onlyHash: true }, options)\n    return this._determineAddress(name, type, opts)\n  }\n\n  /*\n      options = {\n        localOnly: false // if set to true, throws an error if database can't be found locally\n        create: false // whether to create the database\n        type: TODO\n        overwrite: TODO\n\n      }\n   */\n  async open (address, options = {}) {\n    logger.debug(`open()`)\n\n    options = Object.assign({ localOnly: false, create: false }, options)\n    logger.debug(`Open database '${address}'`)\n\n    // The directory to look databases from can be passed in as an option\n    const directory = options.directory || this.directory\n    logger.debug(`Look from '${directory}'`)\n\n    // If address is just the name of database, check the options to crate the database\n    if (!OrbitDBAddress.isValid(address)) {\n      if (!options.create) {\n        throw new Error(`'options.create' set to 'false'. If you want to create a database, set 'options.create' to 'true'.`)\n      } else if (options.create && !options.type) {\n        throw new Error(`Database type not provided! Provide a type with 'options.type' (${OrbitDB.databaseTypes.join('|')})`)\n      } else {\n        logger.warn(`Not a valid OrbitDB address '${address}', creating the database`)\n        options.overwrite = options.overwrite ? options.overwrite : true\n        return this.create(address, options.type, options)\n      }\n    }\n\n    // Parse the database address\n    const dbAddress = OrbitDBAddress.parse(address)\n\n    // Load the locally saved db information\n    const cache = await this._loadCache(directory, dbAddress)\n\n    // Check if we have the database\n    const haveDB = await this._haveLocalData(cache, dbAddress)\n\n    logger.debug((haveDB ? 'Found' : 'Didn\\'t find') + ` database '${dbAddress}'`)\n\n    // If we want to try and open the database local-only, throw an error\n    // if we don't have the database locally\n    if (options.localOnly && !haveDB) {\n      logger.warn(`Database '${dbAddress}' doesn't exist!`)\n      throw new Error(`Database '${dbAddress}' doesn't exist!`)\n    }\n\n    logger.debug(`Loading Manifest for '${dbAddress}'`)\n\n    // Get the database manifest from IPFS\n    const manifest = await io.read(this._ipfs, dbAddress.root)\n    logger.debug(`Manifest for '${dbAddress}':\\n${JSON.stringify(manifest, null, 2)}`)\n\n    // Make sure the type from the manifest matches the type that was given as an option\n    if (options.type && manifest.type !== options.type)\n      throw new Error(`Database '${dbAddress}' is type '${manifest.type}' but was opened as '${options.type}'`)\n\n    // Save the database locally\n    await this._addManifestToCache(directory, dbAddress)\n\n    // Open the the database\n    options = Object.assign({}, options, { accessControllerAddress: manifest.accessController })\n    return this._createStore(manifest.type, dbAddress, options)\n  }\n\n  // Save the database locally\n  async _addManifestToCache (directory, dbAddress) {\n    const cache = await this._loadCache(directory, dbAddress)\n    await cache.set(path.join(dbAddress.toString(), '_manifest'), dbAddress.root)\n    logger.debug(`Saved manifest to IPFS as '${dbAddress.root}'`)\n  }\n\n  async _loadCache (directory, dbAddress) {\n    let cache\n    try {\n      cache = await this.cache.load(directory, dbAddress)\n    } catch (e) {\n      console.log(e)\n      logger.error(\"Couldn't load Cache:\", e)\n    }\n\n    return cache\n  }\n\n  /**\n   * Check if we have the database, or part of it, saved locally\n   * @param  {[Cache]} cache [The OrbitDBCache instance containing the local data]\n   * @param  {[OrbitDBAddress]} dbAddress [Address of the database to check]\n   * @return {[Boolean]} [Returns true if we have cached the db locally, false if not]\n   */\n  async _haveLocalData (cache, dbAddress) {\n    if (!cache) {\n      return false\n    }\n    const data = await cache.get(path.join(dbAddress.toString(), '_manifest'))\n    return data !== undefined && data !== null\n  }\n\n  /**\n   * Returns supported database types as an Array of strings\n   * Eg. [ 'counter', 'eventlog', 'feed', 'docstore', 'keyvalue']\n   * @return {[Array]} [Supported database types]\n   */\n  static get databaseTypes () {\n    return Object.keys(databaseTypes)\n  }\n\n  static isValidType (type) {\n    return Object.keys(databaseTypes).includes(type)\n  }\n\n  static addDatabaseType (type, store) {\n    if (databaseTypes[type]) throw new Error(`Type already exists: ${type}`)\n    databaseTypes[type] = store\n  }\n\n  static getDatabaseTypes () {\n    return databaseTypes\n  }\n\n  static isValidAddress (address) {\n    return OrbitDBAddress.isValid(address)\n  }\n\n  static parseAddress (address) {\n    return OrbitDBAddress.parse(address)\n  }\n}\n\nmodule.exports = OrbitDB\n","'use strict'\n\nconst BlockService = require('ipfs-block-service')\nconst Ipld = require('ipld')\nconst PeerId = require('peer-id')\nconst PeerInfo = require('peer-info')\nconst crypto = require('libp2p-crypto')\nconst isIPFS = require('is-ipfs')\nconst multiaddr = require('multiaddr')\nconst multihash = require('multihashes')\nconst PeerBook = require('peer-book')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst multihashing = require('multihashing-async')\nconst CID = require('cids')\nconst debug = require('debug')\nconst mergeOptions = require('merge-options')\nconst EventEmitter = require('events')\n\nconst config = require('./config')\nconst boot = require('./boot')\nconst components = require('./components')\n\n// replaced by repo-browser when running in the browser\nconst defaultRepo = require('./runtime/repo-nodejs')\nconst preload = require('./preload')\nconst mfsPreload = require('./mfs-preload')\nconst ipldOptions = require('./runtime/ipld-nodejs')\n\nclass IPFS extends EventEmitter {\n  constructor (options) {\n    super()\n\n    const defaults = {\n      init: true,\n      start: true,\n      EXPERIMENTAL: {},\n      preload: {\n        enabled: true,\n        addresses: [\n          '/dnsaddr/node0.preload.ipfs.io/https',\n          '/dnsaddr/node1.preload.ipfs.io/https'\n        ]\n      }\n    }\n\n    options = config.validate(options || {})\n\n    this._options = mergeOptions(defaults, options)\n\n    if (options.init === false) {\n      this._options.init = false\n    }\n\n    if (!(options.start === false)) {\n      this._options.start = true\n    }\n\n    if (typeof options.repo === 'string' ||\n        options.repo === undefined) {\n      this._repo = defaultRepo(options.repo)\n    } else {\n      this._repo = options.repo\n    }\n\n    // IPFS utils\n    this.log = debug('ipfs')\n    this.log.err = debug('ipfs:err')\n\n    // IPFS Core Internals\n    // this._repo - assigned above\n    this._peerInfoBook = new PeerBook()\n    this._peerInfo = undefined\n    this._bitswap = undefined\n    this._blockService = new BlockService(this._repo)\n    this._ipld = new Ipld(ipldOptions(this._blockService, this._options.ipld, this.log))\n    this._preload = preload(this)\n    this._mfsPreload = mfsPreload(this)\n    this._ipns = undefined\n    // eslint-disable-next-line no-console\n    this._print = this._options.silent ? this.log : console.log\n\n    // IPFS Core exposed components\n    //   - for booting up a node\n    this.init = components.init(this)\n    this.preStart = components.preStart(this)\n    this.start = components.start(this)\n    this.stop = components.stop(this)\n    this.shutdown = this.stop\n    this.isOnline = components.isOnline(this)\n    //   - interface-ipfs-core defined API\n    Object.assign(this, components.filesRegular(this))\n    this.version = components.version(this)\n    this.id = components.id(this)\n    this.repo = components.repo(this)\n    this.bootstrap = components.bootstrap(this)\n    this.config = components.config(this)\n    this.block = components.block(this)\n    this.object = components.object(this)\n    this.dag = components.dag(this)\n    this.files = components.filesMFS(this)\n    this.libp2p = null // assigned on start\n    this.swarm = components.swarm(this)\n    this.name = components.name(this)\n    this.bitswap = components.bitswap(this)\n    this.pin = components.pin(this)\n    this.ping = components.ping(this)\n    this.pingPullStream = components.pingPullStream(this)\n    this.pingReadableStream = components.pingReadableStream(this)\n    this.pubsub = components.pubsub(this)\n    this.dht = components.dht(this)\n    this.dns = components.dns(this)\n    this.key = components.key(this)\n    this.stats = components.stats(this)\n    this.resolve = components.resolve(this)\n\n    if (this._options.EXPERIMENTAL.pubsub) {\n      this.log('EXPERIMENTAL pubsub is enabled')\n    }\n    if (this._options.EXPERIMENTAL.ipnsPubsub) {\n      if (!this._options.EXPERIMENTAL.pubsub) {\n        this.log('EXPERIMENTAL pubsub is enabled to use IPNS pubsub')\n        this._options.EXPERIMENTAL.pubsub = true\n      }\n\n      this.log('EXPERIMENTAL IPNS pubsub is enabled')\n    }\n    if (this._options.EXPERIMENTAL.sharding) {\n      this.log('EXPERIMENTAL sharding is enabled')\n    }\n\n    this.state = require('./state')(this)\n\n    boot(this)\n  }\n}\n\nmodule.exports = IPFS\n\n// Note: We need to do this to force browserify to load the Buffer module\nconst BufferImpl = Buffer\nObject.assign(module.exports, { crypto, isIPFS, Buffer: BufferImpl, CID, multiaddr, multibase, multihash, multihashing, multicodec, PeerId, PeerInfo })\n\nmodule.exports.createNode = (options) => {\n  return new IPFS(options)\n}\n","/*!\n * https://github.com/Starcounter-Jack/JSON-Patch\n * (c) 2017 Joachim Wester\n * MIT license\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction hasOwnProperty(obj, key) {\n    return _hasOwnProperty.call(obj, key);\n}\nObject.defineProperty(exports, \"hasOwnProperty\", { value: hasOwnProperty });\nfunction _objectKeys(obj) {\n    if (Array.isArray(obj)) {\n        var keys = new Array(obj.length);\n        for (var k = 0; k < keys.length; k++) {\n            keys[k] = \"\" + k;\n        }\n        return keys;\n    }\n    if (Object.keys) {\n        return Object.keys(obj);\n    }\n    var keys = [];\n    for (var i in obj) {\n        if (hasOwnProperty(obj, i)) {\n            keys.push(i);\n        }\n    }\n    return keys;\n}\nexports._objectKeys = _objectKeys;\n;\n/**\n* Deeply clone the object.\n* https://jsperf.com/deep-copy-vs-json-stringify-json-parse/25 (recursiveDeepCopy)\n* @param  {any} obj value to clone\n* @return {any} cloned obj\n*/\nfunction _deepClone(obj) {\n    switch (typeof obj) {\n        case \"object\":\n            return JSON.parse(JSON.stringify(obj)); //Faster than ES5 clone - http://jsperf.com/deep-cloning-of-objects/5\n        case \"undefined\":\n            return null; //this is how JSON.stringify behaves for array items\n        default:\n            return obj; //no need to clone primitives\n    }\n}\nexports._deepClone = _deepClone;\n//3x faster than cached /^\\d+$/.test(str)\nfunction isInteger(str) {\n    var i = 0;\n    var len = str.length;\n    var charCode;\n    while (i < len) {\n        charCode = str.charCodeAt(i);\n        if (charCode >= 48 && charCode <= 57) {\n            i++;\n            continue;\n        }\n        return false;\n    }\n    return true;\n}\nexports.isInteger = isInteger;\n/**\n* Escapes a json pointer path\n* @param path The raw pointer\n* @return the Escaped path\n*/\nfunction escapePathComponent(path) {\n    if (path.indexOf('/') === -1 && path.indexOf('~') === -1)\n        return path;\n    return path.replace(/~/g, '~0').replace(/\\//g, '~1');\n}\nexports.escapePathComponent = escapePathComponent;\n/**\n * Unescapes a json pointer path\n * @param path The escaped pointer\n * @return The unescaped path\n */\nfunction unescapePathComponent(path) {\n    return path.replace(/~1/g, '/').replace(/~0/g, '~');\n}\nexports.unescapePathComponent = unescapePathComponent;\nfunction _getPathRecursive(root, obj) {\n    var found;\n    for (var key in root) {\n        if (hasOwnProperty(root, key)) {\n            if (root[key] === obj) {\n                return escapePathComponent(key) + '/';\n            }\n            else if (typeof root[key] === 'object') {\n                found = _getPathRecursive(root[key], obj);\n                if (found != '') {\n                    return escapePathComponent(key) + '/' + found;\n                }\n            }\n        }\n    }\n    return '';\n}\nexports._getPathRecursive = _getPathRecursive;\nfunction getPath(root, obj) {\n    if (root === obj) {\n        return '/';\n    }\n    var path = _getPathRecursive(root, obj);\n    if (path === '') {\n        throw new Error(\"Object not found in root\");\n    }\n    return '/' + path;\n}\nexports.getPath = getPath;\n/**\n* Recursively checks whether an object has any undefined values inside.\n*/\nfunction hasUndefined(obj) {\n    if (obj === undefined) {\n        return true;\n    }\n    if (obj) {\n        if (Array.isArray(obj)) {\n            for (var i = 0, len = obj.length; i < len; i++) {\n                if (hasUndefined(obj[i])) {\n                    return true;\n                }\n            }\n        }\n        else if (typeof obj === \"object\") {\n            var objKeys = _objectKeys(obj);\n            var objKeysLength = objKeys.length;\n            for (var i = 0; i < objKeysLength; i++) {\n                if (hasUndefined(obj[objKeys[i]])) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\nexports.hasUndefined = hasUndefined;\nfunction patchErrorMessageFormatter(message, args) {\n    var messageParts = [message];\n    for (var key in args) {\n        var value = typeof args[key] === 'object' ? JSON.stringify(args[key], null, 2) : args[key]; // pretty print\n        if (typeof value !== 'undefined') {\n            messageParts.push(key + \": \" + value);\n        }\n    }\n    return messageParts.join('\\n');\n}\nvar PatchError = /** @class */ (function (_super) {\n    __extends(PatchError, _super);\n    function PatchError(message, name, index, operation, tree) {\n        var _newTarget = this.constructor;\n        var _this = _super.call(this, patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree })) || this;\n        _this.name = name;\n        _this.index = index;\n        _this.operation = operation;\n        _this.tree = tree;\n        Object.setPrototypeOf(_this, _newTarget.prototype); // restore prototype chain, see https://stackoverflow.com/a/48342359\n        _this.message = patchErrorMessageFormatter(message, { name: name, index: index, operation: operation, tree: tree });\n        return _this;\n    }\n    return PatchError;\n}(Error));\nexports.PatchError = PatchError;\n","Object.defineProperty(exports, \"__esModule\", { value: true });\nvar areEquals = require('fast-deep-equal');\nvar helpers_1 = require(\"./helpers\");\nexports.JsonPatchError = helpers_1.PatchError;\nexports.deepClone = helpers_1._deepClone;\n/* We use a Javascript hash to store each\n function. Each hash entry (property) uses\n the operation identifiers specified in rfc6902.\n In this way, we can map each patch operation\n to its dedicated function in efficient way.\n */\n/* The operations applicable to an object */\nvar objOps = {\n    add: function (obj, key, document) {\n        obj[key] = this.value;\n        return { newDocument: document };\n    },\n    remove: function (obj, key, document) {\n        var removed = obj[key];\n        delete obj[key];\n        return { newDocument: document, removed: removed };\n    },\n    replace: function (obj, key, document) {\n        var removed = obj[key];\n        obj[key] = this.value;\n        return { newDocument: document, removed: removed };\n    },\n    move: function (obj, key, document) {\n        /* in case move target overwrites an existing value,\n        return the removed value, this can be taxing performance-wise,\n        and is potentially unneeded */\n        var removed = getValueByPointer(document, this.path);\n        if (removed) {\n            removed = helpers_1._deepClone(removed);\n        }\n        var originalValue = applyOperation(document, { op: \"remove\", path: this.from }).removed;\n        applyOperation(document, { op: \"add\", path: this.path, value: originalValue });\n        return { newDocument: document, removed: removed };\n    },\n    copy: function (obj, key, document) {\n        var valueToCopy = getValueByPointer(document, this.from);\n        // enforce copy by value so further operations don't affect source (see issue #177)\n        applyOperation(document, { op: \"add\", path: this.path, value: helpers_1._deepClone(valueToCopy) });\n        return { newDocument: document };\n    },\n    test: function (obj, key, document) {\n        return { newDocument: document, test: areEquals(obj[key], this.value) };\n    },\n    _get: function (obj, key, document) {\n        this.value = obj[key];\n        return { newDocument: document };\n    }\n};\n/* The operations applicable to an array. Many are the same as for the object */\nvar arrOps = {\n    add: function (arr, i, document) {\n        if (helpers_1.isInteger(i)) {\n            arr.splice(i, 0, this.value);\n        }\n        else { // array props\n            arr[i] = this.value;\n        }\n        // this may be needed when using '-' in an array\n        return { newDocument: document, index: i };\n    },\n    remove: function (arr, i, document) {\n        var removedList = arr.splice(i, 1);\n        return { newDocument: document, removed: removedList[0] };\n    },\n    replace: function (arr, i, document) {\n        var removed = arr[i];\n        arr[i] = this.value;\n        return { newDocument: document, removed: removed };\n    },\n    move: objOps.move,\n    copy: objOps.copy,\n    test: objOps.test,\n    _get: objOps._get\n};\n/**\n * Retrieves a value from a JSON document by a JSON pointer.\n * Returns the value.\n *\n * @param document The document to get the value from\n * @param pointer an escaped JSON pointer\n * @return The retrieved value\n */\nfunction getValueByPointer(document, pointer) {\n    if (pointer == '') {\n        return document;\n    }\n    var getOriginalDestination = { op: \"_get\", path: pointer };\n    applyOperation(document, getOriginalDestination);\n    return getOriginalDestination.value;\n}\nexports.getValueByPointer = getValueByPointer;\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the {newDocument, result} of the operation.\n * It modifies the `document` and `operation` objects - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyOperation(document, jsonpatch._deepClone(operation))`.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return `{newDocument, result}` after the operation\n */\nfunction applyOperation(document, operation, validateOperation, mutateDocument, banPrototypeModifications, index) {\n    if (validateOperation === void 0) { validateOperation = false; }\n    if (mutateDocument === void 0) { mutateDocument = true; }\n    if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }\n    if (index === void 0) { index = 0; }\n    if (validateOperation) {\n        if (typeof validateOperation == 'function') {\n            validateOperation(operation, 0, document, operation.path);\n        }\n        else {\n            validator(operation, 0);\n        }\n    }\n    /* ROOT OPERATIONS */\n    if (operation.path === \"\") {\n        var returnValue = { newDocument: document };\n        if (operation.op === 'add') {\n            returnValue.newDocument = operation.value;\n            return returnValue;\n        }\n        else if (operation.op === 'replace') {\n            returnValue.newDocument = operation.value;\n            returnValue.removed = document; //document we removed\n            return returnValue;\n        }\n        else if (operation.op === 'move' || operation.op === 'copy') { // it's a move or copy to root\n            returnValue.newDocument = getValueByPointer(document, operation.from); // get the value by json-pointer in `from` field\n            if (operation.op === 'move') { // report removed item\n                returnValue.removed = document;\n            }\n            return returnValue;\n        }\n        else if (operation.op === 'test') {\n            returnValue.test = areEquals(document, operation.value);\n            if (returnValue.test === false) {\n                throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n            }\n            returnValue.newDocument = document;\n            return returnValue;\n        }\n        else if (operation.op === 'remove') { // a remove on root\n            returnValue.removed = document;\n            returnValue.newDocument = null;\n            return returnValue;\n        }\n        else if (operation.op === '_get') {\n            operation.value = document;\n            return returnValue;\n        }\n        else { /* bad operation */\n            if (validateOperation) {\n                throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);\n            }\n            else {\n                return returnValue;\n            }\n        }\n    } /* END ROOT OPERATIONS */\n    else {\n        if (!mutateDocument) {\n            document = helpers_1._deepClone(document);\n        }\n        var path = operation.path || \"\";\n        var keys = path.split('/');\n        var obj = document;\n        var t = 1; //skip empty element - http://jsperf.com/to-shift-or-not-to-shift\n        var len = keys.length;\n        var existingPathFragment = undefined;\n        var key = void 0;\n        var validateFunction = void 0;\n        if (typeof validateOperation == 'function') {\n            validateFunction = validateOperation;\n        }\n        else {\n            validateFunction = validator;\n        }\n        while (true) {\n            key = keys[t];\n            if (banPrototypeModifications && key == '__proto__') {\n                throw new TypeError('JSON-Patch: modifying `__proto__` prop is banned for security reasons, if this was on purpose, please set `banPrototypeModifications` flag false and pass it to this function. More info in fast-json-patch README');\n            }\n            if (validateOperation) {\n                if (existingPathFragment === undefined) {\n                    if (obj[key] === undefined) {\n                        existingPathFragment = keys.slice(0, t).join('/');\n                    }\n                    else if (t == len - 1) {\n                        existingPathFragment = operation.path;\n                    }\n                    if (existingPathFragment !== undefined) {\n                        validateFunction(operation, 0, document, existingPathFragment);\n                    }\n                }\n            }\n            t++;\n            if (Array.isArray(obj)) {\n                if (key === '-') {\n                    key = obj.length;\n                }\n                else {\n                    if (validateOperation && !helpers_1.isInteger(key)) {\n                        throw new exports.JsonPatchError(\"Expected an unsigned base-10 integer value, making the new referenced value the array element with the zero-based index\", \"OPERATION_PATH_ILLEGAL_ARRAY_INDEX\", index, operation, document);\n                    } // only parse key when it's an integer for `arr.prop` to work\n                    else if (helpers_1.isInteger(key)) {\n                        key = ~~key;\n                    }\n                }\n                if (t >= len) {\n                    if (validateOperation && operation.op === \"add\" && key > obj.length) {\n                        throw new exports.JsonPatchError(\"The specified index MUST NOT be greater than the number of elements in the array\", \"OPERATION_VALUE_OUT_OF_BOUNDS\", index, operation, document);\n                    }\n                    var returnValue = arrOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            else {\n                if (key && key.indexOf('~') != -1) {\n                    key = helpers_1.unescapePathComponent(key);\n                }\n                if (t >= len) {\n                    var returnValue = objOps[operation.op].call(operation, obj, key, document); // Apply patch\n                    if (returnValue.test === false) {\n                        throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n                    }\n                    return returnValue;\n                }\n            }\n            obj = obj[key];\n        }\n    }\n}\nexports.applyOperation = applyOperation;\n/**\n * Apply a full JSON Patch array on a JSON document.\n * Returns the {newDocument, result} of the patch.\n * It modifies the `document` object and `patch` - it gets the values by reference.\n * If you would like to avoid touching your values, clone them:\n * `jsonpatch.applyPatch(document, jsonpatch._deepClone(patch))`.\n *\n * @param document The document to patch\n * @param patch The patch to apply\n * @param validateOperation `false` is without validation, `true` to use default jsonpatch's validation, or you can pass a `validateOperation` callback to be used for validation.\n * @param mutateDocument Whether to mutate the original document or clone it before applying\n * @param banPrototypeModifications Whether to ban modifications to `__proto__`, defaults to `true`.\n * @return An array of `{newDocument, result}` after the patch\n */\nfunction applyPatch(document, patch, validateOperation, mutateDocument, banPrototypeModifications) {\n    if (mutateDocument === void 0) { mutateDocument = true; }\n    if (banPrototypeModifications === void 0) { banPrototypeModifications = true; }\n    if (validateOperation) {\n        if (!Array.isArray(patch)) {\n            throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\n        }\n    }\n    if (!mutateDocument) {\n        document = helpers_1._deepClone(document);\n    }\n    var results = new Array(patch.length);\n    for (var i = 0, length_1 = patch.length; i < length_1; i++) {\n        // we don't need to pass mutateDocument argument because if it was true, we already deep cloned the object, we'll just pass `true`\n        results[i] = applyOperation(document, patch[i], validateOperation, true, banPrototypeModifications, i);\n        document = results[i].newDocument; // in case root was replaced\n    }\n    results.newDocument = document;\n    return results;\n}\nexports.applyPatch = applyPatch;\n/**\n * Apply a single JSON Patch Operation on a JSON document.\n * Returns the updated document.\n * Suitable as a reducer.\n *\n * @param document The document to patch\n * @param operation The operation to apply\n * @return The updated document\n */\nfunction applyReducer(document, operation, index) {\n    var operationResult = applyOperation(document, operation);\n    if (operationResult.test === false) { // failed test\n        throw new exports.JsonPatchError(\"Test operation failed\", 'TEST_OPERATION_FAILED', index, operation, document);\n    }\n    return operationResult.newDocument;\n}\nexports.applyReducer = applyReducer;\n/**\n * Validates a single operation. Called from `jsonpatch.validate`. Throws `JsonPatchError` in case of an error.\n * @param {object} operation - operation object (patch)\n * @param {number} index - index of operation in the sequence\n * @param {object} [document] - object where the operation is supposed to be applied\n * @param {string} [existingPathFragment] - comes along with `document`\n */\nfunction validator(operation, index, document, existingPathFragment) {\n    if (typeof operation !== 'object' || operation === null || Array.isArray(operation)) {\n        throw new exports.JsonPatchError('Operation is not an object', 'OPERATION_NOT_AN_OBJECT', index, operation, document);\n    }\n    else if (!objOps[operation.op]) {\n        throw new exports.JsonPatchError('Operation `op` property is not one of operations defined in RFC-6902', 'OPERATION_OP_INVALID', index, operation, document);\n    }\n    else if (typeof operation.path !== 'string') {\n        throw new exports.JsonPatchError('Operation `path` property is not a string', 'OPERATION_PATH_INVALID', index, operation, document);\n    }\n    else if (operation.path.indexOf('/') !== 0 && operation.path.length > 0) {\n        // paths that aren't empty string should start with \"/\"\n        throw new exports.JsonPatchError('Operation `path` property must start with \"/\"', 'OPERATION_PATH_INVALID', index, operation, document);\n    }\n    else if ((operation.op === 'move' || operation.op === 'copy') && typeof operation.from !== 'string') {\n        throw new exports.JsonPatchError('Operation `from` property is not present (applicable in `move` and `copy` operations)', 'OPERATION_FROM_REQUIRED', index, operation, document);\n    }\n    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && operation.value === undefined) {\n        throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_REQUIRED', index, operation, document);\n    }\n    else if ((operation.op === 'add' || operation.op === 'replace' || operation.op === 'test') && helpers_1.hasUndefined(operation.value)) {\n        throw new exports.JsonPatchError('Operation `value` property is not present (applicable in `add`, `replace` and `test` operations)', 'OPERATION_VALUE_CANNOT_CONTAIN_UNDEFINED', index, operation, document);\n    }\n    else if (document) {\n        if (operation.op == \"add\") {\n            var pathLen = operation.path.split(\"/\").length;\n            var existingPathLen = existingPathFragment.split(\"/\").length;\n            if (pathLen !== existingPathLen + 1 && pathLen !== existingPathLen) {\n                throw new exports.JsonPatchError('Cannot perform an `add` operation at the desired path', 'OPERATION_PATH_CANNOT_ADD', index, operation, document);\n            }\n        }\n        else if (operation.op === 'replace' || operation.op === 'remove' || operation.op === '_get') {\n            if (operation.path !== existingPathFragment) {\n                throw new exports.JsonPatchError('Cannot perform the operation at a path that does not exist', 'OPERATION_PATH_UNRESOLVABLE', index, operation, document);\n            }\n        }\n        else if (operation.op === 'move' || operation.op === 'copy') {\n            var existingValue = { op: \"_get\", path: operation.from, value: undefined };\n            var error = validate([existingValue], document);\n            if (error && error.name === 'OPERATION_PATH_UNRESOLVABLE') {\n                throw new exports.JsonPatchError('Cannot perform the operation from a path that does not exist', 'OPERATION_FROM_UNRESOLVABLE', index, operation, document);\n            }\n        }\n    }\n}\nexports.validator = validator;\n/**\n * Validates a sequence of operations. If `document` parameter is provided, the sequence is additionally validated against the object document.\n * If error is encountered, returns a JsonPatchError object\n * @param sequence\n * @param document\n * @returns {JsonPatchError|undefined}\n */\nfunction validate(sequence, document, externalValidator) {\n    try {\n        if (!Array.isArray(sequence)) {\n            throw new exports.JsonPatchError('Patch sequence must be an array', 'SEQUENCE_NOT_AN_ARRAY');\n        }\n        if (document) {\n            //clone document and sequence so that we can safely try applying operations\n            applyPatch(helpers_1._deepClone(document), helpers_1._deepClone(sequence), externalValidator || true);\n        }\n        else {\n            externalValidator = externalValidator || validator;\n            for (var i = 0; i < sequence.length; i++) {\n                externalValidator(sequence[i], i, document, undefined);\n            }\n        }\n    }\n    catch (e) {\n        if (e instanceof exports.JsonPatchError) {\n            return e;\n        }\n        else {\n            throw e;\n        }\n    }\n}\nexports.validate = validate;\n/**\n * Default export for backwards compat\n */\nexports.default = {\n    JsonPatchError: exports.JsonPatchError,\n    deepClone: exports.deepClone,\n    getValueByPointer: getValueByPointer,\n    applyOperation: applyOperation,\n    applyPatch: applyPatch,\n    applyReducer: applyReducer,\n    validator: validator,\n    validate: validate\n};\n","'use strict'\n\nconst mh = require('multihashes')\nconst multibase = require('multibase')\nconst multicodec = require('multicodec')\nconst CIDUtil = require('./cid-util')\nconst uint8ArrayConcat = require('uint8arrays/concat')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayEquals = require('uint8arrays/equals')\n\nconst codecs = multicodec.nameToCode\nconst codecInts = /** @type {CodecName[]} */(Object.keys(codecs)).reduce((p, name) => {\n  p[codecs[name]] = name\n  return p\n}, /** @type {Record<CodecCode, CodecName>} */({}))\n\nconst symbol = Symbol.for('@ipld/js-cid/CID')\n\n/**\n * @typedef {Object} SerializedCID\n * @property {string} codec\n * @property {number} version\n * @property {Uint8Array} hash\n */\n/**\n * @typedef {0|1} CIDVersion\n * @typedef {__import__('multibase').BaseNameOrCode} BaseNameOrCode\n * @typedef {__import__('multicodec').CodecName} CodecName\n * @typedef {__import__('multicodec').CodecCode} CodecCode\n */\n\n/**\n * Class representing a CID `<mbase><version><mcodec><mhash>`\n * , as defined in [ipld/cid](https://github.com/multiformats/cid).\n *\n * @class CID\n */\nclass CID {\n  /**\n   * Create a new CID.\n   *\n   * The algorithm for argument input is roughly:\n   * ```\n   * if (cid)\n   *   -> create a copy\n   * else if (str)\n   *   if (1st char is on multibase table) -> CID String\n   *   else -> bs58 encoded multihash\n   * else if (Uint8Array)\n   *   if (1st byte is 0 or 1) -> CID\n   *   else -> multihash\n   * else if (Number)\n   *   -> construct CID by parts\n   * ```\n   *\n   * @param {CIDVersion | string | Uint8Array | CID} version\n   * @param {string|number} [codec]\n   * @param {Uint8Array} [multihash]\n   * @param {string} [multibaseName]\n   *\n   * @example\n   * new CID(<version>, <codec>, <multihash>, <multibaseName>)\n   * new CID(<cidStr>)\n   * new CID(<cid.bytes>)\n   * new CID(<multihash>)\n   * new CID(<bs58 encoded multihash>)\n   * new CID(<cid>)\n   */\n  constructor (version, codec, multihash, multibaseName) {\n    // We have below three blank field accessors only because\n    // otherwise TS will not pick them up if done after assignemnts\n\n    /**\n     * The version of the CID.\n     *\n     * @type {CIDVersion}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.version\n\n    /**\n     * The codec of the CID.\n     *\n     * @deprecated\n     * @type {CodecName}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.codec\n\n    /**\n     * The multihash of the CID.\n     *\n     * @type {Uint8Array}\n     */\n    // eslint-disable-next-line no-unused-expressions\n    this.multihash\n\n    Object.defineProperty(this, symbol, { value: true })\n    if (CID.isCID(version)) {\n      // version is an exising CID instance\n      const cid = /** @type {CID} */(version)\n      this.version = cid.version\n      this.codec = cid.codec\n      this.multihash = cid.multihash\n      // Default guard for when a CID < 0.7 is passed with no multibaseName\n      // @ts-ignore\n      this.multibaseName = cid.multibaseName || (cid.version === 0 ? 'base58btc' : 'base32')\n      return\n    }\n\n    if (typeof version === 'string') {\n      // e.g. 'base32' or false\n      const baseName = multibase.isEncoded(version)\n      if (baseName) {\n        // version is a CID String encoded with multibase, so v1\n        const cid = multibase.decode(version)\n        this.version = /** @type {CIDVersion} */(parseInt(cid[0].toString(), 16))\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = baseName\n      } else {\n        // version is a base58btc string multihash, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = mh.fromB58String(version)\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      Object.defineProperty(this, 'string', { value: version })\n      return\n    }\n\n    if (version instanceof Uint8Array) {\n      const v = parseInt(version[0].toString(), 16)\n      if (v === 1) {\n        // version is a CID Uint8Array\n        const cid = version\n        this.version = v\n        this.codec = multicodec.getCodec(cid.slice(1))\n        this.multihash = multicodec.rmPrefix(cid.slice(1))\n        this.multibaseName = 'base32'\n      } else {\n        // version is a raw multihash Uint8Array, so v0\n        this.version = 0\n        this.codec = 'dag-pb'\n        this.multihash = version\n        this.multibaseName = 'base58btc'\n      }\n      CID.validateCID(this)\n      return\n    }\n\n    // otherwise, assemble the CID from the parameters\n\n    this.version = version\n\n    if (typeof codec === 'number') {\n      // @ts-ignore\n      codec = codecInts[codec]\n    }\n\n    this.codec = /** @type {CodecName} */ (codec)\n\n    this.multihash = /** @type {Uint8Array} */ (multihash)\n\n    /**\n     * Multibase name as string.\n     *\n     * @deprecated\n     * @type {string}\n     */\n    this.multibaseName = multibaseName || (version === 0 ? 'base58btc' : 'base32')\n\n    CID.validateCID(this)\n  }\n\n  /**\n   * The CID as a `Uint8Array`\n   *\n   * @returns {Uint8Array}\n   *\n   */\n  get bytes () {\n    // @ts-ignore\n    let bytes = this._bytes\n\n    if (!bytes) {\n      if (this.version === 0) {\n        bytes = this.multihash\n      } else if (this.version === 1) {\n        const codec = multicodec.getCodeVarint(this.codec)\n        bytes = uint8ArrayConcat([\n          [1], codec, this.multihash\n        ], 1 + codec.byteLength + this.multihash.byteLength)\n      } else {\n        throw new Error('unsupported version')\n      }\n\n      // Cache this Uint8Array so it doesn't have to be recreated\n      Object.defineProperty(this, '_bytes', { value: bytes })\n    }\n\n    return bytes\n  }\n\n  /**\n   * The prefix of the CID.\n   *\n   * @returns {Uint8Array}\n   */\n  get prefix () {\n    const codec = multicodec.getCodeVarint(this.codec)\n    const multihash = mh.prefix(this.multihash)\n    const prefix = uint8ArrayConcat([\n      [this.version], codec, multihash\n    ], 1 + codec.byteLength + multihash.byteLength)\n\n    return prefix\n  }\n\n  /**\n   * The codec of the CID in its number form.\n   *\n   * @returns {CodecCode}\n   */\n  get code () {\n    return codecs[this.codec]\n  }\n\n  /**\n   * Convert to a CID of version `0`.\n   *\n   * @returns {CID}\n   */\n  toV0 () {\n    if (this.codec !== 'dag-pb') {\n      throw new Error('Cannot convert a non dag-pb CID to CIDv0')\n    }\n\n    const { name, length } = mh.decode(this.multihash)\n\n    if (name !== 'sha2-256') {\n      throw new Error('Cannot convert non sha2-256 multihash CID to CIDv0')\n    }\n\n    if (length !== 32) {\n      throw new Error('Cannot convert non 32 byte multihash CID to CIDv0')\n    }\n\n    return new CID(0, this.codec, this.multihash)\n  }\n\n  /**\n   * Convert to a CID of version `1`.\n   *\n   * @returns {CID}\n   */\n  toV1 () {\n    return new CID(1, this.codec, this.multihash, this.multibaseName)\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toBaseEncodedString (base = this.multibaseName) {\n    // @ts-ignore non enumerable cache property\n    if (this.string && this.string.length !== 0 && base === this.multibaseName) {\n      // @ts-ignore non enumerable cache property\n      return this.string\n    }\n    let str\n    if (this.version === 0) {\n      if (base !== 'base58btc') {\n        throw new Error('not supported with CIDv0, to support different bases, please migrate the instance do CIDv1, you can do that through cid.toV1()')\n      }\n      str = mh.toB58String(this.multihash)\n    } else if (this.version === 1) {\n      str = uint8ArrayToString(multibase.encode(base, this.bytes))\n    } else {\n      throw new Error('unsupported version')\n    }\n    if (base === this.multibaseName) {\n      // cache the string value\n      Object.defineProperty(this, 'string', { value: str })\n    }\n    return str\n  }\n\n  /**\n   * CID(QmdfTbBqBPQ7VNxZEYEj14VmRuZBkqFbiwReogJgS1zR1n)\n   *\n   * @returns {string}\n   */\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    return 'CID(' + this.toString() + ')'\n  }\n\n  /**\n   * Encode the CID into a string.\n   *\n   * @param {BaseNameOrCode} [base=this.multibaseName] - Base encoding to use.\n   * @returns {string}\n   */\n  toString (base) {\n    return this.toBaseEncodedString(base)\n  }\n\n  /**\n   * Serialize to a plain object.\n   *\n   * @returns {SerializedCID}\n   */\n  toJSON () {\n    return {\n      codec: this.codec,\n      version: this.version,\n      hash: this.multihash\n    }\n  }\n\n  /**\n   * Compare equality with another CID.\n   *\n   * @param {CID} other\n   * @returns {boolean}\n   */\n  equals (other) {\n    return this.codec === other.codec &&\n      this.version === other.version &&\n      uint8ArrayEquals(this.multihash, other.multihash)\n  }\n\n  /**\n   * Test if the given input is a valid CID object.\n   * Throws if it is not.\n   *\n   * @param {any} other - The other CID.\n   * @returns {void}\n   */\n  static validateCID (other) {\n    const errorMsg = CIDUtil.checkCIDComponents(other)\n    if (errorMsg) {\n      throw new Error(errorMsg)\n    }\n  }\n\n  /**\n   * Check if object is a CID instance\n   *\n   * @param {any} value\n   * @returns {value is CID}\n   */\n  static isCID (value) {\n    return value instanceof CID || Boolean(value && value[symbol])\n  }\n}\n\nCID.codecs = codecs\n\nmodule.exports = CID\n","\n\n//\n// THIS FILE IS AUTOMATICALLY GENERATED! DO NOT EDIT BY HAND!\n//\n;(function(global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined'\n        ? module.exports = factory()\n        : typeof define === 'function' && define.amd\n        ? define(factory) :\n        // cf. https://github.com/dankogai/js-base64/issues/119\n        (function() {\n            // existing version for noConflict()\n            const _Base64 = global.Base64;\n            const gBase64 = factory();\n            gBase64.noConflict = () => {\n                global.Base64 = _Base64;\n                return gBase64;\n            };\n            if (global.Meteor) { // Meteor.js\n                Base64 = gBase64;\n            }\n            global.Base64 = gBase64;\n        })();\n}((typeof self !== 'undefined' ? self\n        : typeof window !== 'undefined' ? window\n        : typeof global !== 'undefined' ? global\n        : this\n), function() {\n    'use strict';\n\n/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.6.1';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = [...b64ch];\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it, fn = (x) => x) => new Uint8Array(Array.prototype.slice.call(it, 0).map(fn));\nconst _mkUriSafe = (src) => src\n    .replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_')\n    .replace(/=+$/m, '');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a), c => c.charCodeAt(0));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/=+$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins,\n};\n\n    //\n    // export Base64 to the namespace\n    //\n    // ES5 is yet to have Object.assign() that may make transpilers unhappy.\n    // gBase64.Base64 = Object.assign({}, gBase64);\n    gBase64.Base64 = {};\n    Object.keys(gBase64).forEach(k => gBase64.Base64[k] = gBase64[k]);\n    return gBase64;\n}));\n\n\n","/* eslint quote-props: off */\n'use strict'\n\nconst names = Object.freeze({\n  'identity': 0x00,\n  'sha1': 0x11,\n  'sha2-256': 0x12,\n  'sha2-512': 0x13,\n  'sha3-512': 0x14,\n  'sha3-384': 0x15,\n  'sha3-256': 0x16,\n  'sha3-224': 0x17,\n  'shake-128': 0x18,\n  'shake-256': 0x19,\n  'keccak-224': 0x1a,\n  'keccak-256': 0x1b,\n  'keccak-384': 0x1c,\n  'keccak-512': 0x1d,\n  'blake3': 0x1e,\n  'murmur3-128': 0x22,\n  'murmur3-32': 0x23,\n  'dbl-sha2-256': 0x56,\n  'md4': 0xd4,\n  'md5': 0xd5,\n  'bmt': 0xd6,\n  'sha2-256-trunc254-padded': 0x1012,\n  'ripemd-128': 0x1052,\n  'ripemd-160': 0x1053,\n  'ripemd-256': 0x1054,\n  'ripemd-320': 0x1055,\n  'x11': 0x1100,\n  'sm3-256': 0x534d,\n  'blake2b-8': 0xb201,\n  'blake2b-16': 0xb202,\n  'blake2b-24': 0xb203,\n  'blake2b-32': 0xb204,\n  'blake2b-40': 0xb205,\n  'blake2b-48': 0xb206,\n  'blake2b-56': 0xb207,\n  'blake2b-64': 0xb208,\n  'blake2b-72': 0xb209,\n  'blake2b-80': 0xb20a,\n  'blake2b-88': 0xb20b,\n  'blake2b-96': 0xb20c,\n  'blake2b-104': 0xb20d,\n  'blake2b-112': 0xb20e,\n  'blake2b-120': 0xb20f,\n  'blake2b-128': 0xb210,\n  'blake2b-136': 0xb211,\n  'blake2b-144': 0xb212,\n  'blake2b-152': 0xb213,\n  'blake2b-160': 0xb214,\n  'blake2b-168': 0xb215,\n  'blake2b-176': 0xb216,\n  'blake2b-184': 0xb217,\n  'blake2b-192': 0xb218,\n  'blake2b-200': 0xb219,\n  'blake2b-208': 0xb21a,\n  'blake2b-216': 0xb21b,\n  'blake2b-224': 0xb21c,\n  'blake2b-232': 0xb21d,\n  'blake2b-240': 0xb21e,\n  'blake2b-248': 0xb21f,\n  'blake2b-256': 0xb220,\n  'blake2b-264': 0xb221,\n  'blake2b-272': 0xb222,\n  'blake2b-280': 0xb223,\n  'blake2b-288': 0xb224,\n  'blake2b-296': 0xb225,\n  'blake2b-304': 0xb226,\n  'blake2b-312': 0xb227,\n  'blake2b-320': 0xb228,\n  'blake2b-328': 0xb229,\n  'blake2b-336': 0xb22a,\n  'blake2b-344': 0xb22b,\n  'blake2b-352': 0xb22c,\n  'blake2b-360': 0xb22d,\n  'blake2b-368': 0xb22e,\n  'blake2b-376': 0xb22f,\n  'blake2b-384': 0xb230,\n  'blake2b-392': 0xb231,\n  'blake2b-400': 0xb232,\n  'blake2b-408': 0xb233,\n  'blake2b-416': 0xb234,\n  'blake2b-424': 0xb235,\n  'blake2b-432': 0xb236,\n  'blake2b-440': 0xb237,\n  'blake2b-448': 0xb238,\n  'blake2b-456': 0xb239,\n  'blake2b-464': 0xb23a,\n  'blake2b-472': 0xb23b,\n  'blake2b-480': 0xb23c,\n  'blake2b-488': 0xb23d,\n  'blake2b-496': 0xb23e,\n  'blake2b-504': 0xb23f,\n  'blake2b-512': 0xb240,\n  'blake2s-8': 0xb241,\n  'blake2s-16': 0xb242,\n  'blake2s-24': 0xb243,\n  'blake2s-32': 0xb244,\n  'blake2s-40': 0xb245,\n  'blake2s-48': 0xb246,\n  'blake2s-56': 0xb247,\n  'blake2s-64': 0xb248,\n  'blake2s-72': 0xb249,\n  'blake2s-80': 0xb24a,\n  'blake2s-88': 0xb24b,\n  'blake2s-96': 0xb24c,\n  'blake2s-104': 0xb24d,\n  'blake2s-112': 0xb24e,\n  'blake2s-120': 0xb24f,\n  'blake2s-128': 0xb250,\n  'blake2s-136': 0xb251,\n  'blake2s-144': 0xb252,\n  'blake2s-152': 0xb253,\n  'blake2s-160': 0xb254,\n  'blake2s-168': 0xb255,\n  'blake2s-176': 0xb256,\n  'blake2s-184': 0xb257,\n  'blake2s-192': 0xb258,\n  'blake2s-200': 0xb259,\n  'blake2s-208': 0xb25a,\n  'blake2s-216': 0xb25b,\n  'blake2s-224': 0xb25c,\n  'blake2s-232': 0xb25d,\n  'blake2s-240': 0xb25e,\n  'blake2s-248': 0xb25f,\n  'blake2s-256': 0xb260,\n  'skein256-8': 0xb301,\n  'skein256-16': 0xb302,\n  'skein256-24': 0xb303,\n  'skein256-32': 0xb304,\n  'skein256-40': 0xb305,\n  'skein256-48': 0xb306,\n  'skein256-56': 0xb307,\n  'skein256-64': 0xb308,\n  'skein256-72': 0xb309,\n  'skein256-80': 0xb30a,\n  'skein256-88': 0xb30b,\n  'skein256-96': 0xb30c,\n  'skein256-104': 0xb30d,\n  'skein256-112': 0xb30e,\n  'skein256-120': 0xb30f,\n  'skein256-128': 0xb310,\n  'skein256-136': 0xb311,\n  'skein256-144': 0xb312,\n  'skein256-152': 0xb313,\n  'skein256-160': 0xb314,\n  'skein256-168': 0xb315,\n  'skein256-176': 0xb316,\n  'skein256-184': 0xb317,\n  'skein256-192': 0xb318,\n  'skein256-200': 0xb319,\n  'skein256-208': 0xb31a,\n  'skein256-216': 0xb31b,\n  'skein256-224': 0xb31c,\n  'skein256-232': 0xb31d,\n  'skein256-240': 0xb31e,\n  'skein256-248': 0xb31f,\n  'skein256-256': 0xb320,\n  'skein512-8': 0xb321,\n  'skein512-16': 0xb322,\n  'skein512-24': 0xb323,\n  'skein512-32': 0xb324,\n  'skein512-40': 0xb325,\n  'skein512-48': 0xb326,\n  'skein512-56': 0xb327,\n  'skein512-64': 0xb328,\n  'skein512-72': 0xb329,\n  'skein512-80': 0xb32a,\n  'skein512-88': 0xb32b,\n  'skein512-96': 0xb32c,\n  'skein512-104': 0xb32d,\n  'skein512-112': 0xb32e,\n  'skein512-120': 0xb32f,\n  'skein512-128': 0xb330,\n  'skein512-136': 0xb331,\n  'skein512-144': 0xb332,\n  'skein512-152': 0xb333,\n  'skein512-160': 0xb334,\n  'skein512-168': 0xb335,\n  'skein512-176': 0xb336,\n  'skein512-184': 0xb337,\n  'skein512-192': 0xb338,\n  'skein512-200': 0xb339,\n  'skein512-208': 0xb33a,\n  'skein512-216': 0xb33b,\n  'skein512-224': 0xb33c,\n  'skein512-232': 0xb33d,\n  'skein512-240': 0xb33e,\n  'skein512-248': 0xb33f,\n  'skein512-256': 0xb340,\n  'skein512-264': 0xb341,\n  'skein512-272': 0xb342,\n  'skein512-280': 0xb343,\n  'skein512-288': 0xb344,\n  'skein512-296': 0xb345,\n  'skein512-304': 0xb346,\n  'skein512-312': 0xb347,\n  'skein512-320': 0xb348,\n  'skein512-328': 0xb349,\n  'skein512-336': 0xb34a,\n  'skein512-344': 0xb34b,\n  'skein512-352': 0xb34c,\n  'skein512-360': 0xb34d,\n  'skein512-368': 0xb34e,\n  'skein512-376': 0xb34f,\n  'skein512-384': 0xb350,\n  'skein512-392': 0xb351,\n  'skein512-400': 0xb352,\n  'skein512-408': 0xb353,\n  'skein512-416': 0xb354,\n  'skein512-424': 0xb355,\n  'skein512-432': 0xb356,\n  'skein512-440': 0xb357,\n  'skein512-448': 0xb358,\n  'skein512-456': 0xb359,\n  'skein512-464': 0xb35a,\n  'skein512-472': 0xb35b,\n  'skein512-480': 0xb35c,\n  'skein512-488': 0xb35d,\n  'skein512-496': 0xb35e,\n  'skein512-504': 0xb35f,\n  'skein512-512': 0xb360,\n  'skein1024-8': 0xb361,\n  'skein1024-16': 0xb362,\n  'skein1024-24': 0xb363,\n  'skein1024-32': 0xb364,\n  'skein1024-40': 0xb365,\n  'skein1024-48': 0xb366,\n  'skein1024-56': 0xb367,\n  'skein1024-64': 0xb368,\n  'skein1024-72': 0xb369,\n  'skein1024-80': 0xb36a,\n  'skein1024-88': 0xb36b,\n  'skein1024-96': 0xb36c,\n  'skein1024-104': 0xb36d,\n  'skein1024-112': 0xb36e,\n  'skein1024-120': 0xb36f,\n  'skein1024-128': 0xb370,\n  'skein1024-136': 0xb371,\n  'skein1024-144': 0xb372,\n  'skein1024-152': 0xb373,\n  'skein1024-160': 0xb374,\n  'skein1024-168': 0xb375,\n  'skein1024-176': 0xb376,\n  'skein1024-184': 0xb377,\n  'skein1024-192': 0xb378,\n  'skein1024-200': 0xb379,\n  'skein1024-208': 0xb37a,\n  'skein1024-216': 0xb37b,\n  'skein1024-224': 0xb37c,\n  'skein1024-232': 0xb37d,\n  'skein1024-240': 0xb37e,\n  'skein1024-248': 0xb37f,\n  'skein1024-256': 0xb380,\n  'skein1024-264': 0xb381,\n  'skein1024-272': 0xb382,\n  'skein1024-280': 0xb383,\n  'skein1024-288': 0xb384,\n  'skein1024-296': 0xb385,\n  'skein1024-304': 0xb386,\n  'skein1024-312': 0xb387,\n  'skein1024-320': 0xb388,\n  'skein1024-328': 0xb389,\n  'skein1024-336': 0xb38a,\n  'skein1024-344': 0xb38b,\n  'skein1024-352': 0xb38c,\n  'skein1024-360': 0xb38d,\n  'skein1024-368': 0xb38e,\n  'skein1024-376': 0xb38f,\n  'skein1024-384': 0xb390,\n  'skein1024-392': 0xb391,\n  'skein1024-400': 0xb392,\n  'skein1024-408': 0xb393,\n  'skein1024-416': 0xb394,\n  'skein1024-424': 0xb395,\n  'skein1024-432': 0xb396,\n  'skein1024-440': 0xb397,\n  'skein1024-448': 0xb398,\n  'skein1024-456': 0xb399,\n  'skein1024-464': 0xb39a,\n  'skein1024-472': 0xb39b,\n  'skein1024-480': 0xb39c,\n  'skein1024-488': 0xb39d,\n  'skein1024-496': 0xb39e,\n  'skein1024-504': 0xb39f,\n  'skein1024-512': 0xb3a0,\n  'skein1024-520': 0xb3a1,\n  'skein1024-528': 0xb3a2,\n  'skein1024-536': 0xb3a3,\n  'skein1024-544': 0xb3a4,\n  'skein1024-552': 0xb3a5,\n  'skein1024-560': 0xb3a6,\n  'skein1024-568': 0xb3a7,\n  'skein1024-576': 0xb3a8,\n  'skein1024-584': 0xb3a9,\n  'skein1024-592': 0xb3aa,\n  'skein1024-600': 0xb3ab,\n  'skein1024-608': 0xb3ac,\n  'skein1024-616': 0xb3ad,\n  'skein1024-624': 0xb3ae,\n  'skein1024-632': 0xb3af,\n  'skein1024-640': 0xb3b0,\n  'skein1024-648': 0xb3b1,\n  'skein1024-656': 0xb3b2,\n  'skein1024-664': 0xb3b3,\n  'skein1024-672': 0xb3b4,\n  'skein1024-680': 0xb3b5,\n  'skein1024-688': 0xb3b6,\n  'skein1024-696': 0xb3b7,\n  'skein1024-704': 0xb3b8,\n  'skein1024-712': 0xb3b9,\n  'skein1024-720': 0xb3ba,\n  'skein1024-728': 0xb3bb,\n  'skein1024-736': 0xb3bc,\n  'skein1024-744': 0xb3bd,\n  'skein1024-752': 0xb3be,\n  'skein1024-760': 0xb3bf,\n  'skein1024-768': 0xb3c0,\n  'skein1024-776': 0xb3c1,\n  'skein1024-784': 0xb3c2,\n  'skein1024-792': 0xb3c3,\n  'skein1024-800': 0xb3c4,\n  'skein1024-808': 0xb3c5,\n  'skein1024-816': 0xb3c6,\n  'skein1024-824': 0xb3c7,\n  'skein1024-832': 0xb3c8,\n  'skein1024-840': 0xb3c9,\n  'skein1024-848': 0xb3ca,\n  'skein1024-856': 0xb3cb,\n  'skein1024-864': 0xb3cc,\n  'skein1024-872': 0xb3cd,\n  'skein1024-880': 0xb3ce,\n  'skein1024-888': 0xb3cf,\n  'skein1024-896': 0xb3d0,\n  'skein1024-904': 0xb3d1,\n  'skein1024-912': 0xb3d2,\n  'skein1024-920': 0xb3d3,\n  'skein1024-928': 0xb3d4,\n  'skein1024-936': 0xb3d5,\n  'skein1024-944': 0xb3d6,\n  'skein1024-952': 0xb3d7,\n  'skein1024-960': 0xb3d8,\n  'skein1024-968': 0xb3d9,\n  'skein1024-976': 0xb3da,\n  'skein1024-984': 0xb3db,\n  'skein1024-992': 0xb3dc,\n  'skein1024-1000': 0xb3dd,\n  'skein1024-1008': 0xb3de,\n  'skein1024-1016': 0xb3df,\n  'skein1024-1024': 0xb3e0,\n  'poseidon-bls12_381-a2-fc1': 0xb401,\n  'poseidon-bls12_381-a2-fc1-sc': 0xb402\n})\n\nmodule.exports = { names }\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","\"use strict\"\n\nexports.TextEncoder =\n  typeof TextEncoder !== \"undefined\" ? TextEncoder : require(\"util\").TextEncoder\n\nexports.TextDecoder =\n  typeof TextDecoder !== \"undefined\" ? TextDecoder : require(\"util\").TextDecoder\n","// @ts-check\n/**\n * Implementation of the [multibase](https://github.com/multiformats/multibase) specification.\n *\n * @module Multibase\n */\n'use strict'\n\nconst { Buffer } = require('buffer')\nconst constants = require('./constants')\nconst { decodeText, asBuffer } = require('./util')\n\n/** @typedef {__import__(\"./base\")} Base */\n\n/**\n * Create a new buffer with the multibase varint+code.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be prefixed with multibase.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction multibase (nameOrCode, buf) {\n  if (!buf) {\n    throw new Error('requires an encoded buffer')\n  }\n  const { name, codeBuf } = encoding(nameOrCode)\n  validEncode(name, buf)\n\n  const buffer = Buffer.alloc(codeBuf.length + buf.length)\n  buffer.set(codeBuf, 0)\n  buffer.set(buf, codeBuf.length)\n\n  return buffer\n}\n\n/**\n * Encode data with the specified base and add the multibase prefix.\n *\n * @param {string|number} nameOrCode - The multibase name or code number.\n * @param {Uint8Array} buf - The data to be encoded.\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction encode (nameOrCode, buf) {\n  const enc = encoding(nameOrCode)\n\n  return Buffer.concat([enc.codeBuf, Buffer.from(enc.encode(buf))])\n}\n\n/**\n * Takes a Uint8Array or string encoded with multibase header, decodes it and\n * returns the decoded buffer\n *\n * @param {Uint8Array|string} data\n * @returns {Buffer}\n * @throws {Error} Will throw if the encoding is not supported\n *\n */\nfunction decode (data) {\n  if (ArrayBuffer.isView(data)) {\n    data = decodeText(data)\n  }\n  const prefix = data[0]\n\n  // Make all encodings case-insensitive except the ones that include upper and lower chars in the alphabet\n  if (['f', 'F', 'v', 'V', 't', 'T', 'b', 'B', 'c', 'C', 'h', 'k', 'K'].includes(prefix)) {\n    data = data.toLowerCase()\n  }\n  const enc = encoding(data[0])\n  return asBuffer(enc.decode(data.substring(1)))\n}\n\n/**\n * Is the given data multibase encoded?\n *\n * @param {Uint8Array|string} data\n * @returns {false|string}\n */\nfunction isEncoded (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  // Ensure bufOrString is a string\n  if (Object.prototype.toString.call(data) !== '[object String]') {\n    return false\n  }\n\n  try {\n    const enc = encoding(data[0])\n    return enc.name\n  } catch (err) {\n    return false\n  }\n}\n\n/**\n * Validate encoded data\n *\n * @param {string} name\n * @param {Uint8Array} buf\n * @returns {void}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction validEncode (name, buf) {\n  const enc = encoding(name)\n  enc.decode(decodeText(buf))\n}\n\n/**\n * Get the encoding by name or code\n *\n * @param {string|number} nameOrCode\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encoding (nameOrCode) {\n  if (constants.names[nameOrCode]) {\n    return constants.names[nameOrCode]\n  } else if (constants.codes[nameOrCode]) {\n    return constants.codes[nameOrCode]\n  } else {\n    throw new Error(`Unsupported encoding: ${nameOrCode}`)\n  }\n}\n\n/**\n * Get encoding from data\n *\n * @param {string|Uint8Array} data\n * @returns {Base}\n * @throws {Error} Will throw if the encoding is not supported\n */\nfunction encodingFromData (data) {\n  if (data instanceof Uint8Array) {\n    data = decodeText(data)\n  }\n\n  return encoding(data[0])\n}\n\nexports = module.exports = multibase\nexports.encode = encode\nexports.decode = decode\nexports.isEncoded = isEncoded\nexports.encoding = encoding\nexports.encodingFromData = encodingFromData\nexports.names = Object.freeze(constants.names)\nexports.codes = Object.freeze(constants.codes)\n","'use strict'\n\n/** @typedef {__import__('./generated-types').ConstantNumberMap} ConstantNumberMap */\n\nconst { baseTable } = require('./base-table')\n\nconst constants = /** @type {ConstantNumberMap} */({})\n\nfor (const [name, code] of Object.entries(baseTable)) {\n  const constant = name.toUpperCase().replace(/-/g, '_')\n  constants[constant] = code\n}\n\nmodule.exports = Object.freeze(constants)\n","'use strict'\n\n/** @typedef {__import__('./generated-types').CodecName} CodecName */\n/** @typedef {__import__('./generated-types').NumberNameMap} NumberNameMap */\n\nconst { baseTable } = require('./base-table')\n\nconst tableByCode = /** @type {NumberNameMap} */({})\n\nfor (const [name, code] of Object.entries(baseTable)) {\n  if (tableByCode[code] === undefined) {\n    tableByCode[code] = /** @type {CodecName} **/(name)\n  }\n}\n\nmodule.exports = /** @type {NumberNameMap} */(Object.freeze(tableByCode))\n","'use strict'\n\n/** @typedef {__import__('./generated-types').NameUint8ArrayMap} NameUint8ArrayMap */\n\nconst { baseTable } = require('./base-table')\nconst varintEncode = require('./util').varintEncode\n\nconst varintTable = /** @type {NameUint8ArrayMap} */ ({})\n\nfor (const encodingName in baseTable) {\n  const code = baseTable[encodingName]\n  varintTable[encodingName] = varintEncode(code)\n}\n\nmodule.exports = Object.freeze(varintTable)\n","'use strict'\n\n/** @typedef {__import__('./generated-types').CodecName} CodecName */\n/** @typedef {__import__('./generated-types').CodecNumber} CodecNumber */\n\nconst { baseTable } = require('./base-table')\n\n/**\n * @type {Map<CodecNumber,CodecName>}\n */\nconst nameTable = new Map()\n\nfor (const encodingName in baseTable) {\n  const code = baseTable[encodingName]\n  nameTable.set(code, /** @type {CodecName} */(encodingName))\n}\n\nmodule.exports = Object.freeze(nameTable)\n","'use strict'\n\n/**\n * Returns a new Uint8Array created by concatenating the passed ArrayLikes\n *\n * @param {Array<ArrayLike<number>>} arrays\n * @param {Number} length\n * @returns {Uint8Array}\n */\nfunction concat (arrays, length) {\n  if (!length) {\n    length = arrays.reduce((acc, curr) => acc + curr.length, 0)\n  }\n\n  const output = new Uint8Array(length)\n  let offset = 0\n\n  for (const arr of arrays) {\n    output.set(arr, offset)\n    offset += arr.length\n  }\n\n  return output\n}\n\nmodule.exports = concat\n","module.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n","'use strict'\n\nconst varint = require('varint')\nconst uint8ArrayToString = require('uint8arrays/to-string')\nconst uint8ArrayFromString = require('uint8arrays/from-string')\n\nmodule.exports = {\n  numberToUint8Array,\n  uint8ArrayToNumber,\n  varintUint8ArrayEncode,\n  varintEncode\n}\n\nfunction uint8ArrayToNumber (buf) {\n  return parseInt(uint8ArrayToString(buf, 'base16'), 16)\n}\n\nfunction numberToUint8Array (num) {\n  let hexString = num.toString(16)\n  if (hexString.length % 2 === 1) {\n    hexString = '0' + hexString\n  }\n  return uint8ArrayFromString(hexString, 'base16')\n}\n\nfunction varintUint8ArrayEncode (input) {\n  return Uint8Array.from(varint.encode(uint8ArrayToNumber(input)))\n}\n\nfunction varintEncode (num) {\n  return Uint8Array.from(varint.encode(num))\n}\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n","/**\n * toString ref.\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Return the type of `val`.\n *\n * @param {Mixed} val\n * @return {String}\n * @api public\n */\n\nmodule.exports = function(val){\n  switch (toString.call(val)) {\n    case '[object Date]': return 'date';\n    case '[object RegExp]': return 'regexp';\n    case '[object Arguments]': return 'arguments';\n    case '[object Array]': return 'array';\n    case '[object Error]': return 'error';\n  }\n\n  if (val === null) return 'null';\n  if (val === undefined) return 'undefined';\n  if (val !== val) return 'nan';\n  if (val && val.nodeType === 1) return 'element';\n\n  if (isBuffer(val)) return 'buffer';\n\n  val = val.valueOf\n    ? val.valueOf()\n    : Object.prototype.valueOf.apply(val);\n\n  return typeof val;\n};\n\n// code borrowed from https://github.com/feross/is-buffer/blob/master/index.js\nfunction isBuffer(obj) {\n  return !!(obj != null &&\n    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)\n      (obj.constructor &&\n      typeof obj.constructor.isBuffer === 'function' &&\n      obj.constructor.isBuffer(obj))\n    ))\n}\n","\n/**\n * Join `arr` with the trailing `str` defaulting to \"and\",\n * and `sep` string defaulting to \", \".\n *\n * @param {Array} arr\n * @param {String} str\n * @param {String} sep\n * @return {String}\n * @api public\n */\n\nmodule.exports = function(arr, str, sep){\n  str = str || 'and';\n  sep = sep || ', ';\n\n  if (arr.length < 2) return arr[0] || '';\n\n  var oxford = str.slice(0, 2) === sep;\n\n  if (!oxford) {\n    str = ' ' + str;\n  } else if (arr.length == 2) {\n    str = str.slice(1);\n  }\n\n  return arr.slice(0, -1).join(sep) + str + ' ' + arr[arr.length - 1];\n};\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isNetworkError = isNetworkError;\nexports.isRetryableError = isRetryableError;\nexports.isSafeRequestError = isSafeRequestError;\nexports.isIdempotentRequestError = isIdempotentRequestError;\nexports.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\nexports.exponentialDelay = exponentialDelay;\nexports.default = axiosRetry;\n\nvar _isRetryAllowed = require('is-retry-allowed');\n\nvar _isRetryAllowed2 = _interopRequireDefault(_isRetryAllowed);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar namespace = 'axios-retry';\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nfunction isNetworkError(error) {\n  return !error.response && Boolean(error.code) && // Prevents retrying cancelled requests\n  error.code !== 'ECONNABORTED' && // Prevents retrying timed out requests\n  (0, _isRetryAllowed2.default)(error); // Prevents retrying unsafe errors\n}\n\nvar SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nvar IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nfunction isRetryableError(error) {\n  return error.code !== 'ECONNABORTED' && (!error.response || error.response.status >= 500 && error.response.status <= 599);\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nfunction isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nfunction isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nfunction isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n\n/**\n * @return {number} - delay in milliseconds, always 0\n */\nfunction noDelay() {\n  return 0;\n}\n\n/**\n * @param  {number} [retryNumber=0]\n * @return {number} - delay in milliseconds\n */\nfunction exponentialDelay() {\n  var retryNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n  var delay = Math.pow(2, retryNumber) * 100;\n  var randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n  return delay + randomSum;\n}\n\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @return {Object}\n */\nfunction getCurrentState(config) {\n  var currentState = config[namespace] || {};\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {AxiosRetryConfig} defaultOptions\n * @return {AxiosRetryConfig}\n */\nfunction getRequestOptions(config, defaultOptions) {\n  return Object.assign({}, defaultOptions, config[namespace]);\n}\n\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {boolean} [defaultOptions.shouldResetTimeout=false]\n *        Defines if the timeout should be reset between retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n */\nfunction axiosRetry(axios, defaultOptions) {\n  axios.interceptors.request.use(function (config) {\n    var currentState = getCurrentState(config);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n\n  axios.interceptors.response.use(null, function (error) {\n    var config = error.config;\n\n    // If we have no information to retry the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    var _getRequestOptions = getRequestOptions(config, defaultOptions),\n        _getRequestOptions$re = _getRequestOptions.retries,\n        retries = _getRequestOptions$re === undefined ? 3 : _getRequestOptions$re,\n        _getRequestOptions$re2 = _getRequestOptions.retryCondition,\n        retryCondition = _getRequestOptions$re2 === undefined ? isNetworkOrIdempotentRequestError : _getRequestOptions$re2,\n        _getRequestOptions$re3 = _getRequestOptions.retryDelay,\n        retryDelay = _getRequestOptions$re3 === undefined ? noDelay : _getRequestOptions$re3,\n        _getRequestOptions$sh = _getRequestOptions.shouldResetTimeout,\n        shouldResetTimeout = _getRequestOptions$sh === undefined ? false : _getRequestOptions$sh;\n\n    var currentState = getCurrentState(config);\n\n    var shouldRetry = retryCondition(error) && currentState.retryCount < retries;\n\n    if (shouldRetry) {\n      currentState.retryCount += 1;\n      var delay = retryDelay(currentState.retryCount, error);\n\n      // Axios fails merging this configuration to the default configuration because it has an issue\n      // with circular structures: https://github.com/mzabriskie/axios/issues/370\n      fixConfig(axios, config);\n\n      if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n        var lastRequestDuration = Date.now() - currentState.lastRequestTime;\n        // Minimum 1ms timeout (passing 0 or less to XHR means no timeout)\n        config.timeout = Math.max(config.timeout - lastRequestDuration - delay, 1);\n      }\n\n      config.transformRequest = [function (data) {\n        return data;\n      }];\n\n      return new Promise(function (resolve) {\n        return setTimeout(function () {\n          return resolve(axios(config));\n        }, delay);\n      });\n    }\n\n    return Promise.reject(error);\n  });\n}\n\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;\n//# sourceMappingURL=index.js.map","'use strict';\n\nvar utils = require('./utils');\nvar bind = require('./helpers/bind');\nvar Axios = require('./core/Axios');\nvar mergeConfig = require('./core/mergeConfig');\nvar defaults = require('./defaults');\n\n/**\n * Create an instance of Axios\n *\n * @param {Object} defaultConfig The default config for the instance\n * @return {Axios} A new instance of Axios\n */\nfunction createInstance(defaultConfig) {\n  var context = new Axios(defaultConfig);\n  var instance = bind(Axios.prototype.request, context);\n\n  // Copy axios.prototype to instance\n  utils.extend(instance, Axios.prototype, context);\n\n  // Copy context to instance\n  utils.extend(instance, context);\n\n  return instance;\n}\n\n// Create the default instance to be exported\nvar axios = createInstance(defaults);\n\n// Expose Axios class to allow class inheritance\naxios.Axios = Axios;\n\n// Factory for creating new instances\naxios.create = function create(instanceConfig) {\n  return createInstance(mergeConfig(axios.defaults, instanceConfig));\n};\n\n// Expose Cancel & CancelToken\naxios.Cancel = require('./cancel/Cancel');\naxios.CancelToken = require('./cancel/CancelToken');\naxios.isCancel = require('./cancel/isCancel');\n\n// Expose all/spread\naxios.all = function all(promises) {\n  return Promise.all(promises);\n};\naxios.spread = require('./helpers/spread');\n\n// Expose isAxiosError\naxios.isAxiosError = require('./helpers/isAxiosError');\n\nmodule.exports = axios;\n\n// Allow use of default import syntax in TypeScript\nmodule.exports.default = axios;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.MAX_INTEGER = void 0;\nvar BN = require(\"bn.js\");\n/**\n * The max integer that this VM can handle\n */\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);\n/**\n * 2^256\n */\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\n/**\n * Keccak-256 hash of null\n */\nexports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\n/**\n * Keccak-256 of an RLP of an empty array\n */\nexports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\n/**\n * Keccak-256 hash of the RLP of null\n */\nexports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');\n//# sourceMappingURL=constants.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nvar secp256k1 = require('./secp256k1v3-adapter');\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\n/**\n * Returns the ECDSA signature of a message hash.\n */\nexports.ecsign = function (msgHash, privateKey, chainId) {\n    var sig = secp256k1.sign(msgHash, privateKey);\n    var recovery = sig.recovery;\n    var ret = {\n        r: sig.signature.slice(0, 32),\n        s: sig.signature.slice(32, 64),\n        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27,\n    };\n    return ret;\n};\n/**\n * ECDSA public key recovery from signature.\n * @returns Recovered public key\n */\nexports.ecrecover = function (msgHash, v, r, s, chainId) {\n    var signature = Buffer.concat([bytes_1.setLength(r, 32), bytes_1.setLength(s, 32)], 64);\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * @returns Signature\n */\nexports.toRpcSig = function (v, r, s, chainId) {\n    var recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error('Invalid signature v value');\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return bytes_1.bufferToHex(Buffer.concat([bytes_1.setLengthLeft(r, 32), bytes_1.setLengthLeft(s, 32), bytes_1.toBuffer(v)]));\n};\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n */\nexports.fromRpcSig = function (sig) {\n    var buf = bytes_1.toBuffer(sig);\n    // NOTE: with potential introduction of chainId this might need to be updated\n    if (buf.length !== 65) {\n        throw new Error('Invalid signature length');\n    }\n    var v = buf[64];\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v += 27;\n    }\n    return {\n        v: v,\n        r: buf.slice(0, 32),\n        s: buf.slice(32, 64),\n    };\n};\n/**\n * Validate a ECDSA signature.\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexports.isValidSignature = function (v, r, s, homesteadOrLater, chainId) {\n    if (homesteadOrLater === void 0) { homesteadOrLater = true; }\n    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    var rBN = new BN(r);\n    var sBN = new BN(s);\n    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) {\n        return false;\n    }\n    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) {\n        return false;\n    }\n    return true;\n};\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexports.hashPersonalMessage = function (message) {\n    var prefix = Buffer.from(\"\\u0019Ethereum Signed Message:\\n\" + message.length.toString(), 'utf-8');\n    return hash_1.keccak(Buffer.concat([prefix, message]));\n};\nfunction calculateSigRecovery(v, chainId) {\n    return chainId ? v - (2 * chainId + 35) : v - 27;\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === 0 || recovery === 1;\n}\n//# sourceMappingURL=signature.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.importPublic = exports.privateToPublic = exports.privateToAddress = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.isPrecompiled = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isZeroAddress = exports.isValidAddress = exports.zeroAddress = void 0;\nvar assert = require('assert');\nvar ethjsUtil = require('ethjs-util');\nvar secp256k1 = require('./secp256k1v3-adapter');\nvar BN = require(\"bn.js\");\nvar bytes_1 = require(\"./bytes\");\nvar hash_1 = require(\"./hash\");\n/**\n * Returns a zero address.\n */\nexports.zeroAddress = function () {\n    var addressLength = 20;\n    var addr = bytes_1.zeros(addressLength);\n    return bytes_1.bufferToHex(addr);\n};\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nexports.isValidAddress = function (address) {\n    return /^0x[0-9a-fA-F]{40}$/.test(address);\n};\n/**\n * Checks if a given address is a zero address.\n */\nexports.isZeroAddress = function (address) {\n    var zeroAddr = exports.zeroAddress();\n    return zeroAddr === bytes_1.addHexPrefix(address);\n};\n/**\n * Returns a checksummed address.\n *\n * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details, consult EIP-1191.\n *\n * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly\n * used variation in Ethereum was without the chainId. This may change in the future.\n */\nexports.toChecksumAddress = function (address, eip1191ChainId) {\n    address = ethjsUtil.stripHexPrefix(address).toLowerCase();\n    var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';\n    var hash = hash_1.keccak(prefix + address).toString('hex');\n    var ret = '0x';\n    for (var i = 0; i < address.length; i++) {\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        }\n        else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nexports.isValidChecksumAddress = function (address, eip1191ChainId) {\n    return exports.isValidAddress(address) && exports.toChecksumAddress(address, eip1191ChainId) === address;\n};\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nexports.generateAddress = function (from, nonce) {\n    from = bytes_1.toBuffer(from);\n    var nonceBN = new BN(nonce);\n    if (nonceBN.isZero()) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return hash_1.rlphash([from, null]).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return hash_1.rlphash([from, Buffer.from(nonceBN.toArray())]).slice(-20);\n};\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nexports.generateAddress2 = function (from, salt, initCode) {\n    var fromBuf = bytes_1.toBuffer(from);\n    var saltBuf = bytes_1.toBuffer(salt);\n    var initCodeBuf = bytes_1.toBuffer(initCode);\n    assert(fromBuf.length === 20);\n    assert(saltBuf.length === 32);\n    var address = hash_1.keccak256(Buffer.concat([Buffer.from('ff', 'hex'), fromBuf, saltBuf, hash_1.keccak256(initCodeBuf)]));\n    return address.slice(-20);\n};\n/**\n * Returns true if the supplied address belongs to a precompiled account (Byzantium).\n */\nexports.isPrecompiled = function (address) {\n    var a = bytes_1.unpad(address);\n    return a.length === 1 && a[0] >= 1 && a[0] <= 8;\n};\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nexports.isValidPrivate = function (privateKey) {\n    return secp256k1.privateKeyVerify(privateKey);\n};\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n    }\n    if (!sanitize) {\n        return false;\n    }\n    return secp256k1.publicKeyVerify(publicKey);\n};\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexports.pubToAddress = function (pubKey, sanitize) {\n    if (sanitize === void 0) { sanitize = false; }\n    pubKey = bytes_1.toBuffer(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);\n    }\n    assert(pubKey.length === 64);\n    // Only take the lower 160bits of the hash\n    return hash_1.keccak(pubKey).slice(-20);\n};\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToAddress = function (privateKey) {\n    return exports.publicToAddress(exports.privateToPublic(privateKey));\n};\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexports.privateToPublic = function (privateKey) {\n    privateKey = bytes_1.toBuffer(privateKey);\n    // skip the type flag and use the X, Y points\n    return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n};\n/**\n * Converts a public key to the Ethereum format.\n */\nexports.importPublic = function (publicKey) {\n    publicKey = bytes_1.toBuffer(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);\n    }\n    return publicKey;\n};\n//# sourceMappingURL=account.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.baToJSON = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToHex = exports.bufferToInt = exports.toBuffer = exports.stripZeros = exports.unpad = exports.setLengthRight = exports.setLength = exports.setLengthLeft = exports.zeros = void 0;\nvar ethjsUtil = require('ethjs-util');\nvar BN = require(\"bn.js\");\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexports.zeros = function (bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer|Array)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer|Array)\n */\nexports.setLengthLeft = function (msg, length, right) {\n    if (right === void 0) { right = false; }\n    var buf = exports.zeros(length);\n    msg = exports.toBuffer(msg);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    }\n    else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\nexports.setLength = exports.setLengthLeft;\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer|Array)\n * @param length the number of bytes the output should be\n * @return (Buffer|Array)\n */\nexports.setLengthRight = function (msg, length) {\n    return exports.setLength(msg, length, true);\n};\n/**\n * Trims leading zeros from a `Buffer` or an `Array`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nexports.unpad = function (a) {\n    a = ethjsUtil.stripHexPrefix(a);\n    var first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\nexports.stripZeros = exports.unpad;\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param v the value\n */\nexports.toBuffer = function (v) {\n    if (!Buffer.isBuffer(v)) {\n        if (Array.isArray(v)) {\n            v = Buffer.from(v);\n        }\n        else if (typeof v === 'string') {\n            if (ethjsUtil.isHexString(v)) {\n                v = Buffer.from(ethjsUtil.padToEven(ethjsUtil.stripHexPrefix(v)), 'hex');\n            }\n            else {\n                throw new Error(\"Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: \" + v);\n            }\n        }\n        else if (typeof v === 'number') {\n            v = ethjsUtil.intToBuffer(v);\n        }\n        else if (v === null || v === undefined) {\n            v = Buffer.allocUnsafe(0);\n        }\n        else if (BN.isBN(v)) {\n            v = v.toArrayLike(Buffer);\n        }\n        else if (v.toArray) {\n            // converts a BN to a Buffer\n            v = Buffer.from(v.toArray());\n        }\n        else {\n            throw new Error('invalid type');\n        }\n    }\n    return v;\n};\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n    return new BN(exports.toBuffer(buf)).toNumber();\n};\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexports.bufferToHex = function (buf) {\n    buf = exports.toBuffer(buf);\n    return '0x' + buf.toString('hex');\n};\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexports.fromSigned = function (num) {\n    return new BN(num).fromTwos(256);\n};\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexports.toUnsigned = function (num) {\n    return Buffer.from(num.toTwos(256).toArray());\n};\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexports.addHexPrefix = function (str) {\n    if (typeof str !== 'string') {\n        return str;\n    }\n    return ethjsUtil.isHexPrefixed(str) ? str : '0x' + str;\n};\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexports.baToJSON = function (ba) {\n    if (Buffer.isBuffer(ba)) {\n        return \"0x\" + ba.toString('hex');\n    }\n    else if (ba instanceof Array) {\n        var array = [];\n        for (var i = 0; i < ba.length; i++) {\n            array.push(exports.baToJSON(ba[i]));\n        }\n        return array;\n    }\n};\n//# sourceMappingURL=bytes.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defineProperties = void 0;\nvar assert = require('assert');\nvar ethjsUtil = require('ethjs-util');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param self the `Object` to define properties on\n * @param fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param data data to be validated against the definitions\n * @deprecated\n */\nexports.defineProperties = function (self, fields, data) {\n    self.raw = [];\n    self._fields = [];\n    // attach the `toJSON`\n    self.toJSON = function (label) {\n        if (label === void 0) { label = false; }\n        if (label) {\n            var obj_1 = {};\n            self._fields.forEach(function (field) {\n                obj_1[field] = \"0x\" + self[field].toString('hex');\n            });\n            return obj_1;\n        }\n        return bytes_1.baToJSON(self.raw);\n    };\n    self.serialize = function serialize() {\n        return rlp.encode(self.raw);\n    };\n    fields.forEach(function (field, i) {\n        self._fields.push(field.name);\n        function getter() {\n            return self.raw[i];\n        }\n        function setter(v) {\n            v = bytes_1.toBuffer(v);\n            if (v.toString('hex') === '00' && !field.allowZero) {\n                v = Buffer.allocUnsafe(0);\n            }\n            if (field.allowLess && field.length) {\n                v = bytes_1.stripZeros(v);\n                assert(field.length >= v.length, \"The field \" + field.name + \" must not have more \" + field.length + \" bytes\");\n            }\n            else if (!(field.allowZero && v.length === 0) && field.length) {\n                assert(field.length === v.length, \"The field \" + field.name + \" must have byte length of \" + field.length);\n            }\n            self.raw[i] = v;\n        }\n        Object.defineProperty(self, field.name, {\n            enumerable: true,\n            configurable: true,\n            get: getter,\n            set: setter,\n        });\n        if (field.default) {\n            self[field.name] = field.default;\n        }\n        // attach alias\n        if (field.alias) {\n            Object.defineProperty(self, field.alias, {\n                enumerable: false,\n                configurable: true,\n                set: setter,\n                get: getter,\n            });\n        }\n    });\n    // if the constuctor is passed data\n    if (data) {\n        if (typeof data === 'string') {\n            data = Buffer.from(ethjsUtil.stripHexPrefix(data), 'hex');\n        }\n        if (Buffer.isBuffer(data)) {\n            data = rlp.decode(data);\n        }\n        if (Array.isArray(data)) {\n            if (data.length > self._fields.length) {\n                throw new Error('wrong number of fields in data');\n            }\n            // make sure all the items are buffers\n            data.forEach(function (d, i) {\n                self[self._fields[i]] = bytes_1.toBuffer(d);\n            });\n        }\n        else if (typeof data === 'object') {\n            var keys_1 = Object.keys(data);\n            fields.forEach(function (field) {\n                if (keys_1.indexOf(field.name) !== -1)\n                    self[field.name] = data[field.name];\n                if (keys_1.indexOf(field.alias) !== -1)\n                    self[field.alias] = data[field.alias];\n            });\n        }\n        else {\n            throw new Error('invalid data');\n        }\n    }\n};\n//# sourceMappingURL=object.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.rlphash = exports.ripemd160 = exports.sha256 = exports.keccak256 = exports.keccak = void 0;\nvar _a = require('ethereum-cryptography/keccak'), keccak224 = _a.keccak224, keccak384 = _a.keccak384, k256 = _a.keccak256, keccak512 = _a.keccak512;\nvar createHash = require('create-hash');\nvar ethjsUtil = require('ethjs-util');\nvar rlp = require(\"rlp\");\nvar bytes_1 = require(\"./bytes\");\n/**\n * Creates Keccak hash of the input\n * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value\n * it's interpreted as hexadecimal, otherwise as utf8.\n * @param bits The Keccak width\n */\nexports.keccak = function (a, bits) {\n    if (bits === void 0) { bits = 256; }\n    if (typeof a === 'string' && !ethjsUtil.isHexString(a)) {\n        a = Buffer.from(a, 'utf8');\n    }\n    else {\n        a = bytes_1.toBuffer(a);\n    }\n    if (!bits)\n        bits = 256;\n    switch (bits) {\n        case 224: {\n            return keccak224(a);\n        }\n        case 256: {\n            return k256(a);\n        }\n        case 384: {\n            return keccak384(a);\n        }\n        case 512: {\n            return keccak512(a);\n        }\n        default: {\n            throw new Error(\"Invald algorithm: keccak\" + bits);\n        }\n    }\n};\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256).\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.keccak256 = function (a) {\n    return exports.keccak(a);\n};\n/**\n * Creates SHA256 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n */\nexports.sha256 = function (a) {\n    a = bytes_1.toBuffer(a);\n    return createHash('sha256')\n        .update(a)\n        .digest();\n};\n/**\n * Creates RIPEMD160 hash of the input.\n * @param a The input data (Buffer|Array|String|Number)\n * @param padded Whether it should be padded to 256 bits or not\n */\nexports.ripemd160 = function (a, padded) {\n    a = bytes_1.toBuffer(a);\n    var hash = createHash('rmd160')\n        .update(a)\n        .digest();\n    if (padded === true) {\n        return bytes_1.setLength(hash, 32);\n    }\n    else {\n        return hash;\n    }\n};\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input.\n * @param a The input data\n */\nexports.rlphash = function (a) {\n    return exports.keccak(rlp.encode(a));\n};\n//# sourceMappingURL=hash.js.map","'use strict';\n\nvar isHexPrefixed = require('is-hex-prefixed');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Pads a `String` to have an even length\n * @param {String} value\n * @return {String} output\n */\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');\n  }\n\n  if (a.length % 2) {\n    a = '0' + a;\n  }\n\n  return a;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return '0x' + hex;\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n\n  return new Buffer(padToEven(hex.slice(2)), 'hex');\n}\n\n/**\n * Get the binary size of a string\n * @param {String} str\n * @return {Number}\n */\nfunction getBinarySize(str) {\n  if (typeof str !== 'string') {\n    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \\'str\\' to be type String, got \\'' + typeof str + '\\'.');\n  }\n\n  return Buffer.byteLength(str, 'utf8');\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param {array} superset\n * @param {array} subset\n *\n * @returns {boolean}\n */\nfunction arrayContainsArray(superset, subset, some) {\n  if (Array.isArray(superset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'superset\\' to be an array got type \\'' + typeof superset + '\\'');\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'subset\\' to be an array got type \\'' + typeof subset + '\\'');\n  }\n\n  return subset[Boolean(some) && 'some' || 'every'](function (value) {\n    return superset.indexOf(value) >= 0;\n  });\n}\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toUtf8(hex) {\n  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');\n\n  return bufferValue.toString('utf8');\n}\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toAscii(hex) {\n  var str = ''; // eslint-disable-line\n  var i = 0,\n      l = hex.length; // eslint-disable-line\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n\n  return str;\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n  var str = new Buffer(stringValue, 'utf8');\n\n  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromAscii(stringValue) {\n  var hex = ''; // eslint-disable-line\n  for (var i = 0; i < stringValue.length; i++) {\n    // eslint-disable-line\n    var code = stringValue.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n\n  return '0x' + hex;\n}\n\n/**\n * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]\n *\n * @method getKeys get specific key from inner object array of objects\n * @param {String} params\n * @param {String} key\n * @param {Boolean} allowEmpty\n * @returns {Array} output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n  if (!Array.isArray(params)) {\n    throw new Error('[ethjs-util] method getKeys expecting type Array as \\'params\\' input, got \\'' + typeof params + '\\'');\n  }\n  if (typeof key !== 'string') {\n    throw new Error('[ethjs-util] method getKeys expecting type String for input \\'key\\' got \\'' + typeof key + '\\'.');\n  }\n\n  var result = []; // eslint-disable-line\n\n  for (var i = 0; i < params.length; i++) {\n    // eslint-disable-line\n    var value = params[i][key]; // eslint-disable-line\n    if (allowEmpty && !value) {\n      value = '';\n    } else if (typeof value !== 'string') {\n      throw new Error('invalid abi');\n    }\n    result.push(value);\n  }\n\n  return result;\n}\n\n/**\n * Is the string a hex string.\n *\n * @method check if string is hex string of specific length\n * @param {String} value\n * @param {Number} length\n * @returns {Boolean} output the string is a hex string\n */\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  arrayContainsArray: arrayContainsArray,\n  intToBuffer: intToBuffer,\n  getBinarySize: getBinarySize,\n  isHexPrefixed: isHexPrefixed,\n  stripHexPrefix: stripHexPrefix,\n  padToEven: padToEven,\n  intToHex: intToHex,\n  fromAscii: fromAscii,\n  fromUtf8: fromUtf8,\n  toAscii: toAscii,\n  toUtf8: toUtf8,\n  getKeys: getKeys,\n  isHexString: isHexString\n};","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ecdhUnsafe = exports.ecdh = exports.recover = exports.verify = exports.sign = exports.signatureImportLax = exports.signatureImport = exports.signatureExport = exports.signatureNormalize = exports.publicKeyCombine = exports.publicKeyTweakMul = exports.publicKeyTweakAdd = exports.publicKeyVerify = exports.publicKeyConvert = exports.publicKeyCreate = exports.privateKeyTweakMul = exports.privateKeyTweakAdd = exports.privateKeyModInverse = exports.privateKeyNegate = exports.privateKeyImport = exports.privateKeyExport = exports.privateKeyVerify = void 0;\nvar secp256k1 = require('ethereum-cryptography/secp256k1');\nvar secp256k1v3 = require('./secp256k1v3-lib/index');\nvar der = require('./secp256k1v3-lib/der');\n/**\n * Verify an ECDSA privateKey\n * @method privateKeyVerify\n * @param {Buffer} privateKey\n * @return {boolean}\n */\nexports.privateKeyVerify = function (privateKey) {\n    // secp256k1 v4 version throws when privateKey length is not 32\n    if (privateKey.length !== 32) {\n        return false;\n    }\n    return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));\n};\n/**\n * Export a privateKey in DER format\n * @method privateKeyExport\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {boolean}\n */\nexports.privateKeyExport = function (privateKey, compressed) {\n    // secp256k1 v4 version throws when privateKey length is not 32\n    if (privateKey.length !== 32) {\n        throw new RangeError('private key length is invalid');\n    }\n    var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);\n    return der.privateKeyExport(privateKey, publicKey, compressed);\n};\n/**\n * Import a privateKey in DER format\n * @method privateKeyImport\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nexports.privateKeyImport = function (privateKey) {\n    // privateKeyImport method is not part of secp256k1 v4 package\n    // this implementation is based on v3\n    privateKey = der.privateKeyImport(privateKey);\n    if (privateKey !== null && privateKey.length === 32 && exports.privateKeyVerify(privateKey)) {\n        return privateKey;\n    }\n    throw new Error(\"couldn't import from DER format\");\n};\n/**\n * Negate a privateKey by subtracting it from the order of the curve's base point\n * @method privateKeyNegate\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nexports.privateKeyNegate = function (privateKey) {\n    return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));\n};\n/**\n * Compute the inverse of a privateKey (modulo the order of the curve's base point).\n * @method privateKeyModInverse\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nexports.privateKeyModInverse = function (privateKey) {\n    if (privateKey.length !== 32) {\n        throw new Error('private key length is invalid');\n    }\n    return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));\n};\n/**\n * Tweak a privateKey by adding tweak to it.\n * @method privateKeyTweakAdd\n * @param {Buffer} privateKey\n * @param {Buffer} tweak\n * @return {Buffer}\n */\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n    return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));\n};\n/**\n * Tweak a privateKey by multiplying it by a tweak.\n * @method privateKeyTweakMul\n * @param {Buffer} privateKey\n * @param {Buffer} tweak\n * @return {Buffer}\n */\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n    return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));\n};\n/**\n * Compute the public key for a privateKey.\n * @method publicKeyCreate\n * @param {Buffer} privateKey\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.publicKeyCreate = function (privateKey, compressed) {\n    return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));\n};\n/**\n * Convert a publicKey to compressed or uncompressed form.\n * @method publicKeyConvert\n * @param {Buffer} publicKey\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.publicKeyConvert = function (publicKey, compressed) {\n    return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));\n};\n/**\n * Verify an ECDSA publicKey.\n * @method publicKeyVerify\n * @param {Buffer} publicKey\n * @return {boolean}\n */\nexports.publicKeyVerify = function (publicKey) {\n    // secp256k1 v4 version throws when publicKey length is not 33 or 65\n    if (publicKey.length !== 33 && publicKey.length !== 65) {\n        return false;\n    }\n    return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));\n};\n/**\n * Tweak a publicKey by adding tweak times the generator to it.\n * @method publicKeyTweakAdd\n * @param {Buffer} publicKey\n * @param {Buffer} tweak\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n    return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));\n};\n/**\n * Tweak a publicKey by multiplying it by a tweak value\n * @method publicKeyTweakMul\n * @param {Buffer} publicKey\n * @param {Buffer} tweak\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n    return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));\n};\n/**\n * Add a given publicKeys together.\n * @method publicKeyCombine\n * @param {Array<Buffer>} publicKeys\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.publicKeyCombine = function (publicKeys, compressed) {\n    var keys = [];\n    publicKeys.forEach(function (publicKey) {\n        keys.push(Uint8Array.from(publicKey));\n    });\n    return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));\n};\n/**\n * Convert a signature to a normalized lower-S form.\n * @method signatureNormalize\n * @param {Buffer} signature\n * @return {Buffer}\n */\nexports.signatureNormalize = function (signature) {\n    return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));\n};\n/**\n * Serialize an ECDSA signature in DER format.\n * @method signatureExport\n * @param {Buffer} signature\n * @return {Buffer}\n */\nexports.signatureExport = function (signature) {\n    return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));\n};\n/**\n * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).\n * @method signatureImport\n * @param {Buffer} signature\n * @return {Buffer}\n */\nexports.signatureImport = function (signature) {\n    return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));\n};\n/**\n * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).\n * @method signatureImportLax\n * @param {Buffer} signature\n * @return {Buffer}\n */\nexports.signatureImportLax = function (signature) {\n    // signatureImportLax method is not part of secp256k1 v4 package\n    // this implementation is based on v3\n    // ensure that signature is greater than 0\n    if (signature.length === 0) {\n        throw new RangeError('signature length is invalid');\n    }\n    var sigObj = der.signatureImportLax(signature);\n    if (sigObj === null) {\n        throw new Error(\"couldn't parse DER signature\");\n    }\n    return secp256k1v3.signatureImport(sigObj);\n};\n/**\n * Create an ECDSA signature. Always return low-S signature.\n * @method sign\n * @param {Buffer} message\n * @param {Buffer} privateKey\n * @param {Object} options\n * @return {Buffer}\n */\nexports.sign = function (message, privateKey, options) {\n    if (options === null) {\n        throw new TypeError('options should be an Object');\n    }\n    var signOptions = undefined;\n    if (options) {\n        signOptions = {};\n        if (options.data === null) {\n            // validate option.data length\n            throw new TypeError('options.data should be a Buffer');\n        }\n        if (options.data) {\n            if (options.data.length != 32) {\n                throw new RangeError('options.data length is invalid');\n            }\n            signOptions.data = new Uint8Array(options.data);\n        }\n        if (options.noncefn === null) {\n            throw new TypeError('options.noncefn should be a Function');\n        }\n        if (options.noncefn) {\n            // convert option.noncefn function signature\n            signOptions.noncefn = function (message, privateKey, algo, data, attempt) {\n                var bufferAlgo = algo != null ? Buffer.from(algo) : null;\n                var bufferData = data != null ? Buffer.from(data) : null;\n                var buffer = Buffer.from('');\n                if (options.noncefn) {\n                    buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);\n                }\n                return new Uint8Array(buffer);\n            };\n        }\n    }\n    var sig = secp256k1.ecdsaSign(Uint8Array.from(message), Uint8Array.from(privateKey), signOptions);\n    return {\n        signature: Buffer.from(sig.signature),\n        recovery: sig.recid,\n    };\n};\n/**\n * Verify an ECDSA signature.\n * @method verify\n * @param {Buffer} message\n * @param {Buffer} signature\n * @param {Buffer} publicKey\n * @return {boolean}\n */\nexports.verify = function (message, signature, publicKey) {\n    return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);\n};\n/**\n * Recover an ECDSA public key from a signature.\n * @method recover\n * @param {Buffer} message\n * @param {Buffer} signature\n * @param {Number} recid\n * @param {boolean} compressed\n * @return {Buffer}\n */\nexports.recover = function (message, signature, recid, compressed) {\n    return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));\n};\n/**\n * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.\n * @method ecdh\n * @param {Buffer} publicKey\n * @param {Buffer} privateKey\n * @return {Buffer}\n */\nexports.ecdh = function (publicKey, privateKey) {\n    // note: secp256k1 v3 doesn't allow optional parameter\n    return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));\n};\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n    // ecdhUnsafe method is not part of secp256k1 v4 package\n    // this implementation is based on v3\n    // ensure valid publicKey length\n    if (publicKey.length !== 33 && publicKey.length !== 65) {\n        throw new RangeError('public key length is invalid');\n    }\n    // ensure valid privateKey length\n    if (privateKey.length !== 32) {\n        throw new RangeError('private key length is invalid');\n    }\n    return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));\n};\n//# sourceMappingURL=secp256k1v3-adapter.js.map","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto\n// implementation. Also, find the complete implementation of crypto on IE11.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));\n\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4\n  return ([\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]], '-',\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]],\n    bth[buf[i++]], bth[buf[i++]]\n  ]).join('');\n}\n\nmodule.exports = bytesToUuid;\n","\nmodule.exports = function createSwappableProxy (initialTarget) {\n  let target = initialTarget\n\n  const proxy = new Proxy({}, {\n    get: (_, name) => {\n      // override `setTarget` access\n      if (name === 'setTarget') return setTarget\n      return target[name]\n    },\n    set: (_, name, value) => {\n      // allow `setTarget` overrides\n      if (name === 'setTarget') {\n        setTarget = value\n        return true\n      }\n      target[name] = value\n      return true\n    },\n  })\n\n  return proxy\n\n  function setTarget(newTarget) {\n    target = newTarget\n  }\n}\n","const filterNoop = () => true\nconst internalEvents = ['newListener', 'removeListener']\nconst externalEventFilter = (name) => !internalEvents.includes(name)\n\nmodule.exports = function createEventEmitterProxy (initialTarget, opts) {\n  // parse options\n  opts = opts || {}\n  let eventFilter = opts.eventFilter || filterNoop\n  if (eventFilter === 'skipInternal') eventFilter = externalEventFilter\n  if (typeof eventFilter !== 'function') throw new Error('createEventEmitterProxy - Invalid eventFilter')\n\n  let target = initialTarget\n\n  const proxy = new Proxy({}, {\n    get: (_, name) => {\n      // override `setTarget` access\n      if (name === 'setTarget') return setTarget\n      return target[name]\n    },\n    set: (_, name, value) => {\n      // allow `setTarget` overrides\n      if (name === 'setTarget') {\n        setTarget = value\n        return true\n      }\n      target[name] = value\n      return true\n    },\n  })\n\n  return proxy\n\n  function setTarget(newTarget) {\n    const oldTarget = target\n    target = newTarget\n    // migrate listeners\n    oldTarget.eventNames().filter(eventFilter).forEach((name) => {\n      getRawListeners(oldTarget, name).forEach(handler => newTarget.on(name, handler))\n    })\n    // remove old\n    oldTarget.removeAllListeners()\n  }\n}\n\nfunction getRawListeners(eventEmitter, name) {\n  // prefer native\n  if (eventEmitter.rawListeners) return eventEmitter.rawListeners(name)\n  // fallback to lookup against internal object\n  let events = eventEmitter._events[name] || []\n  // ensure array\n  if (!Array.isArray(events)) events = [events]\n  // return copy\n  return events.slice()\n}\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./BaseBlockTracker\"), exports);\n__exportStar(require(\"./PollingBlockTracker\"), exports);\n__exportStar(require(\"./SubscribeBlockTracker\"), exports);\n//# sourceMappingURL=index.js.map","// Base58 encoding/decoding\n// Originally written by Mike Hearn for BitcoinJ\n// Copyright (c) 2011 Google Inc\n// Ported to JavaScript by Stefan Thomas\n// Merged Buffer refactorings from base58-native by Stephen Pair\n// Copyright (c) 2013 BitPay Inc\n\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\nvar ALPHABET_MAP = {}\nfor(var i = 0; i < ALPHABET.length; i++) {\n  ALPHABET_MAP[ALPHABET.charAt(i)] = i\n}\nvar BASE = 58\n\nfunction encode(buffer) {\n  if (buffer.length === 0) return ''\n\n  var i, j, digits = [0]\n  for (i = 0; i < buffer.length; i++) {\n    for (j = 0; j < digits.length; j++) digits[j] <<= 8\n\n    digits[0] += buffer[i]\n\n    var carry = 0\n    for (j = 0; j < digits.length; ++j) {\n      digits[j] += carry\n\n      carry = (digits[j] / BASE) | 0\n      digits[j] %= BASE\n    }\n\n    while (carry) {\n      digits.push(carry % BASE)\n\n      carry = (carry / BASE) | 0\n    }\n  }\n\n  // deal with leading zeros\n  for (i = 0; buffer[i] === 0 && i < buffer.length - 1; i++) digits.push(0)\n\n  // convert digits to a string\n  var stringOutput = \"\"\n  for (var i = digits.length - 1; i >= 0; i--) {\n    stringOutput = stringOutput + ALPHABET[digits[i]]\n  }\n  return stringOutput\n}\n\nfunction decode(string) {\n  if (string.length === 0) return []\n\n  var i, j, bytes = [0]\n  for (i = 0; i < string.length; i++) {\n    var c = string[i]\n    if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character')\n\n    for (j = 0; j < bytes.length; j++) bytes[j] *= BASE\n    bytes[0] += ALPHABET_MAP[c]\n\n    var carry = 0\n    for (j = 0; j < bytes.length; ++j) {\n      bytes[j] += carry\n\n      carry = bytes[j] >> 8\n      bytes[j] &= 0xff\n    }\n\n    while (carry) {\n      bytes.push(carry & 0xff)\n\n      carry >>= 8\n    }\n  }\n\n  // deal with leading zeros\n  for (i = 0; string[i] === '1' && i < string.length - 1; i++) bytes.push(0)\n\n  return bytes.reverse()\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode\n}\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\n\nvar messages = require('../messages.json')\n\nvar ec = new EC('secp256k1')\nvar ecparams = ec.curve\n\nfunction loadCompressedPublicKey (first, xBuffer) {\n  var x = new BN(xBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xBuffer, yBuffer) {\n  var x = new BN(xBuffer)\n  var y = new BN(yBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  var x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (publicKey) {\n  var first = publicKey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (publicKey.length !== 33) return null\n      return loadCompressedPublicKey(first, publicKey.slice(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (publicKey.length !== 65) return null\n      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))\n    default:\n      return null\n  }\n}\n\nexports.privateKeyVerify = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.cmp(ecparams.n) < 0 && !bn.isZero()\n}\n\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.privateKeyNegate = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = new BN(privateKey)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)\n\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  bn.iadd(new BN(privateKey))\n  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)\n\n  bn.imul(new BN(privateKey))\n  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return Buffer.from(pair.getPublic(compressed, true))\n}\n\nexports.publicKeyVerify = function (publicKey) {\n  return loadPublicKey(publicKey) !== null\n}\n\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  var point = ecparams.g.mul(tweak).add(pair.pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)\n\n  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))\n}\n\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var pairs = new Array(publicKeys.length)\n  for (var i = 0; i < publicKeys.length; ++i) {\n    pairs[i] = loadPublicKey(publicKeys[i])\n    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n  }\n\n  var point = pairs[0].pub\n  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.signatureNormalize = function (signature) {\n  var r = new BN(signature.slice(0, 32))\n  var s = new BN(signature.slice(32, 64))\n  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  var result = Buffer.from(signature)\n  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)\n\n  return result\n}\n\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32)\n  var s = signature.slice(32, 64)\n  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r)\n  if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n  var s = new BN(sigObj.s)\n  if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n  return Buffer.concat([\n    r.toArrayLike(Buffer, 'be', 32),\n    s.toArrayLike(Buffer, 'be', 32)\n  ])\n}\n\nexports.sign = function (message, privateKey, noncefn, data) {\n  if (typeof noncefn === 'function') {\n    var getNonce = noncefn\n    noncefn = function (counter) {\n      var nonce = getNonce(message, privateKey, null, data, counter)\n      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n      return new BN(nonce)\n    }\n  }\n\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })\n  return {\n    signature: Buffer.concat([\n      result.r.toArrayLike(Buffer, 'be', 32),\n      result.s.toArrayLike(Buffer, 'be', 32)\n    ]),\n    recovery: result.recoveryParam\n  }\n}\n\nexports.verify = function (message, signature, publicKey) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false\n\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })\n}\n\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  try {\n    if (sigr.isZero() || sigs.isZero()) throw new Error()\n\n    var point = ec.recoverPubKey(message, sigObj, recovery)\n    return Buffer.from(point.encode(true, compressed))\n  } catch (err) {\n    throw new Error(messages.ECDSA_RECOVER_FAIL)\n  }\n}\n\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)\n  return createHash('sha256').update(shared).digest()\n}\n\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  var scalar = new BN(privateKey)\n  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)\n\n  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))\n}\n","'use strict'\nvar assert = require('./assert')\nvar der = require('./der')\nvar messages = require('./messages.json')\n\nfunction initCompressedValue (value, defaultValue) {\n  if (value === undefined) return defaultValue\n\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)\n  return value\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)\n    },\n\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)\n\n      return der.privateKeyExport(privateKey, publicKey, compressed)\n    },\n\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n\n      privateKey = der.privateKeyImport(privateKey)\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey\n\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)\n    },\n\n    privateKeyNegate: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyNegate(privateKey)\n    },\n\n    privateKeyModInverse: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyModInverse(privateKey)\n    },\n\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak)\n    },\n\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakMul(privateKey, tweak)\n    },\n\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCreate(privateKey, compressed)\n    },\n\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyConvert(publicKey, compressed)\n    },\n\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      return secp256k1.publicKeyVerify(publicKey)\n    },\n\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)\n    },\n\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)\n    },\n\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n      }\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCombine(publicKeys, compressed)\n    },\n\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      return secp256k1.signatureNormalize(signature)\n    },\n\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = secp256k1.signatureExport(signature)\n      return der.signatureExport(sigObj)\n    },\n\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImport(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImportLax(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      var data = null\n      var noncefn = null\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)\n          data = options.data\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)\n          noncefn = options.noncefn\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data)\n    },\n\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      return secp256k1.verify(message, signature, publicKey)\n    },\n\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.recover(message, signature, recovery, compressed)\n    },\n\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.ecdh(publicKey, privateKey)\n    },\n\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)\n    }\n  }\n}\n","'use strict';\n\nvar isHexPrefixed = require('is-hex-prefixed');\nvar stripHexPrefix = require('strip-hex-prefix');\n\n/**\n * Pads a `String` to have an even length\n * @param {String} value\n * @return {String} output\n */\nfunction padToEven(value) {\n  var a = value; // eslint-disable-line\n\n  if (typeof a !== 'string') {\n    throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');\n  }\n\n  if (a.length % 2) {\n    a = '0' + a;\n  }\n\n  return a;\n}\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nfunction intToHex(i) {\n  var hex = i.toString(16); // eslint-disable-line\n\n  return '0x' + hex;\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nfunction intToBuffer(i) {\n  var hex = intToHex(i);\n\n  return new Buffer(padToEven(hex.slice(2)), 'hex');\n}\n\n/**\n * Get the binary size of a string\n * @param {String} str\n * @return {Number}\n */\nfunction getBinarySize(str) {\n  if (typeof str !== 'string') {\n    throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \\'str\\' to be type String, got \\'' + typeof str + '\\'.');\n  }\n\n  return Buffer.byteLength(str, 'utf8');\n}\n\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param {array} superset\n * @param {array} subset\n *\n * @returns {boolean}\n */\nfunction arrayContainsArray(superset, subset, some) {\n  if (Array.isArray(superset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'superset\\' to be an array got type \\'' + typeof superset + '\\'');\n  }\n  if (Array.isArray(subset) !== true) {\n    throw new Error('[ethjs-util] method arrayContainsArray requires input \\'subset\\' to be an array got type \\'' + typeof subset + '\\'');\n  }\n\n  return subset[Boolean(some) && 'some' || 'every'](function (value) {\n    return superset.indexOf(value) >= 0;\n  });\n}\n\n/**\n * Should be called to get utf8 from it's hex representation\n *\n * @method toUtf8\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toUtf8(hex) {\n  var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');\n\n  return bufferValue.toString('utf8');\n}\n\n/**\n * Should be called to get ascii from it's hex representation\n *\n * @method toAscii\n * @param {String} string in hex\n * @returns {String} ascii string representation of hex value\n */\nfunction toAscii(hex) {\n  var str = ''; // eslint-disable-line\n  var i = 0,\n      l = hex.length; // eslint-disable-line\n\n  if (hex.substring(0, 2) === '0x') {\n    i = 2;\n  }\n\n  for (; i < l; i += 2) {\n    var code = parseInt(hex.substr(i, 2), 16);\n    str += String.fromCharCode(code);\n  }\n\n  return str;\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @method fromUtf8\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromUtf8(stringValue) {\n  var str = new Buffer(stringValue, 'utf8');\n\n  return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');\n}\n\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @method fromAscii\n * @param {String} string\n * @param {Number} optional padding\n * @returns {String} hex representation of input string\n */\nfunction fromAscii(stringValue) {\n  var hex = ''; // eslint-disable-line\n  for (var i = 0; i < stringValue.length; i++) {\n    // eslint-disable-line\n    var code = stringValue.charCodeAt(i);\n    var n = code.toString(16);\n    hex += n.length < 2 ? '0' + n : n;\n  }\n\n  return '0x' + hex;\n}\n\n/**\n * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]\n *\n * @method getKeys get specific key from inner object array of objects\n * @param {String} params\n * @param {String} key\n * @param {Boolean} allowEmpty\n * @returns {Array} output just a simple array of output keys\n */\nfunction getKeys(params, key, allowEmpty) {\n  if (!Array.isArray(params)) {\n    throw new Error('[ethjs-util] method getKeys expecting type Array as \\'params\\' input, got \\'' + typeof params + '\\'');\n  }\n  if (typeof key !== 'string') {\n    throw new Error('[ethjs-util] method getKeys expecting type String for input \\'key\\' got \\'' + typeof key + '\\'.');\n  }\n\n  var result = []; // eslint-disable-line\n\n  for (var i = 0; i < params.length; i++) {\n    // eslint-disable-line\n    var value = params[i][key]; // eslint-disable-line\n    if (allowEmpty && !value) {\n      value = '';\n    } else if (typeof value !== 'string') {\n      throw new Error('invalid abi');\n    }\n    result.push(value);\n  }\n\n  return result;\n}\n\n/**\n * Is the string a hex string.\n *\n * @method check if string is hex string of specific length\n * @param {String} value\n * @param {Number} length\n * @returns {Boolean} output the string is a hex string\n */\nfunction isHexString(value, length) {\n  if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n    return false;\n  }\n\n  if (length && value.length !== 2 + 2 * length) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = {\n  arrayContainsArray: arrayContainsArray,\n  intToBuffer: intToBuffer,\n  getBinarySize: getBinarySize,\n  isHexPrefixed: isHexPrefixed,\n  stripHexPrefix: stripHexPrefix,\n  padToEven: padToEven,\n  intToHex: intToHex,\n  fromAscii: fromAscii,\n  fromUtf8: fromUtf8,\n  toAscii: toAscii,\n  toUtf8: toUtf8,\n  getKeys: getKeys,\n  isHexString: isHexString\n};","'use strict'\nmodule.exports = require('./lib/api')(require('./lib/keccak'))\n","'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar createKeccakHash = require('keccak');\nvar secp256k1 = require('secp256k1');\nvar assert = require('assert');\nvar rlp = require('rlp');\nvar BN = require('bn.js');\nvar createHash = require('create-hash');\nvar Buffer = require('safe-buffer').Buffer;\nObject.assign(exports, require('ethjs-util'));\n\n/**\n * the max integer that this VM can handle (a ```BN```)\n * @var {BN} MAX_INTEGER\n */\nexports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);\n\n/**\n * 2^256 (a ```BN```)\n * @var {BN} TWO_POW256\n */\nexports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);\n\n/**\n * Keccak-256 hash of null (a ```String```)\n * @var {String} KECCAK256_NULL_S\n */\nexports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';\nexports.SHA3_NULL_S = exports.KECCAK256_NULL_S;\n\n/**\n * Keccak-256 hash of null (a ```Buffer```)\n * @var {Buffer} KECCAK256_NULL\n */\nexports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');\nexports.SHA3_NULL = exports.KECCAK256_NULL;\n\n/**\n * Keccak-256 of an RLP of an empty array (a ```String```)\n * @var {String} KECCAK256_RLP_ARRAY_S\n */\nexports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';\nexports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;\n\n/**\n * Keccak-256 of an RLP of an empty array (a ```Buffer```)\n * @var {Buffer} KECCAK256_RLP_ARRAY\n */\nexports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');\nexports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;\n\n/**\n * Keccak-256 hash of the RLP of null  (a ```String```)\n * @var {String} KECCAK256_RLP_S\n */\nexports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';\nexports.SHA3_RLP_S = exports.KECCAK256_RLP_S;\n\n/**\n * Keccak-256 hash of the RLP of null (a ```Buffer```)\n * @var {Buffer} KECCAK256_RLP\n */\nexports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');\nexports.SHA3_RLP = exports.KECCAK256_RLP;\n\n/**\n * [`BN`](https://github.com/indutny/bn.js)\n * @var {Function}\n */\nexports.BN = BN;\n\n/**\n * [`rlp`](https://github.com/ethereumjs/rlp)\n * @var {Function}\n */\nexports.rlp = rlp;\n\n/**\n * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)\n * @var {Object}\n */\nexports.secp256k1 = secp256k1;\n\n/**\n * Returns a buffer filled with 0s\n * @method zeros\n * @param {Number} bytes  the number of bytes the buffer should be\n * @return {Buffer}\n */\nexports.zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\n\n/**\n  * Returns a zero address\n  * @method zeroAddress\n  * @return {String}\n  */\nexports.zeroAddress = function () {\n  var addressLength = 20;\n  var zeroAddress = exports.zeros(addressLength);\n  return exports.bufferToHex(zeroAddress);\n};\n\n/**\n * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @method lsetLength\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @param {Boolean} [right=false] whether to start padding form the left or right\n * @return {Buffer|Array}\n */\nexports.setLengthLeft = exports.setLength = function (msg, length, right) {\n  var buf = exports.zeros(length);\n  msg = exports.toBuffer(msg);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n\n/**\n * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param {Buffer|Array} msg the value to pad\n * @param {Number} length the number of bytes the output should be\n * @return {Buffer|Array}\n */\nexports.setLengthRight = function (msg, length) {\n  return exports.setLength(msg, length, true);\n};\n\n/**\n * Trims leading zeros from a `Buffer` or an `Array`\n * @param {Buffer|Array|String} a\n * @return {Buffer|Array|String}\n */\nexports.unpad = exports.stripZeros = function (a) {\n  a = exports.stripHexPrefix(a);\n  var first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\n/**\n * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.\n * @param {*} v the value\n */\nexports.toBuffer = function (v) {\n  if (!Buffer.isBuffer(v)) {\n    if (Array.isArray(v)) {\n      v = Buffer.from(v);\n    } else if (typeof v === 'string') {\n      if (exports.isHexString(v)) {\n        v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');\n      } else {\n        v = Buffer.from(v);\n      }\n    } else if (typeof v === 'number') {\n      v = exports.intToBuffer(v);\n    } else if (v === null || v === undefined) {\n      v = Buffer.allocUnsafe(0);\n    } else if (BN.isBN(v)) {\n      v = v.toArrayLike(Buffer);\n    } else if (v.toArray) {\n      // converts a BN to a Buffer\n      v = Buffer.from(v.toArray());\n    } else {\n      throw new Error('invalid type');\n    }\n  }\n  return v;\n};\n\n/**\n * Converts a `Buffer` to a `Number`\n * @param {Buffer} buf\n * @return {Number}\n * @throws If the input number exceeds 53 bits.\n */\nexports.bufferToInt = function (buf) {\n  return new BN(exports.toBuffer(buf)).toNumber();\n};\n\n/**\n * Converts a `Buffer` into a hex `String`\n * @param {Buffer} buf\n * @return {String}\n */\nexports.bufferToHex = function (buf) {\n  buf = exports.toBuffer(buf);\n  return '0x' + buf.toString('hex');\n};\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.\n * @param {Buffer} num\n * @return {BN}\n */\nexports.fromSigned = function (num) {\n  return new BN(num).fromTwos(256);\n};\n\n/**\n * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param {BN} num\n * @return {Buffer}\n */\nexports.toUnsigned = function (num) {\n  return Buffer.from(num.toTwos(256).toArray());\n};\n\n/**\n * Creates Keccak hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the Keccak width\n * @return {Buffer}\n */\nexports.keccak = function (a, bits) {\n  a = exports.toBuffer(a);\n  if (!bits) bits = 256;\n\n  return createKeccakHash('keccak' + bits).update(a).digest();\n};\n\n/**\n * Creates Keccak-256 hash of the input, alias for keccak(a, 256)\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.keccak256 = function (a) {\n  return exports.keccak(a);\n};\n\n/**\n * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Number} [bits=256] the SHA-3 width\n * @return {Buffer}\n */\nexports.sha3 = exports.keccak;\n\n/**\n * Creates SHA256 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.sha256 = function (a) {\n  a = exports.toBuffer(a);\n  return createHash('sha256').update(a).digest();\n};\n\n/**\n * Creates RIPEMD160 hash of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @param {Boolean} padded whether it should be padded to 256 bits or not\n * @return {Buffer}\n */\nexports.ripemd160 = function (a, padded) {\n  a = exports.toBuffer(a);\n  var hash = createHash('rmd160').update(a).digest();\n  if (padded === true) {\n    return exports.setLength(hash, 32);\n  } else {\n    return hash;\n  }\n};\n\n/**\n * Creates SHA-3 hash of the RLP encoded version of the input\n * @param {Buffer|Array|String|Number} a the input data\n * @return {Buffer}\n */\nexports.rlphash = function (a) {\n  return exports.keccak(rlp.encode(a));\n};\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n * @param {Buffer} privateKey\n * @return {Boolean}\n */\nexports.isValidPrivate = function (privateKey) {\n  return secp256k1.privateKeyVerify(privateKey);\n};\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Boolean}\n */\nexports.isValidPublic = function (publicKey, sanitize) {\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return secp256k1.publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n\n  if (!sanitize) {\n    return false;\n  }\n\n  return secp256k1.publicKeyVerify(publicKey);\n};\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param {Boolean} [sanitize=false] Accept public keys in other formats\n * @return {Buffer}\n */\nexports.pubToAddress = exports.publicToAddress = function (pubKey, sanitize) {\n  pubKey = exports.toBuffer(pubKey);\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);\n  }\n  assert(pubKey.length === 64);\n  // Only take the lower 160bits of the hash\n  return exports.keccak(pubKey).slice(-20);\n};\n\n/**\n * Returns the ethereum public key of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nvar privateToPublic = exports.privateToPublic = function (privateKey) {\n  privateKey = exports.toBuffer(privateKey);\n  // skip the type flag and use the X, Y points\n  return secp256k1.publicKeyCreate(privateKey, false).slice(1);\n};\n\n/**\n * Converts a public key to the Ethereum format.\n * @param {Buffer} publicKey\n * @return {Buffer}\n */\nexports.importPublic = function (publicKey) {\n  publicKey = exports.toBuffer(publicKey);\n  if (publicKey.length !== 64) {\n    publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);\n  }\n  return publicKey;\n};\n\n/**\n * ECDSA sign\n * @param {Buffer} msgHash\n * @param {Buffer} privateKey\n * @return {Object}\n */\nexports.ecsign = function (msgHash, privateKey) {\n  var sig = secp256k1.sign(msgHash, privateKey);\n\n  var ret = {};\n  ret.r = sig.signature.slice(0, 32);\n  ret.s = sig.signature.slice(32, 64);\n  ret.v = sig.recovery + 27;\n  return ret;\n};\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n * @param message\n * @returns {Buffer} hash\n */\nexports.hashPersonalMessage = function (message) {\n  var prefix = exports.toBuffer('\\x19Ethereum Signed Message:\\n' + message.length.toString());\n  return exports.keccak(Buffer.concat([prefix, message]));\n};\n\n/**\n * ECDSA public key recovery from signature\n * @param {Buffer} msgHash\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {Buffer} publicKey\n */\nexports.ecrecover = function (msgHash, v, r, s) {\n  var signature = Buffer.concat([exports.setLength(r, 32), exports.setLength(s, 32)], 64);\n  var recovery = v - 27;\n  if (recovery !== 0 && recovery !== 1) {\n    throw new Error('Invalid signature v value');\n  }\n  var senderPubKey = secp256k1.recover(msgHash, signature, recovery);\n  return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);\n};\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method\n * @param {Number} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @return {String} sig\n */\nexports.toRpcSig = function (v, r, s) {\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (v !== 27 && v !== 28) {\n    throw new Error('Invalid recovery id');\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053\n  return exports.bufferToHex(Buffer.concat([exports.setLengthLeft(r, 32), exports.setLengthLeft(s, 32), exports.toBuffer(v - 27)]));\n};\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053\n * @param {String} sig\n * @return {Object}\n */\nexports.fromRpcSig = function (sig) {\n  sig = exports.toBuffer(sig);\n\n  // NOTE: with potential introduction of chainId this might need to be updated\n  if (sig.length !== 65) {\n    throw new Error('Invalid signature length');\n  }\n\n  var v = sig[64];\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v += 27;\n  }\n\n  return {\n    v: v,\n    r: sig.slice(0, 32),\n    s: sig.slice(32, 64)\n  };\n};\n\n/**\n * Returns the ethereum address of a given private key\n * @param {Buffer} privateKey A private key must be 256 bits wide\n * @return {Buffer}\n */\nexports.privateToAddress = function (privateKey) {\n  return exports.publicToAddress(privateToPublic(privateKey));\n};\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too\n * @param {String} address\n * @return {Boolean}\n */\nexports.isValidAddress = function (address) {\n  return (/^0x[0-9a-fA-F]{40}$/.test(address)\n  );\n};\n\n/**\n  * Checks if a given address is a zero address\n  * @method isZeroAddress\n  * @param {String} address\n  * @return {Boolean}\n  */\nexports.isZeroAddress = function (address) {\n  var zeroAddress = exports.zeroAddress();\n  return zeroAddress === exports.addHexPrefix(address);\n};\n\n/**\n * Returns a checksummed address\n * @param {String} address\n * @return {String}\n */\nexports.toChecksumAddress = function (address) {\n  address = exports.stripHexPrefix(address).toLowerCase();\n  var hash = exports.keccak(address).toString('hex');\n  var ret = '0x';\n\n  for (var i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n\n  return ret;\n};\n\n/**\n * Checks if the address is a valid checksummed address\n * @param {Buffer} address\n * @return {Boolean}\n */\nexports.isValidChecksumAddress = function (address) {\n  return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;\n};\n\n/**\n * Generates an address of a newly created contract\n * @param {Buffer} from the address which is creating this new address\n * @param {Buffer} nonce the nonce of the from account\n * @return {Buffer}\n */\nexports.generateAddress = function (from, nonce) {\n  from = exports.toBuffer(from);\n  nonce = new BN(nonce);\n\n  if (nonce.isZero()) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    nonce = null;\n  } else {\n    nonce = Buffer.from(nonce.toArray());\n  }\n\n  // Only take the lower 160bits of the hash\n  return exports.rlphash([from, nonce]).slice(-20);\n};\n\n/**\n * Returns true if the supplied address belongs to a precompiled account (Byzantium)\n * @param {Buffer|String} address\n * @return {Boolean}\n */\nexports.isPrecompiled = function (address) {\n  var a = exports.unpad(address);\n  return a.length === 1 && a[0] >= 1 && a[0] <= 8;\n};\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\"\n * @param {String} str\n * @return {String}\n */\nexports.addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n\n  return exports.isHexPrefixed(str) ? str : '0x' + str;\n};\n\n/**\n * Validate ECDSA signature\n * @method isValidSignature\n * @param {Buffer} v\n * @param {Buffer} r\n * @param {Buffer} s\n * @param {Boolean} [homestead=true]\n * @return {Boolean}\n */\n\nexports.isValidSignature = function (v, r, s, homestead) {\n  var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);\n  var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);\n\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n\n  if (v !== 27 && v !== 28) {\n    return false;\n  }\n\n  r = new BN(r);\n  s = new BN(s);\n\n  if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) {\n    return false;\n  }\n\n  if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n * Converts a `Buffer` or `Array` to JSON\n * @param {Buffer|Array} ba\n * @return {Array|String|null}\n */\nexports.baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return '0x' + ba.toString('hex');\n  } else if (ba instanceof Array) {\n    var array = [];\n    for (var i = 0; i < ba.length; i++) {\n      array.push(exports.baToJSON(ba[i]));\n    }\n    return array;\n  }\n};\n\n/**\n * Defines properties on a `Object`. It make the assumption that underlying data is binary.\n * @param {Object} self the `Object` to define properties on\n * @param {Array} fields an array fields to define. Fields can contain:\n * * `name` - the name of the properties\n * * `length` - the number of bytes the field can have\n * * `allowLess` - if the field can be less than the length\n * * `allowEmpty`\n * @param {*} data data to be validated against the definitions\n */\nexports.defineProperties = function (self, fields, data) {\n  self.raw = [];\n  self._fields = [];\n\n  // attach the `toJSON`\n  self.toJSON = function (label) {\n    if (label) {\n      var obj = {};\n      self._fields.forEach(function (field) {\n        obj[field] = '0x' + self[field].toString('hex');\n      });\n      return obj;\n    }\n    return exports.baToJSON(this.raw);\n  };\n\n  self.serialize = function serialize() {\n    return rlp.encode(self.raw);\n  };\n\n  fields.forEach(function (field, i) {\n    self._fields.push(field.name);\n    function getter() {\n      return self.raw[i];\n    }\n    function setter(v) {\n      v = exports.toBuffer(v);\n\n      if (v.toString('hex') === '00' && !field.allowZero) {\n        v = Buffer.allocUnsafe(0);\n      }\n\n      if (field.allowLess && field.length) {\n        v = exports.stripZeros(v);\n        assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');\n      } else if (!(field.allowZero && v.length === 0) && field.length) {\n        assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);\n      }\n\n      self.raw[i] = v;\n    }\n\n    Object.defineProperty(self, field.name, {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter\n    });\n\n    if (field.default) {\n      self[field.name] = field.default;\n    }\n\n    // attach alias\n    if (field.alias) {\n      Object.defineProperty(self, field.alias, {\n        enumerable: false,\n        configurable: true,\n        set: setter,\n        get: getter\n      });\n    }\n  });\n\n  // if the constuctor is passed data\n  if (data) {\n    if (typeof data === 'string') {\n      data = Buffer.from(exports.stripHexPrefix(data), 'hex');\n    }\n\n    if (Buffer.isBuffer(data)) {\n      data = rlp.decode(data);\n    }\n\n    if (Array.isArray(data)) {\n      if (data.length > self._fields.length) {\n        throw new Error('wrong number of fields in data');\n      }\n\n      // make sure all the items are buffers\n      data.forEach(function (d, i) {\n        self[self._fields[i]] = exports.toBuffer(d);\n      });\n    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {\n      var keys = Object.keys(data);\n      fields.forEach(function (field) {\n        if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];\n        if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];\n      });\n    } else {\n      throw new Error('invalid data');\n    }\n  }\n};","module.exports = require('./lib/index.js')\n","\"use strict\";\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.randomBytes = exports.promisifyCb = exports.existsIn = exports.isAsciiStr = exports.buildSignerPathBuf = exports.getP256KeyPairFromPub = exports.getP256KeyPair = exports.parseDER = exports.aes256_decrypt = exports.aes256_encrypt = exports.fixLen = exports.ensureHexBuffer = exports.splitFrames = exports.isValidAssetPath = exports.toPaddedDER = exports.checksum = exports.parseLattice1Response = void 0;\n// Static utility functions\nvar aes_js_1 = __importDefault(require(\"aes-js\"));\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar buffer_1 = require(\"buffer/\");\nvar crc_32_1 = __importDefault(require(\"crc-32\"));\nvar elliptic_1 = __importDefault(require(\"elliptic\"));\nvar constants_1 = require(\"./constants\");\nvar COINS = constants_1.BIP_CONSTANTS.COINS, PURPOSES = constants_1.BIP_CONSTANTS.PURPOSES;\nvar EC = elliptic_1.default.ec;\nvar ec = new EC('p256');\n//--------------------------------------------------\n// LATTICE UTILS\n//--------------------------------------------------\n// Parse a response from the Lattice1\nvar parseLattice1Response = function (r) {\n    var parsed = {\n        err: null,\n        data: null,\n    };\n    var b = buffer_1.Buffer.from(r, 'hex');\n    var off = 0;\n    // Get protocol version\n    var protoVer = b.readUInt8(off);\n    off++;\n    if (protoVer !== constants_1.VERSION_BYTE) {\n        parsed.err = 'Incorrect protocol version. Please update your SDK';\n        return parsed;\n    }\n    // Get the type of response\n    // Should always be 0x00\n    var msgType = b.readUInt8(off);\n    off++;\n    if (msgType !== 0x00) {\n        parsed.err = 'Incorrect response from Lattice1';\n        return parsed;\n    }\n    // Get the payload\n    b.readUInt32BE(off);\n    off += 4; // First 4 bytes is the id, but we don't need that anymore\n    var len = b.readUInt16BE(off);\n    off += 2;\n    var payload = b.slice(off, off + len);\n    off += len;\n    // Get response code\n    var responseCode = payload.readUInt8(0);\n    if (responseCode !== constants_1.responseCodes.RESP_SUCCESS) {\n        parsed.err = \"\".concat(constants_1.responseMsgs[responseCode] ? constants_1.responseMsgs[responseCode] : 'Unknown Error', \" (Lattice)\");\n        parsed.responseCode = responseCode;\n        return parsed;\n    }\n    else {\n        parsed.data = payload.slice(1, payload.length);\n    }\n    // Verify checksum\n    var cs = b.readUInt32BE(off);\n    var expectedCs = (0, exports.checksum)(b.slice(0, b.length - 4));\n    if (cs !== expectedCs) {\n        parsed.err = 'Invalid checksum from device response';\n        parsed.data = null;\n        return parsed;\n    }\n    return parsed;\n};\nexports.parseLattice1Response = parseLattice1Response;\nvar checksum = function (x) {\n    // crc32 returns a signed integer - need to cast it to unsigned\n    // Note that this uses the default 0xedb88320 polynomial\n    return crc_32_1.default.buf(x) >>> 0; // Need this to be a uint, hence the bit shift\n};\nexports.checksum = checksum;\n// Get a 74-byte padded DER-encoded signature buffer\n// `sig` must be the signature output from elliptic.js\nvar toPaddedDER = function (sig) {\n    // We use 74 as the maximum length of a DER signature. All sigs must\n    // be right-padded with zeros so that this can be a fixed size field\n    var b = buffer_1.Buffer.alloc(74);\n    var ds = buffer_1.Buffer.from(sig.toDER());\n    ds.copy(b);\n    return b;\n};\nexports.toPaddedDER = toPaddedDER;\n//--------------------------------------------------\n// TRANSACTION UTILS\n//--------------------------------------------------\nvar isValidAssetPath = function (path, fwConstants) {\n    var allowedPurposes = [\n        PURPOSES.ETH,\n        PURPOSES.BTC_LEGACY,\n        PURPOSES.BTC_WRAPPED_SEGWIT,\n        PURPOSES.BTC_SEGWIT,\n    ];\n    var allowedCoins = [COINS.ETH, COINS.BTC, COINS.BTC_TESTNET];\n    // These coin types were given to us by MyCrypto. They should be allowed, but we expect\n    // an Ethereum-type address with these coin types.\n    // These all use SLIP44: https://github.com/satoshilabs/slips/blob/master/slip-0044.md\n    var allowedMyCryptoCoins = [\n        60, 61, 966, 700, 9006, 9000, 1007, 553, 178, 137, 37310, 108, 40, 889,\n        1987, 820, 6060, 1620, 1313114, 76, 246529, 246785, 1001, 227, 916, 464,\n        2221, 344, 73799, 246,\n    ];\n    // Make sure firmware supports this Bitcoin path\n    var isBitcoin = path[1] === COINS.BTC || path[1] === COINS.BTC_TESTNET;\n    var isBitcoinNonWrappedSegwit = isBitcoin && path[0] !== PURPOSES.BTC_WRAPPED_SEGWIT;\n    if (isBitcoinNonWrappedSegwit && !fwConstants.allowBtcLegacyAndSegwitAddrs)\n        return false;\n    // Make sure this path is otherwise valid\n    return (allowedPurposes.indexOf(path[0]) >= 0 &&\n        (allowedCoins.indexOf(path[1]) >= 0 ||\n            allowedMyCryptoCoins.indexOf(path[1] - constants_1.HARDENED_OFFSET) > 0));\n};\nexports.isValidAssetPath = isValidAssetPath;\nvar splitFrames = function (data, frameSz) {\n    var frames = [];\n    var n = Math.ceil(data.length / frameSz);\n    var off = 0;\n    for (var i = 0; i < n; i++) {\n        frames.push(data.slice(off, off + frameSz));\n        off += frameSz;\n    }\n    return frames;\n};\nexports.splitFrames = splitFrames;\nfunction isBase10NumStr(x) {\n    var bn = new bignumber_js_1.default(x).toString().split('.').join('');\n    var s = new String(x);\n    // Note that the JS native `String()` loses precision for large numbers, but we only\n    // want to validate the base of the number so we don't care about far out precision.\n    return bn.slice(0, 8) === s.slice(0, 8);\n}\n// Ensure a param is represented by a buffer\nvar ensureHexBuffer = function (x, zeroIsNull) {\n    if (zeroIsNull === void 0) { zeroIsNull = true; }\n    try {\n        // For null values, return a 0-sized buffer. For most situations we assume\n        // 0 should be represented with a zero-length buffer (e.g. for RLP-building\n        // txs), but it can also be treated as a 1-byte buffer (`00`) if needed\n        if (x === null || (x === 0 && zeroIsNull === true))\n            return buffer_1.Buffer.alloc(0);\n        var isNumber = typeof x === 'number' || isBase10NumStr(x);\n        // Otherwise try to get this converted to a hex string\n        if (isNumber) {\n            // If this is a number or a base-10 number string, convert it to hex\n            x = \"\".concat(new bignumber_js_1.default(x).toString(16));\n        }\n        else if (typeof x === 'string' && x.slice(0, 2) === '0x') {\n            x = x.slice(2);\n        }\n        else {\n            x = x.toString('hex');\n        }\n        if (x.length % 2 > 0)\n            x = \"0\".concat(x);\n        if (x === '00' && !isNumber)\n            return buffer_1.Buffer.alloc(0);\n        return buffer_1.Buffer.from(x, 'hex');\n    }\n    catch (err) {\n        throw new Error(\"Cannot convert \".concat(x.toString(), \" to hex buffer (\").concat(err.toString(), \")\"));\n    }\n};\nexports.ensureHexBuffer = ensureHexBuffer;\nvar fixLen = function (msg, length) {\n    var buf = buffer_1.Buffer.alloc(length);\n    if (msg.length < length) {\n        msg.copy(buf, length - msg.length);\n        return buf;\n    }\n    return msg.slice(-length);\n};\nexports.fixLen = fixLen;\n//--------------------------------------------------\n// CRYPTO UTILS\n//--------------------------------------------------\nvar aes256_encrypt = function (data, key) {\n    var iv = buffer_1.Buffer.from(constants_1.AES_IV);\n    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);\n    var paddedData = data.length % 16 === 0 ? data : aes_js_1.default.padding.pkcs7.pad(data);\n    return buffer_1.Buffer.from(aesCbc.encrypt(paddedData));\n};\nexports.aes256_encrypt = aes256_encrypt;\nvar aes256_decrypt = function (data, key) {\n    var iv = buffer_1.Buffer.from(constants_1.AES_IV);\n    var aesCbc = new aes_js_1.default.ModeOfOperation.cbc(key, iv);\n    return buffer_1.Buffer.from(aesCbc.decrypt(data));\n};\nexports.aes256_decrypt = aes256_decrypt;\n// Decode a DER signature. Returns signature object {r, s } or null if there is an error\nvar parseDER = function (sigBuf) {\n    if (sigBuf[0] !== 0x30 || sigBuf[2] !== 0x02)\n        return null;\n    var off = 3;\n    var sig = { r: null, s: null };\n    var rLen = sigBuf[off];\n    off++;\n    sig.r = sigBuf.slice(off, off + rLen);\n    off += rLen;\n    if (sigBuf[off] !== 0x02)\n        return null;\n    off++;\n    var sLen = sigBuf[off];\n    off++;\n    sig.s = sigBuf.slice(off, off + sLen);\n    return sig;\n};\nexports.parseDER = parseDER;\nvar getP256KeyPair = function (priv) {\n    return ec.keyFromPrivate(priv, 'hex');\n};\nexports.getP256KeyPair = getP256KeyPair;\nvar getP256KeyPairFromPub = function (pub) {\n    return ec.keyFromPublic(pub, 'hex');\n};\nexports.getP256KeyPairFromPub = getP256KeyPairFromPub;\nvar buildSignerPathBuf = function (signerPath, varAddrPathSzAllowed) {\n    var buf = buffer_1.Buffer.alloc(24);\n    var off = 0;\n    if (varAddrPathSzAllowed && signerPath.length > 5)\n        throw new Error('Signer path must be <=5 indices.');\n    if (!varAddrPathSzAllowed && signerPath.length !== 5)\n        throw new Error('Your Lattice firmware only supports 5-index derivation paths. Please upgrade.');\n    buf.writeUInt32LE(signerPath.length, off);\n    off += 4;\n    for (var i = 0; i < 5; i++) {\n        if (i < signerPath.length)\n            buf.writeUInt32LE(signerPath[i], off);\n        else\n            buf.writeUInt32LE(0, off);\n        off += 4;\n    }\n    return buf;\n};\nexports.buildSignerPathBuf = buildSignerPathBuf;\n//--------------------------------------------------\n// OTHER UTILS\n//--------------------------------------------------\nvar isAsciiStr = function (str, allowFormatChars) {\n    if (allowFormatChars === void 0) { allowFormatChars = false; }\n    if (typeof str !== 'string') {\n        return false;\n    }\n    var extraChars = allowFormatChars ?\n        [\n            0x0020,\n            0x000a, // New line\n        ] : [];\n    for (var i = 0; i < str.length; i++) {\n        var c = str.charCodeAt(i);\n        if (extraChars.indexOf(c) < 0 && (c < 0x0020 || c > 0x007f)) {\n            return false;\n        }\n    }\n    return true;\n};\nexports.isAsciiStr = isAsciiStr;\n// Check if a value exists in an object. Only checks first level of keys.\nvar existsIn = function (val, obj) {\n    return Object.keys(obj).some(function (key) { return obj[key] === val; });\n};\nexports.existsIn = existsIn;\n/**\n * `promisifyCb` accepts `resolve` and `reject` from a `Promise` and an optional callback.\n * It returns that callback if it exists, otherwise it resolves or rejects as a `Promise`\n */\nvar promisifyCb = function (resolve, reject, cb) {\n    return function (err) {\n        var params = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            params[_i - 1] = arguments[_i];\n        }\n        if (cb && typeof cb === 'function')\n            return cb.apply(void 0, __spreadArray([err], params, false));\n        if (err && typeof err === 'string')\n            return reject(err);\n        return resolve.apply(void 0, params);\n    };\n};\nexports.promisifyCb = promisifyCb;\n// Create a buffer of size `n` and fill it with random data\nvar randomBytes = function (n) {\n    var buf = buffer_1.Buffer.alloc(n);\n    for (var i = 0; i < n; i++) {\n        buf[i] = Math.round(Math.random() * 255);\n    }\n    return buf;\n};\nexports.randomBytes = randomBytes;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.abiParsers = exports.unpackAbiDef = exports.getFuncSig = exports.buildAddAbiPayload = exports.ABI_DEF_SZ = exports.MAX_ABI_DEFS = void 0;\nvar buffer_1 = require(\"buffer/\");\nvar js_sha3_1 = require(\"js-sha3\");\nvar constants_1 = require(\"./constants\");\nvar NAME_MAX_SZ = 100;\nvar HEADER_SZ = 5 + NAME_MAX_SZ; // 4 byte sig + name + 1 byte param count\nvar CATEGORY_SZ = 32;\nvar PARAM_NAME_SZ = 20;\nvar PARAM_SZ = 26; // 20 byte name + 6 byte def\nvar MAX_PARAMS = 18;\nexports.MAX_ABI_DEFS = 2;\nexports.ABI_DEF_SZ = (HEADER_SZ + CATEGORY_SZ + (PARAM_SZ * MAX_PARAMS));\n// Build a request to add ABI data\nvar buildAddAbiPayload = function (defs) {\n    if (!defs || !Array.isArray(defs))\n        throw new Error('Missing definitions.');\n    if (defs.length > exports.MAX_ABI_DEFS)\n        throw new Error(\"You may only add \".concat(exports.MAX_ABI_DEFS, \" ABI definitions per request.\"));\n    var b = buffer_1.Buffer.alloc(1 + (exports.MAX_ABI_DEFS * exports.ABI_DEF_SZ));\n    var off = 0;\n    b.writeUInt8(defs.length, off);\n    off++;\n    defs.forEach(function (def) {\n        if (!def.sig || !def.name || !def.params)\n            throw new Error('name, sig, and params must be present for every ABI definition.');\n        // -- Header data --\n        var sig = buffer_1.Buffer.from(def.sig, 'hex');\n        if (sig.length !== 4)\n            throw new Error('Function signatures must always be four bytes.');\n        sig.copy(b, off);\n        off += sig.length;\n        var name = buffer_1.Buffer.from(def.name);\n        if (name.length > NAME_MAX_SZ - 1)\n            // The -1 accounts for the null terminator\n            throw new Error(\"Only function names shorter than \".concat(NAME_MAX_SZ - 1, \" characters are supported.\"));\n        buffer_1.Buffer.from(def.name).slice(0, NAME_MAX_SZ).copy(b, off);\n        off += NAME_MAX_SZ;\n        // Number of parameters\n        var numParams = Array.isArray(def.params) ? def.params.length : 0;\n        b.writeUInt8(numParams, off);\n        off++;\n        // -- (optional) Category name --\n        if (def.category && typeof def.category === 'string') {\n            var category = buffer_1.Buffer.from(def.category);\n            if (category.length > CATEGORY_SZ - 1)\n                // -1 accounts for null terminator\n                throw new Error(\"Category name must be shorter than \".concat(CATEGORY_SZ - 1, \". Got \").concat(category.length));\n            category.copy(b, off);\n        }\n        off += CATEGORY_SZ;\n        // -- Param data --\n        if (numParams > MAX_PARAMS)\n            throw new Error('Currently only ABI defintions with <=10 parameters are supported.');\n        if (numParams > 0) {\n            // First copy param names\n            def.params.forEach(function (param) {\n                if (param.name === undefined ||\n                    param.latticeTypeIdx === undefined ||\n                    param.isArray === undefined ||\n                    param.arraySz === undefined)\n                    throw new Error('name, latticeTypeIdx, isArray, and arraySz must be defined for all ABI params.');\n                buffer_1.Buffer.from(param.name).slice(0, PARAM_NAME_SZ).copy(b, off);\n                off += PARAM_NAME_SZ;\n            });\n            // Bump offset to account for blank param slots\n            off += PARAM_NAME_SZ * (MAX_PARAMS - numParams);\n            // Next copy the definitions\n            def.params.forEach(function (param) {\n                b.writeUInt8(param.latticeTypeIdx, off);\n                off++;\n                b.writeUInt8(param.isArray ? 1 : 0, off);\n                off++;\n                b.writeUInt32LE(param.arraySz, off);\n                off += 4;\n            });\n            // Bump offset again\n            off += 6 * (MAX_PARAMS - numParams);\n        }\n        else {\n            // If there are no params, just bump the offset\n            off += PARAM_SZ * MAX_PARAMS;\n        }\n    });\n    return b;\n};\nexports.buildAddAbiPayload = buildAddAbiPayload;\n// Get the 4-byte function identifier based on the canonical name\nvar getFuncSig = function (f) {\n    // Canonical name is:\n    // funcName(paramType0, ..., paramTypeN)\n    var canonicalName = \"\".concat(f.name, \"(\");\n    f.inputs.forEach(function (input) {\n        if (input.type.indexOf('tuple') > -1) {\n            var arrSuffix = input.type.slice(input.type.indexOf('tuple') + 5);\n            canonicalName += '(';\n            input.components.forEach(function (c, i) {\n                canonicalName += \"\".concat(c.type).concat(i === input.components.length - 1 ? '' : ',');\n            });\n            canonicalName += \")\".concat(arrSuffix, \",\");\n        }\n        else {\n            canonicalName += \"\".concat(input.type, \",\");\n        }\n    });\n    if (f.inputs.length > 0)\n        canonicalName = canonicalName.slice(0, canonicalName.length - 1);\n    canonicalName += ')';\n    return (0, js_sha3_1.keccak256)(canonicalName).slice(0, 8);\n};\nexports.getFuncSig = getFuncSig;\nvar unpackAbiDef = function (_def) {\n    var off = 0;\n    var def = {\n        header: {\n            sig: '',\n            name: '',\n            numParam: 0,\n        },\n        category: '',\n        params: []\n    };\n    def.header.sig = '0x' + _def.slice(off, off + 4).toString('hex');\n    off += 4;\n    def.header.name = _def.slice(off, off + NAME_MAX_SZ).toString().split('\\x00')[0];\n    off += NAME_MAX_SZ;\n    def.header.numParam = _def.readUInt8(off);\n    off += 1;\n    def.category = _def.slice(off, off + CATEGORY_SZ).toString().split('\\x00')[0];\n    off += CATEGORY_SZ;\n    // Get param names\n    for (var i = 0; i < MAX_PARAMS; i++) {\n        if (i < def.header.numParam) {\n            var param = {\n                name: '',\n                type: 0,\n                typeName: '',\n                isArray: false,\n                arraySz: 0,\n            };\n            param.name = _def.slice(off, off + PARAM_NAME_SZ).toString().split('\\x00')[0];\n            def.params.push(param);\n        }\n        off += PARAM_NAME_SZ;\n    }\n    function reverseFwTypeMap(typeIdx) {\n        var typeName = null;\n        Object.keys(constants_1.ETH_ABI_LATTICE_FW_TYPE_MAP).forEach(function (key) {\n            if (constants_1.ETH_ABI_LATTICE_FW_TYPE_MAP[key] === typeIdx) {\n                typeName = key;\n            }\n        });\n        return typeName;\n    }\n    // Get param info\n    for (var i = 0; i < MAX_PARAMS; i++) {\n        if (i < def.header.numParam) {\n            def.params[i].type = _def.readUInt8(off);\n            off += 1;\n            def.params[i].typeName = reverseFwTypeMap(def.params[i].type);\n            def.params[i].isArray = _def.readUInt8(off);\n            off += 1;\n            def.params[i].arraySz = _def.readUInt32LE(off);\n            off += 4;\n        }\n    }\n    return def;\n};\nexports.unpackAbiDef = unpackAbiDef;\n//--------------------------------------\n// PARSERS\n//--------------------------------------\nfunction parseEtherscanAbiDefs(_defs, skipErrors) {\n    if (skipErrors === void 0) { skipErrors = false; }\n    // `_defs` are `result` of the parsed response\n    var defs = [];\n    _defs.forEach(function (d) {\n        if (d.name &&\n            d.inputs &&\n            d.type === 'function' &&\n            d.stateMutability !== 'view' &&\n            d.constant !== true) {\n            try {\n                var sig = (0, exports.getFuncSig)(d);\n                var params = parseEtherscanAbiInputs(d.inputs);\n                defs.push({\n                    name: d.name,\n                    sig: sig,\n                    params: params,\n                });\n            }\n            catch (err) {\n                if (skipErrors === true)\n                    console.error('Failed to load def:', d.name, err.toString());\n                else\n                    throw new Error(err);\n            }\n        }\n    });\n    return defs;\n}\nexports.abiParsers = {\n    etherscan: parseEtherscanAbiDefs,\n};\n//--------------------------------------\n// HELPERS\n//--------------------------------------\n// Parse the ABI param data into structs Lattice firmware will recognize.\nfunction parseEtherscanAbiInputs(inputs, data, isNestedTuple) {\n    if (data === void 0) { data = []; }\n    if (isNestedTuple === void 0) { isNestedTuple = false; }\n    var tupleParams = [];\n    inputs.forEach(function (input) {\n        var typeName = input.type;\n        var d = { isArray: false, arraySz: 0, name: input.name };\n        var openBracketIdx = typeName.indexOf('[');\n        var closeBracketIdx = typeName.indexOf(']');\n        var isMultiDim = typeName.split('[').length > 2;\n        if (isMultiDim) {\n            throw new Error('Skipping function with unsupported multidimensional array type');\n        }\n        else {\n            if (openBracketIdx > -1 && closeBracketIdx > -1) {\n                if (openBracketIdx >= closeBracketIdx) {\n                    // not a valid param -- skip it\n                }\n                else if (openBracketIdx + 1 === closeBracketIdx) {\n                    d.isArray = true;\n                }\n                else {\n                    // Parse the array size if applicable\n                    var number = parseInt(typeName.slice(openBracketIdx + 1, closeBracketIdx));\n                    if (isNaN(number)) {\n                        return d;\n                    }\n                    d.isArray = true;\n                    d.arraySz = number;\n                }\n            }\n            var singularTypeName = openBracketIdx > -1 ? typeName.slice(0, openBracketIdx) : typeName;\n            if (singularTypeName === 'tuple') {\n                if (isNestedTuple === true)\n                    throw new Error('Nested tuples are not supported');\n                singularTypeName = \"tuple\".concat(input.components.length);\n                tupleParams = parseEtherscanAbiInputs(input.components, tupleParams, true);\n            }\n            d.latticeTypeIdx = getTypeIdxLatticeFw(singularTypeName);\n            if (!d.latticeTypeIdx)\n                throw new Error(\"Unsupported type: \".concat(typeName));\n            data.push(d);\n        }\n    });\n    var params = data.concat(tupleParams);\n    if (params.length > 18)\n        throw new Error('Function has too many parameters for Lattice firmware (18 max)');\n    return data.concat(tupleParams);\n}\n// Enum values from inside Lattice firmware\nfunction getTypeIdxLatticeFw(type) {\n    return constants_1.ETH_ABI_LATTICE_FW_TYPE_MAP[type];\n}\nexports.default = {\n    MAX_ABI_DEFS: exports.MAX_ABI_DEFS,\n    buildAddAbiPayload: exports.buildAddAbiPayload,\n    getFuncSig: exports.getFuncSig,\n    abiParsers: exports.abiParsers,\n};\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nvar K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    var arr = new Uint8Array(1)\n    var proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  var buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  var valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  var b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(\n      value[Symbol.toPrimitive]('string'), encodingOrOffset, length\n    )\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  var length = byteLength(string, encoding) | 0\n  var buf = createBuffer(length)\n\n  var actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  var buf = createBuffer(length)\n  for (var i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    var copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  var buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    var buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        Buffer.from(buf).copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  var len = string.length\n  var mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  var strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (var i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    var limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    var len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nvar hexSliceLookupTable = (function () {\n  var alphabet = '0123456789abcdef'\n  var table = new Array(256)\n  for (var i = 0; i < 16; ++i) {\n    var i16 = i * 16\n    for (var j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n","/**\n * Root reference for iframes.\n */\n\nvar root;\nif (typeof window !== 'undefined') { // Browser window\n  root = window;\n} else if (typeof self !== 'undefined') { // Web Worker\n  root = self;\n} else { // Other environments\n  console.warn(\"Using browser-only version of superagent in non-browser environment\");\n  root = this;\n}\n\nvar Emitter = require('component-emitter');\nvar RequestBase = require('./request-base');\nvar isObject = require('./is-object');\nvar ResponseBase = require('./response-base');\nvar Agent = require('./agent-base');\n\n/**\n * Noop.\n */\n\nfunction noop(){};\n\n/**\n * Expose `request`.\n */\n\nvar request = exports = module.exports = function(method, url) {\n  // callback\n  if ('function' == typeof url) {\n    return new exports.Request('GET', method).end(url);\n  }\n\n  // url first\n  if (1 == arguments.length) {\n    return new exports.Request('GET', method);\n  }\n\n  return new exports.Request(method, url);\n}\n\nexports.Request = Request;\n\n/**\n * Determine XHR.\n */\n\nrequest.getXHR = function () {\n  if (root.XMLHttpRequest\n      && (!root.location || 'file:' != root.location.protocol\n          || !root.ActiveXObject)) {\n    return new XMLHttpRequest;\n  } else {\n    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}\n    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}\n  }\n  throw Error(\"Browser-only version of superagent could not find XHR\");\n};\n\n/**\n * Removes leading and trailing whitespace, added to support IE.\n *\n * @param {String} s\n * @return {String}\n * @api private\n */\n\nvar trim = ''.trim\n  ? function(s) { return s.trim(); }\n  : function(s) { return s.replace(/(^\\s*|\\s*$)/g, ''); };\n\n/**\n * Serialize the given `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nfunction serialize(obj) {\n  if (!isObject(obj)) return obj;\n  var pairs = [];\n  for (var key in obj) {\n    pushEncodedKeyValuePair(pairs, key, obj[key]);\n  }\n  return pairs.join('&');\n}\n\n/**\n * Helps 'serialize' with serializing arrays.\n * Mutates the pairs array.\n *\n * @param {Array} pairs\n * @param {String} key\n * @param {Mixed} val\n */\n\nfunction pushEncodedKeyValuePair(pairs, key, val) {\n  if (val != null) {\n    if (Array.isArray(val)) {\n      val.forEach(function(v) {\n        pushEncodedKeyValuePair(pairs, key, v);\n      });\n    } else if (isObject(val)) {\n      for(var subkey in val) {\n        pushEncodedKeyValuePair(pairs, key + '[' + subkey + ']', val[subkey]);\n      }\n    } else {\n      pairs.push(encodeURIComponent(key)\n        + '=' + encodeURIComponent(val));\n    }\n  } else if (val === null) {\n    pairs.push(encodeURIComponent(key));\n  }\n}\n\n/**\n * Expose serialization method.\n */\n\nrequest.serializeObject = serialize;\n\n/**\n  * Parse the given x-www-form-urlencoded `str`.\n  *\n  * @param {String} str\n  * @return {Object}\n  * @api private\n  */\n\nfunction parseString(str) {\n  var obj = {};\n  var pairs = str.split('&');\n  var pair;\n  var pos;\n\n  for (var i = 0, len = pairs.length; i < len; ++i) {\n    pair = pairs[i];\n    pos = pair.indexOf('=');\n    if (pos == -1) {\n      obj[decodeURIComponent(pair)] = '';\n    } else {\n      obj[decodeURIComponent(pair.slice(0, pos))] =\n        decodeURIComponent(pair.slice(pos + 1));\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Expose parser.\n */\n\nrequest.parseString = parseString;\n\n/**\n * Default MIME type map.\n *\n *     superagent.types.xml = 'application/xml';\n *\n */\n\nrequest.types = {\n  html: 'text/html',\n  json: 'application/json',\n  xml: 'text/xml',\n  urlencoded: 'application/x-www-form-urlencoded',\n  'form': 'application/x-www-form-urlencoded',\n  'form-data': 'application/x-www-form-urlencoded'\n};\n\n/**\n * Default serialization map.\n *\n *     superagent.serialize['application/xml'] = function(obj){\n *       return 'generated xml here';\n *     };\n *\n */\n\nrequest.serialize = {\n  'application/x-www-form-urlencoded': serialize,\n  'application/json': JSON.stringify\n};\n\n/**\n  * Default parsers.\n  *\n  *     superagent.parse['application/xml'] = function(str){\n  *       return { object parsed from str };\n  *     };\n  *\n  */\n\nrequest.parse = {\n  'application/x-www-form-urlencoded': parseString,\n  'application/json': JSON.parse\n};\n\n/**\n * Parse the given header `str` into\n * an object containing the mapped fields.\n *\n * @param {String} str\n * @return {Object}\n * @api private\n */\n\nfunction parseHeader(str) {\n  var lines = str.split(/\\r?\\n/);\n  var fields = {};\n  var index;\n  var line;\n  var field;\n  var val;\n\n  for (var i = 0, len = lines.length; i < len; ++i) {\n    line = lines[i];\n    index = line.indexOf(':');\n    if (index === -1) { // could be empty line, just skip it\n      continue;\n    }\n    field = line.slice(0, index).toLowerCase();\n    val = trim(line.slice(index + 1));\n    fields[field] = val;\n  }\n\n  return fields;\n}\n\n/**\n * Check if `mime` is json or has +json structured syntax suffix.\n *\n * @param {String} mime\n * @return {Boolean}\n * @api private\n */\n\nfunction isJSON(mime) {\n  // should match /json or +json\n  // but not /json-seq\n  return /[\\/+]json($|[^-\\w])/.test(mime);\n}\n\n/**\n * Initialize a new `Response` with the given `xhr`.\n *\n *  - set flags (.ok, .error, etc)\n *  - parse header\n *\n * Examples:\n *\n *  Aliasing `superagent` as `request` is nice:\n *\n *      request = superagent;\n *\n *  We can use the promise-like API, or pass callbacks:\n *\n *      request.get('/').end(function(res){});\n *      request.get('/', function(res){});\n *\n *  Sending data can be chained:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' })\n *        .end(function(res){});\n *\n *  Or passed to `.send()`:\n *\n *      request\n *        .post('/user')\n *        .send({ name: 'tj' }, function(res){});\n *\n *  Or passed to `.post()`:\n *\n *      request\n *        .post('/user', { name: 'tj' })\n *        .end(function(res){});\n *\n * Or further reduced to a single call for simple cases:\n *\n *      request\n *        .post('/user', { name: 'tj' }, function(res){});\n *\n * @param {XMLHTTPRequest} xhr\n * @param {Object} options\n * @api private\n */\n\nfunction Response(req) {\n  this.req = req;\n  this.xhr = this.req.xhr;\n  // responseText is accessible only if responseType is '' or 'text' and on older browsers\n  this.text = ((this.req.method !='HEAD' && (this.xhr.responseType === '' || this.xhr.responseType === 'text')) || typeof this.xhr.responseType === 'undefined')\n     ? this.xhr.responseText\n     : null;\n  this.statusText = this.req.xhr.statusText;\n  var status = this.xhr.status;\n  // handle IE9 bug: http://stackoverflow.com/questions/10046972/msie-returns-status-code-of-1223-for-ajax-request\n  if (status === 1223) {\n    status = 204;\n  }\n  this._setStatusProperties(status);\n  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());\n  // getAllResponseHeaders sometimes falsely returns \"\" for CORS requests, but\n  // getResponseHeader still works. so we get content-type even if getting\n  // other headers fails.\n  this.header['content-type'] = this.xhr.getResponseHeader('content-type');\n  this._setHeaderProperties(this.header);\n\n  if (null === this.text && req._responseType) {\n    this.body = this.xhr.response;\n  } else {\n    this.body = this.req.method != 'HEAD'\n      ? this._parseBody(this.text ? this.text : this.xhr.response)\n      : null;\n  }\n}\n\nResponseBase(Response.prototype);\n\n/**\n * Parse the given body `str`.\n *\n * Used for auto-parsing of bodies. Parsers\n * are defined on the `superagent.parse` object.\n *\n * @param {String} str\n * @return {Mixed}\n * @api private\n */\n\nResponse.prototype._parseBody = function(str) {\n  var parse = request.parse[this.type];\n  if (this.req._parser) {\n    return this.req._parser(this, str);\n  }\n  if (!parse && isJSON(this.type)) {\n    parse = request.parse['application/json'];\n  }\n  return parse && str && (str.length || str instanceof Object)\n    ? parse(str)\n    : null;\n};\n\n/**\n * Return an `Error` representative of this response.\n *\n * @return {Error}\n * @api public\n */\n\nResponse.prototype.toError = function(){\n  var req = this.req;\n  var method = req.method;\n  var url = req.url;\n\n  var msg = 'cannot ' + method + ' ' + url + ' (' + this.status + ')';\n  var err = new Error(msg);\n  err.status = this.status;\n  err.method = method;\n  err.url = url;\n\n  return err;\n};\n\n/**\n * Expose `Response`.\n */\n\nrequest.Response = Response;\n\n/**\n * Initialize a new `Request` with the given `method` and `url`.\n *\n * @param {String} method\n * @param {String} url\n * @api public\n */\n\nfunction Request(method, url) {\n  var self = this;\n  this._query = this._query || [];\n  this.method = method;\n  this.url = url;\n  this.header = {}; // preserves header name case\n  this._header = {}; // coerces header names to lowercase\n  this.on('end', function(){\n    var err = null;\n    var res = null;\n\n    try {\n      res = new Response(self);\n    } catch(e) {\n      err = new Error('Parser is unable to parse the response');\n      err.parse = true;\n      err.original = e;\n      // issue #675: return the raw response if the response parsing fails\n      if (self.xhr) {\n        // ie9 doesn't have 'response' property\n        err.rawResponse = typeof self.xhr.responseType == 'undefined' ? self.xhr.responseText : self.xhr.response;\n        // issue #876: return the http status code if the response parsing fails\n        err.status = self.xhr.status ? self.xhr.status : null;\n        err.statusCode = err.status; // backwards-compat only\n      } else {\n        err.rawResponse = null;\n        err.status = null;\n      }\n\n      return self.callback(err);\n    }\n\n    self.emit('response', res);\n\n    var new_err;\n    try {\n      if (!self._isResponseOK(res)) {\n        new_err = new Error(res.statusText || 'Unsuccessful HTTP response');\n      }\n    } catch(custom_err) {\n      new_err = custom_err; // ok() callback can throw\n    }\n\n    // #1000 don't catch errors from the callback to avoid double calling it\n    if (new_err) {\n      new_err.original = err;\n      new_err.response = res;\n      new_err.status = res.status;\n      self.callback(new_err, res);\n    } else {\n      self.callback(null, res);\n    }\n  });\n}\n\n/**\n * Mixin `Emitter` and `RequestBase`.\n */\n\nEmitter(Request.prototype);\nRequestBase(Request.prototype);\n\n/**\n * Set Content-Type to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.xml = 'application/xml';\n *\n *      request.post('/')\n *        .type('xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n *      request.post('/')\n *        .type('application/xml')\n *        .send(xmlstring)\n *        .end(callback);\n *\n * @param {String} type\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.type = function(type){\n  this.set('Content-Type', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Accept to `type`, mapping values from `request.types`.\n *\n * Examples:\n *\n *      superagent.types.json = 'application/json';\n *\n *      request.get('/agent')\n *        .accept('json')\n *        .end(callback);\n *\n *      request.get('/agent')\n *        .accept('application/json')\n *        .end(callback);\n *\n * @param {String} accept\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.accept = function(type){\n  this.set('Accept', request.types[type] || type);\n  return this;\n};\n\n/**\n * Set Authorization field value with `user` and `pass`.\n *\n * @param {String} user\n * @param {String} [pass] optional in case of using 'bearer' as type\n * @param {Object} options with 'type' property 'auto', 'basic' or 'bearer' (default 'basic')\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.auth = function(user, pass, options){\n  if (1 === arguments.length) pass = '';\n  if (typeof pass === 'object' && pass !== null) { // pass is optional and can be replaced with options\n    options = pass;\n    pass = '';\n  }\n  if (!options) {\n    options = {\n      type: 'function' === typeof btoa ? 'basic' : 'auto',\n    };\n  }\n\n  var encoder = function(string) {\n    if ('function' === typeof btoa) {\n      return btoa(string);\n    }\n    throw new Error('Cannot use basic auth, btoa is not a function');\n  };\n\n  return this._auth(user, pass, options, encoder);\n};\n\n/**\n * Add query-string `val`.\n *\n * Examples:\n *\n *   request.get('/shoes')\n *     .query('size=10')\n *     .query({ color: 'blue' })\n *\n * @param {Object|String} val\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.query = function(val){\n  if ('string' != typeof val) val = serialize(val);\n  if (val) this._query.push(val);\n  return this;\n};\n\n/**\n * Queue the given `file` as an attachment to the specified `field`,\n * with optional `options` (or filename).\n *\n * ``` js\n * request.post('/upload')\n *   .attach('content', new Blob(['<a id=\"a\"><b id=\"b\">hey!</b></a>'], { type: \"text/html\"}))\n *   .end(callback);\n * ```\n *\n * @param {String} field\n * @param {Blob|File} file\n * @param {String|Object} options\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.attach = function(field, file, options){\n  if (file) {\n    if (this._data) {\n      throw Error(\"superagent can't mix .send() and .attach()\");\n    }\n\n    this._getFormData().append(field, file, options || file.name);\n  }\n  return this;\n};\n\nRequest.prototype._getFormData = function(){\n  if (!this._formData) {\n    this._formData = new root.FormData();\n  }\n  return this._formData;\n};\n\n/**\n * Invoke the callback with `err` and `res`\n * and handle arity check.\n *\n * @param {Error} err\n * @param {Response} res\n * @api private\n */\n\nRequest.prototype.callback = function(err, res){\n  if (this._shouldRetry(err, res)) {\n    return this._retry();\n  }\n\n  var fn = this._callback;\n  this.clearTimeout();\n\n  if (err) {\n    if (this._maxRetries) err.retries = this._retries - 1;\n    this.emit('error', err);\n  }\n\n  fn(err, res);\n};\n\n/**\n * Invoke callback with x-domain error.\n *\n * @api private\n */\n\nRequest.prototype.crossDomainError = function(){\n  var err = new Error('Request has been terminated\\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.');\n  err.crossDomain = true;\n\n  err.status = this.status;\n  err.method = this.method;\n  err.url = this.url;\n\n  this.callback(err);\n};\n\n// This only warns, because the request is still likely to work\nRequest.prototype.buffer = Request.prototype.ca = Request.prototype.agent = function(){\n  console.warn(\"This is not supported in browser version of superagent\");\n  return this;\n};\n\n// This throws, because it can't send/receive data as expected\nRequest.prototype.pipe = Request.prototype.write = function(){\n  throw Error(\"Streaming is not supported in browser version of superagent\");\n};\n\n/**\n * Check if `obj` is a host object,\n * we don't want to serialize these :)\n *\n * @param {Object} obj\n * @return {Boolean}\n * @api private\n */\nRequest.prototype._isHost = function _isHost(obj) {\n  // Native objects stringify to [object File], [object Blob], [object FormData], etc.\n  return obj && 'object' === typeof obj && !Array.isArray(obj) && Object.prototype.toString.call(obj) !== '[object Object]';\n}\n\n/**\n * Initiate request, invoking callback `fn(res)`\n * with an instanceof `Response`.\n *\n * @param {Function} fn\n * @return {Request} for chaining\n * @api public\n */\n\nRequest.prototype.end = function(fn){\n  if (this._endCalled) {\n    console.warn(\"Warning: .end() was called twice. This is not supported in superagent\");\n  }\n  this._endCalled = true;\n\n  // store callback\n  this._callback = fn || noop;\n\n  // querystring\n  this._finalizeQueryString();\n\n  return this._end();\n};\n\nRequest.prototype._end = function() {\n  var self = this;\n  var xhr = (this.xhr = request.getXHR());\n  var data = this._formData || this._data;\n\n  this._setTimeouts();\n\n  // state change\n  xhr.onreadystatechange = function(){\n    var readyState = xhr.readyState;\n    if (readyState >= 2 && self._responseTimeoutTimer) {\n      clearTimeout(self._responseTimeoutTimer);\n    }\n    if (4 != readyState) {\n      return;\n    }\n\n    // In IE9, reads to any property (e.g. status) off of an aborted XHR will\n    // result in the error \"Could not complete the operation due to error c00c023f\"\n    var status;\n    try { status = xhr.status } catch(e) { status = 0; }\n\n    if (!status) {\n      if (self.timedout || self._aborted) return;\n      return self.crossDomainError();\n    }\n    self.emit('end');\n  };\n\n  // progress\n  var handleProgress = function(direction, e) {\n    if (e.total > 0) {\n      e.percent = e.loaded / e.total * 100;\n    }\n    e.direction = direction;\n    self.emit('progress', e);\n  };\n  if (this.hasListeners('progress')) {\n    try {\n      xhr.onprogress = handleProgress.bind(null, 'download');\n      if (xhr.upload) {\n        xhr.upload.onprogress = handleProgress.bind(null, 'upload');\n      }\n    } catch(e) {\n      // Accessing xhr.upload fails in IE from a web worker, so just pretend it doesn't exist.\n      // Reported here:\n      // https://connect.microsoft.com/IE/feedback/details/837245/xmlhttprequest-upload-throws-invalid-argument-when-used-from-web-worker-context\n    }\n  }\n\n  // initiate request\n  try {\n    if (this.username && this.password) {\n      xhr.open(this.method, this.url, true, this.username, this.password);\n    } else {\n      xhr.open(this.method, this.url, true);\n    }\n  } catch (err) {\n    // see #1149\n    return this.callback(err);\n  }\n\n  // CORS\n  if (this._withCredentials) xhr.withCredentials = true;\n\n  // body\n  if (!this._formData && 'GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !this._isHost(data)) {\n    // serialize stuff\n    var contentType = this._header['content-type'];\n    var serialize = this._serializer || request.serialize[contentType ? contentType.split(';')[0] : ''];\n    if (!serialize && isJSON(contentType)) {\n      serialize = request.serialize['application/json'];\n    }\n    if (serialize) data = serialize(data);\n  }\n\n  // set header fields\n  for (var field in this.header) {\n    if (null == this.header[field]) continue;\n\n    if (this.header.hasOwnProperty(field))\n      xhr.setRequestHeader(field, this.header[field]);\n  }\n\n  if (this._responseType) {\n    xhr.responseType = this._responseType;\n  }\n\n  // send stuff\n  this.emit('request', this);\n\n  // IE11 xhr.send(undefined) sends 'undefined' string as POST payload (instead of nothing)\n  // We need null here if data is undefined\n  xhr.send(typeof data !== 'undefined' ? data : null);\n  return this;\n};\n\nrequest.agent = function() {\n  return new Agent();\n};\n\n[\"GET\", \"POST\", \"OPTIONS\", \"PATCH\", \"PUT\", \"DELETE\"].forEach(function(method) {\n  Agent.prototype[method.toLowerCase()] = function(url, fn) {\n    var req = new request.Request(method, url);\n    this._setDefaults(req);\n    if (fn) {\n      req.end(fn);\n    }\n    return req;\n  };\n});\n\nAgent.prototype.del = Agent.prototype['delete'];\n\n/**\n * GET `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.get = function(url, data, fn) {\n  var req = request('GET', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * HEAD `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.head = function(url, data, fn) {\n  var req = request('HEAD', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.query(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * OPTIONS query to `url` with optional callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.options = function(url, data, fn) {\n  var req = request('OPTIONS', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * DELETE `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nfunction del(url, data, fn) {\n  var req = request('DELETE', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n}\n\nrequest['del'] = del;\nrequest['delete'] = del;\n\n/**\n * PATCH `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.patch = function(url, data, fn) {\n  var req = request('PATCH', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * POST `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed} [data]\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.post = function(url, data, fn) {\n  var req = request('POST', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n\n/**\n * PUT `url` with optional `data` and callback `fn(res)`.\n *\n * @param {String} url\n * @param {Mixed|Function} [data] or fn\n * @param {Function} [fn]\n * @return {Request}\n * @api public\n */\n\nrequest.put = function(url, data, fn) {\n  var req = request('PUT', url);\n  if ('function' == typeof data) (fn = data), (data = null);\n  if (data) req.send(data);\n  if (fn) req.end(fn);\n  return req;\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEncodedPayload = exports.parseGenericSigningResponse = exports.buildGenericSigningMsgRequest = void 0;\n/**\nGeneric signing module. Any payload can be sent to the Lattice and\nwill be displayed in full (note that \\n and \\t characters will be\ndisplayed as line breaks and tabs on the screen).\n\nThis payload should be coupled with:\n* Signer's BIP44 path\n* Curve on which to derive the signing key\n* Hash function to use on the message\n*/\nvar buffer_1 = require(\"buffer/\");\nvar js_sha3_1 = require(\"js-sha3\");\nvar sha_1 = require(\"hash.js/lib/hash/sha\");\nvar constants_1 = require(\"./constants\");\nvar index_1 = require(\"./index\");\nvar util_1 = require(\"./util\");\nvar buildGenericSigningMsgRequest = function (req) {\n    var signerPath = req.signerPath, curveType = req.curveType, hashType = req.hashType, _a = req.encodingType, encodingType = _a === void 0 ? null : _a, _b = req.omitPubkey, omitPubkey = _b === void 0 ? false : _b, fwConstants = req.fwConstants;\n    var extraDataFrameSz = fwConstants.extraDataFrameSz, extraDataMaxFrames = fwConstants.extraDataMaxFrames, prehashAllowed = fwConstants.prehashAllowed, genericSigning = fwConstants.genericSigning, varAddrPathSzAllowed = fwConstants.varAddrPathSzAllowed;\n    var curveTypes = genericSigning.curveTypes, encodingTypes = genericSigning.encodingTypes, hashTypes = genericSigning.hashTypes, baseDataSz = genericSigning.baseDataSz, baseReqSz = genericSigning.baseReqSz;\n    try {\n        var _c = (0, exports.getEncodedPayload)(req.payload, encodingType, encodingTypes), encoding = _c.encoding, payloadBuf = _c.payloadBuf;\n        // Sanity checks\n        if (payloadBuf.length === 0) {\n            throw new Error('Payload could not be handled.');\n        }\n        else if (!genericSigning || !extraDataFrameSz || !extraDataMaxFrames || !prehashAllowed) {\n            throw new Error('Unsupported. Please update your Lattice firmware.');\n        }\n        else if (!(0, util_1.existsIn)(curveType, curveTypes)) {\n            throw new Error('Unsupported curve type.');\n        }\n        else if (!(0, util_1.existsIn)(hashType, hashTypes)) {\n            throw new Error('Unsupported hash type.');\n        }\n        // Ed25519 specific sanity checks\n        if (curveType === curveTypes.ED25519) {\n            if (hashType !== hashTypes.NONE) {\n                throw new Error('Signing on ed25519 requires unhashed message');\n            }\n            signerPath.forEach(function (idx) {\n                if (idx < constants_1.HARDENED_OFFSET) {\n                    throw new Error('Signing on ed25519 requires all signer path indices be hardened.');\n                }\n            });\n        }\n        // Build the request buffer with metadata and then the payload to sign.\n        var buf = buffer_1.Buffer.alloc(baseReqSz);\n        var off = 0;\n        buf.writeUInt32LE(encoding, off);\n        off += 4;\n        buf.writeUInt8(hashType, off);\n        off += 1;\n        buf.writeUInt8(curveType, off);\n        off += 1;\n        var signerPathBuf = (0, util_1.buildSignerPathBuf)(signerPath, varAddrPathSzAllowed);\n        signerPathBuf.copy(buf, off);\n        off += signerPathBuf.length;\n        buf.writeUInt8(omitPubkey ? 1 : 0, off);\n        off += 1;\n        buf.writeUInt16LE(payloadBuf.length, off);\n        off += 2;\n        // Size of data payload that can be included in the first/base request\n        var maxExpandedSz = baseDataSz + (extraDataMaxFrames * extraDataFrameSz);\n        // Flow data into extraData requests if applicable\n        var extraDataPayloads_1 = [];\n        var prehash = null;\n        if (payloadBuf.length > baseDataSz) {\n            if (prehashAllowed && payloadBuf.length > maxExpandedSz) {\n                // If this payload is too large to send, but the Lattice allows a prehashed message, do that\n                if (hashType === hashTypes.NONE) {\n                    // This cannot be done for ED25519 signing, which must sign the full message\n                    throw new Error('Message too large to send and could not be prehashed (hashType=NONE).');\n                }\n                else if (hashType === hashTypes.KECCAK256) {\n                    prehash = buffer_1.Buffer.from((0, js_sha3_1.keccak256)(payloadBuf), 'hex');\n                }\n                else if (hashType === hashTypes.SHA256) {\n                    prehash = buffer_1.Buffer.from((0, sha_1.sha256)().update(payloadBuf).digest('hex'), 'hex');\n                }\n                else {\n                    throw new Error('Unsupported hash type.');\n                }\n            }\n            else {\n                // Split overflow data into extraData frames\n                var frames_1 = (0, util_1.splitFrames)(payloadBuf.slice(baseDataSz), extraDataFrameSz);\n                frames_1.forEach(function (frame) {\n                    var szLE = buffer_1.Buffer.alloc(4);\n                    szLE.writeUInt32LE(frame.length, 0);\n                    extraDataPayloads_1.push(buffer_1.Buffer.concat([szLE, frame]));\n                });\n            }\n        }\n        // If the message had to be prehashed, we will only copy the hash data into the request.\n        // Otherwise copy as many payload bytes into the request as possible. Follow up data\n        // from `frames` will come in follow up requests.\n        var toCopy = prehash ? prehash : payloadBuf;\n        toCopy.copy(buf, off);\n        // Return all the necessary data\n        return {\n            payload: buf,\n            extraDataPayloads: extraDataPayloads_1,\n            schema: constants_1.signingSchema.GENERAL_SIGNING,\n            curveType: curveType,\n            omitPubkey: omitPubkey\n        };\n    }\n    catch (err) {\n        return { err: err.message };\n    }\n};\nexports.buildGenericSigningMsgRequest = buildGenericSigningMsgRequest;\nvar parseGenericSigningResponse = function (res, off, curveType, omitPubkey) {\n    var parsed = {\n        pubkey: null,\n        sig: null,\n    };\n    // Parse BIP44 path\n    // Parse pubkey and then sig\n    if (curveType === index_1.Constants.SIGNING.CURVES.SECP256K1) {\n        // Handle `GpEccPubkey256_t`\n        if (!omitPubkey) {\n            var compression = res.readUint8(off);\n            off += 1;\n            if (compression === 0x02 || compression === 0x03) {\n                // Compressed key - only copy x\n                parsed.pubkey = buffer_1.Buffer.alloc(33);\n                parsed.pubkey.writeUInt8(compression, 0);\n                res.slice(off, off + 32).copy(parsed.pubkey, 1);\n            }\n            else if (compression === 0x04) {\n                // Uncompressed key\n                parsed.pubkey = buffer_1.Buffer.alloc(65);\n                parsed.pubkey.writeUInt8(compression, 0);\n                res.slice(off).copy(parsed.pubkey, 1);\n            }\n            else {\n                throw new Error('Bad compression byte in signing response.');\n            }\n            off += 64;\n        }\n        else {\n            // Skip pubkey section\n            off += 65;\n        }\n        // Handle `GpECDSASig_t`\n        parsed.sig = (0, util_1.parseDER)(res.slice(off, off + 2 + res[off + 1]));\n        // Remove any leading zeros in signature components to ensure\n        // the result is a 64 byte sig\n        parsed.sig.r = (0, util_1.fixLen)(parsed.sig.r, 32);\n        parsed.sig.s = (0, util_1.fixLen)(parsed.sig.s, 32);\n    }\n    else if (curveType === index_1.Constants.SIGNING.CURVES.ED25519) {\n        if (!omitPubkey) {\n            // Handle `GpEdDSAPubkey_t`\n            parsed.pubkey = buffer_1.Buffer.alloc(32);\n            res.slice(off, off + 32).copy(parsed.pubkey);\n        }\n        off += 32;\n        // Handle `GpEdDSASig_t`\n        parsed.sig = {\n            r: res.slice(off, off + 32),\n            s: res.slice(off + 32, off + 64),\n        };\n    }\n    else {\n        throw new Error('Unsupported curve.');\n    }\n    return parsed;\n};\nexports.parseGenericSigningResponse = parseGenericSigningResponse;\nvar getEncodedPayload = function (payload, encodingType, allowedEncodings) {\n    var encoding = encodingType;\n    if (encoding === null) {\n        // If no encoding type was passed, we will display the payload as either\n        // ASCII or a hex string. Determine which one of the default encodings to use.\n        // If the buffer passed in is a string and is not prefixed with 0x, treat as utf8.\n        // Otherwise treat it as a hex buffer.\n        var isHex = buffer_1.Buffer.isBuffer(payload) ||\n            (typeof payload === 'string' && payload.slice(0, 2) === '0x');\n        if (!isHex && !(0, util_1.isAsciiStr)(payload, true)) {\n            // If this is not '0x' prefixed but is not valid ASCII, convert to hex payload\n            isHex = true;\n            payload = \"0x\".concat(buffer_1.Buffer.from(payload).toString('hex'));\n        }\n        // Set encodingType to real value\n        encoding = isHex ?\n            index_1.Constants.SIGNING.ENCODINGS.HEX :\n            index_1.Constants.SIGNING.ENCODINGS.ASCII;\n    }\n    // Make sure the encoding type specified is supported by firmware\n    if (!(0, util_1.existsIn)(encoding, allowedEncodings)) {\n        throw new Error('Encoding type not supported by Lattice firmware.');\n    }\n    // Build the request with the specified encoding type\n    if (encoding === index_1.Constants.SIGNING.ENCODINGS.HEX ||\n        encoding === index_1.Constants.SIGNING.ENCODINGS.SOLANA) {\n        return {\n            payloadBuf: (0, util_1.ensureHexBuffer)(payload),\n            encoding: encoding,\n        };\n    }\n    else if (encoding === index_1.Constants.SIGNING.ENCODINGS.ASCII) {\n        return {\n            payloadBuf: buffer_1.Buffer.from(payload),\n            encoding: encoding,\n        };\n    }\n    else {\n        throw new Error('Unhandled encoding type.');\n    }\n};\nexports.getEncodedPayload = getEncodedPayload;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.string = exports.nibble = exports.integer = exports.byte = exports.buffer = exports.bits = void 0;\nvar bits_1 = require(\"./bits\");\nexports.bits = bits_1.default;\nvar buffer_1 = require(\"./buffer\");\nexports.buffer = buffer_1.default;\nvar byte_1 = require(\"./byte\");\nexports.byte = byte_1.default;\nvar integer_1 = require(\"./integer\");\nexports.integer = integer_1.default;\nvar nibble_1 = require(\"./nibble\");\nexports.nibble = nibble_1.default;\nvar string_1 = require(\"./string\");\nexports.string = string_1.default;\nvar bitwise = { bits: bits_1.default, buffer: buffer_1.default, byte: byte_1.default, integer: integer_1.default, nibble: nibble_1.default, string: string_1.default };\nexports.default = bitwise;\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Utils for Ethereum transactions. This is effecitvely a shim of ethereumjs-util, which\n// does not have browser (or, by proxy, React-Native) support.\nvar bignumber_js_1 = __importDefault(require(\"bignumber.js\"));\nvar borc_1 = __importDefault(require(\"borc\"));\nvar buffer_1 = require(\"buffer/\");\n//@ts-expect-error - This third-party package is not typed properly\nvar eth_eip712_util_browser_1 = require(\"eth-eip712-util-browser\");\nvar js_sha3_1 = require(\"js-sha3\");\nvar rlp_browser_1 = __importDefault(require(\"rlp-browser\"));\nvar secp256k1_1 = __importDefault(require(\"secp256k1\"));\nvar constants_1 = require(\"./constants\");\nvar util_1 = require(\"./util\");\nvar buildEthereumMsgRequest = function (input) {\n    if (!input.payload || !input.protocol || !input.signerPath)\n        throw new Error('You must provide `payload`, `signerPath`, and `protocol` arguments in the messsage request');\n    if (input.signerPath.length > 5 || input.signerPath.length < 2)\n        throw new Error('Please provide a signer path with 2-5 indices');\n    var req = {\n        schema: constants_1.signingSchema.ETH_MSG,\n        payload: null,\n        input: input,\n        msg: null, // Save the buffered message for later\n    };\n    try {\n        switch (input.protocol) {\n            case 'signPersonal':\n                return buildPersonalSignRequest(req, input);\n            case 'eip712':\n                if (!input.fwConstants.eip712Supported)\n                    throw new Error('EIP712 is not supported by your Lattice firmware version. Please upgrade.');\n                return buildEIP712Request(req, input);\n            default:\n                throw new Error('Unsupported protocol');\n        }\n    }\n    catch (err) {\n        return { err: err.toString() };\n    }\n};\nvar validateEthereumMsgResponse = function (res, req) {\n    var signer = res.signer, sig = res.sig;\n    var input = req.input, msg = req.msg, _a = req.prehash, prehash = _a === void 0 ? null : _a;\n    if (input.protocol === 'signPersonal') {\n        // NOTE: We are currently hardcoding networkID=1 and useEIP155=false but these\n        //       may be configurable in future versions\n        var hash_1 = prehash\n            ? prehash\n            : buffer_1.Buffer.from((0, js_sha3_1.keccak256)(buffer_1.Buffer.concat([get_personal_sign_prefix(msg.length), msg])), 'hex');\n        // Get recovery param with a `v` value of [27,28] by setting `useEIP155=false`\n        return addRecoveryParam(hash_1, sig, signer, {\n            chainId: 1,\n            useEIP155: false,\n        });\n    }\n    else if (input.protocol === 'eip712') {\n        var encoded = eth_eip712_util_browser_1.TypedDataUtils.hash(req.input.payload);\n        var digest = prehash ? prehash : encoded;\n        // Get recovery param with a `v` value of [27,28] by setting `useEIP155=false`\n        return addRecoveryParam(digest, sig, signer, { useEIP155: false });\n    }\n    else {\n        throw new Error('Unsupported protocol');\n    }\n};\nvar buildEthereumTxRequest = function (data) {\n    try {\n        var _a = data.chainId, chainId = _a === void 0 ? 1 : _a;\n        var signerPath = data.signerPath, _b = data.eip155, eip155 = _b === void 0 ? null : _b, fwConstants = data.fwConstants, _c = data.type, type = _c === void 0 ? null : _c;\n        var contractDeployKey = fwConstants.contractDeployKey, extraDataFrameSz = fwConstants.extraDataFrameSz, extraDataMaxFrames = fwConstants.extraDataMaxFrames, prehashAllowed = fwConstants.prehashAllowed;\n        var EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;\n        var MAX_BASE_DATA_SZ = fwConstants.ethMaxDataSz;\n        var VAR_PATH_SZ = fwConstants.varAddrPathSzAllowed;\n        // Sanity checks:\n        // There are a handful of named chains we allow the user to reference (`chainIds`)\n        // Custom chainIDs should be either numerical or hex strings\n        if (typeof chainId !== 'number' &&\n            isValidChainIdHexNumStr(chainId) === false)\n            chainId = chainIds[chainId];\n        // If this was not a custom chainID and we cannot find the name of it, exit\n        if (!chainId)\n            throw new Error('Unsupported chain ID or name');\n        // Sanity check on signePath\n        if (!signerPath)\n            throw new Error('`signerPath` not provided');\n        // Is this a contract deployment?\n        if (data.to === null && !contractDeployKey) {\n            throw new Error('Contract deployment not supported. Please update your Lattice firmware.');\n        }\n        var isDeployment = data.to === null && contractDeployKey;\n        // We support eip1559 and eip2930 types (as well as legacy)\n        var eip1559IsAllowed = fwConstants.allowedEthTxTypes &&\n            fwConstants.allowedEthTxTypes.indexOf(2) > -1;\n        var eip2930IsAllowed = fwConstants.allowedEthTxTypes &&\n            fwConstants.allowedEthTxTypes.indexOf(1) > -1;\n        var isEip1559 = eip1559IsAllowed && (type === 2 || type === 'eip1559');\n        var isEip2930 = eip2930IsAllowed && (type === 1 || type === 'eip2930');\n        if (type !== null && !isEip1559 && !isEip2930)\n            throw new Error('Unsupported Ethereum transaction type');\n        // Determine if we should use EIP155 given the chainID.\n        // If we are explicitly told to use eip155, we will use it. Otherwise,\n        // we will look up if the specified chainId is associated with a chain\n        // that does not use EIP155 by default. Note that most do use EIP155.\n        var useEIP155 = chainUsesEIP155(chainId);\n        if (eip155 !== null && typeof eip155 === 'boolean') {\n            useEIP155 = eip155;\n        }\n        else if (isEip1559 || isEip2930) {\n            // Newer transaction types do not use EIP155 since the chainId is serialized\n            useEIP155 = false;\n        }\n        // Hack for metamask, which sends value=null for 0 ETH transactions\n        if (!data.value)\n            data.value = 0;\n        //--------------\n        // 1. BUILD THE RAW TX FOR FUTURE RLP ENCODING\n        //--------------\n        // Ensure all fields are 0x-prefixed hex strings\n        var rawTx = [];\n        // Build the transaction buffer array\n        var chainIdBytes = (0, util_1.ensureHexBuffer)(chainId);\n        var nonceBytes = (0, util_1.ensureHexBuffer)(data.nonce);\n        var gasPriceBytes = void 0;\n        var gasLimitBytes = (0, util_1.ensureHexBuffer)(data.gasLimit);\n        // Handle contract deployment (indicated by `to` being `null`)\n        // For contract deployment we write a 20-byte key to the request\n        // buffer, which gets swapped for an empty buffer in firmware.\n        var toRlpElem = void 0, toBytes = void 0;\n        if (isDeployment) {\n            toRlpElem = buffer_1.Buffer.alloc(0);\n            toBytes = (0, util_1.ensureHexBuffer)(contractDeployKey);\n        }\n        else {\n            toRlpElem = (0, util_1.ensureHexBuffer)(data.to);\n            toBytes = (0, util_1.ensureHexBuffer)(data.to);\n        }\n        var valueBytes = (0, util_1.ensureHexBuffer)(data.value);\n        var dataBytes = (0, util_1.ensureHexBuffer)(data.data);\n        if (isEip1559 || isEip2930) {\n            // EIP1559 and EIP2930 transactions have a chainID field\n            rawTx.push(chainIdBytes);\n        }\n        rawTx.push(nonceBytes);\n        var maxPriorityFeePerGasBytes = void 0, maxFeePerGasBytes = void 0;\n        if (isEip1559) {\n            if (!data.maxPriorityFeePerGas)\n                throw new Error('EIP1559 transactions must include `maxPriorityFeePerGas`');\n            if (!data.maxPriorityFeePerGas)\n                throw new Error('EIP1559 transactions must include `maxFeePerGas`');\n            maxPriorityFeePerGasBytes = (0, util_1.ensureHexBuffer)(data.maxPriorityFeePerGas);\n            rawTx.push(maxPriorityFeePerGasBytes);\n            maxFeePerGasBytes = (0, util_1.ensureHexBuffer)(data.maxFeePerGas);\n            rawTx.push(maxFeePerGasBytes);\n            // EIP1559 renamed \"gasPrice\" to \"maxFeePerGas\", but firmware still\n            // uses `gasPrice` in the struct, so update that value here.\n            gasPriceBytes = maxFeePerGasBytes;\n        }\n        else {\n            // EIP1559 transactions do not have the gasPrice field\n            gasPriceBytes = (0, util_1.ensureHexBuffer)(data.gasPrice);\n            rawTx.push(gasPriceBytes);\n        }\n        rawTx.push(gasLimitBytes);\n        rawTx.push(toRlpElem);\n        rawTx.push(valueBytes);\n        rawTx.push(dataBytes);\n        // We do not currently support accessList in firmware so we need to prehash if\n        // the list is non-null\n        var PREHASH_FROM_ACCESS_LIST_1 = false;\n        if (isEip1559 || isEip2930) {\n            var accessList_1 = [];\n            if (Array.isArray(data.accessList)) {\n                data.accessList.forEach(function (listItem) {\n                    var keys = [];\n                    listItem.storageKeys.forEach(function (key) {\n                        keys.push((0, util_1.ensureHexBuffer)(key));\n                    });\n                    accessList_1.push([(0, util_1.ensureHexBuffer)(listItem.address), keys]);\n                    PREHASH_FROM_ACCESS_LIST_1 = true;\n                });\n            }\n            rawTx.push(accessList_1);\n        }\n        else if (useEIP155 === true) {\n            // Add empty v,r,s values for EIP155 legacy transactions\n            rawTx.push(chainIdBytes); // v (which is the same as chainId in EIP155 txs)\n            rawTx.push((0, util_1.ensureHexBuffer)(null)); // r\n            rawTx.push((0, util_1.ensureHexBuffer)(null)); // s\n        }\n        //--------------\n        // 2. BUILD THE LATTICE REQUEST PAYLOAD\n        //--------------\n        var ETH_TX_NON_DATA_SZ = 122; // Accounts for metadata and non-data params\n        var ETH_TX_EXTRA_FIELDS_SZ = 0; // Accounts for newer ETH tx types (e.g. eip1559)\n        if (fwConstants.allowedEthTxTypesVersion === 1) {\n            // eip1559 and eip2930\n            // Add extra params and shrink the data region (extraData blocks are unaffected)\n            ETH_TX_EXTRA_FIELDS_SZ = fwConstants.totalExtraEthTxDataSz;\n            MAX_BASE_DATA_SZ -= ETH_TX_EXTRA_FIELDS_SZ;\n        }\n        var txReqPayload = buffer_1.Buffer.alloc(MAX_BASE_DATA_SZ + ETH_TX_NON_DATA_SZ);\n        var off = 0;\n        // 1. EIP155 switch and chainID\n        //------------------\n        txReqPayload.writeUInt8(Number(useEIP155), off);\n        off++;\n        // NOTE: Originally we designed for a 1-byte chainID, but modern rollup chains use much larger\n        // chainID values. To account for these, we will put the chainID into the `data` buffer if it\n        // is >=255. Values up to UINT64_MAX will be allowed.\n        var chainIdBuf = void 0;\n        var chainIdBufSz = 0;\n        if (useChainIdBuffer(chainId) === true) {\n            chainIdBuf = getChainIdBuf(chainId);\n            chainIdBufSz = chainIdBuf.length;\n            if (chainIdBufSz > constants_1.MAX_CHAIN_ID_BYTES)\n                throw new Error('ChainID provided is too large.');\n            // Signal to Lattice firmware that it needs to read the chainId from the tx.data buffer\n            txReqPayload.writeUInt8(constants_1.HANDLE_LARGER_CHAIN_ID, off);\n            off++;\n        }\n        else {\n            // For chainIDs <255, write it to the chainId u8 slot in the main tx buffer\n            chainIdBuf = (0, util_1.ensureHexBuffer)(chainId);\n            if (chainIdBuf.length !== 1)\n                throw new Error('Error parsing chainID');\n            chainIdBuf.copy(txReqPayload, off);\n            off += chainIdBuf.length;\n        }\n        // 2. Signer Path\n        //------------------\n        var signerPathBuf = (0, util_1.buildSignerPathBuf)(signerPath, VAR_PATH_SZ);\n        signerPathBuf.copy(txReqPayload, off);\n        off += signerPathBuf.length;\n        // 3. ETH TX request data\n        //------------------\n        if (nonceBytes.length > 4)\n            throw new Error('Nonce too large');\n        nonceBytes.copy(txReqPayload, off + (4 - nonceBytes.length));\n        off += 4;\n        if (gasPriceBytes.length > 8)\n            throw new Error('Gas price too large');\n        gasPriceBytes.copy(txReqPayload, off + (8 - gasPriceBytes.length));\n        off += 8;\n        if (gasLimitBytes.length > 4)\n            throw new Error('Gas limit too large');\n        gasLimitBytes.copy(txReqPayload, off + (4 - gasLimitBytes.length));\n        off += 4;\n        if (toBytes.length !== 20)\n            throw new Error('Invalid `to` address');\n        toBytes.copy(txReqPayload, off);\n        off += 20;\n        if (valueBytes.length > 32)\n            throw new Error('Value too large');\n        valueBytes.copy(txReqPayload, off + (32 - valueBytes.length));\n        off += 32;\n        // Extra Tx data comes before `data` in the struct\n        var PREHASH_UNSUPPORTED = false;\n        if (fwConstants.allowedEthTxTypesVersion === 1) {\n            var extraEthTxDataSz = fwConstants.totalExtraEthTxDataSz || 0;\n            // Some types may not be supported by firmware, so we will need to prehash\n            if (PREHASH_FROM_ACCESS_LIST_1) {\n                PREHASH_UNSUPPORTED = true;\n            }\n            txReqPayload.writeUInt8(PREHASH_UNSUPPORTED ? 1 : 0, off);\n            off += 1;\n            // EIP1559 & EIP2930 struct version\n            if (isEip1559) {\n                txReqPayload.writeUInt8(2, off);\n                off += 1; // Eip1559 type enum value\n                if (maxPriorityFeePerGasBytes.length > 8)\n                    throw new Error('maxPriorityFeePerGasBytes too large');\n                maxPriorityFeePerGasBytes.copy(txReqPayload, off + (8 - maxPriorityFeePerGasBytes.length));\n                off += 8;\n            }\n            else if (isEip2930) {\n                txReqPayload.writeUInt8(1, off);\n                off += 1; // Eip2930 type enum value\n                off += extraEthTxDataSz - 2; // Skip EIP1559 params\n            }\n            else {\n                off += extraEthTxDataSz - 1; // Skip EIP1559 and EIP2930 params\n            }\n        }\n        // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable\n        var extraDataPayloads_1 = [];\n        var prehash = null;\n        // Create the buffer, prefix with chainId (if needed) and add data slice\n        var dataSz = dataBytes.length || 0;\n        var chainIdExtraSz = chainIdBufSz > 0 ? chainIdBufSz + 1 : 0;\n        var dataToCopy = buffer_1.Buffer.alloc(dataSz + chainIdExtraSz);\n        if (chainIdExtraSz > 0) {\n            dataToCopy.writeUInt8(chainIdBufSz, 0);\n            chainIdBuf.copy(dataToCopy, 1);\n        }\n        dataBytes.copy(dataToCopy, chainIdExtraSz);\n        if (dataSz > MAX_BASE_DATA_SZ) {\n            // Determine sizes and run through sanity checks\n            var totalSz = dataSz + chainIdExtraSz;\n            var maxSzAllowed = MAX_BASE_DATA_SZ + extraDataMaxFrames * extraDataFrameSz;\n            if (prehashAllowed && totalSz > maxSzAllowed) {\n                // If this payload is too large to send, but the Lattice allows a prehashed message, do that\n                prehash = buffer_1.Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(rawTx, type)), 'hex');\n            }\n            else {\n                if (!EXTRA_DATA_ALLOWED ||\n                    (EXTRA_DATA_ALLOWED && totalSz > maxSzAllowed))\n                    throw new Error(\"Data field too large (got \".concat(dataBytes.length, \"; must be <=\").concat(maxSzAllowed - chainIdExtraSz, \" bytes)\"));\n                // Split overflow data into extraData frames\n                var frames_1 = (0, util_1.splitFrames)(dataToCopy.slice(MAX_BASE_DATA_SZ), extraDataFrameSz);\n                frames_1.forEach(function (frame) {\n                    var szLE = buffer_1.Buffer.alloc(4);\n                    szLE.writeUInt32LE(frame.length, 0);\n                    extraDataPayloads_1.push(buffer_1.Buffer.concat([szLE, frame]));\n                });\n            }\n        }\n        else if (PREHASH_UNSUPPORTED) {\n            // If something is unsupported in firmware but we want to allow such transactions,\n            // we prehash the message here.\n            prehash = buffer_1.Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(rawTx, type)), 'hex');\n        }\n        // Write the data size (does *NOT* include the chainId buffer, if that exists)\n        txReqPayload.writeUInt16BE(dataBytes.length, off);\n        off += 2;\n        // Copy in the chainId buffer if needed\n        if (chainIdBufSz > 0) {\n            txReqPayload.writeUInt8(chainIdBufSz, off);\n            off++;\n            chainIdBuf.copy(txReqPayload, off);\n            off += chainIdBufSz;\n        }\n        // Copy the first slice of the data itself. If this payload has been pre-hashed, include it\n        // in the `data` field. This will result in a different Lattice screen being drawn.\n        if (prehash) {\n            prehash.copy(txReqPayload, off);\n            off += MAX_BASE_DATA_SZ;\n        }\n        else {\n            dataBytes.slice(0, MAX_BASE_DATA_SZ).copy(txReqPayload, off);\n            off += MAX_BASE_DATA_SZ;\n        }\n        return {\n            rawTx: rawTx,\n            type: type,\n            payload: txReqPayload.slice(0, off),\n            extraDataPayloads: extraDataPayloads_1,\n            schema: constants_1.signingSchema.ETH_TRANSFER,\n            chainId: chainId,\n            useEIP155: useEIP155,\n            signerPath: signerPath,\n        };\n    }\n    catch (err) {\n        return { err: err.message };\n    }\n};\n// From ethereumjs-util\nfunction stripZeros(a) {\n    var first = a[0];\n    while (a.length > 0 && first.toString() === '0') {\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n}\n// Given a 64-byte signature [r,s] we need to figure out the v value\n// and attah the full signature to the end of the transaction payload\nvar buildEthRawTx = function (tx, sig, address) {\n    // RLP-encode the data we sent to the lattice\n    var hash = buffer_1.Buffer.from((0, js_sha3_1.keccak256)(get_rlp_encoded_preimage(tx.rawTx, tx.type)), 'hex');\n    var newSig = addRecoveryParam(hash, sig, address, tx);\n    // Use the signature to generate a new raw transaction payload\n    // Strip the last 3 items and replace them with signature components\n    var newRawTx = tx.useEIP155 ? tx.rawTx.slice(0, -3) : tx.rawTx;\n    newRawTx.push(newSig.v);\n    // Per `ethereumjs-tx`, RLP encoding should include signature components w/ stripped zeros\n    // See: https://github.com/ethereumjs/ethereumjs-tx/blob/master/src/transaction.ts#L187\n    newRawTx.push(stripZeros(newSig.r));\n    newRawTx.push(stripZeros(newSig.s));\n    var rlpEncodedWithSig = rlp_browser_1.default.encode(newRawTx);\n    if (tx.type) {\n        rlpEncodedWithSig = buffer_1.Buffer.concat([\n            buffer_1.Buffer.from([tx.type]),\n            rlpEncodedWithSig,\n        ]);\n    }\n    return { rawTx: rlpEncodedWithSig.toString('hex'), sigWithV: newSig };\n};\n// Attach a recovery parameter to a signature by brute-forcing ECRecover\nfunction addRecoveryParam(hashBuf, sig, address, txData) {\n    if (txData === void 0) { txData = {}; }\n    try {\n        // Rebuild the keccak256 hash here so we can `ecrecover`\n        var hash_2 = new Uint8Array(hashBuf);\n        var v = 0;\n        // Fix signature componenet lengths to 32 bytes each\n        var r = (0, util_1.fixLen)(sig.r, 32);\n        sig.r = r;\n        var s = (0, util_1.fixLen)(sig.s, 32);\n        sig.s = s;\n        // Calculate the recovery param\n        var rs = new Uint8Array(buffer_1.Buffer.concat([r, s]));\n        var pubkey = secp256k1_1.default.ecdsaRecover(rs, v, hash_2, false).slice(1);\n        // If the first `v` value is a match, return the sig!\n        if (pubToAddrStr(pubkey) === address.toString('hex')) {\n            sig.v = getRecoveryParam(v, txData);\n            return sig;\n        }\n        // Otherwise, try the other `v` value\n        v = 1;\n        pubkey = secp256k1_1.default.ecdsaRecover(rs, v, hash_2, false).slice(1);\n        if (pubToAddrStr(pubkey) === address.toString('hex')) {\n            sig.v = getRecoveryParam(v, txData);\n            return sig;\n        }\n        else {\n            // If neither is a match, we should return an error\n            throw new Error('Invalid Ethereum signature returned.');\n        }\n    }\n    catch (err) {\n        throw new Error(err);\n    }\n}\n// Convert an RLP-serialized transaction (plus signature) into a transaction hash\nvar hashTransaction = function (serializedTx) {\n    return (0, js_sha3_1.keccak256)(buffer_1.Buffer.from(serializedTx, 'hex'));\n};\n// Returns address string given public key buffer\nfunction pubToAddrStr(pub) {\n    return (0, js_sha3_1.keccak256)(pub).slice(-40);\n}\n// Convert a 0/1 `v` into a recovery param:\n// * For non-EIP155 transactions, return `27 + v`\n// * For EIP155 transactions, return `(CHAIN_ID*2) + 35 + v`\nfunction getRecoveryParam(v, txData) {\n    if (txData === void 0) { txData = {}; }\n    var chainId = txData.chainId, useEIP155 = txData.useEIP155, type = txData.type;\n    // For EIP1559 and EIP2930 transactions, we want the recoveryParam (0 or 1)\n    // rather than the `v` value because the `chainId` is already included in the\n    // transaction payload.\n    if (type === 1 || type === 2) {\n        return (0, util_1.ensureHexBuffer)(v, true); // 0 or 1, with 0 expected as an empty buffer\n    }\n    else if (false === useEIP155 || chainId === null) {\n        // For ETH messages and non-EIP155 chains the set should be [27, 28] for `v`\n        return buffer_1.Buffer.from(new bignumber_js_1.default(v).plus(27).toString(16), 'hex');\n    }\n    // We will use EIP155 in most cases. Convert v to a bignum and operate on it.\n    // Note that the protocol calls for v = (CHAIN_ID*2) + 35/36, where 35 or 36\n    // is decided on based on the ecrecover result. `v` is passed in as either 0 or 1\n    // so we add 35 to that.\n    var chainIdBuf = getChainIdBuf(chainId);\n    var chainIdBN = new bignumber_js_1.default(chainIdBuf.toString('hex'), 16);\n    return (0, util_1.ensureHexBuffer)(\"0x\".concat(chainIdBN.times(2).plus(35).plus(v).toString(16)));\n}\nvar chainIds = {\n    mainnet: 1,\n    roptsten: 3,\n    rinkeby: 4,\n    kovan: 42,\n    goerli: 5,\n};\n// Get a buffer containing the chainId value.\n// Returns a 1, 2, 4, or 8 byte buffer with the chainId encoded in big endian\nfunction getChainIdBuf(chainId) {\n    var b;\n    // If our chainID is a hex string, we can convert it to a hex\n    // buffer directly\n    if (true === isValidChainIdHexNumStr(chainId))\n        b = (0, util_1.ensureHexBuffer)(chainId);\n    // If our chainID is a base-10 number, parse with bignumber.js and convert to hex buffer\n    else\n        b = (0, util_1.ensureHexBuffer)(\"0x\".concat(new bignumber_js_1.default(chainId).toString(16)));\n    // Make sure the buffer is an allowed size\n    if (b.length > 8)\n        throw new Error('ChainID provided is too large.');\n    // If this matches a u16, u32, or u64 size, return it now\n    if (b.length <= 2 || b.length === 4 || b.length === 8)\n        return b;\n    // For other size buffers, we need to pack into u32 or u64 before returning;\n    var buf;\n    if (b.length === 3) {\n        buf = buffer_1.Buffer.alloc(4);\n        buf.writeUInt32BE(chainId);\n    }\n    else if (b.length <= 8) {\n        buf = buffer_1.Buffer.alloc(8);\n        b.copy(buf, 8 - b.length);\n    }\n    return buf;\n}\n// Determine if the chain uses EIP155 by default, based on the chainID\nfunction chainUsesEIP155(chainID) {\n    switch (chainID) {\n        case 3: // ropsten\n        case 4: // rinkeby\n            return false;\n        case 1: // mainnet\n        case 42: // kovan\n        case 5: // goerli\n        default:\n            // all others should use eip155\n            return true;\n    }\n}\n// Determine if a valid number was passed in as a hex string\nfunction isValidChainIdHexNumStr(s) {\n    if (typeof s !== 'string')\n        return false;\n    if (s.slice(0, 2) !== '0x')\n        return false;\n    try {\n        var b = new bignumber_js_1.default(s, 16);\n        return b.isNaN() === false;\n    }\n    catch (err) {\n        return false;\n    }\n}\n// If this is a nubmer that fits in one byte, we don't need to add it\n// to the `data` buffer of the main transaction.\n// Note the one edge case: we still need to use the `data` field for chainID=255.\nfunction useChainIdBuffer(id) {\n    var buf = getChainIdBuf(id);\n    if (buf.length === 1)\n        return buf.readUInt8(0) === 255;\n    return true;\n}\nfunction buildPersonalSignRequest(req, input) {\n    var MAX_BASE_MSG_SZ = input.fwConstants.ethMaxMsgSz;\n    var VAR_PATH_SZ = input.fwConstants.varAddrPathSzAllowed;\n    var L = 24 + MAX_BASE_MSG_SZ + 4;\n    var off = 0;\n    req.payload = buffer_1.Buffer.alloc(L);\n    req.payload.writeUInt8(constants_1.ethMsgProtocol.SIGN_PERSONAL, 0);\n    off += 1;\n    // Write the signer path into the buffer\n    var signerPathBuf = (0, util_1.buildSignerPathBuf)(input.signerPath, VAR_PATH_SZ);\n    signerPathBuf.copy(req.payload, off);\n    off += signerPathBuf.length;\n    // Write the payload buffer. The payload can come in either as a buffer or as a string\n    var payload = input.payload;\n    // Determine if this is a hex string\n    var displayHex = false;\n    if (typeof input.payload === 'string') {\n        if (input.payload.slice(0, 2) === '0x') {\n            payload = (0, util_1.ensureHexBuffer)(input.payload);\n            displayHex =\n                false ===\n                    constants_1.ASCII_REGEX.test(buffer_1.Buffer.from(input.payload.slice(2), 'hex').toString());\n        }\n        else {\n            if (false === (0, util_1.isAsciiStr)(input.payload))\n                throw new Error('Currently, the Lattice can only display ASCII strings.');\n            payload = buffer_1.Buffer.from(input.payload);\n        }\n    }\n    else if (typeof input.displayHex === 'boolean') {\n        // If this is a buffer and the user has specified whether or not this\n        // is a hex buffer with the optional argument, write that\n        displayHex = input.displayHex;\n    }\n    else {\n        // Otherwise, determine if this buffer is an ASCII string. If it is, set `displayHex` accordingly.\n        // NOTE: THIS MEANS THAT NON-ASCII STRINGS WILL DISPLAY AS HEX SINCE WE CANNOT KNOW IF THE REQUESTER\n        //        EXPECTED NON-ASCII CHARACTERS TO DISPLAY IN A STRING\n        // TODO: Develop a more elegant solution for this\n        if (!input.payload.toString)\n            throw new Error('Unsupported input data type');\n        displayHex = false === constants_1.ASCII_REGEX.test(input.payload.toString());\n    }\n    var fwConst = input.fwConstants;\n    var maxSzAllowed = MAX_BASE_MSG_SZ + fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz;\n    if (fwConst.personalSignHeaderSz) {\n        // Account for the personal_sign header string\n        maxSzAllowed -= fwConst.personalSignHeaderSz;\n    }\n    if (fwConst.ethMsgPreHashAllowed && payload.length > maxSzAllowed) {\n        // If this message will not fit and pre-hashing is allowed, do that\n        req.payload.writeUInt8(displayHex, off);\n        off += 1;\n        req.payload.writeUInt16LE(payload.length, off);\n        off += 2;\n        var prehash = buffer_1.Buffer.from((0, js_sha3_1.keccak256)(buffer_1.Buffer.concat([get_personal_sign_prefix(payload.length), payload])), 'hex');\n        prehash.copy(req.payload, off);\n        req.prehash = prehash;\n    }\n    else {\n        // Otherwise we can fit the payload.\n        // Flow data into extraData requests, which will follow-up transaction requests, if supported/applicable\n        var extraDataPayloads = getExtraData(payload, input);\n        // Write the payload and metadata into our buffer\n        req.extraDataPayloads = extraDataPayloads;\n        req.msg = payload;\n        req.payload.writeUInt8(displayHex, off);\n        off += 1;\n        req.payload.writeUInt16LE(payload.length, off);\n        off += 2;\n        payload.copy(req.payload, off);\n    }\n    return req;\n}\nfunction buildEIP712Request(req, input) {\n    try {\n        var _a = input.fwConstants, ethMaxMsgSz = _a.ethMaxMsgSz, varAddrPathSzAllowed = _a.varAddrPathSzAllowed, eip712MaxTypeParams_1 = _a.eip712MaxTypeParams;\n        var TYPED_DATA = constants_1.ethMsgProtocol.TYPED_DATA;\n        var L = 24 + ethMaxMsgSz + 4;\n        var off = 0;\n        req.payload = buffer_1.Buffer.alloc(L);\n        req.payload.writeUInt8(TYPED_DATA.enumIdx, 0);\n        off += 1;\n        // Write the signer path\n        var signerPathBuf = (0, util_1.buildSignerPathBuf)(input.signerPath, varAddrPathSzAllowed);\n        signerPathBuf.copy(req.payload, off);\n        off += signerPathBuf.length;\n        // Parse/clean the EIP712 payload, serialize with CBOR, and write to the payload\n        var data_1 = JSON.parse(JSON.stringify(input.payload));\n        if (!data_1.primaryType || !data_1.types[data_1.primaryType])\n            throw new Error('primaryType must be specified and the type must be included.');\n        if (!data_1.message || !data_1.domain)\n            throw new Error('message and domain must be specified.');\n        if (0 > Object.keys(data_1.types).indexOf('EIP712Domain'))\n            throw new Error('EIP712Domain type must be defined.');\n        // Parse the payload to ensure we have valid EIP712 data types and that\n        // they are encoded such that Lattice firmware can parse them.\n        // We need two different encodings: one to send to the Lattice in a format that plays\n        // nicely with our firmware CBOR decoder. The other is formatted to be consumable by\n        // our EIP712 validation module.\n        input.payload.message = parseEIP712Msg(JSON.parse(JSON.stringify(data_1.message)), JSON.parse(JSON.stringify(data_1.primaryType)), JSON.parse(JSON.stringify(data_1.types)), true);\n        input.payload.domain = parseEIP712Msg(JSON.parse(JSON.stringify(data_1.domain)), 'EIP712Domain', JSON.parse(JSON.stringify(data_1.types)), true);\n        data_1.domain = parseEIP712Msg(data_1.domain, 'EIP712Domain', data_1.types, false);\n        data_1.message = parseEIP712Msg(data_1.message, data_1.primaryType, data_1.types, false);\n        // Now build the message to be sent to the Lattice\n        var payload = buffer_1.Buffer.from(borc_1.default.encode(data_1));\n        var fwConst = input.fwConstants;\n        var maxSzAllowed = ethMaxMsgSz + fwConst.extraDataMaxFrames * fwConst.extraDataFrameSz;\n        // Determine if we need to prehash\n        var shouldPrehash_1 = payload.length > maxSzAllowed;\n        Object.keys(data_1.types).forEach(function (k) {\n            if (data_1.types[k].length > eip712MaxTypeParams_1) {\n                shouldPrehash_1 = true;\n            }\n        });\n        if (fwConst.ethMsgPreHashAllowed && shouldPrehash_1) {\n            // If this payload is too large to send, but the Lattice allows a prehashed message, do that\n            req.payload.writeUInt16LE(payload.length, off);\n            off += 2;\n            var prehash = eth_eip712_util_browser_1.TypedDataUtils.hash(req.input.payload);\n            prehash.copy(req.payload, off);\n            req.prehash = prehash;\n        }\n        else {\n            var extraDataPayloads = getExtraData(payload, input);\n            req.extraDataPayloads = extraDataPayloads;\n            req.payload.writeUInt16LE(payload.length, off);\n            off += 2;\n            payload.copy(req.payload, off);\n            off += payload.length;\n            // Slice out the part of the buffer that we didn't use.\n            req.payload = req.payload.slice(0, off);\n        }\n        return req;\n    }\n    catch (err) {\n        return { err: \"Failed to build EIP712 request: \".concat(err.message) };\n    }\n}\nfunction getExtraData(payload, input) {\n    var _a = input.fwConstants, ethMaxMsgSz = _a.ethMaxMsgSz, extraDataFrameSz = _a.extraDataFrameSz, extraDataMaxFrames = _a.extraDataMaxFrames;\n    var MAX_BASE_MSG_SZ = ethMaxMsgSz;\n    var EXTRA_DATA_ALLOWED = extraDataFrameSz > 0 && extraDataMaxFrames > 0;\n    var extraDataPayloads = [];\n    if (payload.length > MAX_BASE_MSG_SZ) {\n        // Determine sizes and run through sanity checks\n        var maxSzAllowed = MAX_BASE_MSG_SZ + extraDataMaxFrames * extraDataFrameSz;\n        if (!EXTRA_DATA_ALLOWED)\n            throw new Error(\"Your message is \".concat(payload.length, \" bytes, but can only be a maximum of \").concat(MAX_BASE_MSG_SZ));\n        else if (EXTRA_DATA_ALLOWED && payload.length > maxSzAllowed)\n            throw new Error(\"Your message is \".concat(payload.length, \" bytes, but can only be a maximum of \").concat(maxSzAllowed));\n        // Split overflow data into extraData frames\n        var frames_2 = (0, util_1.splitFrames)(payload.slice(MAX_BASE_MSG_SZ), extraDataFrameSz);\n        frames_2.forEach(function (frame) {\n            var szLE = buffer_1.Buffer.alloc(4);\n            szLE.writeUInt32LE(frame.length, 0);\n            extraDataPayloads.push(buffer_1.Buffer.concat([szLE, frame]));\n        });\n    }\n    return extraDataPayloads;\n}\nfunction parseEIP712Msg(msg, typeName, types, forJSParser) {\n    if (forJSParser === void 0) { forJSParser = false; }\n    try {\n        var type = types[typeName];\n        type.forEach(function (item) {\n            var isArrayType = item.type.indexOf('[') > -1;\n            var singularType = isArrayType\n                ? item.type.slice(0, item.type.indexOf('['))\n                : item.type;\n            var isCustomType = Object.keys(types).indexOf(singularType) > -1;\n            if (isCustomType && Array.isArray(msg)) {\n                // For custom types we need to jump into the `msg` using the key (name of type) and\n                // parse that entire sub-struct as if it were a message.\n                // We will recurse into sub-structs until we reach a level where every item is an\n                // elementary (i.e. non-custom) type.\n                // For arrays, we need to loop through each message item.\n                for (var i = 0; i < msg.length; i++) {\n                    msg[i][item.name] = parseEIP712Msg(msg[i][item.name], singularType, types, forJSParser);\n                }\n            }\n            else if (isCustomType) {\n                // Not an array means we can jump directly into the sub-struct to convert\n                msg[item.name] = parseEIP712Msg(msg[item.name], singularType, types, forJSParser);\n            }\n            else if (Array.isArray(msg)) {\n                // If we have an array for this particular type and the type we are parsing\n                // is *not* a custom type, loop through the array elements and convert the types.\n                for (var i = 0; i < msg.length; i++) {\n                    if (isArrayType) {\n                        // If this type is itself an array, loop through those elements and parse individually.\n                        // This code is not reachable for custom types so we assume these are arrays of\n                        // elementary types.\n                        for (var j = 0; j < msg[i][item.name].length; j++) {\n                            msg[i][item.name][j] = parseEIP712Item(msg[i][item.name][j], singularType, forJSParser);\n                        }\n                    }\n                    else {\n                        // Non-arrays parse + replace one value for the elementary type\n                        msg[i][item.name] = parseEIP712Item(msg[i][item.name], singularType, forJSParser);\n                    }\n                }\n            }\n            else if (isArrayType) {\n                // If we have an elementary array type and a non-array message level,\n                //loop through the array and parse + replace  each item individually.\n                for (var i = 0; i < msg[item.name].length; i++) {\n                    msg[item.name][i] = parseEIP712Item(msg[item.name][i], singularType, forJSParser);\n                }\n            }\n            else {\n                // If this is a singular elementary type, simply parse + replace.\n                msg[item.name] = parseEIP712Item(msg[item.name], singularType, forJSParser);\n            }\n        });\n    }\n    catch (err) {\n        throw new Error(err.message);\n    }\n    return msg;\n}\nfunction parseEIP712Item(data, type, forJSParser) {\n    if (forJSParser === void 0) { forJSParser = false; }\n    if (type === 'bytes') {\n        // Variable sized bytes need to be buffer type\n        data = (0, util_1.ensureHexBuffer)(data);\n        if (forJSParser) {\n            // For EIP712 encoding module it's easier to encode hex strings\n            data = \"0x\".concat(data.toString('hex'));\n        }\n    }\n    else if (type.slice(0, 5) === 'bytes') {\n        // Fixed sizes bytes need to be buffer type. We also add some sanity checks.\n        var nBytes = parseInt(type.slice(5));\n        data = (0, util_1.ensureHexBuffer)(data);\n        if (data.length !== nBytes)\n            throw new Error(\"Expected \".concat(type, \" type, but got \").concat(data.length, \" bytes\"));\n        if (forJSParser) {\n            // For EIP712 encoding module it's easier to encode hex strings\n            data = \"0x\".concat(data.toString('hex'));\n        }\n    }\n    else if (type === 'address') {\n        // Address must be a 20 byte buffer\n        data = (0, util_1.ensureHexBuffer)(data);\n        // Edge case to handle the 0-address\n        if (data.length === 0) {\n            data = buffer_1.Buffer.alloc(20);\n        }\n        if (data.length !== 20)\n            throw new Error(\"Address type must be 20 bytes, but got \".concat(data.length, \" bytes\"));\n        // For EIP712 encoding module it's easier to encode hex strings\n        if (forJSParser) {\n            data = \"0x\".concat(data.toString('hex'));\n        }\n    }\n    else if (constants_1.ethMsgProtocol.TYPED_DATA.typeCodes[type] &&\n        (type.indexOf('uint') > -1 || type.indexOf('int') > -1)) {\n        var b = (0, util_1.ensureHexBuffer)(data);\n        // Edge case to handle 0-value bignums\n        if (b.length === 0) {\n            b = buffer_1.Buffer.from('00', 'hex');\n        }\n        // Uint256s should be encoded as bignums.\n        if (forJSParser) {\n            // For EIP712 encoding in this module we need strings to represent the numbers\n            data = \"0x\".concat(b.toString('hex'));\n        }\n        else {\n            // `bignumber.js` is needed for `cbor` encoding, which gets sent to the Lattice and plays\n            // nicely with its firmware cbor lib.\n            // NOTE: If we instantiate a `bignumber.js` object, it will not match what `borc` creates\n            // when run inside of the browser (i.e. MetaMask). Thus we introduce this hack to make sure\n            // we are creating a compatible type.\n            // TODO: Find another cbor lib that is compataible with the firmware's lib in a browser\n            // context. This is surprisingly difficult - I tried several libs and only cbor/borc have\n            // worked (borc is a supposedly \"browser compatible\" version of cbor)\n            data = new borc_1.default.Encoder().semanticTypes[1][0](b.toString('hex'), 16);\n        }\n    }\n    else if (type === 'bool') {\n        // Booleans need to be cast to a u8\n        data = data === true ? 1 : 0;\n    }\n    // Other types don't need to be modified\n    return data;\n}\nfunction get_personal_sign_prefix(L) {\n    return buffer_1.Buffer.from(\"\\u0019Ethereum Signed Message:\\n\".concat(L.toString()), 'utf-8');\n}\nfunction get_rlp_encoded_preimage(rawTx, txType) {\n    if (txType) {\n        return buffer_1.Buffer.concat([buffer_1.Buffer.from([txType]), rlp_browser_1.default.encode(rawTx)]);\n    }\n    else {\n        return rlp_browser_1.default.encode(rawTx);\n    }\n}\nexports.default = {\n    buildEthereumMsgRequest: buildEthereumMsgRequest,\n    validateEthereumMsgResponse: validateEthereumMsgResponse,\n    buildEthereumTxRequest: buildEthereumTxRequest,\n    buildEthRawTx: buildEthRawTx,\n    hashTransaction: hashTransaction,\n    chainIds: chainIds,\n    ensureHexBuffer: util_1.ensureHexBuffer,\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Util for Bitcoin-specific functionality\nvar bech32_1 = require(\"bech32\");\nvar bs58check_1 = __importDefault(require(\"bs58check\"));\nvar buffer_1 = require(\"buffer/\");\nvar ripemd_1 = require(\"hash.js/lib/hash/ripemd\");\nvar sha_1 = require(\"hash.js/lib/hash/sha\");\nvar constants_1 = require(\"./constants\");\nvar DEFAULT_SEQUENCE = 0xffffffff;\nvar DEFAULT_SIGHASH_BUFFER = buffer_1.Buffer.from('01', 'hex'); // SIGHASH_ALL = 0x01\nvar PURPOSES = constants_1.BIP_CONSTANTS.PURPOSES, COINS = constants_1.BIP_CONSTANTS.COINS;\nvar OP = {\n    ZERO: 0x00,\n    HASH160: 0xa9,\n    DUP: 0x76,\n    EQUAL: 0x87,\n    EQUALVERIFY: 0x88,\n    CHECKSIG: 0xac,\n};\nvar SEGWIT_V0 = 0x00;\nvar SEGWIT_NATIVE_V0_PREFIX = 'bc';\nvar SEGWIT_NATIVE_V0_TESTNET_PREFIX = 'tb';\nvar FMT_SEGWIT_NATIVE_V0 = 0xd0;\nvar FMT_SEGWIT_NATIVE_V0_TESTNET = 0xf0;\nvar FMT_SEGWIT_WRAPPED = 0x05;\nvar FMT_SEGWIT_WRAPPED_TESTNET = 0xc4;\nvar FMT_LEGACY = 0x00;\nvar FMT_LEGACY_TESTNET = 0x6f;\nvar BTC_SCRIPT_TYPE_P2PKH = 0x01;\nvar BTC_SCRIPT_TYPE_P2SH_P2WPKH = 0x03;\nvar BTC_SCRIPT_TYPE_P2WPKH_V0 = 0x04;\n// We need to build two different objects here:\n// 1. bitcoinjs-lib TransactionBuilder object, which will be used in conjunction\n//    with the returned signatures to build and serialize the transaction before\n//    broadcasting it. We will replace `bitcoinjs-lib`'s signatures with the ones\n//    we get from the Lattice\n// 2. The serialized Lattice request, which includes data (outlined in the specification)\n//    that is needed to sign all of the inputs and build a change output.\n// @inputs (contained in `data`)\n// `prevOuts`: an array of objects with the following properties:\n//           a. txHash\n//           b. value\n//           c. index          -- the index of the output in the transaction\n//           d. signerPath -- the path of the address in our wallet that is signing this input\n// `recipient`: Receiving address, which must be converted to a pubkeyhash\n// `value`:     Number of satoshis to send the recipient\n// `fee`:       Number of satoshis to use for a transaction fee (should have been calculated)\n//              already based on the number of inputs plus two outputs\n// `version`:   Transaction version of the inputs. All inputs must be of the same version!\n// `isSegwit`: a boolean which determines how we serialize the data and parameterize txb\nvar buildBitcoinTxRequest = function (data) {\n    try {\n        var prevOuts = data.prevOuts, recipient = data.recipient, value = data.value, changePath = data.changePath, fee = data.fee;\n        if (!changePath)\n            throw new Error('No changePath provided.');\n        if (changePath.length !== 5)\n            throw new Error('Please provide a full change path.');\n        // Serialize the request\n        var payload_1 = buffer_1.Buffer.alloc(59 + 69 * prevOuts.length);\n        var off_1 = 0;\n        // Change version byte (a.k.a. address format byte)\n        var changeFmt = getAddressFormat(changePath);\n        payload_1.writeUInt8(changeFmt, 0);\n        off_1++;\n        // Build the change data\n        payload_1.writeUInt32LE(changePath.length, off_1);\n        off_1 += 4;\n        for (var i = 0; i < changePath.length; i++) {\n            payload_1.writeUInt32LE(changePath[i], off_1);\n            off_1 += 4;\n        }\n        // Fee is a param\n        payload_1.writeUInt32LE(fee, off_1);\n        off_1 += 4;\n        var dec = decodeAddress(recipient);\n        // Parameterize the recipient output\n        payload_1.writeUInt8(dec.versionByte, off_1);\n        off_1++;\n        dec.pkh.copy(payload_1, off_1);\n        off_1 += dec.pkh.length;\n        writeUInt64LE(value, payload_1, off_1);\n        off_1 += 8;\n        // Build the inputs from the previous outputs\n        payload_1.writeUInt8(prevOuts.length, off_1);\n        off_1++;\n        var inputSum_1 = 0;\n        prevOuts.forEach(function (input) {\n            if (!input.signerPath || input.signerPath.length !== 5) {\n                throw new Error('Full recipient path not specified ');\n            }\n            payload_1.writeUInt32LE(input.signerPath.length, off_1);\n            off_1 += 4;\n            for (var i = 0; i < input.signerPath.length; i++) {\n                payload_1.writeUInt32LE(input.signerPath[i], off_1);\n                off_1 += 4;\n            }\n            payload_1.writeUInt32LE(input.index, off_1);\n            off_1 += 4;\n            writeUInt64LE(input.value, payload_1, off_1);\n            off_1 += 8;\n            inputSum_1 += input.value;\n            var scriptType = getScriptType(input);\n            payload_1.writeUInt8(scriptType, off_1);\n            off_1++;\n            if (!buffer_1.Buffer.isBuffer(input.txHash))\n                input.txHash = buffer_1.Buffer.from(input.txHash, 'hex');\n            input.txHash.copy(payload_1, off_1);\n            off_1 += input.txHash.length;\n        });\n        // Send them back!\n        return {\n            payload: payload_1,\n            schema: constants_1.signingSchema.BTC_TRANSFER,\n            origData: data,\n            changeData: {\n                // This data helps fill in the change output\n                value: inputSum_1 - (value + fee),\n            },\n        };\n    }\n    catch (err) {\n        return { err: err };\n    }\n};\n// Serialize a transaction consisting of inputs, outputs, and some\n// metadata\n// -- inputs  = { hash, index, sig, pubkey }\n// -- outputs = { value, recipient }  // expects an address string for `recipient`\n// -- isSegwitSpend = true if the inputs are being spent using segwit\n//                    (NOTE: either ALL are being spent, or none are)\n// -- lockTime = Will probably always be 0\nvar serializeTx = function (data) {\n    var inputs = data.inputs, outputs = data.outputs, _a = data.lockTime, lockTime = _a === void 0 ? 0 : _a;\n    var payload = buffer_1.Buffer.alloc(4);\n    var off = 0;\n    // Always use version 2\n    var version = 2;\n    var useWitness = needsWitness(inputs);\n    payload.writeUInt32LE(version, off);\n    off += 4;\n    if (useWitness) {\n        payload = concat(payload, buffer_1.Buffer.from('00', 'hex')); // marker = 0x00\n        payload = concat(payload, buffer_1.Buffer.from('01', 'hex')); // flag = 0x01\n    }\n    // Serialize signed inputs\n    var numInputs = getVarInt(inputs.length);\n    payload = concat(payload, numInputs);\n    off += numInputs.length;\n    inputs.forEach(function (input) {\n        payload = concat(payload, input.hash.reverse());\n        off += input.hash.length;\n        var index = getU32LE(input.index);\n        payload = concat(payload, index);\n        off += index.length;\n        var scriptType = getScriptType(input);\n        // Build the sigScript. Note that p2wpkh does not have a scriptSig.\n        if (scriptType === BTC_SCRIPT_TYPE_P2SH_P2WPKH) {\n            // Build a vector (varSlice of varSlice) containing the redeemScript\n            var redeemScript = buildRedeemScript(input.pubkey);\n            var redeemScriptLen = getVarInt(redeemScript.length);\n            var slice = buffer_1.Buffer.concat([redeemScriptLen, redeemScript]);\n            var sliceLen = getVarInt(slice.length);\n            payload = concat(payload, sliceLen);\n            off += sliceLen.length;\n            payload = concat(payload, slice);\n            off += slice.length;\n        }\n        else if (scriptType === BTC_SCRIPT_TYPE_P2PKH) {\n            // Build the signature + pubkey script to spend this input\n            var slice = buildSig(input.sig, input.pubkey);\n            payload = concat(payload, slice);\n            off += slice.length;\n        }\n        else if (scriptType === BTC_SCRIPT_TYPE_P2WPKH_V0) {\n            var emptyScript = buffer_1.Buffer.from('00', 'hex');\n            payload = concat(payload, emptyScript);\n            off += 1;\n        }\n        // Use the default sequence for all transactions\n        var sequence = getU32LE(DEFAULT_SEQUENCE);\n        payload = concat(payload, sequence);\n        off += sequence.length;\n    });\n    // Serialize outputs\n    var numOutputs = getVarInt(outputs.length);\n    payload = concat(payload, numOutputs);\n    off += numOutputs.length;\n    outputs.forEach(function (output) {\n        var value = getU64LE(output.value);\n        payload = concat(payload, value);\n        off += value.length;\n        // Build the output locking script and write it as a var slice\n        var script = buildLockingScript(output.recipient);\n        var scriptLen = getVarInt(script.length);\n        payload = concat(payload, scriptLen);\n        off += scriptLen.length;\n        payload = concat(payload, script);\n        off += script.length;\n    });\n    // Add witness data if needed\n    if (useWitness) {\n        var sigs = [];\n        var pubkeys = [];\n        for (var i = 0; i < inputs.length; i++) {\n            sigs.push(inputs[i].sig);\n            pubkeys.push(inputs[i].pubkey);\n        }\n        var witnessSlice = buildWitness(sigs, pubkeys);\n        payload = concat(payload, witnessSlice);\n        off += witnessSlice.length;\n    }\n    // Finish with locktime\n    return buffer_1.Buffer.concat([payload, getU32LE(lockTime)]).toString('hex');\n};\n// Convert a pubkeyhash to a bitcoin base58check address with a version byte\nvar getBitcoinAddress = function (pubkeyhash, version) {\n    var bech32Prefix = null;\n    var bech32Version = null;\n    if (version === FMT_SEGWIT_NATIVE_V0) {\n        bech32Prefix = SEGWIT_NATIVE_V0_PREFIX;\n        bech32Version = SEGWIT_V0;\n    }\n    else if (version === FMT_SEGWIT_NATIVE_V0_TESTNET) {\n        bech32Prefix = SEGWIT_NATIVE_V0_TESTNET_PREFIX;\n        bech32Version = SEGWIT_V0;\n    }\n    if (bech32Prefix !== null && bech32Version !== null) {\n        var words = bech32_1.bech32.toWords(pubkeyhash);\n        words.unshift(bech32Version);\n        return bech32_1.bech32.encode(bech32Prefix, words);\n    }\n    else {\n        return bs58check_1.default.encode(buffer_1.Buffer.concat([buffer_1.Buffer.from([version]), pubkeyhash]));\n    }\n};\n// Builder utils\n//-----------------------\nfunction buildRedeemScript(pubkey) {\n    var redeemScript = buffer_1.Buffer.alloc(22);\n    var shaHash = buffer_1.Buffer.from((0, sha_1.sha256)().update(pubkey).digest('hex'), 'hex');\n    var pubkeyhash = buffer_1.Buffer.from((0, ripemd_1.ripemd160)().update(shaHash).digest('hex'), 'hex');\n    redeemScript.writeUInt8(OP.ZERO, 0);\n    redeemScript.writeUInt8(pubkeyhash.length, 1);\n    pubkeyhash.copy(redeemScript, 2);\n    return redeemScript;\n}\n// Var slice of signature + var slice of pubkey\nfunction buildSig(sig, pubkey) {\n    sig = buffer_1.Buffer.concat([sig, DEFAULT_SIGHASH_BUFFER]);\n    var sigLen = getVarInt(sig.length);\n    var pubkeyLen = getVarInt(pubkey.length);\n    var slice = buffer_1.Buffer.concat([sigLen, sig, pubkeyLen, pubkey]);\n    var len = getVarInt(slice.length);\n    return buffer_1.Buffer.concat([len, slice]);\n}\n// Witness is written as a \"vector\", which is a list of varSlices\n// prefixed by the number of items\nfunction buildWitness(sigs, pubkeys) {\n    var witness = buffer_1.Buffer.alloc(0);\n    // Two items in each vector (sig, pubkey)\n    var len = buffer_1.Buffer.alloc(1);\n    len.writeUInt8(2, 0);\n    for (var i = 0; i < sigs.length; i++) {\n        var sig = buffer_1.Buffer.concat([sigs[i], DEFAULT_SIGHASH_BUFFER]);\n        var sigLen = getVarInt(sig.length);\n        var pubkey = pubkeys[i];\n        var pubkeyLen = getVarInt(pubkey.length);\n        witness = buffer_1.Buffer.concat([witness, len, sigLen, sig, pubkeyLen, pubkey]);\n    }\n    return witness;\n}\n// Locking script buiders\n//-----------------------\nfunction buildLockingScript(address) {\n    var dec = decodeAddress(address);\n    switch (dec.versionByte) {\n        case FMT_SEGWIT_NATIVE_V0:\n        case FMT_SEGWIT_NATIVE_V0_TESTNET:\n            return buildP2wpkhLockingScript(dec.pkh);\n        case FMT_SEGWIT_WRAPPED:\n        case FMT_SEGWIT_WRAPPED_TESTNET:\n            return buildP2shLockingScript(dec.pkh);\n        case FMT_LEGACY:\n        case FMT_LEGACY_TESTNET:\n            return buildP2pkhLockingScript(dec.pkh);\n        default:\n            throw new Error(\"Unknown version byte: \".concat(dec.versionByte, \". Cannot build BTC transaction.\"));\n    }\n}\nfunction buildP2pkhLockingScript(pubkeyhash) {\n    var out = buffer_1.Buffer.alloc(5 + pubkeyhash.length);\n    var off = 0;\n    out.writeUInt8(OP.DUP, off);\n    off++;\n    out.writeUInt8(OP.HASH160, off);\n    off++;\n    out.writeUInt8(pubkeyhash.length, off);\n    off++;\n    pubkeyhash.copy(out, off);\n    off += pubkeyhash.length;\n    out.writeUInt8(OP.EQUALVERIFY, off);\n    off++;\n    out.writeUInt8(OP.CHECKSIG, off);\n    off++;\n    return out;\n}\nfunction buildP2shLockingScript(pubkeyhash) {\n    var out = buffer_1.Buffer.alloc(3 + pubkeyhash.length);\n    var off = 0;\n    out.writeUInt8(OP.HASH160, off);\n    off++;\n    out.writeUInt8(pubkeyhash.length, off);\n    off++;\n    pubkeyhash.copy(out, off);\n    off += pubkeyhash.length;\n    out.writeUInt8(OP.EQUAL, off);\n    off++;\n    return out;\n}\nfunction buildP2wpkhLockingScript(pubkeyhash) {\n    var out = buffer_1.Buffer.alloc(2 + pubkeyhash.length);\n    out.writeUInt8(OP.ZERO, 0);\n    out.writeUInt8(pubkeyhash.length, 1);\n    pubkeyhash.copy(out, 2);\n    return out;\n}\n// Static Utils\n//----------------------\nfunction concat(base, addition) {\n    return buffer_1.Buffer.concat([base, addition]);\n}\nfunction getU64LE(x) {\n    var buffer = buffer_1.Buffer.alloc(8);\n    writeUInt64LE(x, buffer, 0);\n    return buffer;\n}\nfunction getU32LE(x) {\n    var buffer = buffer_1.Buffer.alloc(4);\n    buffer.writeUInt32LE(x, 0);\n    return buffer;\n}\nfunction getVarInt(x) {\n    var buffer;\n    if (x < 0xfd) {\n        buffer = buffer_1.Buffer.alloc(1);\n        buffer.writeUInt8(x, 0);\n    }\n    else if (x <= 0xffff) {\n        buffer = buffer_1.Buffer.alloc(3);\n        buffer.writeUInt8(0xfd, 0);\n        buffer.writeUInt16LE(x, 1);\n    }\n    else if (x < 0xffffffff) {\n        buffer = buffer_1.Buffer.alloc(5);\n        buffer.writeUInt8(0xfe, 0);\n        buffer.writeUInt32LE(x, 1);\n    }\n    else {\n        buffer = buffer_1.Buffer.alloc(9);\n        buffer.writeUInt8(0xff, 0);\n        buffer.writeUInt32LE(x >>> 0, 1);\n        buffer.writeUInt32LE((x / 0x100000000) | 0, 5);\n    }\n    return buffer;\n}\nfunction writeUInt64LE(n, buf, off) {\n    if (typeof n === 'number')\n        n = n.toString(16);\n    var preBuf = buffer_1.Buffer.alloc(8);\n    var nStr = n.length % 2 === 0 ? n.toString(16) : \"0\".concat(n.toString(16));\n    var nBuf = buffer_1.Buffer.from(nStr, 'hex');\n    nBuf.reverse().copy(preBuf, 0);\n    preBuf.copy(buf, off);\n    return preBuf;\n}\nfunction decodeAddress(address) {\n    var versionByte, pkh;\n    try {\n        versionByte = bs58check_1.default.decode(address)[0];\n        pkh = bs58check_1.default.decode(address).slice(1);\n    }\n    catch (err) {\n        try {\n            var bech32Dec = bech32_1.bech32.decode(address);\n            if (bech32Dec.prefix === SEGWIT_NATIVE_V0_PREFIX)\n                versionByte = FMT_SEGWIT_NATIVE_V0;\n            else if (bech32Dec.prefix === SEGWIT_NATIVE_V0_TESTNET_PREFIX)\n                versionByte = FMT_SEGWIT_NATIVE_V0_TESTNET;\n            else\n                throw new Error('Unsupported prefix: must be bc or tb.');\n            if (bech32Dec.words[0] !== 0)\n                throw new Error(\"Unsupported segwit version: must be 0, got \".concat(bech32Dec.words[0]));\n            pkh = buffer_1.Buffer.from(bech32_1.bech32.fromWords(bech32Dec.words.slice(1)));\n        }\n        catch (err) {\n            throw new Error(\"Unable to decode address: \".concat(address, \": \").concat(err.message));\n        }\n    }\n    return { versionByte: versionByte, pkh: pkh };\n}\n// Determine the address format (a.k.a. \"version\") depending on the\n// purpose of the dervation path.\nfunction getAddressFormat(path) {\n    if (path.length < 2)\n        throw new Error('Path must be >1 index');\n    var purpose = path[0];\n    var coin = path[1];\n    if (purpose === PURPOSES.BTC_SEGWIT && coin === COINS.BTC) {\n        return FMT_SEGWIT_NATIVE_V0;\n    }\n    else if (purpose === PURPOSES.BTC_SEGWIT && coin === COINS.BTC_TESTNET) {\n        return FMT_SEGWIT_NATIVE_V0_TESTNET;\n    }\n    else if (purpose === PURPOSES.BTC_WRAPPED_SEGWIT && coin === COINS.BTC) {\n        return FMT_SEGWIT_WRAPPED;\n    }\n    else if (purpose === PURPOSES.BTC_WRAPPED_SEGWIT &&\n        coin === COINS.BTC_TESTNET) {\n        return FMT_SEGWIT_WRAPPED_TESTNET;\n    }\n    else if (purpose === PURPOSES.BTC_LEGACY && coin === COINS.BTC) {\n        return FMT_LEGACY;\n    }\n    else if (purpose === PURPOSES.BTC_LEGACY && coin === COINS.BTC_TESTNET) {\n        return FMT_LEGACY_TESTNET;\n    }\n    else {\n        throw new Error('Invalid Bitcoin path provided. Cannot determine address format.');\n    }\n}\n// Determine the script type for an input based on its owner's derivation\n// path's `purpose` index.\n// We do not support p2sh and only issue single-key addresses from the Lattice\n// so we can determine this based on path alone.\nfunction getScriptType(input) {\n    switch (input.signerPath[0]) {\n        case PURPOSES.BTC_LEGACY:\n            return BTC_SCRIPT_TYPE_P2PKH;\n        case PURPOSES.BTC_WRAPPED_SEGWIT:\n            return BTC_SCRIPT_TYPE_P2SH_P2WPKH;\n        case PURPOSES.BTC_SEGWIT:\n            return BTC_SCRIPT_TYPE_P2WPKH_V0;\n        default:\n            throw new Error(\"Unsupported path purpose (\".concat(input.signerPath[0], \"): cannot determine BTC script type.\"));\n    }\n}\n// Determine if a a transaction should have a witness portion.\n// This will return true if any input is p2sh(p2wpkh) or p2wpkh.\n// We determine the script type based on the derivation path.\nfunction needsWitness(inputs) {\n    var w = false;\n    inputs.forEach(function (input) {\n        if (input.signerPath[0] === PURPOSES.BTC_SEGWIT ||\n            input.signerPath[0] === PURPOSES.BTC_WRAPPED_SEGWIT) {\n            w = true;\n        }\n    });\n    return w;\n}\nexports.default = {\n    buildBitcoinTxRequest: buildBitcoinTxRequest,\n    serializeTx: serializeTx,\n    getBitcoinAddress: getBitcoinAddress,\n    getAddressFormat: getAddressFormat,\n};\n","var core = require(\"./commonjs/core.js\");\nObject.assign(exports, core);\n\nvar duplex = require(\"./commonjs/duplex.js\");\nObject.assign(exports, duplex);\n\nvar helpers = require(\"./commonjs/helpers.js\");\nexports.JsonPatchError = helpers.PatchError;\nexports.deepClone = helpers._deepClone;\nexports.escapePathComponent = helpers.escapePathComponent;\nexports.unescapePathComponent = helpers.unescapePathComponent;\n","var Stack = require('./_Stack'),\n    arrayEach = require('./_arrayEach'),\n    assignValue = require('./_assignValue'),\n    baseAssign = require('./_baseAssign'),\n    baseAssignIn = require('./_baseAssignIn'),\n    cloneBuffer = require('./_cloneBuffer'),\n    copyArray = require('./_copyArray'),\n    copySymbols = require('./_copySymbols'),\n    copySymbolsIn = require('./_copySymbolsIn'),\n    getAllKeys = require('./_getAllKeys'),\n    getAllKeysIn = require('./_getAllKeysIn'),\n    getTag = require('./_getTag'),\n    initCloneArray = require('./_initCloneArray'),\n    initCloneByTag = require('./_initCloneByTag'),\n    initCloneObject = require('./_initCloneObject'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isMap = require('./isMap'),\n    isObject = require('./isObject'),\n    isSet = require('./isSet'),\n    keys = require('./keys'),\n    keysIn = require('./keysIn');\n\n/** Used to compose bitmasks for cloning. */\nvar CLONE_DEEP_FLAG = 1,\n    CLONE_FLAT_FLAG = 2,\n    CLONE_SYMBOLS_FLAG = 4;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} bitmask The bitmask flags.\n *  1 - Deep clone\n *  2 - Flatten inherited properties\n *  4 - Clone symbols\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, bitmask, customizer, key, object, stack) {\n  var result,\n      isDeep = bitmask & CLONE_DEEP_FLAG,\n      isFlat = bitmask & CLONE_FLAT_FLAG,\n      isFull = bitmask & CLONE_SYMBOLS_FLAG;\n\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      result = (isFlat || isFunc) ? {} : initCloneObject(value);\n      if (!isDeep) {\n        return isFlat\n          ? copySymbolsIn(value, baseAssignIn(result, value))\n          : copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (isSet(value)) {\n    value.forEach(function(subValue) {\n      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\n    });\n  } else if (isMap(value)) {\n    value.forEach(function(subValue, key) {\n      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));\n    });\n  }\n\n  var keysFunc = isFull\n    ? (isFlat ? getAllKeysIn : getAllKeys)\n    : (isFlat ? keysIn : keys);\n\n  var props = isArr ? undefined : keysFunc(value);\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));\n  });\n  return result;\n}\n\nmodule.exports = baseClone;\n","var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n","var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n","'use strict'\nvar Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\n\nvar messages = require('../messages.json')\n\nvar ec = new EC('secp256k1')\nvar ecparams = ec.curve\n\nfunction loadCompressedPublicKey (first, xBuffer) {\n  var x = new BN(xBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0) return null\n  x = x.toRed(ecparams.red)\n\n  // compute corresponding Y\n  var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt()\n  if ((first === 0x03) !== y.isOdd()) y = y.redNeg()\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadUncompressedPublicKey (first, xBuffer, yBuffer) {\n  var x = new BN(xBuffer)\n  var y = new BN(yBuffer)\n\n  // overflow\n  if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null\n\n  x = x.toRed(ecparams.red)\n  y = y.toRed(ecparams.red)\n\n  // is odd flag\n  if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null\n\n  // x*x*x + b = y*y\n  var x3 = x.redSqr().redIMul(x)\n  if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null\n\n  return ec.keyPair({ pub: { x: x, y: y } })\n}\n\nfunction loadPublicKey (publicKey) {\n  var first = publicKey[0]\n  switch (first) {\n    case 0x02:\n    case 0x03:\n      if (publicKey.length !== 33) return null\n      return loadCompressedPublicKey(first, publicKey.slice(1, 33))\n    case 0x04:\n    case 0x06:\n    case 0x07:\n      if (publicKey.length !== 65) return null\n      return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65))\n    default:\n      return null\n  }\n}\n\nexports.privateKeyVerify = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.cmp(ecparams.n) < 0 && !bn.isZero()\n}\n\nexports.privateKeyExport = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.privateKeyNegate = function (privateKey) {\n  var bn = new BN(privateKey)\n  return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyModInverse = function (privateKey) {\n  var bn = new BN(privateKey)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID)\n\n  return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakAdd = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  bn.iadd(new BN(privateKey))\n  if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n)\n  if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.privateKeyTweakMul = function (privateKey, tweak) {\n  var bn = new BN(tweak)\n  if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL)\n\n  bn.imul(new BN(privateKey))\n  if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n)\n\n  return bn.toArrayLike(Buffer, 'be', 32)\n}\n\nexports.publicKeyCreate = function (privateKey, compressed) {\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL)\n\n  return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true))\n}\n\nexports.publicKeyConvert = function (publicKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return Buffer.from(pair.getPublic(compressed, true))\n}\n\nexports.publicKeyVerify = function (publicKey) {\n  return loadPublicKey(publicKey) !== null\n}\n\nexports.publicKeyTweakAdd = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  var point = ecparams.g.mul(tweak).add(pair.pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.publicKeyTweakMul = function (publicKey, tweak, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  tweak = new BN(tweak)\n  if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL)\n\n  return Buffer.from(pair.pub.mul(tweak).encode(true, compressed))\n}\n\nexports.publicKeyCombine = function (publicKeys, compressed) {\n  var pairs = new Array(publicKeys.length)\n  for (var i = 0; i < publicKeys.length; ++i) {\n    pairs[i] = loadPublicKey(publicKeys[i])\n    if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n  }\n\n  var point = pairs[0].pub\n  for (var j = 1; j < pairs.length; ++j) point = point.add(pairs[j].pub)\n  if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL)\n\n  return Buffer.from(point.encode(true, compressed))\n}\n\nexports.signatureNormalize = function (signature) {\n  var r = new BN(signature.slice(0, 32))\n  var s = new BN(signature.slice(32, 64))\n  if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  var result = Buffer.from(signature)\n  if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32)\n\n  return result\n}\n\nexports.signatureExport = function (signature) {\n  var r = signature.slice(0, 32)\n  var s = signature.slice(32, 64)\n  if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  return { r: r, s: s }\n}\n\nexports.signatureImport = function (sigObj) {\n  var r = new BN(sigObj.r)\n  if (r.cmp(ecparams.n) >= 0) r = new BN(0)\n\n  var s = new BN(sigObj.s)\n  if (s.cmp(ecparams.n) >= 0) s = new BN(0)\n\n  return Buffer.concat([\n    r.toArrayLike(Buffer, 'be', 32),\n    s.toArrayLike(Buffer, 'be', 32)\n  ])\n}\n\nexports.sign = function (message, privateKey, noncefn, data) {\n  if (typeof noncefn === 'function') {\n    var getNonce = noncefn\n    noncefn = function (counter) {\n      var nonce = getNonce(message, privateKey, null, data, counter)\n      if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n      return new BN(nonce)\n    }\n  }\n\n  var d = new BN(privateKey)\n  if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL)\n\n  var result = ec.sign(message, privateKey, { canonical: true, k: noncefn, pers: data })\n  return {\n    signature: Buffer.concat([\n      result.r.toArrayLike(Buffer, 'be', 32),\n      result.s.toArrayLike(Buffer, 'be', 32)\n    ]),\n    recovery: result.recoveryParam\n  }\n}\n\nexports.verify = function (message, signature, publicKey) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n  if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false\n\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  return ec.verify(message, sigObj, { x: pair.pub.x, y: pair.pub.y })\n}\n\nexports.recover = function (message, signature, recovery, compressed) {\n  var sigObj = { r: signature.slice(0, 32), s: signature.slice(32, 64) }\n\n  var sigr = new BN(sigObj.r)\n  var sigs = new BN(sigObj.s)\n  if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL)\n\n  try {\n    if (sigr.isZero() || sigs.isZero()) throw new Error()\n\n    var point = ec.recoverPubKey(message, sigObj, recovery)\n    return Buffer.from(point.encode(true, compressed))\n  } catch (err) {\n    throw new Error(messages.ECDSA_RECOVER_FAIL)\n  }\n}\n\nexports.ecdh = function (publicKey, privateKey) {\n  var shared = exports.ecdhUnsafe(publicKey, privateKey, true)\n  return createHash('sha256').update(shared).digest()\n}\n\nexports.ecdhUnsafe = function (publicKey, privateKey, compressed) {\n  var pair = loadPublicKey(publicKey)\n  if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL)\n\n  var scalar = new BN(privateKey)\n  if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL)\n\n  return Buffer.from(pair.pub.mul(scalar).encode(true, compressed))\n}\n","'use strict'\nvar assert = require('./assert')\nvar der = require('./der')\nvar messages = require('./messages.json')\n\nfunction initCompressedValue (value, defaultValue) {\n  if (value === undefined) return defaultValue\n\n  assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID)\n  return value\n}\n\nmodule.exports = function (secp256k1) {\n  return {\n    privateKeyVerify: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)\n    },\n\n    privateKeyExport: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n      var publicKey = secp256k1.privateKeyExport(privateKey, compressed)\n\n      return der.privateKeyExport(privateKey, publicKey, compressed)\n    },\n\n    privateKeyImport: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n\n      privateKey = der.privateKeyImport(privateKey)\n      if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey\n\n      throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL)\n    },\n\n    privateKeyNegate: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyNegate(privateKey)\n    },\n\n    privateKeyModInverse: function (privateKey) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.privateKeyModInverse(privateKey)\n    },\n\n    privateKeyTweakAdd: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakAdd(privateKey, tweak)\n    },\n\n    privateKeyTweakMul: function (privateKey, tweak) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      return secp256k1.privateKeyTweakMul(privateKey, tweak)\n    },\n\n    publicKeyCreate: function (privateKey, compressed) {\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCreate(privateKey, compressed)\n    },\n\n    publicKeyConvert: function (publicKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyConvert(publicKey, compressed)\n    },\n\n    publicKeyVerify: function (publicKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      return secp256k1.publicKeyVerify(publicKey)\n    },\n\n    publicKeyTweakAdd: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed)\n    },\n\n    publicKeyTweakMul: function (publicKey, tweak, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID)\n      assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed)\n    },\n\n    publicKeyCombine: function (publicKeys, compressed) {\n      assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID)\n      assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID)\n      for (var i = 0; i < publicKeys.length; ++i) {\n        assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID)\n        assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n      }\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.publicKeyCombine(publicKeys, compressed)\n    },\n\n    signatureNormalize: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      return secp256k1.signatureNormalize(signature)\n    },\n\n    signatureExport: function (signature) {\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = secp256k1.signatureExport(signature)\n      return der.signatureExport(sigObj)\n    },\n\n    signatureImport: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImport(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    signatureImportLax: function (sig) {\n      assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      var sigObj = der.signatureImportLax(sig)\n      if (sigObj) return secp256k1.signatureImport(sigObj)\n\n      throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL)\n    },\n\n    sign: function (message, privateKey, options) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      var data = null\n      var noncefn = null\n      if (options !== undefined) {\n        assert.isObject(options, messages.OPTIONS_TYPE_INVALID)\n\n        if (options.data !== undefined) {\n          assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID)\n          assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID)\n          data = options.data\n        }\n\n        if (options.noncefn !== undefined) {\n          assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID)\n          noncefn = options.noncefn\n        }\n      }\n\n      return secp256k1.sign(message, privateKey, noncefn, data)\n    },\n\n    verify: function (message, signature, publicKey) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      return secp256k1.verify(message, signature, publicKey)\n    },\n\n    recover: function (message, signature, recovery, compressed) {\n      assert.isBuffer(message, messages.MSG32_TYPE_INVALID)\n      assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID)\n\n      assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID)\n      assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID)\n\n      assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID)\n      assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.recover(message, signature, recovery, compressed)\n    },\n\n    ecdh: function (publicKey, privateKey) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      return secp256k1.ecdh(publicKey, privateKey)\n    },\n\n    ecdhUnsafe: function (publicKey, privateKey, compressed) {\n      assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID)\n      assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID)\n\n      assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID)\n      assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID)\n\n      compressed = initCompressedValue(compressed, true)\n\n      return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed)\n    }\n  }\n}\n","\"use strict\";\n\nexports.__esModule = true;\nexports.CardanoTxWitnessType = exports.CardanoTxSigningMode = exports.CardanoPoolRelayType = exports.CardanoNativeScriptHashDisplayFormat = exports.CardanoNativeScriptType = exports.CardanoCertificateType = exports.CardanoAddressType = void 0;\n\nvar _protobuf = require(\"../trezor/protobuf\");\n\nexports.CardanoAddressType = _protobuf.Enum_CardanoAddressType;\nexports.CardanoCertificateType = _protobuf.Enum_CardanoCertificateType;\nexports.CardanoNativeScriptType = _protobuf.Enum_CardanoNativeScriptType;\nexports.CardanoNativeScriptHashDisplayFormat = _protobuf.Enum_CardanoNativeScriptHashDisplayFormat;\nexports.CardanoPoolRelayType = _protobuf.Enum_CardanoPoolRelayType;\nexports.CardanoTxSigningMode = _protobuf.Enum_CardanoTxSigningMode;\nexports.CardanoTxWitnessType = _protobuf.Enum_CardanoTxWitnessType;","\"use strict\";\n\nvar CONSTANTS = _interopRequireWildcard(require(\"../constants\"));\n\nvar P = _interopRequireWildcard(require(\"./params\"));\n\nvar Device = _interopRequireWildcard(require(\"./trezor/device\"));\n\nvar Mgmnt = _interopRequireWildcard(require(\"./trezor/management\"));\n\nvar Protobuf = _interopRequireWildcard(require(\"./trezor/protobuf\"));\n\nvar Account = _interopRequireWildcard(require(\"./account\"));\n\nvar Bitcoin = _interopRequireWildcard(require(\"./networks/bitcoin\"));\n\nvar Binance = _interopRequireWildcard(require(\"./networks/binance\"));\n\nvar Cardano = _interopRequireWildcard(require(\"./networks/cardano\"));\n\nvar CoinInfo = _interopRequireWildcard(require(\"./networks/coinInfo\"));\n\nvar EOS = _interopRequireWildcard(require(\"./networks/eos\"));\n\nvar Ethereum = _interopRequireWildcard(require(\"./networks/ethereum\"));\n\nvar NEM = _interopRequireWildcard(require(\"./networks/nem\"));\n\nvar Ripple = _interopRequireWildcard(require(\"./networks/ripple\"));\n\nvar Stellar = _interopRequireWildcard(require(\"./networks/stellar\"));\n\nvar Tezos = _interopRequireWildcard(require(\"./networks/tezos\"));\n\nvar Misc = _interopRequireWildcard(require(\"./misc\"));\n\nvar Events = _interopRequireWildcard(require(\"./events\"));\n\nvar Blockchain = _interopRequireWildcard(require(\"./backend/blockchain\"));\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }","\"use strict\";\n\nvar _constants = require(\"../constants\");","\"use strict\";\n\nvar _constants = require(\"../../constants\");","\"use strict\";\n\nvar _constants = require(\"../../constants\");","\"use strict\";\n\nexports.__esModule = true;\nexports.FIAT_RATES_UPDATE = exports.NOTIFICATION = exports.BLOCK = exports.CONNECT = exports.ERROR = void 0;\n// blockchain events\nvar ERROR = 'blockchain-error';\nexports.ERROR = ERROR;\nvar CONNECT = 'blockchain-connect';\nexports.CONNECT = CONNECT;\nvar BLOCK = 'blockchain-block';\nexports.BLOCK = BLOCK;\nvar NOTIFICATION = 'blockchain-notification';\nexports.NOTIFICATION = NOTIFICATION;\nvar FIAT_RATES_UPDATE = 'fiat-rates-update';\nexports.FIAT_RATES_UPDATE = FIAT_RATES_UPDATE;","\"use strict\";\n\nexports.__esModule = true;\nexports.CLOSE_WINDOW = exports.CANCEL_POPUP_REQUEST = exports.CLOSED = exports.HANDSHAKE = exports.EXTENSION_USB_PERMISSIONS = exports.ERROR = exports.INIT = exports.LOADED = exports.BOOTSTRAP = void 0;\n// Message called from popup.html inline script before \"window.onload\" event. This is first message from popup to window.opener.\nvar BOOTSTRAP = 'popup-bootstrap'; // Message from popup.js to window.opener, called after \"window.onload\" event. This is second message from popup to window.opener.\n\nexports.BOOTSTRAP = BOOTSTRAP;\nvar LOADED = 'popup-loaded'; // Message from window.opener to popup.js. Send settings to popup. This is first message from window.opener to popup.\n\nexports.LOADED = LOADED;\nvar INIT = 'popup-init'; // Error message from popup to window.opener. Could be thrown during popup initialization process (POPUP.INIT)\n\nexports.INIT = INIT;\nvar ERROR = 'popup-error'; // Message to webextensions, opens \"trezor-usb-permission.html\" within webextension\n\nexports.ERROR = ERROR;\nvar EXTENSION_USB_PERMISSIONS = 'open-usb-permissions'; // Message called from both [popup > iframe] then [iframe > popup] in this exact order.\n// Firstly popup call iframe to resolve popup promise in Core\n// Then iframe reacts to POPUP.HANDSHAKE message and sends ConnectSettings, transport information and requested method details back to popup\n\nexports.EXTENSION_USB_PERMISSIONS = EXTENSION_USB_PERMISSIONS;\nvar HANDSHAKE = 'popup-handshake'; // Event emitted from PopupManager at the end of popup closing process.\n// Sent from popup thru window.opener to an iframe because message channel between popup and iframe is no longer available\n\nexports.HANDSHAKE = HANDSHAKE;\nvar CLOSED = 'popup-closed'; // Message called from iframe to popup, it means that popup will not be needed (example: Blockchain methods are not using popup at all)\n// This will close active popup window and/or clear opening process in PopupManager (maybe popup wasn't opened yet)\n\nexports.CLOSED = CLOSED;\nvar CANCEL_POPUP_REQUEST = 'ui-cancel-popup-request'; // Message called from inline element in popup.html (window.closeWindow), this is used only with webextensions to properly handle popup close event\n\nexports.CANCEL_POPUP_REQUEST = CANCEL_POPUP_REQUEST;\nvar CLOSE_WINDOW = 'window.close';\nexports.CLOSE_WINDOW = CLOSE_WINDOW;","\"use strict\";\n\nexports.__esModule = true;\nexports.TYPES = void 0;\nvar TYPES = Object.freeze({\n  bitcoin: 'Bitcoin',\n  ethereum: 'Ethereum',\n  eos: 'Eos',\n  nem: 'NEM',\n  stellar: 'Stellar',\n  cardano: 'Cardano',\n  ripple: 'Ripple',\n  tezos: 'Tezors',\n  binance: 'Binance'\n});\nexports.TYPES = TYPES;","\"use strict\";\n\nexports.__esModule = true;\nexports.START_PENDING = exports.DISABLE_WEBUSB = exports.REQUEST = exports.STREAM = exports.UPDATE = exports.ERROR = exports.START = void 0;\nvar START = 'transport-start';\nexports.START = START;\nvar ERROR = 'transport-error';\nexports.ERROR = ERROR;\nvar UPDATE = 'transport-update';\nexports.UPDATE = UPDATE;\nvar STREAM = 'transport-stream';\nexports.STREAM = STREAM;\nvar REQUEST = 'transport-request_device';\nexports.REQUEST = REQUEST;\nvar DISABLE_WEBUSB = 'transport-disable_webusb';\nexports.DISABLE_WEBUSB = DISABLE_WEBUSB;\nvar START_PENDING = 'transport-start_pending';\nexports.START_PENDING = START_PENDING;","\"use strict\";\n\nexports.__esModule = true;\nexports.CALL = exports.ERROR = exports.INIT = exports.LOADED = exports.BOOTSTRAP = void 0;\n// Message called from iframe.html inline script before \"window.onload\" event. This is first message from iframe to window.opener.\nvar BOOTSTRAP = 'iframe-bootstrap'; // Message from iframe.js to window.opener, called after \"window.onload\" event. This is second message from iframe to window.opener.\n\nexports.BOOTSTRAP = BOOTSTRAP;\nvar LOADED = 'iframe-loaded'; // Message from window.opener to iframe.js\n\nexports.LOADED = LOADED;\nvar INIT = 'iframe-init'; // Error message from iframe.js to window.opener. Could be thrown during iframe initialization process\n\nexports.INIT = INIT;\nvar ERROR = 'iframe-error'; // Message from window.opener to iframe. Call method\n\nexports.ERROR = ERROR;\nvar CALL = 'iframe-call';\nexports.CALL = CALL;","\"use strict\";\n\nexports.__esModule = true;\nexports.POOL_RELAY_TYPE = exports.CERTIFICATE_TYPE = exports.ADDRESS_TYPE = exports.NETWORK_IDS = exports.PROTOCOL_MAGICS = void 0;\nvar PROTOCOL_MAGICS = Object.freeze({\n  mainnet: 764824073,\n  testnet: 42\n});\nexports.PROTOCOL_MAGICS = PROTOCOL_MAGICS;\nvar NETWORK_IDS = Object.freeze({\n  mainnet: 1,\n  testnet: 0\n}); // constants below are deprecated\n// use `CardanoAddressType`, `CardanoCertificateType` and `CardanoPoolRelayType` from protobuf instead\n\nexports.NETWORK_IDS = NETWORK_IDS;\nvar ADDRESS_TYPE = Object.freeze({\n  Base: 0,\n  Pointer: 4,\n  Enterprise: 6,\n  Byron: 8,\n  Reward: 14\n});\nexports.ADDRESS_TYPE = ADDRESS_TYPE;\nvar CERTIFICATE_TYPE = Object.freeze({\n  StakeRegistration: 0,\n  StakeDeregistration: 1,\n  StakeDelegation: 2,\n  StakePoolRegistration: 3\n});\nexports.CERTIFICATE_TYPE = CERTIFICATE_TYPE;\nvar POOL_RELAY_TYPE = Object.freeze({\n  SingleHostIp: 0,\n  SingleHostName: 1,\n  MultipleHostName: 2\n});\nexports.POOL_RELAY_TYPE = POOL_RELAY_TYPE;","\"use strict\";\n\nexports.__esModule = true;\nexports.WAIT_FOR_SELECTION = exports.WORD = exports.PASSPHRASE_ON_DEVICE = exports.PASSPHRASE = exports.PIN = exports.BUTTON = exports.LOADING = exports.USED_ELSEWHERE = exports.RELEASED = exports.ACQUIRED = exports.RELEASE = exports.ACQUIRE = exports.CHANGED = exports.DISCONNECT = exports.CONNECT_UNACQUIRED = exports.CONNECT = void 0;\n// device list events\nvar CONNECT = 'device-connect';\nexports.CONNECT = CONNECT;\nvar CONNECT_UNACQUIRED = 'device-connect_unacquired';\nexports.CONNECT_UNACQUIRED = CONNECT_UNACQUIRED;\nvar DISCONNECT = 'device-disconnect';\nexports.DISCONNECT = DISCONNECT;\nvar CHANGED = 'device-changed';\nexports.CHANGED = CHANGED;\nvar ACQUIRE = 'device-acquire';\nexports.ACQUIRE = ACQUIRE;\nvar RELEASE = 'device-release';\nexports.RELEASE = RELEASE;\nvar ACQUIRED = 'device-acquired';\nexports.ACQUIRED = ACQUIRED;\nvar RELEASED = 'device-released';\nexports.RELEASED = RELEASED;\nvar USED_ELSEWHERE = 'device-used_elsewhere';\nexports.USED_ELSEWHERE = USED_ELSEWHERE;\nvar LOADING = 'device-loading'; // trezor-link events in protobuf format\n\nexports.LOADING = LOADING;\nvar BUTTON = 'button';\nexports.BUTTON = BUTTON;\nvar PIN = 'pin';\nexports.PIN = PIN;\nvar PASSPHRASE = 'passphrase';\nexports.PASSPHRASE = PASSPHRASE;\nvar PASSPHRASE_ON_DEVICE = 'passphrase_on_device';\nexports.PASSPHRASE_ON_DEVICE = PASSPHRASE_ON_DEVICE;\nvar WORD = 'word'; // custom\n\nexports.WORD = WORD;\nvar WAIT_FOR_SELECTION = 'device-wait_for_selection';\nexports.WAIT_FOR_SELECTION = WAIT_FOR_SELECTION;","\"use strict\";\n\nexports.__esModule = true;\nexports.IFRAME_FAILURE = exports.ADDRESS_VALIDATION = exports.BUNDLE_PROGRESS = exports.LOGIN_CHALLENGE_RESPONSE = exports.LOGIN_CHALLENGE_REQUEST = exports.CUSTOM_MESSAGE_RESPONSE = exports.CUSTOM_MESSAGE_REQUEST = exports.CHANGE_SETTINGS = exports.RECEIVE_WORD = exports.RECEIVE_FEE = exports.RECEIVE_ACCOUNT = exports.CHANGE_ACCOUNT = exports.RECEIVE_DEVICE = exports.RECEIVE_PASSPHRASE = exports.RECEIVE_PIN = exports.RECEIVE_CONFIRMATION = exports.RECEIVE_PERMISSION = exports.REQUEST_WORD = exports.REQUEST_BUTTON = exports.INSUFFICIENT_FUNDS = exports.UPDATE_CUSTOM_FEE = exports.SELECT_FEE = exports.SELECT_ACCOUNT = exports.SELECT_DEVICE = exports.SET_OPERATION = exports.LOADING = exports.CONNECT = exports.INVALID_PASSPHRASE_ACTION = exports.INVALID_PASSPHRASE = exports.REQUEST_PASSPHRASE_ON_DEVICE = exports.REQUEST_PASSPHRASE = exports.INVALID_PIN = exports.REQUEST_PIN = exports.REQUEST_CONFIRMATION = exports.REQUEST_PERMISSION = exports.CLOSE_UI_WINDOW = exports.REQUEST_UI_WINDOW = exports.DEVICE_NEEDS_BACKUP = exports.FIRMWARE_PROGRESS = exports.FIRMWARE_NOT_INSTALLED = exports.FIRMWARE_NOT_COMPATIBLE = exports.FIRMWARE_NOT_SUPPORTED = exports.FIRMWARE_OUTDATED = exports.FIRMWARE_OLD = exports.SEEDLESS = exports.INITIALIZE = exports.REQUIRE_MODE = exports.NOT_IN_BOOTLOADER = exports.BOOTLOADER = exports.TRANSPORT = void 0;\nvar TRANSPORT = 'ui-no_transport';\nexports.TRANSPORT = TRANSPORT;\nvar BOOTLOADER = 'ui-device_bootloader_mode';\nexports.BOOTLOADER = BOOTLOADER;\nvar NOT_IN_BOOTLOADER = 'ui-device_not_in_bootloader_mode';\nexports.NOT_IN_BOOTLOADER = NOT_IN_BOOTLOADER;\nvar REQUIRE_MODE = 'ui-device_require_mode';\nexports.REQUIRE_MODE = REQUIRE_MODE;\nvar INITIALIZE = 'ui-device_not_initialized';\nexports.INITIALIZE = INITIALIZE;\nvar SEEDLESS = 'ui-device_seedless';\nexports.SEEDLESS = SEEDLESS;\nvar FIRMWARE_OLD = 'ui-device_firmware_old';\nexports.FIRMWARE_OLD = FIRMWARE_OLD;\nvar FIRMWARE_OUTDATED = 'ui-device_firmware_outdated';\nexports.FIRMWARE_OUTDATED = FIRMWARE_OUTDATED;\nvar FIRMWARE_NOT_SUPPORTED = 'ui-device_firmware_unsupported';\nexports.FIRMWARE_NOT_SUPPORTED = FIRMWARE_NOT_SUPPORTED;\nvar FIRMWARE_NOT_COMPATIBLE = 'ui-device_firmware_not_compatible';\nexports.FIRMWARE_NOT_COMPATIBLE = FIRMWARE_NOT_COMPATIBLE;\nvar FIRMWARE_NOT_INSTALLED = 'ui-device_firmware_not_installed';\nexports.FIRMWARE_NOT_INSTALLED = FIRMWARE_NOT_INSTALLED;\nvar FIRMWARE_PROGRESS = 'ui-firmware-progress';\nexports.FIRMWARE_PROGRESS = FIRMWARE_PROGRESS;\nvar DEVICE_NEEDS_BACKUP = 'ui-device_needs_backup';\nexports.DEVICE_NEEDS_BACKUP = DEVICE_NEEDS_BACKUP;\nvar REQUEST_UI_WINDOW = 'ui-request_window';\nexports.REQUEST_UI_WINDOW = REQUEST_UI_WINDOW;\nvar CLOSE_UI_WINDOW = 'ui-close_window';\nexports.CLOSE_UI_WINDOW = CLOSE_UI_WINDOW;\nvar REQUEST_PERMISSION = 'ui-request_permission';\nexports.REQUEST_PERMISSION = REQUEST_PERMISSION;\nvar REQUEST_CONFIRMATION = 'ui-request_confirmation';\nexports.REQUEST_CONFIRMATION = REQUEST_CONFIRMATION;\nvar REQUEST_PIN = 'ui-request_pin';\nexports.REQUEST_PIN = REQUEST_PIN;\nvar INVALID_PIN = 'ui-invalid_pin';\nexports.INVALID_PIN = INVALID_PIN;\nvar REQUEST_PASSPHRASE = 'ui-request_passphrase';\nexports.REQUEST_PASSPHRASE = REQUEST_PASSPHRASE;\nvar REQUEST_PASSPHRASE_ON_DEVICE = 'ui-request_passphrase_on_device';\nexports.REQUEST_PASSPHRASE_ON_DEVICE = REQUEST_PASSPHRASE_ON_DEVICE;\nvar INVALID_PASSPHRASE = 'ui-invalid_passphrase';\nexports.INVALID_PASSPHRASE = INVALID_PASSPHRASE;\nvar INVALID_PASSPHRASE_ACTION = 'ui-invalid_passphrase_action';\nexports.INVALID_PASSPHRASE_ACTION = INVALID_PASSPHRASE_ACTION;\nvar CONNECT = 'ui-connect';\nexports.CONNECT = CONNECT;\nvar LOADING = 'ui-loading';\nexports.LOADING = LOADING;\nvar SET_OPERATION = 'ui-set_operation';\nexports.SET_OPERATION = SET_OPERATION;\nvar SELECT_DEVICE = 'ui-select_device';\nexports.SELECT_DEVICE = SELECT_DEVICE;\nvar SELECT_ACCOUNT = 'ui-select_account';\nexports.SELECT_ACCOUNT = SELECT_ACCOUNT;\nvar SELECT_FEE = 'ui-select_fee';\nexports.SELECT_FEE = SELECT_FEE;\nvar UPDATE_CUSTOM_FEE = 'ui-update_custom_fee';\nexports.UPDATE_CUSTOM_FEE = UPDATE_CUSTOM_FEE;\nvar INSUFFICIENT_FUNDS = 'ui-insufficient_funds';\nexports.INSUFFICIENT_FUNDS = INSUFFICIENT_FUNDS;\nvar REQUEST_BUTTON = 'ui-button';\nexports.REQUEST_BUTTON = REQUEST_BUTTON;\nvar REQUEST_WORD = 'ui-request_word';\nexports.REQUEST_WORD = REQUEST_WORD;\nvar RECEIVE_PERMISSION = 'ui-receive_permission';\nexports.RECEIVE_PERMISSION = RECEIVE_PERMISSION;\nvar RECEIVE_CONFIRMATION = 'ui-receive_confirmation';\nexports.RECEIVE_CONFIRMATION = RECEIVE_CONFIRMATION;\nvar RECEIVE_PIN = 'ui-receive_pin';\nexports.RECEIVE_PIN = RECEIVE_PIN;\nvar RECEIVE_PASSPHRASE = 'ui-receive_passphrase';\nexports.RECEIVE_PASSPHRASE = RECEIVE_PASSPHRASE;\nvar RECEIVE_DEVICE = 'ui-receive_device';\nexports.RECEIVE_DEVICE = RECEIVE_DEVICE;\nvar CHANGE_ACCOUNT = 'ui-change_account';\nexports.CHANGE_ACCOUNT = CHANGE_ACCOUNT;\nvar RECEIVE_ACCOUNT = 'ui-receive_account';\nexports.RECEIVE_ACCOUNT = RECEIVE_ACCOUNT;\nvar RECEIVE_FEE = 'ui-receive_fee';\nexports.RECEIVE_FEE = RECEIVE_FEE;\nvar RECEIVE_WORD = 'ui-receive_word';\nexports.RECEIVE_WORD = RECEIVE_WORD;\nvar CHANGE_SETTINGS = 'ui-change_settings';\nexports.CHANGE_SETTINGS = CHANGE_SETTINGS;\nvar CUSTOM_MESSAGE_REQUEST = 'ui-custom_request';\nexports.CUSTOM_MESSAGE_REQUEST = CUSTOM_MESSAGE_REQUEST;\nvar CUSTOM_MESSAGE_RESPONSE = 'ui-custom_response';\nexports.CUSTOM_MESSAGE_RESPONSE = CUSTOM_MESSAGE_RESPONSE;\nvar LOGIN_CHALLENGE_REQUEST = 'ui-login_challenge_request';\nexports.LOGIN_CHALLENGE_REQUEST = LOGIN_CHALLENGE_REQUEST;\nvar LOGIN_CHALLENGE_RESPONSE = 'ui-login_challenge_response';\nexports.LOGIN_CHALLENGE_RESPONSE = LOGIN_CHALLENGE_RESPONSE;\nvar BUNDLE_PROGRESS = 'ui-bundle_progress';\nexports.BUNDLE_PROGRESS = BUNDLE_PROGRESS;\nvar ADDRESS_VALIDATION = 'ui-address_validation';\nexports.ADDRESS_VALIDATION = ADDRESS_VALIDATION;\nvar IFRAME_FAILURE = 'ui-iframe_failure';\nexports.IFRAME_FAILURE = IFRAME_FAILURE;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.LIBUSB_ERROR_MESSAGE = exports.WEBUSB_ERROR_MESSAGE = exports.INVALID_PIN_ERROR_MESSAGE = exports.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = exports.TypedError = exports.TrezorError = exports.ERROR_CODES = void 0;\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _wrapNativeSuper2 = _interopRequireDefault(require(\"@babel/runtime/helpers/wrapNativeSuper\"));\n\nvar ERROR_CODES = {\n  Init_NotInitialized: 'TrezorConnect not yet initialized',\n  // race condition: call on not initialized Core (usually hot-reloading)\n  Init_AlreadyInitialized: 'TrezorConnect has been already initialized',\n  // thrown by .init called multiple times\n  Init_IframeBlocked: 'Iframe blocked',\n  // iframe injection blocked (ad-blocker)\n  Init_IframeTimeout: 'Iframe timeout',\n  // iframe didn't load in specified time\n  Init_ManifestMissing: 'Manifest not set. Read more at https://github.com/trezor/connect/blob/develop/docs/index.md',\n  // manifest is not set\n  Popup_ConnectionMissing: 'Unable to establish connection with iframe',\n  // thrown by popup\n  Transport_Missing: 'Transport is missing',\n  // no transport available\n  Transport_InvalidProtobuf: '',\n  // generic error from transport layer (trezor-link)\n  Method_InvalidPackage: 'This version of trezor-connect is not suitable to work without browser. Use trezor-connect@extended package instead',\n  // thrown by node and react-native env while using regular 'web' package\n  Method_InvalidParameter: '',\n  // replaced by generic text\n  Method_NotAllowed: 'Method not allowed for this configuration',\n  // example: device management in popup mode\n  Method_PermissionsNotGranted: 'Permissions not granted',\n  // permission/confirmation not granted in popup\n  Method_Cancel: 'Cancelled',\n  // permission/confirmation not granted in popup OR .cancel() custom error\n  Method_Interrupted: 'Popup closed',\n  // interruption: popup closed\n  Method_UnknownCoin: 'Coin not found',\n  // coin definition not found\n  Method_AddressNotMatch: 'Addresses do not match',\n  // thrown by all getAddress methods with custom UI validation\n  Method_FirmwareUpdate_DownloadFailed: 'Failed to download firmware binary',\n  // thrown by FirmwareUpdate method\n  Method_CustomMessage_Callback: 'Parameter \"callback\" is not a function',\n  // thrown by CustomMessage method\n  Method_Discovery_BundleException: '',\n  // thrown by getAccountInfo method\n  Method_Override: 'override',\n  // inner \"error\", it's more like a interruption\n  Method_NoResponse: 'Call resolved without response',\n  // thrown by npm index(es), call to Core resolved without response, should not happen\n  Backend_NotSupported: 'BlockchainLink settings not found in coins.json',\n  // thrown by methods which using backends, blockchainLink not defined for this coin\n  Backend_WorkerMissing: '',\n  // thrown by BlockchainLink class, worker not specified\n  Backend_Disconnected: 'Backend disconnected',\n  // thrown by BlockchainLink class\n  Backend_Invalid: 'Invalid backend',\n  // thrown by BlockchainLink class, invalid backend (ie: backend for wrong coin set)\n  Backend_Error: '',\n  // thrown by BlockchainLink class, generic message from 'blockchain-link'\n  Runtime: '',\n  // thrown from several places, this shouldn't ever happen tho\n  Device_NotFound: 'Device not found',\n  Device_InitializeFailed: '',\n  // generic error from firmware while calling \"Initialize\" message\n  Device_FwException: '',\n  // generic FirmwareException type\n  Device_ModeException: '',\n  // generic Device.UnexpectedMode type\n  Device_Disconnected: 'Device disconnected',\n  // device disconnected during call\n  Device_UsedElsewhere: 'Device is used in another window',\n  // interruption: current session toked by other application\n  Device_InvalidState: 'Passphrase is incorrect',\n  // authorization error (device state comparison)\n  Device_CallInProgress: 'Device call in progress' // thrown when trying to make another call while current is still running\n\n};\nexports.ERROR_CODES = ERROR_CODES;\n\nvar TrezorError = /*#__PURE__*/function (_Error) {\n  (0, _inheritsLoose2[\"default\"])(TrezorError, _Error);\n\n  function TrezorError(code, message) {\n    var _this;\n\n    _this = _Error.call(this, message) || this;\n    _this.code = code;\n    _this.message = message;\n    return _this;\n  }\n\n  return TrezorError;\n}( /*#__PURE__*/(0, _wrapNativeSuper2[\"default\"])(Error));\n\nexports.TrezorError = TrezorError;\n\nvar TypedError = function TypedError(id, message) {\n  return new TrezorError(id, message || ERROR_CODES[id]);\n}; // a slight hack\n// this error string is hard-coded\n// in both bridge and extension\n\n\nexports.TypedError = TypedError;\nvar WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = 'wrong previous session';\nexports.WRONG_PREVIOUS_SESSION_ERROR_MESSAGE = WRONG_PREVIOUS_SESSION_ERROR_MESSAGE;\nvar INVALID_PIN_ERROR_MESSAGE = 'PIN invalid';\nexports.INVALID_PIN_ERROR_MESSAGE = INVALID_PIN_ERROR_MESSAGE;\nvar WEBUSB_ERROR_MESSAGE = 'NetworkError: Unable to claim interface.'; // trezord error prefix.\n// user has insufficient permissions. may occur in Linux (missing udev rules), Windows and MacOS.\n\nexports.WEBUSB_ERROR_MESSAGE = WEBUSB_ERROR_MESSAGE;\nvar LIBUSB_ERROR_MESSAGE = 'LIBUSB_ERROR';\nexports.LIBUSB_ERROR_MESSAGE = LIBUSB_ERROR_MESSAGE;","\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar render = function render(className, url, origin) {\n  var query = className || '.trezor-webusb-button';\n  var buttons = document.querySelectorAll(query);\n  var src = url + \"?\" + Date.now();\n  buttons.forEach(function (b) {\n    if (b.getElementsByTagName('iframe').length < 1) {\n      var bounds = b.getBoundingClientRect();\n      var btnIframe = document.createElement('iframe');\n      btnIframe.frameBorder = '0';\n      btnIframe.width = Math.round(bounds.width) + \"px\";\n      btnIframe.height = Math.round(bounds.height) + \"px\";\n      btnIframe.style.position = 'absolute';\n      btnIframe.style.top = '0px';\n      btnIframe.style.left = '0px';\n      btnIframe.style.zIndex = '1'; // btnIframe.style.opacity = '0'; // this makes click impossible on cross-origin\n\n      btnIframe.setAttribute('allow', 'usb');\n      btnIframe.setAttribute('scrolling', 'no');\n\n      btnIframe.onload = function () {\n        btnIframe.contentWindow.postMessage({// style: JSON.stringify( window.getComputedStyle(b) ),\n          // outer: b.outerHTML,\n          // inner: b.innerHTML\n        }, origin);\n      };\n\n      btnIframe.src = src; // inject iframe into button\n\n      b.append(btnIframe);\n    }\n  });\n};\n\nvar _default = render;\nexports[\"default\"] = _default;","\"use strict\";\n\nexports.__esModule = true;\nexports.getLog = exports.enableLogByPrefix = exports.enableLog = exports.initLog = void 0;\n\n/* eslint-disable no-console */\nvar colors = {\n  // green\n  DescriptorStream: 'color: #77ab59',\n  DeviceList: 'color: #36802d',\n  Device: 'color: #bada55',\n  Core: 'color: #c9df8a',\n  IFrame: 'color: #FFFFFF; background: #f4a742;',\n  Popup: 'color: #f48a00'\n};\nvar MAX_ENTRIES = 100;\n\nvar Log = /*#__PURE__*/function () {\n  function Log(prefix, enabled) {\n    this.prefix = prefix;\n    this.enabled = enabled;\n    this.messages = [];\n    this.css = colors[prefix] || 'color: #000000; background: #FFFFFF;';\n  }\n\n  var _proto = Log.prototype;\n\n  _proto.addMessage = function addMessage(level, prefix) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n\n    this.messages.push({\n      level: level,\n      prefix: prefix,\n      message: args,\n      timestamp: new Date().getTime()\n    });\n\n    if (this.messages.length > MAX_ENTRIES) {\n      this.messages.shift();\n    }\n  };\n\n  _proto.log = function log() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    this.addMessage.apply(this, ['log', this.prefix].concat(args));\n\n    if (this.enabled) {\n      var _console;\n\n      (_console = console).log.apply(_console, [this.prefix].concat(args));\n    }\n  };\n\n  _proto.error = function error() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    this.addMessage.apply(this, ['error', this.prefix].concat(args));\n\n    if (this.enabled) {\n      var _console2;\n\n      (_console2 = console).error.apply(_console2, [this.prefix].concat(args));\n    }\n  };\n\n  _proto.warn = function warn() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    this.addMessage.apply(this, ['warn', this.prefix].concat(args));\n\n    if (this.enabled) {\n      var _console3;\n\n      (_console3 = console).warn.apply(_console3, [this.prefix].concat(args));\n    }\n  };\n\n  _proto.debug = function debug() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n\n    this.addMessage.apply(this, ['debug', this.prefix].concat(args));\n\n    if (this.enabled) {\n      var _console4;\n\n      (_console4 = console).log.apply(_console4, [\"%c\" + this.prefix, this.css].concat(args));\n    }\n  };\n\n  return Log;\n}();\n\nvar _logs = {};\n\nvar initLog = function initLog(prefix, enabled) {\n  var instance = new Log(prefix, !!enabled);\n  _logs[prefix] = instance;\n  return instance;\n};\n\nexports.initLog = initLog;\n\nvar enableLog = function enableLog(enabled) {\n  Object.keys(_logs).forEach(function (key) {\n    _logs[key].enabled = enabled;\n  });\n};\n\nexports.enableLog = enableLog;\n\nvar enableLogByPrefix = function enableLogByPrefix(prefix, enabled) {\n  if (_logs[prefix]) {\n    _logs[prefix].enabled = enabled;\n  }\n};\n\nexports.enableLogByPrefix = enableLogByPrefix;\n\nvar getLog = function getLog() {\n  var logs = [];\n  Object.keys(_logs).forEach(function (key) {\n    logs = logs.concat(_logs[key].messages);\n  });\n  logs.sort(function (a, b) {\n    return a.timestamp - b.timestamp;\n  });\n  return logs;\n};\n\nexports.getLog = getLog;","\"use strict\";\n\nexports.__esModule = true;\nexports.errorMessage = exports.parseMessage = void 0;\n\n// parse MessageEvent .data into CoreMessage\nvar parseMessage = function parseMessage(messageData) {\n  var message = {\n    event: messageData.event,\n    type: messageData.type,\n    payload: messageData.payload\n  };\n\n  if (typeof messageData.id === 'number') {\n    message.id = messageData.id;\n  }\n\n  if (typeof messageData.success === 'boolean') {\n    message.success = messageData.success;\n  }\n\n  return message;\n}; // common response used straight from npm index (not from Core)\n\n\nexports.parseMessage = parseMessage;\n\nvar errorMessage = function errorMessage(error) {\n  return {\n    success: false,\n    payload: {\n      error: error.message,\n      code: error.code\n    }\n  };\n};\n\nexports.errorMessage = errorMessage;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.parse = exports.corsValidator = exports.getEnv = exports.DEFAULT_PRIORITY = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n * Initial settings for connect.\n * It could be changed by passing values into TrezorConnect.init(...) method\n */\nvar VERSION = '8.2.6';\nvar versionN = VERSION.split('.').map(function (s) {\n  return parseInt(s, 10);\n}); // const DIRECTORY = `${ versionN[0] }${ (versionN[1] > 0 ? `.${versionN[1]}` : '') }/`;\n\nvar DIRECTORY = versionN[0] + \"/\";\nvar DEFAULT_DOMAIN = \"https://connect.trezor.io/\" + DIRECTORY;\nvar DEFAULT_PRIORITY = 2;\nexports.DEFAULT_PRIORITY = DEFAULT_PRIORITY;\nvar initialSettings = {\n  configSrc: './data/config.json',\n  // constant\n  version: VERSION,\n  // constant\n  debug: false,\n  priority: DEFAULT_PRIORITY,\n  trustedHost: false,\n  connectSrc: DEFAULT_DOMAIN,\n  iframeSrc: DEFAULT_DOMAIN + \"iframe.html\",\n  popup: true,\n  popupSrc: DEFAULT_DOMAIN + \"popup.html\",\n  webusbSrc: DEFAULT_DOMAIN + \"webusb.html\",\n  transportReconnect: false,\n  webusb: true,\n  pendingTransportEvent: true,\n  supportedBrowser: typeof navigator !== 'undefined' ? !/Trident|MSIE|Edge/.test(navigator.userAgent) : true,\n  manifest: null,\n  env: 'web',\n  lazyLoad: false,\n  timestamp: new Date().getTime(),\n  interactionTimeout: 600 // 5 minutes\n\n};\nvar currentSettings = initialSettings;\n\nvar parseManifest = function parseManifest(manifest) {\n  if (!manifest) return;\n  if (typeof manifest.email !== 'string') return;\n  if (typeof manifest.appUrl !== 'string') return;\n  return {\n    email: manifest.email,\n    appUrl: manifest.appUrl\n  };\n};\n\nvar getEnv = function getEnv() {\n  // $FlowIssue: chrome is not declared outside the project\n  if (typeof chrome !== 'undefined' && chrome.runtime && typeof chrome.runtime.onConnect !== 'undefined') {\n    return 'webextension';\n  }\n\n  if (typeof navigator !== 'undefined') {\n    if (typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative') {\n      return 'react-native';\n    }\n\n    var userAgent = navigator.userAgent.toLowerCase();\n\n    if (userAgent.indexOf(' electron/') > -1) {\n      return 'electron';\n    }\n  } // if (typeof navigator !== 'undefined' && typeof navigator.product === 'string' && navigator.product.toLowerCase() === 'reactnative') {\n  //     return 'react-native';\n  // }\n  // if (typeof process !== 'undefined' && process.versions.hasOwnProperty('electron')) {\n  //     return 'electron';\n  // }\n\n\n  return 'web';\n}; // Cors validation copied from Trezor Bridge\n// see: https://github.com/trezor/trezord-go/blob/05991cea5900d18bcc6ece5ae5e319d138fc5551/server/api/api.go#L229\n// Its pointless to allow `trezor-connect` endpoints { connectSrc } for domains other than listed below\n// `trezord` will block communication anyway\n\n\nexports.getEnv = getEnv;\n\nvar corsValidator = function corsValidator(url) {\n  if (typeof url !== 'string') return;\n  if (url.match(/^https:\\/\\/([A-Za-z0-9\\-_]+\\.)*trezor\\.io\\//)) return url;\n  if (url.match(/^https?:\\/\\/localhost:[58][0-9]{3}\\//)) return url;\n  if (url.match(/^https:\\/\\/([A-Za-z0-9\\-_]+\\.)*sldev\\.cz\\//)) return url;\n  if (url.match(/^https?:\\/\\/([A-Za-z0-9\\-_]+\\.)*trezoriovpjcahpzkrewelclulmszwbqpzmzgub37gbcjlvluxtruqad\\.onion\\//)) return url;\n};\n\nexports.corsValidator = corsValidator;\n\nvar parse = function parse(input) {\n  if (input === void 0) {\n    input = {};\n  }\n\n  var settings = _objectSpread({}, currentSettings);\n\n  if (Object.prototype.hasOwnProperty.call(input, 'debug')) {\n    if (Array.isArray(input)) {// enable log with prefix\n    }\n\n    if (typeof input.debug === 'boolean') {\n      settings.debug = input.debug;\n    } else if (typeof input.debug === 'string') {\n      settings.debug = input.debug === 'true';\n    }\n  }\n\n  if (typeof input.connectSrc === 'string') {\n    settings.connectSrc = input.connectSrc;\n  } // For debugging purposes `connectSrc` could be defined in `global.__TREZOR_CONNECT_SRC` variable\n\n\n  if (typeof global !== 'undefined' && typeof global.__TREZOR_CONNECT_SRC === 'string') {\n    settings.connectSrc = corsValidator(global.__TREZOR_CONNECT_SRC);\n    settings.debug = true;\n  } // For debugging purposes `connectSrc` could be defined in url query of hosting page. Usage:\n  // https://3rdparty-page.com/?trezor-connect-src=https://localhost:8088/\n\n\n  if (typeof window !== 'undefined' && window.location && typeof window.location.search === 'string') {\n    var vars = window.location.search.split('&');\n    var customUrl = vars.find(function (v) {\n      return v.indexOf('trezor-connect-src') >= 0;\n    });\n\n    if (customUrl) {\n      var _customUrl$split = customUrl.split('='),\n          connectSrc = _customUrl$split[1];\n\n      settings.connectSrc = corsValidator(decodeURIComponent(connectSrc));\n      settings.debug = true;\n    }\n  }\n\n  var src = settings.connectSrc || DEFAULT_DOMAIN;\n  settings.iframeSrc = src + \"iframe.html\";\n  settings.popupSrc = src + \"popup.html\";\n  settings.webusbSrc = src + \"webusb.html\";\n\n  if (typeof input.transportReconnect === 'boolean') {\n    settings.transportReconnect = input.transportReconnect;\n  }\n\n  if (typeof input.webusb === 'boolean') {\n    settings.webusb = input.webusb;\n  }\n\n  if (typeof input.popup === 'boolean') {\n    settings.popup = input.popup;\n  }\n\n  if (typeof input.lazyLoad === 'boolean') {\n    settings.lazyLoad = input.lazyLoad;\n  }\n\n  if (typeof input.pendingTransportEvent === 'boolean') {\n    settings.pendingTransportEvent = input.pendingTransportEvent;\n  } // local files\n\n\n  if (typeof window !== 'undefined' && window.location && window.location.protocol === 'file:') {\n    settings.origin = \"file://\" + window.location.pathname;\n    settings.webusb = false;\n  }\n\n  if (typeof input.extension === 'string') {\n    settings.extension = input.extension;\n  }\n\n  if (typeof input.env === 'string') {\n    settings.env = input.env;\n  } else {\n    settings.env = getEnv();\n  }\n\n  if (typeof input.timestamp === 'number') {\n    settings.timestamp = input.timestamp;\n  }\n\n  if (typeof input.interactionTimeout === 'number') {\n    settings.interactionTimeout = input.interactionTimeout;\n  }\n\n  if (typeof input.manifest === 'object') {\n    settings.manifest = parseManifest(input.manifest);\n  }\n\n  currentSettings = settings;\n  return currentSettings;\n};\n\nexports.parse = parse;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.BlockchainMessage = exports.ResponseMessage = exports.TransportMessage = exports.DeviceMessage = exports.UiMessage = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _constants = require(\"../constants\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2[\"default\"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar UiMessage = function UiMessage(type, payload) {\n  return {\n    event: _constants.UI_EVENT,\n    type: type,\n    payload: payload\n  };\n};\n\nexports.UiMessage = UiMessage;\n\nvar DeviceMessage = function DeviceMessage(type, payload) {\n  return {\n    event: _constants.DEVICE_EVENT,\n    type: type,\n    payload: payload\n  };\n};\n\nexports.DeviceMessage = DeviceMessage;\n\nvar TransportMessage = function TransportMessage(type, payload) {\n  return {\n    event: _constants.TRANSPORT_EVENT,\n    type: type,\n    // convert Error/TypeError object into payload error type (Error object/class is converted to string while sent via postMessage)\n    payload: payload.error ? _objectSpread(_objectSpread({}, payload), {}, {\n      error: payload.error.message,\n      code: payload.error.code\n    }) : payload\n  };\n};\n\nexports.TransportMessage = TransportMessage;\n\nvar ResponseMessage = function ResponseMessage(id, success, payload) {\n  if (payload === void 0) {\n    payload = null;\n  }\n\n  return {\n    event: _constants.RESPONSE_EVENT,\n    type: _constants.RESPONSE_EVENT,\n    id: id,\n    success: success,\n    // convert Error/TypeError object into payload error type (Error object/class is converted to string while sent via postMessage)\n    payload: success ? payload : {\n      error: payload.error.message,\n      code: payload.error.code\n    }\n  };\n};\n\nexports.ResponseMessage = ResponseMessage;\n\nvar BlockchainMessage = function BlockchainMessage(type, payload) {\n  return {\n    event: _constants.BLOCKCHAIN_EVENT,\n    type: type,\n    payload: payload\n  };\n};\n\nexports.BlockchainMessage = BlockchainMessage;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _assertThisInitialized2 = _interopRequireDefault(require(\"@babel/runtime/helpers/assertThisInitialized\"));\n\nvar _inheritsLoose2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inheritsLoose\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _events = _interopRequireDefault(require(\"events\"));\n\nvar POPUP = _interopRequireWildcard(require(\"../constants/popup\"));\n\nvar IFRAME = _interopRequireWildcard(require(\"../constants/iframe\"));\n\nvar UI = _interopRequireWildcard(require(\"../constants/ui\"));\n\nvar _showPopupRequest = require(\"./showPopupRequest\");\n\nvar _networkUtils = require(\"../env/browser/networkUtils\");\n\nvar _deferred = require(\"../utils/deferred\");\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { \"default\": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj[\"default\"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\n// const POPUP_REQUEST_TIMEOUT = 602;\nvar POPUP_REQUEST_TIMEOUT = 850;\nvar POPUP_CLOSE_INTERVAL = 500;\nvar POPUP_OPEN_TIMEOUT = 3000;\n\nvar PopupManager = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inheritsLoose2[\"default\"])(PopupManager, _EventEmitter);\n\n  // Window\n  function PopupManager(settings) {\n    var _this;\n\n    _this = _EventEmitter.call(this) || this;\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"requestTimeout\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"closeInterval\", 0);\n    (0, _defineProperty2[\"default\"])((0, _assertThisInitialized2[\"default\"])(_this), \"extensionTabId\", 0);\n    _this.settings = settings;\n    _this.origin = (0, _networkUtils.getOrigin)(settings.popupSrc);\n    _this.handleMessage = _this.handleMessage.bind((0, _assertThisInitialized2[\"default\"])(_this));\n    _this.iframeHandshake = (0, _deferred.create)(IFRAME.LOADED);\n\n    if (_this.settings.env === 'webextension') {\n      _this.handleExtensionConnect = _this.handleExtensionConnect.bind((0, _assertThisInitialized2[\"default\"])(_this));\n      _this.handleExtensionMessage = _this.handleExtensionMessage.bind((0, _assertThisInitialized2[\"default\"])(_this)); // $FlowIssue chrome not declared outside\n\n      chrome.runtime.onConnect.addListener(_this.handleExtensionConnect);\n    }\n\n    window.addEventListener('message', _this.handleMessage, false);\n    return _this;\n  }\n\n  var _proto = PopupManager.prototype;\n\n  _proto.request = function request(lazyLoad) {\n    var _this2 = this;\n\n    if (lazyLoad === void 0) {\n      lazyLoad = false;\n    }\n\n    // popup request\n    // TODO: ie - open immediately and hide it but post handshake after timeout\n    // bring popup window to front\n    if (this.locked) {\n      if (this._window) {\n        if (this.settings.env === 'webextension') {\n          // $FlowIssue chrome not declared outside\n          chrome.tabs.update(this._window.id, {\n            active: true\n          });\n        } else {\n          this._window.focus();\n        }\n      }\n\n      return;\n    }\n\n    var openFn = this.open.bind(this);\n    this.locked = true;\n\n    if (!this.settings.supportedBrowser) {\n      openFn();\n    } else {\n      var timeout = lazyLoad || this.settings.env === 'webextension' ? 1 : POPUP_REQUEST_TIMEOUT;\n      this.requestTimeout = window.setTimeout(function () {\n        _this2.requestTimeout = 0;\n        openFn(lazyLoad);\n      }, timeout);\n    }\n  };\n\n  _proto.cancel = function cancel() {\n    this.close();\n  };\n\n  _proto.unlock = function unlock() {\n    this.locked = false;\n  };\n\n  _proto.open = function open(lazyLoad) {\n    var _this3 = this;\n\n    var src = this.settings.popupSrc;\n\n    if (!this.settings.supportedBrowser) {\n      this.openWrapper(src + \"#unsupported\");\n      return;\n    }\n\n    this.popupPromise = (0, _deferred.create)(POPUP.LOADED);\n    this.openWrapper(lazyLoad ? src + \"#loading\" : src);\n    this.closeInterval = window.setInterval(function () {\n      if (!_this3._window) return;\n\n      if (_this3.settings.env === 'webextension') {\n        // $FlowIssue chrome not declared outside\n        chrome.tabs.get(_this3._window.id, function (tab) {\n          if (!tab) {\n            _this3.close();\n\n            _this3.emit(POPUP.CLOSED);\n          }\n        });\n      } else if (_this3._window.closed) {\n        _this3.close();\n\n        _this3.emit(POPUP.CLOSED);\n      }\n    }, POPUP_CLOSE_INTERVAL); // open timeout will be cancelled by POPUP.BOOTSTRAP message\n\n    this.openTimeout = window.setTimeout(function () {\n      _this3.close();\n\n      (0, _showPopupRequest.showPopupRequest)(_this3.open.bind(_this3), function () {\n        _this3.emit(POPUP.CLOSED);\n      });\n    }, POPUP_OPEN_TIMEOUT);\n  };\n\n  _proto.openWrapper = function openWrapper(url) {\n    var _this4 = this;\n\n    if (this.settings.env === 'webextension') {\n      // $FlowIssue chrome not declared outside\n      chrome.windows.getCurrent(null, function (currentWindow) {\n        // Request coming from extension popup,\n        // create new window above instead of opening new tab\n        if (currentWindow.type !== 'normal') {\n          // $FlowIssue chrome not declared outside\n          chrome.windows.create({\n            url: url\n          }, function (newWindow) {\n            // $FlowIssue chrome not declared outside\n            chrome.tabs.query({\n              windowId: newWindow.id,\n              active: true\n            }, function (tabs) {\n              // eslint-disable-next-line prefer-destructuring\n              _this4._window = tabs[0];\n            });\n          });\n        } else {\n          // $FlowIssue chrome not declared outside\n          chrome.tabs.query({\n            currentWindow: true,\n            active: true\n          }, function (tabs) {\n            _this4.extensionTabId = tabs[0].id; // $FlowIssue chrome not declared outside\n\n            chrome.tabs.create({\n              url: url,\n              index: tabs[0].index + 1\n            }, function (tab) {\n              _this4._window = tab;\n            });\n          });\n        }\n      });\n    } else if (this.settings.env === 'electron') {\n      this._window = window.open(url, 'modal');\n    } else {\n      this._window = window.open('', '_blank');\n\n      if (this._window) {\n        this._window.location.href = url; // otherwise android/chrome loose window.opener reference\n      }\n    }\n  };\n\n  _proto.handleExtensionConnect = function handleExtensionConnect(port) {\n    if (port.name !== 'trezor-connect') return;\n\n    if (!this._window || this._window && this._window.id !== port.sender.tab.id) {\n      port.disconnect();\n      return;\n    } // since POPUP.BOOTSTRAP will not be handled by \"handleMessage\" we need to threat \"content-script\" connection as the same event\n    // popup is opened properly, now wait for POPUP.LOADED message (in this case handled by \"handleExtensionMessage\")\n\n\n    window.clearTimeout(this.openTimeout);\n    this.extensionPort = port; // $FlowIssue need to update ChromePort definition\n\n    this.extensionPort.onMessage.addListener(this.handleExtensionMessage);\n  };\n\n  _proto.handleExtensionMessage = function handleExtensionMessage(message) {\n    var _this5 = this;\n\n    if (!this.extensionPort) return;\n    var port = this.extensionPort;\n    var data = message.data;\n    if (!data || typeof data !== 'object') return;\n\n    if (data.type === POPUP.ERROR) {\n      // handle popup error\n      var errorMessage = data.payload && typeof data.payload.error === 'string' ? data.payload.error : null;\n      this.emit(POPUP.CLOSED, errorMessage ? \"Popup error: \" + errorMessage : null);\n      this.close();\n    } else if (data.type === POPUP.LOADED) {\n      if (this.popupPromise) {\n        this.popupPromise.resolve();\n      }\n\n      this.iframeHandshake.promise.then(function (useBroadcastChannel) {\n        port.postMessage({\n          type: POPUP.INIT,\n          payload: {\n            settings: _this5.settings,\n            useBroadcastChannel: useBroadcastChannel\n          }\n        });\n      });\n    } else if (data.type === POPUP.EXTENSION_USB_PERMISSIONS) {\n      // $FlowIssue chrome not declared outside\n      chrome.tabs.query({\n        currentWindow: true,\n        active: true\n      }, function (tabs) {\n        // $FlowIssue chrome not declared outside\n        chrome.tabs.create({\n          url: 'trezor-usb-permissions.html',\n          index: tabs[0].index + 1\n        }, function (_tab) {// do nothing\n        });\n      });\n    } else if (data.type === POPUP.CLOSE_WINDOW) {\n      this.emit(POPUP.CLOSED);\n      this.close();\n    }\n  };\n\n  _proto.handleMessage = function handleMessage(message) {\n    var _this6 = this;\n\n    // ignore messages from domain other then popup origin and without data\n    // const data: CoreMessage = message.data;\n    var data = message.data;\n    if ((0, _networkUtils.getOrigin)(message.origin) !== this.origin || !data || typeof data !== 'object') return;\n\n    if (data.type === IFRAME.LOADED) {\n      var useBroadcastChannel = data.payload && typeof data.payload.useBroadcastChannel === 'boolean' ? data.payload.useBroadcastChannel : false;\n      this.iframeHandshake.resolve(useBroadcastChannel);\n    } else if (data.type === POPUP.BOOTSTRAP) {\n      // popup is opened properly, now wait for POPUP.LOADED message\n      window.clearTimeout(this.openTimeout);\n    } else if (data.type === POPUP.ERROR && this._window) {\n      var errorMessage = data.payload && typeof data.payload.error === 'string' ? data.payload.error : null;\n      this.emit(POPUP.CLOSED, errorMessage ? \"Popup error: \" + errorMessage : null);\n      this.close();\n    } else if (data.type === POPUP.LOADED) {\n      if (this.popupPromise) {\n        this.popupPromise.resolve();\n      } // popup is successfully loaded\n\n\n      this.iframeHandshake.promise.then(function (useBroadcastChannel) {\n        _this6._window.postMessage({\n          type: POPUP.INIT,\n          payload: {\n            settings: _this6.settings,\n            useBroadcastChannel: useBroadcastChannel\n          }\n        }, _this6.origin);\n      }); // send ConnectSettings to popup\n      // note this settings and iframe.ConnectSettings could be different (especially: origin, popup, webusb, debug)\n      // now popup is able to load assets\n    } else if (data.type === POPUP.CANCEL_POPUP_REQUEST || data.type === UI.CLOSE_UI_WINDOW) {\n      this.close();\n    }\n  };\n\n  _proto.close = function close() {\n    this.locked = false;\n    this.popupPromise = undefined;\n\n    if (this.requestTimeout) {\n      window.clearTimeout(this.requestTimeout);\n      this.requestTimeout = 0;\n    }\n\n    if (this.openTimeout) {\n      window.clearTimeout(this.openTimeout);\n      this.openTimeout = 0;\n    }\n\n    if (this.closeInterval) {\n      window.clearInterval(this.closeInterval);\n      this.closeInterval = 0;\n    }\n\n    if (this.extensionPort) {\n      this.extensionPort.disconnect();\n      this.extensionPort = null;\n    } // switch to previously focused tab\n\n\n    if (this.extensionTabId) {\n      // $FlowIssue chrome not declared outside\n      chrome.tabs.update(this.extensionTabId, {\n        active: true\n      });\n      this.extensionTabId = 0;\n    }\n\n    if (this._window) {\n      if (this.settings.env === 'webextension') {\n        // eslint-disable-next-line no-unused-vars\n        var _e = chrome.runtime.lastError; // $FlowIssue chrome not declared outside\n\n        chrome.tabs.remove(this._window.id, function () {\n          // eslint-disable-next-line no-unused-vars\n          _e = chrome.runtime.lastError;\n        });\n      } else {\n        this._window.close();\n      }\n\n      this._window = null;\n    }\n  };\n\n  _proto.postMessage = /*#__PURE__*/function () {\n    var _postMessage = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(message) {\n      var _this7 = this;\n\n      return _regenerator[\"default\"].wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              if (!(!this._window && message.type !== UI.REQUEST_UI_WINDOW && this.openTimeout)) {\n                _context.next = 4;\n                break;\n              }\n\n              this.close();\n              (0, _showPopupRequest.showPopupRequest)(this.open.bind(this), function () {\n                _this7.emit(POPUP.CLOSED);\n              });\n              return _context.abrupt(\"return\");\n\n            case 4:\n              if (!this.popupPromise) {\n                _context.next = 7;\n                break;\n              }\n\n              _context.next = 7;\n              return this.popupPromise.promise;\n\n            case 7:\n              // post message to popup window\n              if (this._window) {\n                this._window.postMessage(message, this.origin);\n              }\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function postMessage(_x) {\n      return _postMessage.apply(this, arguments);\n    }\n\n    return postMessage;\n  }();\n\n  return PopupManager;\n}(_events[\"default\"]);\n\nexports[\"default\"] = PopupManager;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nexports.__esModule = true;\nexports.clearTimeout = exports.dispose = exports.postMessage = exports.init = exports.messagePromises = exports.error = exports.timeout = exports.initPromise = exports.origin = exports.instance = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _deferred = require(\"../utils/deferred\");\n\nvar _constants = require(\"../constants\");\n\nvar _networkUtils = require(\"../env/browser/networkUtils\");\n\nvar _inlineStyles = _interopRequireDefault(require(\"./inline-styles\"));\n\n/* eslint-disable import/no-mutable-exports */\nvar instance;\nexports.instance = instance;\nvar origin;\nexports.origin = origin;\nvar initPromise = (0, _deferred.create)();\nexports.initPromise = initPromise;\nvar timeout = 0;\nexports.timeout = timeout;\nvar error;\n/* eslint-enable import/no-mutable-exports */\n\nexports.error = error;\nvar _messageID = 0; // every postMessage to iframe has its own promise to resolve\n\nvar messagePromises = {};\nexports.messagePromises = messagePromises;\n\nvar init = /*#__PURE__*/function () {\n  var _ref = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(settings) {\n    var existedFrame, src, manifestString, manifest, onLoad;\n    return _regenerator[\"default\"].wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            exports.initPromise = initPromise = (0, _deferred.create)();\n            existedFrame = document.getElementById('trezorconnect');\n\n            if (existedFrame) {\n              exports.instance = instance = existedFrame;\n            } else {\n              exports.instance = instance = document.createElement('iframe');\n              instance.frameBorder = '0';\n              instance.width = '0px';\n              instance.height = '0px';\n              instance.style.position = 'absolute';\n              instance.style.display = 'none';\n              instance.style.border = '0px';\n              instance.style.width = '0px';\n              instance.style.height = '0px';\n              instance.id = 'trezorconnect';\n            }\n\n            if (settings.env === 'web') {\n              manifestString = settings.manifest ? JSON.stringify(settings.manifest) : 'undefined'; // note: btoa(undefined) === btoa('undefined') === \"dW5kZWZpbmVk\"\n\n              manifest = \"version=\" + settings.version + \"&manifest=\" + encodeURIComponent(btoa(JSON.stringify(manifestString)));\n              src = settings.iframeSrc + \"?\" + manifest;\n            } else {\n              src = settings.iframeSrc;\n            }\n\n            instance.setAttribute('src', src);\n\n            if (settings.webusb) {\n              instance.setAttribute('allow', 'usb');\n            }\n\n            exports.origin = origin = (0, _networkUtils.getOrigin)(instance.src);\n            exports.timeout = timeout = window.setTimeout(function () {\n              initPromise.reject(_constants.ERRORS.TypedError('Init_IframeTimeout'));\n            }, 10000);\n\n            onLoad = function onLoad() {\n              if (!instance) {\n                initPromise.reject(_constants.ERRORS.TypedError('Init_IframeBlocked'));\n                return;\n              }\n\n              try {\n                // if hosting page is able to access cross-origin location it means that the iframe is not loaded\n                var iframeOrigin = instance.contentWindow.location.origin;\n\n                if (!iframeOrigin || iframeOrigin === 'null') {\n                  // eslint-disable-next-line no-use-before-define\n                  handleIframeBlocked();\n                  return;\n                }\n              } catch (e) {// empty\n              }\n\n              var extension; // $FlowIssue chrome is not declared outside\n\n              if (typeof chrome !== 'undefined' && chrome.runtime && typeof chrome.runtime.onConnect !== 'undefined') {\n                chrome.runtime.onConnect.addListener(function () {});\n                extension = chrome.runtime.id;\n              }\n\n              instance.contentWindow.postMessage({\n                type: _constants.IFRAME.INIT,\n                payload: {\n                  settings: settings,\n                  extension: extension\n                }\n              }, origin);\n              instance.onload = undefined;\n            }; // IE hack\n\n\n            if (instance.attachEvent) {\n              instance.attachEvent('onload', onLoad);\n            } else {\n              instance.onload = onLoad;\n            } // inject iframe into host document body\n\n\n            if (document.body) {\n              document.body.appendChild(instance); // eslint-disable-next-line no-use-before-define\n\n              injectStyleSheet();\n            }\n\n            _context.prev = 11;\n            _context.next = 14;\n            return initPromise.promise;\n\n          case 14:\n            _context.next = 20;\n            break;\n\n          case 16:\n            _context.prev = 16;\n            _context.t0 = _context[\"catch\"](11);\n\n            // reset state to allow initialization again\n            if (instance) {\n              if (instance.parentNode) {\n                instance.parentNode.removeChild(instance);\n              }\n\n              exports.instance = instance = null;\n            }\n\n            throw _context.t0;\n\n          case 20:\n            _context.prev = 20;\n            window.clearTimeout(timeout);\n            exports.timeout = timeout = 0;\n            return _context.finish(20);\n\n          case 24:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[11, 16, 20, 24]]);\n  }));\n\n  return function init(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexports.init = init;\n\nvar injectStyleSheet = function injectStyleSheet() {\n  if (!instance) {\n    throw _constants.ERRORS.TypedError('Init_IframeBlocked');\n  }\n\n  var doc = instance.ownerDocument;\n  var head = doc.head || doc.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.setAttribute('type', 'text/css');\n  style.setAttribute('id', 'TrezorConnectStylesheet'); // $FlowIssue\n\n  if (style.styleSheet) {\n    // IE\n    // $FlowIssue\n    style.styleSheet.cssText = _inlineStyles[\"default\"];\n    head.appendChild(style);\n  } else {\n    style.appendChild(document.createTextNode(_inlineStyles[\"default\"]));\n    head.append(style);\n  }\n};\n\nvar handleIframeBlocked = function handleIframeBlocked() {\n  window.clearTimeout(timeout);\n  exports.error = error = _constants.ERRORS.TypedError('Init_IframeBlocked'); // eslint-disable-next-line no-use-before-define\n\n  dispose();\n  initPromise.reject(error);\n}; // post messages to iframe\n\n\nvar postMessage = function postMessage(message, usePromise) {\n  if (usePromise === void 0) {\n    usePromise = true;\n  }\n\n  if (!instance) {\n    throw _constants.ERRORS.TypedError('Init_IframeBlocked');\n  }\n\n  if (usePromise) {\n    _messageID++;\n    message.id = _messageID;\n    messagePromises[_messageID] = (0, _deferred.create)();\n    var promise = messagePromises[_messageID].promise;\n    instance.contentWindow.postMessage(message, origin);\n    return promise;\n  }\n\n  instance.contentWindow.postMessage(message, origin);\n  return null;\n};\n\nexports.postMessage = postMessage;\n\nvar dispose = function dispose() {\n  if (instance && instance.parentNode) {\n    try {\n      instance.parentNode.removeChild(instance);\n    } catch (e) {// do nothing\n    }\n  }\n\n  exports.instance = instance = null;\n  exports.timeout = timeout = 0;\n};\n\nexports.dispose = dispose;\n\nvar clearTimeout = function clearTimeout() {\n  window.clearTimeout(timeout);\n};\n\nexports.clearTimeout = clearTimeout;","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getEncryptionPublicKey = exports.decryptSafely = exports.decrypt = exports.encryptSafely = exports.encrypt = void 0;\nconst nacl = __importStar(require(\"tweetnacl\"));\nconst naclUtil = __importStar(require(\"tweetnacl-util\"));\nconst utils_1 = require(\"./utils\");\n/**\n * Encrypt a message.\n *\n * @param options - The encryption options.\n * @param options.publicKey - The public key of the message recipient.\n * @param options.data - The message data.\n * @param options.version - The type of encryption to use.\n * @returns The encrypted data.\n */\nfunction encrypt({ publicKey, data, version, }) {\n    if (utils_1.isNullish(publicKey)) {\n        throw new Error('Missing publicKey parameter');\n    }\n    else if (utils_1.isNullish(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if (utils_1.isNullish(version)) {\n        throw new Error('Missing version parameter');\n    }\n    switch (version) {\n        case 'x25519-xsalsa20-poly1305': {\n            if (typeof data !== 'string') {\n                throw new Error('Message data must be given as a string');\n            }\n            // generate ephemeral keypair\n            const ephemeralKeyPair = nacl.box.keyPair();\n            // assemble encryption parameters - from string to UInt8\n            let pubKeyUInt8Array;\n            try {\n                pubKeyUInt8Array = naclUtil.decodeBase64(publicKey);\n            }\n            catch (err) {\n                throw new Error('Bad public key');\n            }\n            const msgParamsUInt8Array = naclUtil.decodeUTF8(data);\n            const nonce = nacl.randomBytes(nacl.box.nonceLength);\n            // encrypt\n            const encryptedMessage = nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);\n            // handle encrypted data\n            const output = {\n                version: 'x25519-xsalsa20-poly1305',\n                nonce: naclUtil.encodeBase64(nonce),\n                ephemPublicKey: naclUtil.encodeBase64(ephemeralKeyPair.publicKey),\n                ciphertext: naclUtil.encodeBase64(encryptedMessage),\n            };\n            // return encrypted msg data\n            return output;\n        }\n        default:\n            throw new Error('Encryption type/version not supported');\n    }\n}\nexports.encrypt = encrypt;\n/**\n * Encrypt a message in a way that obscures the message length.\n *\n * The message is padded to a multiple of 2048 before being encrypted so that the length of the\n * resulting encrypted message can't be used to guess the exact length of the original message.\n *\n * @param options - The encryption options.\n * @param options.publicKey - The public key of the message recipient.\n * @param options.data - The message data.\n * @param options.version - The type of encryption to use.\n * @returns The encrypted data.\n */\nfunction encryptSafely({ publicKey, data, version, }) {\n    if (utils_1.isNullish(publicKey)) {\n        throw new Error('Missing publicKey parameter');\n    }\n    else if (utils_1.isNullish(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if (utils_1.isNullish(version)) {\n        throw new Error('Missing version parameter');\n    }\n    const DEFAULT_PADDING_LENGTH = 2 ** 11;\n    const NACL_EXTRA_BYTES = 16;\n    if (typeof data === 'object' && 'toJSON' in data) {\n        // remove toJSON attack vector\n        // TODO, check all possible children\n        throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');\n    }\n    // add padding\n    const dataWithPadding = {\n        data,\n        padding: '',\n    };\n    // calculate padding\n    const dataLength = Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');\n    const modVal = dataLength % DEFAULT_PADDING_LENGTH;\n    let padLength = 0;\n    // Only pad if necessary\n    if (modVal > 0) {\n        padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes\n    }\n    dataWithPadding.padding = '0'.repeat(padLength);\n    const paddedMessage = JSON.stringify(dataWithPadding);\n    return encrypt({ publicKey, data: paddedMessage, version });\n}\nexports.encryptSafely = encryptSafely;\n/**\n * Decrypt a message.\n *\n * @param options - The decryption options.\n * @param options.encryptedData - The encrypted data.\n * @param options.privateKey - The private key to decrypt with.\n * @returns The decrypted message.\n */\nfunction decrypt({ encryptedData, privateKey, }) {\n    if (utils_1.isNullish(encryptedData)) {\n        throw new Error('Missing encryptedData parameter');\n    }\n    else if (utils_1.isNullish(privateKey)) {\n        throw new Error('Missing privateKey parameter');\n    }\n    switch (encryptedData.version) {\n        case 'x25519-xsalsa20-poly1305': {\n            // string to buffer to UInt8Array\n            const recieverPrivateKeyUint8Array = nacl_decodeHex(privateKey);\n            const recieverEncryptionPrivateKey = nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey;\n            // assemble decryption parameters\n            const nonce = naclUtil.decodeBase64(encryptedData.nonce);\n            const ciphertext = naclUtil.decodeBase64(encryptedData.ciphertext);\n            const ephemPublicKey = naclUtil.decodeBase64(encryptedData.ephemPublicKey);\n            // decrypt\n            const decryptedMessage = nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey);\n            // return decrypted msg data\n            let output;\n            try {\n                output = naclUtil.encodeUTF8(decryptedMessage);\n            }\n            catch (err) {\n                throw new Error('Decryption failed.');\n            }\n            if (output) {\n                return output;\n            }\n            throw new Error('Decryption failed.');\n        }\n        default:\n            throw new Error('Encryption type/version not supported.');\n    }\n}\nexports.decrypt = decrypt;\n/**\n * Decrypt a message that has been encrypted using `encryptSafely`.\n *\n * @param options - The decryption options.\n * @param options.encryptedData - The encrypted data.\n * @param options.privateKey - The private key to decrypt with.\n * @returns The decrypted message.\n */\nfunction decryptSafely({ encryptedData, privateKey, }) {\n    if (utils_1.isNullish(encryptedData)) {\n        throw new Error('Missing encryptedData parameter');\n    }\n    else if (utils_1.isNullish(privateKey)) {\n        throw new Error('Missing privateKey parameter');\n    }\n    const dataWithPadding = JSON.parse(decrypt({ encryptedData, privateKey }));\n    return dataWithPadding.data;\n}\nexports.decryptSafely = decryptSafely;\n/**\n * Get the encryption public key for the given key.\n *\n * @param privateKey - The private key to generate the encryption public key with.\n * @returns The encryption public key.\n */\nfunction getEncryptionPublicKey(privateKey) {\n    const privateKeyUint8Array = nacl_decodeHex(privateKey);\n    const encryptionPublicKey = nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;\n    return naclUtil.encodeBase64(encryptionPublicKey);\n}\nexports.getEncryptionPublicKey = getEncryptionPublicKey;\n/**\n * Convert a hex string to the UInt8Array format used by nacl.\n *\n * @param msgHex - The string to convert.\n * @returns The converted string.\n */\nfunction nacl_decodeHex(msgHex) {\n    const msgBase64 = Buffer.from(msgHex, 'hex').toString('base64');\n    return naclUtil.decodeBase64(msgBase64);\n}\n//# sourceMappingURL=encryption.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.recoverTypedSignature = exports.signTypedData = exports.typedSignatureHash = exports.TypedDataUtils = exports.TYPED_MESSAGE_SCHEMA = exports.SignTypedDataVersion = void 0;\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst ethereumjs_abi_1 = require(\"ethereumjs-abi\");\nconst utils_1 = require(\"./utils\");\n/**\n * Represents the version of `signTypedData` being used.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on EIP-712, except that arrays and recursive data structures are not supported.\n *\n * V4 is based on EIP-712, and includes full support of arrays and recursive data structures.\n */\nvar SignTypedDataVersion;\n(function (SignTypedDataVersion) {\n    SignTypedDataVersion[\"V1\"] = \"V1\";\n    SignTypedDataVersion[\"V3\"] = \"V3\";\n    SignTypedDataVersion[\"V4\"] = \"V4\";\n})(SignTypedDataVersion = exports.SignTypedDataVersion || (exports.SignTypedDataVersion = {}));\nexports.TYPED_MESSAGE_SCHEMA = {\n    type: 'object',\n    properties: {\n        types: {\n            type: 'object',\n            additionalProperties: {\n                type: 'array',\n                items: {\n                    type: 'object',\n                    properties: {\n                        name: { type: 'string' },\n                        type: { type: 'string', enum: getSolidityTypes() },\n                    },\n                    required: ['name', 'type'],\n                },\n            },\n        },\n        primaryType: { type: 'string' },\n        domain: { type: 'object' },\n        message: { type: 'object' },\n    },\n    required: ['types', 'primaryType', 'domain', 'message'],\n};\n/**\n * Get a list of all Solidity types.\n *\n * @returns A list of all Solidity types.\n */\nfunction getSolidityTypes() {\n    const types = ['bool', 'address', 'string', 'bytes'];\n    const ints = Array.from(new Array(32)).map((_, index) => `int${(index + 1) * 8}`);\n    const uints = Array.from(new Array(32)).map((_, index) => `uint${(index + 1) * 8}`);\n    const bytes = Array.from(new Array(32)).map((_, index) => `bytes${index + 1}`);\n    return [...types, ...ints, ...uints, ...bytes];\n}\n/**\n * Validate that the given value is a valid version string.\n *\n * @param version - The version value to validate.\n * @param allowedVersions - A list of allowed versions. If omitted, all versions are assumed to be\n * allowed.\n */\nfunction validateVersion(version, allowedVersions) {\n    if (!Object.keys(SignTypedDataVersion).includes(version)) {\n        throw new Error(`Invalid version: '${version}'`);\n    }\n    else if (allowedVersions && !allowedVersions.includes(version)) {\n        throw new Error(`SignTypedDataVersion not allowed: '${version}'. Allowed versions are: ${allowedVersions.join(', ')}`);\n    }\n}\n/**\n * Encode a single field.\n *\n * @param types - All type definitions.\n * @param name - The name of the field to encode.\n * @param type - The type of the field being encoded.\n * @param value - The value to encode.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns Encoded representation of the field.\n */\nfunction encodeField(types, name, type, value, version) {\n    validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n    if (types[type] !== undefined) {\n        return [\n            'bytes32',\n            version === SignTypedDataVersion.V4 && value == null // eslint-disable-line no-eq-null\n                ? '0x0000000000000000000000000000000000000000000000000000000000000000'\n                : ethereumjs_util_1.keccak(encodeData(type, value, types, version)),\n        ];\n    }\n    if (value === undefined) {\n        throw new Error(`missing value for field ${name} of type ${type}`);\n    }\n    if (type === 'bytes') {\n        return ['bytes32', ethereumjs_util_1.keccak(value)];\n    }\n    if (type === 'string') {\n        // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex\n        if (typeof value === 'string') {\n            value = Buffer.from(value, 'utf8');\n        }\n        return ['bytes32', ethereumjs_util_1.keccak(value)];\n    }\n    if (type.lastIndexOf(']') === type.length - 1) {\n        if (version === SignTypedDataVersion.V3) {\n            throw new Error('Arrays are unimplemented in encodeData; use V4 extension');\n        }\n        const parsedType = type.slice(0, type.lastIndexOf('['));\n        const typeValuePairs = value.map((item) => encodeField(types, name, parsedType, item, version));\n        return [\n            'bytes32',\n            ethereumjs_util_1.keccak(ethereumjs_abi_1.rawEncode(typeValuePairs.map(([t]) => t), typeValuePairs.map(([, v]) => v))),\n        ];\n    }\n    return [type, value];\n}\n/**\n * Encodes an object by encoding and concatenating each of its members.\n *\n * @param primaryType - The root type.\n * @param data - The object to encode.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns An encoded representation of an object.\n */\nfunction encodeData(primaryType, data, types, version) {\n    validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n    const encodedTypes = ['bytes32'];\n    const encodedValues = [hashType(primaryType, types)];\n    for (const field of types[primaryType]) {\n        if (version === SignTypedDataVersion.V3 && data[field.name] === undefined) {\n            continue;\n        }\n        const [type, value] = encodeField(types, field.name, field.type, data[field.name], version);\n        encodedTypes.push(type);\n        encodedValues.push(value);\n    }\n    return ethereumjs_abi_1.rawEncode(encodedTypes, encodedValues);\n}\n/**\n * Encodes the type of an object by encoding a comma delimited list of its members.\n *\n * @param primaryType - The root type to encode.\n * @param types - Type definitions for all types included in the message.\n * @returns An encoded representation of the primary type.\n */\nfunction encodeType(primaryType, types) {\n    let result = '';\n    const unsortedDeps = findTypeDependencies(primaryType, types);\n    unsortedDeps.delete(primaryType);\n    const deps = [primaryType, ...Array.from(unsortedDeps).sort()];\n    for (const type of deps) {\n        const children = types[type];\n        if (!children) {\n            throw new Error(`No type definition specified: ${type}`);\n        }\n        result += `${type}(${types[type]\n            .map(({ name, type: t }) => `${t} ${name}`)\n            .join(',')})`;\n    }\n    return result;\n}\n/**\n * Finds all types within a type definition object.\n *\n * @param primaryType - The root type.\n * @param types - Type definitions for all types included in the message.\n * @param results - The current set of accumulated types.\n * @returns The set of all types found in the type definition.\n */\nfunction findTypeDependencies(primaryType, types, results = new Set()) {\n    [primaryType] = primaryType.match(/^\\w*/u);\n    if (results.has(primaryType) || types[primaryType] === undefined) {\n        return results;\n    }\n    results.add(primaryType);\n    for (const field of types[primaryType]) {\n        findTypeDependencies(field.type, types, results);\n    }\n    return results;\n}\n/**\n * Hashes an object.\n *\n * @param primaryType - The root type.\n * @param data - The object to hash.\n * @param types - Type definitions for all types included in the message.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the object.\n */\nfunction hashStruct(primaryType, data, types, version) {\n    validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n    return ethereumjs_util_1.keccak(encodeData(primaryType, data, types, version));\n}\n/**\n * Hashes the type of an object.\n *\n * @param primaryType - The root type to hash.\n * @param types - Type definitions for all types included in the message.\n * @returns The hash of the object type.\n */\nfunction hashType(primaryType, types) {\n    return ethereumjs_util_1.keccak(encodeType(primaryType, types));\n}\n/**\n * Removes properties from a message object that are not defined per EIP-712.\n *\n * @param data - The typed message object.\n * @returns The typed message object with only allowed fields.\n */\nfunction sanitizeData(data) {\n    const sanitizedData = {};\n    for (const key in exports.TYPED_MESSAGE_SCHEMA.properties) {\n        if (data[key]) {\n            sanitizedData[key] = data[key];\n        }\n    }\n    if ('types' in sanitizedData) {\n        sanitizedData.types = Object.assign({ EIP712Domain: [] }, sanitizedData.types);\n    }\n    return sanitizedData;\n}\n/**\n * Hash a typed message according to EIP-712. The returned message starts with the EIP-712 prefix,\n * which is \"1901\", followed by the hash of the domain separator, then the data (if any).\n * The result is hashed again and returned.\n *\n * This function does not sign the message. The resulting hash must still be signed to create an\n * EIP-712 signature.\n *\n * @param typedData - The typed message to hash.\n * @param version - The EIP-712 version the encoding should comply with.\n * @returns The hash of the typed message.\n */\nfunction eip712Hash(typedData, version) {\n    validateVersion(version, [SignTypedDataVersion.V3, SignTypedDataVersion.V4]);\n    const sanitizedData = sanitizeData(typedData);\n    const parts = [Buffer.from('1901', 'hex')];\n    parts.push(hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, version));\n    if (sanitizedData.primaryType !== 'EIP712Domain') {\n        parts.push(hashStruct(\n        // TODO: Validate that this is a string, so this type cast can be removed.\n        sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, version));\n    }\n    return ethereumjs_util_1.keccak(Buffer.concat(parts));\n}\n/**\n * A collection of utility functions used for signing typed data.\n */\nexports.TypedDataUtils = {\n    encodeData,\n    encodeType,\n    findTypeDependencies,\n    hashStruct,\n    hashType,\n    sanitizeData,\n    eip712Hash,\n};\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The '0x'-prefixed hex encoded hash representing the type of the provided message.\n */\nfunction typedSignatureHash(typedData) {\n    const hashBuffer = _typedSignatureHash(typedData);\n    return ethereumjs_util_1.bufferToHex(hashBuffer);\n}\nexports.typedSignatureHash = typedSignatureHash;\n/**\n * Generate the \"V1\" hash for the provided typed message.\n *\n * The hash will be generated in accordance with an earlier version of the EIP-712\n * specification. This hash is used in `signTypedData_v1`.\n *\n * @param typedData - The typed message.\n * @returns The hash representing the type of the provided message.\n */\nfunction _typedSignatureHash(typedData) {\n    const error = new Error('Expect argument to be non-empty array');\n    if (typeof typedData !== 'object' ||\n        !('length' in typedData) ||\n        !typedData.length) {\n        throw error;\n    }\n    const data = typedData.map(function (e) {\n        if (e.type !== 'bytes') {\n            return e.value;\n        }\n        return utils_1.legacyToBuffer(e.value);\n    });\n    const types = typedData.map(function (e) {\n        return e.type;\n    });\n    const schema = typedData.map(function (e) {\n        if (!e.name) {\n            throw error;\n        }\n        return `${e.type} ${e.name}`;\n    });\n    return ethereumjs_abi_1.soliditySHA3(['bytes32', 'bytes32'], [\n        ethereumjs_abi_1.soliditySHA3(new Array(typedData.length).fill('string'), schema),\n        ethereumjs_abi_1.soliditySHA3(types, data),\n    ]);\n}\n/**\n * Sign typed data according to EIP-712. The signing differs based upon the `version`.\n *\n * V1 is based upon [an early version of EIP-712](https://github.com/ethereum/EIPs/pull/712/commits/21abe254fe0452d8583d5b132b1d7be87c0439ca)\n * that lacked some later security improvements, and should generally be neglected in favor of\n * later versions.\n *\n * V3 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), except that arrays and\n * recursive data structures are not supported.\n *\n * V4 is based on [EIP-712](https://eips.ethereum.org/EIPS/eip-712), and includes full support of\n * arrays and recursive data structures.\n *\n * @param options - The signing options.\n * @param options.privateKey - The private key to sign with.\n * @param options.data - The typed data to sign.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nfunction signTypedData({ privateKey, data, version, }) {\n    validateVersion(version);\n    if (utils_1.isNullish(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if (utils_1.isNullish(privateKey)) {\n        throw new Error('Missing private key parameter');\n    }\n    const messageHash = version === SignTypedDataVersion.V1\n        ? _typedSignatureHash(data)\n        : exports.TypedDataUtils.eip712Hash(data, version);\n    const sig = ethereumjs_util_1.ecsign(messageHash, privateKey);\n    return utils_1.concatSig(ethereumjs_util_1.toBuffer(sig.v), sig.r, sig.s);\n}\nexports.signTypedData = signTypedData;\n/**\n * Recover the address of the account that created the given EIP-712\n * signature. The version provided must match the version used to\n * create the signature.\n *\n * @param options - The signature recovery options.\n * @param options.data - The typed data that was signed.\n * @param options.signature - The '0x-prefixed hex encoded message signature.\n * @param options.version - The signing version to use.\n * @returns The '0x'-prefixed hex address of the signer.\n */\nfunction recoverTypedSignature({ data, signature, version, }) {\n    validateVersion(version);\n    if (utils_1.isNullish(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if (utils_1.isNullish(signature)) {\n        throw new Error('Missing signature parameter');\n    }\n    const messageHash = version === SignTypedDataVersion.V1\n        ? _typedSignatureHash(data)\n        : exports.TypedDataUtils.eip712Hash(data, version);\n    const publicKey = utils_1.recoverPublicKey(messageHash, signature);\n    const sender = ethereumjs_util_1.publicToAddress(publicKey);\n    return ethereumjs_util_1.bufferToHex(sender);\n}\nexports.recoverTypedSignature = recoverTypedSignature;\n//# sourceMappingURL=sign-typed-data.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.normalize = exports.recoverPublicKey = exports.concatSig = exports.legacyToBuffer = exports.isNullish = exports.padWithZeroes = void 0;\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst ethjs_util_1 = require(\"ethjs-util\");\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */\nfunction padWithZeroes(hexString, targetLength) {\n    if (hexString !== '' && !/^[a-f0-9]+$/iu.test(hexString)) {\n        throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n    }\n    if (targetLength < 0) {\n        throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n    }\n    return String.prototype.padStart.call(hexString, targetLength, '0');\n}\nexports.padWithZeroes = padWithZeroes;\n/**\n * Returns `true` if the given value is nullish.\n *\n * @param value - The value being checked.\n * @returns Whether the value is nullish.\n */\nfunction isNullish(value) {\n    return value === null || value === undefined;\n}\nexports.isNullish = isNullish;\n/**\n * Convert a value to a Buffer. This function should be equivalent to the `toBuffer` function in\n * `ethereumjs-util@5.2.1`.\n *\n * @param value - The value to convert to a Buffer.\n * @returns The given value as a Buffer.\n */\nfunction legacyToBuffer(value) {\n    return typeof value === 'string' && !ethjs_util_1.isHexString(value)\n        ? Buffer.from(value)\n        : ethereumjs_util_1.toBuffer(value);\n}\nexports.legacyToBuffer = legacyToBuffer;\n/**\n * Concatenate an extended ECDSA signature into a single '0x'-prefixed hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature as a '0x'-prefixed string.\n */\nfunction concatSig(v, r, s) {\n    const rSig = ethereumjs_util_1.fromSigned(r);\n    const sSig = ethereumjs_util_1.fromSigned(s);\n    const vSig = ethereumjs_util_1.bufferToInt(v);\n    const rStr = padWithZeroes(ethereumjs_util_1.toUnsigned(rSig).toString('hex'), 64);\n    const sStr = padWithZeroes(ethereumjs_util_1.toUnsigned(sSig).toString('hex'), 64);\n    const vStr = ethjs_util_1.stripHexPrefix(ethjs_util_1.intToHex(vSig));\n    return ethereumjs_util_1.addHexPrefix(rStr.concat(sStr, vStr));\n}\nexports.concatSig = concatSig;\n/**\n * Recover the public key from the given signature and message hash.\n *\n * @param messageHash - The hash of the signed message.\n * @param signature - The signature.\n * @returns The public key of the signer.\n */\nfunction recoverPublicKey(messageHash, signature) {\n    const sigParams = ethereumjs_util_1.fromRpcSig(signature);\n    return ethereumjs_util_1.ecrecover(messageHash, sigParams.v, sigParams.r, sigParams.s);\n}\nexports.recoverPublicKey = recoverPublicKey;\n/**\n * Normalize the input to a lower-cased '0x'-prefixed hex string.\n *\n * @param input - The value to normalize.\n * @returns The normalized value.\n */\nfunction normalize(input) {\n    if (!input) {\n        return undefined;\n    }\n    if (typeof input === 'number') {\n        const buffer = ethereumjs_util_1.toBuffer(input);\n        input = ethereumjs_util_1.bufferToHex(buffer);\n    }\n    if (typeof input !== 'string') {\n        let msg = 'eth-sig-util.normalize() requires hex string or integer input.';\n        msg += ` received ${typeof input}: ${input}`;\n        throw new Error(msg);\n    }\n    return ethereumjs_util_1.addHexPrefix(input.toLowerCase());\n}\nexports.normalize = normalize;\n//# sourceMappingURL=utils.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.extractPublicKey = exports.recoverPersonalSignature = exports.personalSign = void 0;\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst utils_1 = require(\"./utils\");\n/**\n * Create an Ethereum-specific signature for a message.\n *\n * This function is equivalent to the `eth_sign` Ethereum JSON-RPC method as specified in EIP-1417,\n * as well as the MetaMask's `personal_sign` method.\n *\n * @param options - The personal sign options.\n * @param options.privateKey - The key to sign with.\n * @param options.data - The hex data to sign.\n * @returns The '0x'-prefixed hex encoded signature.\n */\nfunction personalSign({ privateKey, data, }) {\n    if (utils_1.isNullish(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if (utils_1.isNullish(privateKey)) {\n        throw new Error('Missing privateKey parameter');\n    }\n    const message = utils_1.legacyToBuffer(data);\n    const msgHash = ethereumjs_util_1.hashPersonalMessage(message);\n    const sig = ethereumjs_util_1.ecsign(msgHash, privateKey);\n    const serialized = utils_1.concatSig(ethereumjs_util_1.toBuffer(sig.v), sig.r, sig.s);\n    return serialized;\n}\nexports.personalSign = personalSign;\n/**\n * Recover the address of the account used to create the given Ethereum signature. The message\n * must have been signed using the `personalSign` function, or an equivalent function.\n *\n * @param options - The signature recovery options.\n * @param options.data - The hex data that was signed.\n * @param options.signature - The '0x'-prefixed hex encoded message signature.\n * @returns The '0x'-prefixed hex encoded address of the message signer.\n */\nfunction recoverPersonalSignature({ data, signature, }) {\n    if (utils_1.isNullish(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if (utils_1.isNullish(signature)) {\n        throw new Error('Missing signature parameter');\n    }\n    const publicKey = getPublicKeyFor(data, signature);\n    const sender = ethereumjs_util_1.publicToAddress(publicKey);\n    const senderHex = ethereumjs_util_1.bufferToHex(sender);\n    return senderHex;\n}\nexports.recoverPersonalSignature = recoverPersonalSignature;\n/**\n * Recover the public key of the account used to create the given Ethereum signature. The message\n * must have been signed using the `personalSign` function, or an equivalent function.\n *\n * @param options - The public key recovery options.\n * @param options.data - The hex data that was signed.\n * @param options.signature - The '0x'-prefixed hex encoded message signature.\n * @returns The '0x'-prefixed hex encoded public key of the message signer.\n */\nfunction extractPublicKey({ data, signature, }) {\n    if (utils_1.isNullish(data)) {\n        throw new Error('Missing data parameter');\n    }\n    else if (utils_1.isNullish(signature)) {\n        throw new Error('Missing signature parameter');\n    }\n    const publicKey = getPublicKeyFor(data, signature);\n    return `0x${publicKey.toString('hex')}`;\n}\nexports.extractPublicKey = extractPublicKey;\n/**\n * Get the public key for the given signature and message.\n *\n * @param message - The message that was signed.\n * @param signature - The '0x'-prefixed hex encoded message signature.\n * @returns The public key of the signer.\n */\nfunction getPublicKeyFor(message, signature) {\n    const messageHash = ethereumjs_util_1.hashPersonalMessage(utils_1.legacyToBuffer(message));\n    return utils_1.recoverPublicKey(messageHash, signature);\n}\n//# sourceMappingURL=personal-sign.js.map","let { urlAlphabet } = require('./url-alphabet/index.cjs')\nif (\"production\" !== 'production') {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nmodule.exports = { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.networkAccessEndowmentBuilder = void 0;\nconst Permission_1 = require(\"../Permission\");\nconst permissionName = 'endowment:network-access';\n/**\n * `endowment:network-access` returns the name of global browser API(s) that\n * enable network access. This is intended to populate the endowments of the\n * SES Compartment in which a Snap executes.\n */\nconst specificationBuilder = (_builderOptions) => {\n    return {\n        permissionType: Permission_1.PermissionType.Endowment,\n        targetKey: permissionName,\n        allowedCaveats: null,\n        endowmentGetter: (_getterOptions) => {\n            return ['fetch'];\n        },\n    };\n};\nexports.networkAccessEndowmentBuilder = Object.freeze({\n    targetKey: permissionName,\n    specificationBuilder,\n});\n//# sourceMappingURL=network-access.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PermissionsRequestNotFoundError = exports.DuplicateCaveatError = exports.ForbiddenCaveatError = exports.InvalidCaveatFieldsError = exports.CaveatInvalidJsonError = exports.CaveatMissingValueError = exports.InvalidCaveatTypeError = exports.InvalidCaveatError = exports.CaveatAlreadyExistsError = exports.CaveatDoesNotExistError = exports.InvalidCaveatsPropertyError = exports.UnrecognizedCaveatTypeError = exports.EndowmentPermissionDoesNotExistError = exports.PermissionDoesNotExistError = exports.InvalidApprovedPermissionError = exports.UnrecognizedSubjectError = exports.InvalidSubjectIdentifierError = exports.internalError = exports.userRejectedRequest = exports.invalidParams = exports.methodNotFound = exports.unauthorized = void 0;\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nfunction unauthorized(opts) {\n    return eth_rpc_errors_1.ethErrors.provider.unauthorized({\n        message: 'Unauthorized to perform action. Try requesting the required permission(s) first. For more information, see: https://docs.metamask.io/guide/rpc-api.html#permissions',\n        data: opts.data,\n    });\n}\nexports.unauthorized = unauthorized;\nfunction methodNotFound(method, data) {\n    const message = `The method \"${method}\" does not exist / is not available.`;\n    const opts = { message };\n    if (data !== undefined) {\n        opts.data = data;\n    }\n    return eth_rpc_errors_1.ethErrors.rpc.methodNotFound(opts);\n}\nexports.methodNotFound = methodNotFound;\nfunction invalidParams(opts) {\n    return eth_rpc_errors_1.ethErrors.rpc.invalidParams({\n        data: opts.data,\n        message: opts.message,\n    });\n}\nexports.invalidParams = invalidParams;\nfunction userRejectedRequest(data) {\n    return eth_rpc_errors_1.ethErrors.provider.userRejectedRequest({ data });\n}\nexports.userRejectedRequest = userRejectedRequest;\nfunction internalError(message, data) {\n    return eth_rpc_errors_1.ethErrors.rpc.internal({ message, data });\n}\nexports.internalError = internalError;\nclass InvalidSubjectIdentifierError extends Error {\n    constructor(origin) {\n        super(`Invalid subject identifier: \"${typeof origin === 'string' ? origin : typeof origin}\"`);\n    }\n}\nexports.InvalidSubjectIdentifierError = InvalidSubjectIdentifierError;\nclass UnrecognizedSubjectError extends Error {\n    constructor(origin) {\n        super(`Unrecognized subject: \"${origin}\" has no permissions.`);\n    }\n}\nexports.UnrecognizedSubjectError = UnrecognizedSubjectError;\nclass InvalidApprovedPermissionError extends Error {\n    constructor(origin, target, approvedPermission) {\n        super(`Invalid approved permission for origin \"${origin}\" and target \"${target}\".`);\n        this.data = { origin, target, approvedPermission };\n    }\n}\nexports.InvalidApprovedPermissionError = InvalidApprovedPermissionError;\nclass PermissionDoesNotExistError extends Error {\n    constructor(origin, target) {\n        super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n    }\n}\nexports.PermissionDoesNotExistError = PermissionDoesNotExistError;\nclass EndowmentPermissionDoesNotExistError extends Error {\n    constructor(target, origin) {\n        super(`Subject \"${origin}\" has no permission for \"${target}\".`);\n        if (origin) {\n            this.data = { origin };\n        }\n    }\n}\nexports.EndowmentPermissionDoesNotExistError = EndowmentPermissionDoesNotExistError;\nclass UnrecognizedCaveatTypeError extends Error {\n    constructor(caveatType, origin, target) {\n        super(`Unrecognized caveat type: \"${caveatType}\"`);\n        this.data = { caveatType };\n        if (origin !== undefined) {\n            this.data.origin = origin;\n        }\n        if (target !== undefined) {\n            this.data.target = target;\n        }\n    }\n}\nexports.UnrecognizedCaveatTypeError = UnrecognizedCaveatTypeError;\nclass InvalidCaveatsPropertyError extends Error {\n    constructor(origin, target, caveatsProperty) {\n        super(`The \"caveats\" property of permission for \"${target}\" of subject \"${origin}\" is invalid. It must be a non-empty array if specified.`);\n        this.data = { origin, target, caveatsProperty };\n    }\n}\nexports.InvalidCaveatsPropertyError = InvalidCaveatsPropertyError;\nclass CaveatDoesNotExistError extends Error {\n    constructor(origin, target, caveatType) {\n        super(`Permission for \"${target}\" of subject \"${origin}\" has no caveat of type \"${caveatType}\".`);\n    }\n}\nexports.CaveatDoesNotExistError = CaveatDoesNotExistError;\nclass CaveatAlreadyExistsError extends Error {\n    constructor(origin, target, caveatType) {\n        super(`Permission for \"${target}\" of subject \"${origin}\" already has a caveat of type \"${caveatType}\".`);\n    }\n}\nexports.CaveatAlreadyExistsError = CaveatAlreadyExistsError;\nclass InvalidCaveatError extends eth_rpc_errors_1.EthereumRpcError {\n    constructor(receivedCaveat, origin, target) {\n        super(eth_rpc_errors_1.errorCodes.rpc.invalidParams, `Invalid caveat. Caveats must be plain objects.`, { receivedCaveat });\n        this.data = { origin, target };\n    }\n}\nexports.InvalidCaveatError = InvalidCaveatError;\nclass InvalidCaveatTypeError extends Error {\n    constructor(caveat, origin, target) {\n        super(`Caveat types must be strings. Received: \"${typeof caveat.type}\"`);\n        this.data = { caveat, origin, target };\n    }\n}\nexports.InvalidCaveatTypeError = InvalidCaveatTypeError;\nclass CaveatMissingValueError extends Error {\n    constructor(caveat, origin, target) {\n        super(`Caveat is missing \"value\" field.`);\n        this.data = { caveat, origin, target };\n    }\n}\nexports.CaveatMissingValueError = CaveatMissingValueError;\nclass CaveatInvalidJsonError extends Error {\n    constructor(caveat, origin, target) {\n        super(`Caveat \"value\" is invalid JSON.`);\n        this.data = { caveat, origin, target };\n    }\n}\nexports.CaveatInvalidJsonError = CaveatInvalidJsonError;\nclass InvalidCaveatFieldsError extends Error {\n    constructor(caveat, origin, target) {\n        super(`Caveat has unexpected number of fields: \"${Object.keys(caveat).length}\"`);\n        this.data = { caveat, origin, target };\n    }\n}\nexports.InvalidCaveatFieldsError = InvalidCaveatFieldsError;\nclass ForbiddenCaveatError extends Error {\n    constructor(caveatType, origin, targetName) {\n        super(`Permissions for target \"${targetName}\" may not have caveats of type \"${caveatType}\".`);\n        this.data = { caveatType, origin, target: targetName };\n    }\n}\nexports.ForbiddenCaveatError = ForbiddenCaveatError;\nclass DuplicateCaveatError extends Error {\n    constructor(caveatType, origin, targetName) {\n        super(`Permissions for target \"${targetName}\" contains multiple caveats of type \"${caveatType}\".`);\n        this.data = { caveatType, origin, target: targetName };\n    }\n}\nexports.DuplicateCaveatError = DuplicateCaveatError;\nclass PermissionsRequestNotFoundError extends Error {\n    constructor(id) {\n        super(`Permissions request with id \"${id}\" not found.`);\n    }\n}\nexports.PermissionsRequestNotFoundError = PermissionsRequestNotFoundError;\n//# sourceMappingURL=errors.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.isValidJson = exports.isNonEmptyArray = exports.hasProperty = exports.isPlainObject = exports.timeSince = void 0;\nconst fast_deep_equal_1 = __importDefault(require(\"fast-deep-equal\"));\n/**\n * @param timestamp - A Unix millisecond timestamp.\n * @returns The number of milliseconds elapsed since the specified timestamp.\n */\nfunction timeSince(timestamp) {\n    return Date.now() - timestamp;\n}\nexports.timeSince = timeSince;\nfunction isPlainObject(value) {\n    return Boolean(value) && typeof value === 'object' && !Array.isArray(value);\n}\nexports.isPlainObject = isPlainObject;\nconst hasProperty = (object, key) => Reflect.hasOwnProperty.call(object, key);\nexports.hasProperty = hasProperty;\n/**\n * {@link NonEmptyArray} type guard.\n *\n * @template T - The non-empty array member type.\n * @param value - The value to check.\n * @returns Whether the value is a non-empty array.\n */\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\nexports.isNonEmptyArray = isNonEmptyArray;\n/**\n * {@link Json} type guard.\n *\n * @param value - The value to check.\n * @returns Whether the value is valid JSON.\n */\nfunction isValidJson(value) {\n    try {\n        return fast_deep_equal_1.default(value, JSON.parse(JSON.stringify(value)));\n    }\n    catch (_) {\n        return false;\n    }\n}\nexports.isValidJson = isValidJson;\n//# sourceMappingURL=utils.js.map","module.exports = function deepFreeze (o) {\n  Object.freeze(o);\n\n  var oIsFunction = typeof o === \"function\";\n  var hasOwnProp = Object.prototype.hasOwnProperty;\n\n  Object.getOwnPropertyNames(o).forEach(function (prop) {\n    if (hasOwnProp.call(o, prop)\n    && (oIsFunction ? prop !== 'caller' && prop !== 'callee' && prop !== 'arguments' : true )\n    && o[prop] !== null\n    && (typeof o[prop] === \"object\" || typeof o[prop] === \"function\")\n    && !Object.isFrozen(o[prop])) {\n      deepFreeze(o[prop]);\n    }\n  });\n  \n  return o;\n};\n"]}